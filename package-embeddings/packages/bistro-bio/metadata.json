{
  "package": "bistro-bio",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 57,
  "creation_timestamp": "2025-08-15T15:07:35.107052",
  "modules": [
    {
      "module_path": "Bistro_bio_examples.Chen2008.Sample",
      "library": "bistro-bio.examples",
      "description": "This module defines a set of specific ChIP-seq samples from the Chen 2008 study, including transcription factors Nanog, Pou5f1, Sox2, and Essrb. It provides functions to retrieve metadata such as SRR IDs, source data, and URLs for published peaks, along with serialization and string conversion utilities. These functions support direct access to experimental data for analysis workflows, such as retrieving FASTQ sources or peak files for specific samples.",
      "description_length": 457,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio_examples.Chen2008.FQS",
      "library": "bistro-bio.examples",
      "description": "This module provides functions to retrieve FASTQ files and associated quality control reports for sequencing samples. It handles both compressed and uncompressed FASTQ files, returning them in a structured format that supports single-end or paired-end data. The functions are used to prepare input files and generate quality metrics for downstream analysis in a reproducible bioinformatics workflow.",
      "description_length": 399,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio_examples.Chen2008.Dnaseq",
      "library": "bistro-bio.examples",
      "description": "This module provides access to mapped read files in SAM or BAM formats, along with indexed BAM directories, for specific ChIP-seq experiments from the Chen 2008 dataset. It supports operations such as generating coverage tracks in bigWig format, computing alignment statistics, and performing feature counting using GFF annotations. Concrete use cases include analyzing transcription factor binding sites via ChIP-seq data for Nanog, Pou5f1, Sox2, and Essrb in embryonic stem cells.",
      "description_length": 482,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio_examples.Zhou2011",
      "library": "bistro-bio.examples",
      "description": "This module implements ChIP-seq analysis workflows for transcription factor studies, handling operations like sample metadata extraction, read alignment, peak calling, and motif discovery using tools like Bowtie and MEME. It works with genomic datasets from the GSE29506 accession, structured around experimental conditions, ChIP samples, and reference genomes, while generating quality control metrics and interactive HTML reports. Specific use cases include analyzing PHO4 and Cbf1 binding patterns through peak occupancy distributions and motif enrichment analysis in the context of the Zhou2011 study.",
      "description_length": 605,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio_examples.Chen2008",
      "library": "bistro-bio.examples",
      "description": "This module provides direct access to experimental data from the Chen 2008 ChIP-seq study, including sample metadata, FASTQ retrieval, and mapped read analysis. It supports operations such as fetching sequence files, generating quality reports, converting alignments to coverage tracks, and performing feature counting on transcription factor binding data. Concrete use cases include analyzing Nanog, Pou5f1, Sox2, and Essrb binding sites in embryonic stem cells using ChIP-seq workflows.",
      "description_length": 488,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio_examples",
      "library": "bistro-bio.examples",
      "description": "This module provides direct access to experimental datasets and analysis workflows for ChIP-seq studies from Chen 2008 and Zhou 2011, supporting operations such as FASTQ retrieval, read alignment, peak calling, motif discovery, and feature counting. It works with genomic data structured as FASTQ files, aligned reads, coverage tracks, and peak annotations, along with associated metadata like sample conditions and transcription factors. Concrete use cases include analyzing binding sites for Nanog, Pou5f1, Sox2, and Essrb in embryonic stem cells (Chen2008), and studying PHO4 and Cbf1 binding patterns through peak occupancy and motif enrichment (Zhou2011).",
      "description_length": 660,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Fastq_sample.Make",
      "library": "bistro-bio",
      "description": "This module processes FASTQ data by providing access to raw FASTQ files, gzipped FASTQ files, and associated FastQC reports. It works with data types representing FASTQ samples, including single-end and paired-end configurations. Concrete use cases include retrieving FASTQ file paths, generating quality control reports, and handling compressed FASTQ inputs for downstream analysis.",
      "description_length": 383,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Ucsc_gb.Lift_over",
      "library": "bistro-bio",
      "description": "This module translates genomic coordinates between assemblies using UCSC liftOver. It works with BED files and genome identifiers, providing functions to generate chain files, map regions, and separate mapped and unmapped outputs. Concrete use cases include converting ChIP-seq peaks from one genome version to another and reconciling annotation differences across assemblies.",
      "description_length": 376,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Dnaseq_with_reference_genome.Make",
      "library": "bistro-bio",
      "description": "This module processes DNA sequencing data aligned to a reference genome, providing operations to retrieve mapped reads in various formats (SAM, BAM, indexed BAM), compute coverage tracks, perform feature counting, screen for contaminants, and generate alignment statistics. It works with FASTQ, BAM, GFF, and FASTA data types, supporting tasks like duplicate removal, coverage visualization, and quality control reporting. Concrete use cases include analyzing ChIP-seq alignments, checking for sequencing contamination, and summarizing mapping statistics for downstream analysis.",
      "description_length": 579,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Bedtools.Cmd",
      "library": "bistro-bio",
      "description": "Performs coordinate adjustment on genomic intervals using BEDTools slop, supporting absolute or percentage-based expansion on either or both sides of intervals. Operates on BED or interval files and requires chromosome size definitions. Useful for extending capture regions in genomic analyses or adjusting peak boundaries in ChIP-seq workflows.",
      "description_length": 345,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Bowtie",
      "library": "bistro-bio",
      "description": "This module implements Bowtie-based sequence alignment workflows. It provides functions to build Bowtie indices from FASTA files and perform alignments against those indices using FASTQ samples, producing SAM output. The module directly handles FASTA, FASTQ, and SAM file formats with specific parameters for alignment sensitivity and output control.",
      "description_length": 350,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Phyml",
      "library": "bistro-bio",
      "description": "This module runs PhyML to infer phylogenetic trees from sequence alignments. It supports nucleotide and amino acid data with various substitution models and options for bootstrapping, random starts, and parameter estimation. The result is a directory containing output files, including the inferred tree in Newick format.",
      "description_length": 321,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Jaspar",
      "library": "bistro-bio",
      "description": "This module provides access to the JASPAR database of transcription factor binding profiles. It includes operations to retrieve the non-redundant core vertebrate motif collection and to parse motif lists into workflow-compatible structures. The primary data types are directories representing JASPAR databases and workflows producing lists of Jaspar matrices. Concrete use cases include retrieving transcription factor binding motifs for regulatory genomics analyses and preparing motif data for downstream sequence scanning or enrichment analysis.",
      "description_length": 548,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Idba",
      "library": "bistro-bio",
      "description": "Converts FASTQ files to FASTA format, runs the IDBA-UD assembler on FASTA inputs, and extracts contigs or scaffolds from the assembly output. Works with FASTQ and FASTA files, along with IDBA-UD output directories. Used for processing sequencing data through to genome assembly.",
      "description_length": 278,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.ChIPQC",
      "library": "bistro-bio",
      "description": "Runs ChIPQC analysis on a list of samples, generating a directory containing quality control reports. Works with sample data structures that include genomic alignment and peak calling results. Useful for assessing the quality of ChIP-seq experiments by producing diagnostic plots and summaries.",
      "description_length": 294,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Busco",
      "library": "bistro-bio",
      "description": "This module implements the BUSCO workflow for assessing genome, transcriptome, or protein assembly completeness using lineage-specific databases. It supports running the analysis with customizable e-value thresholds, thread counts, and output formats, and returns a directory containing the results. The module works directly with FASTA files and a predefined set of taxonomic lineage options to target specific evolutionary groups during the analysis.",
      "description_length": 452,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Cisbp",
      "library": "bistro-bio",
      "description": "This module provides operations to fetch and process transcription factor (TF) data from CisBP, including downloading PWM archives and TF information files. It defines an `annotated_motif` type that combines motif identifiers, PWMs, and associated TF metadata, and exposes a workflow to generate a list of these motifs. Concrete use cases include motif analysis in regulatory genomics, such as identifying TF binding sites using PWM thresholds and sequence scanning.",
      "description_length": 466,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Samtools",
      "library": "bistro-bio",
      "description": "This module handles conversion, sorting, indexing, and analysis of BAM and SAM alignment files. It provides functions to convert between BAM and SAM formats, sort BAM files by name or position, generate indexed BAM directories, and extract alignment statistics with `flagstat`. Use cases include preprocessing sequencing data for downstream analysis, removing PCR duplicates with `rmdup`, and generating indexed FASTA references for alignment.",
      "description_length": 443,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Trinity",
      "library": "bistro-bio",
      "description": "This module assembles transcriptomes from RNA-seq data using Trinity, handling both single-end and paired-end reads. It provides functions for read normalization, generating assembly files, and extracting gene-to-transcript mappings. Key operations include `trinity` for assembly, `insilico_read_normalization` for preprocessing, and `get_Trinity_gene_to_trans_map` for annotation.",
      "description_length": 381,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Fastq",
      "library": "bistro-bio",
      "description": "Handles FASTQ file manipulation with operations to concatenate files, extract headers, and process compressed data. Works with FASTQ files encoded in Sanger, Solexa, or Phred64 formats. Useful for preprocessing sequencing data before alignment or quality analysis.",
      "description_length": 264,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Deeptools",
      "library": "bistro-bio",
      "description": "This module implements data processing and visualization tools for genomic signal analysis. It provides functions to generate signal tracks (bigWig, bedGraph) and plots (PNG, PDF, SVG) from BAM or bigWig files, supporting operations like coverage calculation, comparison, clustering, and enrichment analysis. Key use cases include visualizing read coverage across genomic regions, comparing signal profiles between samples, and generating heatmaps or correlation plots for quality control or downstream analysis.",
      "description_length": 512,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Quast",
      "library": "bistro-bio",
      "description": "Performs genome assembly quality assessment using QUAST, generating metrics and reports. Accepts a reference genome, optional labels, and a list of FASTA files containing assemblies. Produces a directory with QUAST output, including summary statistics and comparative analysis of the assemblies.",
      "description_length": 295,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Ensembl",
      "library": "bistro-bio",
      "description": "This module provides functions to retrieve reference genomes and annotation files from Ensembl for specific species and releases. It supports fetching UCSC-style genome identifiers, GFF and GTF annotations, and cDNA or DNA sequences in FASTA format, compressed with gzip. Concrete use cases include preparing genomic data for alignment, annotation analysis, and sequence retrieval in bioinformatics pipelines.",
      "description_length": 409,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Subread",
      "library": "bistro-bio",
      "description": "This module implements RNA-seq feature counting using the Subread toolkit, primarily through the `featureCounts` function. It processes BAM/SAM alignment files and GFF annotation files to quantify read counts per genomic feature, supporting strandedness options, quality filters, and multi-overlap configurations. Concrete outputs include raw count tables, HTSeq-compatible TSV, and summary statistics files.",
      "description_length": 408,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Bedtools",
      "library": "bistro-bio",
      "description": "This module implements genomic interval operations using BEDTools, including interval merging, intersection, closest feature detection, and coordinate adjustment via slop. It works with BED, GFF, and BAM file formats, along with chromosome size definitions. Concrete uses include extending ChIP-seq peak regions, finding overlapping genomic features, converting BAM alignments to BED intervals, and merging adjacent or overlapping intervals.",
      "description_length": 441,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Fastq_sample",
      "library": "bistro-bio",
      "description": "This module handles FASTQ sample construction and manipulation, supporting single-end and paired-end configurations in plain or gzipped formats. It provides functions to create samples from URLs or SRA datasets, inspect sample structure, and extract file dependencies for workflow integration. Use cases include preparing FASTQ inputs for alignment pipelines, quality control workflows, and managing sequencing data in bioinformatics analyses.",
      "description_length": 443,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Comparative_genomics",
      "library": "bistro-bio",
      "description": "Fetches RefSeq genome sequences matching a given pattern, returning a list of FASTA file paths within a Bistro workflow. It operates on string patterns and produces structured workflow values for genome data retrieval. This function is used to obtain reference genome datasets for comparative analysis in bioinformatics pipelines.",
      "description_length": 330,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Prokka",
      "library": "bistro-bio",
      "description": "Annotates prokaryotic genomes from FASTA files, producing structured output directories containing GFF, FASTA, and other annotation files. Accepts parameters to customize annotation behavior, such as specifying kingdom, genetic code, and input protein references. Suitable for genome analysis pipelines requiring per-genome annotation with customizable taxonomic and functional metadata.",
      "description_length": 387,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Kallisto",
      "library": "bistro-bio",
      "description": "This module implements RNA-seq quantification workflows using the Kallisto tool. It provides functions to build transcript indices, perform quantification on single or paired-end FASTQ data with configurable parameters, and extract abundance tables. The results can be merged across samples to produce combined expression matrices for downstream analysis.",
      "description_length": 355,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Ncbi_genome",
      "library": "bistro-bio",
      "description": "This module provides access to NCBI genome data through two main operations: retrieving an assembly summary in TSV format and fetching a specific genome assembly in gzipped FASTA format using genome and assembly IDs. It works with file values representing remote data sources, specifically TSV and FASTA files. Concrete use cases include downloading reference genomes for analysis pipelines and accessing metadata about genome assemblies.",
      "description_length": 438,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Raxml",
      "library": "bistro-bio",
      "description": "This module implements phylogenetic tree inference using RAxML, supporting maximum likelihood estimation with various substitution models. It accepts aligned sequence data in FASTA or PHYLIP format and produces inferred trees, distance matrices, and optimization results. Specific use cases include reconstructing evolutionary relationships from protein or nucleotide sequences using models like GTRGAMMA or PROTCAT.",
      "description_length": 416,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Star",
      "library": "bistro-bio",
      "description": "This module implements RNA-seq alignment workflows using the STAR aligner. It provides functions to generate a genome index from a FASTA file and to align single-end or paired-end FASTQ reads against the index, producing BAM output. Key parameters allow tuning alignment sensitivity, memory usage, and output formatting for downstream analysis like transcript quantification or variant detection.",
      "description_length": 396,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Meme_suite",
      "library": "bistro-bio",
      "description": "This module implements motif discovery and analysis workflows using the MEME suite tools. It provides functions for running MEME to identify motifs in FASTA sequences, generating motif logos from MEME output, performing MEME-ChIP analysis for ChIP-seq data, and using FIMO to search for motif occurrences in sequences. The module operates on FASTA files, MEME output directories, and produces PNG logos or FIMO result directories for motif matching.",
      "description_length": 449,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Gff",
      "library": "bistro-bio",
      "description": "Converts a BED3 file into a GFF file, assigning a specified feature type and attribute type to all entries. Works with BED3 and GFF file formats, handling genomic interval data. Useful for transforming simple genomic annotations into a more structured GFF format for downstream analysis tools that require detailed feature annotations.",
      "description_length": 335,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Sra_toolkit",
      "library": "bistro-bio",
      "description": "This module provides functions to download and convert SRA files into common sequence formats. It supports operations like `fastq_dump` and `fastq_dump_pe` for extracting FASTQ data from SRA identifiers or files, with options to filter and format output. It works directly with SRA data and produces FASTQ, FASTQ.gz, or FASTA outputs.",
      "description_length": 334,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Ucsc_gb",
      "library": "bistro-bio",
      "description": "This module provides functions for working with UCSC genome browsers, including retrieving chromosome sequences, converting between file formats (like BED to BigBed), and handling genome coordinate transformations. It operates on genome identifiers, FASTA files, 2bit sequences, and annotation formats like BED and BigWig. Concrete use cases include converting ChIP-seq peak files between genome assemblies and generating indexed sequence data for visualization.",
      "description_length": 462,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Fasta",
      "library": "bistro-bio",
      "description": "This module handles concatenation of FASTA files, supporting both plain and gzip-compressed formats. It provides functions to merge multiple FASTA inputs into a single output file, preserving the format. Use cases include combining sequence data from multiple sources into a unified dataset for downstream analysis.",
      "description_length": 315,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Spades",
      "library": "bistro-bio",
      "description": "This module implements genome and transcriptome assembly workflows using the SPAdes and RNA-SPAdes tools. It provides functions to run the assemblers on FASTQ samples, configure parameters like threads and memory, and extract output files such as contigs, scaffolds, and filtered transcripts. It is used to process sequencing data into assembled genomic or transcriptomic sequences for downstream analysis.",
      "description_length": 406,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.DESeq2",
      "library": "bistro-bio",
      "description": "Implements differential expression analysis using DESeq2, performing statistical comparisons between sample groups and generating normalized count data, effect tables, and visualizations like PCA and clustering. Works with RNA-seq count data structured as lists of file paths and sample groupings. Produces detailed output including comparison summaries, per-contrast results, and plots for downstream interpretation.",
      "description_length": 417,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Bowtie2",
      "library": "bistro-bio",
      "description": "This module implements Bowtie2 alignment workflows, providing functions to build indexes and perform sequence alignment. It operates on FASTA files for index construction and FASTQ samples for alignment, producing SAM output. Use cases include mapping short reads to reference genomes with customizable alignment parameters and handling paired-end or single-end data.",
      "description_length": 367,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Macs",
      "library": "bistro-bio",
      "description": "This module implements an interface to run MACS2 for peak calling from ChIP-seq data, supporting input formats like SAM and BAM. It provides typed parameters for genome size, duplicate handling, and model tuning, enabling precise peak detection with configurable thresholds and output formats. Functions like `run` execute the analysis, while `peaks_xls`, `narrow_peaks`, and `peak_summits` extract specific result outputs for downstream processing.",
      "description_length": 449,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.SE_or_PE",
      "library": "bistro-bio",
      "description": "Handles single-end and paired-end sequence data by providing transformations and access to raw values. Works with the `SE_or_PE.t` type, which encapsulates either single or paired sequences. Use for processing sequencing data in bioinformatics pipelines, such as applying functions to reads or extracting sequence values.",
      "description_length": 321,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Alignment_stats",
      "library": "bistro-bio",
      "description": "This module analyzes BAM files to generate alignment statistics. It provides functions to compute overall alignment metrics, fragment length distributions, and chromosome-level coverage statistics. These operations are used to assess the quality of sequencing data and identify biases in genomic coverage.",
      "description_length": 305,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Cisa",
      "library": "bistro-bio",
      "description": "Merges overlapping FASTA sequences from multiple files, optionally filtering by minimum length. Applies the CISA genome scaffolding algorithm to reorder and orient contigs based on a reference genome size. Useful for improving genome assembly continuity and accuracy in bioinformatics workflows.",
      "description_length": 295,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Htseq",
      "library": "bistro-bio",
      "description": "Performs read counting against genomic features using SAM or BAM alignment files and GFF annotations. Supports various counting modes, strandedness options, and quality filters. Produces a TSV file with feature counts suitable for downstream analysis like differential expression.",
      "description_length": 280,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Iqtree",
      "library": "bistro-bio",
      "description": "This module implements phylogenetic tree inference using the IQ-TREE algorithm, supporting DNA, protein, codon, binary, and morphological sequence data. It allows specification of substitution models like GTR for DNA or LG for proteins, with options to set rate heterogeneity, frequency types, and partitioned analyses. Concrete use cases include reconstructing evolutionary relationships from aligned sequence data in PHYLIP or FASTA format, generating maximum-likelihood trees, and producing statistical reports for model comparison.",
      "description_length": 535,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Idr",
      "library": "bistro-bio",
      "description": "This module processes and compares genomic interval data from multiple sources, supporting formats like BED, GFF, narrow peaks, and broad peaks. It provides functions to compute irreproducible discovery rates (IDR) between datasets, merge peaks using methods like sum or max, and rank peaks by signal or p-value. Concrete use cases include analyzing ChIP-seq replicates to assess peak consistency and generating IDR plots for quality control.",
      "description_length": 442,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.FastQC",
      "library": "bistro-bio",
      "description": "This module runs FastQC on FASTQ files, producing quality control reports in both raw and compressed formats. It provides access to the HTML report and specific visualizations including per-base quality and sequence content plots. These functions are used to analyze sequencing data quality directly from workflow pipelines.",
      "description_length": 324,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Fastq_screen",
      "library": "bistro-bio",
      "description": "Performs alignment of FASTQ samples against a collection of reference FASTA files using Bowtie2, with customizable filtering options for mapping results. Produces a directory containing alignment statistics and an HTML report summarizing the output. Useful for screening sequencing data against multiple genomic references to identify contamination or off-target matches.",
      "description_length": 371,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Srst2",
      "library": "bistro-bio",
      "description": "This module runs the SRST2 pipeline for short read sequence typing, handling both single-end and paired-end data. It aligns reads against MLST and gene databases, detecting alleles and generating consensus sequences with customizable thresholds for mismatches, coverage, and quality scores. Typical use cases include bacterial strain typing from FASTQ files and identifying genetic variants against reference databases.",
      "description_length": 419,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Picardtools",
      "library": "bistro-bio",
      "description": "This module provides tools for processing BAM files using Picard, including marking duplicates, sorting reads by name, and extracting processed output. It operates on indexed BAM directories and produces specialized BAM files for downstream analysis. Typical use cases include preparing sequencing data for variant calling by removing duplicates and ensuring proper read ordering.",
      "description_length": 380,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Hisat2",
      "library": "bistro-bio",
      "description": "This module implements RNA-seq alignment workflows using HISAT2. It provides functions to build HISAT2 indices from FASTA files and to perform read alignment against those indices using single or paired-end FASTQ samples, producing SAM output. Key operations include index customization via parameters like `bmax` and `offrate`, and alignment control through options such as `k`, `minins`, `maxins`, and orientation. Use cases include transcriptome analysis, variant detection, and gene expression quantification from high-throughput sequencing data.",
      "description_length": 550,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Dnaseq_with_reference_genome",
      "library": "bistro-bio",
      "description": "This module processes DNA sequencing data aligned to a reference genome, enabling retrieval of mapped reads in SAM, BAM, and indexed BAM formats, computing coverage tracks, performing feature counting, screening for contaminants, and generating alignment statistics. It operates on FASTQ, BAM, GFF, and FASTA data, supporting tasks such as duplicate removal, coverage visualization, and quality control reporting. Use cases include analyzing ChIP-seq alignments, detecting sequencing contamination, and summarizing mapping results for downstream analysis.",
      "description_length": 555,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Macs2",
      "library": "bistro-bio",
      "description": "This module processes genomic sequencing data to detect enriched regions using MACS2. It provides functions to generate bedGraph files from BAM alignments, call narrow or broad peaks with customizable parameters, and extract peak summits or peak lists. It works directly with BAM/SAM files, genomic size specifications, and produces directories containing peak data in various formats.",
      "description_length": 385,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio.Bed",
      "library": "bistro-bio",
      "description": "This module provides functions to retain specific BED file formats (3, 4, 5, or 6 fields) by filtering and preserving the structure of genomic interval data. Each function operates on a corresponding BED variant, ensuring the output maintains the expected field count and format. It is used in genomic data processing pipelines to enforce format consistency when manipulating interval-based annotations.",
      "description_length": 403,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bistro_bio.Tophat",
      "library": "bistro-bio",
      "description": "This module runs TopHat for aligning RNA-Seq reads to a reference genome using Bowtie or Bowtie2 indexes. It takes FASTQ files (single or paired-end) and produces a TopHat output directory containing alignment results. Key outputs include accepted hits in BAM format and splice junctions in BED6 format.",
      "description_length": 303,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bistro_bio",
      "library": "bistro-bio",
      "description": "This module provides functions for processing genomic intervals, sequence alignment, and transcriptome assembly, alongside quality control and format conversion tasks. It operates on standard bioinformatics data types including BAM, BED, FASTQ, GFF, and FASTA files, enabling analysis of genomic features, sequence variants, and expression profiles. Key applications include NGS pipeline execution, differential expression quantification, phylogenetic inference, and integration with genome browsers via UCSC utilities.",
      "description_length": 519,
      "index": 56,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 98,
    "meaningful_modules": 57,
    "filtered_empty_modules": 41,
    "retention_rate": 0.5816326530612245
  },
  "statistics": {
    "max_description_length": 660,
    "min_description_length": 264,
    "avg_description_length": 409.1578947368421,
    "embedding_file_size_mb": 0.8264226913452148
  }
}