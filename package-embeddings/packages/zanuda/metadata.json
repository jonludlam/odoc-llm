{
  "package": "zanuda",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 19,
  "creation_timestamp": "2025-06-18T16:35:50.327658",
  "modules": [
    {
      "module_path": "Zanuda_core.Utils.ErrorFormat",
      "description": "Formats error messages with precise location information, taking a filename, line, and column to annotate a value before printing. It operates on a filename string, line and column integers, and a value of any type. Used to generate human-readable error outputs in compiler or parser tools.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils.RDJsonl",
      "description": "Processes and prints JSON lines from a file with detailed error reporting, including line numbers and error codes. Operates on JSON line data and supports custom pretty-printing functions. Used to debug or inspect large JSONL files by highlighting specific lines and associated errors.",
      "description_length": 285,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.Utils.Report",
      "description": "Generates formatted text reports and parses JSON lines from a file, using location metadata and custom formatting functions. Operates on file paths, source code strings, and formatter objects to produce structured output. Used to create detailed error logs and process streaming JSON data in analysis workflows.",
      "description_length": 311,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Dune_project.Library",
      "description": "Converts a S-expression into a structured data type with fields for name, version, and dependencies. Operates on a custom type containing string-based identifiers and hierarchical dependency lists. Used to parse configuration files and validate package metadata during build processes.",
      "description_length": 285,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tast_pattern.Packed",
      "description": "Creates a structure that maps a parsed value to a transformed result, using a provided transformation function. Operates on tuples of type ('a, 'b) t, where 'a represents parsed data and 'b represents the output. Parses input according to a defined schema, suitable for processing structured text with location tracking.",
      "description_length": 320,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Collected_decls",
      "description": "Tracks defined and used identifiers to identify unused public values. Operates on strings representing names and processes OCaml signature structures. Used during analysis to log unused declarations in ML files.",
      "description_length": 211,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Collected_lints",
      "description": "Tracks and reports syntax and type-checking defects during compilation. Processes location-based data and custom lint reporters, supporting structured output in RdJSONl format. Enables tracking of type declaration locations and their presence.",
      "description_length": 243,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Config",
      "description": "This module manages dynamic adjustment and retrieval of tool parameters, including input/output paths, linting rules, and verbosity levels, through a mutable configuration state. It operates on structured settings like include directories, dump flags, and check enablement, alongside string-based file paths and mode-specific options. Use cases include fine-tuning runtime behavior, controlling diagnostic output, and adapting to project-specific linting requirements.",
      "description_length": 468,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Dune_project",
      "description": "Encapsulates parsed project metadata, including name, version, and nested dependencies, using a custom type with string identifiers. Provides operations to extract and traverse dependency graphs, enabling analysis of project structure. Allows validation of metadata against expected formats and supports queries for specific package relationships. Can be used to generate dependency trees or check for missing dependencies in build configurations.",
      "description_length": 447,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.LINT",
      "description": "Provides functions to report lint information in text format and deprecated RDJSONL format. Works with Format.formatter and unit types to output structured diagnostics. Used to display warnings in terminal and integrate with code review tools.",
      "description_length": 243,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.Lint_filesystem",
      "description": "Checks for invalid file paths and naming conventions in a list of Dune projects, ensuring compliance with project-specific rules. Operates on Dune_project.t structures and generates JSON-formatted descriptions of linting results. Used to validate project configurations before build processes and integrate with continuous integration pipelines.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Load_dune",
      "description": "Provides pretty-printing for the `w` type and processes Dune files by analyzing directories, invoking callbacks for untyped files, and handling typed structures and signatures. Operates on the `w` type, strings, and OCaml's `Typedtree.structure` and `Typedtree.signature`. Used to inspect and transform Dune build configurations during compilation or analysis workflows.",
      "description_length": 370,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Unused_ML_logger",
      "description": "Collects and logs values used in structure files during type-checking. Processes AST nodes and string identifiers to track references. Used to analyze code dependencies and detect unused bindings in large projects.",
      "description_length": 214,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils",
      "description": "Provides functions for error annotation, JSON line processing, and report generation using location metadata and custom formatting. Operates on filenames, line and column numbers, JSON data, and formatter objects to produce structured outputs. Supports detailed error messages with positional context, custom pretty-printing of JSON lines, and generation of formatted text reports. Can be used to debug JSONL files by highlighting errors with line numbers or to create error logs with source code snippets.",
      "description_length": 506,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "zanuda",
      "description": "Analyzes OCaml code by inspecting Typedtree structures to identify potential bugs, redundant patterns, and style issues. It checks for common pitfalls such as unused variables, shadowed names, and inconsistent formatting. The tool integrates with Dune to process fully compiled projects and supports custom lint rules for specific code quality standards.",
      "description_length": 354,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tast_pattern",
      "description": "Provides a framework for matching and transforming parsed structured data, using a tuple-based approach where input is transformed into output via defined functions. Key data types include ('a, 'b) t for parsed and transformed values, with operations for pattern matching and transformation. It enables tasks such as rewriting abstract syntax trees or extracting specific elements from parsed input. For example, it can be used to replace certain node types in a syntax tree while preserving location information.",
      "description_length": 513,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "My_printtyped",
      "description": "Provides functions to pretty-print various OCaml AST components, including signatures, structures, expressions, module expressions, and attributes, using a formatter. Works with types from the Typedtree and Ast_helper modules. Used to generate human-readable representations of compiled code elements during analysis or debugging.",
      "description_length": 330,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core",
      "description": "manages identifier tracking, linting, configuration, project metadata, and diagnostics across OCaml projects. It handles string-based names, AST nodes, Dune_project.t structures, and JSONL data, offering operations to detect unused values, report errors, adjust tool parameters, and analyze dependencies. It enables tasks like validating project configurations, generating dependency graphs, and producing structured error outputs. Examples include tracking unused declarations, logging type-checking defects, and pretty-printing Dune files.",
      "description_length": 541,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "My_untype",
      "description": "Converts typed AST nodes from the OCaml compiler to their untyped counterparts using a customizable mapping. Handles structures, signatures, expressions, and patterns, preserving original syntax information. Supports direct conversion of constants and provides a default mapper for standard transformations.",
      "description_length": 307,
      "index": 18,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 19,
    "meaningful_modules": 19,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 211,
    "avg_description_length": 346.4736842105263,
    "embedding_file_size_mb": 0.06939983367919922
  }
}