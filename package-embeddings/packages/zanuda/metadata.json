{
  "package": "zanuda",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:10:57.921563",
  "modules": [
    {
      "module_path": "Zanuda_core.LINT.REPORTER",
      "library": "zanuda.core",
      "description": "This module defines reporting functions for lint analysis results, specifically formatting output as plain text or RDJSONL. It works with linting data structures that capture analysis findings, such as error locations and messages. Concrete use cases include printing human-readable lint reports to the terminal or generating machine-parsable RDJSONL output for further processing.",
      "description_length": 381,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils.Report",
      "library": "zanuda.core",
      "description": "Formats and outputs structured reports in text or JSONL formats, using a provided formatter and location context. It operates on values of arbitrary types `'a`, given a suitable formatting function. Useful for generating diagnostic or analysis output in tools like linters or compilers.",
      "description_length": 286,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Dune_project.Library",
      "library": "zanuda.core",
      "description": "This module defines a data structure representing a Dune library, including its name, unique identifier, source directory, dependencies, and constituent modules. It provides functions to parse this structure from S-expressions, typically generated by Dune's description output. Use this module to analyze or process Dune library metadata, such as extracting dependencies or inspecting module composition.",
      "description_length": 404,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.LINT.UNUSED_DECLS",
      "library": "zanuda.core",
      "description": "Detects unused declarations in OCaml code by analyzing the typed abstract syntax tree. It processes function definitions, values, and module items to identify bindings that are never referenced. Useful for improving code quality by removing dead code in large or long-maintained projects.",
      "description_length": 288,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.LINT.GENERAL",
      "library": "zanuda.core",
      "description": "Implements general-purpose linters for OCaml code analysis, focusing on identifying common syntactic and semantic issues in program trees. Operates on OCaml AST structures, providing specific checks such as unused variables, redundant code, and incorrect type annotations. Useful for static code analysis tools that enforce code quality and detect potential bugs during compilation.",
      "description_length": 382,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils.ErrorFormat",
      "library": "zanuda.core",
      "description": "Formats error messages with precise location information, including filename, line, and column numbers. Works with OCaml's `Format.formatter` and arbitrary data types for error values. Useful for producing human-readable diagnostics in compilers or linters.",
      "description_length": 257,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.LINT.TYPED",
      "library": "zanuda.core",
      "description": "This module defines the interface for typed linters that analyze OCaml program trees using the TAST (Typed AST). It includes functions to run lints on TAST iterators, collect results, and expose metadata such as documentation and severity level. It is used to implement specific static analysis rules that operate on OCaml's typed syntax tree.",
      "description_length": 343,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.LINT.UNTYPED",
      "library": "zanuda.core",
      "description": "This module defines the interface for linters that analyze untyped OCaml abstract syntax trees. It provides operations to run analysis on AST iterators, collect results, and expose structured documentation in JSON format. Concrete use cases include implementing custom static analysis rules for code quality checks and generating actionable linting reports for integration with IDEs or CI tools.",
      "description_length": 395,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils.RDJsonl",
      "library": "zanuda.core",
      "description": "This module provides functions for pretty-printing structured data in a JSONL (JSON Lines) format, specifically tailored for error reporting with contextual information like filenames and line numbers. It works with generic OCaml data types that can be converted to JSON values, along with custom error codes. A concrete use case includes formatting and logging static analysis results or linter errors in a machine-readable format.",
      "description_length": 432,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.Collected_lints",
      "library": "zanuda.core",
      "description": "This module maintains a global, mutable collection of lints and type declarations to manage defect reporting in code analysis. It provides operations to add and clear lints with their locations, report collected lints, and track type declarations to suppress false positives from derived code. Use this module to accumulate and selectively report lint findings during static analysis passes.",
      "description_length": 391,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.Dune_project",
      "library": "zanuda.core",
      "description": "This module structures the output of `dune describe` into typed OCaml values, converting S-expressions into records that represent Dune projects, including modules, executables, and libraries. It enables tooling like linters and code generators by exposing precise project configuration and dependency data. The library submodule captures detailed library metadata\u2014such as name, source path, dependencies, and modules\u2014and includes parsers for extracting this information from Dune's output. You can use the module to traverse project structure, analyze dependencies, or generate code based on Dune configuration.",
      "description_length": 612,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.Unused_ML_logger",
      "library": "zanuda.core",
      "description": "Tracks unused values in OCaml source files by analyzing typed abstract syntax trees. It integrates with the Tast_iterator module to identify and log values that are defined but never used within a given scope. This helps developers detect dead code during compilation or static analysis passes.",
      "description_length": 294,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zanuda_core.LINT",
      "library": "zanuda.core",
      "description": "This module provides core abstractions for building program tree analyzers, organizing lints by phase, group, severity, and origin. It supports analysis across both typed and untyped OCaml ASTs, enabling operations like configuring linting rules, identifying unused declarations, and reporting findings through structured formats. Submodules handle specific tasks such as detecting dead code, implementing general linters, and formatting output as text or RDJSONL. Together, they enable static analysis tools to enforce code quality, track issues during compilation, and integrate with IDEs or CI pipelines.",
      "description_length": 607,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Lint_filesystem",
      "library": "zanuda.core",
      "description": "Performs linting operations on filesystem paths and configurations. Works with Dune project structures to validate and report issues. Use to analyze project directories and output structured JSON results for external tooling.",
      "description_length": 225,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Collected_decls",
      "library": "zanuda.core",
      "description": "This module tracks defined and used values across a codebase to identify unused declarations. It provides functions to log value definitions, mark values as used, and output lists of all or unused declarations. It works with strings as identifiers and integrates with signature and structure analyzers to detect unused library fields during analysis.",
      "description_length": 350,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Utils",
      "library": "zanuda.core",
      "description": "This module offers utilities for string manipulation, error formatting, and JSON report generation, working with types like strings, optional values, and custom variants such as `rdjsonl_code`, `group`, `level`, and `impl`. Its submodules handle structured report formatting in text or JSONL, precise error message formatting with location data, and pretty-printing of error reports with contextual information. You can use it to trim paths in build systems, convert linting metadata to JSON, or filter identifiers based on naming conventions, while leveraging submodules for diagnostic output in compilers and linters. The combination of direct functions and submodule APIs supports both ad-hoc data transformation and structured error reporting across analysis tools.",
      "description_length": 769,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Config",
      "library": "zanuda.core",
      "description": "This module manages configuration options for a linter, handling input/output destinations, verbosity levels, and linting rules through mutable global state. It operates on hash sets of enabled lint names, optional file paths, and boolean flags to control behaviors like filesystem checks or JSON output formatting. Typical use cases include enabling/disabling specific lints, setting output formats (e.g., Golint, RDJSONL), and configuring verbosity for diagnostic logging during code analysis.",
      "description_length": 495,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core.Load_dune",
      "library": "zanuda.core",
      "description": "This module traverses a directory, loading and analyzing OCaml source files by invoking user-provided callbacks for untyped files, implementation files (cmt), and interface files (cmti). It handles wrapped and non-wrapped file contexts using the `w` type, which distinguishes between wrapped modules and regular files. It is used to process OCaml projects at the typedtree level for analysis tools like linters or code generators.",
      "description_length": 430,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zanuda_core",
      "library": "zanuda.core",
      "description": "This module orchestrates static analysis of OCaml codebases by integrating lint management, project configuration parsing, and dead code detection. It centers around data types like lints with locations, typed project structures from Dune, and value usage tracking, offering operations to configure, analyze, and report findings across typed and untyped ASTs. You can analyze Dune projects to extract library metadata, detect unused values in source files, generate structured lint reports in JSON or text, and configure linting rules with global settings. The module supports end-to-end code analysis workflows, from directory traversal and lint accumulation to suppression of false positives and integration with build systems.",
      "description_length": 729,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tast_pattern.Packed",
      "library": "zanuda.tast_pattern",
      "description": "This module provides functions to create and parse typed AST patterns with embedded values. It works with packed representations of `Tast_pattern` values, allowing delayed parsing and structured extraction of typed tree nodes. Concrete use cases include writing custom type-directed AST transformations and validations that require capturing and reconstructing typed syntax fragments.",
      "description_length": 384,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "My_untype",
      "library": "zanuda.tast_pattern",
      "description": "This module converts typed abstract syntax trees (ASTs) into untyped ones, translating structures, signatures, expressions, patterns, and other typed elements into their corresponding untyped representations. It operates on data types like `Typedtree.expression`, `Typedtree.structure`, `Typedtree.signature`, and related components of OCaml's compiler ASTs. Concrete use cases include generating Parsetree-compatible code from Typedtree during meta-programming or analysis tasks, such as code transformation, pretty-printing, or generating documentation from typed ASTs.",
      "description_length": 571,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tast_pattern",
      "library": "zanuda.tast_pattern",
      "description": "This module provides combinators for matching and deconstructing Typedtree nodes, integrating typed AST transformations with embedded value parsing and structured extraction. It supports operations like value capture, disjunctions, and location-aware matching across expressions, patterns, and type expressions. Child modules extend this with packed representations for delayed parsing and reconstruction of typed syntax fragments. Examples include implementing type-directed PPX rewriters and validating AST structures during compilation.",
      "description_length": 539,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "My_printtyped",
      "library": "zanuda.tast_pattern",
      "description": "This module extends the Printtyped module with additional functions to print specific Typedtree and Ast_helper structures. It provides `interface`, `implementation`, and `expr` functions for formatting Typedtree signatures, structures, and expressions, along with `me` for module expressions and `attrs` for attributes. These functions are useful when inspecting or logging typed AST nodes during OCaml compiler plugin development or AST manipulation tasks.",
      "description_length": 457,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 23,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 769,
    "min_description_length": 225,
    "avg_description_length": 435.69565217391306,
    "embedding_file_size_mb": 0.0839223861694336
  }
}