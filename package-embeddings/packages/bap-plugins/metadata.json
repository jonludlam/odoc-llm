{
  "package": "bap-plugins",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:33.463166",
  "modules": [
    {
      "module_path": "Bap_plugins.Std.Plugins",
      "library": "bap-plugins",
      "description": "This module manages plugin discovery, loading, and execution from specified paths, including user-defined, environment, and default installation directories. It provides functions to list available plugins, load them selectively or fully, and handle plugin events such as opening, linking, and errors. Concrete use cases include initializing plugins at startup, filtering plugins by provided functionality, and debugging plugin loading issues through event monitoring.",
      "description_length": 468,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_plugins.Std.Plugin",
      "library": "bap-plugins",
      "description": "This module manages loadable plugins, each represented by a path, name, description, and associated bundle. It provides operations to create plugins from paths, access their metadata, load them along with dependencies, and wait for load completion. Use cases include dynamically loading analysis passes or extending functionality in BAP-based tools.",
      "description_length": 349,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_plugins.Std",
      "library": "bap-plugins",
      "description": "This module serves as the interface to the plugin subsystem, enabling direct management and interrogation of loaded plugins while coordinating with its submodules for comprehensive plugin handling. It provides core operations to list compilation units, set custom dynamic loaders, and inspect active plugins, with support for metadata access, selective loading, and dependency resolution across plugin bundles. Use cases include initializing and filtering plugins at startup, integrating custom loading logic, and debugging load-time issues through event monitoring. The combined functionality allows for dynamic extension of tools like BAP with analysis passes or new functionality from user-defined or default plugin directories.",
      "description_length": 731,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_plugins",
      "library": "bap-plugins",
      "description": "This module provides an interface to manage and interact with plugins, enabling dynamic extension of tools through analysis passes or new functionality. It supports listing compilation units, setting custom loaders, inspecting plugins, and resolving dependencies, with metadata access and selective loading capabilities. Use it to initialize plugins at startup, integrate custom loading logic, or debug load-time issues via event monitoring. Example workflows include filtering plugins by name or metadata and loading them from user-defined or default directories.",
      "description_length": 564,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 731,
    "min_description_length": 349,
    "avg_description_length": 528.0,
    "embedding_file_size_mb": 0.014964103698730469
  }
}