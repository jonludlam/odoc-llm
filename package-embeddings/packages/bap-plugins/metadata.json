{
  "package": "bap-plugins",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:09.137166",
  "modules": [
    {
      "module_path": "Bap_plugins.Std.Plugin",
      "description": "Provides functions to create, inspect, and load plugins, including retrieving their path, name, description, and associated bundle. Operates on plugin instances and system-level data such as command-line arguments and loading events. Used to dynamically load and manage code modules with dependencies and metadata.",
      "description_length": 314,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_plugins.Std.Plugins",
      "description": "Loads and manages plugins from specified directories, filtering by features and environment. Processes events during plugin loading and provides a stream for tracking plugin-related activities. Supports loading plugins with error handling and custom search paths.",
      "description_length": 263,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_plugins.Std",
      "description": "Manages dynamic plugin loading and inspection, handling metadata, dependencies, and event streams. Supports operations on plugin paths, names, descriptions, and bundles, along with command-line and loading event processing. Filters plugins by features and environment, enabling custom search paths and error-aware loading. Examples include retrieving plugin metadata, tracking loading events, and dynamically integrating modules based on runtime conditions.",
      "description_length": 457,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "bap-plugins",
      "description": "Provides functions for parsing and manipulating binary analysis plugin data, including instruction decoding, symbol resolution, and memory layout analysis. Works with custom data types such as plugin contexts, binary segments, and annotated control flow graphs. Used to extend BAP's analysis capabilities with domain-specific transformations and metadata extraction.",
      "description_length": 366,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_plugins",
      "description": "loads and inspects plugins at runtime, managing metadata, dependencies, and event streams while supporting path manipulation, feature-based filtering, and custom loading configurations. It exposes types for plugin descriptors, bundles, and events, with operations to extract names, descriptions, and paths, and to process loading and command-line events. Users can dynamically load plugins based on environment variables, track their initialization, and integrate modules conditionally. Examples include extracting plugin information from a bundle, filtering plugins by feature support, and logging loading events for debugging.",
      "description_length": 628,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 628,
    "min_description_length": 263,
    "avg_description_length": 405.6,
    "embedding_file_size_mb": 0.018613815307617188
  }
}