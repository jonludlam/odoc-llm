{
  "package": "binaryen",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 59,
  "creation_timestamp": "2025-07-15T23:14:50.003409",
  "modules": [
    {
      "module_path": "Binaryen.Expression.Table",
      "library": "binaryen",
      "description": "This module provides functions to manipulate WebAssembly table expressions, including getting and setting elements by index, checking the size, and growing the table. It works with tables in a WebAssembly module, using expressions to represent indices, values, and deltas. Concrete use cases include dynamically managing function tables or external data references during WebAssembly code generation or transformation.",
      "description_length": 418,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Tuple_extract",
      "library": "binaryen",
      "description": "Extracts values from tuples within WebAssembly expressions. It operates on `Binaryen.Expression.t` values, specifically handling tuple access by index. This module is used to manipulate structured data in WebAssembly code generation, such as accessing individual fields of a tuple returned from a function.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Table_size",
      "library": "binaryen",
      "description": "This module provides direct access to the table name associated with a `Table.size` expression. It allows retrieving and modifying the table identifier referenced by such expressions. Useful when inspecting or transforming WebAssembly code that involves table size operations.",
      "description_length": 276,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Data_drop",
      "library": "binaryen",
      "description": "Creates and manipulates data drop expressions in WebAssembly modules. Works with `Binaryen.Expression.t` and `Binaryen.Module.t` types. Used to specify memory segments to be dropped during execution, typically after copying initialized data into linear memory.",
      "description_length": 260,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Memory_fill",
      "library": "binaryen",
      "description": "This module creates and manipulates memory fill expressions in WebAssembly. It allows setting and retrieving the destination address, value, and size expressions for a memory fill operation. Use it when generating or modifying WebAssembly code that initializes memory regions with a specific value.",
      "description_length": 298,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Table_get",
      "library": "binaryen",
      "description": "This module provides direct access and modification of `Table.get` expression components in WebAssembly. It allows retrieving and setting the table name and index expression of a `Table.get` node. Use this module to inspect or manipulate table access expressions in WebAssembly AST nodes.",
      "description_length": 288,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Memory_copy",
      "library": "binaryen",
      "description": "This module creates and manipulates memory copy expressions in WebAssembly, specifically handling operations that copy data between memory regions. It works with WebAssembly expressions representing memory addresses and sizes, allowing construction and modification of copy operations with specified source, destination, and size. Concrete use cases include implementing efficient memory operations in WebAssembly code generation, such as copying buffers or relocating data within linear memory.",
      "description_length": 495,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Local_get",
      "library": "binaryen",
      "description": "Creates a WebAssembly expression that retrieves the value of a local variable at the specified index, with the given type. Works with WebAssembly modules and expression structures to generate local variable access instructions. Useful for building function bodies that read from local variables in low-level WebAssembly code generation.",
      "description_length": 336,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Memory_size",
      "library": "binaryen",
      "description": "Creates an expression that retrieves the current size of linear memory in units of pages. Accepts a module handle, an optional offset string, and a boolean indicating whether to use 64-bit memory. Useful for implementing WebAssembly instructions that query memory size dynamically during execution.",
      "description_length": 298,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Memory_grow",
      "library": "binaryen",
      "description": "This module creates and manipulates memory grow expressions in WebAssembly. It allows setting and retrieving the delta value that specifies how much memory to grow, using expressions like constants or variables. Use it when dynamically adjusting memory size within a WebAssembly function body.",
      "description_length": 293,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Null",
      "library": "binaryen",
      "description": "Creates a null expression in the Binaryen intermediate representation, used for WebAssembly compilation. This function generates a null pointer value of the appropriate type for use in expressions. It is useful when initializing variables or passing null arguments in WebAssembly code generation.",
      "description_length": 296,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Switch",
      "library": "binaryen",
      "description": "This module creates and manipulates switch expressions in WebAssembly using Binaryen. It allows setting and modifying case labels, default targets, conditions, and associated values. Use it to build control flow structures that branch based on a value, such as implementing `switch` statements in a compiler targeting WebAssembly.",
      "description_length": 330,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Local_tee",
      "library": "binaryen",
      "description": "Creates a local variable assignment expression that also returns the assigned value. It takes a module, local index, value expression, and type, producing an expression that sets the local and yields the value. Useful for inserting side effects into expression chains while preserving the value.",
      "description_length": 295,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Call_indirect",
      "library": "binaryen",
      "description": "This module handles indirect function calls in WebAssembly by creating and manipulating call expressions that target functions through a table. It allows setting and retrieving the target expression, table name, and operands for a call, as well as controlling whether the call should return. Use cases include implementing dynamic dispatch, function pointers, and indirect calls in WebAssembly modules.",
      "description_length": 402,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Module.Feature",
      "library": "binaryen",
      "description": "This module defines a set of WebAssembly features as distinct values of type `t`, each representing a specific language or runtime capability such as SIMD operations, garbage collection, or exception handling. It allows precise control over feature enablement in WebAssembly modules by combining or checking individual flags like `simd128`, `gc`, and `memory64`. Use cases include configuring module compilation targets and validating feature support in execution environments.",
      "description_length": 477,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Loop",
      "library": "binaryen",
      "description": "This module creates and manipulates loop expressions in a WebAssembly module. It allows setting and retrieving the name and body of a loop, where the body is another expression. Use this to build or modify loop structures in WebAssembly code, such as implementing custom control flow or optimizing existing loops.",
      "description_length": 313,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Break",
      "library": "binaryen",
      "description": "This module creates and manipulates break expressions in WebAssembly code, allowing specification of a target label, an optional condition, and an optional value. It works with expression nodes in a WebAssembly module's control flow structure. Use this module to generate conditional breaks or breaks with return values in WebAssembly functions.",
      "description_length": 345,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Drop",
      "library": "binaryen",
      "description": "Handles expressions that discard a value, typically used to remove results from the stack in WebAssembly code generation. Works with `Binaryen.Expression.t` values, allowing creation, retrieval, and modification of drop expressions. Useful when compiling languages with statements that ignore return values, such as void expressions in C or JavaScript.",
      "description_length": 352,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Global_set",
      "library": "binaryen",
      "description": "This module creates and manipulates global set expressions in a WebAssembly module. It allows setting and retrieving the name and value of global variables within an expression context. Use it when constructing or modifying WebAssembly functions that assign values to global variables.",
      "description_length": 285,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Tuple_make",
      "library": "binaryen",
      "description": "This module handles the creation and manipulation of tuple expressions in a WebAssembly module. It provides functions to construct a tuple from a list of expressions, access or modify individual elements by index, and dynamically add or remove elements. Use cases include building composite values for Wasm function returns or structured data passing.",
      "description_length": 351,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Const",
      "library": "binaryen",
      "description": "Creates an expression representing a constant value in WebAssembly, using a literal such as integers or floats. It operates on WebAssembly modules and literals to generate constant expressions. Useful for embedding fixed values directly into WebAssembly code during compilation or transformation tasks.",
      "description_length": 302,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.If",
      "library": "binaryen",
      "description": "This module implements conditional expressions in WebAssembly by creating and manipulating `if` statements with condition, true, and optional false branches. It operates on `Binaryen.Expression.t` values, allowing inspection and modification of the condition, true case, and optional false case expressions. Concrete use cases include building control flow logic such as ternary operations or branching based on runtime values.",
      "description_length": 427,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Table_set",
      "library": "binaryen",
      "description": "This module provides direct access and modification of the components of a `Table.set` expression, including the table name, index, and value expressions. It operates specifically on `Binaryen.Expression.t` values that represent table set operations. Use cases include inspecting or rewriting table mutation instructions during WebAssembly code transformation or analysis.",
      "description_length": 372,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Ref",
      "library": "binaryen",
      "description": "This module creates and manipulates WebAssembly expressions representing null checks, function references, equality comparisons, and type coercions. It operates on expressions within a WebAssembly module, using types and operations defined in the broader WebAssembly context. Concrete use cases include building expressions for null validation, function identity checks, and type-safe value comparisons in WebAssembly code generation.",
      "description_length": 434,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Pop",
      "library": "binaryen",
      "description": "Creates a pop expression that removes a value of the specified type from the stack, returning the popped value. Works with WebAssembly module and type structures to generate stack manipulation instructions. Useful for implementing control flow or stack-based operations in WebAssembly code generation.",
      "description_length": 301,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.I31",
      "library": "binaryen",
      "description": "This module provides functions to create and extract i31 expressions in a WebAssembly module. It supports making an i31 from a value and extracting the underlying value with sign control. These operations are used when working with 31-bit integer values in WebAssembly intermediate representation.",
      "description_length": 297,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Return",
      "library": "binaryen",
      "description": "This module handles the creation and manipulation of return expressions in WebAssembly code. It provides functions to create a return statement with a given value, retrieve the current return value expression, and update the return value. These operations are used when generating or modifying WebAssembly functions that need to return results to their callers.",
      "description_length": 361,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Table_grow",
      "library": "binaryen",
      "description": "This module manipulates `Table.grow` expressions in Binaryen IR. It provides accessors and setters for the table name, value expression, and delta expression of a `Table.grow` operation. It is used when modifying or analyzing WebAssembly table growth instructions directly within a Binaryen pass or transformation.",
      "description_length": 314,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Call",
      "library": "binaryen",
      "description": "This module creates and manipulates function call expressions, allowing the specification of targets, operands, and return behavior. It works with expression trees and types, enabling direct construction of calls and control over operand lists. Concrete use cases include building direct function invocations, modifying call arguments dynamically, and marking calls for return propagation in WebAssembly code generation.",
      "description_length": 420,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Global_get",
      "library": "binaryen",
      "description": "Creates and manipulates global variable get expressions in WebAssembly. Works with global variables by name and type, allowing retrieval and updating of the referenced global name. Used when generating or modifying WebAssembly code to access global state directly.",
      "description_length": 264,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Local_set",
      "library": "binaryen",
      "description": "This module creates and manipulates local variable assignment expressions in WebAssembly. It provides functions to construct a local set operation, retrieve the assigned value, and update the value within an existing local set expression. These operations directly work with WebAssembly expressions, enabling precise control over local variable mutation in function bodies.",
      "description_length": 373,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Unary",
      "library": "binaryen",
      "description": "This module creates and manipulates unary expressions in WebAssembly, such as negation or type conversion, using a specified operation and operand. It operates on WebAssembly expressions and modules, allowing the construction and modification of unary operations within function bodies. Concrete use cases include generating arithmetic negations, bit shifts, or type coercions directly in WebAssembly AST nodes.",
      "description_length": 411,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Load",
      "library": "binaryen",
      "description": "This module creates and manipulates load expressions for WebAssembly memory access. It supports setting and retrieving memory addresses with specified byte sizes, signedness, and alignment. Use it to generate expressions that read data from linear memory in a WebAssembly module.",
      "description_length": 279,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Expression.Memory_init",
      "library": "binaryen",
      "description": "This module creates and manipulates memory initialization expressions in WebAssembly. It supports setting and getting the destination, offset, size, and segment index for memory initialization operations. Use it when directly constructing or modifying WebAssembly module memory operations, such as copying data from a segment into linear memory at a specific location and size.",
      "description_length": 377,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Block",
      "library": "binaryen",
      "description": "This module creates and manipulates block expressions in a WebAssembly module, allowing for structured control flow. It supports operations to build blocks with optional names and return types, and to dynamically modify block contents through indexed access, insertion, and removal. Concrete use cases include constructing loops, conditional branches, and scoped sequences of instructions within WebAssembly functions.",
      "description_length": 418,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Unreachable",
      "library": "binaryen",
      "description": "Creates an unreachable expression in a WebAssembly module, which represents a point in the code that should never be reached during execution. This function is used to insert trap instructions or mark invalid code paths in generated or transformed WebAssembly code. It operates directly on the module structure to produce an expression that, when executed, causes a runtime error.",
      "description_length": 380,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Select",
      "library": "binaryen",
      "description": "This module creates and manipulates select expressions in a WebAssembly module. It allows constructing a select expression with a condition and two branches, and accessing or modifying each component individually. Use this to implement conditional logic in WebAssembly code generation or transformation.",
      "description_length": 303,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Nop",
      "library": "binaryen",
      "description": "Creates a no-operation expression in a WebAssembly module. Accepts a module context and returns an expression representing an empty instruction. Used to insert placeholder or empty statements in code generation or transformation passes.",
      "description_length": 236,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Store",
      "library": "binaryen",
      "description": "This module constructs and manipulates store expressions in WebAssembly, specifically handling memory writes. It works with `Binaryen.Expression.t` values representing pointers, values, and memory operations. Concrete use cases include setting up direct memory stores and modifying existing store expressions in a module's code.",
      "description_length": 328,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression.Binary",
      "library": "binaryen",
      "description": "This module creates and manipulates binary expressions in a WebAssembly module. It supports setting and retrieving the left and right operands of a binary operation, such as addition or multiplication, using expressions like constants or local variables. Use cases include building arithmetic operations and bitwise computations in WebAssembly code generation.",
      "description_length": 360,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Heap_type",
      "library": "binaryen",
      "description": "This component provides operations for constructing and analyzing WebAssembly heap type hierarchies, including creating specific type representations like function, struct, array, and primitive types, along with checking subtype relationships and type classifications. It works directly with heap type values to support queries about type properties (e.g., whether a type is a struct or array) and hierarchical relationships (e.g., determining the bottom type or validating subtyping constraints). These capabilities are essential for implementing WebAssembly validation, optimization, and type inference workflows.",
      "description_length": 615,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Table",
      "library": "binaryen",
      "description": "This module manages tables and element segments in a WebAssembly module. It provides operations to add tables with specified properties, create active element segments that link tables to functions, and manipulate existing element segments by removal or lookup. These features support dynamic dispatch and table initialization in WebAssembly code generation.",
      "description_length": 358,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Struct_type",
      "library": "binaryen",
      "description": "This module provides operations to inspect struct types, including retrieving the number of fields, the type of a specific field, its packed type, and whether the field is mutable. It works with `Heap_type.t` to represent struct types and interacts with `Type.t` and `Packed_type.t` for field details. Use cases include analyzing or constructing WebAssembly struct types with precise field properties.",
      "description_length": 401,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Function",
      "library": "binaryen",
      "description": "This module manages function definitions within a WebAssembly module, supporting operations to create, retrieve, modify, and remove functions. It works with function values represented by the `t` type, along with types, expressions, and module-level constructs. Concrete use cases include defining entry points, setting function bodies with control flow or arithmetic operations, and assigning debug metadata for source mapping.",
      "description_length": 428,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Signature_type",
      "library": "binaryen",
      "description": "This module defines operations to retrieve the parameter and result types of a function signature. It works with `Heap_type.t` values representing function signatures and returns `Type.t` values indicating the respective parameter and result types. These functions are used when inspecting or constructing WebAssembly functions to ensure correct type handling for function calls and definitions.",
      "description_length": 395,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Import",
      "library": "binaryen",
      "description": "This module defines functions to add and access imported functions, tables, memory, and global variables in a WebAssembly module. It operates on module, function, and global value types, enabling precise control over import declarations. Use cases include linking external APIs, defining callback interfaces, and integrating host-provided resources like memory or global constants into a WebAssembly module.",
      "description_length": 407,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Op",
      "library": "binaryen",
      "description": "This module provides low-level numeric operations for WebAssembly, encompassing integer and floating-point arithmetic, comparisons, type conversions, and SIMD vector manipulations for 32/64-bit scalars and 128-bit vectors (e.g., `i8x16`, `f64x2`). It supports data transformations like saturating truncation, sign extension, lane-wise vector operations, and string encoding conversions (UTF-8, WTF-16) alongside reference type checks. These capabilities enable compiler optimizations, high-performance numerical computations, and direct WebAssembly code generation for tasks requiring fine-grained control over arithmetic, memory, and SIMD parallelism.",
      "description_length": 652,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Array_type",
      "library": "binaryen",
      "description": "This module provides functions to inspect array type properties in WebAssembly. It retrieves the element type, packed type, and mutability flag of a given heap type. These operations are essential when working with array definitions in WebAssembly modules, such as validating array access or generating correct type signatures.",
      "description_length": 327,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Global",
      "library": "binaryen",
      "description": "This module manages global variables in a WebAssembly module, providing functions to add, retrieve, and remove globals by name or index. It works with global variables represented by the `t` type, along with associated types for expressions and modules. Use this module to define mutable or immutable global variables, set their initial values, and inspect or modify their properties during WebAssembly module construction or transformation.",
      "description_length": 441,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Packed_type",
      "library": "binaryen",
      "description": "This module defines packed type representations for low-level memory operations. It includes values for 8-bit and 16-bit integer types, along with a marker for non-packed types. These types are used to specify memory layout in WebAssembly operations, particularly when working with vector or struct data in a size-constrained context.",
      "description_length": 334,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Expression",
      "library": "binaryen",
      "description": "This module constructs and transforms WebAssembly expressions for control flow, memory, and variable access, enabling low-level code generation and analysis. It supports operations like blocks, loops, branches, memory loads/stores, and local/global access, while submodules handle structured data (tuples, tables), memory manipulation (copy, fill, init), and dynamic control flow (switches, breaks). You can generate function calls, manipulate table elements, extract tuple fields, manage memory size, and build conditional logic or arithmetic expressions. Specific examples include dynamically resizing a function table, copying memory buffers, initializing linear memory from a segment, and constructing complex control flow with named loops and break conditions.",
      "description_length": 765,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Literal",
      "library": "binaryen",
      "description": "This module creates and manipulates literal values for WebAssembly constants, supporting 32-bit and 64-bit integers and floats. It provides functions to construct literals from raw bits or numeric values, enabling precise control over binary representation. Use cases include generating immediate values in WebAssembly code generation and handling low-level numeric constants.",
      "description_length": 376,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Type",
      "library": "binaryen",
      "description": "This module provides operations for creating, inspecting, and manipulating WebAssembly function types, heap types, and primitive value types (e.g., integers, floats, references like `funcref` or `anyref`). It supports constructing compound types, expanding them into arrays, checking nullability, and converting between heap types and general types. These capabilities are used to define variable and expression types in Binaryen IR, manage type hierarchies during Wasm compilation, and handle low-level type transformations for optimization or analysis.",
      "description_length": 554,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Memory",
      "library": "binaryen",
      "description": "This module manages memory definitions and operations in a WebAssembly module, including setting memory parameters, querying memory limits, and handling memory segments. It works with memory segments containing raw byte data, segment kinds, and sizes, along with module and memory identifiers. Concrete use cases include initializing linear memory, checking if memory is shared or 64-bit, retrieving memory segments, and configuring memory with specific offsets and data.",
      "description_length": 471,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen.Settings",
      "library": "binaryen",
      "description": "This module manages compiler settings for optimization, inlining, and code generation. It provides accessors and mutators for integer and boolean configuration options, as well as string-based pass arguments. Concrete use cases include adjusting optimization levels, controlling debug information, and tuning inlining thresholds for WebAssembly compilation.",
      "description_length": 357,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Module",
      "library": "binaryen",
      "description": "This module manages WebAssembly feature sets through a type `t` that encodes capabilities like SIMD, garbage collection, and memory extensions as distinct flags. It provides operations to combine, check, and filter features, enabling precise configuration of module compilation and validation. Submodules group related features and offer utilities for feature composition and compatibility checks. For example, you can use `Feature.(simd128 && gc)` to specify a target with SIMD and garbage collection support or test an environment's ability to handle `memory64`.",
      "description_length": 564,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Element_segment",
      "library": "binaryen",
      "description": "This module provides access to element segment properties in WebAssembly modules. It allows retrieving metadata such as the segment's name, associated table, offset expression, length, and raw data at specific indices. Use this module when inspecting or manipulating element segments during WebAssembly code generation or transformation.",
      "description_length": 337,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen.Export",
      "library": "binaryen",
      "description": "This module manages the creation, retrieval, and removal of exports in a WebAssembly module, allowing specific functions, tables, memories, and globals to be exposed by name. It provides direct access to export entries by name or index, and supports inspecting export kinds and associated values. Concrete use cases include linking module internals to external environments, exposing entry points for host integration, and configuring exported symbols for tooling or runtime access.",
      "description_length": 482,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen",
      "library": "binaryen",
      "description": "This module provides comprehensive tools for constructing, analyzing, and optimizing WebAssembly modules. It supports defining and inspecting types (function, struct, array, primitive), managing code (functions, expressions, control flow), and handling module components (tables, memory, globals, imports, exports). You can build and validate type hierarchies, generate low-level expressions with arithmetic and control flow, configure memory and table layouts, and control compilation settings. Examples include defining a function with a custom body, inspecting struct field types, adding a memory segment with initialization data, or enabling SIMD features for optimized code generation.",
      "description_length": 690,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 60,
    "meaningful_modules": 59,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9833333333333333
  },
  "statistics": {
    "max_description_length": 765,
    "min_description_length": 236,
    "avg_description_length": 383.47457627118644,
    "embedding_file_size_mb": 0.21460342407226562
  }
}