{
  "package": "sihl-user",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:07:34.187685",
  "modules": [
    {
      "module_path": "Sihl_user.Password_reset.MakeMariaDb",
      "library": "sihl-user",
      "description": "This module handles password reset operations using MariaDB, providing functions to create reset tokens and reset passwords. It works with user identifiers, tokens, and password data, leveraging a token service for token management. Concrete use cases include initiating a password reset flow and validating tokens to allow secure password changes.",
      "description_length": 348,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_user.PostgreSql.Web",
      "library": "sihl-user",
      "description": "This module provides functions to authenticate users based on tokens or session cookies in a PostgreSQL-backed web application. It works with `Rock.Request.t` for handling HTTP requests and interacts with user data through the `Sihl__Contract_user.t` type. Concrete use cases include extracting a user from a JWT token or session cookie during request processing in a web framework like Dream or Opium.",
      "description_length": 402,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_user.Make.Web",
      "library": "sihl-user",
      "description": "This module provides functions to authenticate users based on Bearer tokens or session data extracted from HTTP requests. It operates on `Rock.Request.t` values and retrieves user information using token parsing and session lookup mechanisms. Concrete use cases include extracting authenticated user details in web handlers for access control or personalization based on request context.",
      "description_length": 387,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_user.MariaDb.Web",
      "library": "sihl-user",
      "description": "This module provides functions to authenticate users based on tokens or session cookies in a web context. It interacts with HTTP requests and session data to retrieve user information from MariaDB. Concrete use cases include validating JWT tokens and session identifiers to establish authenticated user sessions in web applications.",
      "description_length": 332,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_user.Password_reset.MakePostgreSql",
      "library": "sihl-user",
      "description": "This module handles password reset operations using PostgreSQL, including creating reset tokens and resetting passwords. It works with user identifiers, tokens, and password data. Concrete use cases include initiating a password reset flow and validating tokens to update user passwords securely.",
      "description_length": 296,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_user.Make",
      "library": "sihl-user",
      "description": "This module manages user data through core operations like creation, update, search, and authentication, centered around the `Sihl__.Contract_user.t` type that represents users with attributes such as email, password, and status. It supports registering users with validation, modifying user details or credentials, and querying users with filters and pagination. The child module extends this functionality by extracting and authenticating users from HTTP requests using Bearer tokens or session data, enabling request-based access control and personalization. Together, they allow both direct user management and context-aware authentication within web applications.",
      "description_length": 668,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_user.Password_reset",
      "library": "sihl-user",
      "description": "This module orchestrates password reset workflows by generating, storing, and validating reset tokens, integrating with user data models and database backends. It supports PostgreSQL and MariaDB through dedicated submodules that implement token creation, storage, and password update operations using database-specific logic. Core data types include user identifiers, tokens, and hashed password representations, with operations to initiate resets, verify tokens, and apply new passwords. Example usage includes sending a password reset email by generating a token, then using that token to authenticate and update a user's password in the database.",
      "description_length": 649,
      "index": 6,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Sihl_user.PostgreSql",
      "library": "sihl-user",
      "description": "This module provides PostgreSQL-backed user management for web applications, handling user creation, authentication, search, and profile updates using the `Sihl__Contract_user.t` type. It supports operations like validating and storing users, authenticating via email and password, and applying filters with pagination for user search. A child module extends this functionality to token and session-based authentication, extracting users from JWT tokens or cookies during HTTP request processing with frameworks like Dream or Opium. Together, they enable secure, policy-enforced user management from registration to session handling in web services.",
      "description_length": 649,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_user.MariaDb",
      "library": "sihl-user",
      "description": "This module manages user authentication and administration using MariaDB, offering operations to create, update, search, and authenticate users with support for roles like admins. It includes functions for user registration with password policies, filtered and paginated user searches, and secure credential updates. The child module extends authentication capabilities to web contexts by validating tokens and session cookies, enabling secure user sessions in web applications through integration with HTTP requests and session data. Together, they support workflows like registering a user, logging them in via token or session, and managing user data with role-based access controls.",
      "description_length": 686,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_user",
      "library": "sihl-user",
      "description": "This module handles user management with password operations, role validation, and data serialization for secure authentication and access control. It works with user records containing identifiers, credentials, timestamps, and status enums, supporting workflows like user registration, credential updates, and role-based filtering. Child modules extend this functionality with database-specific backends for PostgreSQL and MariaDB, token-based authentication, and HTTP request integration for web frameworks like Dream and Opium. Example use cases include authenticating users via email and password, initiating password resets with tokens, and extracting user sessions from HTTP headers for personalized access.",
      "description_length": 713,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 713,
    "min_description_length": 296,
    "avg_description_length": 513.0,
    "embedding_file_size_mb": 0.036789894104003906
  }
}