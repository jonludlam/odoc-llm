{
  "package": "tiny_httpd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 41,
  "creation_timestamp": "2025-08-15T14:42:16.949305",
  "modules": [
    {
      "module_path": "Tiny_httpd_multipart_form_data.Private_",
      "library": "tiny_httpd.multipart-form-data",
      "description": "This module implements low-level chunk reading logic for parsing multipart/form-data streams. It works with a parser state type `st` and byte buffers, returning `chunk` values that represent delimiters, end-of-file markers, or data reads of a specified length. It is used internally to process incoming HTTP data in chunks during form submission parsing.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_multipart_form_data.Content_disposition",
      "library": "tiny_httpd.multipart-form-data",
      "description": "Parses and represents Content-Disposition headers from multipart/form-data streams. It extracts the disposition kind, field name, and optional filename into a structured format. Use this module to handle file uploads and form field metadata directly from HTTP requests.",
      "description_length": 269,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_multipart_form_data",
      "library": "tiny_httpd.multipart-form-data",
      "description": "This module parses multipart/form-data streams, handling file uploads and form submissions by extracting headers, reading data slices, and signaling part boundaries. It works with HTTP headers, byte buffers, and input streams, producing structured events like part headers, data reads, and end-of-input. Concrete use cases include processing HTTP POST requests with file attachments and streaming large form data without full in-memory buffering.",
      "description_length": 446,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Server.Middleware",
      "library": "tiny_httpd.core",
      "description": "This module composes functions that wrap or modify HTTP request handlers. It provides a type for middleware chains and a `nil` value representing empty processing. Concrete use cases include logging, authentication, and error handling around HTTP routes.",
      "description_length": 254,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.IO.TCP_server",
      "library": "tiny_httpd.core",
      "description": "This module implements a TCP server that listens for incoming connections, dispatches client handling to a provided function, and tracks server state such as active connections and running status. It works with Unix socket addresses and abstracts input/output operations through the `IO` interface, allowing compatibility with both blocking and asynchronous IO backends. Concrete use cases include building HTTP servers that accept client requests, process headers and body input, and send back responses over TCP.",
      "description_length": 514,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Route.Private_",
      "library": "tiny_httpd.core",
      "description": "Implements path matching and handler extraction for route definitions. Works with URL paths split into string lists and route trees composed of handlers and nested routes. Used internally to resolve incoming requests to their corresponding handlers based on path segments.",
      "description_length": 272,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Server.Head_middleware",
      "library": "tiny_httpd.core",
      "description": "This module provides middleware that processes only the request head and headers, transforming or inspecting them before passing control to the next handler. It works with HTTP request values represented as `Tiny_httpd_core.Request.t` and is compatible with both synchronous and asynchronous handlers. Concrete use cases include implementing custom header parsing, request routing based on method and path, and early response generation without processing the request body.",
      "description_length": 473,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Pool.Raw",
      "library": "tiny_httpd.core",
      "description": "This module provides direct `acquire` and `release` operations for managing resources in a non-blocking, lightweight pool optimized for short-lived or inexpensive resources like buffers. It works directly with pool instances containing arbitrary resource types `'a`, allowing manual control over resource allocation and reuse. Use this when fine-grained management of buffer lifetimes or similar resources is needed, but be cautious to avoid errors like double-releases.",
      "description_length": 470,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_core.IO.Writer",
      "library": "tiny_httpd.core",
      "description": "This module defines a writer abstraction for output channels, providing operations to create and manipulate writers that emit bytes. It works with `Tiny_httpd_core.IO.Output.t` and `Tiny_httpd_core.IO.Writer.t` types, supporting concrete use cases like writing strings directly or piping input streams to output channels. Key functionality includes constructing custom writers, writing raw strings, and empty writes for testing or placeholder purposes.",
      "description_length": 452,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.IO.Output",
      "library": "tiny_httpd.core",
      "description": "This module implements output streams for writing bytes with buffering, supporting operations like character, string, and integer output, as well as line-based and chunked encodings. It works with output channels, files, and in-memory buffers, allowing transformation and replication of byte streams. Concrete use cases include writing HTTP responses with proper encoding, logging to files or buffers, and handling network output with controlled flushing and closing.",
      "description_length": 467,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.IO.Input",
      "library": "tiny_httpd.core",
      "description": "This module supports operations for reading, transforming, and consuming byte streams with buffered semantics, built from sources like memory buffers, files, or file descriptors. It handles precise byte-level processing, line-oriented input, and chunked data flows, while enabling stream composition and resource cleanup. Typical applications include parsing HTTP request bodies, implementing network protocol decoders, or efficiently processing large files without loading entire contents into memory.",
      "description_length": 502,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Util",
      "library": "tiny_httpd.core",
      "description": "This module handles URL path and query manipulation, including percent encoding/decoding, path splitting, and query parsing. It works with strings, socket addresses, and key-value pairs to process HTTP request paths and query parameters. Concrete use cases include extracting route components, handling encoded URLs, and parsing query strings into structured data.",
      "description_length": 364,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Meth",
      "library": "tiny_httpd.core",
      "description": "This module defines an enumerated type for standard HTTP methods, including `GET`, `PUT`, `POST`, `HEAD`, `DELETE`, and `OPTIONS`. It provides functions to convert method values to and from strings, as well as pretty-printing support. These operations are used to handle and represent HTTP request methods in a type-safe manner.",
      "description_length": 328,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Server",
      "library": "tiny_httpd.core",
      "description": "This module supports creating, configuring, and managing an HTTP/1.1 server with layered middleware for request/response transformation, dynamic/static route handling, and streaming body processing. It operates on HTTP request/response structures, enabling use cases like real-time server-sent events, WebSocket upgrades, and concurrent connection handling via thread-per-client or thread pool models. Key features include synchronous and streaming data manipulation, header/body modification pipelines, and flexible handler registration for building custom web services.",
      "description_length": 571,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Headers",
      "library": "tiny_httpd.core",
      "description": "This module manages HTTP headers represented as a list of key-value pairs. It provides operations to retrieve, set, remove, and check for the presence of header fields, with optional value transformation. Use it to manipulate headers during HTTP request or response processing, such as extracting content types or setting authentication tokens.",
      "description_length": 344,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_core.IO",
      "library": "tiny_httpd.core",
      "description": "This module provides abstractions and implementations for handling input and output operations across different IO backends. It includes modules for buffered input and output streams, writer manipulation, and TCP server management. Concrete use cases involve processing HTTP requests and responses, handling network data streams, and managing file or memory-based IO with support for both blocking and asynchronous execution models.",
      "description_length": 432,
      "index": 15,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Tiny_httpd_core.Log",
      "library": "tiny_httpd.core",
      "description": "This module provides logging functions for the HTTP server, including `info`, `debug`, and `error` for emitting log messages at different severity levels. It works with format strings and callbacks that produce log output, supporting structured logging through the `Format` module. Concrete use cases include tracking server startup, request handling, and error conditions during HTTP server operation.",
      "description_length": 402,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_core.Route",
      "library": "tiny_httpd.core",
      "description": "This module defines composable route matchers for URL paths, supporting typed capture of path segments as integers, strings, or URL-decoded strings. It allows building precise routes with exact string matching, nested routes via `@/`, and capturing the remaining path. Concrete use cases include defining RESTful endpoints with parameterized paths, such as `/user/123` or `/search?q=foo`, where parameters are parsed and decoded automatically.",
      "description_length": 443,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_core.Buf",
      "library": "tiny_httpd.core",
      "description": "This module provides a mutable buffer implementation optimized for efficient byte stream processing and request parsing. It supports operations to append characters, strings, or byte slices, access and clear contents, and manage internal storage without frequent allocations. Concrete use cases include accumulating HTTP request data incrementally and parsing network streams with minimal memory overhead.",
      "description_length": 405,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Atomic_",
      "library": "tiny_httpd.core",
      "description": "This module implements atomic references with operations for thread-safe mutation, including creation, reading, writing, and atomic compare-and-swap. It supports generic values of type `'a` as well as specialized integer operations like incrementing and adding. It is used to implement shared counters, synchronization primitives like flags or locks, and concurrent data structures such as a Treiber stack where multiple threads modify a list without interference.",
      "description_length": 464,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Request",
      "library": "tiny_httpd.core",
      "description": "This module provides functions for inspecting and transforming HTTP request components, including case-insensitive header manipulation, metadata management, query parameter parsing, and access to properties like method, path, and client address. It operates on HTTP request values with support for body handling through streaming operations, such as enforcing size limits or blocking reads to consume the full body. Specific use cases include request validation, header normalization, and controlled body processing in server-side HTTP handling.",
      "description_length": 545,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Pool",
      "library": "tiny_httpd.core",
      "description": "This module manages a non-blocking resource pool optimized for short-lived, inexpensive resources like buffers. It provides `create` to initialize a pool with resource creation and optional clearing functions, and `with_resource` to safely borrow and return resources. Use it to reduce allocation overhead for transient data structures such as network buffers or temporary strings, where fast reuse is more critical than strict resource limits.",
      "description_length": 444,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Response",
      "library": "tiny_httpd.core",
      "description": "This module constructs and manipulates HTTP responses with support for setting response codes, headers, and various body types such as strings, streams, and writers. It provides functions to create responses from results, handle errors with custom messages, and modify response components like headers and body content. Concrete use cases include generating error responses, streaming large payloads, and dynamically building HTTP replies with custom headers and status codes.",
      "description_length": 476,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core.Response_code",
      "library": "tiny_httpd.core",
      "description": "This module defines HTTP response codes as integers and provides standard values like `ok` (200) and `not_found` (404). It includes functions to check if a code indicates success (`is_success`) and to retrieve a textual description of the code (`descr`). These are used directly in handling and responding to HTTP requests with appropriate status codes.",
      "description_length": 353,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_core",
      "library": "tiny_httpd.core",
      "description": "This module implements core components for building a concurrent HTTP server, including atomic references for thread-safe state management, efficient byte buffers for network stream processing, and structured handling of HTTP headers, requests, and responses. It supports data types such as HTTP methods, response codes, and route matchers with typed path captures, enabling precise URL routing and request parsing. Concrete use cases include handling concurrent HTTP connections with thread-safe counters, parsing and constructing HTTP messages with streaming bodies, and defining RESTful endpoints with parameterized paths.",
      "description_length": 625,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_html.Out",
      "library": "tiny_httpd.html",
      "description": "This module provides low-level output handling for HTML combinator trees, supporting efficient string generation through buffered writes. It works with output targets like in-memory buffers and IO output channels, exposing operations to add characters, strings, and manage newline formatting. Concrete use cases include rendering HTML content directly to a buffer or streaming output without intermediate string allocations.",
      "description_length": 424,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_html.A",
      "library": "tiny_httpd.html",
      "description": "This module provides functions to generate HTML attributes as string pairs or a dedicated type, enabling direct construction of HTML element attributes. It works with string values and a specific attribute type to represent standard HTML attributes like `href`, `class`, or `style`, which are used to define element behavior, styling, and metadata. These combinators are suited for scenarios requiring lightweight, efficient HTML generation without strict well-formedness enforcement, such as dynamic web content assembly.",
      "description_length": 522,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_html",
      "library": "tiny_httpd.html",
      "description": "This module provides HTML element and attribute combinators that operate on a `nary` type representing hierarchical HTML nodes, enabling direct construction of fragments or full documents. It supports both void elements (e.g., `img`, `br`) and container tags (e.g., `div`, `a`) through a low-level, MDN-aligned API that prioritizes simplicity and performance over validity enforcement. Typical use cases include server-side HTML generation for dynamic content, embedding raw HTML snippets, or building lightweight templating systems where strict well-formedness is secondary to developer control.",
      "description_length": 596,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_unix.Dir.Embedded_fs",
      "library": "tiny_httpd.unix",
      "description": "This module implements an embedded virtual file system for serving static content, allowing files to be added with specified paths and timestamps. It builds a directory structure in memory, suitable for use with the `tiny-httpd-mkfs` tool to generate OCaml modules containing static assets. The resulting virtual file system can be exposed via HTTP with optional support for file uploads and deletions.",
      "description_length": 402,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_unix.Sem",
      "library": "tiny_httpd.unix",
      "description": "This module implements a counting semaphore to control access to a limited number of concurrent operations. It provides functions to acquire and release permits, blocking when necessary until permits become available. The semaphore tracks the number of currently acquired permits and ensures thread-safe access using a mutex and condition variable. Use this to limit concurrent execution of tasks, such as restricting the number of simultaneous HTTP connections or background jobs.",
      "description_length": 481,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_unix.Unix_tcp_server_",
      "library": "tiny_httpd.unix",
      "description": "This module implements a TCP server configuration and lifecycle management system for handling concurrent network connections. It provides functions to retrieve socket addresses, manage connection limits with semaphores, and safely shut down or close file descriptors. The module works with Unix file descriptors, IP addresses, and integrates buffer and slice pools for efficient I/O handling in network applications.",
      "description_length": 417,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd_unix.Dir",
      "library": "tiny_httpd.unix",
      "description": "This module serves static content from directories with configurable behaviors for directory listing, file downloads, uploads, and deletions. It works with file system paths and a virtual file system (VFS) abstraction, allowing integration with both real and embedded file structures. Concrete use cases include exposing a local directory over HTTP with restricted access, enabling file uploads to a specific endpoint, or embedding static assets into an application using `Embedded_fs`.",
      "description_length": 486,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_unix",
      "library": "tiny_httpd.unix",
      "description": "This module combines a TCP server implementation with tools for managing concurrent connections and serving static content. It handles Unix file descriptors, IP addresses, and integrates semaphores to control connection limits while serving files from real or embedded file systems. Use it to run an HTTP server that serves static files, restricts concurrent connections, and supports uploads or embedded assets.",
      "description_length": 412,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_ws",
      "library": "tiny_httpd.ws",
      "description": "This module provides functions to handle WebSocket connections within an HTTP server. It includes operations to upgrade an HTTP request to a WebSocket connection and to define route handlers that process incoming WebSocket messages. The module works with HTTP request and response streams, along with custom route definitions to manage WebSocket endpoints.",
      "description_length": 356,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus.Registry",
      "library": "tiny_httpd.prometheus",
      "description": "This module manages a collection of metrics, allowing them to be updated before output and written in Prometheus format. It works with counters, gauges, and histograms, and supports registering update callbacks to refresh metric values on demand. Concrete use cases include tracking HTTP request counts, response latencies, and active connection states for monitoring.",
      "description_length": 368,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus.Histogram",
      "library": "tiny_httpd.prometheus",
      "description": "Tracks and exposes Prometheus histogram metrics over HTTP, such as request latencies or response sizes. Works with float values and predefined bucket ranges to accumulate observations. Use to measure distributions of events like HTTP response times or payload sizes.",
      "description_length": 266,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus.Counter",
      "library": "tiny_httpd.prometheus",
      "description": "This module provides counters for tracking cumulative metrics, supporting operations to create, increment, and set counter values. It works with integer values and allows optional tags and descriptions for metric metadata. Concrete use cases include counting HTTP requests, errors, or processed items in a system exposed to Prometheus.",
      "description_length": 335,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus.GC_metrics",
      "library": "tiny_httpd.prometheus",
      "description": "Tracks and exposes garbage collection metrics for Prometheus monitoring. It registers counters and gauges that capture GC-related statistics like minor and major collections, and provides a mechanism to update these metrics before they are emitted. Useful for observing memory behavior and GC performance in long-running services.",
      "description_length": 330,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus.Gauge",
      "library": "tiny_httpd.prometheus",
      "description": "This module provides operations to create and manipulate gauges, which track single numerical values that can increase or decrease. It supports setting absolute values, incrementing or decrementing by fixed amounts, and associates metrics with optional tags and descriptions. Concrete use cases include monitoring current queue sizes, active connections, or memory usage in real-time.",
      "description_length": 384,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tiny_httpd_prometheus",
      "library": "tiny_httpd.prometheus",
      "description": "This module implements Prometheus metric types\u2014counters, gauges, histograms\u2014and an HTTP endpoint for scraping. It tracks metrics like HTTP requests, latencies, and GC activity, updating them via registered callbacks. Use it to expose structured, tagged metrics from an HTTP server for Prometheus monitoring.",
      "description_length": 307,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tiny_httpd",
      "library": "tiny_httpd",
      "description": "The module provides operations to configure and run an HTTP/1.1 server using blocking I/O and threads, supporting route registration for handling standard and streaming requests. It works with HTTP requests and responses, server configuration parameters, and connection state, allowing middleware to transform data flows and handlers to manage endpoints like file uploads. This enables building lightweight web services with customizable routing, logging, and concurrency through thread pools or per-connection threads, suitable for use cases such as simple API endpoints or file upload handlers.",
      "description_length": 596,
      "index": 40,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 57,
    "meaningful_modules": 41,
    "filtered_empty_modules": 16,
    "retention_rate": 0.7192982456140351
  },
  "statistics": {
    "max_description_length": 625,
    "min_description_length": 254,
    "avg_description_length": 423.1951219512195,
    "embedding_file_size_mb": 0.5945978164672852
  }
}