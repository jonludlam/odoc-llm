{
  "package": "petrol",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:09:22.530636",
  "modules": [
    {
      "module_path": "Petrol.Postgres.Type",
      "library": "petrol",
      "description": "This module defines typed representations of PostgreSQL data types, mapping SQL types like BOOLEAN, INTEGER, TEXT, and DATE to OCaml values. It includes functions to specify exact type behaviors, such as fixed and variable-length character strings, different numeric types, and time values using Ptime. These definitions are used to ensure correct data serialization and type safety when interacting with PostgreSQL databases.",
      "description_length": 426,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Petrol.Postgres.Expr",
      "library": "petrol",
      "description": "This module provides a domain-specific language for constructing well-typed SQL expressions with operations spanning arithmetic, comparisons, logical operators, string manipulation, aggregation, and mathematical functions (e.g., rounding, logarithms, trigonometry). It works with typed expressions (`t`) that enforce nullability control, type coercion, and polymorphic value handling, enabling safe composition of PostgreSQL queries. Specific use cases include building complex queries with compile-time type safety, preventing SQL injection, and ensuring correctness for subqueries, conditional logic, and numeric/string operations.",
      "description_length": 633,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Sqlite3.Type",
      "library": "petrol",
      "description": "This module defines values representing SQLite type encodings for use in mapping OCaml values to SQL types. It includes types for booleans, integers, floating-point numbers, text, and binary data, each corresponding directly to SQLite's type system. These values are used to specify column types when defining database schemas or decoding query results in a type-safe manner.",
      "description_length": 375,
      "index": 2,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Petrol.Type.Numeric",
      "library": "petrol",
      "description": "This module defines a set of operations for numeric type abstractions, including addition, multiplication, and comparison functions. It works with abstract numeric types that support basic arithmetic and ordering, enabling generic numeric computations without relying on OCaml's built-in type classes. Concrete use cases include writing polymorphic math functions like summation over arbitrary numeric types or generic vector operations.",
      "description_length": 437,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Petrol.Sqlite3.Expr",
      "library": "petrol",
      "description": "This module enables the construction of type-safe SQL expressions through operations like arithmetic, comparison, logical operators, and null handling, while embedding OCaml values (integers, floats, strings, booleans) into SQL contexts with explicit type control. It centers around typed SQL expressions (`t`), supporting tasks like query condition building, aggregation (`sum`, `group_concat`), and pattern matching (`like`, `glob`), with utilities for value fallback (`coalesce`) and extrema calculation (`max_of`, `minf_of`). Its design ensures compile-time type correctness for scenarios like WHERE clause generation, numeric computations, and safe NULL propagation in database queries.",
      "description_length": 691,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Type",
      "library": "petrol",
      "description": "This module represents and manipulates SQL types, combining direct construction of custom types with Caqti bindings and SQL string generation with the Numeric submodule's arithmetic and comparison operations. It supports pretty-printing of types and values for debugging and query generation, while Numeric enables generic numeric computations over abstract SQL types. Main data types include custom SQL type representations and abstract numeric types, with operations like addition, multiplication, and comparisons. Examples include writing polymorphic summation functions or vector operations that work across different numeric SQL types in queries.",
      "description_length": 651,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.StaticSchema",
      "library": "petrol",
      "description": "This module creates and manages a static database schema with table declarations for use in prototyping or debugging. It supports defining tables with optional constraints and initializing the schema on a database connection. A concrete use case is rapidly setting up a fixed schema for testing queries without needing versioned migrations.",
      "description_length": 340,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Schema",
      "library": "petrol",
      "description": "This module enables defining SQL table schemas using OCaml types and expressions. It provides functions to construct table fields with constraints such as primary keys, unique constraints, and foreign key relationships, using types like `field`, `constraint_`, and lists of column names. Concrete use cases include declaring strongly-typed database tables with referential integrity, auto-incremented primary keys, and cross-table relationships enforced through foreign key constraints.",
      "description_length": 486,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Query",
      "library": "petrol",
      "description": "This module provides an embedded domain-specific language for constructing SQL queries using OCaml syntax. It supports operations such as `select`, `update`, `insert`, and `delete`, along with clauses like `where`, `join`, `group_by`, and `order_by`, enabling precise query composition. It works with typed SQL expressions and query structures, allowing developers to build complex queries programmatically and safely. Use cases include generating parameterized SQL queries for execution in a database engine, ensuring correctness through OCaml's type system.",
      "description_length": 559,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Request",
      "library": "petrol",
      "description": "This module creates parameterized SQL requests with defined result multiplicities, using query values to construct executable database operations. It works with the `query` type and produces `Request.t` values that specify expected result cardinalities like zero, one, or many rows. Concrete use cases include preparing SQL statements for execution with Caqti, where the multiplicity of the result is known in advance, such as fetching a single user record or a list of items.",
      "description_length": 476,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Sqlite3",
      "library": "petrol",
      "description": "This module provides a type-safe interface for working with SQLite databases by mapping OCaml values to SQL types and constructing SQL expressions with strong static guarantees. It supports core data types like booleans, integers, floats, text, and binary data, and allows embedding these values into SQL operations such as comparisons, arithmetic, and aggregation while preserving type correctness. Operations like `coalesce`, `sum`, `like`, and `group_concat` enable rich query construction, including conditional logic, null handling, and result aggregation. For example, you can safely build a WHERE clause with typed comparisons or compute the sum of a numeric column with compile-time assurance of type matching.",
      "description_length": 718,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.VersionedSchema",
      "library": "petrol",
      "description": "This module manages versioned database schemas with support for defining and applying migrations. It allows creating schemas with specific versions, declaring tables with optional version constraints, and initializing databases with automatic migration handling. Use cases include ensuring database schema compatibility across application versions and managing incremental schema changes in SQL databases.",
      "description_length": 405,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Postgres",
      "library": "petrol",
      "description": "This module provides typed representations of PostgreSQL data types and a domain-specific language for constructing well-typed SQL expressions. It supports data type mappings like BOOLEAN, INTEGER, TEXT, DATE, and operations including arithmetic, comparisons, logical operators, string manipulation, and aggregation with compile-time type safety. Users can define precise type behaviors, compose complex queries with nullability control, and safely handle polymorphic values. Example uses include building parameterized queries, performing type-safe date arithmetic, and composing nested subqueries with correct type coercion.",
      "description_length": 626,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Petrol.Expr",
      "library": "petrol",
      "description": "This module provides functions to pretty-print SQL expressions and lists of expressions using OCaml's Format module. It defines a type for wrapped assignments and supports working with expression lists, enabling structured and readable output of SQL expression data. Concrete use cases include debugging SQL expression trees and generating human-readable SQL output during query construction.",
      "description_length": 392,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Petrol",
      "library": "petrol",
      "description": "This module executes SQL requests on database connections, supporting commands, single-result retrieval, and result lists, while integrating submodules for SQL type handling, schema definition, query construction, and database-specific implementations. Main data types include typed SQL expressions, schema declarations, and parameterized queries, with operations like `select`, `insert`, `update`, and `delete`, alongside schema versioning and migration handling. It enables writing type-safe SQL queries with joins, aggregations, and constraints, defining tables with primary and foreign keys, and executing parameterized statements with known result cardinalities. Specific examples include building a polymorphic summation function over SQL numeric types, setting up a test database schema programmatically, or composing type-safe PostgreSQL queries with compile-time expression validation.",
      "description_length": 894,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 894,
    "min_description_length": 340,
    "avg_description_length": 540.6,
    "embedding_file_size_mb": 0.054927825927734375
  }
}