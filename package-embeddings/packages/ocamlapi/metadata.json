{
  "package": "ocamlapi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:52:40.258861",
  "modules": [
    {
      "module_path": "Ocamlapi.Route_exceptions",
      "library": "ocamlapi",
      "description": "Handles exceptional conditions during router creation, such as duplicate routes or invalid path patterns. Works directly with `Router.t` and string-based route paths. Ensures route uniqueness and proper formatting during initialization.",
      "description_length": 236,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi.Make",
      "library": "ocamlapi",
      "description": "This module instantiates a router for handling HTTP requests based on defined routes. It allows defining routes with specific HTTP methods and callbacks, and provides handlers for exceptions and fallback responses. It works with request, response, body, and IO types from its submodules, enabling concrete use cases like building REST APIs with Cohttp_async.",
      "description_length": 358,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi.Make_with_config",
      "library": "ocamlapi",
      "description": "This module creates a router with customizable defaults for handling HTTP requests, defining routes through callbacks and exception handlers. It works with request, response, body, and IO types, along with configuration settings, to manage route matching and execution. Concrete use cases include setting up RESTful endpoints with specific HTTP methods, handling errors during request processing, and defining fallback responses for unmatched routes.",
      "description_length": 450,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi",
      "library": "ocamlapi",
      "description": "Performs path-based HTTP request routing with support for defining and matching routes based on string patterns. Works with route definitions and request paths to determine handler execution. Used to manage and dispatch incoming HTTP requests to appropriate endpoints based on URL structure.",
      "description_length": 291,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 450,
    "min_description_length": 236,
    "avg_description_length": 333.75,
    "embedding_file_size_mb": 0.05838584899902344
  }
}