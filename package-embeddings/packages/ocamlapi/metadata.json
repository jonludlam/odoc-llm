{
  "package": "ocamlapi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:48.602746",
  "modules": [
    {
      "module_path": "Ocamlapi.Make.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, and transform HTTP message fields such as headers, method, resource, version, and transfer encoding. Works with a custom message type and Cohttp's header, method, version, and transfer encoding types. Enables validation, transformation, and extraction of specific message components into lists or modified message instances.",
      "description_length": 385,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlapi.Make_with_config.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, and transform HTTP message fields such as headers, method, resource, version, and transfer encoding. Works with a custom type representing HTTP messages and associated field types from Cohttp. Enables validation, transformation, and extraction of specific message components into lists or modified message instances.",
      "description_length": 377,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlapi.Make.Fields",
      "description": "manages HTTP message fields through iteration, folding, and transformation, supporting headers, method, resource, version, and transfer encoding. it handles custom and Cohttp types, enabling validation, extraction, and modification of message components. operations include checking conditions, converting fields to lists, and building new message instances. examples include extracting all headers, validating content-length, or modifying the request method.",
      "description_length": 459,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi.Make_with_config.Fields",
      "description": "manages HTTP message fields through iteration, folding, and transformation, supporting headers, method, resource, and more. it operates on a custom message type and associated field types, enabling validation, condition checks, and component extraction. it can convert fields into lists or generate modified message instances. examples include extracting all headers, filtering fields by name, or modifying the request method.",
      "description_length": 426,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlapi.Route_exceptions",
      "description": "Handles exceptions that occur during the construction of a router, including invalid route patterns and duplicate route definitions. Operates on strings, lists, and custom exception types specific to routing logic. Used to validate URL path structures and ensure unique route registrations in web application setups.",
      "description_length": 316,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlapi.Make_with_config",
      "description": "manages HTTP message components by allowing iteration, transformation, and extraction of fields like headers, method, and resource. it works with a custom message type, supporting operations such as filtering by field name, converting to lists, or modifying the request method. it enables validation and condition checks on message components, facilitating tasks like extracting all headers or altering the request path. examples include generating a new message with a modified method or filtering headers based on specific criteria.",
      "description_length": 534,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi.Make",
      "description": "manages HTTP message components by iterating, folding, and transforming fields such as headers, method, path, version, and transfer encoding. it supports both standard and custom types, allowing validation, extraction, and modification of message elements. operations include converting fields to lists, checking conditions, and constructing new messages. examples include extracting all headers, validating content-length, or changing the request method.",
      "description_length": 455,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ocamlapi",
      "description": "Provides functions for parsing and generating JSON data, including encoding OCaml values to JSON and decoding JSON into typed OCaml structures. Works with OCaml's native data types such as lists, variants, and records, as well as custom type definitions. Used to serialize application state for storage and deserialize configuration files during runtime.",
      "description_length": 354,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlapi",
      "description": "Handles HTTP request routing, message manipulation, and component extraction through specialized operations on custom message and route types. It enables validation of route patterns, modification of request methods, and extraction of headers or path components. Operations include filtering headers, checking content-length, and constructing new messages with altered fields. Examples include generating a message with a modified method or ensuring unique route registrations during setup.",
      "description_length": 490,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 534,
    "min_description_length": 316,
    "avg_description_length": 421.77777777777777,
    "embedding_file_size_mb": 0.03313255310058594
  }
}