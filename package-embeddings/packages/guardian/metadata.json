{
  "package": "guardian",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 89,
  "creation_timestamp": "2025-06-18T16:48:35.967413",
  "modules": [
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Rule",
      "description": "Handles querying, persisting, and removing rule entities based on context-specific criteria. Operates on rule records and context pairs to execute asynchronous database interactions. Used to retrieve active rules for a given target, store new rules, or remove existing ones from a system.",
      "description_length": 288,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Actor",
      "description": "Manages actor entities by creating, querying, and modifying their roles, ownership, and state. Operates on actor identifiers, role sets, and context lists to perform authorization and access control tasks. Used to assign permissions, check existence, retrieve actor details, and enforce ownership constraints within a secure system.",
      "description_length": 332,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Target",
      "description": "Creates and manages target entities with context and ownership metadata, performing checks, lookups, and updates. Operates on UUID-based target identifiers, actor identifiers, and target kinds. Used to verify existence, retrieve specific target attributes, and assign owners in a guarded system.",
      "description_length": 295,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid.Actor",
      "description": "This module provides foundational operations for handling identifier-like types, including creation, serialization, deserialization, and comparison. It works with structured data representations such as strings, bytes, and JSON, supporting endianness-aware conversions and safe/unsafe parsing. Use cases include network protocol handling, data interchange, and managing standardized identifiers like DNS names or OIDs.",
      "description_length": 418,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid.Target",
      "description": "This module handles encoding and decoding operations for a type representing distinguished names, supporting conversions between bytes, strings, and JSON with endianness and formatting options. It includes a constructor for creating instances of this type, primarily serving as a lightweight container for structured data. Use cases include protocol serialization, data interchange, and scenarios requiring safe or unsafe parsing of formatted identifiers.",
      "description_length": 455,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Rule.Set",
      "description": "This module offers set operations for manipulating collections of unique elements, including algebraic operations like union and intersection, as well as transformations and queries such as membership checks and subset validation. It works with generic set types and specialized rule-based sets, enabling tasks like element retrieval, sequence conversion, and serialization. Use cases include efficiently managing dynamic data, validating hierarchical relationships, and converting structured data for external processing.",
      "description_length": 522,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo",
      "description": "manages rule, actor, and target entities with context-aware operations, enabling dynamic data retrieval, modification, and enforcement. it handles rule records, actor identifiers, and UUID-based targets, supporting actions like retrieving active rules, assigning roles, and verifying target ownership. operations include asynchronous database interactions, permission checks, and metadata management across entities. examples include storing new rules, validating actor access, and updating target ownership constraints.",
      "description_length": 520,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Dependency",
      "description": "Manages dependencies between entities by registering relationships, retrieving specific or all dependencies, and combining effects with context. It operates with `kind` identifiers and a `parent_fcn` type that encapsulates effect-producing functions with optional context. Used to track hierarchical relationships in a system, such as linking configuration sections to their sources or mapping module dependencies in a build process.",
      "description_length": 433,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Rule",
      "description": "Handles querying, persisting, and removing rule entities with context-aware operations. Operates on rule records and lists, supporting asynchronous and error-handled workflows. Used to manage rule configurations in a system requiring transactional updates and context-sensitive execution.",
      "description_length": 288,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Actor",
      "description": "Provides operations to manage actor roles, ownership, and existence checks, including granting, revoking, and retrieving role sets. Works with actor UUIDs and role sets to enforce access control and identity management. Used to create actors with specified roles, verify actor presence, and adjust ownership in a permissioned system.",
      "description_length": 333,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Target",
      "description": "Provides operations to retrieve and manage target information, including its kind, owner, and associated checkers. Works with UUID-based target identifiers and actor references, supporting persistence and validation logic. Used to enforce access control by checking permissions tied to specific target types and their owners.",
      "description_length": 325,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Repo.Rule",
      "description": "Handles querying, persisting, and removing rule entities based on context-specific parameters. Operates on rule records and context pairs to execute database or storage operations. Used to retrieve multiple rules for policy evaluation, store new rules in a configuration system, and remove outdated rules from a rule set.",
      "description_length": 321,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Repo.Actor",
      "description": "Manages actor entities by creating, querying, and modifying their roles, ownership, and state. Operates on actor identifiers, role sets, and context dictionaries to enforce access control and hierarchy. Used to assign permissions, check existence, and track ownership within a secure system.",
      "description_length": 291,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Repo.Target",
      "description": "Creates and manages target entities with context and ownership metadata, performing checks, lookups, and updates. Operates on UUID-based target identifiers, ownership actors, and categorized target kinds. Used to verify existence, retrieve specific target details, and associate targets with actors in a guarded system.",
      "description_length": 319,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.UuidBase",
      "description": "This module offers functions for generating, converting, and comparing UUIDs, supporting operations like parsing from and serializing to bytes, strings, and JSON while handling format variations and endianness. It works with UUID values of type `t` and related representations, providing both safe and unsafe conversion variants. Use cases include generating unique identifiers, ensuring data consistency across systems, and facilitating interoperability in distributed applications.",
      "description_length": 483,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.Actor",
      "description": "This module handles serialization, deserialization, and comparison operations for identifier-like types (e.g., DNS, URL, OID), supporting conversions to and from strings, byte sequences (with endianness control), and JSON formats. It also manages UUID-based actor objects, providing creation utilities and type abstractions for working with unique identifiers in distributed systems. Use cases include network protocol data handling, persistent storage, and actor-based concurrency models requiring stable, unique references.",
      "description_length": 525,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.Target",
      "description": "This module handles encoding and decoding operations for distinguished name data, supporting conversions between bytes, strings, and JSON formats with endianness and safety options. It also manages UUID-based target objects through initialization and type definition functions, enabling structured representation and manipulation of uniquely identifiable entities. Use cases include data serialization workflows and systems requiring UUID-driven object tracking.",
      "description_length": 462,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid",
      "description": "The module provides functions for generating, parsing, and serializing UUIDs, including conversions between byte arrays, strings, and JSON formats, with support for endianness handling. It operates on a custom type representing UUID values, enabling validation, comparison, and formatting. Use cases include generating unique identifiers for distributed systems, ensuring data consistency across platforms, and facilitating efficient storage or transmission of UUIDs in structured data.",
      "description_length": 486,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Action",
      "description": "Provides equality, comparison, pretty printing, string conversion, and JSON serialization/deserialization for action representations. Works with a custom type `t` that encapsulates specific action definitions. Used to validate actions against predefined patterns and convert between string and structured formats.",
      "description_length": 313,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.RoleSet",
      "description": "This module offers set-based operations for managing collections of role elements, including union, intersection, membership checks, and transformations, with support for iterating and serializing data. It works with structured role data (ActorRoles.t) and provides utilities for converting between representations, making it suitable for tasks like access control management or configuration aggregation. Specific use cases include dynamically combining permissions or validating role hierarchies through subset relationships.",
      "description_length": 527,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.ActorSpec",
      "description": "Provides equality checks, pretty printing, string conversion, and comparison for actor specification data. Works with a custom type representing actor roles and target roles configurations. Used to validate actor role assignments and serialize/deserialize actor specs for messaging systems.",
      "description_length": 290,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.TargetSpec",
      "description": "Provides operations to compare, serialize, and deserialize target specifications, along with a method to extract a string value based on role definitions. Works with a custom type representing target configurations derived from actor and target role structures. Used to validate target roles against specified constraints and generate human-readable representations.",
      "description_length": 366,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Rule",
      "description": "Provides functions to retrieve, persist, and remove rule entities, with support for context-aware operations. Operates on rule records and lists, using Lwt for asynchronous execution and a custom monad for error handling. Used to manage rule configurations in a system requiring transactional updates and safe deletions.",
      "description_length": 320,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Effect",
      "description": "Provides operations to compare, serialize, and inspect pairs of Action.t and TargetSpec.t values. Includes equality checks, pretty printing, and JSON conversion for structured data. Used to validate and represent action-target relationships in a domain-specific context.",
      "description_length": 270,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.ValidationSet",
      "description": "Provides operations to combine validation rules using logical AND and OR, create single-effect validations, and filter by specific actor roles. Works with a custom type representing sets of validation rules based on actor and target roles. Used to enforce access control policies by aggregating and evaluating multiple validation conditions.",
      "description_length": 341,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Actor",
      "description": "Provides operations to manage actor roles, ownership, and existence, including granting, revoking, and querying role sets. Works with actor UUIDs and role sets to enforce access control and identity management. Used to create actors with specified roles, verify actor presence, and retrieve actor data with context-aware validation.",
      "description_length": 332,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Target",
      "description": "Provides operations to retrieve and manage target information, including finding by kind or UUID, checking ownership, and validating access through checkers. Works with UUID-based target identifiers, actor UUIDs, and action validation functions. Used to enforce access control policies by verifying permissions and associating targets with owners.",
      "description_length": 347,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Authorizer",
      "description": "Checks if an actor is permitted to perform a specific effect based on a list of rules, using actor and effect data types. Evaluates actor-rule membership with boolean checks and error-prone results. Validates actor permissions across multiple rules, supporting either all or any rule satisfaction.",
      "description_length": 297,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence",
      "description": "manages rule, actor, and target entities with context-aware operations, supporting dynamic data retrieval, modification, and enforcement through asynchronous database interactions and permission checks. it handles rule records, actor identifiers, and UUID-based targets, enabling actions like retrieving active rules, assigning roles, and validating target ownership. operations include metadata management and constraint enforcement across entities. examples include storing new rules, verifying actor access, and updating target ownership constraints.",
      "description_length": 553,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Rule",
      "description": "Handles querying, persisting, and removing rule entities based on context-specific criteria. Operates on `target_spec` to filter rules and returns results as a list wrapped in a lazy monad. Used to manage rule configurations in a system where context-aware operations are required.",
      "description_length": 281,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Actor",
      "description": "Creates and manages actor entities with role-based access control, enabling operations like checking existence, retrieving specific actor data, and modifying roles or ownership. Works with actor identifiers, role sets, and typed actor records. Used to enforce access policies by granting, revoking, or querying roles and owner relationships in a secure system.",
      "description_length": 360,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Target",
      "description": "Creates and manages target entities with context and ownership metadata, performing checks, lookups, and updates. Operates on UUIDs for targets and actors, and categorizes targets by kind. Used to verify existence, retrieve specific target details, and assign or retrieve ownership in a guarded system.",
      "description_length": 302,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Repo",
      "description": "manages rule, actor, and target entities through context-aware operations, enabling storage, retrieval, and modification of structured data. It supports rule persistence and evaluation, actor role management, and target ownership tracking using identifiers, contexts, and metadata. Operations include querying rules for policy checks, assigning actor roles, and verifying target existence. Examples include storing policy rules, enforcing access control via actor roles, and associating targets with authorized users.",
      "description_length": 517,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Dependency",
      "description": "Registers dependencies between different kinds of entities, with options to control duplication and tagging. Operates on `kind` identifiers and `parent_fcn` functions that encapsulate effect-producing logic. Used to locate specific dependencies, retrieve all dependencies of a type, and combine results with context-aware effect handling.",
      "description_length": 338,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Rule",
      "description": "Handles querying, persisting, and removing rule entities based on context-specific criteria. Operates on rule records and context pairs to execute asynchronous database interactions. Used to retrieve active rules for a given configuration, store new rules to a persistent backend, and remove rules during policy updates.",
      "description_length": 320,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Actor",
      "description": "Manages actor entities by creating, querying, and modifying their roles, ownership, and state. It operates on actor identifiers, role sets, and context lists to perform authorization and access control operations. Used to enforce role-based access policies and track hierarchical actor relationships in a distributed system.",
      "description_length": 324,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Target",
      "description": "Creates and manages target entities with context and ownership metadata, supporting operations to check existence, retrieve specific target details, and update owner associations. Works with UUID-based target identifiers, ownership identifiers, and categorized target types. Used to enforce access control by validating target ownership and retrieving target-specific configurations.",
      "description_length": 383,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard",
      "description": "Handles conversion of authorization contexts into targetable roles, enabling role-based access control checks. Operates on custom authorization tokens and returns results wrapped in Lwt_result for asynchronous error handling. Used to validate user permissions against specific resources in a secure application flow.",
      "description_length": 316,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.BaseType",
      "description": "Compares, serializes, and deserializes values of type `t` using JSON and pretty-printing. Provides string conversion, UUID target lookup, and a list of all registered instances. Supports equality checks and name retrieval for type-specific data.",
      "description_length": 245,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid",
      "description": "combines UUID generation, conversion, and comparison with serialization and deserialization capabilities for identifier-like types and distinguished names. It supports operations on `t` types, byte sequences, strings, and JSON, with endianness control and safety checks. Users can generate unique identifiers, convert between formats, and manage UUID-based objects in distributed systems. Examples include parsing UUIDs from strings, encoding distinguished names for storage, and serializing identifiers for network transmission.",
      "description_length": 529,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Owner",
      "description": "Provides a type for representing an owner using a UUID, with a function to convert between the type and a Caqti-compatible representation. Works with the `Uuid.Actor.t` type and integrates with database operations through Caqti. Used to store and retrieve owner identifiers in a persistent data store.",
      "description_length": 301,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Role",
      "description": "Provides equality checks, pretty printing, string conversion, and JSON serialization for role entities. Operates on a type representing actor roles, including methods to retrieve associated targets and convert from strings. Used to validate role identities, serialize role data, and access role-specific target information.",
      "description_length": 323,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Kind",
      "description": "Provides equality checks, pretty printing, string conversion, and JSON serialization for a type representing target roles. Works with a custom type wrapped around target role data and includes functions to extract specific targets or convert from strings. Used to serialize and deserialize role data in a system handling user access controls.",
      "description_length": 342,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Roles",
      "description": "The module offers set operations such as union, intersection, membership checks, and transformations for a generic type 't, with specialized support for `ActorRoles.t` elements. It enables manipulating role hierarchies, converting between sets, lists, sequences, and JSON, and performing predicate-based queries. Use cases include managing access controls, validating role subsets, and serializing role configurations in system workflows.",
      "description_length": 438,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Action",
      "description": "Provides equality, comparison, pretty printing, string conversion, and JSON serialization/deserialization for action values. Works with a custom type `t` representing actions, supporting validation against specific action patterns. Used to verify if an action conforms to expected types during data processing or user input validation.",
      "description_length": 335,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo",
      "description": "Manages rule, actor, and target entities with context-aware operations, enabling queries, modifications, and access control. Processes `target_spec` for rule filtering, handles actor roles and ownership, and tracks target metadata using UUIDs and kinds. Supports lazy evaluation for rule results, role-based access checks, and ownership assignments. Examples include retrieving context-specific rules, verifying actor permissions, and updating target ownership.",
      "description_length": 461,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Dependency",
      "description": "Registers dependencies between kinds with optional tags and duplicate handling, retrieves dependencies by parent and child kind, and supports finding all dependencies or combined effects with context. Works with kinds, parent_fcn, and effect types, enabling structured dependency resolution. Used to track and resolve hierarchical relationships in a system's configuration or execution flow.",
      "description_length": 391,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Rule",
      "description": "Handles querying, persisting, and removing rule entities with context-aware operations. Operates on rule records and lists, supporting asynchronous and error-handled workflows. Used to manage rule configurations in a system requiring transactional updates and context-sensitive execution.",
      "description_length": 288,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Actor",
      "description": "Provides operations to manage actor roles, ownership, and existence checks, including granting, revoking, and retrieving role sets. Works with actor UUIDs and role sets to enforce access control and identity management. Used to create actors with specified roles, verify actor presence, and associate actors with owners in a secure system.",
      "description_length": 339,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Target",
      "description": "Provides operations to retrieve and manage target information, including finding by kind or owner, checking permissions, and validating target existence. Works with UUID-based target and actor identifiers, along with action validation functions. Used to enforce access control rules, track ownership, and ensure target integrity in security-sensitive workflows.",
      "description_length": 361,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid.Actor",
      "description": "This module provides functions for creating, converting, and comparing structured identifier-like values, supporting byte/string manipulation with endianness handling, pretty-printing, and JSON serialization. It operates on a custom type `t` designed for representing identifiers or similar data, enabling use cases like network protocol data serialization or configuration management. Minimal actor initialization functionality is also included, focusing on object creation for specific runtime contexts.",
      "description_length": 505,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid.Target",
      "description": "This module handles creation and manipulation of a structured data type, enabling serialization to and deserialization from bytes, strings, and JSON formats, with customizable endianness and formatting. It supports comparison operations for instances of the type, facilitating data integrity checks or ordering. Use cases include data interchange between systems, persistent storage, or state management where consistent representation and comparison are required.",
      "description_length": 464,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Rule.Set",
      "description": "The module provides operations for managing ordered sets of elements, including standard set operations like union, intersection, and difference, along with membership checks, subset validations, and element transformations. It supports constructing sets from iterables, converting them to lists or strings, and performing predicate-based queries, making it suitable for applications requiring efficient uniqueness management and ordered data processing.",
      "description_length": 454,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo",
      "description": "Manages rule, actor, and target entities with context-aware operations, enabling dynamic policy enforcement and access control. Provides operations to query, store, and remove rules, manage actor roles and hierarchies, and validate and update target ownership. Supports asynchronous database interactions for rules, authorization checks for actors, and metadata-driven target management. Retrieves active rules for configurations, enforces role-based access, and validates target ownership for policy compliance.",
      "description_length": 512,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Dependency",
      "description": "Registers dependencies between kinds with optional tags and duplicate handling, retrieves dependencies by parent and child kind, and supports finding all dependencies or combined effects with context. Works with kinds, parent_fcn, and effect types, enabling structured dependency resolution. Used to track and resolve hierarchical relationships in a system's configuration or execution flow.",
      "description_length": 391,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Rule",
      "description": "Handles querying, persisting, and removing rule entities with context-aware operations. Operates on rule records and lists, supporting asynchronous execution and error handling. Used to manage rule configurations in a system requiring transactional updates and context-sensitive storage.",
      "description_length": 287,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Actor",
      "description": "Provides operations to manage actor roles, ownership, and existence in a system, including granting, revoking, and querying role sets. Works with actor identifiers, role sets, and optional owner references to enforce access control. Used to create actors with specific permissions, verify actor presence, and retrieve actor data with context-aware constraints.",
      "description_length": 360,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Target",
      "description": "Provides operations to retrieve and manage target information, including its kind, owner, and associated checkers. Works with UUID-based target identifiers and actor references, supporting persistence and validation logic. Used to enforce access control by checking permissions tied to specific target types and their owners.",
      "description_length": 325,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.Repo.Rule",
      "description": "Handles querying, persisting, and removing rule entities based on context-specific criteria. Operates on rule records and context pairs to execute asynchronous database interactions. Used to retrieve active rules for a given target, store new rules, or remove existing ones from a system.",
      "description_length": 288,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Repo.Actor",
      "description": "Manages actor entities by creating, querying, and modifying their roles, ownership, and state. It operates on actor identifiers, role sets, and context lists to perform authorization and access control operations. Use cases include assigning permissions, checking actor existence, and updating ownership in a secure system.",
      "description_length": 323,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Repo.Target",
      "description": "Creates and manages target entities with context and ownership metadata, supporting checks for existence, retrieval by kind or owner, and updates to ownership. Operates on UUID-based target identifiers and actor references within a monadic error-handling framework. Used to enforce access control and track resource ownership in a guarded system.",
      "description_length": 346,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Contract.Uuid.Actor",
      "description": "This module handles operations for managing structured identifiers or data entities, including creation, conversion, comparison, and serialization into byte streams, strings, and JSON formats, with support for endianness and pretty-printing. It is designed for scenarios requiring efficient data representation and exchange, such as network protocols or persistent storage, and provides minimal actor initialization functionality for object-oriented workflows.",
      "description_length": 460,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract.Uuid.Target",
      "description": "The module provides encoding and decoding functionalities for an abstract type `t`, enabling conversions between bytes, strings, and JSON formats, with options for endianness and safe/unsafe handling. It includes a `create` function to instantiate `t`, which acts as a container for distinguished name data, suitable for scenarios requiring structured data serialization or protocol-specific transformations. Use cases include parsing and generating network protocols or configuration data where precise format control is essential.",
      "description_length": 532,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make",
      "description": "Provides operations to compare, serialize, and inspect values of type `t`, including converting to and from JSON, formatting for output, and extracting associated target information. Works with a custom type `t` that represents build configurations, supporting string parsing and retrieval of unique identifiers. Used to validate build settings, generate human-readable logs, and facilitate data exchange with external systems.",
      "description_length": 427,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.Pools.DefaultConfig",
      "description": "Provides access to database connection settings, including the type of connection and the size of the connection pool. Works with custom types representing database configurations. Used to configure application behavior based on predefined database parameters.",
      "description_length": 260,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.Pools.Make",
      "description": "Provides access to a database connection and retrieves the size of the connection pool. Works with connection_type and integer values to manage database resources. Used to configure and monitor database connectivity in applications requiring persistent connections.",
      "description_length": 265,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid",
      "description": "The module offers functions for generating, parsing, and serializing UUIDs, including conversions between byte arrays, strings, and JSON, with support for endianness handling. It operates on UUID values (type `t`) and includes validation and comparison utilities. Use cases include ensuring unique identifier generation, cross-system data interoperability, and consistent representation across different storage or communication formats.",
      "description_length": 437,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Action",
      "description": "Provides equality, comparison, and pretty-printing for action instances, along with string serialization and JSON conversion. Works with a custom type `t` representing actions, supporting validation against specific action patterns. Used to verify if an action matches a predefined set, such as checking if an action is \"Manage\" or another specified action.",
      "description_length": 357,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.RoleSet",
      "description": "This module offers a comprehensive set of operations for managing ordered collections, including standard set manipulations like union, intersection, and difference, as well as advanced queries and transformations. It works with generic ordered sets of elements, particularly tailored for handling `ActorRoles.t` types, and supports efficient membership checks, subset validations, and predicate-based filtering. Use cases include role management in access control systems, data serialization (e.g., JSON or list conversions), and dynamic set construction from iterables or sequences.",
      "description_length": 584,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.ActorSpec",
      "description": "Provides equality checks, pretty printing, string conversion, and comparison for actor data. Works with a custom type representing actor specifications, including role-based value extraction. Supports JSON serialization and validation between actor instances.",
      "description_length": 259,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.TargetSpec",
      "description": "Provides equality checks, pretty printing, string conversion, and comparison for target specifications. Works with a custom type `t` that represents target roles and their associated values. Enables validation between target configurations and serialization to and from JSON.",
      "description_length": 275,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Rule",
      "description": "Provides asynchronous operations to retrieve, store, and remove rule entities, with context-aware handling. Operates on rule records and lists, supporting persistent storage and deletion. Used to manage rule configurations in a system requiring transactional updates and context-sensitive execution.",
      "description_length": 299,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.Effect",
      "description": "Provides operations to compare, serialize, and inspect pairs of Action.t and TargetSpec.t values. Includes functions to check validity between two instances and convert to/from JSON format. Used to manage and validate action-target relationships in a structured, type-safe manner.",
      "description_length": 280,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.ValidationSet",
      "description": "Provides operations to combine validation rules using logical AND and OR, create rules based on specific actor roles, and represent validation conditions as a structured type. Works with a custom type `t` that encapsulates validation logic and interacts with JSON through serialization and deserialization functions. Used to enforce access control policies by aggregating and evaluating multiple validation criteria.",
      "description_length": 416,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Actor",
      "description": "Provides operations to manage actor roles, ownership, and existence checks, including granting, revoking, and retrieving role sets. Works with actor UUIDs, role sets, and actor records tied to specific kinds. Used to enforce access control by checking or modifying actor permissions and relationships within a system.",
      "description_length": 317,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Target",
      "description": "Provides operations to retrieve and manage target information, including finding by kind or owner, checking existence, and associating owners. Works with UUID-based target and actor identifiers, along with action and kind types. Used to enforce access control by validating checkers associated with specific target kinds.",
      "description_length": 321,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.Authorizer",
      "description": "Checks whether an actor is permitted to perform a specific effect based on a list of rules, using tags for logging. Operates on actor and rule data structures, including `Actor.t`, `Rule.t`, and `Effect.t`. Validates actor permissions for access control in security-sensitive workflows.",
      "description_length": 286,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence",
      "description": "manages rule, actor, and target entities with context-aware operations, enabling dynamic policy enforcement and access control. It supports querying, storing, and removing rules, managing actor roles and hierarchies, and validating and updating target ownership. Asynchronous database interactions, authorization checks, and metadata-driven target management are built-in. For example, it can retrieve active rules for a configuration, enforce role-based access during a request, and validate target ownership before granting access.",
      "description_length": 533,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract.Uuid",
      "description": "The module provides functions for generating, converting, and comparing UUIDs, with support for serializing and parsing them into bytes, strings, and JSON formats, while handling variant-specific endianness. It operates on UUID values of type `t`, offering both safe and unsafe byte manipulation options. Use cases include ensuring unique identifier generation in distributed systems and facilitating data exchange between heterogeneous platforms.",
      "description_length": 447,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Repo",
      "description": "Manages rule, actor, and target entities with context-aware operations, enabling asynchronous database interactions, access control, and ownership tracking. Provides operations to query, store, and remove rules, manage actor roles and permissions, and create and update targets with metadata. Supports retrieving active rules for a target, assigning actor permissions, and checking target ownership. Executes secure, context-sensitive actions within a monadic error-handling structure.",
      "description_length": 485,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.Dependency",
      "description": "Registers dependencies between kinds with optional tags and duplicate handling, retrieves dependencies by parent and child kind, and collects all dependencies or combined effects with context. Works with kinds, parent_fcn, and effect types, supporting dependency tracking and resolution. Used to manage hierarchical relationships and effect propagation in a structured system.",
      "description_length": 376,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.Pools",
      "description": "Provides functions to access a database connection and retrieve the size of the database connection pool. Operates with connection_type and integer values to manage resource allocation. Used to configure and monitor database access in applications with concurrent request handling.",
      "description_length": 281,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb",
      "description": "manages build configuration data through a custom type `t`, enabling comparison, serialization, and inspection with JSON conversion, formatting, and identifier extraction. It supports parsing strings into configurations and retrieving target-specific details for validation and logging. Operations include converting configurations to readable formats and exchanging data with external systems. Examples include generating logs from build settings and exporting configurations in JSON for integration.",
      "description_length": 501,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Utils",
      "description": "Provides functions for handling variant strings, exception propagation with context, and role validation. Operates on strings, tuples, and Lwt-promise structures. Used to parse structured error messages, manage context-aware failures, and validate role-based configurations.",
      "description_length": 274,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract",
      "description": "Generates, converts, and compares UUIDs, supporting byte, string, and JSON serialization with variant-specific endianness handling. It works with `t` values, offering safe and unsafe operations for low-level manipulation. Users can create unique identifiers for distributed systems or exchange data across platforms. Examples include generating a UUID, converting it to a string, and parsing it back from JSON.",
      "description_length": 410,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make",
      "description": "Handles conversion of internal representations to authorizable targets, incorporating context for role-based access control. Operates on a custom type `t` that encapsulates target information. Used to validate and transform data structures before access control checks.",
      "description_length": 269,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "guardian",
      "description": "Handles role-based access control by defining and checking permissions through predicate functions. Operates on custom role and permission types, enabling fine-grained authorization logic. Used to enforce access restrictions in user authentication flows and API endpoints.",
      "description_length": 272,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend",
      "description": "Manages database connections and build configurations, handling resource allocation and data serialization. It works with connection_type and t, supporting operations like retrieving pool sizes, parsing build settings, and converting data to JSON. Tasks include monitoring database usage and generating logs from configuration details. Examples include validating build targets and exporting settings for external systems.",
      "description_length": 422,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian",
      "description": "Provides equality checks, pretty printing, string representation, and comparison for security policy objects. Handles serialization to and from JSON, and extracts target identifiers or throws exceptions when missing. Processes string-based policy creation and retrieves a list of all defined policies.",
      "description_length": 301,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 90,
    "meaningful_modules": 89,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9888888888888889
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 245,
    "avg_description_length": 372.438202247191,
    "embedding_file_size_mb": 0.3237333297729492
  }
}