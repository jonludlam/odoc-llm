{
  "package": "guardian",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 78,
  "creation_timestamp": "2025-08-15T16:25:48.995767",
  "modules": [
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Target",
      "library": "guardian.backend",
      "description": "This module provides database operations for managing target entities, including creating, checking existence, retrieving, and updating target ownership and kinds. It works with string-keyed context data, UUIDs for targets and actors, and custom types for target kinds and errors. Concrete use cases include persisting target records with optional owners, querying target metadata, and modifying ownership information in a MariaDB backend.",
      "description_length": 439,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Actor",
      "library": "guardian.backend",
      "description": "This module provides operations for managing actor entities in a MariaDB database, including creating actors, checking existence, retrieving actor data, and manipulating roles and ownership relationships. It works with actor identifiers (UUIDs), role sets, and contextual metadata pairs for tracking operations. Concrete use cases include persisting actor state, enforcing role-based access control, and managing hierarchical ownership structures in a distributed system.",
      "description_length": 471,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo.Rule",
      "library": "guardian.backend",
      "description": "This module provides database operations for managing rule records in a MariaDB backend. It supports querying all rules for a target, saving new rules, and deleting existing rules, returning appropriate result types for each. The module works directly with rule data structures and target specifications, handling persistence and retrieval with context-aware operations.",
      "description_length": 370,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Dependency",
      "library": "guardian.backend",
      "description": "This module manages dependency resolution logic using effect handlers and contextual data. It provides operations to register, retrieve, and combine dependency functions, which are used to resolve or modify effects based on parent-child relationships. Concrete use cases include implementing custom dependency injection and effect routing in a database-backed application.",
      "description_length": 372,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Actor",
      "library": "guardian.backend",
      "description": "This module manages actor roles and ownership relationships in a MariaDB database. It provides operations to assign, revoke, and query roles for actors, as well as set and retrieve ownership links between actors. Use cases include enforcing access control policies and managing hierarchical actor relationships in a distributed system.",
      "description_length": 335,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid.Actor",
      "library": "guardian.backend",
      "description": "This module provides utilities for generating, parsing, and transforming UUIDs, including operations to create identifiers from strings or random sources, convert them to JSON or standardized string formats, and compare or serialize values. It works with UUIDs represented as strings and encapsulated within an Actor type, incorporating predefined namespaces like DNS, URL, and OID for structured generation. Typical applications include managing unique identifiers for database records, validating UUID inputs, and serializing identifiers for APIs or distributed systems.",
      "description_length": 572,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Repo",
      "library": "guardian.backend",
      "description": "This module implements database persistence for security policy entities in a MariaDB backend, providing operations to manage rules, actors, and targets with strong typing and context-aware queries. It works with UUIDs, rule specifications, target kinds, and role sets to enforce access control policies and ownership hierarchies. Concrete use cases include storing and retrieving rule sets for targets, managing actor roles and ownership links, and persisting target metadata with ownership and kind information.",
      "description_length": 513,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Target",
      "library": "guardian.backend",
      "description": "This module provides functions to interact with target entities in a MariaDB database, including operations to find, create, check existence, and manipulate ownership of targets. It works with data types such as `Guardian__.Uuid.Target.t` for target identifiers, `Guardian__.Uuid.Actor.t` for actors, and `Guardian__.Action.t` for actions. Concrete use cases include retrieving target metadata, assigning or removing owners, and defining access control checkers for specific target kinds.",
      "description_length": 488,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid.Target",
      "library": "guardian.backend",
      "description": "This module provides operations for generating, parsing, and manipulating UUID namespace identifiers, including functions to convert between string, byte, and native representations, handle endianness variations, and perform equality checks or comparisons. It works with a concrete type `t` representing UUIDs, supporting use cases like unique identifier management in distributed systems or database key generation, where precise UUID formatting, serialization to JSON, or strict validation of string inputs (via `of_string_exn`) are required.",
      "description_length": 544,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence.Rule",
      "library": "guardian.backend",
      "description": "This module implements persistence operations for rule data structures, supporting asynchronous database interactions via Lwt. It provides functions to retrieve, save, and delete individual rules or rule lists, with optional contextual metadata. Use cases include managing rule configurations in a distributed system or persisting access control policies for dynamic evaluation.",
      "description_length": 378,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Rule.Set",
      "library": "guardian.backend",
      "description": "This module offers set operations like union, intersection, difference, and filtering tailored for access control rules, alongside utilities for membership checks, element transformation, and conversion to lists, sequences, or formatted strings. It operates on sets of `Guard.Rule.t` values, leveraging their structured representation to enable precise rule management. These capabilities are particularly useful for permission system implementations, policy analysis, and generating human-readable rule set summaries for auditing purposes.",
      "description_length": 540,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Action",
      "library": "guardian.backend",
      "description": "This module defines a set of standard CRUD and administrative actions (`Create`, `Read`, `Update`, `Delete`, `Manage`) used to represent and validate access control operations. It provides functions for comparing, serializing, and converting actions to and from strings and JSON, ensuring correct handling of action values in storage or communication layers. The `is_valid` function checks whether a given action is valid relative to another action or the `Manage` privilege, enabling fine-grained permission validation in backend services.",
      "description_length": 540,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.Actor",
      "library": "guardian.backend",
      "description": "This module enables the generation, conversion, and comparison of UUID-based identifiers, handling both string and binary representations while accounting for endianness variations. It operates on the `Uuid.Actor.t` type, providing utilities for JSON serialization, string parsing, and integration with formatting libraries. These capabilities are particularly useful for persisting unique identifiers in databases, exchanging data across systems, and maintaining consistent identifier formats in distributed applications.",
      "description_length": 522,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Target",
      "library": "guardian.backend",
      "description": "This module provides database operations for managing target entities, including creating targets, checking existence, retrieving target details, and updating or finding associated owners. It works with UUIDs for both targets and actors, along with string-based contexts for metadata. Concrete use cases include storing and querying access control targets and managing ownership relationships in a MariaDB backend.",
      "description_length": 414,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.ValidationSet",
      "library": "guardian.backend",
      "description": "This module defines a set of validation rules composed of logical operations (`And`, `Or`), single effects (`One`), and specific actor roles. It provides functions to construct, compare, serialize, and display these validation sets. Use cases include defining access control policies and permission validation logic in a structured and composable way.",
      "description_length": 351,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.Target",
      "library": "guardian.backend",
      "description": "This component provides utilities to generate, convert, and compare UUID target values, handling both textual and byte string representations with safe and unsafe conversion mechanisms. It operates on `Uuid.Target.t` and string data, offering serialization for database persistence via `Caqti_type.t` and JSON formatting, particularly for managing UUIDs like `nil` or `ns_dns` in storage systems.",
      "description_length": 396,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.ActorSpec",
      "library": "guardian.backend",
      "description": "This module defines and manipulates actor specifications used for access control checks, supporting comparisons, serialization, and validation. It works with actor roles and UUIDs, providing operations to convert to and from JSON, format for display, and check equality or ordering. Concrete use cases include representing actors in permission validation logic and serializing actor data for storage or transmission.",
      "description_length": 416,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Actor",
      "library": "guardian.backend",
      "description": "This module manages actor entities in a MariaDB database, providing operations to create actors, check existence, retrieve actor data, and manipulate roles and ownership relationships. It works with actor identifiers (UUIDs), role sets, and contextual key-value pairs for metadata. Concrete use cases include setting up new actors with initial roles, verifying actor existence, assigning or removing roles, and managing ownership hierarchies between actors.",
      "description_length": 457,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Authorizer",
      "library": "guardian.backend",
      "description": "This module provides functions to evaluate authorization rules against actors in a MariaDB-backed system. It supports operations like checking if an actor satisfies a rule, validating effects against a list of rules, and determining rule membership. Concrete use cases include enforcing access control policies for database operations based on user roles and permissions.",
      "description_length": 371,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Effect",
      "library": "guardian.backend",
      "description": "This module defines a tuple type combining an action and a target specification, primarily used to represent and validate policy guard effects. It provides operations for equality checks, validation, string and JSON serialization, and pretty-printing. Concrete use cases include enforcing access control policies and serializing guard effects for storage or transmission.",
      "description_length": 371,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Uuid",
      "library": "guardian.backend",
      "description": "This module implements UUID generation, parsing, and transformation for two distinct types: `Actor`, which handles UUIDs within predefined namespaces like DNS and URL for structured identifier creation, and `Target`, which manages UUID namespace identifiers with support for binary and string conversions. It operates on UUIDs represented as strings and specialized types for strict validation, serialization to JSON, and byte-level manipulation. Use cases include assigning unique identifiers for database records, validating UUID inputs in APIs, and serializing identifiers for transmission in distributed systems.",
      "description_length": 616,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid.UuidBase",
      "library": "guardian.backend",
      "description": "This module offers functions to generate UUIDs (versions 1 and 4), convert them to and from byte strings, mixed-endian formats, and strings, and parse UUIDs with error handling. It supports serialization via Yojson and integrates with Caqti for database storage, providing a typed representation for UUID values. Use cases include persistent storage in MariaDB, JSON data exchange, and handling UUIDs in various binary or textual formats.",
      "description_length": 438,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Actor",
      "library": "guardian.backend",
      "description": "This module defines operations for creating and manipulating actor values with associated roles, owners, and unique identifiers. It supports equality checks, comparison, JSON serialization/deserialization, and string representation of actors, based on a polymorphic actor type. Concrete use cases include managing user or system entities in an access control system, where actors have specific roles and ownership relationships.",
      "description_length": 428,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Target",
      "library": "guardian.backend",
      "description": "This module defines operations for constructing, comparing, and serializing target entities with associated owners and unique identifiers. It works with polymorphic target types wrapped in a `Guard.Target.t` structure, which includes an ID of type `Guard.Uuid.Target.t` and an optional owner ID of type `Guard.Uuid.Actor.t`. Concrete use cases include managing access control targets such as resources or objects in a database, where each target must be uniquely identifiable and optionally linked to an owning actor.",
      "description_length": 517,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.TargetSpec",
      "library": "guardian.backend",
      "description": "This module defines and manipulates target specifications for access control, supporting comparisons, serialization, and validation. It works with variant types representing targets either by role or by role and UUID, along with standard types like strings and formatters. Concrete use cases include checking if a requested target matches a valid target specification and converting target specs to and from JSON for API interactions.",
      "description_length": 434,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.RoleSet",
      "library": "guardian.backend",
      "description": "This module supports manipulation and transformation of sets of actor roles with operations like union, intersection, difference, and membership checks, alongside functional utilities for filtering, mapping, and safe value extraction. It provides conversions between role sets and lists/sequences, as well as serialization to strings and Yojson for persistence or API interactions. Designed for access control systems, it enables efficient management of role-based permissions and policy enforcement in a MariaDB-backed environment.",
      "description_length": 532,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.Rule",
      "library": "guardian.backend",
      "description": "This module defines access control rules as tuples of actor specifications, actions, and target specifications. It provides operations for comparing, printing, and serializing rules, along with a `Set` submodule for managing collections of rules using set algebra and transformations. These features support precise rule evaluation, policy analysis, and audit logging in permission systems.",
      "description_length": 390,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard.MakePersistence",
      "library": "guardian.backend",
      "description": "Implements database persistence for security policy entities in a MariaDB backend, providing operations to manage rules, actors, and targets with strong typing and context-aware queries. Works with UUIDs, rule specifications, target kinds, and role sets to enforce access control policies and ownership hierarchies. Concrete use cases include storing and retrieving rule sets for targets, managing actor roles and ownership links, and persisting target metadata with ownership and kind information.",
      "description_length": 498,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo.Rule",
      "library": "guardian.backend",
      "description": "This module provides database operations for managing rule records, including retrieving all rules for a target, saving new rules, and deleting existing rules. It works with `rule` and `target_spec` types, interacting with MariaDB through Lwt for asynchronous queries. Concrete use cases include persisting validation rules for specific targets and ensuring rule consistency in a distributed system.",
      "description_length": 399,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.BaseType",
      "library": "guardian.backend",
      "description": "This module defines a data type `t` based on the provided `Core` module and implements essential operations for its manipulation, including comparison, serialization to and from JSON, string conversion, and equality checks. It also provides functions to retrieve named targets associated with values of type `t`, along with a Caqti type definition for database mapping. Use cases include representing and querying structured data in a MariaDB-backed application, such as mapping database rows to typed values with associated UUIDs.",
      "description_length": 531,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Owner",
      "library": "guardian.backend",
      "description": "This module defines a database schema type for owner records using UUIDs as identifiers. It provides functions to interact with owner data in a MariaDB database, including serialization and deserialization of UUIDs. Concrete use cases include managing user ownership in a system where actors are identified by UUIDs.",
      "description_length": 316,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Rule",
      "library": "guardian.backend",
      "description": "This module implements CRUD operations for rule data types in a MariaDB database, including functions to find, save, delete, and bulk save rules. It works directly with `rule` records and uses a context parameter for request-specific metadata. Concrete use cases include persisting rule configurations, applying rule changes transactionally, and querying active rules for a given target.",
      "description_length": 387,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Repo",
      "library": "guardian.backend",
      "description": "This module implements database persistence for access control entities using MariaDB, providing CRUD operations for rules, actors, and targets. It handles UUID-based identifiers, role sets, and context metadata through asynchronous Lwt operations. Concrete use cases include storing validation rules per target, managing actor roles and ownership hierarchies, and maintaining target ownership relationships in a distributed system.",
      "description_length": 432,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Roles",
      "library": "guardian.backend",
      "description": "This module provides set-theoretic operations and transformations for managing collections of role data using specialized ordered set structures (`ActorRoles.t` and `Roles.t`). It supports functional manipulation through union, intersection, difference, filtering, and mapping, alongside utilities for membership checks, comparison, serialization, and conversion to/from lists and sequences. These capabilities are particularly useful for role-based access control systems requiring precise role set management, policy evaluation, or persistent storage of role hierarchies.",
      "description_length": 573,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Dependency",
      "library": "guardian.backend",
      "description": "This module manages hierarchical dependency relationships between components using a key-based lookup system. It provides functions to register, retrieve, and combine dependency resolution functions that map a parent-child relationship to an optional effect. Typical use cases include resolving database schema dependencies, tracking inter-service relationships, or managing configuration inheritance trees.",
      "description_length": 407,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Action",
      "library": "guardian.backend",
      "description": "This module defines a set of standard database operations (`Create`, `Read`, `Update`, `Delete`, `Manage`) and provides functions to compare, serialize, and validate these actions. It supports conversion to and from strings and JSON, as well as equality checks and pretty-printing. These operations are used to represent and manipulate database access rights, particularly in the context of authorization and query construction.",
      "description_length": 428,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Uuid",
      "library": "guardian.backend",
      "description": "This module provides functions to generate UUIDs (versions 1 and 4), convert them between string, byte string, and mixed-endian formats, and handle parsing with error reporting. It supports `Uuid.Actor.t` and `Uuid.Target.t` types, offering serialization for JSON and database storage via Yojson and Caqti. Use cases include storing UUIDs in MariaDB, exchanging identifiers in JSON payloads, and managing UUIDs in binary or string formats across distributed systems.",
      "description_length": 466,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Kind",
      "library": "guardian.backend",
      "description": "This module defines operations for a data type `t` representing target roles, including equality checks, string conversion, JSON serialization, and database type mapping. It provides functions to retrieve target UUIDs, parse from strings, and list all possible values. Concrete use cases include role-based access control and target-specific data retrieval in a database-backed system.",
      "description_length": 385,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Target",
      "library": "guardian.backend",
      "description": "This module implements target management operations for a MariaDB backend, handling creation, lookup, and ownership manipulation of targets identified by UUIDs. It works with `Guardian__.Uuid.Target.t` and `Guardian__.Uuid.Actor.t`, supporting actions like checking existence, saving or finding owners, and decorating target data. Concrete use cases include managing access control targets, verifying permissions, and associating actors with specific resources in a database-backed system.",
      "description_length": 489,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Actor",
      "library": "guardian.backend",
      "description": "This module manages actor roles and ownership in a MariaDB database, providing operations to assign, revoke, and query roles for actors identified by UUID. It supports creating actors with specified roles and owners, checking actor existence, and decorating data with actor information. Use cases include access control management, role-based permissions, and actor metadata persistence.",
      "description_length": 387,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Guard",
      "library": "guardian.backend",
      "description": "This module implements a comprehensive access control system with precise handling of actors, targets, and authorization rules backed by MariaDB. It provides operations for managing UUID-based identifiers, role sets, validation policies, and effect rules with support for serialization, comparison, and persistence. Concrete use cases include enforcing fine-grained permissions in backend services, validating actor actions against targets, and storing and retrieving access control policies from a MariaDB database.",
      "description_length": 516,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make.Role",
      "library": "guardian.backend",
      "description": "This module defines operations for working with role data, including serialization to and from JSON, string conversion, comparison, and equality checks. It handles role values of type `t`, which represents actor roles, and provides access to role names and associated target UUIDs. It supports use cases like role-based access control, role persistence in databases, and role validation during system operations.",
      "description_length": 412,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb.Make",
      "library": "guardian.backend",
      "description": "This module provides access control enforcement, permission management, and data persistence operations for hierarchical relationships between UUID-based actors, targets, and roles. It handles structured data validation, serialization, and dependency resolution using asynchronous database interactions with MariaDB, supporting use cases like secure data access enforcement, migration-driven schema evolution, and complex permission hierarchy maintenance. Core operations include rule storage, ownership tracking, and context-aware validation across distributed data entities.",
      "description_length": 576,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.Pools.DefaultConfig",
      "library": "guardian.backend",
      "description": "Contains configuration values for the default database connection pool, including the connection type and pool size. It defines settings used to establish and manage database connections in a production environment. This module is used directly by pool management code to initialize database access with predefined parameters.",
      "description_length": 326,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend.Pools.Make",
      "library": "guardian.backend",
      "description": "This module manages database connection pools and provides functions to execute SQL queries and transactions using Caqti. It supports operations like fetching a connection pool, running parameterized queries, and handling transactions, working directly with Caqti connection pools and Lwt for asynchronous execution. Concrete use cases include querying a PostgreSQL database, executing DML statements, and managing per-request database transactions in a web application.",
      "description_length": 470,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.Pools",
      "library": "guardian.backend",
      "description": "Manages database connection pools and executes SQL operations with Caqti. It supports single or multi-pool configurations, handles asynchronous query execution, and transaction management. Used to interact with PostgreSQL databases, run parameterized queries, and manage connections in web applications.",
      "description_length": 303,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian_backend.MariaDb",
      "library": "guardian.backend",
      "description": "Handles direct interaction with MariaDB databases using OCaml. It provides functions for querying, inserting, updating, and deleting records, specifically working with database connections, result sets, and SQL statements. This module is used to implement data access logic for user authentication and session management in a web application.",
      "description_length": 342,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian_backend",
      "library": "guardian.backend",
      "description": "Manages database interactions for web applications using PostgreSQL and MariaDB. Provides connection pooling, transaction handling, and SQL execution with Caqti, along with direct MariaDB operations for authentication and session data management. Works with SQL statements, connection pools, and result sets to support scalable and efficient data access.",
      "description_length": 354,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Target",
      "library": "guardian",
      "description": "This module provides functions to manage target entities with operations to create, check existence, retrieve, and update target data. It works with UUIDs for targets and actors, string-based contexts, and target kinds. Concrete use cases include persisting target ownership, verifying target existence, and retrieving target metadata in a system tracking entities like devices or users.",
      "description_length": 387,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Rule",
      "library": "guardian",
      "description": "This module provides operations to retrieve, save, and delete rule data associated with a target specification. It works with `rule` and `target_spec` types, handling persistence in an asynchronous context using `Lwt.t` and error-aware return types. Concrete use cases include managing rule-based configurations or policies for specific targets in a system.",
      "description_length": 357,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo.Actor",
      "library": "guardian",
      "description": "This module manages actor persistence by providing operations to create actors, assign and revoke roles, and associate owners. It works with actor identifiers (UUIDs), role sets, and contextual metadata pairs. Concrete use cases include storing and retrieving actor roles, checking actor existence, and managing ownership hierarchies in a permission system.",
      "description_length": 357,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract.Uuid.Target",
      "library": "guardian",
      "description": "This module provides operations for managing UUID namespace identifiers, including predefined constants for common namespaces (DNS, URL, OID, X500), conversion between string and byte representations in various endianness formats, and equality/comparison functions. It supports serialization through Yojson-compatible formatting and customizable string representations, working primarily with the UUID namespace identifier type used in version 3 and 5 UUID computations. Functions enable UUID target creation from validated strings or generation of new identifiers, facilitating tasks like UUID parsing, validation, and cross-format data interchange.",
      "description_length": 650,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Repo",
      "library": "guardian",
      "description": "This module implements persistence operations for rule-based configurations, actor roles, and target entities in an asynchronous system. It provides functions to store, retrieve, and manage `rule`, `actor`, and `target` data structures with support for UUIDs, role sets, and contextual metadata. Concrete use cases include enforcing policy rules, managing permission hierarchies, and tracking ownership of system resources like devices or user accounts.",
      "description_length": 453,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Target",
      "library": "guardian",
      "description": "This module manages target entities with operations to find, create, check existence, and manipulate ownership and metadata. It works with UUIDs for targets and actors, kinds as identifiers, and supports decorating values with target information. Concrete use cases include persisting and retrieving access control targets, checking permissions, and associating actors with resources.",
      "description_length": 384,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Rule",
      "library": "guardian",
      "description": "This module provides functions to persist, retrieve, and delete rule data asynchronously. It operates on `rule` values and works with lists of rules, supporting bulk operations like `save_all`. Concrete use cases include storing and managing validation or business rules in a persistent backend.",
      "description_length": 295,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Actor",
      "library": "guardian",
      "description": "This module manages actor roles and ownership in a persistence layer, providing operations to grant, revoke, and check roles, as well as set and retrieve owner relationships between actors. It works with `Guardian__.Uuid.Actor.t` identifiers and `role_set` structures, supporting asynchronous operations through `monad` and `Lwt.t` return types. Concrete use cases include enforcing access control policies, managing user roles in a system, and tracking ownership hierarchies in a distributed application.",
      "description_length": 505,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Rule.Set",
      "library": "guardian",
      "description": "This module provides ordered set operations for managing collections of `Rule.t` elements, supporting standard manipulations like union, intersection, predicate-based filtering, and order-preserving transformations. It emphasizes safe, total operations for element access and conversion between sets, sequences, and lists, while maintaining ordering via a comparator. Typical use cases include rule set analysis, membership testing, and ordered data transformation with customizable predicates or mappings.",
      "description_length": 506,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid.Target",
      "library": "guardian",
      "description": "This module supports parsing, conversion, and low-level manipulation of UUID namespace targets, including predefined constants for DNS, URL, OID, and X500 namespaces. It operates on a core type `t` representing targets, with functions to convert between strings, byte sequences, and structured formats, alongside equality checks, comparison operators, and Yojson serialization. It is particularly useful for applications requiring UUID generation or validation against standardized namespaces, such as distributed systems or cryptographic protocols needing deterministic identifier derivation.",
      "description_length": 593,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Contract.Uuid.Actor",
      "library": "guardian",
      "description": "This module enables constructing, comparing, and converting UUID actor values, including predefined constants like `nil` and `ns_dns`. It operates on UUID actor types, providing bidirectional conversion to hexadecimal strings, byte sequences, and Yojson representations, with support for case normalization and error handling. Typical use cases include generating unique identifiers, parsing UUIDs from configuration or user input, and serializing UUIDs for persistence or cross-service communication.",
      "description_length": 501,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid.Actor",
      "library": "guardian",
      "description": "This module offers operations for creating, parsing, and converting UUIDs, including equality checks, comparison, and serialization to JSON. It centers on the `Uuid.Actor.t` type, supporting transformations between UUID values, byte strings, and formatted string representations. Key use cases include generating unique identifiers, validating UUID strings with safe or unsafe parsing, and handling endianness during cross-format conversions.",
      "description_length": 442,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.MakePersistence.Dependency",
      "library": "guardian",
      "description": "This module manages dependency resolution for effect-handling functions, allowing registration and lookup of parent-child relationships between kinds. It supports operations to register handlers with optional tags and duplicate handling, retrieve handlers with fallback behavior, and combine multiple handlers into a single function. Concrete use cases include orchestrating effect processing pipelines where different kinds of effects depend on each other, such as in modular interpreters or layered system components.",
      "description_length": 519,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guardian.Make.Rule",
      "library": "guardian",
      "description": "This module defines a `Rule` type representing access control policies as tuples of actor, action, and target specifications. It provides comparison, serialization, and pretty-printing operations for rules, enabling precise rule matching and data interchange. Concrete use cases include enforcing authorization logic, validating policy consistency, and converting rule sets to and from JSON for storage or transmission.",
      "description_length": 419,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Authorizer",
      "library": "guardian",
      "description": "This module evaluates actor permissions against a list of rules, determining whether specific effects can be applied. It provides functions to check if an actor matches a rule, returns results indicating authorization success or failure, and supports conditional rule evaluation with `any_of` logic. It works directly with actors, rules, and effects to enforce access control policies in a system.",
      "description_length": 397,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Actor",
      "library": "guardian",
      "description": "This module implements actor management with identity, ownership, and role-based access control. It provides operations to create actors, check ownership relationships, validate roles, and serialize actor data. It works with universally unique identifiers (Uuid.Actor.t), role sets (RoleSet.t), and arbitrary actor payloads, supporting concrete use cases like access control enforcement and actor state serialization.",
      "description_length": 417,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.RoleSet",
      "library": "guardian",
      "description": "This module supports efficient manipulation of ordered collections of unique `ActorRoles.t` elements, offering operations to construct, modify, and query structured role sets while preserving element ordering via a comparator. It provides utilities for transforming sets into sequences or lists, safely retrieving elements with optional returns, and serializing role configurations to formats like JSON or strings. Typical applications include managing role hierarchies in access control systems, enforcing policy rules through set comparisons, and persisting role set states in distributed environments.",
      "description_length": 604,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Action",
      "library": "guardian",
      "description": "This module defines a set of standard CRUD-like actions (`Create`, `Read`, `Update`, `Delete`, `Manage`) and provides operations to compare, serialize, and validate these actions. It includes functions for converting actions to and from strings and JSON, as well as checking whether one action is valid in the context of another (e.g., verifying permissions). Use cases include access control systems and API request validation where specific action permissions must be enforced.",
      "description_length": 479,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.ValidationSet",
      "library": "guardian",
      "description": "This module defines a validation set structure for composing logical conditions using `and`, `or`, single-effect, and role-based validations. It supports operations to construct, compare, serialize, and pretty-print these validation sets. Use it to represent and manipulate access control policies or validation rules with nested logical expressions.",
      "description_length": 350,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract.Uuid",
      "library": "guardian",
      "description": "This module provides precise operations for handling UUID actors and namespace targets, including construction, conversion, and comparison. It works with UUID actor and namespace identifier types, supporting bidirectional transformations to strings, bytes, and Yojson. Concrete use cases include generating and validating UUIDs, parsing them from external inputs, and ensuring correct serialization across services.",
      "description_length": 415,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Uuid",
      "library": "guardian",
      "description": "This module provides precise operations for UUID creation, parsing, and conversion, working with UUID values, byte strings, and formatted strings. It includes equality checks, comparison, and JSON serialization for UUIDs, along with handling UUID namespace targets using standardized constants like DNS and URL. Concrete use cases include generating unique identifiers for distributed systems and validating UUIDs against known namespaces in cryptographic contexts.",
      "description_length": 465,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.TargetSpec",
      "library": "guardian",
      "description": "This module defines a type `t` representing target specifications, either by entity role or by a combination of role and UUID. It provides operations to compare, serialize, and validate target specifications, ensuring correctness when handling distinct target identities. Use cases include managing access control targets and validating relationships between entities in a distributed system.",
      "description_length": 392,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.MakePersistence",
      "library": "guardian",
      "description": "This module implements persistence and dependency management for rule-based access control systems. It provides functions to store, retrieve, and manage rules, actor roles, and target entities with support for UUIDs, role sets, and contextual metadata. Concrete use cases include enforcing policy rules, managing permission hierarchies, and tracking ownership of system resources like devices or user accounts.",
      "description_length": 410,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Target",
      "library": "guardian",
      "description": "This module implements operations for constructing and manipulating typed target values with identity, ownership, and serialization. It supports data types incorporating UUIDs for both target identification and actor ownership, enabling use cases such as tracking entities in distributed systems or managing permissions in a typed, persistent context. Functions include equality, comparison, JSON conversion, and pretty-printing, all parameterized over the wrapped value type.",
      "description_length": 476,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.ActorSpec",
      "library": "guardian",
      "description": "This module defines a type `t` representing actor specifications, either by role or by role and unique identifier. It provides comparison, serialization, and validation operations for these specifications. Use cases include checking actor validity, converting specifications to JSON, and comparing or printing actor values.",
      "description_length": 323,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make.Effect",
      "library": "guardian",
      "description": "This module defines a data structure representing a pair of action and target specification, with operations to create, compare, and serialize these pairs. It supports validation checks between pairs and provides pretty-printing and JSON conversion for external representation. Use cases include managing effect configurations in a system requiring serialization and comparison, such as policy enforcement or rule-based processing.",
      "description_length": 431,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Contract",
      "library": "guardian",
      "description": "This module handles UUID actors and namespace targets with operations for construction, conversion, and comparison. It supports UUID actor and namespace identifier types, offering bidirectional transformations to strings, bytes, and Yojson. It is used for generating, validating, and serializing UUIDs across services.",
      "description_length": 318,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Utils",
      "library": "guardian",
      "description": "Handles error propagation and string decomposition in asynchronous contexts. It provides a function to run an operation with exception handling and context, decomposes variant strings into components, and raises errors for invalid roles. Useful for parsing and validating role-based access control strings or similar structured inputs.",
      "description_length": 335,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian.Make",
      "library": "guardian",
      "description": "This module implements a rule-based access control system with precise handling of actors, targets, and permissions. It provides operations to define and validate actor and target specifications, manage role-based access through structured role sets, and enforce authorization policies using rules and effects. Concrete use cases include securing distributed systems with UUID-based identifiers, validating actor permissions against structured policies, and managing access control rules with logical validation sets.",
      "description_length": 517,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guardian",
      "library": "guardian",
      "description": "This module processes role-based access control strings and UUID identifiers through its submodules. It provides functions to parse and validate structured role strings with context propagation and to construct, serialize, and compare UUID actors and namespace targets. Concrete use cases include validating access roles from string inputs and generating or converting UUIDs for distributed services.",
      "description_length": 400,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 78,
    "meaningful_modules": 78,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 650,
    "min_description_length": 295,
    "avg_description_length": 439.85897435897436,
    "embedding_file_size_mb": 1.130721092224121
  }
}