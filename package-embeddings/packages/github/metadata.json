{
  "package": "github",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 68,
  "creation_timestamp": "2025-06-18T16:45:38.814378",
  "modules": [
    {
      "module_path": "Github_core.Make.Endpoint.Version",
      "description": "Provides functions to parse, compare, and format version strings according to semantic versioning rules. Works with string representations of versions and opaque version objects derived from HTTP response headers. Used to implement conditional HTTP requests that check for resource changes without re-downloading entire payloads.",
      "description_length": 329,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Repo.Hook",
      "description": "Provides functions to retrieve, create, update, and delete GitHub repository hooks, as well as test hooks and parse webhook events. Operates on types such as `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Enables managing post-receive hooks for specific repositories and processing incoming webhook payloads.",
      "description_length": 357,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Organization.Hook",
      "description": "Retrieves, creates, updates, and deletes organization-level webhooks for GitHub. Processes event payloads and extracts metadata for hook events. Accepts organization names and hook identifiers to perform targeted operations.",
      "description_length": 224,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Response",
      "description": "Provides functions to extract the payload and redirect history from API responses, and to determine the final destination of a redirect chain. Operates on a private type representing API responses, including a value of arbitrary type and a list of redirect records. Used to process HTTP responses and determine the ultimate resource location after following redirects.",
      "description_length": 368,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Monad",
      "description": "Encapsulates Lwt threads with state for API interactions, allowing sequential binding of operations that carry state. Provides `bind`, `map`, and `catch` to chain and transform computations while managing exceptions and state. Supports lifting Lwt values into the monad and extracting the resulting Lwt thread for execution.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Endpoint",
      "description": "Handles versioned API requests by parsing, comparing, and formatting version strings, and using them to manage conditional HTTP interactions. Operates on string versions and opaque version objects from HTTP headers to determine resource changes. Supports conditional GETs and HEADs that avoid redundant data transfer. Can check if a resource has been modified since a known version or enforce version constraints on requests.",
      "description_length": 425,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Stream",
      "description": "Provides functions to lazily iterate over, transform, and process paginated API results, including fetching the next element, mapping over elements, folding over the stream, and finding specific items. Operates on a generic stream type that wraps API responses and supports parsing from strings. Used to efficiently handle large datasets from GitHub, such as listing repository commits or issues across multiple pages.",
      "description_length": 418,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Scope",
      "description": "Converts GitHub scope values to and from strings, and serializes lists of scopes for API use. Operates on `Github_t.scope` and related list structures. Parses and generates scope strings for API requests and handles full privilege and minimal privilege scope sets.",
      "description_length": 264,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Token",
      "description": "Provides functions to generate, retrieve, and manage GitHub authorization tokens, including handling OAuth web flow codes and personal tokens. Works with authentication data structures such as scopes, notes, and fingerprint identifiers. Used to create new authorizations, fetch existing ones by ID, and convert between token representations.",
      "description_length": 341,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.API",
      "description": "Provides HTTP method wrappers for GitHub API interactions, including GET, POST, DELETE, PATCH, and PUT with customizable headers, tokens, and response parsing. Handles rate limiting, error messages, and user agent/token configuration through monadic state. Supports streaming responses and custom response code validation.",
      "description_length": 322,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.URI",
      "description": "Generates OAuth2 authorization and token endpoints using URI.t for web-based authentication flows. Constructs URLs for user redirection and token exchange with specific parameters like client ID, secret, and authorization codes. Produces valid URI instances for integration with GitHub's API and web applications.",
      "description_length": 313,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Filter",
      "description": "Provides functions to construct and manipulate filter criteria for querying GitHub resources, including sorting options, date ranges, and qualifier-based restrictions. Works with custom types such as issue_sort, milestone, user, and date to represent specific filtering parameters. Used to refine API requests for issues, repositories, and user data by applying structured, typed filters.",
      "description_length": 388,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Rate_limit",
      "description": "Provides functions to retrieve rate limit information for different GitHub API regimes, including all regimes, the Core regime, and the Search regime. Operates on token-based authentication and returns structured rate data. Used to monitor API usage limits in real-time during requests.",
      "description_length": 286,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.User",
      "description": "Provides functions to retrieve user information and repositories from GitHub, using a token for authentication. Operates on user identifiers and returns structured data including user details and repository streams. Enables fetching of personal user data and specific user profiles along with their associated repositories.",
      "description_length": 323,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Organization",
      "description": "Manages GitHub organization webhooks with operations to retrieve, create, update, and delete. Processes event payloads to extract metadata, using organization names and hook IDs for precise control. Supports event-driven workflows by isolating relevant data from incoming payloads. Enables automation through targeted interactions with organization-level hooks.",
      "description_length": 361,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Team",
      "description": "Provides functions to retrieve team information and associated repositories using a team ID and authentication token. Operates with GitHub team data structures and streams of repository data. Used to fetch detailed team metadata and list all repositories managed by a specific team.",
      "description_length": 282,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Event",
      "description": "Provides streams of GitHub events filtered by repository, organization, user activity, or public activity. Operates on user names, repository names, organization names, and authentication tokens. Enables real-time tracking of events for a specific repo, user contributions, organization activity, or public GitHub events.",
      "description_length": 321,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Repo",
      "description": "Manages GitHub repository hooks with operations to retrieve, create, update, and delete them, including testing and parsing webhook events. Works with types like `Github_t.hook`, `Github_t.new_hook`, and `Github_t.event_hook_constr` to handle hook configurations and event data. Allows setting up post-receive hooks and extracting information from incoming webhooks. Example tasks include adding a new hook to a repository or parsing a push event payload.",
      "description_length": 455,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Stats",
      "description": "Provides functions to retrieve contributor statistics, commit activity by week, weekly code frequency, and hourly commit distributions for a GitHub repository. Works with streams of commit data, participation metrics, and time-based aggregates. Used to analyze contribution patterns, track development trends, and identify peak activity periods.",
      "description_length": 345,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Status",
      "description": "Provides operations to retrieve and create status reports for specific Git references in a GitHub repository. Works with Git SHAs, branch names, and tag names, along with status data structures from the Github_t module. Used to fetch combined status information for a commit or post a new status update for a specific SHA.",
      "description_length": 322,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Pull",
      "description": "Provides functions to retrieve, create, update, and merge pull requests, along with associated commits and files. Operates on GitHub pull request data structures, including streams of pull requests, commits, and files, and individual pull request details. Enables programmatic interaction with specific pull requests in a repository, such as checking merge status or applying updates.",
      "description_length": 384,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Issue",
      "description": "Provides functions to retrieve, create, and modify GitHub issues, comments, labels, and events. Operates on issue data structures, including `Github_t.issue`, `Github_t.issue_comment`, and `Github_t.label`. Enables filtering issues by creator, assignee, labels, and state, and supports fetching detailed issue timelines and comment histories.",
      "description_length": 342,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Label",
      "description": "Retrieves, creates, updates, and deletes GitHub repository labels using a token, with operations that accept repository owner, name, and label details. Functions return results wrapped in a response monad or a stream of labels. Supports managing label metadata such as color and description through specific API interactions.",
      "description_length": 325,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Collaborator",
      "description": "Provides functions to retrieve, check, add, and remove GitHub repository collaborators. Operates on strings for user and repository names, and uses a token for authentication. Enables programmatic management of access control for specific repositories.",
      "description_length": 252,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Milestone",
      "description": "Provides functions to retrieve, create, update, and delete GitHub milestones, along with fetching associated labels. Operates on repository-specific milestones identified by user, repo, and milestone number, using streams for listing and responses for individual operations. Enables programmatic management of milestone data and label associations within a repository.",
      "description_length": 368,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core.Make.Release",
      "description": "Provides functions to retrieve, create, update, and delete GitHub releases and their assets, including fetching by ID, tag name, or latest release. Operates on GitHub release data structures such as `Github_t.release`, `Github_t.new_release`, `Github_t.update_release`, and `Github_t.release_asset`. Enables automation of release management tasks like publishing new versions, attaching binaries, or cleaning up old releases.",
      "description_length": 425,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Deploy_key",
      "description": "Provides functions to retrieve, fetch, create, and delete deploy keys for specific GitHub repositories. Operates on types such as `Github_t.deploy_key`, `Github_t.new_deploy_key`, and `Token.t`. Used to manage SSH keys for repository access control in automated deployment workflows.",
      "description_length": 283,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Gist",
      "description": "Provides functions to retrieve, create, update, and manage GitHub gists, including user-specific, public, and starred gists, along with operations on gist commits, stars, forks, and deletions. Works with stream and response types for gists, gist commits, and gist forks, as well as new and updated gist data structures. Enables fetching a user's gists since a specific timestamp, starring or unstarling a gist, forking a gist, and deleting a gist.",
      "description_length": 447,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Emoji",
      "description": "Provides functions to retrieve GitHub's list of emojis, including a method to fetch all available emojis for use in GitHub-flavored markdown. Works with token authentication and returns a structured response containing emoji data. Used to dynamically populate emoji options in applications integrating with GitHub's markdown system.",
      "description_length": 332,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Check",
      "description": "Provides functions to interact with GitHub's check API, including creating, updating, and retrieving check runs and suites, listing annotations, and managing check suite preferences. Operates on data types such as check_run, check_suite, and associated lists. Used to automate CI/CD pipeline status tracking and inspection within repositories.",
      "description_length": 343,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Search",
      "description": "Provides functions to search for GitHub repositories and issues using specified qualifiers and keywords, with customizable sorting and direction. Operates on token authentication, filter options, and string-based search terms. Returns streams of search results tailored for repository and issue queries.",
      "description_length": 303,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make.Git_obj",
      "description": "Provides functions to convert Git object types to strings and split Git reference paths into directory and name components. Works with Git object types and string representations of references. Used to process Git object metadata and parse reference names for repository operations.",
      "description_length": 282,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Endpoint.Version",
      "description": "Provides functions to parse, compare, and manipulate version strings, including incrementing, checking compatibility, and extracting numeric components. Works with opaque version type and string representations to handle semantic versioning schemes. Used to implement conditional HTTP requests by validating cached responses against server-reported versions.",
      "description_length": 358,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Repo.Hook",
      "description": "Provides functions to retrieve, create, update, and delete GitHub repository hooks, as well as test hooks and parse webhook events. Operates on data types such as `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Used to manage post-receive hook configurations and process incoming webhook payloads for specific repositories.",
      "description_length": 371,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Organization.Hook",
      "description": "Retrieves, creates, updates, and deletes organization-level webhooks for GitHub, and parses webhook events and their metadata. Operates on types such as `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Used to manage notification configurations for repositories and trigger custom actions based on event payloads.",
      "description_length": 360,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_core.Make",
      "description": "Provides context-aware HTTP request execution and response handling, including methods like GET, POST, PUT, and PATCH with customizable headers, body, and chunked encoding. Operates on types such as HTTP requests, responses, URIs, and body content, with support for asynchronous I/O through Lwt. Enables direct API calls, form submissions, and low-level request streaming with context management.",
      "description_length": 396,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Response",
      "description": "Provides functions to extract the payload and redirect history from API responses, and to determine the final destination of a redirect chain. Operates on a private type representing API responses, including a value of arbitrary type and a list of redirects. Used to handle HTTP redirect sequences and retrieve the ultimate resource URI after processing all redirects.",
      "description_length": 368,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Monad",
      "description": "Encapsulates Lwt threads with state management, enabling sequential API operations where each step can access and modify shared state. Provides binding and mapping operations to chain computations, handle exceptions, and transform results within the monadic context. Supports embedding raw Lwt threads and extracting the final Lwt thread for execution.",
      "description_length": 352,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Endpoint",
      "description": "Handles versioned API requests by managing semantic versions through parsing, comparison, and manipulation. It defines a version type and supports operations like incrementing, compatibility checks, and numeric extraction. This enables precise control over HTTP conditional requests based on server responses. For example, it can validate cached data against a server's reported version to avoid redundant downloads.",
      "description_length": 416,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Stream",
      "description": "Provides functions to lazily process paginated API responses, including fetching the next element, mapping over elements, folding over them, finding elements, iterating, converting to a list, and creating streams from lists. Operates on a generic stream type and a parsing function that converts strings to lists of parsed values. Used to efficiently handle large or continuous data from GitHub, such as iterating over a repository's commit history or polling for new events.",
      "description_length": 475,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Scope",
      "description": "Provides functions to convert between GitHub scope values and their string representations, and to serialize/deserialize lists of scopes. Works with the `Github_t.scope` type and lists of such values. Used to generate API requests with specific permissions and to parse scope strings from responses.",
      "description_length": 299,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Token",
      "description": "Provides functions to generate, retrieve, and manage GitHub authorization tokens, including OAuth application tokens and personal tokens. Works with types such as `Github_t.auth`, `string`, and `int64` to handle token creation, deletion, and lookup. Used to exchange OAuth codes for tokens, fetch user authorizations, and construct tokens from raw strings or authentication responses.",
      "description_length": 384,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.API",
      "description": "Provides HTTP method wrappers for GitHub API interactions, including GET, POST, DELETE, PATCH, and PUT with customizable headers, tokens, and response parsing. Handles rate limiting, error messages, and user agent/token configuration through monadic state. Supports streaming responses and custom error handling for unbound API endpoints.",
      "description_length": 338,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.URI",
      "description": "Generates OAuth2 authorization and token endpoints using URI templates. Accepts client credentials, scopes, redirect URIs, and authorization codes to construct valid GitHub API URLs. Used to redirect users for authentication and exchange authorization codes for access tokens.",
      "description_length": 276,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Filter",
      "description": "Provides functions to construct and manipulate filter criteria for querying GitHub resources, including sorting options, date ranges, and qualifier-based restrictions. Works with custom types such as `milestone`, `user`, `date`, and `issue_qualifier` to represent specific filter conditions. Used to refine API requests for issues, repositories, and user data by applying structured sorting and filtering parameters.",
      "description_length": 416,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Rate_limit",
      "description": "Provides functions to retrieve rate limit information for different GitHub API regimes, including all regimes, the Core regime, and the Search regime. Operates on a token and returns rate data within a monadic context. Used to monitor API usage limits in real-time during request handling.",
      "description_length": 289,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.User",
      "description": "Provides functions to retrieve user information and repositories from GitHub, using a token for authentication. Operates on user identifiers and returns structured data including user profiles and repository streams. Enables fetching details for the authenticated user or any specified user.",
      "description_length": 291,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Organization",
      "description": "Manages GitHub organization-level webhooks, enabling the creation, modification, and deletion of notification configurations. It handles event parsing using types like `Github_t.hook` and `Github_t.event_hook_constr`, allowing custom actions to be triggered by repository events. Operations include parsing event metadata and constructing webhook definitions. Examples include setting up webhooks for push events or updating existing hooks to change delivery endpoints.",
      "description_length": 469,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Team",
      "description": "Provides functions to retrieve team information and associated repositories using a team ID and authentication token. Operates on integers for team identifiers and returns structured data including team details and repository streams. Used to fetch specific team metadata and list all repositories managed by a team.",
      "description_length": 316,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Event",
      "description": "Provides streams of GitHub events filtered by repository, organization, user activity, or public activity. Operates on GitHub event data structures and user/repo identifiers. Enables real-time tracking of repository contributions, organization updates, and user-specific notifications.",
      "description_length": 285,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Repo",
      "description": "Manages GitHub repository hooks with functions to retrieve, create, update, and delete them, along with testing and parsing webhook events. Key data types include `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. It enables configuring post-receive hooks and processing incoming event payloads. Examples include setting up webhooks for repository activity tracking and handling push event data from GitHub.",
      "description_length": 452,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Stats",
      "description": "Provides functions to retrieve contributor statistics, commit activity by week, weekly code frequency, and hourly commit distribution for a GitHub repository. Works with streams of contributor stats, commit activity, code frequency, and punch card data. Used to analyze contribution patterns, track weekly development trends, and identify peak commit times.",
      "description_length": 357,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Status",
      "description": "Provides operations to retrieve and create status reports for specific Git references in a GitHub repository. Works with Git SHAs, branch names, and tag names, along with status data structures. Used to fetch combined status information for a commit or post a new status update for a specific commit.",
      "description_length": 300,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Pull",
      "description": "Provides operations to retrieve, create, update, and merge GitHub pull requests, along with fetching associated commits and files. Works with types such as `Github_t.pull`, `Github_t.new_pull`, `Github_t.commit`, and `Github_t.file`. Used to manage pull requests programmatically, such as automating merge workflows or analyzing pull request content.",
      "description_length": 350,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Issue",
      "description": "Provides functions to retrieve, create, and update GitHub issues, comments, labels, and events for a specific repository and issue number. Operates on types such as `Github_t.issue`, `Github_t.issue_comment`, `Github_t.label`, and `Github_t.repo_issues_event`. Enables filtering issues by creator, assignee, labels, and state, and supports fetching detailed issue timelines and comment histories.",
      "description_length": 396,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Label",
      "description": "Retrieves, creates, updates, and deletes GitHub repository labels using a repository's owner and name. Operates on GitHub label data structures and authentication tokens. Fetches all labels from a repository, retrieves specific labels by name, and modifies labels through API interactions.",
      "description_length": 289,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Collaborator",
      "description": "Provides functions to manage GitHub repository collaborators through API interactions. Operates with strings for user and repository names, and a `Github_t.linked_user` stream for listing collaborators. Enables checking if a user is a collaborator, adding new collaborators with specified permissions, and removing existing ones.",
      "description_length": 329,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Milestone",
      "description": "Provides functions to retrieve, create, update, and delete GitHub milestones, along with fetching associated labels. Operates on repository-specific milestones identified by user, repo, and milestone number, using streams for listing and responses for single entities. Enables programmatic management of milestone data and label associations within a repository.",
      "description_length": 362,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Release",
      "description": "Provides functions to retrieve, create, update, and delete GitHub releases and their assets. Operates on repository identifiers, release IDs, and asset metadata. Enables programmatic management of release versions, including fetching by tag, uploading binaries, and removing assets.",
      "description_length": 282,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Deploy_key",
      "description": "Provides functions to retrieve, fetch, create, and delete deploy keys for specific GitHub repositories. Operates on repository identifiers, deploy key IDs, and key data structures such as `Github_t.deploy_key` and `Github_t.new_deploy_key`. Used to manage SSH keys for repository access control in automated deployment workflows.",
      "description_length": 329,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Gist",
      "description": "Provides functions to retrieve, create, update, and manage GitHub gists, including user-specific, public, and starred gists, along with operations for commits, stars, forks, and deletions. Works with stream and response types for gists, gist commits, and gist forks. Enables fetching a user's gists since a specific timestamp, creating new gists from templates, and managing gist visibility through starring and deletion.",
      "description_length": 421,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Emoji",
      "description": "Provides functions to retrieve GitHub's list of emojis, enabling integration of emoji data into applications. Works with GitHub's emoji data structure and authentication tokens. Used to dynamically fetch and display available emojis in markdown-enabled interfaces.",
      "description_length": 264,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Check",
      "description": "Provides functions to interact with GitHub's check API, including creating, updating, and retrieving check runs and suites, listing annotations, and managing check suite preferences. Operates on data types such as check_run, check_runs_list, check_suite, and check_suite_preferences. Used to automate CI/CD pipeline status updates, retrieve detailed test results, and manage GitHub Actions workflows.",
      "description_length": 400,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s.Search",
      "description": "Provides functions to search GitHub repositories and issues using specified qualifiers and keywords, with options to sort and order results. Works with token authentication, custom sorting criteria, and lists of qualifiers and keywords. Used to retrieve streams of repository and issue data based on structured search parameters.",
      "description_length": 329,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_s.Git_obj",
      "description": "Provides functions to convert Git object types to strings and split Git reference strings into directory and name components. Works with Git object types and reference strings. Used to process Git object metadata and parse reference paths in repositories.",
      "description_length": 255,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "github",
      "description": "Provides functions to interact with GitHub's API, including fetching repository data, listing commits, and handling authentication tokens. Works with data types defined in `lib/github.atd`, such as repositories, commits, and user information. Used to build tools for automated repository management and CI integration.",
      "description_length": 318,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_core",
      "description": "Executes context-aware HTTP requests and handles responses with methods like GET, POST, PUT, and PATCH, supporting customizable headers, body, and chunked encoding. Operates on HTTP requests, responses, URIs, and body content, leveraging Lwt for asynchronous I/O. Enables direct API interactions, form submissions, and streaming with proper context management. Examples include fetching repository data, submitting pull request comments, and uploading large files in chunks.",
      "description_length": 474,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_s",
      "description": "Provides functions to configure and manage a GitHub integration, including setting a debug flag for verbose output. Works with boolean values and encapsulates configuration state. Used to initialize a GitHub module with specific debugging behavior during API interactions.",
      "description_length": 272,
      "index": 67,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 68,
    "meaningful_modules": 68,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 475,
    "min_description_length": 224,
    "avg_description_length": 345.47058823529414,
    "embedding_file_size_mb": 0.24749374389648438
  }
}