{
  "package": "mindstorm-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:21.732483",
  "modules": [
    {
      "module_path": "Mindstorm_lwt.NXT.Sensor.Ultrasonic",
      "library": "mindstorm-lwt",
      "description": "This module initializes and controls an ultrasonic sensor connected to an NXT brick's input port using Lwt for asynchronous communication. It supports configuring the sensor's mode (off, measurement, continuous measurement, event detection, reset), setting calibration values (zero offset, scale multiplier/divider), and retrieving raw byte readings or internal configuration values. Concrete use cases include obstacle detection, distance measurement, and sensor calibration in robotics applications.",
      "description_length": 501,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Sensor",
      "library": "mindstorm-lwt",
      "description": "This module manages sensor input ports on the NXT brick, supporting sensor types such as light, temperature, sound, and color, with configuration options for sensor modes and data retrieval. It enables tasks like reading processed or raw sensor values, detecting colors, and handling I2C communication, while also supporting legacy RCX sensors. A child module extends this functionality to ultrasonic sensors, allowing asynchronous control via Lwt, mode configuration for measurement or event detection, and calibration for accurate distance readings. Together, they provide a comprehensive interface for interacting with a wide range of analog and digital sensors in robotic applications.",
      "description_length": 689,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Message",
      "library": "mindstorm-lwt",
      "description": "This module sends and receives messages to and from specific mailboxes on a connected NXT device using Lwt for asynchronous communication. It operates on mailbox and remote types, representing message queues on the NXT, and handles string-based message payloads. Use this module to interact with running programs on the NXT that are designed to receive or send messages through predefined mailboxes.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Motor",
      "library": "mindstorm-lwt",
      "description": "This module controls Lego Mindstorm NXT motor outputs through an Lwt interface, allowing asynchronous configuration of motor parameters like speed, braking, and regulation modes. It operates on motor ports A, B, C, or all simultaneously, using a structured state type that includes power level, rotation limits, and run behavior. Concrete use cases include setting a motor to rotate at a specific speed with braking enabled, querying a motor's current state and tachometer values, or resetting a motor's position counter for precise movement tracking.",
      "description_length": 551,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Sound",
      "library": "mindstorm-lwt",
      "description": "This module plays sound files and tones on a connected Lego Mindstorm NXT brick. It supports playing `.rso` sound files, stopping playback, and generating tones with specified frequency and duration. Concrete use cases include triggering audio feedback during robot operations or playing alerts based on sensor input.",
      "description_length": 317,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Program",
      "library": "mindstorm-lwt",
      "description": "Starts, stops, and queries the status of programs on a connected Lego Mindstorm NXT brick. Works with program names as strings and a connection handle. Useful for managing execution of compiled `.rxe` programs, such as launching a specific behavior or checking which program is currently active.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm_lwt.NXT.USB",
      "library": "mindstorm-lwt",
      "description": "This module lists available LEGO NXT devices connected via USB and establishes connections to them. It provides `bricks` to retrieve USB devices and `connect` to link to a specific NXT brick. Use cases include detecting connected NXT hardware and initiating USB communication for control or data retrieval.",
      "description_length": 306,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT.Find",
      "library": "mindstorm-lwt",
      "description": "This module provides operations to search for and iterate over files on a connected Lego NXT brick using wildcard patterns. It supports listing, inspecting, and processing files with functions to retrieve filenames, their sizes, and advance through matches. Concrete use cases include scanning for log files, retrieving sensor data files, or managing stored programs on the device.",
      "description_length": 381,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt.NXT",
      "library": "mindstorm-lwt",
      "description": "This module integrates sensor management, motor control, sound playback, program execution, and file operations for interacting with LEGO NXT devices. It supports direct manipulation of sensors through configurable ports, asynchronous motor adjustments, and audio feedback, while enabling communication with NXT programs via mailboxes. Users can detect and connect to devices over USB, manage files stored on the brick, and handle I2C and legacy sensor protocols. Specific tasks include reading color sensor data, playing alert tones, starting NXT programs remotely, and scanning for log files using pattern matching.",
      "description_length": 617,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt_connect.USB",
      "library": "mindstorm-lwt",
      "description": "This module manages connections to USB devices, specifically LEGO NXT bricks. It provides operations to list available USB devices and establish connections with them. The `bricks` function retrieves a list of detected USB devices, while `connect` opens a communication channel to a specified device, optionally checking its status with a custom function.",
      "description_length": 355,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt",
      "library": "mindstorm-lwt",
      "description": "This module enables full control over LEGO NXT devices through an Lwt interface, integrating sensor input, motor output, sound playback, and program interaction. Key data types include ports for sensors, motors, and mailboxes, with operations for asynchronous reading, configuration, and execution. Users can connect to NXT bricks over USB, read color or I2C sensor values, play sounds, start programs remotely, and manage files on the device using pattern-based searches. For example, you can detect a color sensor\u2019s input, trigger a motor response, and log data to a file on the NXT brick\u2014all concurrently.",
      "description_length": 608,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_lwt_connect",
      "library": "mindstorm-lwt",
      "description": "This module enables asynchronous communication with LEGO Mindstorms devices over Bluetooth and USB, coordinating low-level device connections with protocol handling. It supports establishing and managing connections using Lwt, sending and receiving binary data with proper formatting, and includes USB-specific functionality for NXT bricks. The `bricks` function lists connected USB devices, `connect` initiates a connection with a device, and custom status checks can be applied during connection setup. It is used to send commands to and read sensor data from NXT or EV3 bricks in robotics applications.",
      "description_length": 605,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 689,
    "min_description_length": 295,
    "avg_description_length": 468.6666666666667,
    "embedding_file_size_mb": 0.04400157928466797
  }
}