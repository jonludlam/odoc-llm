{
  "package": "jsoo-react",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 46,
  "creation_timestamp": "2025-07-15T23:15:04.744495",
  "modules": [
    {
      "module_path": "Jsoo_react_ppx.Ppx.Str_label",
      "library": "jsoo_react_ppx",
      "description": "This module defines a type `t` representing labeled or optional string arguments and provides conversions to and from `Ppxlib.arg_label`. It includes operations to construct, deconstruct, and extract the string value from these labels. Useful for handling labeled function arguments in PPX extensions, particularly when generating or manipulating OCaml code that involves optional or labeled parameters.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsoo_react_ppx.Html",
      "library": "jsoo_react_ppx",
      "description": "This module defines data types and operations for handling HTML attributes and events in JSX syntax. It includes types for attribute values (string, int, float, bool, etc.), event categories (keyboard, mouse, etc.), and structured representations of HTML properties. Functions like `getJSXName` and `findByName` allow direct manipulation and lookup of JSX attribute names and HTML properties, specifically supporting the translation between OCaml and HTML in a type-safe manner.",
      "description_length": 478,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsoo_react_ppx.Ppx",
      "library": "jsoo_react_ppx",
      "description": "This module processes JSX-like syntax and React-style components in OCaml by transforming abstract syntax trees, focusing on expressions, type definitions, and labeled arguments. It supports tasks like extracting children from JSX nodes, generating object properties, and managing optional values through direct AST manipulations. A core type `t` represents labeled or optional string arguments, with utilities to convert to and from `Ppxlib.arg_label`, construct and deconstruct labels, and extract string values. These capabilities enable precise code generation and transformation, particularly for PPX extensions handling labeled or optional function parameters.",
      "description_length": 666,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsoo_react_ppx",
      "library": "jsoo_react_ppx",
      "description": "This module translates JSX syntax into OCaml code, handling HTML attributes, events, and React-style components with type safety. It defines core types like attribute values, event categories, and labeled arguments, supporting direct manipulation of JSX properties and AST transformations. Functions such as `getJSXName`, `findByName`, and utilities around `Ppxlib.arg_label` enable precise extraction, conversion, and construction of JSX elements. You can use it to generate OCaml code from JSX, manage optional and labeled function parameters, and integrate HTML properties into typed OCaml structures.",
      "description_length": 604,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "This module creates a React context provider for SVG elements, wrapping a context and its value around child nodes. It accepts a context, a value to provide, and a list of child elements, returning a properly structured SVG context provider object. Useful for propagating SVG-specific state like themes or configurations through a component tree without explicit passing.",
      "description_length": 371,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Html.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "This module creates a context provider component that supplies a value to all descendants in the React component tree. It accepts a context object, a value to provide, and a list of child elements, returning a provider element. Use it to pass down shared state or configuration like themes or user data without manually threading props through every level.",
      "description_length": 356,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Context",
      "library": "jsoo-react.lib",
      "description": "This module provides an SVG context provider that wraps a given context and value around child nodes, enabling implicit state propagation such as themes or configurations through the component tree. It operates by taking a context, a value, and a list of child elements, then returns a structured SVG context provider object. For example, it can be used to apply a shared color theme or transformation settings to multiple SVG components without manually passing props. The core operation involves creating and composing context provider instances with specified values and children.",
      "description_length": 583,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Html.Prop",
      "library": "jsoo-react.lib",
      "description": "This module provides utilities to construct React DOM element properties, encompassing ARIA accessibility attributes (e.g., `aria-selected`, `role`), standard HTML attributes (e.g., `class`, `style`, `tabindex`), and event handlers for user interactions (e.g., keyboard, mouse, media events). It operates on primitive values like strings, integers, and booleans, wrapping them into typed property objects (`Prop.t`) for virtual DOM assembly, while supporting advanced use cases like form control configuration, dynamic content behavior, and accessibility-enhanced component design. Specific applications include building interactive UI components (e.g., dropdowns, modals), handling media playback events, and ensuring cross-browser accessibility compliance through declarative attribute binding.",
      "description_length": 796,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Html.Context",
      "library": "jsoo-react.lib",
      "description": "This module enables sharing values across a component tree by creating a provider that wraps children and supplies a context object with a given value. It centers around the context provider component, which takes a context, a value, and a list of child elements, then returns a configured provider element. You can use it to propagate shared state\u2014like themes or user data\u2014deeply nested components without explicit prop passing. For example, wrapping a component tree with a theme provider ensures all descendants access the current theme automatically.",
      "description_length": 554,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Prop",
      "library": "jsoo-react.lib",
      "description": "This module offers functions to convert string and integer values into SVG DOM properties for React, enabling configuration of accessibility attributes (ARIA roles/states), visual styling (fill, stroke, gradients), positioning (cx, cy, transform), animation (dur, repeatCount), text rendering (fontFamily, textAnchor), and filter effects (diffuseConstant, primitiveUnits). These operations target SVG elements in declarative UIs, providing type-safe attribute binding for precise control over rendering, layout, and interactive behavior in accessible contexts.",
      "description_length": 560,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Html",
      "library": "jsoo-react.lib",
      "description": "This module combines HTML element construction with advanced accessibility features and interactive controls to enable type-safe virtual DOM composition. It works with `React.Dom.Dsl.Html.t` elements and `Prop.t` attributes to define semantic markup, ARIA properties, and event handlers for tasks like form validation and dynamic UI updates. Submodule one provides fine-grained control over element properties, including ARIA attributes, event listeners, and styling, while the second supports context-based value sharing across component trees. Together, they allow building accessible, interactive UIs\u2014such as dropdowns with keyboard navigation or theme-aware components\u2014without manual prop threading.",
      "description_length": 703,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Svg",
      "library": "jsoo-react.lib",
      "description": "This module enables declarative construction of accessible and visually rich SVG elements through a domain-specific language, focusing on attribute assignment and element composition. It provides functions to set ARIA attributes, styling properties like stroke and fill, geometric parameters, and animation behaviors, all operating on a virtual DOM representation (`Svg.t`). A context provider wraps child nodes with implicit state such as themes or transformations, enabling consistent styling or configuration across components without manual prop drilling. Additionally, it includes utilities to convert string and integer values into SVG DOM properties, supporting precise control over accessibility, layout, and effects like gradients and filters in declarative UIs.",
      "description_length": 771,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.UI",
      "library": "jsoo-react.lib",
      "description": "This module enables handling and manipulation of React's synthetic UI events through property accessors and behavioral controls, working with wrapped JavaScript event objects represented as `React.Event.UI.t`. It provides direct access to event metadata like propagation state and timestamps, along with methods to prevent default actions or halt event flow, suitable for form validation, interactive components, and custom event delegation. Additionally, it bridges to browser window APIs via event context, supporting use cases like redirection or window state inspection during user interactions.",
      "description_length": 599,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Keyboard",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to handle and analyze keyboard events by accessing properties like key codes, modifier key states, and event timestamps, along with methods to control event propagation and default behavior. It operates on wrapped JavaScript event objects, enabling use cases such as implementing keyboard shortcuts, input validation, or custom key handling in web applications.",
      "description_length": 392,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Mouse",
      "library": "jsoo-react.lib",
      "description": "This module enables handling and inspection of mouse events through operations that access event metadata (e.g., timestamps, modifier keys), control propagation (e.g., preventing defaults, stopping bubbling), and extract interaction details like coordinates and button states. It works exclusively with synthetic mouse event objects, providing typed access to properties such as client coordinates, target elements, and input state for precise browser interaction logic. Typical use cases include implementing drag-and-drop mechanics, context menus, or custom gesture recognition where low-level mouse data is required.",
      "description_length": 619,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Selection",
      "library": "jsoo-react.lib",
      "description": "This module handles selection events in React, providing access to event properties like `target`, `type_`, and `time_stamp`, as well as control over event behavior through `prevent_default` and `stop_propagation`. It works with synthetic selection events represented by the `t` type, which wraps browser event objects. Concrete use cases include handling text selection changes in input fields or implementing custom selection logic in rich text editors.",
      "description_length": 455,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Media",
      "library": "jsoo-react.lib",
      "description": "This module handles media-related event data in React, providing access to event properties like `bubbles`, `cancelable`, `target`, and `time_stamp`. It supports operations to inspect and manipulate event behavior, including `prevent_default`, `stop_propagation`, and `persist`. Use it to handle media events such as playback, volume changes, or errors directly in OCaml.",
      "description_length": 371,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Touch",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to handle and inspect touch events, enabling access to event properties like propagation flags, timestamps, and touch point lists, as well as control over default actions and event flow. It operates on touch event objects that expose detailed touch data (e.g., `touches`, `changed_touches`) and modifier key states, supporting use cases such as multi-touch gesture recognition, touch sequence tracking, and touch-driven input logic that responds to keyboard modifiers.",
      "description_length": 499,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "Creates a provider component for a React context, wrapping child elements with access to the provided value. Accepts a context object, a value to provide, and a list of child elements. Used to pass down shared state or configuration through the component tree without manual prop drilling.",
      "description_length": 289,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Style",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to create CSS style declarations for React DOM elements, mapping string values to typed style properties like layout, typography, and visual effects. It operates on `React.Dom.Style.decl` values, which are combined into `React.Dom.block` structures to apply inline styles to components. Use cases include type-safe styling of HTML/SVG elements with support for flexbox/grid layouts, animations, text formatting, and advanced visual properties like masks or shadows.",
      "description_length": 496,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Pointer",
      "library": "jsoo-react.lib",
      "description": "This module provides functions for handling pointer input events in React, enabling access to device-specific properties like screen coordinates, pressure sensitivity, tilt angles, and pointer type (e.g., mouse, touch, pen). It works with `React.Event.Pointer.t` values that wrap JavaScript events, offering typed accessors for attributes such as `pointerId`, `shiftKey`, and `timestamp`, while supporting event control operations like `preventDefault`. Typical use cases include implementing gesture recognition, drawing applications that require pressure/tilt data, or interactive UI elements that respond to multi-touch inputs.",
      "description_length": 630,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Composition",
      "library": "jsoo-react.lib",
      "description": "This module handles composition events in React, providing access to event properties like `data`, `bubbles`, `cancelable`, and `target`. It supports operations to inspect and manipulate event behavior, including `prevent_default`, `stop_propagation`, and `persist`. Useful for handling text composition input in forms, such as detecting input method editor (IME) activity during user interaction.",
      "description_length": 397,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl",
      "library": "jsoo-react.lib",
      "description": "This module provides a type-safe DSL for building accessible, interactive UIs using virtual DOM elements, combining semantic HTML and SVG construction with ARIA attributes, event handling, and context-based configuration. It supports declarative composition of elements through `Html.t` and `Svg.t` types, offering operations to define styling, geometry, animations, and accessibility features while abstracting manual prop threading via context providers. You can create dropdowns with keyboard navigation, theme-aware components, or styled SVGs with gradients and filters, all while ensuring accessibility and dynamic updates through event handlers and state propagation.",
      "description_length": 673,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Animation",
      "library": "jsoo-react.lib",
      "description": "This module enables handling and inspecting animation events through methods like preventing default actions, stopping propagation, and reading metadata such as animation names, timestamps, or elapsed time. It operates on animation event objects to manage interactions with CSS transitions or Web Animations, supporting use cases like synchronizing UI feedback with animation progress or debugging animation timelines. Specific functions extract details like pseudo-element targets or duration metrics to enable precise control over animation-driven behaviors.",
      "description_length": 560,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Form",
      "library": "jsoo-react.lib",
      "description": "This module handles synthetic form events in React, providing access to event properties like `bubbles`, `cancelable`, and `target`, as well as methods to control event behavior such as `prevent_default` and `stop_propagation`. It works with form event objects, allowing interaction with raw JavaScript event data through `t_of_js` and `t_to_js`. Concrete use cases include form validation, custom form submission handling, and inspecting user input events in form elements.",
      "description_length": 474,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Clipboard",
      "library": "jsoo-react.lib",
      "description": "This module handles clipboard-related events in React, providing access to event properties like `clipboardData`, `target`, and `type`. It supports operations to read clipboard content during events such as copy, cut, and paste, and allows control over event propagation and default behavior. Direct use cases include implementing custom clipboard handling, validating pasted content, or tracking clipboard interactions in UI components.",
      "description_length": 437,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Transition",
      "library": "jsoo-react.lib",
      "description": "This module provides access to transition event properties such as property name, timestamp, and type, along with methods to prevent default actions and stop event propagation. It operates on synthetic event objects to facilitate tasks like animation synchronization, allowing developers to track elapsed time during transitions or target specific pseudo-elements affected by CSS transitions. The ability to convert between JavaScript and OCaml representations supports seamless integration with React's event system in both directions.",
      "description_length": 536,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Synthetic",
      "library": "jsoo-react.lib",
      "description": "This module provides access to synthetic event properties and methods for handling browser events in React. It works with `React.Event.synthetic` values, which wrap raw JavaScript events. Concrete use cases include inspecting event targets, preventing default actions, stopping propagation, and accessing event metadata like timestamps or phases.",
      "description_length": 346,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Ref",
      "library": "jsoo-react.lib",
      "description": "This module provides two types of references for working with DOM elements in React: `current_dom_ref` for direct access to a DOM element and `callback_dom_ref` for handling element assignment via a callback. It allows creating a `dom_ref` value from either a current reference or a callback function that receives an optional DOM element. Concrete use cases include managing focus on rendered elements, measuring layout properties, or integrating with imperative DOM APIs like canvas or animations.",
      "description_length": 499,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.SafeString",
      "library": "jsoo-react.lib",
      "description": "This module wraps strings to ensure safe handling of potentially untrusted content, primarily for preventing cross-site scripting (XSS) vulnerabilities. It provides `make_unchecked` to create a safe string from a regular string and `to_string` to extract the underlying value. Use this when inserting user-generated content into the DOM to ensure proper escaping and security guarantees.",
      "description_length": 387,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Focus",
      "library": "jsoo-react.lib",
      "description": "This module handles focus-related synthetic events in React, providing access to event properties like `target`, `related_target`, and `time_stamp`, along with control functions such as `prevent_default` and `stop_propagation`. It works with `React.Event.Focus.t`, a type representing synthetic focus events, and interoperates with JavaScript values via `t_of_js` and `t_to_js`. Concrete use cases include managing focus transitions between form elements, implementing accessibility features, and tracking user interaction timing.",
      "description_length": 530,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Image",
      "library": "jsoo-react.lib",
      "description": "This module handles image-related synthetic events in React, providing access to event properties like `bubbles`, `cancelable`, `target`, and `time_stamp`, as well as control functions like `prevent_default` and `stop_propagation`. It works with synthetic event objects wrapping raw JavaScript events, using types like `Ojs.t` for interoperability. Concrete use cases include handling image load or error events, tracking user interactions with images, and managing event propagation in image-heavy UI components.",
      "description_length": 513,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Wheel",
      "library": "jsoo-react.lib",
      "description": "This module provides operations for handling and inspecting mouse wheel events, including accessing properties like `delta_mode`, `time_stamp`, and methods to control propagation or default behavior. It works with structured `React.Event.Wheel.t` values that wrap raw JavaScript wheel events, offering typed field accessors to extract scroll deltas (`delta_x`, `delta_y`, `delta_z`) for precise movement tracking. These capabilities are useful in scenarios like implementing custom scrolling logic, zoom interactions, or gesture-based controls in web applications.",
      "description_length": 564,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Hooks",
      "library": "jsoo-react.lib",
      "description": "This module provides operations for managing mutable state, side effects, and context in a declarative UI framework. It supports data types like references, state variables, reducers, and context values, enabling precise control over component behavior during rendering. Concrete use cases include tracking form inputs with `use_state`, initializing resources with `use_effect`, and sharing values across components via `use_context`.",
      "description_length": 434,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Router",
      "library": "jsoo-react.lib",
      "description": "This module handles URL manipulation and tracking in a React application. It provides functions to update the URL (`push`, `replace`), subscribe to URL changes (`watch_url`, `unwatch_url`), and retrieve the current URL (`dangerously_get_initial_url`, `use_url`). It works with a structured `url` type containing `path`, `hash`, and `search`, and is used to synchronize application state with browser navigation, such as loading content based on route parameters or handling deep links.",
      "description_length": 485,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Fragment",
      "library": "jsoo-react.lib",
      "description": "This module creates a virtual container for grouping multiple elements without adding extra nodes to the DOM. It accepts a list of child elements and an optional key, returning a fragment that can be rendered as part of a React component. Use it to return multiple elements from a component render function or to group elements logically without introducing wrapper nodes.",
      "description_length": 372,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom",
      "library": "jsoo-react.lib",
      "description": "This module enables rendering and manipulating React components within the DOM, supporting operations like mounting, unmounting, and creating portals. It integrates with submodules to handle styling, element construction, DOM references, and safe string handling, allowing tasks like rendering a component to a specific node, applying type-safe inline styles, or creating accessible UIs with semantic HTML and SVG. You can manage DOM refs for focus or layout measurement, and use safe strings to prevent XSS when inserting dynamic content. Together, these capabilities support building interactive, styled, and secure web interfaces through a structured, type-safe API.",
      "description_length": 669,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.StrictMode",
      "library": "jsoo-react.lib",
      "description": "This module creates a React component that renders its children in strict mode, enabling additional checks and warnings for detecting potential issues in the application. It accepts a list of React elements or components as children and an optional key. Use this when developing applications to catch common mistakes in component implementations during rendering.",
      "description_length": 363,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event",
      "library": "jsoo-react.lib",
      "description": "This module provides precise manipulation of DOM events through a rich set of operations that expose event metadata, control propagation, and modify default behavior across various interaction types. It defines core data types like `React.Event.UI.t`, `React.Event.Mouse.t`, and `React.Event.Keyboard.t`, enabling typed access to event properties such as coordinates, key states, timestamps, and target elements. Developers can implement custom logic for drag-and-drop using mouse coordinates, validate form input by intercepting keyboard events, or manage focus transitions with synthetic focus events. Submodules extend this functionality to handle media playback, touch gestures, clipboard operations, and animation synchronization, all while maintaining interoperability with JavaScript through conversion functions like `t_of_js` and `t_to_js`.",
      "description_length": 849,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Children",
      "library": "jsoo-react.lib",
      "description": "This module provides operations to transform, iterate over, and inspect lists of React child elements. It supports mapping with and without indices, applying side effects, counting children, extracting a single child, and converting to arrays. These functions are used when building and manipulating component hierarchies in React, such as rendering lists or validating child structure.",
      "description_length": 386,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Ref",
      "library": "jsoo-react.lib",
      "description": "This module provides operations to create and manipulate reference cells that hold optional values. It supports working with JavaScript objects through conversion functions to and from `Ojs.t`. Use cases include maintaining mutable state in React components or managing optional values that may change over time, such as form inputs or configuration settings.",
      "description_length": 359,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Context",
      "library": "jsoo-react.lib",
      "description": "This module manages context values for sharing global state like authentication or themes across component trees. It offers `make` to initialize a context with a default value, `provider` to create a provider component that supplies a value to nested children, and the `Provider` module for advanced configuration. The provider component wraps child elements, injecting the context value without requiring manual prop passing. For example, it can propagate user settings or UI themes to deeply nested components in a React tree.",
      "description_length": 528,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React",
      "library": "jsoo-react.lib",
      "description": "This module enables declarative UI construction by combining state management, context propagation, and DOM manipulation with React-specific data structures like elements, components, and refs. It supports building interactive interfaces with typed events, fragments for grouping elements, and strict mode checks, while offering side-effect control, URL tracking, and memoization for optimized rendering. You can create dynamic components that respond to user input via `use_state`, synchronize navigation with application state using URL functions, or render content conditionally within fragments and portals. Submodules enhance this with context providers for global state sharing, event handlers for precise interaction control, and utilities for child element transformation and DOM reference management.",
      "description_length": 809,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ReactDOMTestUtils.DOM",
      "library": "jsoo-react.test",
      "description": "This module provides a function `findBySelectorAndPartialTextContent` that locates a DOM element within a given React DOM tree by matching both a CSS selector and a substring of its text content. It operates on React DOM elements and string values for selector and text criteria. A concrete use case is querying a rendered component subtree for an element that partially contains specific text, useful in testing scenarios where exact text matches are not feasible.",
      "description_length": 465,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ReactDOMTestUtils.Simulate",
      "library": "jsoo-react.test",
      "description": "Triggers a click event on a provided React DOM element, simulating user interaction. Works directly with DOM elements rendered by React for testing purposes. Useful in unit tests to verify behavior triggered by user actions without relying on actual user input.",
      "description_length": 261,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ReactDOMTestUtils",
      "library": "jsoo-react.test",
      "description": "This module provides utilities for interacting with React DOM elements in test environments, including functions to convert node lists, query elements via CSS selectors, and simulate user events. It supports operations like locating elements by partial text content and triggering click events, enabling precise inspection and interaction with rendered DOM structures. Key data types include React DOM elements and string-based selectors, with specific examples such as finding a button by a substring of its label and simulating a click to test event handlers. Submodules extend this functionality with targeted tools for element lookup and user interaction simulation.",
      "description_length": 670,
      "index": 45,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 46,
    "meaningful_modules": 46,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 849,
    "min_description_length": 261,
    "avg_description_length": 516.5434782608696,
    "embedding_file_size_mb": 0.16754627227783203
  }
}