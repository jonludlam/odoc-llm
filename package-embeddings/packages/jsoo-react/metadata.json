{
  "package": "jsoo-react",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 43,
  "creation_timestamp": "2025-08-15T14:16:15.176234",
  "modules": [
    {
      "module_path": "ReactDOMTestUtils.DOM",
      "library": "jsoo-react.test",
      "description": "This module provides a function `findBySelectorAndPartialTextContent` that locates a DOM element within a given React DOM tree by matching both a CSS selector and a substring of its text content. It operates on `ReactDOMTestUtils.element` values, which represent rendered React components in test contexts. This function is useful for writing precise integration tests where elements must be identified based on both their structure and partial textual content.",
      "description_length": 461,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ReactDOMTestUtils.Simulate",
      "library": "jsoo-react.test",
      "description": "This module provides functions to simulate DOM events in test environments. It works with DOM elements to trigger actions like user interactions. The `click` function specifically simulates a mouse click on a given element, enabling direct testing of event handlers attached to components.",
      "description_length": 289,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ReactDOMTestUtils",
      "library": "jsoo-react.test",
      "description": "This module provides functions for interacting with and querying React DOM elements in test environments. It includes utilities to convert between JavaScript and OCaml representations of node lists, simulate DOM events like clicks, and locate elements using CSS selectors and partial text content. Concrete use cases include testing user interactions and verifying the presence of specific elements in rendered component trees.",
      "description_length": 427,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsoo_react_ppx.Ppx.Str_label",
      "library": "jsoo_react_ppx",
      "description": "This module defines a type `t` representing labeled or optional string arguments and provides conversions to and from `Ppxlib.arg_label`. It includes functions to transform between these label types and extract the underlying string value. Useful for handling labeled function arguments in PPX extensions, particularly when generating or manipulating OCaml code that involves optional or labeled parameters.",
      "description_length": 407,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsoo_react_ppx.Html",
      "library": "jsoo_react_ppx",
      "description": "This module defines data types and operations for handling HTML attributes and events in JSX syntax. It provides typed representations for attribute values, event categories, and their mappings to JavaScript names. Functions include retrieving JSX attribute names and resolving props by name with typed error handling for missing elements or attributes.",
      "description_length": 353,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsoo_react_ppx",
      "library": "jsoo_react_ppx",
      "description": "This module processes JSX syntax for React applications, translating it into OCaml code. It supports typed HTML attributes and event handling through the Html submodule, enabling safe and expressive DOM manipulation. Use cases include embedding JSX directly in OCaml source files and ensuring compile-time correctness of HTML properties and event listeners.",
      "description_length": 357,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Html.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "This module creates a context provider component that supplies a value to all descendants in the React component tree. It accepts a context object, a value to provide, and a list of child elements, returning a provider instance. Use it to pass down shared state like themes or configuration without manual prop drilling.",
      "description_length": 320,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "This module creates a React context provider for SVG elements, wrapping a context and its value around child nodes. It accepts a context, a value to provide, and a list of child elements, returning a properly configured provider element. Useful for passing down SVG-specific configuration or state through the component tree without prop drilling.",
      "description_length": 347,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Html.Prop",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to define HTML attributes, ARIA properties, and event handlers for React DOM elements, enabling precise control over element behavior and accessibility semantics. It operates on primitive values like strings, integers, booleans, and event callbacks, converting them into typed DOM properties that enforce correct attribute-value mappings and event bindings. These utilities enable building accessible interfaces with semantic HTML, handling user interactions like form validation or media playback, and ensuring type-safe property assignments in declarative UI components.",
      "description_length": 603,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Html.Context",
      "library": "jsoo-react.lib",
      "description": "This module creates context provider components that supply values to descendant React components. It works with context objects, arbitrary values, and React element lists. Use it to share state like themes or user settings deep within component trees without passing props manually at each level.",
      "description_length": 297,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Prop",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to construct and configure SVG element properties in React, focusing on accessibility, visual styling, and layout control. It operates on string, integer, and event handler inputs to produce typed SVG DOM attributes (`Prop.t`), encompassing ARIA roles (e.g., `aria-label`), geometric properties (e.g., `cx`, `cy`), text/glyph rendering settings (e.g., `fontFamily`, `textAnchor`), and interactive behaviors (e.g., event handlers). These utilities enable declarative SVG composition with type-safe attribute binding for applications like data visualizations, accessible icons, or animated graphics.",
      "description_length": 628,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl.Svg.Context",
      "library": "jsoo-react.lib",
      "description": "This module creates a React context provider for SVG elements, wrapping a context and its value around child nodes. It accepts a context, a value to provide, and a list of child elements, returning a configured provider element. Useful for passing down SVG-specific configuration or state through the component tree without prop drilling.",
      "description_length": 338,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Svg",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to construct and manipulate SVG elements with type-safe attributes, focusing on accessibility (ARIA properties), styling, animation, and layout control. It operates on typed values (strings, integers, events) to produce SVG DOM nodes (`React.Dom.Dsl.Svg.t`), enabling declarative creation of vector graphics, filters, gradients, and interactive UI components. Specific use cases include building accessible SVG interfaces with dynamic properties, applying geometric transformations, and configuring rendering behaviors like clipping or masking in React applications.",
      "description_length": 597,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Dom.Dsl.Html",
      "library": "jsoo-react.lib",
      "description": "This module constructs and configures React DOM elements with type-safe HTML attributes, ARIA properties, and event handlers, operating on `Ojs.t` values to represent DOM nodes. It provides utilities for declarative UI composition, including form controls, media elements, and accessibility features like semantic roles or state indicators, while supporting event-driven interactions such as user input, media playback, and dynamic content updates. Key use cases include building accessible web applications, managing form validation, handling user interactions (clicks, drags, keyboard), and integrating media elements like video or audio with precise DOM control.",
      "description_length": 665,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Image",
      "library": "jsoo-react.lib",
      "description": "This module provides operations to handle image-related synthetic events in React, including accessing event properties like `bubbles`, `cancelable`, `target`, and `time_stamp`, as well as methods to control event behavior such as `prevent_default` and `stop_propagation`. It works with image event objects wrapped in the `React.Event.Image.t` type, which can be converted to and from JavaScript using `t_of_js` and `t_to_js`. Concrete use cases include handling image load and error events in React components, such as tracking when an image finishes loading or managing user interactions with images.",
      "description_length": 602,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Dsl",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to construct and configure React DOM and SVG elements with type-safe attributes, ARIA properties, and event handlers. It operates on `Ojs.t` values to enable declarative UI composition, supporting form controls, media elements, vector graphics, and interactive components. Use it to build accessible web applications with precise control over DOM structure, dynamic content updates, and responsive user interfaces featuring forms, animations, and media playback.",
      "description_length": 493,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Focus",
      "library": "jsoo-react.lib",
      "description": "This module handles focus-related synthetic events in React, providing access to event properties like `target`, `related_target`, and `time_stamp`, along with control functions such as `prevent_default` and `stop_propagation`. It works with `React.Event.Focus.t`, a typed representation of focus events derived from JavaScript objects. Use this module to manage focus and blur events in form elements or interactive components, enabling precise event handling and debugging through direct access to raw event data.",
      "description_length": 515,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Clipboard",
      "library": "jsoo-react.lib",
      "description": "This module handles clipboard events in React, providing access to event properties like `clipboardData`, `target`, and `type`. It supports operations to read clipboard content during events such as copy, cut, and paste, and allows control over event propagation and default behavior. Direct use cases include implementing custom clipboard handling, validating pasted content, or logging clipboard interactions.",
      "description_length": 411,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Selection",
      "library": "jsoo-react.lib",
      "description": "This module handles selection events in React, providing access to event properties like `target`, `type_`, and `time_stamp`, along with control functions such as `prevent_default` and `stop_propagation`. It works with synthetic event objects wrapping browser events, converting to and from JavaScript using `t_of_js` and `t_to_js`. Concrete use cases include handling user text selection changes and managing event lifecycle in custom UI components.",
      "description_length": 450,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Touch",
      "library": "jsoo-react.lib",
      "description": "This module enables interaction with touch events through operations that access event metadata (e.g., timestamps, propagation flags) and manipulate event flow (e.g., preventing defaults, stopping propagation). It works with touch event objects to expose detailed touch data like contact points and modifier key states, supporting use cases such as multi-touch gesture recognition and conditional input handling based on keyboard modifiers.",
      "description_length": 440,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Composition",
      "library": "jsoo-react.lib",
      "description": "This module handles composition events in React, providing access to event properties like `data`, `type_`, and `time_stamp`, along with control methods such as `prevent_default` and `stop_propagation`. It works with synthetic composition events, allowing interaction with raw JavaScript event objects via `t_of_js` and `t_to_js`. Concrete use cases include handling text input composition in form elements and managing event lifecycle behaviors in React components.",
      "description_length": 466,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Mouse",
      "library": "jsoo-react.lib",
      "description": "This module enables manipulating event propagation and extracting coordinate data, button states, and modifier key information from wrapped JavaScript mouse events. It operates on typed event objects that encapsulate raw browser event details, providing structured access to properties like client coordinates, click targets, and event metadata. Typical applications include implementing drag interactions, context menus, or accessibility features requiring precise mouse input tracking and event behavior control.",
      "description_length": 514,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Context.Provider",
      "library": "jsoo-react.lib",
      "description": "Creates a provider component for a React context, wrapping child elements with access to the provided value. Accepts a context object, a value to provide, and a list of child elements. Useful for injecting dependencies like themes or configuration into nested components without prop drilling.",
      "description_length": 293,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.SafeString",
      "library": "jsoo-react.lib",
      "description": "This module wraps strings to ensure safe handling of potentially untrusted content, primarily for use in HTML generation. It provides a type `t` that restricts direct string manipulation, along with functions to convert between regular strings and safe strings. Concrete use cases include preventing XSS vulnerabilities by ensuring user-generated content is properly escaped before being rendered in a web page.",
      "description_length": 411,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Animation",
      "library": "jsoo-react.lib",
      "description": "This module enables handling and inspecting animation events by exposing properties like animation name, timestamp, and type, along with methods to control event flow. It operates on `Animation.t` values, which safely wrap JavaScript's native animation events and provide typed access to their data through conversion utilities. These capabilities are useful for synchronizing UI transitions, measuring animation performance, or implementing custom animation logic that reacts to specific events like completion or iteration.",
      "description_length": 525,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Ref",
      "library": "jsoo-react.lib",
      "description": "This module provides two types of references for working with DOM elements in React components: `current_dom_ref` for direct access to a DOM element and `callback_dom_ref` for handling element updates via a callback. It allows associating a DOM element with a React component using `dom_ref` to retrieve the current reference or `callback_dom_ref` to react to element changes. Concrete use cases include managing focus, measuring element dimensions, or integrating with imperative DOM libraries.",
      "description_length": 495,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Pointer",
      "library": "jsoo-react.lib",
      "description": "This module provides utilities for handling pointer input events, enabling access to device-specific properties like pointer ID, pressure, tilt angles, and screen coordinates. It operates on typed event wrappers that expose metadata such as modifier key states, event timestamps, and target elements through precise accessors. Typical applications include implementing gesture recognition, drag-and-drop interactions, or custom input controls that require low-level pointer data and event flow management.",
      "description_length": 505,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Keyboard",
      "library": "jsoo-react.lib",
      "description": "This module provides functions to access keyboard event properties like key codes, modifier states (Ctrl, Shift, Meta), and event metadata (timestamp, type), along with utilities to control event behavior such as preventing defaults or stopping propagation. It operates on synthetic event objects encapsulating React's keyboard events, enabling precise handling of low-level input interactions. Typical use cases include implementing keyboard shortcuts, input validation, or custom key event processing in React components.",
      "description_length": 523,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom.Style",
      "library": "jsoo-react.lib",
      "description": "This module enables programmatic creation of CSS style declarations for React DOM elements using type-safe functions that map directly to CSS properties. It operates on string values to produce `React.Dom.Style.decl` type values, which can be composed into style blocks, covering layout (Flexbox, Grid), typography, animations, and visual effects. It is particularly useful for inline styling of React components where precise control over CSS attributes like `transform`, `grid-template-columns`, or `text-emphasis` is required in a functional programming context.",
      "description_length": 565,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event.Transition",
      "library": "jsoo-react.lib",
      "description": "This module handles browser transition events by exposing properties like event phase, timing, and target element, while allowing control over default behaviors and propagation. It operates on synthetic transition event objects to support use cases like animating UI components based on CSS transitions or debugging transition state changes in real-time. Key capabilities include extracting elapsed transition durations and identifying associated pseudo-elements for precise styling coordination.",
      "description_length": 496,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Form",
      "library": "jsoo-react.lib",
      "description": "This module handles synthetic form events in React, providing access to event properties like `target`, `type_`, and `time_stamp`, along with control functions such as `prevent_default` and `stop_propagation`. It works with form event data structures, including synthetic event wrappers and native JavaScript event objects. Concrete use cases include handling form submissions, input validation, and event delegation in web forms.",
      "description_length": 430,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Synthetic",
      "library": "jsoo-react.lib",
      "description": "This module provides access to properties and methods of synthetic events in React, allowing inspection of event details like `target`, `type`, and `timeStamp`, and control over event behavior through `preventDefault` and `stopPropagation`. It works with the `React.Event.synthetic` type, which wraps browser events in a consistent interface. Concrete use cases include form validation, handling user input events, and implementing custom event logic in React components.",
      "description_length": 471,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Event.Media",
      "library": "jsoo-react.lib",
      "description": "This module handles media-related synthetic events in React, providing access to event properties like `bubbles`, `cancelable`, and `target`, as well as methods to control event behavior such as `prevent_default` and `stop_propagation`. It works with media event tags and synthetic event objects, enabling precise handling of HTML media element events like play, pause, or error. Concrete use cases include building custom media player controls, tracking playback state changes, and managing user interactions with `<audio>` or `<video>` elements.",
      "description_length": 547,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Ref",
      "library": "jsoo-react.lib",
      "description": "This module provides operations to create and manipulate reference cells that hold optional values, supporting dynamic state management. It works with polymorphic reference types (`'a Js_of_ocaml.Js.Opt.t React.Ref.t`) and facilitates conversion between JavaScript and OCaml representations. Concrete use cases include tracking mutable state in React components, such as form inputs or UI elements, where the reference's current value can be read or updated imperatively.",
      "description_length": 471,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Context",
      "library": "jsoo-react.lib",
      "description": "Creates and manages React context objects for sharing values like themes or configuration across component trees. Provides `make` to initialize a context with a default value and `provider` to create a component that supplies values to descendants. Enables passing data through nested components without explicitly threading props at every level.",
      "description_length": 346,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Dom",
      "library": "jsoo-react.lib",
      "description": "This module enables direct manipulation of DOM elements within React components, providing functions to render and unmount components, create portals, and convert between DOM element types. It supports operations like rendering virtual DOM trees into specific HTML nodes, managing element references for imperative interactions, and constructing DOM elements with type-safe properties. Concrete use cases include integrating third-party UI libraries, implementing custom focus management, and dynamically updating content in web applications.",
      "description_length": 542,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Children",
      "library": "jsoo-react.lib",
      "description": "This module provides operations to transform, iterate over, and inspect lists of React child elements. It supports mapping with and without index tracking, applying side effects, counting children, and extracting a single child. Use it when processing JSX-generated element lists, such as rendering dynamic content or validating child structure in React components.",
      "description_length": 365,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "React.Event",
      "library": "jsoo-react.lib",
      "description": "This module provides precise handling of React's synthetic events and their specialized variants, enabling direct inspection and control of event behavior. It works with typed event structures like `React.Event.synthetic`, `Focus.t`, and `Mouse.t` to expose properties such as `target`, `timeStamp`, and device-specific input data. Concrete use cases include implementing keyboard shortcuts, managing form validation, handling mouse interactions for drag-and-drop, and synchronizing UI behavior with media or animation events.",
      "description_length": 526,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Hooks",
      "library": "jsoo-react.lib",
      "description": "This module provides imperative references, state management, and side-effect handling for building reactive components. It works with references, state values, reducers, and context objects. Concrete use cases include managing form inputs, triggering animations on state changes, and subscribing to external data sources.",
      "description_length": 322,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Router",
      "library": "jsoo-react.lib",
      "description": "Handles URL manipulation and tracking in a React application. It provides functions to update the URL (`push`, `replace`), subscribe to URL changes (`watch_url`, `unwatch_url`), and access the current URL state (`use_url`, `dangerously_get_initial_url`). Works with a structured `url` type containing path segments, hash, and search parameters, enabling route-based UI updates and deep linking.",
      "description_length": 394,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.Fragment",
      "library": "jsoo-react.lib",
      "description": "This module creates a virtual container for grouping multiple elements without adding extra nodes to the DOM. It accepts a list of child elements and an optional key, returning a structure that can be rendered as part of a React component. Use it to return multiple elements from a component render function or to organize elements logically without introducing wrapper nodes.",
      "description_length": 376,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React.StrictMode",
      "library": "jsoo-react.lib",
      "description": "This module creates a React component that renders its children in strict mode, enabling additional checks and warnings for detecting potential issues in the application. It accepts a list of React elements or components as children and an optional key. Use this when developing to identify unsafe lifecycle methods, legacy APIs, or other problematic patterns in the component tree.",
      "description_length": 382,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "React",
      "library": "jsoo-react.lib",
      "description": "This module enables creating React elements, defining functional components, and managing state and effects via hooks like `use_state` and `use_effectN`, with support for memoization and dependency tracking. It operates on JavaScript values (`Ojs.t`), `React.element` structures, tuples for dependency lists, and OCaml primitives, while integrating mutable state through reference cells for interoperability. These capabilities facilitate building interactive web applications with component composition, context sharing, low-level DOM manipulation, event handling, and client-side routing.",
      "description_length": 590,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 46,
    "meaningful_modules": 43,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9347826086956522
  },
  "statistics": {
    "max_description_length": 665,
    "min_description_length": 289,
    "avg_description_length": 454.7674418604651,
    "embedding_file_size_mb": 0.623626708984375
  }
}