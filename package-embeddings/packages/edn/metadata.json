{
  "package": "edn",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:35.999781",
  "modules": [
    {
      "module_path": "Edn.Json",
      "description": "Converts a custom type to and from a JSON representation, supporting optional keywordization of fields. Works with the `json` type, which includes variants for basic JSON types like strings, numbers, arrays, and objects. Used to serialize configuration data and deserialize API responses.",
      "description_length": 288,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Edn.Util",
      "description": "Provides type-checked extraction and transformation of values within a structured data format, including operations to retrieve keys, values, and elements by index, as well as conversion to common types like strings, numbers, and lists. Supports combining and mapping over data structures to manipulate and inspect their contents. Used to safely navigate and validate complex data representations in parsing or configuration workflows.",
      "description_length": 435,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "edn",
      "description": "Parses and generates EDN data format, handling nested lists, vectors, maps, sets, keywords, symbols, and tagged values. Processes input as strings or input channels, producing OCaml values with precise type mapping. Used to serialize configuration data, exchange structured information between systems, and read custom data files.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Edn",
      "description": "Converts custom types to and from JSON, supporting field keywordization, and enables safe extraction, transformation, and validation of structured data. It works with the `json` type, which represents basic JSON elements, and provides operations to access and manipulate data through keys, indices, and type conversions. This allows for reliable parsing of configuration files and API responses, as well as complex data inspections and transformations. Examples include extracting a specific field from a JSON object or converting a nested structure into a list of strings.",
      "description_length": 573,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 573,
    "min_description_length": 288,
    "avg_description_length": 406.5,
    "embedding_file_size_mb": 0.014928817749023438
  }
}