{
  "package": "edn",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:41.512412",
  "modules": [
    {
      "module_path": "Edn.Util",
      "library": "edn",
      "description": "This module provides functions for inspecting, transforming, and extracting values from EDN data structures. It supports operations like retrieving keys and values, mapping over elements, converting values to specific types (e.g., integers, floats, strings), and safely accessing nested data. Concrete use cases include parsing EDN input into native OCaml values, validating data types during configuration loading, and traversing structured EDN documents for processing or querying.",
      "description_length": 483,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Edn.Json",
      "library": "edn",
      "description": "This module defines a JSON abstract syntax tree with standard JSON types and converts between JSON values and EDN values. It supports parsing JSON into EDN with optional keyword conversion and serializing EDN back to JSON. Concrete use cases include handling JSON API responses and configuration files using EDN structures.",
      "description_length": 323,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Edn",
      "library": "edn",
      "description": "This module represents and manipulates EDN values using a variant type that supports nested structures such as maps, lists, vectors, and sets, along with primitives like integers, strings, and keywords. It provides functions to serialize and parse EDN data from strings and input channels, enabling conversion between EDN and OCaml values, and includes submodules for inspecting and transforming EDN structures, converting between EDN and JSON, and handling nested data access. Use cases include reading EDN configuration files, validating data types during input parsing, and converting JSON API responses into EDN structures for further processing. The API allows operations such as mapping over elements, converting values to specific types, and safely accessing nested fields, while the JSON submodule enables seamless interoperability with JSON data sources.",
      "description_length": 863,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 863,
    "min_description_length": 323,
    "avg_description_length": 556.3333333333334,
    "embedding_file_size_mb": 0.011331558227539062
  }
}