{
  "package": "pbrt_services",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:59.187190",
  "modules": [
    {
      "module_path": "Pbrt_services.Client",
      "library": "pbrt_services",
      "description": "This module creates and manages RPC stubs for client-side service interactions, supporting unary and streaming modes. It works with request and response types through JSON and Protocol Buffers encoders and decoders. Concrete use cases include defining remote procedure calls with typed request and response handling in a client application.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pbrt_services.Value_mode",
      "library": "pbrt_services",
      "description": "This module defines types to distinguish between unary and streamed values in Protobuf service interactions. It includes the `unary` type for single-value operations and the `stream` type for handling sequences of values. Use `unary` for simple request-response calls and `stream` for bidirectional or server-side streaming scenarios.",
      "description_length": 334,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pbrt_services.Server",
      "library": "pbrt_services",
      "description": "This module defines and constructs RPC handlers for a Protobuf service, supporting both JSON and Protobuf encoding formats. It works with RPC descriptions that specify request and response types, along with their respective modes (e.g., unary, streaming). Concrete use cases include setting up server endpoints that process incoming requests by decoding them from JSON or Protobuf, invoking service logic, and encoding responses back in the desired format.",
      "description_length": 456,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pbrt_services",
      "library": "pbrt_services",
      "description": "This module provides a runtime for building and interacting with Protobuf-based services, enabling both client and server implementations with support for unary and streaming communication. It defines core types like `unary` and `stream` to represent operation modes, along with handlers that process requests using JSON or Protobuf encoders and decoders. You can use it to implement client stubs that send typed requests and handle responses, or to set up server endpoints that decode incoming messages, run service logic, and encode replies. Examples include unary RPCs for simple query-response interactions and streaming RPCs for real-time data exchange between client and server.",
      "description_length": 684,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 684,
    "min_description_length": 334,
    "avg_description_length": 453.5,
    "embedding_file_size_mb": 0.014940261840820312
  }
}