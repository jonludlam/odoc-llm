{
  "package": "mustache",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:31:36.211685",
  "modules": [
    {
      "module_path": "Mustache.With_locations.Infix",
      "description": "Provides a binary operator to concatenate two template elements into a single node, with a default location. Works with template data structures representing code fragments. Used to build complex templates by combining smaller parts efficiently.",
      "description_length": 245,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache_types.Ast",
      "description": "Provides operations to construct, traverse, and analyze abstract syntax tree nodes, including methods to extract identifiers, evaluate expressions, and validate structure. Works with complex data types such as function definitions, code sections, and parameter lists. Used to parse and transform source code during compilation or static analysis.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache.Json",
      "description": "Provides functions to parse and serialize JSON values, including handling of objects, arrays, strings, numbers, and booleans. Works with the `value` type for representing parsed JSON data and the `t` type for structured JSON documents. Used to convert HTTP request bodies into OCaml records and to generate JSON responses for API endpoints.",
      "description_length": 340,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache.Infix",
      "description": "Concatenates two template fragments into a single fragment using the infix operator. Works with the t type, representing template structures. Used to build complex templates by combining smaller parts inline.",
      "description_length": 208,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache.With_locations",
      "description": "Adds location tracking to template elements, enabling precise error reporting and source mapping. Supports concatenation of code fragments into unified nodes using a binary operator, with automatic location merging. Key data types include location-aware template elements and composite nodes. Example use cases include constructing multi-part templates from smaller components while preserving source context.",
      "description_length": 409,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mustache",
      "description": "Processes Mustache templates with {{ and }} delimiters, supporting variables, sections, and inversions. Works with strings and associative lists for data binding. Renders dynamic content in HTML or text outputs by substituting template placeholders with provided values.",
      "description_length": 270,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache_lexer",
      "description": "Lexing functions parse and tokenize Mustache templates, extracting identifiers, partial names, and tags while handling whitespace and comments. It processes input through recursive state machines and returns structured tokens for further parsing. Specific functions validate mustache syntax and split identifiers for template rendering.",
      "description_length": 336,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache_types",
      "description": "defines a set of operations for manipulating abstract syntax trees, including extracting identifiers, evaluating expressions, and validating structures. It supports complex data types like function definitions, code blocks, and parameter lists. Users can parse source code, analyze its structure, and perform transformations. Examples include extracting variable names from expressions or verifying the correctness of function signatures.",
      "description_length": 438,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache",
      "description": "Handles template composition, JSON serialization, and location-aware rendering. Operates on types such as `value`, `t`, and location-aware elements, supporting operations like JSON parsing, template concatenation, and source tracking. Enables building structured APIs by converting request bodies to OCaml records and assembling templates with precise error localization. Examples include generating dynamic JSON responses and constructing multi-file templates with preserved source positions.",
      "description_length": 493,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache_parser",
      "description": "Parses Mustache templates into an abstract syntax tree using a lexer function that converts input into tokens. It processes text and delimiter-based constructs to build a structured representation of the template. The parser supports embedded logic and section tags, enabling dynamic content rendering.",
      "description_length": 302,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 493,
    "min_description_length": 208,
    "avg_description_length": 338.7,
    "embedding_file_size_mb": 0.03677940368652344
  }
}