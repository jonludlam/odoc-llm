{
  "package": "mustache",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:03:47.466125",
  "modules": [
    {
      "module_path": "Mustache.With_locations.Infix",
      "library": "mustache",
      "description": "This module provides the `(^)` operator for concatenating two mustache template pieces that include source-file locations. It operates on values of type `Mustache.With_locations.t`, combining them into a new `Concat` node with a dummy location. Use this to build complex templates from smaller parts while preserving location information for error reporting.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mustache_types.Ast",
      "library": "mustache",
      "description": "Represents the abstract syntax tree for Mustache templates, including source location and node descriptions. It defines the structure of parsed Mustache expressions, such as variables, sections, and text. Used during template parsing and rendering to navigate and process template elements.",
      "description_length": 290,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache.Json",
      "library": "mustache",
      "description": "This module provides functions to convert JSON values to the mustache value type and render mustache templates using JSON data. It works with JSON objects and arrays, translating them into the mustache value representation for template substitution. Use this module when rendering dynamic mustache templates from JSON input, such as generating HTML or configuration files from JSON-based data sources.",
      "description_length": 401,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache.Infix",
      "library": "mustache",
      "description": "This module defines a single operator `(^)` that concatenates two Mustache template fragments into a new template. It operates directly on values of type `Mustache.t`, enabling fluent composition of template parts. Use this operator to build complex templates incrementally by joining static and dynamic sections.",
      "description_length": 313,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache",
      "library": "mustache",
      "description": "This module enables creating, rendering, and transforming templated structures through operations like parsing from strings, expanding partials, and HTML-escaping dynamic content. It works with JSON data structures and a custom template type (`t`) representing variables, sections, and comments, supporting use cases like dynamic HTML generation and text templating with strict error handling for missing context values or malformed templates. Key transformations include concatenating templates, folding over components, and safely interpolating data while managing rendering errors.",
      "description_length": 584,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache_types",
      "library": "mustache",
      "description": "This module defines core data types for representing Mustache template structure, including names, dotted names, and source locations. It provides functions for pretty-printing and converting dotted names, along with error types for mismatched section names during parsing. The Ast submodule represents the parsed structure of Mustache templates, used to track nodes and source positions for accurate rendering and error reporting.",
      "description_length": 431,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache_parser",
      "library": "mustache",
      "description": "Parses Mustache template syntax into an abstract syntax tree using a lexer. It processes tokens like sections, variables, and partials to construct structured template representations. This module is used to convert raw Mustache templates into an AST for rendering engines.",
      "description_length": 273,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mustache_lexer",
      "library": "mustache",
      "description": "This module processes Mustache template syntax by tokenizing input streams into structured elements like tags, identifiers, and comments. It handles low-level lexing operations such as identifying mustache delimiters, parsing partial names, and managing whitespace and standalone tags. Concrete use cases include extracting variable names from templates, processing nested sections, and preparing input for Mustache template rendering.",
      "description_length": 435,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 8,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8888888888888888
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 273,
    "avg_description_length": 385.625,
    "embedding_file_size_mb": 0.11634349822998047
  }
}