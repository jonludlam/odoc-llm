{
  "package": "atacama",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:20.707380",
  "modules": [
    {
      "module_path": "Atacama.Transport.Ssl",
      "library": "atacama",
      "description": "This module implements secure network communication by combining TCP and TLS protocols. It provides functions to configure and establish encrypted connections using TCP as the underlying transport and TLS for encryption. The `config` type holds both TCP and TLS settings, enabling servers to manage secure client interactions with specific encryption parameters. Use this module to set up HTTPS services or any encrypted TCP-based communication requiring TLS authentication and encryption.",
      "description_length": 489,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama.Handler.Default",
      "library": "atacama",
      "description": "This module provides default implementations for connection lifecycle and data handling hooks, including handling of incoming data, errors, connection setup, and shutdown events. It operates on connection state, byte strings, and error values, returning standardized handler results. Concrete use cases include serving as a base for custom handlers that process network data incrementally or manage connection state transitions.",
      "description_length": 428,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atacama.Transport.Tcp",
      "library": "atacama",
      "description": "This module implements TCP client and server communication with configurable timeouts for sending and receiving data. It provides functions to establish connections, send and receive messages, and manage socket behavior using the `config` type, which specifies timeouts in nanoseconds. Concrete use cases include building networked services that require precise control over transmission delays, such as real-time data streaming or low-latency messaging systems.",
      "description_length": 462,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama.Handler.Intf",
      "library": "atacama",
      "description": "This module defines the interface for connection handlers in Atacama, specifying hooks to manage connection lifecycle events and data processing. It works with connection state, byte strings, and custom error types, enabling precise control over how connections are initialized, errors are handled, and data is processed. Concrete use cases include implementing custom protocols, managing session state, and handling incoming messages or timeouts in networked applications.",
      "description_length": 473,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama.Transport",
      "library": "atacama",
      "description": "This module creates and configures network transport layers for TCP and SSL connections, supporting both secure and non-secure communication channels. It provides a unified interface for initializing transports with custom configurations, using types like `config` to encapsulate settings for timeouts and encryption. The first child module enhances TCP with TLS encryption, enabling secure services like HTTPS with authenticated, encrypted data transfer. The second child module focuses on TCP with timeout controls, allowing precise management of send and receive operations for applications like real-time streaming or low-latency messaging.",
      "description_length": 644,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama.Handler",
      "library": "atacama",
      "description": "This module defines how network connections behave by specifying handlers for key events like connection setup, data reception, errors, and closure. It centers on a handler type that bundles logic and state, enabling custom connection state machines, lifecycle logging, and data processing. Default implementations in submodules simplify common tasks like incremental data handling and state transitions, while the interface module formalizes hooks for custom protocol implementation and session management. Examples include building connection routers, implementing protocol parsers, and managing timeouts or message exchanges in network services.",
      "description_length": 648,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atacama.Telemetry",
      "library": "atacama",
      "description": "Handles telemetry events related to network connections, including accepting connections, connection start, and listening socket setup. Works with network address and socket types from the Riot.Net module. Useful for monitoring and logging network activity in server applications.",
      "description_length": 280,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama.Connection",
      "library": "atacama",
      "description": "This module handles bidirectional communication over network connections using the `t` type to represent active connections. It provides operations to send and receive byte strings with optional timeouts and size limits, retrieve peer addresses, check connection timestamps, and close connections. Concrete use cases include implementing network clients and servers that require precise control over data transmission and connection metadata.",
      "description_length": 442,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atacama",
      "library": "atacama",
      "description": "Starts a network server with configurable transport, concurrency, and connection handling, using a custom handler and initial state to manage client interactions. It supports secure and non-secure TCP communication through transport modules that handle TLS and timeouts, while handler modules define behavior for connection events and state transitions. The module enables precise control over bidirectional communication with operations to send, receive, and inspect connection metadata, and includes telemetry for monitoring network activity. Use cases include high-performance TCP/UDP servers with custom protocols, secure services with TLS, and real-time applications requiring low-latency messaging or streaming.",
      "description_length": 717,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 280,
    "avg_description_length": 509.22222222222223,
    "embedding_file_size_mb": 0.03314495086669922
  }
}