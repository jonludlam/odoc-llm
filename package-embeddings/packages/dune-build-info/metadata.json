{
  "package": "dune-build-info",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:26.419054",
  "modules": [
    {
      "module_path": "Build_info.V1.Version",
      "description": "Converts version numbers to string representations. Works with a custom type `t` that encapsulates version data. Used to generate human-readable version strings for logging and user interfaces.",
      "description_length": 193,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Build_info.V1.Statically_linked_library",
      "description": "Provides functions to retrieve a library's name and optional version, where the name distinguishes between public and private identifiers. Operates on a type `t` representing a library instance. Used to inspect metadata during build processes or dependency resolution.",
      "description_length": 268,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Build_info.V1.Statically_linked_libraries",
      "description": "Provides functions to retrieve a list of statically linked libraries and to look up a specific library by its name. Operates on values of type `Statically_linked_library.t`. Used to inspect the set of libraries embedded in the binary at compile time for diagnostic or runtime validation purposes.",
      "description_length": 296,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Build_info.V1",
      "description": "Encapsulates build-time metadata, enabling retrieval of version strings, library identifiers, and statically linked library lists. It defines types for version data and library instances, offering operations to convert versions to strings, extract library names and versions, and query statically linked libraries. Functions like version conversion and library inspection support logging, dependency tracking, and runtime validation. Examples include generating human-readable version outputs and verifying embedded library dependencies.",
      "description_length": 537,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "dune-build-info",
      "description": "Provides functions to retrieve build-time metadata such as the build directory, compiler version, and flags used. Works with strings, lists, and tuples to represent and manipulate build configuration data. Used to dynamically adjust behavior based on build settings, such as enabling debug logging or selecting platform-specific code paths.",
      "description_length": 340,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Build_info",
      "description": "captures build-time metadata, providing version strings, library identifiers, and lists of statically linked libraries. It defines version data and library instance types, with operations to convert versions to strings, extract library names and versions, and query linked libraries. Functions enable logging, dependency tracking, and validation, such as generating version outputs or verifying embedded dependencies. Examples include displaying build versions and checking library inclusions at runtime.",
      "description_length": 504,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 193,
    "avg_description_length": 356.3333333333333,
    "embedding_file_size_mb": 0.022218704223632812
  }
}