{
  "package": "bson2",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:10.778779",
  "modules": [
    {
      "module_path": "Bson2.Binary.Reader",
      "description": "Converts BSON type and read result values to and from S-expressions, and constructs a reader from byte sequences, strings, or input channels. Processes binary data to extract BSON values sequentially. Supports parsing of BSON documents from various input sources.",
      "description_length": 263,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.Binary.Writer",
      "description": "This module provides binary serialization operations for diverse data types, including floats, strings, arrays, objects, and BSON elements, through a writer state that manages key-value pair encoding. It supports key management functions like setting minimum and maximum keys, along with conversion utilities to bytes, strings, or output channels for data persistence or transmission. Use cases include efficient data storage, network protocol implementation, and structured data manipulation where precise control over serialization and ordering is required.",
      "description_length": 559,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.Binary",
      "description": "Encapsulates BSON binary data handling through reading and writing operations, enabling conversion between binary formats and S-expressions. It supports sequential extraction of BSON values from input sources and encoding of complex data types into binary streams. Key functions include managing key ranges, converting data to bytes or strings, and handling structured document serialization. Examples include parsing BSON documents from network streams and serializing nested data structures for storage.",
      "description_length": 505,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bson2",
      "description": "Encodes and decodes data to and from the binary BSON format using custom serialization routines. Works with OCaml's native data types such as lists, variants, and records. Enables efficient storage and transmission of structured data in applications requiring BSON compatibility.",
      "description_length": 279,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bson2",
      "description": "Converts BSON data from byte sequences, strings, or input channels into a structured type, and extracts individual BSON values with detailed error or end-of-input tracking. Supports serialization and deserialization of BSON types and read results to and from S-expressions. Processes binary data for parsing and inspection in applications handling BSON-encoded data.",
      "description_length": 366,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 559,
    "min_description_length": 263,
    "avg_description_length": 394.4,
    "embedding_file_size_mb": 0.018589019775390625
  }
}