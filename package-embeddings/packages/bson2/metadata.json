{
  "package": "bson2",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:16.238730",
  "modules": [
    {
      "module_path": "Bson2.Binary.Reader",
      "library": "bson2",
      "description": "This module parses BSON binary data into OCaml values by reading bytes and extracting typed fields. It supports operations to read primitive types like floats, strings, integers, booleans, and complex types such as documents, arrays, regex patterns, and timestamps. Use it to decode BSON documents from bytes, strings, or input channels, and process structured data in formats like MongoDB wire protocol or BSON-encoded logs.",
      "description_length": 425,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.BsonReader",
      "library": "bson2",
      "description": "This module parses BSON data from byte sequences, strings, or input channels, allowing sequential extraction of BSON elements as typed values. It supports reading primitive types like floats, integers, strings, booleans, and nested structures such as documents and arrays, along with specialized types like ObjectIds, timestamps, and regular expressions. Use it to decode BSON streams into OCaml values for data processing or deserialization tasks.",
      "description_length": 448,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.BsonWriter",
      "library": "bson2",
      "description": "This module enables structured construction of BSON documents and arrays through paired start/close operations, supporting typed serialization of primitives like floats, strings, object IDs, timestamps, and special markers (minkey, maxkey). It manages nested data structures with scoped JavaScript values and converts accumulated state into binary formats, output streams, or string representations. Typical use cases include building BSON payloads for database interactions, API serialization, or embedding complex nested documents with typed fields and closure-scoped JavaScript values.",
      "description_length": 588,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bson2.Binary",
      "library": "bson2",
      "description": "This module decodes BSON binary data into OCaml values by reading and interpreting byte sequences. It supports primitive types like integers, floats, strings, and booleans, as well as structured types such as documents, arrays, regex patterns, and timestamps. Use it to parse BSON from bytes, strings, or input channels, enabling processing of data from MongoDB or BSON-encoded logs. For example, you can extract a document field by name, read an array of integers, or decode a timestamp from a binary input stream.",
      "description_length": 515,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2",
      "library": "bson2",
      "description": "This module handles the parsing and construction of BSON-encoded data, providing direct access to type-specific operations for reading and writing binary representations of structured values like documents, arrays, and primitives. It supports low-level manipulation of BSON streams through sequential decoding and scoped serialization, enabling precise handling of nested structures and specialized types such as ObjectIds, timestamps, and regular expressions. With its submodules, it offers a complete workflow for deserializing from and serializing to BSON, whether processing data from a database, constructing complex nested documents, or parsing binary logs. Example uses include extracting typed fields from a BSON document, building a BSON array of timestamps, or converting a byte sequence into a structured OCaml value for further manipulation.",
      "description_length": 853,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 853,
    "min_description_length": 425,
    "avg_description_length": 565.8,
    "embedding_file_size_mb": 0.018621444702148438
  }
}