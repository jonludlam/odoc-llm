{
  "package": "bson2",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:01:23.128274",
  "modules": [
    {
      "module_path": "Bson2.Binary.Writer",
      "library": "bson2",
      "description": "This module enables serialization of BSON documents by writing a variety of data types\u2014including numeric values, strings, binary data, object IDs, booleans, dates, regular expressions, JavaScript code, and specialized types like decimal128, minkey, and maxkey\u2014into a binary context. It supports structured assembly of nested documents and arrays with precise BSON encoding rules, and provides methods to output the resulting binary data as byte sequences, strings, or directly to output channels. This functionality is particularly useful for generating BSON payloads in database drivers, data interchange systems, or network protocols requiring efficient binary serialization.",
      "description_length": 677,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.Binary.Reader",
      "library": "bson2",
      "description": "This module parses BSON binary data into structured values by reading bytes and extracting typed fields. It supports BSON types like strings, integers, dates, and nested documents or arrays, returning each field with its name and decoded value. Use it to deserialize BSON data from bytes, strings, or input channels, such as when reading from a MongoDB dump or binary file.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2.Binary",
      "library": "bson2",
      "description": "This module provides precise serialization and deserialization of BSON data through its `Reader` and `Writer` submodules. `Reader` extracts typed BSON fields such as strings, integers, dates, and nested documents from binary input, while `Writer` assembles complex BSON structures by encoding values like decimals, object IDs, and JavaScript code into binary form. It is used to handle MongoDB binary data, build database drivers, and implement network protocols requiring strict BSON formatting.",
      "description_length": 496,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson2",
      "library": "bson2",
      "description": "The `Binary` module offers precise serialization and deserialization of BSON data through its `Reader` and `Writer` submodules. `Reader` extracts typed BSON fields such as strings, integers, dates, and nested documents from binary input, while `Writer` assembles complex BSON structures by encoding values like decimals, object IDs, and JavaScript code into binary form. It is used to handle MongoDB binary data, build database drivers, and implement network protocols requiring strict BSON formatting.",
      "description_length": 502,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 677,
    "min_description_length": 373,
    "avg_description_length": 512.0,
    "embedding_file_size_mb": 0.05833244323730469
  }
}