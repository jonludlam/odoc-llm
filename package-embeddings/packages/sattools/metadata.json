{
  "package": "sattools",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:33:53.674637",
  "modules": [
    {
      "module_path": "Sattools.Dimacs.IntList",
      "description": "Iterates over elements of an integer list and applies a given function to each, tracks the number of variables and terms in a structured data representation. Operates on a custom type `t` that encapsulates integer lists and associated metadata. Used to process symbolic expressions or algebraic terms in a compact form.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sattools.Dimacs.Make",
      "description": "Iterates over a list of integers to perform side effects on a structured data type representing a mathematical expression. Processes internal counts of variables and terms within the structure. Used to apply transformations or analyses across components of algebraic expressions.",
      "description_length": 279,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sattools.Tseitin.Make",
      "description": "Performs element-wise negation on values of type t. Operates on structured data representing computational steps or transformations. Used to invert the direction of build rules in a dependency graph.",
      "description_length": 199,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sattools.Lbool",
      "description": "Converts integer values to a boolean-like type and serializes the type to a string. Works with an enumerated type representing truth values. Used to encode and display logical states in constraint satisfaction problems.",
      "description_length": 219,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sattools.Result",
      "description": "Provides functions to handle success and failure states, including mapping, binding, and error propagation. Works with the `('a, 'b) result` type, distinguishing between computed values and error messages. Used to manage API responses and file operations where error handling is critical.",
      "description_length": 288,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sattools.Libs",
      "description": "Provides functions to create and manage a SAT solver instance, add clauses to the problem, and perform solving with or without model retrieval. Operates on a solver type and integer lists representing clauses. Used to integrate SAT solving into applications for constraint satisfaction and logical deduction.",
      "description_length": 308,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sattools.Dimacs",
      "description": "Processes DIMACS format clauses by iterating over each clause, retrieves the number of variables and the number of clauses in a DIMACS instance. Operates on a custom type representing DIMACS data, allowing efficient traversal and analysis of logical formulas. Used to analyze SAT problem structures and extract metadata for further processing.",
      "description_length": 343,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sattools.Tseitin",
      "description": "Generates and manipulates logical formulas in conjunctive normal form using a negation operator and a type representing clauses. Operates on a custom type `t` that encodes logical expressions as structured data. Used to transform arbitrary Boolean formulas into equivalent CNF representations for SAT solving.",
      "description_length": 309,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dimacs.IntList",
      "description": "Iterates over elements of an integer list and applies a given function to each, tracks the number of variables and terms in a structured data representation. Operates on lists of integers and an abstract type encapsulating structured data. Used to process and analyze symbolic expressions in algebraic computations.",
      "description_length": 315,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dimacs.Make",
      "description": "Iterates over a list of integers to perform side effects on a structured data type representing a mathematical expression. Processes internal counts of variables and terms within the structure. Used to apply transformations or analyses across elements of the expression during compilation or optimization.",
      "description_length": 305,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tseitin.Make",
      "description": "Provides a unary operator that transforms values of type t. Operates on a custom type t, applying a specific transformation defined by the ~: operator. Used to modify or wrap values in a domain-specific context.",
      "description_length": 211,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "sattools",
      "description": "Provides functions to interface with SAT solvers, including reading DIMAC files and invoking solvers via C/C++ bindings. Works with boolean formulas represented as clauses and variables. Enables solving satisfiability problems using Minisat, PicoSAT, and CryptoMiniSat.",
      "description_length": 269,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sattools",
      "description": "Combines boolean encoding, error handling, SAT solving, DIMACS parsing, and CNF manipulation to support logical problem representation and resolution. It works with types such as boolean-like enums, `('a, 'b) result`, solver instances, DIMACS data, and CNF expressions, enabling operations like clause addition, error propagation, formula transformation, and metadata extraction. Users can encode logical states, manage API errors, solve SAT problems, parse DIMACS files, and convert formulas to CNF. Examples include generating truth tables, handling file I/O with error tracking, solving constraint systems, analyzing problem structure, and preparing inputs for automated reasoning tools.",
      "description_length": 690,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Libs",
      "description": "Provides operations to create and destroy a solver instance, add clauses to the solver, and perform solving with or without model retrieval. Works with a solver type and integer lists to represent clauses. Used to integrate SAT solving capabilities into applications, such as constraint satisfaction or logical inference tasks.",
      "description_length": 327,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dimacs",
      "description": "Processes DIMACS format clauses by iterating over each clause, retrieves the number of variables and terms in a formula, and is used for parsing and analyzing logical formulas in SAT solving contexts.",
      "description_length": 200,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tseitin",
      "description": "Generates and manipulates logical formulas in conjunctive normal form using a negation operator and a type representing clauses. Operates on a custom type `t` that encodes logical expressions as structured data. Used to transform arbitrary boolean formulas into equivalent CNF representations for SAT solving.",
      "description_length": 309,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Result",
      "description": "Provides functions to transform, chain, and handle results of computations that may fail, including map, bind, and catch. Works with the 'a t type, which represents either a successful value or an error. Used to propagate errors through a series of computations without explicit error checking at each step.",
      "description_length": 307,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lbool",
      "description": "Converts integer values to a boolean-like type and formats the type as a string. Works with an enumerated type representing true, false, and unknown states. Used to serialize internal logic states into human-readable strings for logging or user output.",
      "description_length": 252,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 690,
    "min_description_length": 199,
    "avg_description_length": 302.72222222222223,
    "embedding_file_size_mb": 0.06580162048339844
  }
}