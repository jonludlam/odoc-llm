{
  "package": "autofonce_m4",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:15.006029",
  "modules": [
    {
      "module_path": "Autofonce_m4.M4Lexer",
      "library": "autofonce_m4",
      "description": "This module processes lexical analysis for M4 macro expansion, handling input buffers and token extraction. It provides functions to initialize the lexer state, unescape characters, retrieve tokens with their locations, and track the current parsing location. Concrete use cases include parsing M4 source files, handling string literals with escape sequences, and supporting macro expansion logic.",
      "description_length": 397,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.Version",
      "library": "autofonce_m4",
      "description": "Stores and exposes version metadata including a version string, commit hash, and commit date. Works with string and option types to represent version information. Used to embed build-time details into applications for debugging and release tracking.",
      "description_length": 249,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_m4.M4Printer",
      "library": "autofonce_m4",
      "description": "This module converts various components of M4 syntax\u2014such as tokens, locations, arguments, macros, and blocks\u2014into their string representations. It operates on data types defined in the M4Types module, including `token`, `location`, `arg`, `statement`, and lists of `statement`. It is useful for debugging or logging M4 code structures during processing or transformation tasks.",
      "description_length": 378,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_m4.M4Parser",
      "library": "autofonce_m4",
      "description": "Parses M4 macro files or strings into structured blocks, handling escaped characters and converting arguments to strings. Works with M4 syntax elements like macros, arguments, and statements. Used to process and manipulate M4 templates or scripts programmatically.",
      "description_length": 264,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.M4Types",
      "library": "autofonce_m4",
      "description": "This module defines core data structures for representing source code locations, lexical tokens, and statement blocks. It includes a `location` record for tracking file positions, a `token` variant for distinguishing M4 macro elements, and a `block` type for organizing parsed statements. These types support parsing and processing M4 macros with precise error reporting and structured manipulation of macro arguments and shell commands.",
      "description_length": 437,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4",
      "library": "autofonce_m4",
      "description": "This module processes M4 macro syntax from input to structured representation, supporting lexical analysis, parsing, and string conversion of macro elements. It operates on core types like `token`, `location`, `statement`, and `block`, enabling tasks such as macro expansion, argument handling, and structured code manipulation. Functions allow parsing M4 files, extracting tokens with positional data, converting syntax elements to strings, and embedding version metadata for build tracking. Example uses include transforming M4 templates, logging parsed structures, and embedding version details into generated output.",
      "description_length": 620,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 620,
    "min_description_length": 249,
    "avg_description_length": 390.8333333333333,
    "embedding_file_size_mb": 0.022217750549316406
  }
}