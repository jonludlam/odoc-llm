{
  "package": "autofonce_m4",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:55:58.696421",
  "modules": [
    {
      "module_path": "Autofonce_m4.M4Lexer",
      "library": "autofonce_m4",
      "description": "This module processes lexical analysis for M4 macro language input. It initializes lexing buffers, unescapes character sequences, and identifies tokens with associated locations. It operates on `Lexing.lexbuf` and produces `location` and `token` values, used for parsing M4 source code into structured tokens during macro expansion.",
      "description_length": 332,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.M4Parser",
      "library": "autofonce_m4",
      "description": "Parses M4 macro files or strings into structured blocks, handling escaped characters and converting arguments to strings. Works with M4 syntax elements like macros, arguments, and statements. Used to process and manipulate M4 templates or configuration files directly into an AST for further interpretation or transformation.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.Version",
      "library": "autofonce_m4",
      "description": "Stores and exposes version metadata including a version string, optional commit hash, and optional commit date. Works with string and option types to represent versioning information. Useful for embedding build-time version details into applications for diagnostics or user-facing displays.",
      "description_length": 290,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.M4Types",
      "library": "autofonce_m4",
      "description": "This module defines core data structures for representing source code locations, lexical tokens, and code blocks in an M4 macro processor. It includes a `location` record for tracking file positions, a `token` variant for distinguishing M4 lexical elements like identifiers and argument markers, and a `block` type for organizing statements. These types support parsing and macro expansion tasks by enabling precise token tracking and structured code representation.",
      "description_length": 466,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4.M4Printer",
      "library": "autofonce_m4",
      "description": "This module converts various abstract syntax elements like tokens, locations, arguments, macros, and blocks into string representations. It operates on data types defined in the M4Types module, including token, location, arg, and statement. Useful for debugging or logging structured M4 input as human-readable output.",
      "description_length": 318,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_m4",
      "library": "autofonce_m4",
      "description": "This module processes M4 macro language input through lexical analysis, parsing, and structured representation. It operates on `Lexing.lexbuf`, converting input into tokens, locations, and abstract syntax trees representing macros, arguments, and statements. Concrete use cases include parsing and transforming M4 templates or configuration files into executable code or debugging M4 macro expansions with precise source tracking.",
      "description_length": 430,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 466,
    "min_description_length": 290,
    "avg_description_length": 360.1666666666667,
    "embedding_file_size_mb": 0.08742046356201172
  }
}