{
  "package": "owi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 35,
  "creation_timestamp": "2025-08-15T12:31:01.265903",
  "modules": [
    {
      "module_path": "Owi.Pp.Simplified_indice",
      "library": "owi",
      "description": "This module defines pretty-printing functions for simplified indices and function types. It provides `indice` to format integer indices and `bt` to format function types using the standard formatter. These functions are used to display structured type information in a readable textual form during debugging or logging.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Link.Global",
      "library": "owi",
      "description": "Handles global state management during module linking, providing operations to initialize, update, and access shared runtime data. Works with mutable global variables and link state structures. Used to coordinate state across linked modules, such as tracking external dependencies or sharing configuration settings.",
      "description_length": 315,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Link.StringSet",
      "library": "owi",
      "description": "This module implements a string set abstraction with operations for set algebra (union, intersection, difference), element-wise transformations (map, filter), and ordered traversal (iter, fold). It works with sets of strings (`t`) and sequences/iterables, supporting conversions to/from lists and sequences with customizable ordering. Typical applications include dependency resolution, configuration deduplication, and maintaining collections of unique identifiers with efficient membership checks and bulk operations.",
      "description_length": 519,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Link.Memory",
      "library": "owi",
      "description": "This module manages runtime memory for a linked module, providing direct access to memory contents, limits, and in-place updates. It works with a memory type that holds binary data and optional maximum size constraints. Use it to inspect or modify memory contents during execution, such as reading data after a function call or enforcing memory limits.",
      "description_length": 352,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Input_Expr",
      "library": "owi",
      "description": "This module provides functions to convert WebAssembly intermediate representation elements into human-readable string formats, focusing on structural and operational components. It operates on data types such as expressions, function signatures, local variables, memory arguments, and control flow constructs, emphasizing precise formatting of abstract syntax trees and type declarations. Specific use cases include generating debug output for compiler intermediates and producing structured textual representations of WebAssembly code for analysis or serialization.",
      "description_length": 566,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Value.Func",
      "library": "owi",
      "description": "This module defines function types and external references for WebAssembly interoperation, using algebraic data types to represent parameter and return type arities. It supports constructing and inspecting functions with typed parameters and results, including externref values, integers, and floats. Concrete use cases include defining callback functions from OCaml to WebAssembly and specifying the signature of exported functions.",
      "description_length": 433,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Link.StringMap",
      "library": "owi",
      "description": "This module provides ordered associative operations for mapping string keys to arbitrary values, supporting insertion, deletion, and combination of bindings alongside ordered traversal and transformation. It works with string-keyed maps and sequences of key-value pairs, enabling use cases like configuration management, sorted data processing, or dictionary implementations where key ordering and functional updates are critical. Key features include ordered iteration, bidirectional conversion with sequences, and predicate-driven filtering or partitioning of bindings.",
      "description_length": 571,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Simplify.Named",
      "library": "owi",
      "description": "This module provides `fold` and `iter` functions to process named values in a simplified text module. It works with a named value structure represented as a list of tuples, each containing an integer index and a value. Use it to traverse or accumulate data over named fields during module simplification tasks.",
      "description_length": 310,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Simplified",
      "library": "owi",
      "description": "This module provides functions to format WebAssembly abstract syntax tree (AST) elements\u2014such as value types, function definitions, control flow instructions, and memory operations\u2014into human-readable strings using OCaml's `Format.formatter`. It operates on simplified AST representations like `val_type`, `instr'`, `expr'`, and `func'`, along with structured components like memory limits and global types, enabling clear visualization of WebAssembly code structures. These utilities are particularly useful in tooling for debugging, documentation, or analysis where concise and consistent rendering of WebAssembly programs is required.",
      "description_length": 637,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Shared",
      "library": "owi",
      "description": "This module defines functions for pretty-printing type annotations, value types, and parameters using OCaml's Format module. It operates on data types such as `val_type`, `num_type`, `ref_type`, and numeric wrappers like `Float32.t` and `Float64.t`. Use this module to format function signatures, type declarations, and numeric literals in a structured and readable way.",
      "description_length": 370,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Value.Extern_ref",
      "library": "owi",
      "description": "This module defines typed external reference values with unique identities. It supports creating fresh references with string identifiers, retrieving reference names, and comparing references for equality. It is used to model distinct external entities like resources or handles in systems requiring precise identity tracking.",
      "description_length": 326,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Link.Env",
      "library": "owi",
      "description": "This module manages runtime environments for linking simplified modules, providing access to memory, functions, tables, elements, data segments, and globals via indexed lookups. It supports lazy resolution of environment values and includes operations to drop element and data segment references. Concrete use cases include resolving imported functions and memory during module instantiation and managing dynamic linking state.",
      "description_length": 427,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Symbolic_indice",
      "library": "owi",
      "description": "This module defines pretty-printing functions for symbolic indices and block types, converting them into human-readable string representations. It operates on the `indice` and `bt` types, which represent symbolic indices and block type information, respectively. Use this module to format and display symbolic index and block type values during debugging or logging in a structured and readable way.",
      "description_length": 399,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Pp.Input",
      "library": "owi",
      "description": "This module formats structured values like WebAssembly AST components, symbolic indices, and expressions into human-readable representations. It operates on data types including function types, memory arguments, module fields, and intermediate representation elements such as globals, tables, and assertions. These functions are used to produce readable output for tools processing WebAssembly-like code or debugging low-level program structures.",
      "description_length": 446,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Types.Const",
      "library": "owi",
      "description": "This module defines instruction and expression types for representing constant values and basic operations in a parsed text format. It includes integer and floating-point constant instructions, reference null and function references, global variable access, and binary operations with specific type annotations. These types are used directly in the interpreter to evaluate expressions and execute code based on the parsed input.",
      "description_length": 428,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Simplify.StringMap",
      "library": "owi",
      "description": "This module implements string-keyed maps with arbitrary value types, supporting associative operations like insertion, deletion, and lookup, alongside transformations, filtering, and ordered traversal. It provides utilities for converting between maps and sequences, enabling efficient iteration and serialization, while supporting both functional and physical equality semantics for key comparisons. Typical applications include managing configuration data, environment mappings, or dictionary-like structures where string-based keys require structured manipulation and ordered processing.",
      "description_length": 590,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Global",
      "library": "owi",
      "description": "This module provides formatter-based pretty-printing operations for structured data in the `Owi` ecosystem, focusing on module components like imports, exports, globals, and symbolic indices. It works with types such as `formatter`, `indice`, `export_desc'`, `import_desc`, and `module_field` to serialize complex structures into human-readable text, adhering to a consistent pattern of formatter-driven output. These functions are particularly useful for debugging module definitions, logging execution traces, or generating readable representations of low-level WebAssembly-like constructs.",
      "description_length": 592,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Make_Expr",
      "library": "owi",
      "description": "This module provides functions to format and display WebAssembly type and instruction definitions, focusing on components like memory types, table types, arithmetic operators, and structured expressions. It operates on WebAssembly-specific data structures such as value types, global variables, and numeric types from `Owi.Types`, using OCaml's `Format` module to produce human-readable representations. These utilities are useful for debugging compiler pipelines or generating documentation for WebAssembly-based systems.",
      "description_length": 522,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp.Const",
      "library": "owi",
      "description": "This module defines functions to pretty-print constant-related types, including integer binary operations, instructions, and expression lists. It operates on data structures like `Owi.Types.Const.ibinop`, `Owi.Types.Const.instr`, and lists of instructions. It is used to format and display low-level constant expressions in a readable way, typically for debugging or logging purposes.",
      "description_length": 384,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Link.Table",
      "library": "owi",
      "description": "This module manages a runtime table that maps identifiers to values during module linking. It provides the `update` function to populate or modify entries in the table, which is used to construct executable modules from simplified extern representations. The table supports direct value insertion, enabling concrete runtime configurations for linked components.",
      "description_length": 361,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Value",
      "library": "owi",
      "description": "This module defines typed external reference values with unique identities and supports operations to create, compare, and inspect them. It works with algebraic data types representing WebAssembly function signatures, externref values, and reference types. Concrete use cases include modeling distinct external entities like resources or handles, defining callback functions between OCaml and WebAssembly, and specifying function signatures with typed parameters and results.",
      "description_length": 475,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Parse",
      "library": "owi",
      "description": "Parses WebAssembly scripts from strings, files, or input channels into an abstract syntax tree. Works directly with input sources like strings and file handles, producing structured script representations. Useful for loading and validating wasm code from different input sources without manual preprocessing.",
      "description_length": 308,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Pp",
      "library": "owi",
      "description": "This module provides formatter-based pretty-printing functions for WebAssembly-related data structures, including value types, function signatures, symbolic indices, and low-level instructions. It operates on types like `val_type`, `indice`, `instr'`, `expr'`, and module components such as globals, imports, and exports. Use it to generate human-readable representations of WebAssembly AST elements, type annotations, and intermediate forms during debugging, logging, or tooling output.",
      "description_length": 487,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Script",
      "library": "owi",
      "description": "Executes a full WebAssembly script, handling operations like function calls, memory manipulation, and control flow. Works directly with `Owi.Types.script`, which represents a sequence of Wasm instructions and module definitions. Useful for running standalone Wasm modules in a host environment, such as executing test scripts or embedded logic.",
      "description_length": 344,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Compile",
      "library": "owi",
      "description": "This module provides functions to compile OCaml modules up to specific stages, such as linking or interpretation. It operates on module data structures and link states, producing updated link states and runnable modules. It is used to control the compilation pipeline, enabling partial compilation for tasks like linking modules incrementally or executing interpreted code.",
      "description_length": 373,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Typecheck",
      "library": "owi",
      "description": "Performs typechecking on a simplified module representation, validating its structure and ensuring type correctness. Works with `simplified_module` values produced by the simplification phase. Useful for verifying that transformations preserve type safety before further processing.",
      "description_length": 282,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Int32",
      "library": "owi",
      "description": "This module implements arithmetic, bitwise, and shift operations on 32-bit integers, focusing on low-level bit manipulation and type conversions required by WebAssembly semantics. It supports signed and unsigned comparisons, logical operations (OR, AND, XOR), rotations, shifts, and division with remainder, operating on a 32-bit integer type that interfaces with floats, strings, and other integer representations. It is designed for applications requiring precise control over binary data and integer math in WebAssembly environments, such as implementing Wasm instruction semantics or optimizing performance-critical numerical code.",
      "description_length": 635,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Interpret",
      "library": "owi",
      "description": "Interprets WebAssembly modules and functions by executing a linked module or running a function with a provided stack. It operates on linked module structures and function values within an execution environment. Use this module to run compiled WebAssembly code directly, such as executing a function with a specific stack state or loading and interpreting an entire module.",
      "description_length": 373,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Int64",
      "library": "owi",
      "description": "This module offers 64-bit integer operations tailored for WebAssembly, including arithmetic (with unsigned division and remainder), bitwise logic, shifts/rotates, and comparisons supporting both signed and unsigned semantics. It operates on `Owi.Int64.t` values to enable low-level tasks like integer overflow handling, bit-level manipulation, and precise conversion between numeric types in Wasm compilation or system programming contexts.",
      "description_length": 440,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi.Types",
      "library": "owi",
      "description": "This module defines types for modeling WebAssembly structures like numeric operations, function signatures, memory, tables, and module components (functions, globals, imports). It includes representations for instructions, expressions, constants (I32, F64), and assertions used during parsing and interpretation. These types enable processing WebAssembly modules, evaluating symbolic indices, handling memory arguments, and validating operations like traps or returns in the interpreter.",
      "description_length": 487,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Log",
      "library": "owi",
      "description": "This module controls debug logging output with a boolean reference and provides two formatted printing functions. It works with format strings and values of arbitrary types for logging purposes. Use it to conditionally display debug information or print error messages and terminate execution.",
      "description_length": 293,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Simplify",
      "library": "owi",
      "description": "This module processes and transforms structured text-based modules into simplified representations using associative maps and named value traversals. It handles complex data structures like global variables, tables, memory, and functions, organizing them into indexed, serializable forms with explicit export tracking for module elements. Use it to analyze or restructure WebAssembly-like modules during compilation or static analysis tasks.",
      "description_length": 441,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Link",
      "library": "owi",
      "description": "This module links simplified WebAssembly modules into executable forms, managing runtime state through structured environments, memory, tables, and globals. It processes imports and exports, resolving dependencies while maintaining state across modules using string-keyed maps and sets for efficient lookups and updates. Concrete use cases include instantiating modules with resolved imports, tracking linked components by name or ID, and registering external functions for host interactions.",
      "description_length": 492,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Owi.Check",
      "library": "owi",
      "description": "Performs initial validation of a module's structure and dependencies. Works with `Owi.Types.module_` to verify correctness, returning a result indicating success or an error message. Useful for ensuring modules meet expected interfaces before further processing.",
      "description_length": 262,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Owi",
      "library": "owi",
      "description": "This module provides operations for validating, transforming, and executing WebAssembly code, including compilation, type checking, and interpretation workflows. It operates on structured WebAssembly module representations, low-level integer and floating-point types (e.g., Int32, Float64), and typed external reference values, enabling use cases like modeling function signatures, managing cross-language callbacks, and building tools for Wasm module analysis or runtime execution environments.",
      "description_length": 495,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 35,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 637,
    "min_description_length": 262,
    "avg_description_length": 430.1142857142857,
    "embedding_file_size_mb": 0.5075807571411133
  }
}