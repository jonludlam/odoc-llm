{
  "package": "universal-portal",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:41.195490",
  "modules": [
    {
      "module_path": "UniversalPortal_Shared_Portal",
      "library": "universal-portal.shared_native",
      "description": "This module defines a portal type with a CSS selector and React element content. It provides a context for collecting portals and a `make` function to create portal instances that render content into a specified DOM node. Use it to render React components into arbitrary DOM locations, such as modals or tooltips outside the main component tree.",
      "description_length": 345,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UniversalPortal_Server.PortalCollector.Provider",
      "library": "universal-portal.server",
      "description": "This module defines providers for injecting portal-related context into React components. It works with `portal` values from the `UniversalPortal_Shared` module and uses React providers to pass rendering logic down the component tree. Concrete use cases include dynamically rendering portal content such as modals or tooltips at specific locations in the app.",
      "description_length": 359,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UniversalPortal_Server.PortalCollector",
      "library": "universal-portal.server",
      "description": "This module defines a React component that collects and manages portal elements within a hierarchical structure, using a provider pattern to propagate portal data to child components. It introduces the `make` function to create a container that captures portals through a callback and renders children within a context that supports portal injection. The child module handles context propagation, enabling components to dynamically render portal content like modals or tooltips anywhere in the app. Together, they allow structured management of portal placement and rendering logic across nested components.",
      "description_length": 607,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UniversalPortal_Server",
      "library": "universal-portal.server",
      "description": "This module coordinates the collection and serialization of portal elements within React component trees, using `collectPortals` to traverse and register portals and `appendUniversalPortals` to merge serialized content into a target string. It works with React elements and portal objects from the shared module, while its child module introduces a provider-based component that captures portals and injects them contextually. The `make` function creates a container that renders children in a context-aware environment, enabling dynamic rendering of modals, tooltips, or other portal-driven UI elements anywhere in the application. Together, they provide a structured way to manage portal placement, traversal, and rendering across nested components.",
      "description_length": 751,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 751,
    "min_description_length": 345,
    "avg_description_length": 515.5,
    "embedding_file_size_mb": 0.014926910400390625
  }
}