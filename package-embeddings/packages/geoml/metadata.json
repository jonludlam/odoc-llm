{
  "package": "geoml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 25,
  "creation_timestamp": "2025-06-18T16:38:07.376032",
  "modules": [
    {
      "module_path": "Polygon.Convex.Regular",
      "description": "Creates regular polygons from a center point, a reference point, and a vertex count, and provides operations to compute perimeter, area, and check point inclusion. Works with geometric points and affine transformations, and can generate randomized polygon variants. Supports generating polygon shapes, translating, transforming, and checking geometric properties like square detection.",
      "description_length": 385,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Point.Tbl",
      "description": "This module offers hash table manipulation through insertion, deletion, and lookup operations, along with iteration and conversion between tables and sequences. It works with polymorphic key-value structures and sequences of tuples, enabling dynamic population and updates. Use cases include data transformation pipelines and configuration management where efficient key-based access and sequence-based updates are required.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curve.Quadratic",
      "description": "Provides operations to construct and evaluate quadratic B\u00e9zier curves using three points, including retrieving start, end, and control points. Computes points along the curve at specified intervals and generates curves from lists of points. Uses a tuple of three points to represent curves and calculates their positions using a parametric equation.",
      "description_length": 349,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curve.Cubic",
      "description": "Constructs and manipulates cubic B\u00e9zier curves using four points, with functions to extract start and end points, evaluate the curve at a parameter, generate sequences of points along the curve, and convert lists of points into curves. Operates on tuples of four `Point.t` values to represent curves and computes intermediate points based on a parameter between 0 and 1. Used to generate smooth paths in graphical applications by sampling points along defined curves.",
      "description_length": 467,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curve.BSpline",
      "description": "Creates B-splines from control points and knot arrays or evenly spaced knots, enabling evaluation of points along the curve using a parameter. Operates on lists of 2D points and float arrays representing knot sequences. Computes specific points on the curve, retrieves start and end positions, and generates a list of sampled points for a given resolution.",
      "description_length": 356,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Segment.Tbl",
      "description": "The module provides operations for manipulating hash tables through insertion, deletion, lookup, and iteration, along with converting tables to sequences for sequential processing. It works with key-value pairs and sequences of tuples, utilizing a polymorphic table type to support bulk modifications. Specific use cases include efficiently initializing tables from data streams or dynamically updating structures while maintaining accessibility.",
      "description_length": 446,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polygon.Convex",
      "description": "Calculates and manipulates regular polygons using center and reference points, with methods to determine perimeter, area, and point inclusion. Supports affine transformations, randomization, and geometric checks such as square detection. Operates on point-based data structures and applies geometric operations. Examples include generating a hexagon, translating its position, and verifying if a point lies inside.",
      "description_length": 414,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.List",
      "description": "Returns the last element of a list, prepends an element to a list, splits and concatenates a sorted list based on a custom comparator, and prints list elements with a separator. Works with lists of any type and formatatters. Used to process ordered data, build lists incrementally, and format output with specific delimiters.",
      "description_length": 325,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "geoml",
      "description": "Provides operations for constructing and manipulating 2D geometric entities such as points, lines, and polygons, including transformations like scaling and rotation. Works with coordinate tuples, line segments, and convex hulls to enable geometric computations. Used to calculate intersections, generate shapes like golden rectangles, and perform spatial analysis in computer graphics applications.",
      "description_length": 398,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Line",
      "description": "This module handles geometric operations on linear equations represented as ax + by + c = 0, including constructing lines from coefficients, points, or axes, and performing transformations like scaling and translation. It enables computations such as intersection detection, perpendicularity checks, orthogonal projections, and bisector generation, primarily working with line-object and point-based data structures. Use cases include solving geometric problems in computer graphics, computational geometry, or spatial analysis tasks.",
      "description_length": 534,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rectangle",
      "description": "The module offers geometric operations for manipulating rectangles, including transformations like scaling, translation, and reflection, as well as queries for point containment, intersection checks, and calculations of area, perimeter, and centroids. It works with a private data type representing rectangles via a corner point, width, and height, enabling precise spatial analysis. Use cases include collision detection, bounding box computations, and generating random points within defined regions.",
      "description_length": 502,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Point",
      "description": "Provides efficient key-based access and sequence-based updates for 2D point data through hash table operations. Supports polymorphic key-value pairs and tuple sequences, enabling dynamic data manipulation. Operations include insertion, deletion, lookup, iteration, and conversion between tables and sequences. Can manage point configurations, transform coordinate sets, or update point collections in real-time applications.",
      "description_length": 424,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vector",
      "description": "The module offers arithmetic operations, geometric transformations, and measurement functions for 2D vectors, leveraging linear algebra and projection techniques. It works with a private vector data structure, enabling tasks like direction calculations and magnitude analysis. Specific use cases include physics simulations, computer graphics, and spatial data processing, with a `print` function supporting debugging through vector serialization.",
      "description_length": 447,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Circle",
      "description": "The module provides geometric operations like transforming circles (translate, rotate, reflect), querying properties (center, radius, area), and calculating intersections with points, lines, and other circles. It works with points and circles to support tasks such as spatial analysis, computational geometry, and collision detection. Additional features include generating random points within circles and computing bounding circles, useful for simulations, graphics, and probabilistic modeling.",
      "description_length": 496,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curve",
      "description": "Combines quadratic, cubic, and B-spline curve representations, each using distinct point and parameter structures to model smooth paths. Supports constructing curves from point lists, extracting key points, evaluating positions at parameters, and generating sequences of sampled points for visualization. Quadratic curves use three points, cubic curves use four points, and B-splines use control points with knot sequences. Examples include generating a smooth path from a list of control points or calculating intermediate positions along a cubic curve at specific intervals.",
      "description_length": 576,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polyhedron",
      "description": "Creates and manipulates geometric spaces defined by linear constraints, supporting operations like checking emptiness, finiteness, and point inclusion. Works with constraint lists and points, enabling transformations such as translation and intersection. Converts between convex polygons and polyhedra, and simplifies constraint sets by removing redundancies.",
      "description_length": 359,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Math",
      "description": "Calculates sums using custom mapping functions for integers and floats, and solves mathematical expressions returning lists of float results. It operates on integers, floats, and a custom distance type representing floating-point measurements. Used for numerical integration and geometric conversions requiring precise control over summation and trigonometric calculations.",
      "description_length": 373,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Constraint",
      "description": "Provides operations to manipulate linear constraints, including negation, translation, and checking containment of points. Works with line equations and compound constraints representing half-spaces. Used to determine if a point lies within a defined region or if two constraints overlap.",
      "description_length": 288,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Polynom",
      "description": "Provides operations to construct, manipulate, and evaluate polynomials. Works with a list of floats representing coefficients and supports addition, differentiation, and evaluation at specific points. Used to compute polynomial values and derivatives for mathematical modeling or numerical analysis.",
      "description_length": 299,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Triangle",
      "description": "The module offers geometric operations such as affine transformations, scaling, rotation, and calculation of properties like area, perimeter, and centroids, along with type checks for triangle classifications. It works with triangular shapes represented as tuples of three points, enabling analysis of intersections, angles, and random point generation within triangles. These capabilities are applicable in computational geometry tasks, simulations, or graphics applications requiring precise spatial manipulations.",
      "description_length": 516,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Segment",
      "description": "manages key-value storage and retrieval with efficient bulk operations, supporting dynamic updates and sequential access through polymorphic tables. It enables insertion, deletion, and lookup of elements, as well as conversion of tables to iterable sequences of tuples. Users can initialize structures from data streams or modify them in real time while preserving access to stored values. Examples include building lookup tables from external data or maintaining state in interactive applications.",
      "description_length": 498,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polygon",
      "description": "Calculates and manipulates regular polygons using center and reference points, offering perimeter, area, and point inclusion computations. Supports affine transformations, randomization, and geometric checks like square detection. It works with point-based structures to generate shapes, adjust positions, and validate geometric properties. Examples include creating a hexagon, moving it, and checking if a point is inside.",
      "description_length": 423,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common",
      "description": "Provides operations for manipulating lists, including retrieving the last element, prepending elements, splitting and concatenating sorted lists using a custom comparator, and printing list contents with a specified separator. Supports lists of any type and includes formatting capabilities. Enables ordered data processing, incremental list construction, and customizable output formatting. For example, it can combine multiple sorted lists into one or generate a comma-separated string from a list of integers.",
      "description_length": 512,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Affine",
      "description": "Provides affine transformation operations including identity, translation, scaling, and rotation, with both constructor and operator forms. Works with a transformation type representing 2D linear transformations and translations. Applies transformations to points and distances, and computes determinant for transformation properties.",
      "description_length": 334,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ellipse",
      "description": "Creates ellipses from two foci and a radius, retrieves focal points, center, and axis lengths. Supports rotation around a point using radians or degrees, translation, and scaling along axes. Determines if a point lies inside the ellipse and calculates its area. Works with point coordinates and ellipse configurations.",
      "description_length": 318,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 36,
    "meaningful_modules": 25,
    "filtered_empty_modules": 11,
    "retention_rate": 0.6944444444444444
  },
  "statistics": {
    "max_description_length": 576,
    "min_description_length": 288,
    "avg_description_length": 418.52,
    "embedding_file_size_mb": 0.09132862091064453
  }
}