{
  "package": "geoml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:10:42.958638",
  "modules": [
    {
      "module_path": "Polygon.Convex.Regular",
      "library": "geoml",
      "description": "This module creates and manipulates regular polygons using a center point, a reference point, and the number of edges. It supports geometric operations such as translation, transformation, perimeter and area calculation, and point containment checks. Concrete use cases include generating randomized polygons, converting to generic polygon types, and verifying if a regular polygon is a square.",
      "description_length": 394,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Polygon.Convex",
      "library": "geoml",
      "description": "This module handles convex polygon construction and analysis using point lists, with operations for convex hull generation and edge folding. It supports geometric computations like shape approximation and spatial analysis, while its child module specializes in regular polygons using center and reference points. Main data types include point lists and polygon structures, with operations for translation, perimeter and area calculation, and containment checks. Examples include generating convex hulls from scattered points, analyzing polygon edges, creating regular polygons, and verifying square shapes.",
      "description_length": 606,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curve.Cubic",
      "library": "geoml",
      "description": "This module represents cubic B\u00e9zier curves defined by four control points. It provides operations to construct curves, retrieve start and end points, evaluate the curve at a parameter, and sample points along the curve. It works with lists of `Point.t` values to define curves and generate interpolated points.",
      "description_length": 310,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Segment.Tbl",
      "library": "geoml",
      "description": "This module provides imperative hash table operations for key-value storage using segment-based keys, supporting efficient insertion, deletion, bulk updates from sequences, and in-place filtering. It works with hash tables that map `Segment.t` keys to arbitrary values, offering sequence-driven construction and modification via `add_seq`, `replace_seq`, and `of_seq`. Typical use cases include aggregating segment-centric data from streams, dynamic table population from iterable sources, or optimizing batch operations on segment-keyed entries.",
      "description_length": 546,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curve.BSpline",
      "library": "geoml",
      "description": "This module implements B-spline curves with explicit control points and knot vectors. It supports creating splines from control points and knots, evaluating points along the curve, and retrieving start and end points. Use it to generate smooth curves for geometric modeling or animation paths with precise control over shape and continuity.",
      "description_length": 340,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common.List",
      "library": "geoml",
      "description": "This module extends list operations with specific utilities for list manipulation and formatting. It provides functions to retrieve the last element, append to the end, split and concatenate sorted sublists, and print lists with custom separators. These operations are designed for working with standard lists in scenarios requiring precise control over list structure and output formatting.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Point.Tbl",
      "library": "geoml",
      "description": "This module implements a hash table specialized for 2D point keys, providing imperative operations to insert, remove, and query key-value pairs, along with bulk transformations and statistical aggregations over the data. It manages associations between `Point.t` keys and arbitrary values, supporting efficient iteration and batch processing through sequence-based construction and modification. Typical applications include spatial data analysis, where point coordinates serve as identifiers, and bulk operations are used to process large datasets or compute summary metrics.",
      "description_length": 576,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curve.Quadratic",
      "library": "geoml",
      "description": "This module represents quadratic B\u00e9zier curves defined by three points: start, control, and end. It provides operations to construct curves, evaluate points along them using the B\u00e9zier equation, and generate uniformly distributed points on a curve. It is used to model smooth curves in vector graphics or path animations.",
      "description_length": 321,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rectangle",
      "library": "geoml",
      "description": "This module supports creating and modifying axis-aligned rectangles through transformations like scaling, translation, and reflection, along with operations to compute intersections with lines and other rectangles. It works with geometric data types such as rectangles defined by bottom-left corners and dimensions, points, and axes, enabling tasks like collision detection, spatial analysis, and centroid calculation for applications in physics simulations or layout design.",
      "description_length": 475,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polygon",
      "library": "geoml",
      "description": "This module represents polygons as point lists and provides geometric operations for computing area, perimeter, and intersections with lines or other polygons. It supports transformations, projections, and advanced functions like triangulation and polygon clipping via the Weiler-Atherton algorithm, enabling tasks such as collision detection and 2D rendering. The convex submodule specializes in convex polygon construction, convex hull generation, and edge analysis, while its child module focuses on regular polygons using center and reference points. Examples include generating convex hulls from point clouds, verifying regular polygon shapes, and performing polygon clipping for complex 2D layouts.",
      "description_length": 704,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Constraint",
      "library": "geoml",
      "description": "This module represents half-spaces defined by linear equations and comparison operators, supporting operations like containment checks, intersection tests, and translation. It works with lines, points, and comparison types such as less than or equal. Concrete use cases include geometric region checks and constraint system manipulations in 2D space.",
      "description_length": 350,
      "index": 10,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Polyhedron",
      "library": "geoml",
      "description": "This module represents polyhedra as collections of linear constraints defining half-planes, with operations to construct, transform, and analyze them. It supports checking emptiness, boundedness, and containment of points, as well as translation, intersection, and redundancy removal. Concrete use cases include geometric modeling, constraint-based reasoning, and converting between polyhedra and convex polygons.",
      "description_length": 413,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Segment",
      "library": "geoml",
      "description": "This module represents segments as pairs of points and provides geometric operations to create, transform, and analyze them, including calculating size, center, projections, intersections, and applying affine transformations. It supports use cases like collision detection and geometric modeling, while its child module extends functionality with imperative hash tables mapping segments to arbitrary values. The child module enables efficient insertion, deletion, and sequence-driven updates using segment keys, with operations like `add_seq`, `replace_seq`, and `of_seq` for handling bulk data from streams or iterable sources. Together, they form a system for both low-level segment manipulation and high-level data aggregation keyed on geometric segments.",
      "description_length": 758,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common",
      "library": "geoml",
      "description": "This module enhances list handling with utilities for structural manipulation and formatted output. It introduces operations to retrieve the last element, append to a list, split or merge sorted sublists, and print lists using custom separators. These functions enable precise control over list data structures in scenarios requiring specific formatting or transformation. For example, you can merge two sorted sublists into a single sorted list or print a list of strings separated by commas.",
      "description_length": 493,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curve",
      "library": "geoml",
      "description": "This module provides tools for working with B\u00e9zier and B-spline curves, enabling precise definition and evaluation of smooth curves using control points and knot vectors. It supports cubic and quadratic B\u00e9zier curves, as well as B-spline curves, with operations to evaluate points at parameters, generate interpolated points, and retrieve curve endpoints. You can construct a cubic B\u00e9zier curve from four points and sample its trajectory, create a B-spline with custom knot spacing for animation paths, or define a quadratic curve for vector graphics with start, control, and end points.",
      "description_length": 587,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vector",
      "library": "geoml",
      "description": "This module provides operations for 2D vector arithmetic, geometric transformations, and spatial analysis, including addition, scalar multiplication, rotation, normalization, and projection. It works with a `t` type representing vectors via `dx` and `dy` components, supporting computations like magnitude, angle calculation, and reflection across vectors. These tools are suited for applications in physics simulations, computer graphics, and game development where planar vector manipulations are required.",
      "description_length": 508,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ellipse",
      "library": "geoml",
      "description": "This module defines operations for creating and transforming ellipses using two focal points and radii. It supports geometric manipulations such as rotation (in radians or degrees), translation, and axis-specific scaling, along with computing the center, area, and point containment. Concrete use cases include graphical rendering, collision detection in physics simulations, and geometric analysis in CAD applications.",
      "description_length": 419,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Circle",
      "library": "geoml",
      "description": "This module provides geometric transformations (translation, rotation, reflection), intersection checks with points, lines, and circles, and computational geometry algorithms like minimal bounding circle construction via Emo Welzl's method. It operates on `Circle.t` and `Point.t` types, enabling tasks such as generating random points within circular regions, calculating triangle-related circles (circumscribed/inscribed), and spatial analysis for enclosing regions or shape overlap detection.",
      "description_length": 495,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polynom",
      "library": "geoml",
      "description": "This module represents and manipulates polynomials using a list of coefficients. It supports constructing polynomials from coefficient lists, evaluating them at specific values, adding two polynomials, computing derivatives, and printing their symbolic form. Concrete use cases include numerical analysis tasks such as root finding, curve fitting, and calculus operations on polynomial functions.",
      "description_length": 396,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Line",
      "library": "geoml",
      "description": "This library provides algebraic and geometric operations on linear equations represented in general (ax + by + c = 0) and explicit forms (x = a, y = ax + b), alongside point coordinates. It supports transformations like scaling and translation, checks for parallelism or perpendicularity, computes intersections and bisectors, and projects points orthogonally onto lines using the `Line.t` and `Point.t` types. These capabilities make it suitable for computational geometry tasks in fields like computer graphics, physics simulations, or spatial analysis.",
      "description_length": 555,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Math",
      "library": "geoml",
      "description": "This module performs numerical calculations including summation over integer ranges, solving quadratic equations, and converting degrees to radians. It operates on integers, floats, and functions mapping integers to numeric values. Concrete uses include computing series totals, geometric measurements, and angular conversions.",
      "description_length": 327,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Point",
      "library": "geoml",
      "description": "This module provides a comprehensive toolkit for manipulating 2D points, supporting arithmetic operations like centering and distance calculations, transformations such as scaling and rotation, and geometric functions including determinant computation. It includes a specialized hash table for managing key-value associations with `Point.t` keys, enabling efficient insertion, lookup, and bulk transformations over spatial datasets. The `x` and `y` float fields of each point facilitate precise computations, while pretty-printing aids in debugging and visualization. Example uses include physics simulations, data visualization, and spatial analysis with large coordinate-based datasets.",
      "description_length": 688,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Affine",
      "library": "geoml",
      "description": "This module represents 2D affine transformations using a record with six float fields encoding translation, scaling, and rotation. It provides operations to construct and combine transformations such as identity, translation, scaling, and rotation, along with functions to apply them to points or distances. Concrete use cases include 2D graphics rendering, geometric transformations in UI layouts, and animation systems where precise coordinate manipulation is required.",
      "description_length": 471,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 23,
    "filtered_empty_modules": 2,
    "retention_rate": 0.92
  },
  "statistics": {
    "max_description_length": 758,
    "min_description_length": 310,
    "avg_description_length": 483.60869565217394,
    "embedding_file_size_mb": 0.08398628234863281
  }
}