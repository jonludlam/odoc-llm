{
  "package": "sihl-core",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-06-18T16:34:42.074839",
  "modules": [
    {
      "module_path": "Sihl_core.Schedule.Fields.Direct",
      "description": "Provides operations to iterate over, fold, and check conditions on a structured data type containing fields for labels, scheduled times, and asynchronous functions. Processes a custom type with mutable fields and supports transforming and collecting values while handling asynchronous side effects. Used to enforce constraints, generate lists, and apply uniform updates to field values in a concurrent context.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Container.Lifecycle",
      "description": "Provides functions to retrieve a name and construct a lifecycle object with start and stop actions that return Lwt promises. Operates on a custom type `t` and functions for initializing and terminating processes. Used to manage long-running services with defined initialization and cleanup phases.",
      "description_length": 297,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container.Service",
      "description": "Handles the initialization, execution, and termination of a service instance using a lifecycle record. Operates on the `Lifecycle.t` type, which encapsulates state transitions and event handlers. Used to manage long-running processes with defined start, stop, and restart behaviors.",
      "description_length": 282,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container.Map",
      "description": "Provides operations for inserting, looking up, and removing key-value pairs, as well as iterating over entries. Works with the polymorphic type 'a t, which represents a map from keys to values of type 'a. Used to efficiently manage dynamic associations, such as translating error codes to messages or storing configuration settings.",
      "description_length": 332,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule.Fields",
      "description": "Processes structured data with labels, scheduled times, and async functions, enabling iteration, folding, and condition checks. Supports mutable field updates, value transformation, and collection with async side effects. Can enforce constraints, generate lists, and apply uniform changes across field values. Examples include scheduling tasks, validating field conditions, and aggregating async results.",
      "description_length": 404,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule.Logs",
      "description": "Provides logging operations for different severity levels, including error, warning, info, and debug, with support for formatted messages and error handling. Works with log levels, formatted strings, and result types to capture and process errors. Used to instrument applications with structured logging and handle failures by converting error results into logged messages.",
      "description_length": 373,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container",
      "description": "Manages service lifecycles, dependencies, and dynamic data through a set of interrelated functions. It supports creating and manipulating service instances with start/stop actions, tracks state transitions via lifecycle records, and provides map operations for key-value storage and retrieval. Users can define service dependencies, handle process initialization and termination, and manage configuration or error mappings. Examples include starting a service in order, restarting a failed process, or looking up a configuration value by key.",
      "description_length": 542,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.App",
      "description": "Creates and configures Sihl applications by adding services, registering pre- and post-start callbacks, and launching the app with custom commands and logging. Operates on service lists and app configurations, using Lwt for asynchronous execution. Used to initialize web applications, set up middleware, and manage lifecycle events before and after service startup.",
      "description_length": 365,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Configuration",
      "description": "Provides functions to load, merge, and access configuration values from environment variables and .env files, with support for typed schemas and secret management. Works with data structures like key-value lists and typed schemas to decode configuration into OCaml types. Used to retrieve database connections, API keys, and environment-specific settings like hostnames during service initialization.",
      "description_length": 400,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Command",
      "description": "Registers CLI commands with names, help text, descriptions, and handler functions that process argument lists. Operates on command records containing handler functions that return unit Lwt.t. Used to initialize and execute command-line interfaces in Sihl applications, processing arguments from Sys.argv or an explicit list.",
      "description_length": 324,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Log",
      "description": "Provides functions to retrieve log levels, determine log directories, and create Lwt-based log reporters. Works with log levels, color styles, and formatter-based output configurations. Enables structured logging with custom headers, source tracking, and CLI or file-based reporting.",
      "description_length": 283,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Time",
      "description": "Converts duration values to and from JSON, with error handling, and provides pretty-printing and comparison functions. Handles Ptime.t and duration types, enabling serialization, date manipulation, and string formatting. Supports parsing and generating date strings, and converting durations to time spans for precise time calculations.",
      "description_length": 336,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Random",
      "description": "Generates random character lists from a given set, produces random byte sequences, and encodes them as base64 strings. It manages a lifecycle for random number generation and registers a service for controlled operation. Used to create secure tokens, simulate random data, and handle entropy sources in distributed systems.",
      "description_length": 323,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule",
      "description": "manages structured data with scheduled execution, allowing for iteration, transformation, and constraint enforcement on mutable fields. It supports async operations and integrates logging for error tracking, severity-based message formatting, and result handling. Tasks like scheduling periodic updates, validating data integrity, and capturing error states are directly achievable. It enables coordinated execution and monitoring of processes with detailed diagnostic feedback.",
      "description_length": 478,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Cleaner",
      "description": "Manages asynchronous cleanup tasks through a registry of functions that perform resource release or state reset. It operates with lists of Lwt-enabled functions and service lifecycle events. Used to coordinate shutdown procedures and ensure proper resource management in concurrent applications.",
      "description_length": 295,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "sihl-core",
      "description": "Provides functions for routing HTTP requests, parsing query parameters, and generating JSON responses. Works with request objects, response builders, and associative lists for query data. Handles form submissions and API endpoint routing in web applications.",
      "description_length": 258,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core",
      "description": "manages service lifecycles, application configuration, and asynchronous operations through integrated data structures and event-driven workflows. It handles service dependencies, configuration loading, CLI command registration, logging, duration parsing, random data generation, task scheduling, and cleanup routines, all using Lwt for concurrency. Users can start and stop services, load environment variables, register commands, set log levels, generate tokens, schedule tasks, and manage resource release. Examples include initializing a web app with middleware, parsing a duration for a timer, generating a secure API key, and ensuring proper shutdown of background processes.",
      "description_length": 680,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 680,
    "min_description_length": 258,
    "avg_description_length": 375.4117647058824,
    "embedding_file_size_mb": 0.062216758728027344
  }
}