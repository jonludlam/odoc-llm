{
  "package": "sihl-core",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 15,
  "creation_timestamp": "2025-08-14T23:27:49.068699",
  "modules": [
    {
      "module_path": "Sihl_core.Schedule.Fields.Direct",
      "library": "sihl-core",
      "description": "This module provides direct access to schedule fields like label, scheduled time, and execution function through operations like iteration, folding, mapping, and validation. It works with `Sihl_core.Schedule.t` values, allowing manipulation of individual field components with specific callbacks. Use cases include transforming or inspecting scheduled tasks, validating field values, or mapping over fields to update or extract data.",
      "description_length": 433,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Container.Lifecycle",
      "library": "sihl-core",
      "description": "This module defines service lifecycle operations for creating, naming, and managing services with start and stop functions that respect dependency order. It works with lifecycle objects containing asynchronous start and stop actions, along with dependency resolution logic. Concrete use cases include registering database connections, HTTP servers, or background workers that must start and shut down in a specific sequence.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container.Service",
      "library": "sihl-core",
      "description": "This module defines and manages individual services within a container, handling their lifecycle operations like start and configuration. It works with service definitions that include commands, configuration, and lifecycle callbacks, supporting conditional server behavior. Concrete use cases include creating and starting services with dependency resolution, retrieving service-specific configurations, and defining executable commands for service management.",
      "description_length": 461,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule.Fields",
      "library": "sihl-core",
      "description": "This module provides direct access to schedule fields like label, scheduled time, and execution function through operations like iteration, folding, mapping, and validation. It works with `Sihl_core.Schedule.t` values, allowing manipulation of individual field components with specific callbacks. Use cases include transforming or inspecting scheduled tasks, validating field values, or mapping over fields to update or extract data.",
      "description_length": 433,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Schedule.Logs",
      "library": "sihl-core",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all of which format and emit logs using the `Logs` library. It includes specialized functions like `on_error` and `on_error_msg` to handle and log `result` values that return `Error`, allowing custom formatting and error recovery. These functions are used to log structured errors with tags, headers, and custom printers, particularly for debugging and monitoring application behavior.",
      "description_length": 518,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Cleaner",
      "library": "sihl-core",
      "description": "This module manages a list of asynchronous cleanup tasks that can be registered and executed collectively. It provides functions to register individual or multiple cleanup functions, trigger all registered tasks, and control the lifecycle of the cleanup process. Concrete use cases include gracefully shutting down services, closing database connections, or releasing resources during application termination.",
      "description_length": 409,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container",
      "library": "sihl-core",
      "description": "This module manages service lifecycles and dependencies, providing functions to start and stop services in the correct order. It works with service definitions and lifecycle objects that include asynchronous start and stop actions. Concrete use cases include coordinating startup and shutdown of database connections, HTTP servers, and background workers that depend on each other.",
      "description_length": 381,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Configuration",
      "library": "sihl-core",
      "description": "This module manages service configurations by validating and decoding key-value data from environment variables, `.env` files, or direct input. It supports reading typed values (strings, integers, booleans) with memoization, handling environment-specific settings, and enforcing required configuration schemas at startup. Concrete use cases include loading database connection strings, feature flags, and secrets like API keys or JWT signing tokens.",
      "description_length": 449,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.App",
      "library": "sihl-core",
      "description": "This module provides functions to construct and configure Sihl applications by adding services and defining lifecycle callbacks. It works with the abstract type `t` representing an application, lists of services, and command-line interfaces. Concrete use cases include setting up service dependencies, registering pre-start initialization logic, and defining post-stop cleanup actions.",
      "description_length": 385,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Time",
      "library": "sihl-core",
      "description": "This module defines a custom duration type with fixed time intervals and provides conversions to and from JSON using Yojson. It supports operations like converting durations to Ptime spans, calculating future dates, and serializing Ptime values to ISO 8601 date strings. Concrete use cases include scheduling tasks, formatting timestamps for APIs, and persisting time-based configurations.",
      "description_length": 389,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Command",
      "library": "sihl-core",
      "description": "This module defines and manages CLI commands for Sihl applications. It allows services to register commands with a name, description, optional help text, and an asynchronous function that processes arguments. Commands are executed via the `run` function, which dispatches command-line arguments to the appropriate handler, enabling dynamic command sets based on active services.",
      "description_length": 378,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Random",
      "library": "sihl-core",
      "description": "Generates random characters, bytes, and base64-encoded strings of specified lengths. Uses Lwt for asynchronous initialization and cleanup through start and stop lifecycle functions. Integrates with a service container via register to provide randomness as a managed service.",
      "description_length": 274,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Schedule",
      "library": "sihl-core",
      "description": "This module enables defining and managing asynchronous tasks with recurring intervals, controlling their execution lifecycle through start/stop operations, and associating services with schedules. It operates on time-based configurations (`scheduled_time`), labeled tasks (`t`), and service registrations to coordinate periodic background processing, system monitoring with log tracing, and Lwt-driven scheduled workflows. Key use cases include cron-like job execution, resource cleanup routines, and timed event triggering in concurrent systems.",
      "description_length": 546,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Log",
      "library": "sihl-core",
      "description": "This module configures and manages logging behavior, providing functions to create and combine log reporters for output to files, CLI, or custom formats. It supports log level retrieval, directory path resolution, and styled output for different log sources and severity levels. Concrete use cases include setting up structured logging to disk, formatting colored terminal output, and merging multiple logging destinations.",
      "description_length": 423,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core",
      "library": "sihl-core",
      "description": "This module provides core functionalities for building and managing Sihl applications, including service lifecycle management, configuration handling, CLI command execution, logging, time manipulation, random generation, task scheduling, and cleanup operations. It works with services, configurations, CLI arguments, log reporters, time durations, and scheduled tasks. Concrete use cases include coordinating service dependencies, loading environment-specific settings, running scheduled background jobs, and managing application startup and shutdown sequences.",
      "description_length": 561,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 15,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9375
  },
  "statistics": {
    "max_description_length": 561,
    "min_description_length": 274,
    "avg_description_length": 430.93333333333334,
    "embedding_file_size_mb": 0.21776580810546875
  }
}