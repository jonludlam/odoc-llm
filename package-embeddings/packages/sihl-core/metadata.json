{
  "package": "sihl-core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:09:30.959006",
  "modules": [
    {
      "module_path": "Sihl_core.Container.Service.Sig",
      "library": "sihl-core",
      "description": "This module defines the interface for services managed by the container, including operations to start, stop, and retrieve service instances. It works with service definitions and lifecycle states, ensuring services are initialized and shut down correctly. Concrete use cases include implementing database connections, HTTP servers, or background job processors that need controlled startup and teardown.",
      "description_length": 404,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule.Fields.Direct",
      "library": "sihl-core",
      "description": "This module provides direct access to fields of a schedule type, enabling iteration, folding, filtering, and transformation over specific components like label, scheduled time, and execution function. It works with the `Sihl_core.Schedule.t` type, handling operations that involve reading or setting fields with appropriate permissions. Concrete use cases include modifying scheduled task properties, validating field values, and extracting or transforming execution logic within asynchronous workflows.",
      "description_length": 503,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Schedule.Fields",
      "library": "sihl-core",
      "description": "This module organizes and operates on schedule records by exposing structured access to their fields\u2014label, scheduled time, and execution function. It enables creation, transformation, and querying of schedule data with permission-aware access, supporting operations like mapping over field values, folding into aggregated results, and filtering based on field properties. The child module extends this by providing fine-grained iteration, filtering, and direct manipulation of individual schedule components, such as updating execution logic or validating time constraints. Together, they allow building, inspecting, and modifying schedules in contexts like task scheduling pipelines or dynamic workflow systems.",
      "description_length": 713,
      "index": 2,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Sihl_core.Schedule.Logs",
      "library": "sihl-core",
      "description": "This module provides functions for logging messages at various severity levels, including debug, info, warning, error, and application-specific logs. It supports logging formatted messages and handling result values by logging errors when they occur, using custom printers and tags. Concrete use cases include tracking application events, debugging issues in scheduled tasks, and ensuring error conditions are properly recorded with contextual information.",
      "description_length": 456,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container.Lifecycle",
      "library": "sihl-core",
      "description": "This module defines the lifecycle of services within a container, providing operations to create and manage service lifecycles with start and stop functions. It works with service definitions that include dependencies, names, and asynchronous start/stop actions using `Lwt.t`. Concrete use cases include defining services that start a database connection, initialize logging, or set up HTTP servers, ensuring they start and stop in the correct order.",
      "description_length": 450,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Container.Service",
      "library": "sihl-core",
      "description": "This module orchestrates the lifecycle of individual services within a container, managing their configuration, startup, and shutdown through defined commands and callbacks. It provides core data types like service definitions and lifecycle states, enabling operations to register, start, and retrieve services such as databases, HTTP servers, or background processors. The child module defines the service interface, specifying start, stop, and instance retrieval operations that ensure correct initialization and teardown. Together, they support concrete use cases like registering a database with initialization commands or launching an on-demand HTTP listener.",
      "description_length": 664,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Log",
      "library": "sihl-core",
      "description": "This module configures and manages logging behavior, providing functions to set up log reporters, format log output, and define log levels. It works with `Logs.level` to control verbosity, `Logs.reporter` to direct output, and formatting functions to customize display styles for different log sources and severity levels. Concrete use cases include setting up file-based logging with `lwt_file_reporter`, styling log messages with predefined color codes like `app_style` or `err_style`, and combining multiple reporters with `combine`.",
      "description_length": 536,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Random",
      "library": "sihl-core",
      "description": "Generates random characters, bytes, and base64-encoded strings of specified lengths. Uses Lwt for asynchronous initialization and cleanup through start and stop functions. Integrates into a service lifecycle for dependency management in applications requiring secure random data generation.",
      "description_length": 290,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Time",
      "library": "sihl-core",
      "description": "This module defines a set of fixed time durations like `OneSecond` and `OneDay`, and provides conversions between these durations and JSON using Yojson. It supports operations to format, compare, and serialize durations, as well as convert them to and from `Ptime.span` values. Additionally, it includes utilities to manipulate and serialize timestamps with functions like `date_from_now` and `ptime_to_yojson`.",
      "description_length": 411,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Schedule",
      "library": "sihl-core",
      "description": "This module enables defining and managing periodic tasks with configurable intervals, bundling task functions and schedules into a unified `t` type. It supports asynchronous control via Lwt-based operations to start, stop, and register tasks, while structured access to schedule fields allows creation, transformation, and querying of schedules with permission-aware logic. Users can dynamically modify execution functions, validate time constraints, and log task events using severity-level logging functions. Example uses include background job pipelines, timed data sync, and automated system maintenance with detailed execution logging.",
      "description_length": 640,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Command",
      "library": "sihl-core",
      "description": "This module defines and manages CLI commands for Sihl applications. It allows services to register commands with a name, description, optional help text, and an asynchronous function that processes arguments. Commands are executed via `run`, which matches command-line input to registered commands and invokes their functions.",
      "description_length": 326,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.App",
      "library": "sihl-core",
      "description": "This module provides functions to build and configure Sihl applications by adding services, registering lifecycle callbacks, and running the application. It operates on the `t` type representing an application, allowing composition with services and command-line interfaces. Concrete use cases include setting up service dependencies, defining pre-start initialization logic, and launching the app with custom commands and logging.",
      "description_length": 431,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core.Container",
      "library": "sihl-core",
      "description": "This module manages service lifecycles and dependencies, orchestrating the startup and shutdown of interdependent components such as databases, caches, and background workers. It provides data types for service definitions and lifecycle states, along with operations to register, start, and stop services in dependency order, using asynchronous actions with `Lwt.t`. Child modules define service interfaces, lifecycle management functions, and configuration callbacks, enabling concrete use cases like initializing a database connection or launching an HTTP server with proper teardown. Together, they allow structured composition of complex application components through declarative dependencies and lifecycle hooks.",
      "description_length": 718,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Configuration",
      "library": "sihl-core",
      "description": "This module manages service configurations by providing functions to store, read, validate, and decode configuration data from various sources such as environment variables and `.env` files. It supports operations like reading typed values (strings, integers, booleans), loading environment files, determining deployment environments, and validating configurations against schemas. Concrete use cases include loading database credentials, setting up external service keys, and ensuring required configuration values are present at service startup.",
      "description_length": 547,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_core.Cleaner",
      "library": "sihl-core",
      "description": "This module manages a list of asynchronous cleanup tasks that are executed on demand or during lifecycle events. It works with Lwt promises and maintains a registry of cleanup functions that can be triggered globally. Concrete use cases include resource deallocation, closing database connections, or shutting down background services gracefully.",
      "description_length": 346,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_core",
      "library": "sihl-core",
      "description": "This module orchestrates application configuration, logging, and lifecycle management, enabling structured composition of services with dependency handling, asynchronous initialization, and controlled shutdown. Key data types include `t` for applications and services, `Logs.level` and `Logs.reporter` for logging control, duration types for time manipulation, and configurations for typed environment data. Operations span setting up file-based logging with custom formatting, generating secure random values, scheduling periodic tasks, registering CLI commands, and managing service lifecycles with cleanup hooks. Examples include launching an HTTP server with configured timeouts, running background jobs with interval scheduling, and loading validated environment variables for database connections.",
      "description_length": 803,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 16,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9411764705882353
  },
  "statistics": {
    "max_description_length": 803,
    "min_description_length": 290,
    "avg_description_length": 514.875,
    "embedding_file_size_mb": 0.05855083465576172
  }
}