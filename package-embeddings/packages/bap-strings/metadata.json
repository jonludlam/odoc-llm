{
  "package": "bap-strings",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-14T23:24:25.129052",
  "modules": [
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Alphanum.Caseless",
      "library": "bap-strings",
      "description": "Provides case-insensitive mapping of ASCII alphanumeric characters to a contiguous integer range. Works with individual `char` values, converting letters (both upper and lower case) and digits into a unified index space. Useful for hash functions, character classification, and encoding schemes where case distinctions are irrelevant.",
      "description_length": 334,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Alpha.Caseless",
      "library": "bap-strings",
      "description": "Provides case-insensitive mapping and indexing for ASCII alphabetic characters. Works with individual `char` values, returning their position in a flattened 26-letter alphabet regardless of case. Useful for tasks like character frequency analysis, case-insensitive symbol indexing, or normalizing letter-based data in string processing pipelines.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Alpha",
      "library": "bap-strings",
      "description": "Maps ASCII alphabetic characters to a 26-letter case-insensitive alphabet, providing direct indexing via `index` and total symbol count via `length`. Works with individual `char` values to enable case-insensitive character analysis and normalization. Useful for frequency counting, symbol indexing, and string data processing where case distinctions are irrelevant.",
      "description_length": 365,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Printable",
      "library": "bap-strings",
      "description": "Includes all standard ASCII characters that are printable, such as letters, digits, punctuation, and space. Provides `length` to return the total number of printable characters and `index` to map a character to its position in the set. Useful for tasks like encoding, character classification, and lookup in string manipulation workflows.",
      "description_length": 338,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_strings_index.Persistent.Make",
      "library": "bap-strings",
      "description": "This module implements a persistent index that maps strings to unique keys and vice versa. It supports operations to register new strings, retrieve associated keys or data, and check registration status. It is useful for scenarios requiring bidirectional mapping between identifiers and strings, such as symbol tables or interned string management.",
      "description_length": 348,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Digits",
      "library": "bap-strings",
      "description": "Handles ASCII digit characters by providing the total count of digits and mapping each digit character to its corresponding index. Works directly with individual `char` values representing digits. Useful for tasks like decoding numeric strings or validating digit characters in parsing routines.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii.Alphanum",
      "library": "bap-strings",
      "description": "This module provides case-insensitive mapping of ASCII alphanumeric characters to a contiguous integer range, with functions to determine the size of the mapped set and to convert characters into their corresponding index. It operates on individual `char` values, treating letters (both upper and lower case) and digits as equivalent for indexing purposes. It is useful for implementing hash functions, character classification, and encoding schemes where case distinctions should be ignored.",
      "description_length": 492,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Make",
      "library": "bap-strings",
      "description": "This module implements a Scrabble-style unscrambler that builds valid words from a given set of characters, using a trie-based dictionary for efficient lookups. It works with strings as input character sets and dictionary entries, and returns sequences of matching words. Concrete use cases include generating all valid dictionary words from a rack of Scrabble tiles or solving word puzzles like anagrams.",
      "description_length": 405,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_strings.Std",
      "library": "bap-strings",
      "description": "Handles string manipulation and analysis with functions for slicing, trimming, and pattern matching. Works with basic string types and provides operations like `split`, `strip`, and `is_prefix`. Useful for parsing text data or processing command-line input.",
      "description_length": 257,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler.Ascii",
      "library": "bap-strings",
      "description": "This module defines operations for mapping and indexing ASCII characters using specific character subsets like letters, digits, and printable characters. It provides direct conversion of individual `char` values to integer indices and reports the total size of each character set. These features support tasks such as character classification, encoding schemes, and string analysis where consistent character mapping is required.",
      "description_length": 429,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_strings_index.Persistent",
      "library": "bap-strings",
      "description": "This module implements a bidirectional mapping between strings and unique keys, allowing efficient registration of new strings, lookup of keys by string, and retrieval of strings by key. It maintains persistent state across uses, making it suitable for managing interned strings or symbol tables where consistency and fast lookups are critical. Use cases include compiler backends for caching identifiers or tracking unique string values in analysis pipelines.",
      "description_length": 460,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_strings",
      "library": "bap-strings",
      "description": "Handles string manipulation and analysis with functions for slicing, trimming, and pattern matching. Works with basic string types and provides operations like `split`, `strip`, and `is_prefix`. Useful for parsing text data or processing command-line input.",
      "description_length": 257,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_unscrambler",
      "library": "bap-strings",
      "description": "This module implements a Scrabble-style unscrambler using a trie-based dictionary for efficient word lookup. It takes a set of characters as input and generates valid words that can be formed from those characters, supporting use cases like Scrabble tile arrangement and anagram solving. The module works directly with strings and relies on a dictionary structure to validate word combinations.",
      "description_length": 394,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_detector",
      "library": "bap-strings",
      "description": "This module implements a probabilistic detector for sequences of instructions that process textual data, using a maximum a posteriori estimator to distinguish between random and structured character access. It works with character sets and sequences of observations, where each observation pairs instruction data with a character accessed. It is used to identify contiguous code regions handling text, such as during binary analysis when reconstructing strings from low-level code traces.",
      "description_length": 488,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_scanner",
      "library": "bap-strings",
      "description": "This module scans sequences of characters from a custom read function, breaking them into substrings based on a user-defined stopping condition. It processes input by iterating over character offsets, collecting characters until a stop condition is met, and returning the collected substrings along with their starting offsets. It is useful for tokenizing or parsing structured text formats where direct string access is not available.",
      "description_length": 435,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_strings_index",
      "library": "bap-strings",
      "description": "This module implements a bidirectional mapping between strings and unique keys, supporting efficient registration, lookup by string, and retrieval by key. It maintains persistent state, making it ideal for compiler backends to cache identifiers or track unique string values in analysis pipelines.",
      "description_length": 297,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 16,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9411764705882353
  },
  "statistics": {
    "max_description_length": 492,
    "min_description_length": 257,
    "avg_description_length": 371.25,
    "embedding_file_size_mb": 0.2322864532470703
  }
}