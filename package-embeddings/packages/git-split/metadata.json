{
  "package": "git-split",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-07-15T23:06:31.252361",
  "modules": [
    {
      "module_path": "Git_split.Tui.List",
      "library": "git-split",
      "description": "This module supports transformations, structural modifications, and associative operations on generic OCaml lists, including indexed access, mapping with indices, and key-value pair manipulations. It handles data structures like `'a list`, associative lists (property lists), and sequences, offering functions for filtering, partitioning, sorting, merging, and stateful accumulations. Specific use cases include data processing pipelines requiring element categorization, configuration management with lookup tables, and algorithms needing ordered list combinations or stable sorting with custom comparators.",
      "description_length": 608,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Git_split.DiffSerializer",
      "library": "git-split",
      "description": "Converts a Git split diff structure into a string representation for storage or transmission. Works directly with the `Git_split.Diff.diff` type, which represents differences between file versions. Useful for persisting computed diffs to disk or sending them over a network in a version control context.",
      "description_length": 303,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Git_split.Tui",
      "library": "git-split",
      "description": "This module builds terminal interfaces for navigating and interacting with Git diffs in real time, using key events and state updates to control visibility and apply changes. It renders structured data\u2014such as files, hunks, and lines\u2014into visual diff representations using the Notty library for terminal display. Its child module enhances list and associative data manipulation, supporting indexed operations, sorting, filtering, and stateful transformations. Together, they enable interactive diff browsing, selective staging, and dynamic list-based data processing within a terminal UI.",
      "description_length": 588,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Git_split.TuiModelExample",
      "library": "git-split",
      "description": "Contains an example model instance for the TUI, representing a preconfigured state of the application's interface and underlying data. It works with the `model` type from the `Git_split.TuiModel` module, which includes UI elements and state tracking. This example is used directly by the test suite or as a demonstration of expected model structure during development.",
      "description_length": 368,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.DiffParser",
      "library": "git-split",
      "description": "Parses a Git diff string into a structured representation of file changes, including additions, deletions, and modifications. It operates on raw diff output to extract detailed line-level changes between versions of source files. Useful for analyzing version control history or implementing custom diff-based tools.",
      "description_length": 315,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.Diff",
      "library": "git-split",
      "description": "This module provides operations for parsing and manipulating Git diff hunks, including context, removed, and added lines, along with metadata handling. It supports structured representation of file changes such as path renames, binary content, and mode modifications, enabling precise tracking of text and binary file alterations. Its functionality underpins applications like diff viewers, code analysis tools, and version control systems that require accurate parsing and comparison of Git's diff data.",
      "description_length": 504,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.Zipper",
      "library": "git-split",
      "description": "This module implements a bidirectional traversal structure for navigating and modifying ordered sequences of elements. It supports operations to move forward and backward, insert, delete, or replace elements, and convert to or from lists. Use cases include text buffer editing, history navigation, or any scenario requiring efficient sequential data manipulation with positional focus.",
      "description_length": 385,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.TuiModel",
      "library": "git-split",
      "description": "This module implements navigation and manipulation logic for a three-level hierarchy of files, hunks, and lines in a git split UI. It provides movement operations like `prev`, `next`, `up`, and state transformations like `expand`, `collapse`, and `toggle_inclusion` that modify the current selection context. The module works directly with zipper-based structures to track and update the focused elements at each level.",
      "description_length": 419,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.LineZipper",
      "library": "git-split",
      "description": "This module implements a zipper structure for navigating and modifying lists of `line` values. It supports operations like moving the cursor left or right, replacing the current element, and converting to or from a list. It is used to efficiently manage a focused position within a list of lines, such as in a text editor or interactive interface.",
      "description_length": 347,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.TuiTypes",
      "library": "git-split",
      "description": "This module provides types and utilities for modeling Git diff data in terminal user interfaces, focusing on structured representations of hunks with visibility states, file paths (including renames), file modes, and content (text or binary) with associated metadata. It supports operations like pretty-printing, string conversion, and equality checks for these types, enabling efficient UI rendering and state management in git patch splitting and diff comparison workflows. Key use cases include interactive diff navigation, visual state tracking, and structured representation of file changes across versions.",
      "description_length": 612,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split",
      "library": "git-split",
      "description": "This module processes Git diff data through structured parsing, interactive navigation, and terminal rendering. It supports key data types like `diff`, `hunk`, `line`, and zipper-based structures for hierarchical traversal, enabling operations such as diff parsing, selective staging, and bidirectional editing. You can visualize and manipulate Git changes in a terminal UI, navigate through files and hunks with stateful focus, or convert diff data to and from string representations for storage or transmission.",
      "description_length": 513,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 612,
    "min_description_length": 303,
    "avg_description_length": 451.09090909090907,
    "embedding_file_size_mb": 0.040366172790527344
  }
}