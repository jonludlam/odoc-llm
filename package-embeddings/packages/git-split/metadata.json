{
  "package": "git-split",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-15T07:41:39.009183",
  "modules": [
    {
      "module_path": "Git_split.Tui.List",
      "library": "git-split",
      "description": "This module offers element access, transformation, and folding operations on generic lists, with support for indexed processing, pair-wise operations, and associative pair handling. It works with standard lists, association lists (key-value pairs), and sequences, providing functions for sorting, merging, filtering, and structural manipulation. Typical use cases include processing hierarchical data structures, implementing algorithms that require merging sorted sequences, or handling configuration-like key-value associations with optimized traversal patterns.",
      "description_length": 564,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.Zipper",
      "library": "git-split",
      "description": "This module implements a bidirectional traversal structure for navigating and modifying ordered sequences of elements. It supports operations to move forward and backward, insert, delete, or replace elements at the current position, and convert to or from lists. Use cases include editing structured data with a focus on efficient positional updates, such as text buffer manipulation or interactive list transformations.",
      "description_length": 420,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.DiffSerializer",
      "library": "git-split",
      "description": "Converts a Git_split.Diff value into a string representation for storage or transmission. Works directly with the Diff type defined in the Git_split.Diff module. Useful for persisting differences between file versions or sending them over a network.",
      "description_length": 249,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.TuiModel",
      "library": "git-split",
      "description": "This module implements navigation and manipulation logic for a three-level hierarchy of files, hunks, and lines in a git split UI. It supports operations like moving between elements (`prev`, `next`), expanding and collapsing views (`expand`, `collapse`), and toggling inclusion states of items (`toggle_inclusion`). The model handles both full and partial inclusion tracking, enabling precise user interaction with git changes at different granularities.",
      "description_length": 455,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.Diff",
      "library": "git-split",
      "description": "This module enables modeling and manipulation of Git diff hunks, file modifications, and full diffs, focusing on granular changes like line additions, deletions, and file metadata updates. It operates on structured representations of hunks (with contextual, removed, and added lines), file changes (including path renames, mode updates",
      "description_length": 335,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.DiffParser",
      "library": "git-split",
      "description": "Parses a Git diff string into a structured representation of changes, returning a result type that captures either the parsed diff or an error message. It operates on raw diff text input, converting it into a typed format suitable for analysis or transformation. This function is useful when processing version control history to identify file modifications programmatically.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.TuiModelExample",
      "library": "git-split",
      "description": "Contains an example model instance for the TUI, representing a preconfigured state of the application's UI and underlying data. It works with the `model` type from the `Git_split.TuiModel` module, which includes UI components and their interactions. This example serves as a concrete starting point for testing or demonstrating the TUI without requiring manual setup.",
      "description_length": 367,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.LineZipper",
      "library": "git-split",
      "description": "This module implements a zipper structure for navigating and modifying lists of `line` values. It supports operations like moving the cursor left or right, replacing the current element, and converting to or from a list. It is used for interactive line-based editing where efficient traversal and local modification are needed, such as in a text-based user interface for selecting or editing a sequence of lines.",
      "description_length": 412,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split.TuiTypes",
      "library": "git-split",
      "description": "This module provides types and utilities for modeling Git diff components like line contexts, hunks with visibility flags, file paths (including renames), and metadata (modes, content types). It supports operations for structured display, comparison, and state tracking of version-controlled files in terminal interfaces. These capabilities enable rendering hierarchical diff views and managing interactive states in tools visualizing Git changesets.",
      "description_length": 450,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Git_split.Tui",
      "library": "git-split",
      "description": "This module provides terminal-based interaction for Git diffs, enabling key event handling, model updates, and rendering of files, hunks, and lines using Notty. It processes Git diff data structures by translating line-by-line into visual tags (added/removed/context), validating file contents, and extracting diffs from model state. Designed for interactive navigation and staging of changes, it supports dynamic updates to diff displays while managing user input for terminal-driven workflows.",
      "description_length": 495,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Git_split",
      "library": "git-split",
      "description": "This module provides tools for parsing, manipulating, and interactively staging Git diff changes. It handles structured diff data including hunks, file modifications, and line-level changes, supporting operations like selective staging and diff visualization. Concrete use cases include building terminal interfaces for reviewing version control changes and programmatically transforming Git diffs.",
      "description_length": 398,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 564,
    "min_description_length": 249,
    "avg_description_length": 410.90909090909093,
    "embedding_file_size_mb": 0.15985393524169922
  }
}