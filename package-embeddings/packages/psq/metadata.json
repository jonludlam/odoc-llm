{
  "package": "psq",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:02.827667",
  "modules": [
    {
      "module_path": "Psq.Make",
      "library": "psq",
      "description": "The module provides functional operations to manage key-priority mappings, supporting insertions, deletions, priority updates, and efficient extraction of the minimum-priority element. It uses a weight-balanced semi-heap to ensure logarithmic time complexity for key-based access and constant-time minimum retrieval, while enabling ordered traversal, priority-bounded iterations, and conversions to lists or sequences. This structure is ideal for applications requiring dual key-directed and priority-driven processing, such as dynamic resource allocation or priority-aware task scheduling systems.",
      "description_length": 598,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Psq.S",
      "library": "psq",
      "description": "This module manages key-priority bindings with unique keys, supporting O(log n) insertion, deletion, and key-based lookup, alongside O(1) access to the minimum priority and its removal in O(log n). Built on a weight-balanced semi-heap, it enables efficient queue merging and ordered traversal, ideal for scenarios like task scheduling where prioritized access and dynamic priority updates are critical. Operations include bulk updates, bounded priority folding, and conditional selection, accommodating use cases requiring both key-centric and priority-driven processing.",
      "description_length": 571,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psq.Ordered",
      "library": "psq",
      "description": "This module defines a type `t` and a `compare` function establishing a total ordering on `t`. It is used to specify key types for data structures requiring ordered keys, such as maps and priority queues. Concrete use cases include defining key types for efficient insertion, lookup, and traversal in ordered collections.",
      "description_length": 320,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psq",
      "library": "psq",
      "description": "This module implements a priority search queue that maps keys to priorities, allowing efficient insertion, lookup, and deletion by key, as well as retrieval and removal of the key with the lowest priority. It supports ordered key types and prioritizes performance with O(log n) operations for key-based access and O(1) access to the minimum priority. Built on a weight-balanced semi-heap, it enables efficient queue merging, priority-bounded iterations, and ordered traversal, making it suitable for task scheduling and dynamic resource allocation. Operations include bulk updates, conditional selection, and conversion to lists or sequences, accommodating both key-directed and priority-driven processing.",
      "description_length": 706,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 706,
    "min_description_length": 320,
    "avg_description_length": 548.75,
    "embedding_file_size_mb": 0.01493072509765625
  }
}