{
  "package": "curses",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:01:41.599796",
  "modules": [
    {
      "module_path": "Curses.Color",
      "library": "curses",
      "description": "This module defines integer constants representing standard color values for use with curses-based terminal applications. It supports operations that require color attributes, such as setting foreground or background colors when rendering text. Typical use cases include enhancing terminal UIs with colored output for better visual distinction and user feedback.",
      "description_length": 362,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.A",
      "library": "curses",
      "description": "This module provides operations for managing text appearance attributes and color pair settings in terminal displays. It handles combined attribute values for effects like bold or underline, along with integer-based color pair identifiers to control foreground/background color combinations. These capabilities are used to customize visual styling of text content rendered in terminal windows.",
      "description_length": 393,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Acs",
      "library": "curses",
      "description": "This module provides access to predefined alternate character set (ACS) symbols used for drawing borders, lines, and special characters in terminal interfaces. It includes individual values for elements like corners, arrows, and line segments, along with functions to combine characters for complex border intersections. These are used directly with screen-drawing functions to render UI components such as boxes, menus, and status bars.",
      "description_length": 437,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Curses_config",
      "library": "curses",
      "description": "Handles configuration and feature detection for the ncurses library. It provides direct access to the `wide_ncurses` value, indicating whether the linked curses library supports wide characters. This module is used to determine compatibility with wide character functionality at runtime.",
      "description_length": 287,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Key",
      "library": "curses",
      "description": "This component defines integer constants mapping named keys (e.g., arrows, function keys, navigation controls) and terminal events (e.g., mouse input, window resizing) to numeric codes for input handling in terminal applications. It operates on raw integer values representing key presses and terminal signals, enabling applications to interpret enhanced keyboard input or send specific control sequences to the terminal. These constants are used in screen-oriented programs like text editors or terminal UIs to implement features such as menu navigation, command shortcuts, or dynamic screen updates in response to user input.",
      "description_length": 627,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.WA",
      "library": "curses",
      "description": "This module defines constants for text styling attributes like bold, underline, and reverse, along with functions to combine these into composite styles or extract color pair information. It operates on integer-based attribute and color pair representations, enabling dynamic text formatting and color manipulation in terminal rendering workflows. These capabilities are particularly useful for creating visually distinct elements in text-based user interfaces, such as highlighted menus or colored status indicators.",
      "description_length": 517,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curses",
      "library": "curses",
      "description": "This module enables terminal-based user interface development through operations for screen initialization, cursor control, text rendering, and input handling. It works with terminal, window, and pad data structures to support dynamic layout updates, styled text display (including color and attributes), and interactive input processing. Specific use cases include building command-line applications with forms, menus, or real-time displays that require precise screen control and user interaction.",
      "description_length": 499,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 627,
    "min_description_length": 287,
    "avg_description_length": 446.0,
    "embedding_file_size_mb": 0.10186767578125
  }
}