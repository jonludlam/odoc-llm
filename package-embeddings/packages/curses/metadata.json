{
  "package": "curses",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:47.681997",
  "modules": [
    {
      "module_path": "Curses.Color",
      "library": "curses",
      "description": "This module defines integer constants representing standard color values for use with terminal display operations. It supports color attribute manipulation when rendering text in a window or at specific screen coordinates. Use these values to set foreground or background colors in functions like `attron`, `attroff`, or `attrset` for colored terminal output.",
      "description_length": 359,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Key",
      "library": "curses",
      "description": "This module defines integer constants for special keyboard keys, including navigation arrows, function keys, and terminal control codes, which are used to interpret input events from `getch` and similar functions. It enables handling of enhanced keyboard interactions in terminal interfaces, such as detecting arrow key presses for navigation, function key sequences for application commands, or control combinations like tab and enter. The constants map directly to ncurses' internal key codes, allowing precise differentiation between standard character input and special key events in interactive applications.",
      "description_length": 613,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Acs",
      "library": "curses",
      "description": "This module provides predefined advanced graphic characters for drawing borders, lines, arrows, and symbols in terminal interfaces using the ncurses library. It includes specific functions to access characters like corners, tees, arrows, and special symbols, which are essential for rendering UI elements such as boxes, menus, and indicators. These values are used directly with screen-drawing functions to compose visual layouts in text-based applications.",
      "description_length": 457,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.WA",
      "library": "curses",
      "description": "This module provides operations for combining text styling attributes and managing color pair associations in terminal display rendering. It works with integer-based attribute flags representing visual effects like bold or reverse video, and supports color pair indexing through bitwise operations. These capabilities enable use cases such as creating highlighted text regions, color-coded interface elements, and dynamic terminal UI styling.",
      "description_length": 442,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses.Curses_config",
      "library": "curses",
      "description": "Handles configuration and feature detection for the ncurses library. It provides a value `wide_ncurses` indicating whether the linked curses library supports wide characters. This module is used to adapt behavior based on the capabilities of the underlying terminal interface.",
      "description_length": 276,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Curses.A",
      "library": "curses",
      "description": "This module provides operations to define and combine text styling attributes like bold or underline, and manage color pair associations for terminal display. It works with integer-based attribute flags and color pair identifiers, enabling customization of text appearance in terminal interfaces. These functions are used to apply colored text formatting and composite visual styles when rendering output in curses-based applications.",
      "description_length": 434,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Curses",
      "library": "curses",
      "description": "This module provides terminal initialization, window management, and input handling through operations on terminal, window, and screen data types. It supports text attribute manipulation, screen updates, cursor control, and interactive features like line insertion, soft labels, and color output using child modules for color constants, key codes, graphic characters, attribute composition, wide character detection, and color pair management. You can build text-based interfaces, terminal games, or dynamic display applications by combining operations like `mvaddch` for positioned output, `getch` for input detection, and `attron` with color constants to render styled text. Use cases include rendering boxes with border characters, handling arrow key navigation, and adapting interface behavior based on terminal capabilities like wide character support.",
      "description_length": 857,
      "index": 6,
      "embedding_norm": 1.0000001192092896
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 857,
    "min_description_length": 276,
    "avg_description_length": 491.14285714285717,
    "embedding_file_size_mb": 0.025848388671875
  }
}