{
  "package": "diffast-langs-cpp-parsing",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 36,
  "creation_timestamp": "2025-07-15T23:14:12.886682",
  "modules": [
    {
      "module_path": "Cpp_parsing.Tokens.Make.MenhirInterpreter",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a comprehensive set of terminal symbols representing C++ language tokens, including keywords, operators, literals, and preprocessor directives. Each token variant carries associated data such as strings, identifiers, or parsing modes, enabling precise representation of C++ syntax elements during parsing. It is used to construct and interpret the input stream for a C++ parser, particularly in handling complex syntactic constructs and preprocessing logic.",
      "description_length": 477,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Name.NestedNamespace",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module handles nested C++ namespace representations as lists of namespace components. It provides operations to construct nested namespaces, append components, and convert them to string or encoded forms. Use it when processing or generating C++ code with deeply nested namespaces, such as in AST manipulations or code generation tools.",
      "description_length": 341,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser.Make.MenhirInterpreter",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module provides low-level parsing operations for incremental parsing, state introspection, and grammar analysis, working with checkpoints, parsing stacks, environments, and grammar symbols like C++ AST nodes. It enables use cases such as resuming paused parsers, custom lexing with position tracking, lookahead analysis, and implementing LR parser mechanics like reductions and state transitions for C++ syntax. The design emphasizes direct manipulation of parser states and grammar properties to support complex parsing workflows.",
      "description_length": 536,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Name.Scope",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a polymorphic variant type representing different C++ scope contexts such as top-level, namespace, class, enum, and block scopes. It provides functions to convert scopes to strings, extract names, and check scope types. Use cases include analyzing C++ code structure during parsing or transformation tasks, such as determining whether a declaration occurs inside a class, namespace, or lambda body.",
      "description_length": 418,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser.Make.Incremental",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module provides functions to create incremental checkpoints for parsing C++ code, allowing the parser to resume from specific positions in the input stream. Each function corresponds to a different syntactic category, such as expressions, statements, type declarations, and object initializations, returning a checkpoint that can drive further parsing steps. It is used in scenarios like partial parsing of code fragments, error recovery, or integrating with interactive tools that process C++ source incrementally.",
      "description_length": 520,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Name.Spec",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines and manipulates access specifiers, parameter kinds, and symbol kinds for C++ parsing. It provides operations to convert these constructs to strings, check properties like concept usage, and construct complex type representations. Concrete use cases include modeling C++ class members with access control, handling template parameters, and representing variables, functions, and enums with their associated types.",
      "description_length": 432,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Name.Namespace",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module represents and manipulates C++ namespace declarations, supporting both normal and inline namespaces. It provides functions to construct namespace values, convert them to strings, and serialize them to encoded strings. Use cases include handling namespace identifiers during C++ code parsing and generating string representations for code generation or analysis tools.",
      "description_length": 379,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Ulexer.F",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module implements a lexer for parsing C++-style preprocessor tokens from input buffers. It provides functions to convert character streams into tokens with positional information, manage comment regions, and construct tokens with optional start positions. It is used to tokenize C++ source code for further analysis or preprocessing tasks.",
      "description_length": 344,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Pinfo.TypeSpec",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a type `t` representing C++ type specifiers, including primitive types, elaborated types, CV-qualified types, and placeholders. It provides functions to extract qualifiers, identifiers, and type names, as well as predicates to classify type specifiers for accurate type handling in C++ parsing. Use cases include analyzing and transforming C++ type declarations during AST processing or code generation.",
      "description_length": 423,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Scanner.F",
      "library": "diffast-langs-cpp-parsing",
      "description": "Implements low-level lexical analysis for C++ code, handling tokenization of input streams into meaningful syntactic units. Works with character streams and buffer states, tracking positions and line numbers during parsing. Useful for building custom C++ parsers or preprocessors that require precise source location tracking.",
      "description_length": 326,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Pinfo.CvQualifier",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a variant type representing C++ type qualifiers such as const, volatile, and restrict, along with calling conventions like cdecl and stdcall. It provides functions to convert these qualifiers to string representations and to encode them into a standardized string format. These operations are used when analyzing or generating C++ declarations, particularly for handling type modifiers and function calling conventions in parsed code.",
      "description_length": 454,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser.Make",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module parses C++ code by transforming lexed tokens into structured AST nodes, with dedicated entry points for parsing types, expressions, statements, and declarations. It supports advanced parsing workflows through a submodule that exposes low-level operations for managing parser state, checkpoints, and grammar symbols, enabling features like resuming paused parses, lookahead analysis, and custom lexing with position tracking. Another submodule provides functions to create incremental checkpoints for specific syntactic categories, facilitating partial parsing, error recovery, and integration with interactive tools. Together, these components allow precise control over parsing C++ constructs such as Objective-C declarations, memory allocations, and constructors, producing ASTs for analysis or transformation.",
      "description_length": 824,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Tokens_.T",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a comprehensive set of lexical tokens for parsing C++ code, including operators, keywords, literals, and preprocessor directives. It supports string-based identifiers and parsing mode references to represent syntactic elements encountered during lexing, enabling precise handling of C++11/14/17 features, preprocessor conditions, and operator overloading syntax. The module provides direct access to token definitions and classification operations, such as checking if a token is a keyword or extracting literal values. While it includes a child module, it does not contribute additional functionality beyond the core token definitions and utilities.",
      "description_length": 670,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Pinfo.PlaceholderType",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a type `t` with two variants, `Auto` and `Decltype`, representing placeholder types in C++ parsing. It provides `to_string` and `encode` functions to convert these variants into string representations. Useful for handling type inference keywords in C++ code analysis and transformation tools.",
      "description_length": 312,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Tokens.Make",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module provides a unified sum type for representing C++ lexical tokens, including keywords, operators, literals, and preprocessor directives, each carrying detailed semantic data such as identifiers and parsing modes. Its structure enables precise parsing and analysis of C++ source code, supporting tasks like syntax highlighting, macro expansion, and preprocessor logic interpretation. The child module extends this by defining terminal symbols that refine the token set for constructing and processing the input stream during parsing. Together, they form a cohesive system for building robust C++ parsers and analysis tools.",
      "description_length": 632,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Type",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module provides utilities for representing and manipulating C++ type hierarchies, supporting operations like constructing composite types (pointers, arrays, functions), inspecting type properties (qualifiers, typedef status), and extracting structural components (identifiers, base types). It operates on abstract type representations (`t`, `t_`, `simple_ty`) alongside auxiliary structures such as qualifiers, declaration specs, and virtual specs to model C++ type semantics. These capabilities are used for tasks like parsing complex type declarations, analyzing type relationships, and generating string representations for code generation or debugging.",
      "description_length": 661,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Pinfo.Name",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module manages name resolution and symbolic context in C++ parsing, integrating namespaces, scopes, and type information into a unified model. It provides core operations for resolving identifiers, tracking scope hierarchies, and encoding type and access information, with data types including namespace paths, scope variants, and symbol attributes. The namespace submodule handles nested components and inline namespace representations, enabling precise manipulation of qualified names, while the scope submodule identifies and classifies context types such as class or block scopes. Together, they support tasks like parsing complex C++ declarations, transforming AST nodes with accurate scope tracking, and generating correctly qualified identifiers in code output.",
      "description_length": 773,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser_aux.STATE_T",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a parser state that includes an environment for tracking variables and types during C++ parsing. It supports operations for managing parsing context, such as updating and retrieving environment values. It is used in C++ AST construction to maintain scope and symbol information during recursive descent parsing.",
      "description_length": 331,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Pinfo.ElaboratedType",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a variant type representing elaborated C++ type specifiers such as classes, structs, unions, and enums. It provides functions to retrieve the associated name, convert to a string, and determine if a given specifier represents a type. Use this module when analyzing or transforming C++ type declarations, particularly when distinguishing between different category types like enums and classes.",
      "description_length": 413,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Label.ClassKey",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a type `t` representing C++ class-like keywords such as `class`, `struct`, `union`, and `__refclass`, along with operations to convert these into labeled AST nodes. It includes functions to generate class head and elaborated type specifier labels, used during C++ parsing to correctly annotate type declarations. These functions are directly used to construct syntactic elements when processing C++ class and struct definitions, macro-invoked types, and Microsoft-specific extensions.",
      "description_length": 504,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Label.EnumKey",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a type `t` representing different kinds of enum declarations in C++, including `Enum`, `EnumClass`, `EnumStruct`, and `EnumMacro` with an identifier. It provides functions to convert these enum keys into corresponding label types. Concrete use cases include parsing and representing C++ enum constructs in a structured AST format.",
      "description_length": 350,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser_aux.F",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines auxiliary parsing functions and maintains an environment used during C++ parsing. It works with the `env` type and integrates with the `Stat` module to handle stateful parsing operations. Concrete use cases include managing variable scopes and parsing C++ statements into intermediate representations.",
      "description_length": 321,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Parser_aux",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module orchestrates low-level parsing operations by classifying parentheses and managing contextual state through character streams and token buffers, enabling precise lexical analysis and AST construction. It defines core data types like parser state and environment, which track variables, types, and scopes during C++ parsing, especially in complex contexts like template parameters. Operations include updating environments, converting source locations, and handling stateful parsing tasks across recursive structures. Submodules enhance this by providing environment management and auxiliary parsing functions that support statement parsing and scope handling in C++.",
      "description_length": 677,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Token_seq",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module handles token sequences and parsing modes for C++ preprocessor analysis. It provides functions to convert parsing modes to strings, split strings into words, transform words into tokens, and load tokens from a file into a queue. Concrete use cases include processing macro bodies, managing token streams during preprocessing, and parsing C++ source files into structured token sequences.",
      "description_length": 399,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Label",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module processes C++ abstract syntax trees by converting syntactic elements into labeled representations, enabling precise manipulation of declarations, types, and preprocessing constructs. It defines core operations for handling class-like and enum-like keywords through its `ClassKey` and `EnumKey` submodules, which generate labeled AST nodes for structured parsing and transformation. Data types include labeled forms of class heads, elaborated type specifiers, and enum declarations, supporting tasks such as macro expansion, symbol table population, and semantic analysis. Examples include converting a `struct` keyword into a class head label or transforming an `enum class` into a typed AST node for further processing in refactoring or compilation pipelines.",
      "description_length": 772,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Common",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module handles string formatting, path manipulation, and conversion of optional and list values to strings. It defines basic types for identifiers, names, and values, and provides functions for safely converting options and lists into strings with customizable formatting. Specific use cases include generating string representations of structured data, handling file paths in a Unix format, and producing formatted output for logging or serialization.",
      "description_length": 457,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Tokens_",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a rich set of lexical tokens for C++ parsing, covering keywords, operators, literals, and preprocessor directives, centered around the `token` type that captures both fixed symbols and parameterized variants with embedded data. It enables precise lexing of modern C++ syntax, including handling of templates, operator overloading, and preprocessor logic, with utilities to classify tokens, extract values, or inspect identifiers. The child module extends this by organizing related token categories and providing specialized parsing helpers, allowing operations like detecting context-sensitive keywords or decoding complex literals. Together, they support compiler pipelines, code analysis tools, and syntax-aware transformations by bridging lexical scanning and semantic interpretation.",
      "description_length": 808,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Parser",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module parses C++ code into structured AST nodes by processing lexed tokens through dedicated entry points for types, expressions, statements, and declarations. It supports advanced workflows with low-level state management, checkpoints, and lookahead analysis, enabling partial parsing, error recovery, and interactive integration. Specific features include parsing Objective-C declarations, memory allocations, and constructors, with position tracking for precise AST construction and transformation.",
      "description_length": 507,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Token",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module handles token manipulation and representation for C++ parsing, converting tokens to strings and identifiers. It works with token streams, positions, and regular expressions to extract and format identifiers. Concrete use cases include transforming token sequences into readable representations and matching token patterns for parsing C++ code.",
      "description_length": 355,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Scanner",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module processes C++ preprocessor tokens by analyzing and transforming lexical elements, identifying control structures, and handling macro-related patterns. It includes functions to detect preprocessor directives, filter macro parameters, and convert tokens based on parsing context, such as expanding macro identifiers in conditional compilation. The integrated lexical analysis submodule breaks down character streams into tokens, tracking positions and line numbers for precise source mapping. Together, they enable building tools that analyze or manipulate C++ preprocessing stages with contextual accuracy and positional fidelity.",
      "description_length": 641,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Context",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines context types used during C++ parsing to track the current parsing state, such as whether the parser is at the top level, within a statement, expression, or type. It includes a secondary context type to represent sub-states like being inside an initializer, at the end of a type specifier, or within a lambda introduction. These types and their string conversion functions are used to guide parsing decisions and error reporting in the C++ parser implementation.",
      "description_length": 482,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Ast",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module facilitates AST node manipulation, lexical position handling, and string encoding/decoding for C++ constructs. It operates on AST nodes, identifiers, type specifications, and lexical metadata to support tasks like symbol resolution, semantic analysis, and code generation through operations such as node creation, name qualification, and mangled identifier generation. Key use cases include building symbol tables, resolving C++ type information, and transforming AST structures into semantic representations for further processing.",
      "description_length": 544,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_parsing.Ulexer",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module tokenizes C++ source code by converting character streams into structured tokens with positional data, handling preprocessor directives and comments. It supports lexing from input buffers, tracks token positions, and manages nested comment regions during parsing. Key operations include reading characters, recognizing preprocessor tokens, and constructing tokens with optional start markers. For example, it can parse `#include <stdio.h>` into a directive token with line and column information or skip over `/* multi-line */` comments during lexical analysis.",
      "description_length": 573,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing.Tokens",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module defines a comprehensive sum type for C++ lexical tokens, capturing detailed semantic data such as identifiers, keywords, operators, literals, and preprocessor directives. It enables precise parsing and analysis of C++ source code, supporting use cases like syntax highlighting, macro expansion, and preprocessor logic interpretation. The child module enhances this system by introducing terminal symbols that refine the token set for constructing and processing the input stream during parsing. Together, they provide a structured, extensible foundation for building robust C++ parsers and analysis tools.",
      "description_length": 617,
      "index": 33,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Cpp_parsing.Pinfo",
      "library": "diffast-langs-cpp-parsing",
      "description": "This module provides utilities for parsing and managing C++ preprocessor directives, focusing on identifier manipulation, conditional state tracking, and context management. It operates on structured representations like `t`, integrating type and name information from submodules to model preprocessor conditions and type details during compilation. Use cases include managing conditional compilation flows and encoding or decoding type metadata. Submodules define core data types such as type specifiers, qualifiers, and placeholder types, along with utilities for constructing, inspecting, and converting these types to support tasks like parsing declarations, analyzing type relationships, and generating qualified identifiers. Namespace and scope components track symbolic context, enabling precise name resolution and transformation of C++ AST nodes with accurate scope handling.",
      "description_length": 884,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_parsing",
      "library": "diffast-langs-cpp-parsing",
      "description": "This system provides a comprehensive infrastructure for parsing and analyzing C++ code, integrating lexical scanning, syntactic analysis, and semantic transformation. Core data types include tokens, parser states, environments, and labeled AST nodes, supporting operations such as token stream manipulation, context-sensitive parsing, macro expansion, and symbol resolution. It enables tasks like structured AST construction from source files, precise handling of C++ templates and preprocessor logic, and semantic analysis through environment tracking and name qualification. Example workflows include parsing a C++ file into a token stream, converting macro bodies into structured representations, and building typed AST nodes for refactoring or compilation.",
      "description_length": 760,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 61,
    "meaningful_modules": 36,
    "filtered_empty_modules": 25,
    "retention_rate": 0.5901639344262295
  },
  "statistics": {
    "max_description_length": 884,
    "min_description_length": 312,
    "avg_description_length": 525.4722222222222,
    "embedding_file_size_mb": 0.1312398910522461
  }
}