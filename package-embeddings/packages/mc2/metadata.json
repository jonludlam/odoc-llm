{
  "package": "mc2",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 66,
  "creation_timestamp": "2025-06-18T16:46:18.963954",
  "modules": [
    {
      "module_path": "Mc2_smtlib.Typecheck.Make",
      "description": "Provides a solver function that executes constraint satisfaction problems using a specific solver implementation. Works with solver state and problem configurations represented as opaque types. Used to resolve complex logical constraints in automated reasoning tasks.",
      "description_length": 267,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_backend.Dot.Default",
      "description": "Prints atomic formulas with DOT-compatible escaping and generates structured information for proof tree nodes, including rule names, colors, and custom formatting functions. Works with atomic formulas and clauses from the Mc2_core module. Used to create visual representations of proof trees where each node encodes specific logical elements with styled labels.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_backend.Dot.Make",
      "description": "Prints atomic formulas with proper escaping for DOT format and generates structured metadata for proof tree nodes. Works with atomic formulas and clauses from the Mc2_core module. Used to represent lemmas, assumptions, and hypotheses as distinct nodes in a visual proof graph.",
      "description_length": 276,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Type.TC",
      "description": "Constructs and manipulates typeclasses with custom decision logic, equality operations, and state initialization. Operates on solver actions, terms, values, and formatted printers to define typeclass behavior. Enables lazy initialization and completion of typeclass operations, allowing deferred execution of complex setup steps.",
      "description_length": 329,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Type.Alloc",
      "description": "Provides operations to access a lazy type-checking context, determine the initial size of a table, and check shallow equality and hash values of plugin views. Works with `TC.lazy_tc`, `int`, and `view` types. Used to compare plugin states and manage memory allocation parameters.",
      "description_length": 279,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Solver.Sat_state",
      "description": "Evaluates the truth value of atoms in the current SAT solver state, with options to retrieve assignments and decision levels. Iterates through the solver's trail in propagation order and extracts a model when the formula is satisfiable. Validates the consistency of the model against the formula.",
      "description_length": 296,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Solver.Unsat_state",
      "description": "Returns the conflicting clause derived from an unsatisfiable state and generates a persistent proof of the empty clause. Operates on a state type representing an unsatisfiable result and a clause type from the solver. Used to extract logical contradictions and formal proofs from failed satisfiability attempts.",
      "description_length": 311,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Bool",
      "description": "Provides operations to check and retrieve assigned atoms, access positive and negative literals, and create equality or inequality constraints. Works with a type `t` representing logical states and interacts with solver types like atoms and terms. Used to determine truth values, enforce constraints, and manage variable polarities during solving.",
      "description_length": 347,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Watch1",
      "description": "Provides operations to create and manage a watchlist for terms, including initializing and updating watches based on term assignments. Works with term lists, arrays, and iterators to track and respond to changes in solver state. Used to efficiently manage dependencies during constraint solving by triggering actions when specific terms are set.",
      "description_length": 345,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Watch2",
      "description": "Provides operations to manage a watchlist of terms, including creating from a list or array, iterating over terms, initializing watches for a specific term, and updating watches after a term is assigned. Works with term lists, arrays, and iterators over terms. Used to track and respond to changes in term assignments during constraint solving.",
      "description_length": 344,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.TC",
      "description": "Constructs and manages typeclasses with lazy initialization, supporting actions, term evaluation, and watch updates. Operates on solver term structures, including actions, watches, and term views. Used to define typeclasses incrementally, defer function implementation, and safely finalize configurations after partial setup.",
      "description_length": 325,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Term_allocator",
      "description": "Provides operations to check equality and compute hashes of views, and accesses a typeclass for terms. Works with views of a plugin and integer identifiers. Used to compare term representations and generate hash values for efficient lookup in symbolic computation contexts.",
      "description_length": 273,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Term.Tbl",
      "description": "This module provides operations for manipulating key-value stores, including insertion, deletion, lookup, and transformation of entries, with support for iterative processing and value aggregation. It works with hash tables that handle diverse key and value types, emphasizing counting, merging, and conversion to sequences or lists. Use cases include frequency tracking, data aggregation from iterables, and dynamic table construction with customizable value combination strategies.",
      "description_length": 483,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Map",
      "description": "The module provides operations for constructing, modifying, and querying maps with key-value pairs, including adding, removing, merging, and iterating while preserving ordered key structures. It works with generic key-value maps, handling sequences and iterators, and offers functions for filtering, transforming, and conditionally extracting subsets. Specific use cases include merging data sources with collision handling and processing structured data through transformation and filtering.",
      "description_length": 492,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term.Set",
      "description": "This module provides operations for constructing, manipulating, and inspecting ordered sets of elements, including adding/removing elements, combining sets via union/intersection, and querying membership or subset relationships. It supports predicate-based filtering, transformation, and conversion to lists or strings, enabling efficient data processing and validation. Use cases include managing unique data collections, optimizing membership checks, and generating structured representations for debugging or output.",
      "description_length": 519,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Clause.Tbl",
      "description": "This module provides operations for managing hash tables, including insertion, deletion, lookup, iteration, and value transformation, with specialized support for counting, merging, and accumulating key-value pairs. It works with hash tables that map keys to integer or arbitrary values, enabling tasks like aggregating data, maintaining counters, and combining entries during updates. Use cases include building frequency tables, processing sequences into structured data, and serializing hash table contents for debugging or logging.",
      "description_length": 535,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Clause.Set",
      "description": "The module provides comprehensive set operations including union, intersection, difference, membership checks, and subset validations, alongside higher-order functions for iteration, mapping, and filtering over ordered sets of elements. It supports constructing sets from iterables, transforming elements via predicates, and converting sets to lists or strings, enabling tasks like data aggregation, filtering, and structural analysis. These capabilities are suited for scenarios requiring efficient element management, relational queries, and representation conversion in ordered collections.",
      "description_length": 593,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Proof.H",
      "description": "This module provides high-performance hash tables for managing key-value pairs, with operations like insertion, deletion, lookup, and iteration, optimized for proof-specific contexts. It works with mutable, clause-centric data structures where keys are of type `key` and values are generic, supporting counting, merging, and pretty-printing. It is designed for dynamic data manipulation during proof inspections, ensuring efficient access and modification within single proof sessions.",
      "description_length": 485,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Plugin.Factory",
      "description": "Creates plugins with defined priorities, required services, and build logic. Operates on plugin configurations, service keys, and service lists to construct plugin instances. Used to manage plugin loading order and dependencies in a service-oriented system.",
      "description_length": 257,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Atom.Tbl",
      "description": "This module offers operations for inserting, removing, and querying key-value pairs in hash tables, along with transformations and safe modifications that handle duplicates by merging values. It works with generic hash tables supporting diverse key and value types, including integer counters and arbitrary data. Specific use cases include counting element frequencies in sequences, building accumulative mappings, and efficiently combining values during updates.",
      "description_length": 463,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Atom.Set",
      "description": "This module provides a comprehensive set of operations for managing ordered collections of elements, including standard set manipulations like union, intersection, and difference, as well as advanced traversal, filtering, and conversion functions. It works with ordered sets of type `elt`, enabling efficient membership checks, subset validations, and predicate-based queries, while supporting safe, option-returning variants for robust error handling. Use cases include data normalization, logical filtering, and integrating set-based logic into larger computational workflows.",
      "description_length": 578,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Tseitin.Make",
      "description": "Negates atomic formulas and formats them for output. It operates on a type `t` representing logical expressions. Used to generate negated conditions in theorem proving and to display formulas in a readable format.",
      "description_length": 213,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Lemma.TC",
      "description": "Creates a formatter with a custom pretty-printing function for rendering structured data. Operates on a type `t` that encapsulates formatting state and configuration. Used to generate consistent, styled output for logging or user interfaces.",
      "description_length": 241,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Service.Key",
      "description": "Creates keys with named identifiers, supporting formatted string construction. Works with polymorphic type 'a t and string representations. Used to uniquely identify service registrations in plugin-based systems.",
      "description_length": 212,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Service.Registry",
      "description": "Registers and retrieves services using unique keys, supporting both optional and guaranteed access. Operates on a registry type that maps keys to values, with keys defined by an external Key module. Useful for managing service dependencies at runtime or configuring components dynamically.",
      "description_length": 289,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Value.Tbl",
      "description": "The module provides functions for inserting, removing, and querying key-value pairs in hash tables, along with iteration and transformation capabilities. It works with associative data structures that support integer or arbitrary value types, enabling operations like counter increment/decrement, duplicate merging, and list-based accumulation. Specific use cases include counting occurrences, combining values during updates, and generating structured output from hash table contents.",
      "description_length": 485,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Value.TC",
      "description": "Provides functions to create a type-safe container with custom pretty-printing, equality, and hashing based on a view type. Operates on a view type and wraps it in a structure that enforces consistent representation and comparison. Used to encapsulate complex data for safe storage in hash tables or when needing controlled serialization.",
      "description_length": 338,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.ID.Map",
      "description": "This module offers operations for building, modifying, and querying key-value maps, including adding/removing entries, merging, and iterating while preserving ordered structures. It works with maps featuring specific key types and generic values, supporting transformations, conditional filtering, and handling duplicates via combining functions during insertion. Use cases include data aggregation, configuration management, and processing structured datasets requiring efficient key-based access and manipulation.",
      "description_length": 515,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.ID.Set",
      "description": "This module offers comprehensive set operations including union, intersection, difference, membership checks, and element querying, along with higher-order functions like `map`, `filter`, and `fold` for transforming and traversing sets. It works with ordered sets of generic elements, enabling efficient manipulation through constructs like splitting, subset validation, and predicate-based searches. Use cases include managing unique data collections, performing algebraic set operations, and converting sets to lists or strings for serialization or further processing.",
      "description_length": 570,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.ID.Tbl",
      "description": "This module offers operations for inserting, deleting, and querying key-value pairs in hash tables, along with transformations and safe modifications, supporting diverse key and value types. It handles associative data structures with capabilities for counting, merging values during insertions, and serializing contents into readable formats. Use cases include frequency tracking, data aggregation, and efficient lookup in dynamic datasets.",
      "description_length": 441,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.ID.Smtlib",
      "description": "Provides pretty-printing for SMT-LIB formulas using a custom printer type. Works with abstract syntax tree representations of logical expressions. Used to generate human-readable SMT-LIB code from internal representations.",
      "description_length": 222,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_lra.LE.Infix",
      "description": "Performs arithmetic operations on numeric and interval types, including addition, subtraction, and scalar multiplication. Operates on custom numeric types and interval structures to support mathematical computations. Used to construct and manipulate ranges and numerical expressions in domain-specific calculations.",
      "description_length": 315,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_propositional.F",
      "description": "Provides operations to construct and manipulate boolean formulas, including logical negation, conjunction, disjunction, implication, and equivalence. Works with atomic propositions and nested logical expressions represented as a private type. Used to convert formulas to conjunctive normal form with fresh variable generation and to pretty-print formulas for debugging or output.",
      "description_length": 379,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_smtlib.Typecheck",
      "description": "The module integrates a constraint solver for automated reasoning, offering a single function to execute constraint satisfaction problems. It operates on opaque types representing solver states and problem configurations. Users can define logical constraints and derive solutions through the solver's internal processing. This enables automated resolution of complex logical and symbolic problems.",
      "description_length": 397,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_smtlib.Make",
      "description": "Provides a solver function that executes constraint satisfaction problems using a specific solver implementation. Operates with problem configurations and solution states represented as opaque types. Used to resolve complex logical constraints in automated reasoning tasks.",
      "description_length": 273,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_backend.Backend_intf",
      "description": "Prints proof structures to a formatted output stream using a specified format. Operates on a proof type represented as a concrete data structure. Used to generate human-readable or machine-processable proof logs for verification tools.",
      "description_length": 235,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_backend.Dot",
      "description": "Prints atomic formulas with proper escaping for DOT format and generates structured information for proof tree nodes, including labels, colors, and custom print functions. Works with atomic formulas, hypotheses, lemmas, and assumptions to represent proof elements. Used to create visual representations of proof structures by exporting to DOT, enabling graph visualization of logical derivations.",
      "description_length": 396,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Atom",
      "description": "manages key-value storage and ordered collections through hash table and set operations, enabling efficient data aggregation, transformation, and querying. It supports generic key-value pairs with merge strategies and ordered sets with membership checks and set-theoretic operations. Users can count element frequencies, build accumulative mappings, and perform logical filtering or data normalization. Operations include safe insertions, unions, intersections, and predicate-based traversals on diverse data types.",
      "description_length": 515,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Term",
      "description": "Creates and manages terms within a logical theory, supporting operations to construct, delete, and iterate over terms. Works with term structures and type information from the theory. Used to clean up unused terms and traverse all terms for analysis or modification.",
      "description_length": 266,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Type",
      "description": "Provides operations to check shallow equality and compute hashes of plugin views, and exposes a lazily evaluated type checker. Works with `view` data structures representing plugin states. Used to compare and identify plugin views in runtime environments.",
      "description_length": 255,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Value",
      "description": "manages associative data through hash tables and type-safe wrappers, enabling key-value operations, value aggregation, and structured data handling. It supports integer and arbitrary value types, with operations like insertion, removal, and transformation, as well as custom equality and hashing for complex data. Examples include counting occurrences, merging duplicates, and serializing structured values. It ensures consistent representation and safe usage in models by wrapping view types into reliable containers.",
      "description_length": 518,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Actions",
      "description": "Provides operations to manage solver state, including adding clauses, propagating boolean literals with evaluations or lemmas, raising conflicts, and registering backtrack handlers. Works with solver states, clauses, boolean terms, atoms, and lemmas. Used to enforce constraints during solving, handle logical deductions, and manage conflict resolution in SAT solving workflows.",
      "description_length": 378,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Builtins",
      "description": "Provides boolean term constants for true and false, and a plugin factory for integrating with the solver. Works with solver term types and service keys to represent logical values. Used to construct and manipulate basic logical expressions within constraint-solving workflows.",
      "description_length": 276,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Clause",
      "description": "manages hash tables and sets with specialized operations for data aggregation, transformation, and querying. it supports integer and arbitrary value hash tables for counting, merging, and updating entries, and provides ordered set operations like union, intersection, and membership checks. users can build frequency tables, filter data, and convert structures to lists or strings for analysis. examples include aggregating log entries, merging datasets, and validating set relationships.",
      "description_length": 488,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Proof",
      "description": "manages dynamic key-value relationships in resolution proofs using specialized hash tables, with keys of type `key` and generic values that support counting, merging, and formatting. It enables efficient insertion, deletion, and lookup during proof exploration, allowing for real-time updates and analysis. Operations include iterating over stored data, merging tables, and tracking clause occurrences. For example, it can track how often a clause is used in a proof or combine multiple proof steps into a unified structure.",
      "description_length": 524,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Solver",
      "description": "Traverses the solver's trail to evaluate atoms, retrieve assignments, and construct models when a formula is satisfiable, while validating their consistency. Extracts conflicting clauses and generates proofs of unsatisfiability from failed solving attempts, using internal state and clause representations. Supports both model extraction and contradiction analysis within the same framework. Enables users to diagnose unsatisfiable instances and verify solutions through logical inference.",
      "description_length": 489,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Service",
      "description": "Encapsulates service registration and lookup, using unique keys to manage plugin-provided features. Supports polymorphic service types and provides mechanisms to store, retrieve, and enforce service availability. Services can be dynamically configured or accessed based on their key, enabling flexible plugin interactions. Examples include registering a term-building function or retrieving an E-matching engine at runtime.",
      "description_length": 423,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Plugin",
      "description": "Provides operations to manage plugin identity, service registration, and interaction with a constraint solver. Works with integers, strings, term iterators, and service lists to track and manipulate logical terms and dependencies. Used to validate satisfiability, iterate over variables, and perform memory cleanup during solving.",
      "description_length": 330,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Tseitin",
      "description": "Converts boolean formulas into conjunctive normal form (CNF) using Tseitin's transformation, generating fresh atoms for subformulas. Operates on boolean expressions built from atoms, negations, conjunctions, disjunctions, implications, and equivalences. Accepts a formula and returns a CNF representation suitable for SAT solving, with options to simplify and generate unique atoms.",
      "description_length": 382,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.ID",
      "description": "Manages structured data through maps, sets, and hash tables, enabling key-based storage, set operations, and efficient lookups. Supports transformations, filtering, and serialization of collections with ordered or unordered elements. Processes logical expressions by converting abstract syntax trees into readable SMT-LIB format. Allows for data aggregation, configuration handling, and symbolic logic representation with precise control over structure and output.",
      "description_length": 464,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Lemma",
      "description": "Generates styled, structured output using a formatter that tracks state and configuration through type `t`. Supports custom pretty-printing logic to format complex data types consistently. Can be used to create colored logs, tabular displays, or nested data visualizations. Examples include formatting JSON trees or generating aligned text reports.",
      "description_length": 348,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Statement",
      "description": "Prints structured SQL statements using a custom formatting system. Operates on a tree-like representation of SQL queries, including clauses and expressions. Used to generate human-readable output for debugging and logging database operations.",
      "description_length": 242,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Bound_var",
      "description": "Provides operations to pretty-print bound variables with and without type information. Works with tuples of ID and type, representing bound variables in a solver context. Used to convert bound variables into terms within a solver plugin framework.",
      "description_length": 247,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core.Error",
      "description": "Generates error messages using formatted strings, supporting both simple string construction and complex formatting with variadic arguments. It handles format strings with type-safe interpolation and returns values of arbitrary type to signal errors. Used to construct detailed error messages in logging, user feedback, and exception handling.",
      "description_length": 343,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_core.Int_map",
      "description": "This module provides operations for managing integer-keyed maps, including insertion, deletion, merging, and transformation of key-value pairs, with support for customizable conflict resolution during updates. It works with ordered, efficient data structures that enable querying, filtering, and iteration over integer-based associations, suitable for scenarios like configuration management or caching. Specific use cases include aggregating data from sequences, maintaining dynamic mappings with safe access patterns, and converting between map representations while preserving semantic integrity.",
      "description_length": 599,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_dimacs.Plugin_sat",
      "description": "Provides functions to create and manage SAT solver plugins, including a key for generating atoms and a factory for building plugins. Works with `Mc2_core.atom` and plugin factory structures. Used to integrate SAT solving capabilities into a constraint system.",
      "description_length": 259,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_lra.LE",
      "description": "Performs arithmetic on numeric and interval types, supporting addition, subtraction, and scalar multiplication across custom numeric structures and range-based computations. Key data types include numeric values and interval ranges, with operations that build and modify numerical expressions. It enables precise manipulation of ranges and dynamic calculation of numerical values within specific domains. For example, it can compute the sum of two intervals or scale a numeric value by a factor.",
      "description_length": 495,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mc2",
      "description": "Provides operations for constructing and manipulating logical formulas, solving constraints using the MCSat calculus, and managing proof contexts. Works with data types such as terms, clauses, and proof trees, and supports SAT and SMT solving workflows. Used to verify properties of formal systems, validate logical deductions, and assist in automated reasoning tasks.",
      "description_length": 368,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_propositional",
      "description": "Constructs and manipulates boolean formulas using logical operations such as negation, conjunction, disjunction, implication, and equivalence. Handles atomic propositions and nested expressions through a private type, supporting conversion to conjunctive normal form and pretty-printing. Operations include formula transformation, variable generation, and structured output. Examples include simplifying logical expressions, generating CNF for SAT solvers, and displaying formulas in human-readable form.",
      "description_length": 504,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_unin_sort",
      "description": "Declares uninterpreted sorts, constructs instances of these sorts, and defines equality between terms of such sorts. Operates on identifiers, type lists, and terms from the Mc2_core module. Used to integrate uninterpreted sorting into theorem proving workflows.",
      "description_length": 261,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_smtlib",
      "description": "Processes SMTLib-2 problems by parsing, type-checking, and solving constraints through integrated solver functionality. It uses opaque types for solver states and problem configurations, allowing users to define logical constraints and retrieve solutions. The solver executes constraint satisfaction problems, enabling automated resolution of symbolic and logical tasks. Examples include verifying logical formulas, solving equations, and analyzing satisfiability conditions.",
      "description_length": 475,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_backend",
      "description": "Outputs proof structures in formatted styles, supporting both human-readable logs and DOT-compatible visualizations. Handles atomic formulas, hypotheses, and proof nodes with custom formatting and escaping. Enables generation of structured proof trees and detailed textual proof records. Examples include exporting proof steps to DOT for graph rendering or logging proof states for debugging.",
      "description_length": 392,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_core",
      "description": "Manages logical terms, solver state, and plugin interactions through term construction, state manipulation, and service registration. Provides data structures for key-value storage, sets, and hash tables, along with operations for equality checks, hashing, and data aggregation. Supports CNF conversion, model extraction, and proof generation, enabling efficient constraint solving and logical analysis. Examples include tracking clause usage in proofs, converting formulas to CNF, and managing solver conflicts with lemmas.",
      "description_length": 524,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mc2_dimacs",
      "description": "Parses DIMACS files to represent SAT problems, enabling integration of SAT solving into constraint systems. Supports creation and management of solver plugins using atoms and factory structures. Allows generating atoms, building plugins, and processing SAT problem data. Facilitates tasks like formula parsing, variable tracking, and solver configuration.",
      "description_length": 355,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_lra",
      "description": "Handles arithmetic operations on numeric and interval types, including addition, subtraction, and scalar multiplication. It defines numeric values and interval ranges as core data types, supporting construction and modification of numerical expressions. Operations allow precise range manipulation and dynamic value calculation, such as adding two intervals or scaling a value by a factor. It enables accurate computation within defined numerical domains.",
      "description_length": 455,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mc2_uf",
      "description": "Provides services for applying constants to arguments, converting constants to terms, and declaring uninterpreted symbols, all operating on ID and term types. Works with type lists and individual type declarations to construct and manage symbolic expressions. Used to build and manipulate abstract syntax trees in theorem proving contexts.",
      "description_length": 339,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 72,
    "meaningful_modules": 66,
    "filtered_empty_modules": 6,
    "retention_rate": 0.9166666666666666
  },
  "statistics": {
    "max_description_length": 599,
    "min_description_length": 212,
    "avg_description_length": 381.7121212121212,
    "embedding_file_size_mb": 0.2402181625366211
  }
}