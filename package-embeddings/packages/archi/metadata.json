{
  "package": "archi",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 19,
  "creation_timestamp": "2025-07-15T23:09:36.711234",
  "modules": [
    {
      "module_path": "Archi.Make.Component.SIMPLE_COMPONENT",
      "library": "archi",
      "description": "This module defines a component interface with operations to start and stop a component, producing a result or error message during initialization. It works with abstract types `t` representing the component instance and `ctx` representing the context needed to start the component. Concrete use cases include managing lifecycle operations of system components such as servers, connectors, or services that require initialization and shutdown handling.",
      "description_length": 452,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Archi.Make.Component.COMPONENT",
      "library": "archi",
      "description": "This module defines component lifecycle operations with `start` and `stop`, where `start` initializes a component using context and returns configuration arguments, and `stop` safely terminates a running component. It works with abstract types `t` for the component state and `ctx` for contextual setup data. Concrete use cases include managing database connections, server instances, or external service integrations with controlled startup and shutdown.",
      "description_length": 455,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Component.SIMPLE_COMPONENT",
      "library": "archi",
      "description": "This module defines a component interface with operations to start and stop a component, handling initialization and shutdown. It works with abstract types `t` for the component instance and `ctx` for the context used during startup. Concrete use cases include managing lifecycle events for system components like servers, databases, or network connections.",
      "description_length": 357,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.System",
      "library": "archi",
      "description": "This module builds and manages systems with start/stop lifecycle states, handling component dependencies. It provides functions to create systems from components, start or stop them with context, and retrieve their state. Use it to compose and control modular, interdependent services like database connections, HTTP servers, or background workers.",
      "description_length": 348,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.Io",
      "library": "archi",
      "description": "This module implements monadic operations for composing input/output actions. It provides `return` to wrap values in an IO context, `map` to transform results of IO actions, and `bind` to sequence IO actions where the output of one determines the input of the next. It works specifically with the `'a Io.t` type, representing deferred computations with side effects, such as reading from or writing to external systems. Use cases include building pipelines for file processing, handling asynchronous network requests, or managing sequences of dependent system calls.",
      "description_length": 566,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Component.COMPONENT",
      "library": "archi",
      "description": "This module defines a component interface with operations to initialize and terminate components using context and argument types. It works with abstract types representing components, contexts, and initialization arguments. Concrete use cases include managing lifecycle operations for system components such as servers, databases, or network services.",
      "description_length": 352,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.Component",
      "library": "archi",
      "description": "This module orchestrates the composition and lifecycle management of components in complex systems, linking them through explicit dependencies and context-aware initialization. It centers around abstract types `t` for components and `ctx` for setup context, with core operations `start` and `stop` to initialize and terminate components, returning results or errors. Child modules refine the component interface and lifecycle behavior, enabling use cases like coordinating service startup in distributed systems, managing database connections, and modeling typed system architectures. Together, the module and its submodules provide a structured way to handle dependency chains and resource management with typed, composable interfaces.",
      "description_length": 736,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.S-Io",
      "library": "archi",
      "description": "This module implements a monadic interface for handling input/output operations, providing `map` and `bind` functions to sequence and transform IO actions. It works with the abstract type `'a Io.t`, representing suspended or effectful computations that produce values of type `'a`. Concrete use cases include composing file reading, network requests, or user interaction steps while isolating side effects.",
      "description_length": 406,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make",
      "library": "archi",
      "description": "This module enables the construction and management of complex, interdependent systems with explicit lifecycle control, using components that can be initialized, started, and stopped within a shared context. It centers around the `t` type representing components, and `'a Io.t` for sequencing and transforming effectful operations, supporting precise control over execution order and resource handling. You can define systems where components like HTTP servers or database connections are composed with dependencies, started in the correct sequence, and cleanly shut down. For example, you could model a service that starts a database connection before initializing an API server, ensuring both are stopped safely when the system terminates.",
      "description_length": 741,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.S-System",
      "library": "archi",
      "description": "This module defines systems composed of components with explicit start and stop states. It supports creating systems from component definitions, starting and stopping them with context, and retrieving their typed state. Systems can be used to manage application lifecycle, such as initializing and shutting down services or resources in a structured way.",
      "description_length": 354,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Io",
      "library": "archi",
      "description": "This module implements monadic operations for handling input/output actions. It provides `return` to wrap values in an IO context, `map` to transform values within the context, and `bind` to sequence IO actions. It works with the abstract type `'a Archi.Io.t`, representing deferred or effectful computations. Use this module to compose file reading, network requests, or logging operations where each step depends on the result of the previous.",
      "description_length": 445,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.S-Component-module-type-COMPONENT",
      "library": "archi",
      "description": "This module defines a component interface with operations to initialize and terminate a component, producing a context and handling lifecycle management. It works with abstract types representing the component state, context, and arguments. Concrete use cases include managing resources like network connections or hardware devices where setup and teardown are critical.",
      "description_length": 370,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Component",
      "library": "archi",
      "description": "This module structures applications by composing components with explicit dependencies and lifecycle management, using a context to resolve dependencies and coordinate start/stop actions. It supports building components from functions or modules, combining them through concatenation or appending, and integrating with external systems. The core interface defines `start` and `stop` operations over abstract types for components and contexts, enabling structured initialization and shutdown of system elements like servers, databases, and APIs. Examples include assembling a database component that depends on configuration, linking a service that starts after the database, and cleanly shutting down all resources in reverse order.",
      "description_length": 732,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.System",
      "library": "archi",
      "description": "This module manages the lifecycle of component-based systems, allowing components to be defined, started, and stopped in a controlled manner. It works with systems parameterized by context, arguments, and component types, supporting both one-time and reusable component configurations. Concrete use cases include orchestrating application components like servers, databases, and services, where explicit startup and shutdown sequences are required.",
      "description_length": 448,
      "index": 13,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Archi.S-Component",
      "library": "archi",
      "description": "This module composes and constructs components with explicit dependencies and lifecycle management. It supports operations like appending dependencies to a component, concatenating dependency chains, and defining components from start/stop functions or modules. Use cases include building modular systems with typed dependencies, managing resource initialization and cleanup, and composing components into larger systems with well-defined interfaces.",
      "description_length": 450,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.IO",
      "library": "archi",
      "description": "This module implements a monadic interface for handling values wrapped in a type `t`, supporting composition through `map` and `bind`. It works with any data type `'a` encapsulated in the monadic structure `t`. Concrete use cases include sequencing asynchronous operations, managing optional values, or threading state through transformations.",
      "description_length": 343,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.S",
      "library": "archi",
      "description": "Handles input/output operations, component definitions, and system-level composition. Works with components, systems, and I/O descriptors for simulation and verification tasks. Used to build and connect hardware models, manage signal propagation, and run behavioral simulations.",
      "description_length": 278,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.S-Component-module-type-SIMPLE_COMPONENT",
      "library": "archi",
      "description": "This module defines a simple component interface with operations to start and stop a component, handling initialization and shutdown. It works with abstract types `t` representing the component state and `ctx` representing the context needed for initialization. Concrete use cases include managing lifecycle of system components like network servers, database connections, or hardware drivers.",
      "description_length": 393,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi",
      "library": "archi",
      "description": "This module provides a domain-specific language for modeling software architectures as directed graphs of components with typed ports and connections. It enables defining, composing, and serializing systems such as microservices or hardware circuits, while managing dependencies and execution order. The core abstractions include components with inputs and outputs, systems that orchestrate component lifecycles, and IO operations for integrating effectful actions like file or network access. With support for structured initialization, sequencing, and shutdown, it facilitates building and managing complex, interdependent systems with precise control over resource handling and lifecycle transitions.",
      "description_length": 703,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 19,
    "meaningful_modules": 19,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 741,
    "min_description_length": 278,
    "avg_description_length": 469.94736842105266,
    "embedding_file_size_mb": 0.0694427490234375
  }
}