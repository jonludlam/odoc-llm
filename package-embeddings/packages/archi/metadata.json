{
  "package": "archi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:28:21.466244",
  "modules": [
    {
      "module_path": "Archi.Make.System",
      "library": "archi",
      "description": "This module defines systems composed of interdependent components, supporting creation, starting, stopping, and value retrieval. It works with component definitions parameterized by context, arguments, and output types, tracking system state (started or stopped) in the type. Concrete use cases include building and managing lifecycle-dependent services like HTTP servers with middleware, databases, and configuration.",
      "description_length": 418,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.Io",
      "library": "archi",
      "description": "This module implements a monadic interface for handling input/output actions, allowing sequential composition of effectful operations. It works with the `Io.t` type, representing suspended computations that may perform I/O. Concrete use cases include reading from or writing to files, interacting with external systems, or managing stateful resources like network connections.",
      "description_length": 376,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.Component",
      "library": "archi",
      "description": "This module composes and manages components with explicit dependencies and lifecycle management. It supports operations to chain component initialization and teardown, resolve dependencies between components, and wrap system-level constructs into components. Concrete use cases include building modular applications where components like databases, servers, or services are initialized and stopped in a controlled order with shared context.",
      "description_length": 440,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Io",
      "library": "archi",
      "description": "This module implements monadic operations for handling effectful computations. It provides `return` to wrap values, `map` to transform results, and `bind` to sequence operations, all working with the `Io.t` type. It is used to structure asynchronous or side-effecting workflows while maintaining purity in functional code.",
      "description_length": 322,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make",
      "library": "archi",
      "description": "This module builds a system for managing components with explicit dependencies and lifecycles, using a monadic interface for I/O operations. It works with component definitions that encapsulate initialization, execution, and teardown logic, along with `Io.t` values for handling effectful actions. Concrete use cases include structuring applications where components like HTTP servers, databases, and configuration loaders must start and stop in a specific order while sharing context.",
      "description_length": 485,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Component",
      "library": "archi",
      "description": "This module composes and manages components with explicit dependencies and lifecycle management, using a context-aware model. It supports creating components from start/stop functions, combining them with dependency chains, and abstracting their structure through module types. Concrete use cases include building modular systems with injectable dependencies, such as application servers with pluggable services or layered runtime environments.",
      "description_length": 444,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.System",
      "library": "archi",
      "description": "This module manages the lifecycle of component-based systems, allowing creation, starting, stopping, and retrieving of systems with typed components and contexts. It works with systems parameterized by context, arguments, and state, supporting reusable component configurations. Concrete use cases include orchestrating application components like servers, databases, and services that require controlled startup and shutdown sequences.",
      "description_length": 436,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi",
      "library": "archi",
      "description": "This module provides a system for managing components with explicit dependencies and lifecycles, using a monadic interface for I/O operations. It works with component definitions that encapsulate initialization, execution, and teardown logic, along with `Io.t` values for handling effectful actions. Concrete use cases include structuring applications where components like HTTP servers, databases, and configuration loaders must start and stop in a specific order while sharing context.",
      "description_length": 487,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 487,
    "min_description_length": 322,
    "avg_description_length": 426.0,
    "embedding_file_size_mb": 0.11636638641357422
  }
}