{
  "package": "archi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:30:51.760384",
  "modules": [
    {
      "module_path": "Archi.Make.Io",
      "description": "Provides operations for sequencing and transforming values within an effectful context, including lifting values into the context, applying functions to wrapped values, and chaining effectful computations. Works with a parameterized type that encapsulates computations, supporting composition of actions that may involve side effects. Used to manage asynchronous or I/O-bound operations by structuring them in a predictable, composable way.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Make.Component",
      "description": "Handles initialization and termination of components with context and argument parameters. Operates on custom types `t`, `ctx`, and `args` to manage lifecycle events. Used to launch background processes and cleanly shut them down during system termination.",
      "description_length": 256,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.Make.System",
      "description": "Provides functions to create and manage lifecycle states of system components, including starting, stopping, and retrieving component values. Operates on typed contexts, arguments, and stateful component structures. Used to initialize and control processes with explicit state transitions and error handling during execution.",
      "description_length": 325,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Make",
      "description": "Provides operations to lift values into a context, apply functions to values within a context, and chain computations that produce contextual results. Works with a parameterized type that encapsulates values along with potential side effects or computations. Used to sequence operations in a monadic style, such as handling optional values or asynchronous computations.",
      "description_length": 369,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Io",
      "description": "Provides operations for sequencing and transforming values within a context, including lifting values into the context, applying functions to wrapped values, and chaining operations that produce new contexts. Works with a parameterized type that encapsulates values and computations. Used to manage side-effecting operations in a structured way, such as handling I/O or error-prone computations.",
      "description_length": 395,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi.Component",
      "description": "Provides functions to initialize and terminate components, with `start` accepting a context and arguments to configure the component, and `stop` gracefully shutting it down. Operates on custom types `t` for component instances, `ctx` for configuration context, and `args` for initialization parameters. Used to manage lifecycle events in system services or embedded applications.",
      "description_length": 379,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi.System",
      "description": "Provides functions to create and manage lifecycle states of system components, including starting, stopping, and retrieving component values. Operates on typed contexts, arguments, and result states using a stateful, effectful type system. Used to initialize and control long-running processes with explicit error handling during transitions.",
      "description_length": 342,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "archi",
      "description": "Manages stateful components and their dependencies through lifecycle events and dependency resolution. Operates on custom component types and dependency graphs. Enables structured initialization, cleanup, and coordination of interdependent components in application workflows.",
      "description_length": 276,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi",
      "description": "Manages component lifecycles and effectful computations through context-aware operations, enabling structured handling of side effects, state transitions, and resource management. It supports lifting values into contexts, applying functions to wrapped data, and chaining operations that produce new contexts, while also providing start and stop functions for component initialization and shutdown. Operations work with types such as `t` for component instances, `ctx` for configuration, and `args` for parameters, allowing for controlled execution of I/O, error-prone tasks, and long-running processes. Examples include safely chaining asynchronous operations, initializing system services with custom configurations, and managing state transitions with explicit error handling.",
      "description_length": 778,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 778,
    "min_description_length": 256,
    "avg_description_length": 395.55555555555554,
    "embedding_file_size_mb": 0.033097267150878906
  }
}