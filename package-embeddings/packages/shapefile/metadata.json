{
  "package": "shapefile",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 29,
  "creation_timestamp": "2025-08-15T12:16:46.903181",
  "modules": [
    {
      "module_path": "Shapefile.Prj_syntax.Parameter",
      "library": "shapefile",
      "description": "Represents individual parameters in a projection definition with a name and numeric value. Provides `sprint` to format a parameter as a string for serialization. Used to construct and output PROJ.4-style parameter strings from shapefile projection metadata.",
      "description_length": 257,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.CS",
      "library": "shapefile",
      "description": "This module defines a variant type `t` representing different coordinate system types, including geographic, projected, geocentric, vertical, compound, fitted, and local systems. It provides the `sprint` function to convert a coordinate system value into its string representation. This module is used to model and serialize coordinate reference systems defined in ESRI .prj files.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Vert_datum",
      "library": "shapefile",
      "description": "Represents vertical datum information in coordinate reference systems. It includes fields for the datum name, type as a float, and an optional authority. The `sprint` function formats this data into a string for output or logging purposes.",
      "description_length": 239,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Local_datum",
      "library": "shapefile",
      "description": "This module defines a data structure for representing local datums in geographic coordinate systems, including fields for name, datum type, and an optional authority. It provides a function to serialize a local datum into a string representation. Useful for handling custom or region-specific geospatial reference data in shapefile projections.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.LocalCS",
      "library": "shapefile",
      "description": "This module defines a data structure for representing local coordinate systems in shapefile projection descriptions, including fields for name, datum, unit, axes, and optional authority. It provides a function to serialize a local coordinate system into a string representation. This is used to handle custom spatial reference systems specific to localized geographic data.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Primem",
      "library": "shapefile",
      "description": "Represents a prime meridian with its name, longitude relative to Greenwich, and an optional authority. Provides `sprint` to serialize the meridian into a string for projection definitions. Used when defining coordinate reference systems in GIS applications, particularly when encoding or decoding `.prj` files for shapefile metadata.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.MT",
      "library": "shapefile",
      "description": "This module defines a type `t` for representing map projection method trees, including parameters, concatenations, inverses, and passthrough operations. It provides a `sprint` function to convert these method trees into string representations. Use this module to parse, manipulate, and serialize projection method definitions in a structured way.",
      "description_length": 346,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Unit",
      "library": "shapefile",
      "description": "Represents angular or linear units with a name, conversion factor, and optional authority. Provides `sprint` to format unit descriptions as strings. Used to define coordinate system units in geographic projections.",
      "description_length": 214,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.ToWGS84",
      "library": "shapefile",
      "description": "This module defines a transformation parameter set for converting coordinates to the WGS84 system, including delta offsets, rotation angles, and scale. It provides a `sprint` function to serialize the transformation data into a string representation. Used when exporting or logging geographic transformations in shapefile processing workflows.",
      "description_length": 343,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.GeogCS",
      "library": "shapefile",
      "description": "Represents geographic coordinate systems with components like datum, prime meridian, angular unit, and axes. Provides `sprint` to serialize the structure into a string representation. Used for handling spatial reference information in shapefile projection definitions.",
      "description_length": 268,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Authority",
      "library": "shapefile",
      "description": "Represents authority information in a shapefile projection definition, storing the name and code as strings. Provides the `sprint` function to format the authority data into a string representation. Useful for serializing projection metadata when writing `.prj` files or debugging spatial reference systems.",
      "description_length": 307,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.ProjCS",
      "library": "shapefile",
      "description": "This module defines a structured representation of projected coordinate systems, including components like geographic coordinate systems, projections, parameters, and units. It provides a `sprint` function to serialize these structures into string representations. Useful for parsing and generating PRJ files that describe spatial reference systems in GIS applications.",
      "description_length": 369,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Datum",
      "library": "shapefile",
      "description": "This module defines a data structure for representing geodetic datums, including their associated spheroid, optional WGS84 transformation parameters, and optional authority information. It provides a function to serialize a datum into a string representation, suitable for use in projection files. Concrete use cases include parsing and generating `.prj` file entries for geographic coordinate systems that require datum specifications.",
      "description_length": 436,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Spheroid",
      "library": "shapefile",
      "description": "This module defines a spheroid with parameters including name, semi-major axis, flattening, and optional authority. It provides `sprint` to serialize a spheroid to a string representation. Used to model geographic spheroids in coordinate reference system definitions.",
      "description_length": 267,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.VertCS",
      "library": "shapefile",
      "description": "This module defines a data structure for representing vertical coordinate systems, including fields for name, datum, linear unit, axis, and optional authority. It provides a `sprint` function to generate a string representation of the structure. This is used for parsing and displaying vertical coordinate system information in geospatial data workflows.",
      "description_length": 354,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Projection",
      "library": "shapefile",
      "description": "This module defines a data structure for representing geographic projections, including a name and an optional authority. It provides a function to serialize a projection into a string format. Used for handling projection information in shapefile PRJ metadata.",
      "description_length": 260,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Axis",
      "library": "shapefile",
      "description": "This module defines axis directions and default axis configurations for geographic, projected, and geocentric coordinate systems. It provides concrete axis definitions for correct spatial overlay by specifying direction (e.g., North, East) and human-readable names. Use cases include setting up coordinate system metadata and ensuring proper axis interpretation when reading or writing shapefiles.",
      "description_length": 397,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.GeocCS",
      "library": "shapefile",
      "description": "This module defines a geographic coordinate system with components like datum, prime meridian, linear unit, and axes. It provides a `sprint` function to serialize the coordinate system into a string representation. It is used to handle and represent spatial reference systems in geospatial data processing tasks.",
      "description_length": 312,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_lexer",
      "library": "shapefile",
      "description": "This module provides functions for lexing and tokenizing input related to shapefile projection definitions. It processes strings into tokens using a lexing buffer, supporting parsing of geographic coordinate system parameters. Concrete use cases include reading `.prj` file contents and converting well-known text (WKT) representations into structured tokens for further parsing.",
      "description_length": 379,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_parser",
      "library": "shapefile",
      "description": "Parses `.prj` file contents into coordinate system definitions using a lexer function. It processes tokens representing projections, datums, units, and other spatial reference components into a structured coordinate system type. Useful for interpreting ESRI shapefile projection metadata into usable coordinate system descriptions.",
      "description_length": 331,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj",
      "library": "shapefile",
      "description": "Reads `.prj` projection files into coordinate system descriptions. Parses Well-Known Text (WKT) representations of projections into structured data. Useful for interpreting spatial reference information in shapefile datasets.",
      "description_length": 225,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax",
      "library": "shapefile",
      "description": "This module handles projection syntax definitions for shapefile metadata, providing structured types and serialization functions for spatial reference components. It includes modules for projection methods, parameters, coordinate systems, datums, and units, enabling precise parsing and output of `.prj` file contents. Use it to read, construct, or export spatial reference information in GIS workflows involving shapefile projections.",
      "description_length": 435,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Shx",
      "library": "shapefile",
      "description": "This module reads `.shx` files and returns a list of index records, each specifying the offset and length of a shape in the corresponding `.shp` file. It works with the `header` type from `Shapefile.Common` and a list of index records containing integer values. A concrete use case is parsing shapefile index data to efficiently locate and read individual shapes from a `.shp` file.",
      "description_length": 382,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Common",
      "library": "shapefile",
      "description": "This module defines a `header` type for parsing and storing metadata from shapefile formats, including length, version, shape type, and bounding box. It provides the `print_header` function to output header information for debugging or inspection. Use this module when reading or writing shapefile headers to access file structure details directly.",
      "description_length": 348,
      "index": 23,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Shapefile.D2",
      "library": "shapefile",
      "description": "This module defines basic geometric types for working with 2D spatial data, including points and bounding boxes. It provides a function to print bounding box information for visualization or debugging. Use cases include geographic data processing, spatial indexing, and rendering 2D map features.",
      "description_length": 296,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.D2M",
      "library": "shapefile",
      "description": "This module defines data structures for representing 2D geometric points with an associated measure value (x, y, m) and axis-aligned bounding boxes for such points. It includes a function to print the contents of a bounding box for debugging or logging purposes. This module is useful for handling geographic or geometric data where each point carries a measurable value, such as elevation, time, or other attributes.",
      "description_length": 417,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.D3M",
      "library": "shapefile",
      "description": "This module defines data structures for 3D geometric points with an additional measure value (x, y, z, m) and bounding boxes for those points. It provides operations to create, manipulate, and query point and bounding box values, such as calculating extents or extracting individual components. Concrete use cases include geographic data processing, 3D modeling, and spatial analysis where measure values like time or elevation are associated with coordinates.",
      "description_length": 460,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Shp",
      "library": "shapefile",
      "description": "This module reads ESRI Shapefiles and returns a list of geometric shapes such as points, polylines, and polygons, each optionally including measures or z-coordinates. It supports data types like `point`, `bbox`, and arrays of these structures, organized into variants representing different shape types. Use this module to parse shapefile data into native OCaml data structures for further processing or analysis.",
      "description_length": 413,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile",
      "library": "shapefile",
      "description": "This module provides functionality for reading and manipulating geographic shapefile data, including headers, index files, and projection metadata. It supports geometric data types across 2D, 2D with measure, and 3D with measure dimensions, along with operations to parse, print, and inspect spatial structures. Concrete use cases include geographic information system (GIS) data processing, spatial analysis, and map rendering using ESRI shapefile formats.",
      "description_length": 457,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 29,
    "meaningful_modules": 29,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 460,
    "min_description_length": 214,
    "avg_description_length": 342.86206896551727,
    "embedding_file_size_mb": 0.4207735061645508
  }
}