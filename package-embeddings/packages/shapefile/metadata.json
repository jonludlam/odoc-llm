{
  "package": "shapefile",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 29,
  "creation_timestamp": "2025-07-15T23:10:53.436789",
  "modules": [
    {
      "module_path": "Shapefile.Prj_syntax.Primem",
      "library": "shapefile",
      "description": "This module defines a data structure for representing prime meridians, including their name, longitude relative to Greenwich, and an optional authority. It provides a function to serialize a prime meridian into a string representation. Use this module when working with geographic coordinate systems that require a custom reference meridian.",
      "description_length": 341,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Projection",
      "library": "shapefile",
      "description": "This module defines a data structure for representing geographic projections, including a name and an optional authority. It provides a function to serialize a projection into a string format. Used for handling projection information in shapefile PRJ syntax parsing and generation.",
      "description_length": 281,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.ToWGS84",
      "library": "shapefile",
      "description": "This module defines a transformation record for converting coordinates to the WGS84 system, including parameters for translation, rotation, and scaling. It provides a `sprint` function to serialize the transformation values into a string representation. This is used when handling geographic coordinate transformations in shapefile processing workflows.",
      "description_length": 353,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Authority",
      "library": "shapefile",
      "description": "Represents authority information in a shapefile's projection definition with a name and code. Provides a function to serialize the authority data into a string format. Useful for handling spatial reference systems in geographic data processing.",
      "description_length": 244,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Local_datum",
      "library": "shapefile",
      "description": "This module defines a data structure for representing local datums in geographic coordinate systems, including fields for name, datum type, and optional authority. It provides a serialization function to convert local datum records into string representations. This is used for handling custom or localized geodetic reference systems in GIS data processing.",
      "description_length": 357,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.GeocCS",
      "library": "shapefile",
      "description": "This module defines a geographic coordinate system with specific components such as datum, prime meridian, linear unit, axes, and optional authority. It provides a `sprint` function to serialize the coordinate system into a string representation. This is used when parsing or generating `.prj` files for shapefile metadata, ensuring correct geographic context for spatial data.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Shapefile.Prj_syntax.Spheroid",
      "library": "shapefile",
      "description": "Represents spheroid parameters used in geographic coordinate systems, including name, semi-major axis, flattening, and optional authority. Provides `sprint` to serialize the spheroid definition into a string format suitable for projection descriptions. Used when parsing or generating PRJ files to define ellipsoid models for spatial reference systems.",
      "description_length": 352,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Axis",
      "library": "shapefile",
      "description": "This module defines axis directions and default axis configurations for geographic, projected, and geocentric coordinate systems. It includes functions to convert axis and direction values to strings and provides predefined axis pairs and triples for common coordinate system setups. Use this module when interpreting or constructing coordinate system definitions that require explicit axis orientation, such as when parsing or generating PRJ files for shapefile metadata.",
      "description_length": 472,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.CS",
      "library": "shapefile",
      "description": "This module defines a variant type `t` representing different coordinate system types used in shapefile projection definitions, including geographic, projected, geocentric, vertical, compound, fitted, and local systems. It provides the `sprint` function to convert these coordinate system values into string representations, typically for output or debugging purposes. The module is used to model and serialize spatial reference systems defined in `.prj` files associated with geographic data.",
      "description_length": 493,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Vert_datum",
      "library": "shapefile",
      "description": "This module defines a data structure for representing vertical datums in shapefile projection descriptions, including fields for the datum name, type, and optional authority. It provides a function to serialize a vertical datum into a string representation. This is used to generate or parse PROJ.4 strings for geographic data processing.",
      "description_length": 338,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Unit",
      "library": "shapefile",
      "description": "Represents angular or linear units with a name, conversion factor, and optional authority. Provides `sprint` to format the unit as a string for debugging or logging. Used to define coordinate system units in projection definitions.",
      "description_length": 231,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.MT",
      "library": "shapefile",
      "description": "This module defines a recursive algebraic data type for representing map projection method trees, supporting operations like parameter application, concatenation, inversion, and passthrough. It provides a `sprint` function to convert these method trees into string representations. Concrete use cases include parsing and serializing PROJ.4 projection definitions for geographic data processing.",
      "description_length": 394,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.Datum",
      "library": "shapefile",
      "description": "This module defines a data structure for representing geographic datums, including their associated spheroid, optional WGS84 transformation parameters, and optional authority information. It provides a function to convert datum values into string representations. Useful for handling coordinate reference system definitions in geospatial data processing.",
      "description_length": 354,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.GeogCS",
      "library": "shapefile",
      "description": "This module defines a geographic coordinate system with components like datum, prime meridian, angular unit, and axes. It provides a `sprint` function to serialize the coordinate system into a string representation. Used for parsing and generating .prj files in shapefile processing.",
      "description_length": 283,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_syntax.Parameter",
      "library": "shapefile",
      "description": "Represents projection parameters with a name and numeric value. Provides `sprint` to format parameters as strings for output. Used to serialize individual projection parameters in PRJ files.",
      "description_length": 190,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.ProjCS",
      "library": "shapefile",
      "description": "This module defines a structured representation of projected coordinate systems, including components like geographic coordinate systems, projections, parameters, and units. It provides a `sprint` function to serialize these structures into string format. Useful for parsing and generating PRJ files that describe spatial reference systems in GIS applications.",
      "description_length": 360,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.VertCS",
      "library": "shapefile",
      "description": "Represents vertical coordinate system definitions with components like datum, linear unit, axis, and optional authority. Provides `sprint` to serialize the structure into a string for persistence or logging. Used to define and output vertical coordinate system metadata in geospatial applications.",
      "description_length": 297,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax.LocalCS",
      "library": "shapefile",
      "description": "This module defines a data structure for representing local coordinate systems in shapefile projection descriptions, including fields for name, datum, unit, axes, and optional authority. It provides a `sprint` function to serialize a local coordinate system into a string format suitable for output. This is used when generating or manipulating `.prj` files that define custom local projections for geographic data.",
      "description_length": 415,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.D3M",
      "library": "shapefile",
      "description": "This module defines data structures for 3D points with an associated measure (x, y, z, m) and bounding boxes for 3D+M space. It provides operations to create, manipulate, and query these geometric entities, such as calculating bounds or extracting coordinate values. Concrete use cases include geographic data processing, 3D spatial indexing, and handling trajectory or elevation data with time or measurement values.",
      "description_length": 417,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj",
      "library": "shapefile",
      "description": "Reads `.prj` projection files into a structured representation of coordinate systems. Parses Well-Known Text (WKT) definitions into typed values that describe projections, datums, and units. Useful for validating and interpreting spatial reference information in shapefile datasets.",
      "description_length": 282,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Common",
      "library": "shapefile",
      "description": "This module defines a `header` type for parsing and storing metadata from shapefile components like `.shp` and `.shx`, including file length, version, shape type, and bounding box. It provides the `print_header` function to output header information for debugging or inspection. Use cases include validating shapefile headers and extracting spatial extent data for rendering or analysis.",
      "description_length": 387,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Prj_lexer",
      "library": "shapefile",
      "description": "This module provides functions for lexing and tokenizing input related to shapefile projection definitions. It processes strings into tokens using a lexical analyzer, specifically handling input for parsing coordinate reference systems. The module operates on `Lexing.lexbuf` and produces tokens consumed by the `Prj_parser` to interpret `.prj` file contents.",
      "description_length": 359,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.D2",
      "library": "shapefile",
      "description": "This module defines data structures for representing 2D geometric shapes, specifically points with `x` and `y` coordinates and bounding boxes defined by minimum and maximum `x` and `y` values. It includes a function `print_bbox` to output the coordinates of a bounding box. Use this module when working with geographic or geometric 2D data, such as reading or writing shapefiles that require precise spatial representations.",
      "description_length": 424,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_syntax",
      "library": "shapefile",
      "description": "This module provides a comprehensive framework for modeling and serializing geographic coordinate systems and their components. It includes data types for prime meridians, projections, datums, spheroids, coordinate system types, units, and transformations, along with operations to serialize these elements into string representations. These structures are used to parse and generate `.prj` files and PROJ.4 strings, enabling accurate handling of spatial reference systems in GIS workflows. Examples include defining a projected coordinate system with a custom datum and unit, serializing a geographic coordinate system for metadata output, or representing a vertical datum with its associated parameters.",
      "description_length": 705,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.Shp",
      "library": "shapefile",
      "description": "This module reads ESRI Shapefiles and returns structured geometric data. It supports various shape types including points, multi-points, polylines, and polygons, each with optional measures and z-coordinates. Use it to parse geographic vector data for analysis or visualization tasks.",
      "description_length": 284,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Prj_parser",
      "library": "shapefile",
      "description": "Parses `.prj` file contents into coordinate system definitions using a lexer, converting tokens into structured representations like projections, datums, and axes. It processes sequences of tokens into composite coordinate systems, handling cases like PROJCS, GEOGCS, and COMPD_CS. Useful for interpreting spatial reference information in ESRI shapefiles to enable geospatial data processing and transformations.",
      "description_length": 412,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile.Shx",
      "library": "shapefile",
      "description": "This module reads `.shx` files and returns a list of index records, each specifying the offset and length of a shape in the corresponding `.shp` file. It works with the `index` type, which contains two integers representing position and size in 16-bit words. A typical use case involves parsing a `.shx` file to quickly locate and retrieve specific shapes from a shapefile without loading the entire dataset.",
      "description_length": 408,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shapefile.D2M",
      "library": "shapefile",
      "description": "This module defines data structures for 2D geometric points with an associated measure (x, y, m) and axis-aligned bounding boxes for such points. It includes functions to represent and print bounding boxes that encompass these 3-component points. Use this module when handling geographic or geometric data that requires a measure component, such as route-based data with distance markers.",
      "description_length": 388,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shapefile",
      "library": "shapefile",
      "description": "This module processes geographic vector data and associated metadata through structured representations of geometric shapes, coordinate systems, and file headers. It supports 2D and 3D points with optional measures, bounding boxes, and spatial reference systems parsed from `.prj` files, along with reading and indexing shapefile content via `.shp`, `.shx`, and projection data. Operations include parsing shape records, extracting spatial extents, validating headers, and serializing coordinate systems for GIS workflows. Examples include reading a `.shp` file into typed geometric data, interpreting projection definitions for spatial transformations, and indexing shapes for efficient access.",
      "description_length": 695,
      "index": 28,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 29,
    "meaningful_modules": 29,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 705,
    "min_description_length": 190,
    "avg_description_length": 375.62068965517244,
    "embedding_file_size_mb": 0.10580635070800781
  }
}