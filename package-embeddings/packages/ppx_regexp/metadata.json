{
  "package": "ppx_regexp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:54:06.486004",
  "modules": [
    {
      "module_path": "Ppx_regexp.List",
      "library": "ppx_regexp",
      "description": "This module offers a comprehensive set of list manipulation functions supporting transformation, filtering, and accumulation through indexed and non-indexed operations. It handles lists, associative structures, and paired lists, enabling tasks like key-based lookups, dual-list iterations, and efficient sorting or deduplication. Specific functions facilitate predicate-driven processing, accumulator-based transformations, and sequence conversions while emphasizing tail recursion and equality checks.",
      "description_length": 502,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_regexp.Regexp",
      "library": "ppx_regexp",
      "description": "This module provides functions to parse regular expressions into typed structures, extract binding information from pattern nodes, and convert pattern nodes back to string representations. It operates on regular expression types decorated with location and annotation metadata. Concrete use cases include analyzing and transforming regex patterns in OCaml code, such as in linters or code generators.",
      "description_length": 400,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_regexp",
      "library": "ppx_regexp",
      "description": "This module processes regular expressions in OCaml syntax extensions, enabling parsing, transformation, and analysis of regex patterns with support for capturing groups and bindings. It operates on annotated expression trees and location-tracked structures, facilitating tasks like pattern extraction, group rewriting, and binding injection. Concrete use cases include implementing regex-based syntax extensions, linters, and code generators that require deep regex introspection or transformation.",
      "description_length": 498,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 502,
    "min_description_length": 400,
    "avg_description_length": 466.6666666666667,
    "embedding_file_size_mb": 0.043869972229003906
  }
}