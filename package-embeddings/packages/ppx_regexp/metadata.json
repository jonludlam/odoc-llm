{
  "package": "ppx_regexp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:32.631361",
  "modules": [
    {
      "module_path": "Ppx_regexp.List",
      "description": "The module provides list transformations, filtering, folding, and sorting, along with operations for association lists, pairwise processing, and ordered data manipulation. It works with arbitrary element lists, key-value pairs, and ordered structures, leveraging comparison functions for consistency. Use cases include data cleaning via filtering, efficient key-based lookups, and maintaining sorted sequences during merges or deduplication.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_regexp.Regexp",
      "description": "Parses a string into a typed structure with position tracking, extracting bindings and generating string representations. It operates on located nodes and tracks positions for error reporting and parsing context. Used to process and analyze structured text with precise location information.",
      "description_length": 291,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_regexp",
      "description": "Provides pattern matching on strings using regular expressions, extracting results into specific types such as options, lists, tuples, and objects. Supports typed extraction with detailed structure handling, enabling precise data transformation from matched patterns. Enables routing logic in applications by binding URL paths or input formats to structured data.",
      "description_length": 363,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_regexp",
      "description": "Processes and transforms lists with filtering, folding, sorting, and association operations, while also parsing strings into structured, located data with position tracking. It handles arbitrary elements, key-value pairs, and ordered data, supporting efficient data manipulation and analysis. Examples include cleaning data through filtering, performing key-based lookups, and generating precise error reports during parsing. It enables structured text analysis and maintains consistency through comparison functions and location-aware processing.",
      "description_length": 547,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 547,
    "min_description_length": 291,
    "avg_description_length": 410.5,
    "embedding_file_size_mb": 0.014940261840820312
  }
}