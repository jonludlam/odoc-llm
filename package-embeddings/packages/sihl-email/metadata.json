{
  "package": "sihl-email",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 13,
  "creation_timestamp": "2025-08-14T23:18:23.823098",
  "modules": [
    {
      "module_path": "Sihl_email.Template.Make",
      "library": "sihl-email",
      "description": "This module provides operations to manage email templates with support for text and HTML content, multiple languages, and contextual variables. It works with string identifiers, labels, and email template records containing fields like content, label, and language. Concrete use cases include retrieving localized email templates by label, creating templates with optional HTML versions, and updating existing templates dynamically.",
      "description_length": 432,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.Template.MariaDb",
      "library": "sihl-email",
      "description": "This module provides functions to retrieve, create, update, and register email templates backed by a MariaDB database. It operates on `Sihl__Contract_email_template.t` data structures, supporting operations like label-based lookup, language-specific templates, and context-aware rendering. Concrete use cases include storing and managing multilingual email templates in a database for dynamic retrieval during email dispatch workflows.",
      "description_length": 435,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.Template.PostgreSql",
      "library": "sihl-email",
      "description": "This module implements PostgreSQL-backed operations for managing email templates, providing functions to retrieve, create, update, and register templates with support for contextual variables and optional language-specific content. It works with string-based identifiers, optional contexts as key-value pairs, and a template type defined in the email template contract. Concrete use cases include storing and retrieving localized email templates for transactional messaging, where templates can be dynamically loaded by label or identifier at runtime.",
      "description_length": 551,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.MakeSmtp",
      "library": "sihl-email",
      "description": "This module provides functions to send individual or bulk emails over SMTP, with support for context metadata. It works with in-memory email data structures for testing, allowing interception and inspection of sent emails. Concrete use cases include sending transactional emails, verifying email delivery in tests, and clearing intercepted emails between test scenarios.",
      "description_length": 370,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.EnvSendGridConfig",
      "library": "sihl-email",
      "description": "This module provides a function to fetch SendGrid configuration data asynchronously. It works with the `Sihl_email.sendgrid_config` type, which holds credentials and settings for SendGrid email services. A concrete use case is retrieving configured API keys and sender details for sending emails via SendGrid in a production environment.",
      "description_length": 337,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.Template",
      "library": "sihl-email",
      "description": "This module manages email templates with support for text and HTML content, multiple languages, and contextual variable substitution. It provides functions to create, update, and render templates, as well as serialize and deserialize them using formats like Yojson and Sexp. Concrete use cases include dynamically generating localized transactional emails by label, populating templates with runtime data, and persisting templates in storage backends like PostgreSQL or MariaDB.",
      "description_length": 478,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.SendGrid",
      "library": "sihl-email",
      "description": "This module provides functions to send individual or bulk emails using SendGrid, including test capabilities to inspect and clear a mock inbox. It works with email data structures defined in `Sihl__Contract_email`, which include recipient, subject, body, and other email metadata. Concrete use cases include sending transactional emails, testing email delivery in CI pipelines, and stubbing email services during development.",
      "description_length": 425,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.Queued",
      "library": "sihl-email",
      "description": "This module handles email sending and interception using an in-memory mailbox for testing. It provides functions to send individual or bulk emails, inspect and clear intercepted emails in development, and integrates with a queue service for asynchronous delivery. Concrete use cases include verifying sent emails during test runs and offloading email delivery to a background queue.",
      "description_length": 382,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.Smtp",
      "library": "sihl-email",
      "description": "This module handles email sending and inbox management using SMTP. It provides functions to send single or bulk emails asynchronously, retrieve and clear stored emails in memory, and register the email service with a lifecycle. It works directly with email data structures containing fields like recipients, subjects, and content, supporting testing and development workflows without requiring external SMTP servers.",
      "description_length": 416,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.MakeSendGrid",
      "library": "sihl-email",
      "description": "This module implements email sending functionality using SendGrid, providing operations to send individual or bulk emails asynchronously. It works with `Sihl__.Contract_email.t` for email data and maintains an in-memory mailbox for testing purposes. Concrete use cases include sending transactional emails, verifying email delivery in tests, and clearing test emails between test runs.",
      "description_length": 385,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.EnvSmtpConfig",
      "library": "sihl-email",
      "description": "This module provides a function `fetch` that retrieves an SMTP configuration from the environment asynchronously. It works with the `Sihl_email.smtp_config` type, which contains connection details like host, port, and authentication. A concrete use case is loading email server settings from environment variables at runtime for sending emails.",
      "description_length": 344,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.DevInbox",
      "library": "sihl-email",
      "description": "This module provides an in-memory email inbox for development environments. It allows storing, retrieving, and clearing email messages using simple list operations. Use it to inspect sent emails during testing or development without sending actual emails.",
      "description_length": 255,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email",
      "library": "sihl-email",
      "description": "This module provides operations for constructing, serializing, and transmitting emails through SMTP or SendGrid, with support for asynchronous delivery and environment-specific configuration. It works with email data structures enriched by multilingual templates, variable substitution, and in-memory testable delivery mechanisms like development inboxes. Use cases include dynamic email generation for personalized notifications, configuration-driven deployment across environments, and testing workflows without external dependencies.",
      "description_length": 536,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 551,
    "min_description_length": 255,
    "avg_description_length": 411.2307692307692,
    "embedding_file_size_mb": 0.18880462646484375
  }
}