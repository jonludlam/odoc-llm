{
  "package": "sihl-email",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:14.813907",
  "modules": [
    {
      "module_path": "Sihl_email.Template.PostgreSql",
      "library": "sihl-email",
      "description": "This module implements PostgreSQL-backed operations for managing email templates, supporting retrieval by ID or label, creation, and updating of templates with optional context and language parameters. It works with email templates represented as strings and structured data conforming to the email template contract, including fields like label, HTML content, and language. Concrete use cases include storing and fetching localized email templates for transactional messaging, such as user registration or password reset emails.",
      "description_length": 529,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.Template.Make",
      "library": "sihl-email",
      "description": "This module provides operations to manage email templates with support for text and HTML content, multiple languages, and context-based rendering. It works with string identifiers, labels, and the `Sihl__.Contract_email_template.t` type representing email templates. Concrete use cases include retrieving templates by ID or label for sending localized emails, creating templates with optional HTML versions, and updating existing templates in a database via the provided `Repo` module.",
      "description_length": 485,
      "index": 1,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Sihl_email.Template.MariaDb",
      "library": "sihl-email",
      "description": "This module provides functions to retrieve, create, update, and register email templates stored in a MariaDB database. It works with email templates represented as strings with optional context, language, and HTML content. Concrete use cases include loading localized email templates by label, creating new templates with optional IDs, and updating existing templates in the database.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.MakeSmtp",
      "library": "sihl-email",
      "description": "This module implements SMTP-based email sending with functions to send individual or bulk emails, test against an in-memory mailbox, and clear intercepted emails. It works with `Sihl__.Contract_email.t` for email data and uses SMTP configuration from the `Config` module. Concrete use cases include sending transactional emails via SMTP, verifying sent emails during testing, and clearing the test mailbox between test runs.",
      "description_length": 424,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.EnvSmtpConfig",
      "library": "sihl-email",
      "description": "This module provides a function `fetch` that retrieves an SMTP configuration from the environment asynchronously. It works with the `Sihl_email.smtp_config` type, which contains connection details like host, port, and authentication. A concrete use case is loading email server settings from environment variables at runtime for sending emails.",
      "description_length": 344,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.SendGrid",
      "library": "sihl-email",
      "description": "This module provides functions to send individual or bulk emails using SendGrid, including tracking sent emails in an in-memory inbox. It works with email data structures defined in `Sihl__Contract_email` and supports asynchronous operations via Lwt. Concrete use cases include sending transactional emails, testing email output in development, and clearing test data between test runs.",
      "description_length": 386,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.Smtp",
      "library": "sihl-email",
      "description": "This module handles email sending and inbox management using SMTP. It provides functions to send single or bulk emails asynchronously, retrieve and clear stored emails in memory, and register the email service with a lifecycle. It works directly with `Sihl__Contract_email.t` for email data and supports contextual metadata during sending. Useful for testing email flows locally without external SMTP dependencies.",
      "description_length": 414,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.MakeSendGrid",
      "library": "sihl-email",
      "description": "This module implements email sending functionality using SendGrid, providing operations to send individual or bulk emails asynchronously. It works with `Sihl__.Contract_email.t` for email data and maintains an in-memory mailbox for testing intercepted emails. Concrete use cases include sending transactional emails, verifying email delivery in tests via the inbox, and clearing intercepted emails between test scenarios.",
      "description_length": 421,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_email.Queued",
      "library": "sihl-email",
      "description": "This module handles email sending operations with support for both individual and bulk email transmission, queuing emails for delivery using a provided queue service. It maintains an in-memory mailbox for development and testing, allowing inspection and clearing of intercepted emails. Concrete use cases include sending transactional emails asynchronously and verifying email delivery in test scenarios.",
      "description_length": 404,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.SendGridConfig",
      "library": "sihl-email",
      "description": "This module provides a function to fetch SendGrid configuration data asynchronously. It works with the `Sihl_email.sendgrid_config` type, which holds configuration details for SendGrid email services. A concrete use case is retrieving API keys and sender information needed to send emails via SendGrid in an application.",
      "description_length": 320,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.EnvSendGridConfig",
      "library": "sihl-email",
      "description": "This module provides a function to fetch SendGrid configuration data asynchronously. It works with the `Sihl_email.sendgrid_config` type, which holds configuration details for SendGrid email services. A concrete use case is retrieving SendGrid API keys and settings at runtime for sending emails through the SendGrid API.",
      "description_length": 321,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.DevInbox",
      "library": "sihl-email",
      "description": "This module provides an in-memory email inbox for development environments. It allows adding emails to the inbox, retrieving the current list of stored emails, and clearing all emails. Useful for testing email workflows without sending real emails.",
      "description_length": 248,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.Template",
      "library": "sihl-email",
      "description": "This module manages email templates with support for rendering, updating, and serializing templates containing text, HTML, and metadata. It enables dynamic, localized email generation using key-value substitutions and integrates with logging and database systems. The PostgreSQL and MariaDB submodules provide database-specific implementations for storing, retrieving, and modifying templates by ID or label, supporting optional context and language parameters. Use cases include sending transactional emails like password resets and user registrations using localized templates with optional HTML content.",
      "description_length": 606,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email.SmtpConfig",
      "library": "sihl-email",
      "description": "This module provides a function `fetch` that retrieves an SMTP configuration asynchronously. It works with the `Sihl_email.smtp_config` type, which contains connection details like host, port, and authentication. Use it to obtain SMTP settings for sending emails in a Lwt-based application.",
      "description_length": 290,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_email",
      "library": "sihl-email",
      "description": "This module orchestrates email handling with structured data (`t`) representing messages that carry sender, recipient, and content metadata. It supports sending via SMTP or SendGrid, each with dedicated submodules for transport, configuration retrieval, and in-memory interception. Developers can send transactional emails, queue messages for deferred delivery, or test flows using development inboxes that capture and expose email content without external transmission. Specific operations include loading SMTP or SendGrid settings from the environment, sending single or bulk emails, and managing localized templates backed by SQL databases for dynamic message generation.",
      "description_length": 674,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 674,
    "min_description_length": 248,
    "avg_description_length": 416.6666666666667,
    "embedding_file_size_mb": 0.05492115020751953
  }
}