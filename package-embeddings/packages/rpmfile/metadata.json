{
  "package": "rpmfile",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:53.889725",
  "modules": [
    {
      "module_path": "Rpmfile.Selector.All",
      "library": "rpmfile",
      "description": "This module provides predicate functions `select_header_tag` and `select_signature_tag` that always return `true`, ensuring all header and signature tags are included during package parsing. It operates on RPM package files by working with tag identifiers of type `int`. Use this module when you need to extract or inspect every tag from an RPM file, such as during full metadata analysis or debugging.",
      "description_length": 402,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.Header.Entry",
      "library": "rpmfile",
      "description": "This module provides functions to parse and manipulate individual header entries in RPM package files, focusing on operations like extracting tag values, determining data types, and handling offsets and counts. It works directly with RPM header structures, including tag identifiers, data kinds, and positional metadata. Concrete use cases include reading package metadata such as dependencies, file lists, and signing information from RPM archives.",
      "description_length": 449,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Selector.S",
      "library": "rpmfile",
      "description": "This module defines predicates to filter header and signature tags when parsing RPM files. It provides `select_header_tag` and `select_signature_tag` functions that determine which tags to include during parsing. Useful for selectively extracting metadata or signatures without processing the entire file.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.Selector.Base",
      "library": "rpmfile",
      "description": "This module defines predicates to filter base metadata tags when parsing RPM files, specifically selecting header and signature tags related to package identity and basic attributes like name, version, architecture, and size. It operates on integer tag identifiers to determine inclusion during the parsing process. Use this module when extracting core package information from RPM files without loading the full dataset.",
      "description_length": 421,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.D",
      "library": "rpmfile",
      "description": "This module provides functions to decode `Rpmfile.Header.Entry.value` into specific OCaml types like `int`, `string`, `bytes`, and lists. It includes direct decoders for scalar types and combinators for structured data, such as `array` and function composition with `<<`. These functions are used to extract and convert raw RPM package metadata fields into usable values during package parsing.",
      "description_length": 394,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Header",
      "library": "rpmfile",
      "description": "This module reads and parses RPM package headers, providing access to indexed sections and their values, including tag-value pairs and metadata. It supports operations to extract specific entries like package name, version, and dependencies, while enabling low-level manipulation of header structures such as data types, offsets, and counts. Submodules focus on handling individual header entries, allowing concrete actions like reading file lists, dependency information, and signing metadata from RPM archives. Together, they enable both high-level inspection and detailed traversal of RPM header content.",
      "description_length": 607,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Selector",
      "library": "rpmfile",
      "description": "This module implements predicates for selecting RPM package tags during parsing, enabling efficient filtering of tag data to extract specific metadata like package name, version, and dependencies without loading full tag sets. It provides core operations through `select_header_tag` and `select_signature_tag` functions that operate on integer tag identifiers, determining which tags to include during parsing. Submodules offer predefined criteria for common use cases, such as selecting all tags for full metadata analysis, filtering for specific categories like signatures, or extracting base identity attributes including name and version. Use this module to streamline RPM parsing by focusing only on relevant tag subsets, reducing memory usage and improving performance.",
      "description_length": 775,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Lead",
      "library": "rpmfile",
      "description": "This module handles parsing and constructing RPM package lead headers, which contain metadata about the package such as version, architecture, and signature type. It operates on the `t` record type defined in the parent module, using direct field access to serialize and deserialize binary RPM headers. Concrete use cases include extracting package name and version from an RPM file and validating signature types during package inspection.",
      "description_length": 440,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile",
      "library": "rpmfile",
      "description": "This module enables structured parsing and retrieval of RPM package metadata, exposing fields like name, version, dependencies, and checksums through typed accessors operating on binary data. It works with low-level RPM components such as lead, header, and signature sections, supporting operations like validating package integrity via magic bytes, querying metadata for inventory systems, or resolving dependencies in package managers. The header submodule decodes tag-value pairs into specific OCaml types, allowing extraction of structured data such as file lists and dependency rules, while the select submodule filters tags to reduce memory usage during parsing. Helpers for lead headers provide direct access to key package attributes like architecture and signature type, enabling efficient serialization and validation workflows.",
      "description_length": 838,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 838,
    "min_description_length": 305,
    "avg_description_length": 514.5555555555555,
    "embedding_file_size_mb": 0.033150672912597656
  }
}