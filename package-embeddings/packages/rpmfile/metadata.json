{
  "package": "rpmfile",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:31:55.750583",
  "modules": [
    {
      "module_path": "Rpmfile.Selector.All",
      "description": "Selects header and signature tags based on integer identifiers, returning true for matching tags. Operates on integer tag values to filter specific elements. Used to identify and process header and signature sections in structured data parsing.",
      "description_length": 244,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Selector.Base",
      "description": "Provides functions to filter header and signature tags based on integer identifiers, working with package metadata fields like version, release, arch, and summary. Processes data structures containing tag-specific information for package analysis. Used to extract relevant metadata during package inspection or validation workflows.",
      "description_length": 332,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Header.Entry",
      "description": "Provides functions to parse, validate, and serialize structured data entries, including parsing from strings, validating against schema constraints, and converting to JSON format. Works with custom record types that include fields for identifiers, timestamps, and arbitrary values. Used to process configuration entries in a system that requires strict data formatting and transformation.",
      "description_length": 388,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.Lead",
      "description": "Provides functions to parse and validate lead data, including extracting project type from structured input. Works with a record type containing fields for lead information and project type. Used to filter leads based on project type during pipeline processing.",
      "description_length": 261,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Header",
      "description": "Processes structured data entries by parsing from strings, validating against schema constraints, and serializing to JSON. Supports custom record types with fields for identifiers, timestamps, and arbitrary values. Enables data transformation workflows, such as converting a configuration entry to JSON or validating a timestamp against a defined schema. Allows for precise control over data formatting and integrity checks during system operations.",
      "description_length": 449,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Selector",
      "description": "Selects HTML header elements based on a numeric level, returning true for tags matching the specified hierarchy. Identifies signature tags using an integer identifier, filtering elements by their type code. Used to parse and categorize document structure during HTML processing.",
      "description_length": 278,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.D",
      "description": "Converts values from `Header.Entry.value` to specific types such as strings, integers, bytes, and lists. Provides combinators for sequencing decoding operations and handling arbitrary types. Used to parse structured data from header entries into application-specific representations.",
      "description_length": 283,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "rpmfile",
      "description": "Provides functions to extract specific metadata fields from RPM packages, including package name, version, and installation date. Works with binary RPM file data and structured metadata records parsed from the file header. Used to inspect package details during package management tasks or system auditing.",
      "description_length": 306,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile",
      "description": "manages structured data processing through a set of specialized functions, including parsing and validating lead information, transforming records into JSON, extracting HTML elements by hierarchy, and decoding header values into typed representations. It works with record types containing identifiers, timestamps, project types, and arbitrary values, enabling precise data manipulation and validation. Users can filter leads by project type, convert configuration entries to JSON, extract specific HTML tags, or decode header fields into application-specific types. These operations support data pipeline processing, document analysis, and configuration management.",
      "description_length": 666,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 666,
    "min_description_length": 244,
    "avg_description_length": 356.3333333333333,
    "embedding_file_size_mb": 0.033145904541015625
  }
}