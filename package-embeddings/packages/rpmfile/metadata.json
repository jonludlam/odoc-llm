{
  "package": "rpmfile",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:09:37.874141",
  "modules": [
    {
      "module_path": "Rpmfile.Selector.Base",
      "library": "rpmfile",
      "description": "This module defines predicates to filter base header and signature tags when processing RPM packages. It provides `select_header_tag` and `select_signature_tag` functions that determine which specific tag IDs to include during package parsing. These functions are used to limit parsing to essential metadata, such as package identity and signature information, when reading RPM files through a selector.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.Selector.All",
      "library": "rpmfile",
      "description": "This module provides predicate functions `select_header_tag` and `select_signature_tag` that accept integer tag values and return `true`, indicating all tags should be processed. It operates on RPM package headers and signatures by including every tag during parsing. Use this when extracting or inspecting all available metadata from RPM files, such as for debugging or full package analysis.",
      "description_length": 393,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Header.Entry",
      "library": "rpmfile",
      "description": "This module provides functions to read and manipulate individual header entries in an RPM file, such as extracting tag values and handling data offsets. It operates on the `record` type, which represents a single header entry with fields like tag, kind, offset, and count. Concrete use cases include parsing RPM metadata, extracting specific header fields for inspection, and navigating header data within an RPM package.",
      "description_length": 421,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Header",
      "library": "rpmfile",
      "description": "This module processes RPM file headers by parsing and organizing header entries into structured data. It works with the `t` type, which is a list of tuples containing integer keys and header entry values, alongside the `index` type for header metadata. It is used to extract and interpret RPM package metadata, such as package name, version, and dependencies, from binary RPM files.",
      "description_length": 382,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Selector",
      "library": "rpmfile",
      "description": "This module provides predicate functions `select_header_tag` and `select_signature_tag` that filter which RPM package header and signature tags to process during parsing. It works with RPM package data by accepting or rejecting specific tag IDs, enabling selective extraction of metadata. Use it to parse only essential or all available tags, such as when verifying signatures or inspecting package contents.",
      "description_length": 408,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile.D",
      "library": "rpmfile",
      "description": "This module provides functions to decode `Header.Entry.value` into specific OCaml types, including primitives like `int`, `char`, and `string`, as well as collections like `string list`. It supports direct extraction and conversion of RPM package metadata fields for consumption in type-safe contexts. Use cases include parsing package version numbers, timestamps, and dependency lists from RPM headers.",
      "description_length": 403,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile.Lead",
      "library": "rpmfile",
      "description": "This module handles parsing and constructing RPM package lead headers. It provides functions to read and write the lead structure, which includes metadata like version, package type, architecture, and signature type. Use this module when extracting or creating RPM files to access the initial metadata fields directly.",
      "description_length": 318,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile",
      "library": "rpmfile",
      "description": "This module provides functions to parse and extract structured metadata from RPM packages, handling components like lead headers, headers, and key-value fields. It supports decoding optional values, validating RPM signatures via magic bytes, and selectively processing header tags, enabling use cases such as package analysis, attribute filtering (e.g., name, version, checksums), and integration with package management systems. The operations work with structured OCaml types derived from RPM's binary format, using decoders and selectors to navigate header data efficiently.",
      "description_length": 577,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 577,
    "min_description_length": 318,
    "avg_description_length": 413.125,
    "embedding_file_size_mb": 0.11626720428466797
  }
}