{
  "package": "sentry",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-06-18T16:33:54.028774",
  "modules": [
    {
      "module_path": "Sentry.Exception.Mechanism",
      "description": "Encapsulates mechanism details for error reporting, including type, description, help link, and custom data. Operates on strings and maps for flexible configuration. Used to construct structured error mechanisms in crash reporting systems.",
      "description_length": 239,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Exception.Frame",
      "description": "Provides functions to construct and convert stack frame data with detailed location information, including file paths, line numbers, and context lines. Works with strings, integers, lists, and maps to represent debugging and error context. Used to generate structured stack frames for error reporting systems, capturing precise execution context during exceptions.",
      "description_length": 364,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sentry.Breadcrumb",
      "description": "Provides functions to construct and serialize breadcrumb records with specific metadata such as timestamp, message, category, level, and additional data. Works with custom types for log levels and a private record type containing structured event data. Used to generate navigation logs, HTTP request logs, and general breadcrumbs for error tracking systems.",
      "description_length": 357,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sentry.Client",
      "description": "Provides functions to upload events to the Sentry API using a DSN. Accepts Event.t structures and returns UUIDs or deferred values based on the upload method. Sends events synchronously with immediate completion or asynchronously with background processing.",
      "description_length": 257,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Config",
      "description": "Provides functions to retrieve the name and version strings of the Sentry client. Operates on string data types to expose configuration metadata. Used to identify the client in error reports and logs.",
      "description_length": 200,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Context",
      "description": "Provides functions to manage tags, extra data, module information, and breadcrumbs within a context. Works with strings, JSON values, and breadcrumb records to track event metadata. Used to enrich error reports with application-specific information and user navigation history.",
      "description_length": 277,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Dsn",
      "description": "Provides functions to parse and manipulate Sentry DSNs, including converting from strings and URIs, comparing DSNs, and generating S-expressions. Works with `Uri.t` and custom types `t` and `t'`, where `t` is an optional `t'`. Used to construct DSNs from environment variables or command-line arguments, and to extract event store URIs for sending error reports.",
      "description_length": 362,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sentry.Event",
      "description": "Provides functions to construct and serialize event data for Sentry, including creating events with specific metadata like timestamps, levels, and exceptions, and converting events to JSON strings for upload. Works with types such as Uuidm.t, Core_kernel.Time.t, Context.t, and Exception.t. Used to generate structured event payloads for error tracking and monitoring systems.",
      "description_length": 376,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Exception",
      "description": "captures error mechanisms and stack frame data for detailed exception reporting, combining error types, descriptions, and stack trace information. it handles strings, maps, and lists to structure errors and debugging context, enabling precise representation of crashes. operations include building error objects with custom data and constructing stack frames with file, line, and context details. examples include generating a stack trace with line numbers and attaching error-specific metadata to crash reports.",
      "description_length": 512,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Platform",
      "description": "Converts a platform identifier to an S-expression, wraps a string into a platform-specific type, and unwraps the type back to a string. Works with a polymorphic variant type representing different platform identifiers. Used to serialize platform data for configuration files and to safely convert between string representations and typed values in system diagnostics.",
      "description_length": 367,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sentry.Sdk",
      "description": "Provides functions to construct and serialize SDK information, including a constructor that takes name, version, and optional integrations, and a converter to a payload structure. Works with string sets and a private record type encapsulating SDK metadata. Used to generate structured SDK data for error reporting systems.",
      "description_length": 322,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry.Severity_level",
      "description": "Provides conversion to and from S-expressions, wrapping strings into a tagged type, and unwrapping tagged values back to strings. Works with a polymorphic variant type representing different severity levels. Used to safely encode and decode severity information in structured data formats.",
      "description_length": 289,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "sentry",
      "description": "Handles event submission and error tracking with Sentry via Async. Processes event data, stack traces, and context information. Used to report exceptions, log messages, and capture breadcrumbs during asynchronous operations.",
      "description_length": 224,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sentry",
      "description": "Collects, processes, and transmits error and diagnostic data through functions that build and serialize events, breadcrumbs, and SDK metadata, while managing tags, context, and DSNs. Operates on types like Event.t, Context.t, Uuidm.t, and custom DSN and platform representations, enabling structured data manipulation and serialization. Supports creating detailed error reports with stack traces, attaching metadata, and uploading events to Sentry via DSNs. Examples include generating navigation breadcrumbs, enriching events with application context, and converting platform identifiers to S-expressions.",
      "description_length": 606,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 606,
    "min_description_length": 200,
    "avg_description_length": 339.42857142857144,
    "embedding_file_size_mb": 0.051296234130859375
  }
}