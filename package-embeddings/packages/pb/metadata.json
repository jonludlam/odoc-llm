{
  "package": "pb",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:53:14.868469",
  "modules": [
    {
      "module_path": "Pb.Wire_type",
      "library": "pb",
      "description": "This module defines a variant type representing Protocol Buffers wire types, used for encoding and decoding field values in the wire format. It provides conversions to and from integers and strings, along with comparison and pretty-printing functions. Concrete use cases include determining how to serialize or deserialize specific field types such as integers, floating-point numbers, strings, and embedded messages.",
      "description_length": 417,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pb",
      "library": "pb",
      "description": "This module enables defining and manipulating structured data formats using Protocol Buffers encodings, supporting operations like field serialization/deserialization with variable-length integers, zigzag encoding, fixed-size primitives, and nested message composition. It works with scalar OCaml types (integers, strings, floats) and composite types representing hierarchical messages or enums, leveraging Angstrom for parsing and Faraday for binary generation. Typical applications include implementing network protocols, compact data serialization for storage, or processing schema-driven binary formats with embedded submessages.",
      "description_length": 633,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 417,
    "avg_description_length": 525.0,
    "embedding_file_size_mb": 0.02939605712890625
  }
}