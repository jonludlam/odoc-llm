{
  "package": "earley",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-14T23:29:17.146166",
  "modules": [
    {
      "module_path": "Earley_str",
      "library": "earley.str",
      "description": "This module integrates `Str` regular expressions with Earley parsing by providing functions to create grammars from regex patterns and handle buffer-based input. It supports operations like `regexp`, which builds a grammar from a regex and maps capture groups to values, and `blank_regexp`, which generates a blanking function for skipping input matching a regex. Concrete use cases include parsing structured text formats where tokenization relies on regex-based rules, such as parsing log lines or configuration files with pattern-based fields.",
      "description_length": 546,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Input.Tbl",
      "library": "earley.core",
      "description": "This module implements an imperative hash table optimized for efficiency, designed to store and retrieve values associated with input buffers and integer keys. It supports operations for creating tables, adding and retrieving entries, clearing tables, and iterating over stored values. Concrete use cases include caching preprocessed input data or mapping buffer positions to computed values during parsing.",
      "description_length": 407,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Keywords.Make",
      "library": "earley.core",
      "description": "This module manages keyword reservations and provides parsers for matching specific strings in a grammar. It works with strings and integrates with a grammar definition system to handle reserved words and special identifiers. Use it to define keywords that are rejected in certain contexts or to parse identifiers that must not conflict with predefined terms.",
      "description_length": 359,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Utils.Fixpoint",
      "library": "earley.core",
      "description": "This module computes fixpoints for values that depend on other values, using mutable references to handle cycles. It supports constructing fixpoint values from constants, functions, and lists, with operations to force evaluation or update dependencies. Concrete use cases include resolving recursive definitions in configuration systems or evaluating interdependent expressions in domain-specific languages.",
      "description_length": 407,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Earley.WithPP",
      "library": "earley.core",
      "description": "This module extends the Earley parsing library with preprocessor support, redefining `parse_string`, `parse_channel`, and `parse_file` to incorporate preprocessing via the `PP` module. It operates on grammars and input sources such as strings, files, and channels, applying the preprocessor before parsing. Concrete use cases include parsing files with embedded directives or transforming input syntax before applying a grammar, such as handling C-style includes or macro expansion.",
      "description_length": 482,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Input.OrdTbl",
      "library": "earley.core",
      "description": "This module implements an ordered table for efficiently managing and retrieving elements associated with positions in an input buffer. It supports adding entries with a buffer position, popping the earliest entries, iterating over values, and checking emptiness. It is used to track and process input data in ordered stages, such as maintaining symbol tables or event logs tied to input positions.",
      "description_length": 397,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Utils.EqHashtbl",
      "library": "earley.core",
      "description": "This module implements a hash table with equality-based keys, supporting creation with a specified size, adding and retrieving key-value pairs, and iterating over stored entries. It works with arbitrary key and value types `'a` and `'b`, using equality rather than hashing for key comparison. Useful for cases where keys require deep comparison, such as symbol tables in parsing or semantic analysis.",
      "description_length": 400,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Input.WithPP",
      "library": "earley.core",
      "description": "This module provides functions to create input buffers from various sources\u2014functions, channels, files, and strings\u2014applying a preprocessor to the input data. It works with input data types such as strings and channels, producing preprocessed `Earley_core.Input.buffer` values. Concrete use cases include loading and preprocessing grammar input from files or streams before parsing.",
      "description_length": 382,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Keywords",
      "library": "earley.core",
      "description": "This module handles keyword reservations and string matching within a grammar system. It provides functions to define and parse specific string tokens, ensuring reserved words are correctly identified and excluded from other contexts like identifiers. Use it to enforce keyword uniqueness and build parsers that distinguish between identifiers and fixed language terms.",
      "description_length": 369,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Blanks",
      "library": "earley.core",
      "description": "This module provides functions to define and manipulate blank-parsing behaviors in the context of Earley parsing. It works with character sets and string delimiters to handle spacing, custom blank characters, and line comments. Concrete use cases include configuring parsers to skip whitespace, ignore specific character sets, or handle comment syntax like `//` or `#` in custom languages.",
      "description_length": 389,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Earley_core.Utils",
      "library": "earley.core",
      "description": "Implements a polymorphic equality-based hash table and a fixpoint computation system. The hash table supports key-value storage and iteration with structural equality checks, while the fixpoint module resolves cyclic dependencies in recursive data structures. Useful for managing symbol tables with deep equality checks and evaluating interdependent expressions in configuration or language processing tasks.",
      "description_length": 408,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Earley",
      "library": "earley.core",
      "description": "This module offers parsing primitives for character and string recognition, grammar composition through sequence, repetition, and alternatives, and analysis tools for checking grammar properties like empty input acceptance. It operates on parameterized grammar structures with input position tracking, integrating preprocessing support for token handling, and enables efficient parser development for domain-specific languages and resolving ambiguous grammars with prioritized rules.",
      "description_length": 483,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core.Input",
      "library": "earley.core",
      "description": "This module offers buffer management with preprocessing capabilities for input sources such as files, strings, and channels, supporting precise position tracking, line information, and UTF-8 column calculations. It provides ordered and hashed data structures to associate values with buffer positions, enabling efficient caching and symbol tracking in scenarios like parsing or text analysis. The operations emphasize performance-critical tasks through optimized comparison and storage mechanisms tailored for buffer position-based data.",
      "description_length": 537,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Earley_core.Regexp",
      "library": "earley.core",
      "description": "This module implements a compact regular expression engine with support for character literals, character sets, sequences, alternatives, optional and repeated patterns, and named captures. It provides operations to parse strings into regexps, check if a regexp accepts empty input, determine leading characters, and perform low-level matching with position tracking. Concrete use cases include lexing input streams, validating string formats, and extracting substrings based on structured patterns.",
      "description_length": 498,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Earley_core.Charset",
      "library": "earley.core",
      "description": "This module implements efficient character set operations using a compact internal representation. It supports charset construction through ranges, unions, and complements, with precise membership testing and controlled in-place modifications. Concrete use cases include parsing character-based grammars, managing token sets in lexers, and optimizing character classification in text processing.",
      "description_length": 395,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Earley_core",
      "library": "earley.core",
      "description": "This module implements a core parsing framework with support for context-aware grammars, character set manipulation, and efficient input buffering. It includes components for defining custom blank-parsing behaviors, handling keyword reservations, and building regular expressions with named captures and optimized matching. Concrete use cases include developing domain-specific language parsers with custom spacing rules, enforcing keyword recognition in grammars, and performing efficient tokenization and string analysis with precise position tracking.",
      "description_length": 554,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 554,
    "min_description_length": 359,
    "avg_description_length": 438.3125,
    "embedding_file_size_mb": 0.23230457305908203
  }
}