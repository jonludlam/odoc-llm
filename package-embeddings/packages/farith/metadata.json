{
  "package": "farith",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:22.715836",
  "modules": [
    {
      "module_path": "Farith.Mode",
      "library": "farith",
      "description": "This module defines and manipulates rounding modes for floating-point arithmetic operations, including nearest even, zero, down, up, and nearest away. It provides operations for equality checking, comparison, hashing, and pretty-printing of rounding mode values. Use cases include configuring rounding behavior in numerical computations and ensuring consistent floating-point results across different platforms.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Farith.F",
      "library": "farith",
      "description": "This module implements a comprehensive set of floating-point arithmetic operations, including core calculations (addition, multiplication, fused multiply-add), comparisons, classification predicates (NaN, infinity, subnormal checks), and conversions between numeric representations (integers, rationals, bit patterns). It operates on a customizable floating-point type `t` with user-defined precision and exponent parameters, adhering to IEEE 754 semantics for rounding modes and special value handling. The functionality supports formal verification tasks requiring precise control over floating-point behavior, such as numerical analysis or theorem proving involving configurable-precision arithmetic.",
      "description_length": 703,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Farith.Classify",
      "library": "farith",
      "description": "This module defines a variant type for classifying floating-point values into distinct categories such as positive/negative normal, subnormal, zero, infinity, and NaN. It provides comparison, equality checks, hashing, and string formatting operations tailored to these classifications. It is used to analyze and distinguish floating-point behaviors in arithmetic operations and numerical analysis tasks.",
      "description_length": 403,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Farith.I",
      "library": "farith",
      "description": "This module implements interval arithmetic for floating-point numbers, providing operations like addition, comparison, and intersection for intervals. It works with intervals represented by the type `t`, which captures bounds and precision parameters. Concrete use cases include precise numerical analysis, verified computations, and handling rounding modes in interval-based calculations.",
      "description_length": 389,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Farith",
      "library": "farith",
      "description": "This module provides precise floating-point arithmetic with configurable rounding modes, classifications, and interval operations. It supports core calculations, comparisons, conversions, and special value handling on a customizable floating-point type `t`, with concrete operations for addition, multiplication, classification, and interval-based arithmetic. Rounding modes control arithmetic behavior, while classifications distinguish floating-point values for analysis, and intervals enable verified numerical computations. Examples include configuring rounding for cross-platform consistency, verifying numerical algorithms, and performing IEEE 754-compliant simulations.",
      "description_length": 676,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 703,
    "min_description_length": 389,
    "avg_description_length": 516.4,
    "embedding_file_size_mb": 0.018602371215820312
  }
}