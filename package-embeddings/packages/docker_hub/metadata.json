{
  "package": "docker_hub",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:20.866001",
  "modules": [
    {
      "module_path": "Docker_hub.Platform",
      "library": "docker_hub",
      "description": "This module defines a type `t` representing a platform in Docker Hub, with fields for operating system, architecture, and an optional variant. It provides `equal` and `compare` functions for testing equality and ordering between platform values. This module is used to manage and compare platform specifications when handling multi-architecture Docker images.",
      "description_length": 359,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Image",
      "library": "docker_hub",
      "description": "This module parses and constructs Docker image identifiers, handling names, tags, and optional content-addressable digests. It provides operations to extract and combine these components from strings, with explicit handling for presence or absence of digests. Concrete use cases include validating image references, constructing pull/push URLs, and normalizing image identifiers for comparison.",
      "description_length": 394,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker_hub.Manifest",
      "library": "docker_hub",
      "description": "This module handles fetching and pretty-printing Docker image manifests using an image digest and authentication token. It defines a manifest type and provides functions to retrieve manifests asynchronously and format them for display. Concrete use cases include inspecting Docker image metadata and validating manifest contents during container image processing.",
      "description_length": 363,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker_hub.Manifests",
      "library": "docker_hub",
      "description": "Handles fetching and parsing of Docker image manifests, providing access to platform-specific digests. Works with Docker image tags, authentication tokens, and manifest data structures. Used to retrieve manifest details for multi-architecture images from Docker Hub.",
      "description_length": 266,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Token",
      "library": "docker_hub",
      "description": "This module handles authentication tokens for Docker Hub images. It provides functions to fetch a token for a given image name and pretty-print the token. The main data type is `t`, representing a Docker Hub authentication token. A concrete use case is retrieving and displaying tokens needed to access private Docker images programmatically.",
      "description_length": 342,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Config",
      "library": "docker_hub",
      "description": "This module handles container image configuration data retrieved from Docker Hub. It provides functions to fetch configuration using a manifest and authentication token, extract environment variables, and access platform-specific details. The module works with Docker image configurations, including platform information and environment settings, enabling deployment and runtime customization workflows.",
      "description_length": 403,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker_hub",
      "library": "docker_hub",
      "description": "This module provides low-level access to Docker Hub resources, enabling authentication, manifest retrieval, and image layer handling. It works with structured data like image manifests, platform metadata, and configuration files to support operations such as fetching a container's root filesystem, inspecting multi-architecture image details, and extracting runtime environment settings. Key types include platform descriptions, image identifiers with tags and digests, authentication tokens, and parsed manifests. Specific workflows include programmatically pulling and validating Docker images, normalizing image references for comparison, and retrieving platform-specific digests for multi-arch deployments.",
      "description_length": 711,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 711,
    "min_description_length": 266,
    "avg_description_length": 405.42857142857144,
    "embedding_file_size_mb": 0.02585601806640625
  }
}