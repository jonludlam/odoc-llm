{
  "package": "docker_hub",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:02:01.130883",
  "modules": [
    {
      "module_path": "Docker_hub.Platform",
      "library": "docker_hub",
      "description": "This module defines a platform type with fields for operating system, architecture, and an optional variant. It provides equality and comparison operations to check and sort platform values. Use this module when handling multi-architecture Docker images to compare or match platform-specific configurations.",
      "description_length": 307,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Token",
      "library": "docker_hub",
      "description": "This module manages authentication tokens for Docker Hub images. It provides a function to fetch a token given an image name, returning a result in an Lwt promise, and a pretty-printer for displaying token data. The primary data type is `t`, representing a Docker Hub authentication token. A concrete use case is retrieving and displaying tokens needed to access private Docker Hub images programmatically.",
      "description_length": 406,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Config",
      "library": "docker_hub",
      "description": "This module handles container image configuration data retrieved from Docker Hub. It provides functions to fetch configuration blobs using a manifest and authentication token, extract environment variables, and access platform-specific details like architecture and OS. A typical use case involves inspecting image metadata during deployment workflows or analyzing image properties for compatibility checks.",
      "description_length": 407,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Image",
      "library": "docker_hub",
      "description": "This module parses and constructs Docker image identifiers, handling names, tags, and optional content-addressable digests. It provides operations to extract and combine these components from strings, with explicit handling for presence or absence of digests. Concrete use cases include processing image references for Docker Hub API interactions, validating image identifiers, and formatting image metadata for logging or configuration.",
      "description_length": 437,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker_hub.Manifests",
      "library": "docker_hub",
      "description": "This module handles fetching and parsing Docker image manifests, providing access to platform-specific image layers. It works with manifest data retrieved from Docker Hub, including platform details and digest identifiers. Use it to retrieve manifest information for multi-architecture images or inspect image layer metadata.",
      "description_length": 325,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub.Manifest",
      "library": "docker_hub",
      "description": "This module handles fetching and displaying Docker image manifests using a digest and authentication token. It defines a manifest type and provides functions to retrieve manifests asynchronously and pretty-print them. Use it to inspect or validate Docker image metadata directly from a registry.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker_hub",
      "library": "docker_hub",
      "description": "This module handles Docker image metadata and artifacts, providing functions to authenticate, fetch, and inspect manifests, configurations, and root filesystems. It works with Docker image identifiers, manifests, and authentication tokens to support concrete use cases like retrieving multi-architecture image metadata, validating image layers, and fetching container configurations for deployment analysis. Key operations include token retrieval, manifest parsing, platform-specific image configuration extraction, and downloading root filesystems using authenticated registry access.",
      "description_length": 585,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 585,
    "min_description_length": 295,
    "avg_description_length": 394.57142857142856,
    "embedding_file_size_mb": 0.10188674926757812
  }
}