{
  "package": "uutf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:10.540025",
  "modules": [
    {
      "module_path": "Uutf.Manual",
      "library": "uutf",
      "description": "This module connects decoders and encoders to byte buffers for manual data transfer. It provides `src` to supply input bytes to a decoder and `dst` to allocate output space for an encoder, both operating on specified ranges of byte buffers. Use it to process Unicode data in custom IO loops, such as reading UTF-encoded data from a file descriptor or writing encoded characters to a network buffer.",
      "description_length": 398,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uutf.Buffer",
      "library": "uutf",
      "description": "This module provides functions to encode Unicode characters into UTF-8, UTF-16BE, and UTF-16LE formats and append them to OCaml buffer objects. It operates directly on `Stdlib.Buffer.t` and `Stdlib.Uchar.t` types, enabling efficient character-by-character encoding without intermediate data structures. Concrete use cases include building UTF-encoded text incrementally for output streams, network protocols, or file formats requiring specific Unicode encodings.",
      "description_length": 462,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uutf.String",
      "library": "uutf",
      "description": "This module folds over UTF-encoded strings, processing characters sequentially while tracking their positions. It supports UTF-8, UTF-16BE, and UTF-16LE encodings, handling BOM markers and allowing optional byte ranges. Use it to parse or analyze encoded string data, such as reading Unicode files or processing network streams.",
      "description_length": 328,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uutf",
      "library": "uutf",
      "description": "This module handles Unicode encoding and decoding across UTF-8 and UTF-16 variants, supporting non-blocking, streaming operations that process data incrementally. It includes decoders that track character positions and newline normalization, and encoders that write directly to buffers, enabling efficient character-by-character transformations. Child modules connect these codecs to byte buffers for custom IO, fold over encoded strings to extract characters, and append encoded characters to buffers. For example, you can decode UTF-8 data from a file descriptor in a manual loop, fold over a UTF-16 string to analyze its characters, or encode Unicode text directly into a buffer for network transmission.",
      "description_length": 707,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 707,
    "min_description_length": 328,
    "avg_description_length": 473.75,
    "embedding_file_size_mb": 0.014941215515136719
  }
}