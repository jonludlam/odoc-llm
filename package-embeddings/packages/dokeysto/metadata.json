{
  "package": "dokeysto",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:11.063141",
  "modules": [
    {
      "module_path": "Dokeysto.Db_gen.RO",
      "library": "dokeysto",
      "description": "This module implements a read-only interface for accessing persistent hash tables stored on disk, using a key-value storage backend provided by the `KV` module. It supports opening existing databases, checking key membership, retrieving values, and iterating or folding over key-value pairs. Typical use cases include efficiently querying large, immutable datasets stored in files without loading them entirely into memory.",
      "description_length": 423,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dokeysto.Db_gen.RW",
      "library": "dokeysto",
      "description": "This module implements a persistent hash table with read-write capabilities, using a key-value storage system backed by disk files. It supports operations like adding, replacing, removing, and retrieving key-value pairs, as well as iterating and folding over all stored entries. Use this module to manage large, mutable datasets that need to persist across program executions, such as caching systems or on-disk dictionaries.",
      "description_length": 425,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dokeysto.Db.RW",
      "library": "dokeysto",
      "description": "This module implements a persistent hash table with read-write access, storing key-value pairs in a file-backed database. It supports operations like adding, replacing, removing, and retrieving bindings, as well as iterating and folding over all entries. Use cases include maintaining a durable key-value store across program restarts and efficiently managing large datasets that fit on disk.",
      "description_length": 392,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Db.RO",
      "library": "dokeysto",
      "description": "This module implements a read-only interface for accessing persistent hash tables stored in files. It supports opening existing databases, checking key existence, retrieving values by key, and iterating or folding over key-value pairs. Use cases include efficiently querying large, disk-based datasets without modifying them, such as serving static configuration or lookup tables in applications.",
      "description_length": 396,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Db_gen.Key_val",
      "library": "dokeysto",
      "description": "This module defines functions for converting keys and values to and from strings. It works with any types `'k` and `'v` that support bidirectional string serialization. Concrete use cases include persisting key-value pairs to a file or transmitting them over a network.",
      "description_length": 269,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dokeysto.Db_gen",
      "library": "dokeysto",
      "description": "This module provides persistent hash tables for mapping arbitrary keys to arbitrary values using disk-backed storage, offering separate read-only and read-write interfaces. It supports efficient lookups, inserts, updates, and iteration, with key-value pairs serialized to strings for storage in files or transmission over networks. The read-only interface allows querying and traversal of existing datasets without full in-memory loading, while the read-write interface enables mutation and persistence of dynamic data across runs. Examples include building durable caches, querying large immutable datasets, and transmitting serialized key-value pairs over a network.",
      "description_length": 668,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Utls",
      "library": "dokeysto",
      "description": "Handles file input/output operations for serializing and deserializing values. Works with filenames as strings and arbitrary OCaml values using standard channels. Use to read from or write to files safely, ensuring channels close properly after operations.",
      "description_length": 256,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Db",
      "library": "dokeysto",
      "description": "This module provides persistent hash tables for disk-based key-value storage, supporting both read-only and read-write access. It allows efficient lookups, inserts, iteration, and atomic updates, with concrete operations for opening, querying, modifying, and traversing databases. The read-write submodule enables durable changes across sessions, such as caching dynamic data or managing configuration updates, while the read-only submodule supports fast, non-modifying access to static datasets like lookup tables or precomputed indexes.",
      "description_length": 538,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Internal",
      "library": "dokeysto",
      "description": "This module implements a key-value store with operations for creating, opening, and closing databases, managing data and index files, and performing atomic reads, writes, and deletions. It works with a `db` type that holds file descriptors and an in-memory hash table mapping keys to positions. Use cases include persistent storage for string-based keys and values, such as caching, configuration storage, or lightweight database systems.",
      "description_length": 438,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto.Common",
      "library": "dokeysto",
      "description": "This module defines basic types for representing file names and byte positions within files. It includes operations for manipulating position values, such as shifting offsets and extending lengths. These types and functions are used to support precise file region tracking in parsing and analysis tasks.",
      "description_length": 303,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dokeysto.Gen_gen",
      "library": "dokeysto",
      "description": "This module provides bidirectional conversion functions between strings and abstract key and value types. It supports serialization and deserialization of keys and values, enabling use cases like reading and writing key-value pairs from text-based storage or network protocols. The module works directly with string, 'k, and 'v types, assuming appropriate implementations for each conversion function.",
      "description_length": 401,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dokeysto",
      "library": "dokeysto",
      "description": "This module implements a disk-backed key-value store with separate read-only and read-write interfaces, enabling efficient storage, retrieval, and mutation of arbitrary key-value pairs. It supports serialization of keys and values to strings, atomic updates, iteration, and precise file positioning for direct access to stored data. Use it to build persistent caches, manage configuration data across sessions, or transmit serialized key-value pairs over a network. The system combines in-memory performance with durable storage by mapping keys to file offsets and maintaining data integrity through structured serialization and safe I/O operations.",
      "description_length": 649,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 668,
    "min_description_length": 256,
    "avg_description_length": 429.8333333333333,
    "embedding_file_size_mb": 0.04399681091308594
  }
}