{
  "package": "resto-directory",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:23.244149",
  "modules": [
    {
      "module_path": "Resto_directory.Make.Service",
      "description": "handles HTTP method-specific service operations, including post, delete, put, and patch, with support for additional parameters in a payload. it defines functions that process requests and responses, enabling interaction with APIs beyond simple retrieval. operations include encoding and decoding payloads for methods requiring extra data. examples include submitting form data via post or updating resources with put.",
      "description_length": 418,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_directory.Answer",
      "description": "Provides functions to create asynchronous values and streams from single outputs or stream structures. Operates with Lwt-based asynchronous types and stream records containing a value and a continuation. Used to wrap results into a monadic structure for non-blocking I/O or event-driven processing.",
      "description_length": 298,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_directory.Make",
      "description": "Provides functions to create and transform typed values, including converting between types with bidirectional mappings, generating schema definitions, and encoding request and response descriptions. Operates on polymorphic type 'a t and schema, which represents structured data definitions. Used to define and serialize API request and response formats with explicit type conversions.",
      "description_length": 385,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "resto-directory",
      "description": "Provides functions to define and handle HTTP/JSON RPC endpoints with type-safe request and response structures. Works with custom types representing service endpoints, request parameters, and JSON-encoded data. Used in the Tezos project to implement secure, structured RPCs for blockchain interactions.",
      "description_length": 302,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_directory",
      "description": "manages service directories for server creation, offering asynchronous value and stream handling alongside type-safe data serialization. it supports Lwt-based async operations and polymorphic type transformations with schema definitions. users can wrap I/O results in monadic structures and define API contracts with explicit type mappings. examples include non-blocking request processing and generating schema-based request/response encoders.",
      "description_length": 444,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 444,
    "min_description_length": 298,
    "avg_description_length": 369.4,
    "embedding_file_size_mb": 0.018587112426757812
  }
}