{
  "package": "leaves",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:31:26.058692",
  "modules": [
    {
      "module_path": "Leaves.Cursor",
      "description": "Provides functions to create, update, and render a blinking cursor with customizable style and frame rate. Operates on a `t` type representing the cursor state, and interacts with event data and text styling. Used to display a visible or blinking cursor in a text interface, adjusting appearance based on focus and event triggers.",
      "description_length": 330,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Leaves.Forms",
      "description": "Generates HTML input elements for checkboxes, taking a boolean to determine checked state and a string for the input name. Works with boolean values and strings to construct form elements. Used to dynamically create user selection interfaces in web forms.",
      "description_length": 255,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Fps",
      "description": "Provides functions to create and manage frame rate synchronization objects. Accepts integer and float inputs to define target frame rates and tracks time to determine if a new frame should be processed or skipped. Used in game loops to control update frequency based on specified frame rates.",
      "description_length": 292,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Progress",
      "description": "Provides methods to create and manipulate a progress bar with customizable characters and color schemes, including incrementing progress and checking completion status. Operates on a custom `t` type representing the state of a progress bar, using floats for progress percentage and strings for visual elements. Used to generate terminal-based progress indicators with visual feedback during long-running processes.",
      "description_length": 414,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Spinner",
      "description": "Provides pre-defined animated sprite representations for visual feedback and loading indicators. Works with the Sprite.t data type to render various graphical elements like lines, dots, pulses, and icons. Used to display interactive loading states, progress indicators, and UI animations in real-time applications.",
      "description_length": 314,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Sprite",
      "description": "Creates a sprite from an array of frame identifiers and configuration parameters like frame rate and looping behavior. Updates the sprite's state based on a given or current time, advancing the frame as needed. Renders the current frame of the animation as a string for display.",
      "description_length": 278,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Text_input",
      "description": "Creates and manages text input components with customizable styling, cursor, and prompt. Accepts and modifies text content, tracks current input, and renders it as a string. Processes events to update cursor position and text, and allows direct text replacement.",
      "description_length": 262,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "leaves",
      "description": "Manages application state and user input through a cycle of updates and views, handling events and rendering terminal output. It operates on a model type representing the app's state, along with messages to trigger state changes. Used to create interactive command-line tools like progress bars, text-based menus, and real-time data dashboards.",
      "description_length": 344,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Leaves",
      "description": "Manages interactive text interfaces with cursor control, form elements, and visual feedback. Supports boolean and string inputs for checkboxes, frame rate control for animations, and progress tracking with custom visual elements. Handles sprite animations, text input rendering, and dynamic UI updates based on event data and time. Enables creation of responsive terminals with blinking cursors, progress bars, and animated loading indicators.",
      "description_length": 443,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 443,
    "min_description_length": 255,
    "avg_description_length": 325.77777777777777,
    "embedding_file_size_mb": 0.03317070007324219
  }
}