{
  "package": "leaves",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:03:06.755557",
  "modules": [
    {
      "module_path": "Leaves.Progress",
      "library": "leaves",
      "description": "Handles rendering and updating progress bars with customizable appearance, including characters and colors. Operates on a stateful `t` type that tracks progress percentage and display properties. Useful for visualizing file download/upload progress or long-running computations in terminal interfaces.",
      "description_length": 301,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Text_input",
      "library": "leaves",
      "description": "This module implements a text input component that handles user interaction, rendering, and text manipulation. It works with strings and event streams to support real-time editing, cursor control, and optional styling. Concrete use cases include building form fields, search bars, and interactive command-line interfaces where user input needs to be dynamically processed and displayed.",
      "description_length": 386,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Spinner",
      "library": "leaves",
      "description": "This module provides a collection of animated loading indicators and status visuals as sprite values. Each value represents a distinct visual style, including spinners, pulsing dots, progress meters, and themed icons like globes or hamburgers. These sprites can be directly rendered in user interfaces to indicate processing states, network activity, or task progression.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Fps",
      "library": "leaves",
      "description": "This module manages frame rate synchronization for real-time applications. It provides functions to create a frame rate controller from integers or floats and to update the controller's state to determine if a new frame should be rendered or skipped. It works with a custom `t` type that tracks timing internally, using `Ptime.t` for time measurements. Use this module in games or animations to limit rendering to a target frame rate and handle timing drift.",
      "description_length": 458,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Cursor",
      "library": "leaves",
      "description": "This module implements a text cursor with configurable style, blinking behavior, and event-driven updates. It works with strings and event streams to control cursor visibility and position, particularly useful for terminal-based text input interfaces. Functions allow creating, updating, focusing, and rendering the cursor with custom styles and blink rates.",
      "description_length": 358,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Sprite",
      "library": "leaves",
      "description": "This module manages animated sprites using arrays of string frames and a frames-per-second setting. It supports creating sprites with configurable frame rates and looping behavior, updating their state based on time, and rendering the current frame. It is useful for terminal-based animations where visual frames are represented as strings.",
      "description_length": 340,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Forms",
      "library": "leaves",
      "description": "Generates an HTML checkbox input element with an optional checked state and a specified name. Works with boolean values and string identifiers to produce form markup. Useful for rendering form controls in web applications where user input requires binary selection.",
      "description_length": 265,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves",
      "library": "leaves",
      "description": "This module provides components for building interactive terminal and web interfaces with support for text input, forms, animations, and progress visualization. It includes tools for managing frame rates, rendering animated sprites and loading indicators, handling text input with cursors, and generating HTML form elements. Use it to implement command-line tools with rich text interaction, real-time terminal animations, and web forms with binary input controls.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 464,
    "min_description_length": 265,
    "avg_description_length": 367.875,
    "embedding_file_size_mb": 0.11630535125732422
  }
}