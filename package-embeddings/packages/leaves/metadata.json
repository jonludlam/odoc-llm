{
  "package": "leaves",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:27.169298",
  "modules": [
    {
      "module_path": "Leaves.Progress",
      "library": "leaves",
      "description": "This module implements a progress bar generator with customizable appearance and behavior. It supports operations to create a progress bar with specified width, characters, and color styling, increment its progress, and render its current visual state. The progress bar tracks completion percentage and can be reset or checked for completion.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Text_input",
      "library": "leaves",
      "description": "This module implements a text input component that supports editing operations like inserting characters, moving the cursor, and rendering the current state. It works with a custom `t` type representing the input state, including text content, cursor position, and optional styling. Concrete use cases include handling user input in a terminal UI or building interactive command-line interfaces with editable fields.",
      "description_length": 416,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Cursor",
      "library": "leaves",
      "description": "This module implements a blinking cursor for text input, managing visibility and styling. It provides functions to create, update, and render a cursor with customizable blink rate and display style. Use it to visualize text entry in interactive terminals or user interfaces.",
      "description_length": 274,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Spinner",
      "library": "leaves",
      "description": "Contains pre-defined animated sprites for terminal UIs, such as loading indicators and status visuals. Each value represents a distinct animation pattern rendered in the terminal. Useful for displaying progress, waiting states, or visual feedback in command-line applications.",
      "description_length": 276,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Fps",
      "library": "leaves",
      "description": "This module manages frame rate synchronization using a custom type `t` representing a target frame rate. It provides `of_int` and `of_float` to create frame rate values from numeric inputs, and `tick` to update the internal clock and determine if a frame should be rendered or skipped. It is used to control timing in animation or game loops where precise frame pacing is required.",
      "description_length": 381,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Sprite",
      "library": "leaves",
      "description": "This module manages animated sprites using arrays of string frames and time-based updates. It supports creating sprites with custom frame rates and looping behavior, advancing their state with time updates, and rendering the current frame as a string. It is used to display timed sequences of text-based visuals, such as animations in a terminal interface.",
      "description_length": 356,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves.Forms",
      "library": "leaves",
      "description": "Generates an HTML checkbox input element with an optional checked state and a specified name. Works with boolean values and strings to represent form input attributes. Useful for rendering form controls in web applications where user input is collected through checkboxes.",
      "description_length": 272,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Leaves",
      "library": "leaves",
      "description": "This module combines components for building interactive terminal and web interfaces with real-time visual feedback. It provides data types for tracking progress, text input state, frame timing, and animated visuals, along with operations to manipulate and render them. You can create progress bars, animated loading indicators, editable text fields with blinking cursors, and HTML checkboxes, all with customizable styling and behavior. Specific uses include terminal UIs with dynamic input handling, frame-rate-controlled animations, and web form elements.",
      "description_length": 558,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 558,
    "min_description_length": 272,
    "avg_description_length": 359.375,
    "embedding_file_size_mb": 0.029516220092773438
  }
}