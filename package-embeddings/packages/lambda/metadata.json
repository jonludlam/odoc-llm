{
  "package": "lambda",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:29:48.327447",
  "modules": [
    {
      "module_path": "Lambda.Bool",
      "description": "Provides functions to convert between boolean values and lambda terms, check if a term is a boolean, and retrieve the boolean value from a term. Works with `L.term` and `bool` types. Used to encode and decode boolean logic within a lambda calculus representation.",
      "description_length": 263,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambda.Church",
      "description": "Converts integers to and from lambda-encoded Church numerals, checks if a term represents a Church numeral, and attempts to normalize arbitrary terms into Church form by adjusting variable bindings. Operates on terms from the L module, which represent lambda calculus expressions. Useful for verifying numerical encodings in lambda calculus implementations and transforming expressions for further evaluation.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambda.L",
      "description": "Provides functions to analyze and manipulate lambda terms, including extracting free variables as a set or list, converting terms to strings, applying \u03b7- and \u03b1-conversions, and performing \u03b2-reduction with control over iteration limits. Operates on a custom `term` type representing lambda expressions and uses `string set` and `string list` to track variable occurrences. Enables substitution of variables, checking for reducible expressions, and determining term length.",
      "description_length": 471,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Lexer",
      "description": "Processes input streams to generate tokens according to defined lexical rules. Operates on `Lexing.lexbuf` and returns `Parser.token` values. Used to parse source code by breaking it into structured elements like keywords, identifiers, and operators.",
      "description_length": 250,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Parse",
      "description": "Parses a string into a lambda term, raising an error on invalid input. Works with raw string data and internal term representations. Used to convert user-provided lambda expressions into structured abstract syntax trees for evaluation.",
      "description_length": 235,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Parser",
      "description": "Parses a stream of tokens into an abstract syntax tree represented by L.term. It processes input using a provided lexer function and a lexing buffer. This is used to convert source code into a structured format for further analysis or execution.",
      "description_length": 245,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "lambda",
      "description": "Provides functions for composing and applying higher-order operations on lists, such as mapping, filtering, and reducing with custom accumulation. Works with list structures and functions that take and return list elements. Enables transformation pipelines for data processing tasks like log filtering and configuration parsing.",
      "description_length": 328,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda",
      "description": "Encodes and decodes boolean and numeric values into lambda calculus terms, while providing tools for term analysis, transformation, and parsing. Supports operations like extracting free variables, reducing expressions, and converting between string representations and abstract syntax trees. Functions handle Church numerals, perform variable substitutions, and manage lexical and syntactic parsing of lambda expressions. Enables manipulation of lambda terms for evaluation, verification, and symbolic computation.",
      "description_length": 514,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 514,
    "min_description_length": 235,
    "avg_description_length": 339.375,
    "embedding_file_size_mb": 0.029476165771484375
  }
}