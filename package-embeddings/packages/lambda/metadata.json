{
  "package": "lambda",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T22:58:16.213906",
  "modules": [
    {
      "module_path": "Lambda.L",
      "library": "lambda",
      "description": "This module represents lambda calculus terms with variables, abstractions, and applications. It supports operations like free variable extraction, string conversion, \u03b1-conversion, \u03b7-conversion, and \u03b2-reduction with or without step limits. Use cases include symbolic manipulation of lambda terms, implementing reduction strategies, and analyzing term structure.",
      "description_length": 360,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Parse",
      "library": "lambda",
      "description": "Parses string representations of lambda calculus terms into an abstract syntax tree. Works with strings formatted in a specific lambda calculus notation. Useful for interpreting user input or loading terms from text files.",
      "description_length": 222,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambda.Church",
      "library": "lambda",
      "description": "This module provides direct conversions between integers and lambda terms using Church encoding. It includes functions to encode integers into Church numerals, decode lambda terms back to integers, and check if a term is a valid Church numeral. The module works specifically with `Lambda.L.term` structures, supporting operations like integer encoding and term validation for use in lambda calculus computations.",
      "description_length": 412,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Lexer",
      "library": "lambda",
      "description": "Implements lexical analysis for parsing Lambda expressions using standard OCaml lexing tables and functions. Processes character streams into tokens recognized by the Lambda parser, handling input buffering and state transitions. Useful for building compilers or interpreters that require converting raw text into structured tokens for further processing.",
      "description_length": 355,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Parser",
      "library": "lambda",
      "description": "Parses lambda calculus expressions into abstract syntax trees using a token stream from a lexer. It handles concrete syntax elements like variables, parentheses, lambda abstractions, and dots. Useful for implementing interpreters or compilers for lambda calculus by converting input text into term structures for evaluation.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambda.Bool",
      "library": "lambda",
      "description": "This module defines operations for converting between boolean values and their lambda term representations. It provides the lambda terms for true and false, functions to convert booleans to lambda terms and vice versa, and a predicate to check if a lambda term represents a boolean. Use this module when working with lambda calculus encodings of boolean logic, such as implementing conditionals or logical operations within lambda terms.",
      "description_length": 437,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambda",
      "library": "lambda",
      "description": "This module implements core components for working with lambda calculus, including term representation, parsing, and encoding. It provides structured manipulation of lambda terms with support for variables, abstractions, and applications, along with conversions for Church numerals and boolean logic. Use it to build, analyze, and evaluate lambda calculus expressions from both code and textual input.",
      "description_length": 401,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 437,
    "min_description_length": 222,
    "avg_description_length": 358.7142857142857,
    "embedding_file_size_mb": 0.10190010070800781
  }
}