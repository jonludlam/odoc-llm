{
  "package": "gxl-light",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:48.204897",
  "modules": [
    {
      "module_path": "GxlDocument.GxlDocument",
      "description": "Creates and manipulates GXL document structures, enabling parsing from files, extracting the root element, and writing to files. Operates on a custom `t` type representing GXL documents and interacts with XML data through a DTD validation function. Used to process GXL files by loading content, validating against a DTD, and exporting the structured data.",
      "description_length": 355,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "gxl-light",
      "description": "Provides functions to parse and generate GXL (Graph Exchange Language) documents, including reading graph structures from XML, extracting node and edge information, and serializing graphs back to GXL format. Works with custom data types representing graphs, nodes, and edges, including attributes and relationships. Used to integrate graph data between applications that rely on GXL for interchange, such as visualization tools or analysis pipelines.",
      "description_length": 450,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GxlDocument",
      "description": "manages GXL document lifecycle by handling file I/O, DTD validation, and structure manipulation through a custom `t` type. It supports loading and saving GXL content, extracting the root node, and validating XML against a DTD. Operations include parsing from disk, modifying document hierarchies, and serializing back to files. Example tasks include loading a GXL file, checking its validity, and extracting specific elements for further processing.",
      "description_length": 449,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GXL",
      "description": "The module provides functions for manipulating GXL graph elements, including attribute management, traversal, and modification of structured data like attributes, nodes, edges, and atomic values. It operates on data structures such as `gxl_element`, `gxl_attr`, and `gxl_value`, enabling tasks like XML serialization, relationship handling, and hierarchical element construction. Specific use cases include converting graph elements to XML, managing attribute lists, and establishing connections between graph components.",
      "description_length": 521,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 355,
    "avg_description_length": 443.75,
    "embedding_file_size_mb": 0.014946937561035156
  }
}