{
  "package": "current_docker",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:15:08.533999",
  "modules": [
    {
      "module_path": "Current_docker.Make.Image",
      "library": "current_docker",
      "description": "This module represents Docker images built on a host, providing operations to uniquely identify and serialize images via `digest`, `hash`, and `marshal`. It works with a concrete type `t` representing a Docker image, supporting persistent storage and retrieval through string-based serialization. Use cases include tracking image identities across builds and storing image metadata in a database.",
      "description_length": 396,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.Raw.Image",
      "library": "current_docker",
      "description": "This module represents Docker images as opaque values with operations to obtain their digest, hash, and serialized form. It supports converting images to and from strings for storage, comparing images by digest, and formatting them for display. Use cases include persisting image identifiers in a database, verifying image integrity, and building custom Docker workflows with explicit context handling.",
      "description_length": 402,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.Raw.Cmd",
      "library": "current_docker",
      "description": "This module builds and manages Docker commands as process specifications, supporting direct execution of Docker CLI operations. It provides functions to construct Docker commands with optional context, run containers, and handle cleanup, including killing containers on cancellation. It works with Docker command lists, container contexts, and job metadata to enable custom container workflows like running temporary services or executing builds.",
      "description_length": 446,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.Default.Image",
      "library": "current_docker",
      "description": "This module represents Docker images using a hash-based identifier. It provides operations to create images from hashes, retrieve their unique digest, and serialize or deserialize image values for storage. These functions support use cases like tracking image versions in a database or ensuring content-addressable identity for container images.",
      "description_length": 345,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_docker.Make",
      "library": "current_docker",
      "description": "This module manages Docker images and containers on a host, offering operations to build, pull, run, and deploy images with support for caching, tagging, and pushing. It works with Docker images as a concrete type, enabling serialization and persistent storage, and supports deployment workflows using Docker SwarmKit and Compose. Specific use cases include building images from source with optional caching, running containers with argument customization, and maintaining up-to-date services or Compose deployments from YAML configurations.",
      "description_length": 541,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.S",
      "library": "current_docker",
      "description": "This module defines the interface for building and managing Docker images and containers. It includes functions to specify build contexts, such as directories or Git repositories, and to configure image tags, container environments, and runtime settings. It works with data types like `source`, `repo_id`, and Docker-specific configurations, enabling use cases such as deploying containerized applications from version-controlled code or local files.",
      "description_length": 450,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.Default",
      "library": "current_docker",
      "description": "This module provides functions to interact with the default Docker engine, including pulling, building, running, and managing Docker images and containers. It supports operations like `pull`, `build`, `run`, and `push` for image lifecycle management, and `service`, `compose`, and `compose_cli` for deployment orchestration. Use cases include automating Docker image builds, deploying services to Docker Swarm or Compose, and managing containerized applications with reproducible configurations.",
      "description_length": 495,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_docker.Raw",
      "library": "current_docker",
      "description": "This module provides low-level Docker operations with explicit context handling, including pulling, building, running, and tagging images, as well as managing services and compose workflows. It works directly with Docker images, command specifications, and container contexts, enabling custom workflows such as automated builds, service deployment, and integration testing with precise control over execution and cleanup. Concrete use cases include building versioned Docker images from Git repositories, running isolated test environments, and scripting complex container orchestration tasks.",
      "description_length": 593,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_docker",
      "library": "current_docker",
      "description": "This module integrates with Docker to manage image builds, container execution, and deployment workflows using sources like directories and Git repos. It supports concrete operations such as `build`, `run`, `push`, and `compose`, working with types like `repo_id`, Docker images, and configuration structures. Use cases include deploying containerized applications from version-controlled code, managing Docker Swarm services, and scripting custom container orchestration tasks with precise control over build and runtime settings.",
      "description_length": 531,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 345,
    "avg_description_length": 466.55555555555554,
    "embedding_file_size_mb": 0.130828857421875
  }
}