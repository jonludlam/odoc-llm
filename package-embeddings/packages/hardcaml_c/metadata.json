{
  "package": "hardcaml_c",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:51:20.460703",
  "modules": [
    {
      "module_path": "Hardcaml_c.Cyclesim.With_interface",
      "library": "hardcaml_c",
      "description": "Simulates digital circuits with typed input and output interfaces, using references to track signal values. It supports creating a simulator from a circuit definition and coercing port lists to match specified interface types. This module is used to test hardware designs by applying inputs and observing outputs through the defined interfaces.",
      "description_length": 344,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_c.Cyclesim",
      "library": "hardcaml_c",
      "description": "Implements cycle-accurate simulation for hardware circuits described in OCaml. It compiles circuits into C code for fast execution and provides ports for interacting with inputs and outputs during simulation. Useful for verifying digital designs by stepping through clock cycles and inspecting signal values.",
      "description_length": 308,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_c.Instance",
      "library": "hardcaml_c",
      "description": "This module provides direct read and write operations for simulator instance memory, specifically handling `Hardcaml.Signal.t` and `Hardcaml.Bits.t` data types. It allows setting and retrieving signal values during simulation, supporting both immutable and mutable bit representations. Concrete use cases include manipulating and inspecting internal state during hardware simulation runs.",
      "description_length": 388,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_c",
      "library": "hardcaml_c",
      "description": "This module directly compiles OCaml hardware descriptions into C for simulation, providing functions to create and manipulate circuit instances. It supports reading and writing signal values during simulation, generating C code for combinational and sequential logic, and integrating custom C functions. Concrete use cases include fast, cycle-accurate simulation of digital circuits and direct inspection or manipulation of internal signal states during simulation runs.",
      "description_length": 470,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 470,
    "min_description_length": 308,
    "avg_description_length": 377.5,
    "embedding_file_size_mb": 0.05835247039794922
  }
}