{
  "package": "hardcaml_c",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:45.425459",
  "modules": [
    {
      "module_path": "Hardcaml_c.Cyclesim.With_interface",
      "library": "hardcaml_c",
      "description": "Simulates digital circuits with typed input and output interfaces, using references to track signal values across cycles. Works with `Hardcaml.Circuit.With_interface` instances, where inputs and outputs are structured as records of `Hardcaml.Bits.t`. Useful for testing and verifying hardware designs by applying input stimuli and inspecting output responses cycle by cycle.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_c.Cyclesim",
      "library": "hardcaml_c",
      "description": "This module provides a cycle-accurate simulation environment for digital circuits, enabling precise timing verification and integration with external compilers. It operates on `Circuit.t` and structured interface types, allowing users to define inputs and outputs as records of `Bits.t` and simulate signal propagation across clock cycles using reference-based tracking. Users can apply input stimuli, inspect outputs at each cycle, and validate circuit behavior under real timing constraints. Submodules enhance this by supporting typed interface simulation, improving testability and verification of hardware designs through structured, cycle-by-cycle analysis.",
      "description_length": 663,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_c.Instance",
      "library": "hardcaml_c",
      "description": "This module provides direct read and write operations for signal values in a simulator instance memory. It works with signal and bits data types, allowing mutable and immutable memory access. Use it to manipulate and inspect hardware simulation state during testbenches or debugging.",
      "description_length": 283,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_c",
      "library": "hardcaml_c",
      "description": "This module compiles and simulates digital circuits using C code generation, enabling the creation of optimized models and integration of custom C logic. It supports simulation of sequential and combinational circuits through cycle-accurate execution, using `Circuit.t` and record-based interfaces of `Bits.t` to define and test signal behavior over time. Direct memory access submodules allow reading and writing signal values during simulation, enabling dynamic manipulation and verification of internal state. Example use cases include generating C models for FPGA pipelines, simulating CPU datapaths with precise timing, and debugging circuit behavior by injecting stimuli and inspecting outputs at each clock cycle.",
      "description_length": 720,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 720,
    "min_description_length": 283,
    "avg_description_length": 510.0,
    "embedding_file_size_mb": 0.014919281005859375
  }
}