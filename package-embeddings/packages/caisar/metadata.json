{
  "package": "caisar",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 47,
  "creation_timestamp": "2025-07-15T23:15:14.274624",
  "modules": [
    {
      "module_path": "Ovo",
      "library": "caisar.ovo",
      "description": "This module handles parsing and converting OVO (One-vs-One) classification models. It provides access to model properties like the number of inputs, classes, and support vectors, as well as class names. It supports concrete use cases such as loading OVO models from files and transforming them into neural network graphs.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nir.Ngraph.GFloat.E",
      "library": "caisar.nir",
      "description": "This module represents edges in a graph with floating-point weights. It provides operations to create and manipulate edges, including accessing the source and destination vertices. Concrete use cases include modeling weighted connections in numerical computations and graph algorithms requiring floating-point precision.",
      "description_length": 320,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Ngraph.Dot",
      "library": "caisar.nir",
      "description": "This module provides functions to output graph structures in the DOT format. It works with graph data represented using the `Nir.Ngraph.GFloat.t` type. Concrete use cases include visualizing control flow graphs or dataflow networks by generating files compatible with graph visualization tools like Graphviz.",
      "description_length": 308,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Ngraph.GFloat",
      "library": "caisar.nir",
      "description": "This module provides tools to traverse and manipulate graphs with floating-point edge weights, supporting operations to iterate over vertices, edges, and successors. It enables concrete applications such as shortest path and network flow algorithms by combining graph traversal logic with precise weight handling. The edge module enhances this functionality by modeling weighted connections with float precision, allowing creation and inspection of edges between vertices. Together, they support numerical graph computations where accuracy and traversal efficiency are critical.",
      "description_length": 578,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Tensor",
      "library": "caisar.nir",
      "description": "This module implements immutable tensor operations using Bigarray.Genarray for storage. It provides functions to create tensors from values or arrays, reshape and flatten tensors, and access or modify elements by index. Specific use cases include handling numerical data for machine learning, such as initializing weight tensors, extracting values during computation, and converting between tensor and list representations.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Node",
      "library": "caisar.nir",
      "description": "This module provides types and operations for constructing and transforming computational graph nodes used in neural network inference. It supports tensor operations like arithmetic, reshaping, activation functions, and quantization through the `Nir.Node.t` (tensor nodes) and `Nir.Shape.t` (tensor shapes) structures, with data type flexibility including `Float`, `Int8`, and quantized formats. These capabilities enable tasks like optimizing ONNX-style computation graphs and implementing quantized neural network models efficiently.",
      "description_length": 535,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Gentensor",
      "library": "caisar.nir",
      "description": "This module directly handles tensor creation and manipulation with specific data types including float, int8, uint8, int32, and int64 tensors. It supports operations such as creating constant-value tensors, converting from arrays and matrices, and transposing or reversing matrix dimensions during conversion. These capabilities are useful for numerical computations and machine learning tasks requiring precise tensor initialization and shape control.",
      "description_length": 452,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Shape",
      "library": "caisar.nir",
      "description": "This module handles multi-dimensional array shapes with operations to create, inspect, and modify shapes from arrays or lists of integers. It supports indexing, rank and size queries, and unsafe conversions, along with row-major index calculations for tensor-like data structures. Concrete use cases include managing array dimensions in numerical computations and transforming indices in multi-dimensional data access.",
      "description_length": 418,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir.Ngraph",
      "library": "caisar.nir",
      "description": "This module manages directed acyclic graphs used in machine learning models, enabling traversal and structural analysis of graphs built from output nodes. It provides access to inputs, outputs, and node connections, supporting tasks like model inspection and computation path traversal. The Dot submodule generates DOT files for visualizing graphs with tools like Graphviz, while the Float submodule enables traversal and manipulation of graphs with floating-point edge weights, facilitating numerical computations such as shortest path algorithms. Together, these components allow both structural and numerical analysis of complex computation graphs.",
      "description_length": 651,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nir",
      "library": "caisar.nir",
      "description": "This module provides a comprehensive framework for tensor manipulation and computational graph construction, combining immutable tensor storage with flexible node-based operations. Core data types include tensors for numerical data across various formats like float and int8, and graph nodes for representing operations in neural networks. Operations span tensor creation, reshaping, arithmetic, and graph traversal, with support for quantization and ONNX-style model transformations. Examples include initializing weight tensors for machine learning, constructing and optimizing neural network graphs, and visualizing computation structures using DOT files.",
      "description_length": 658,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nnet",
      "library": "caisar.nnet",
      "description": "This module parses neural network models stored in the NNet file format and converts them into an internal graph representation. It operates on a custom record type containing metadata like layer sizes, input bounds, normalization parameters, and weights, and produces a structured graph format suitable for further processing. Concrete use cases include loading trained neural networks for verification, analysis, or deployment in safety-critical systems.",
      "description_length": 456,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Caisar_xgboost.Tree",
      "library": "caisar.xgboost",
      "description": "This module implements decision tree structures for gradient boosting models, supporting prediction operations on input data. It defines tree nodes as either splits based on feature values or leaf nodes with output scores, and applies transformations like the sigmoid function after summing predictions. The module is used to convert parsed model data into executable tree representations and to compute predictions for input instances.",
      "description_length": 436,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caisar_xgboost.Input",
      "library": "caisar.xgboost",
      "description": "This module handles input data parsing and representation for machine learning tasks. It provides functions to create input instances from feature-value pairs or from files, and to retrieve feature values by index. It works with a custom input type and integrates with parsers to process structured data files into usable input lists.",
      "description_length": 334,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Caisar_xgboost.Predict",
      "library": "caisar.xgboost",
      "description": "Implements the sigmoid activation function and a prediction function that evaluates an input against a trained model. Operates on parsed model data and input feature vectors to generate numerical predictions. Useful for applying a trained XGBoost model to new data points in binary classification tasks.",
      "description_length": 303,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caisar_xgboost.Parser",
      "library": "caisar.xgboost",
      "description": "Facilitates JSON serialization and deserialization of XGBoost model components, including trees, gradient boosters, loss functions, and learner configurations, with error-resilient parsing via `Yojson.Safe.t`. Handles bidirectional conversion between structured types like `gbtree`, `dart`, and `objective` and their JSON representations, supporting model persistence and inspection. Enables debugging through pretty-printing and structured data interchange for workflows requiring programmatic access to model parameters.",
      "description_length": 522,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caisar_xgboost",
      "library": "caisar.xgboost",
      "description": "This module provides an implementation for executing and manipulating gradient-boosted decision tree models, primarily for binary classification tasks. It centers around tree structures composed of split and leaf nodes, operating on input feature vectors to produce numerical predictions using trained model data. Key operations include parsing input data from files or feature-value pairs, applying the sigmoid function to raw predictions, and serializing or deserializing model components such as trees and learner configurations in JSON format. Example usage includes loading a trained model and input data, evaluating predictions for new instances, and inspecting or persisting model parameters programmatically.",
      "description_length": 716,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.AttributeProto.AttributeType",
      "library": "caisar.onnx",
      "description": "This module defines an enumeration of attribute types that represent the kind of data stored in an attribute, such as float, integer, string, tensor, or graph, both in singular and repeated forms. It works with the `AttributeProto` type to enforce valid attribute content at the protocol buffer level. Concrete use cases include validating attribute values during model parsing and ensuring correct type handling in ONNX operators.",
      "description_length": 431,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto.Tensor",
      "library": "caisar.onnx",
      "description": "This module defines operations for constructing, serializing, and deserializing tensor type definitions in ONNX Intermediate Representation. It works with tensor data types that include element type and shape information, using `TensorProto.DataType` and `TensorShapeProto`. Concrete use cases include defining input/output types for ONNX models and validating tensor metadata during model parsing or generation.",
      "description_length": 412,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto.Sequence",
      "library": "caisar.onnx",
      "description": "This module represents a sequence type in ONNX, encapsulating operations for handling repeated elements of a specific ONNX type. It provides functions to construct, serialize, and deserialize sequence types to and from both binary and JSON formats. Concrete use cases include defining dynamic-length input/output tensors in ONNX models and processing variable-sized data in machine learning pipelines.",
      "description_length": 401,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorProto.Segment",
      "library": "caisar.onnx",
      "description": "This module defines a segment of a large tensor stored in a `TensorProto`, containing optional start and end byte offsets. It provides functions to serialize and deserialize the segment to and from binary and JSON formats. Use this module when handling large tensors split into chunks for efficient storage or transmission.",
      "description_length": 323,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto.Map",
      "library": "caisar.onnx",
      "description": "This module defines a map type with operations to serialize and deserialize instances to and from binary and JSON formats. It works with key-value pairs where keys are restricted to specific integral or string tensor data types, and values are typed using ONNX type definitions. It is used to represent structured data mappings in ONNX Intermediate Representation (IR), ensuring type correctness and compatibility during model serialization and deserialization.",
      "description_length": 461,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorProto.DataType",
      "library": "caisar.onnx",
      "description": "This module defines an enumeration of data types for tensor values, including primitive numeric types, strings, booleans, and complex numbers. It supports operations to identify and distinguish tensor element types, such as checking if a type is a floating-point or integer type. Concrete use cases include validating tensor data formats during model loading and ensuring correct memory allocation for tensor storage.",
      "description_length": 417,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorShapeProto.Dimension",
      "library": "caisar.onnx",
      "description": "This module defines operations for constructing and serializing tensor shape dimensions that can represent either fixed integer values, symbolic parameters, or unset values. It works with the `t` type that encapsulates dimension values and optional semantic denotations, supporting direct interaction with ONNX tensor shape definitions. Concrete use cases include defining input/output shapes for ONNX models where dimensions may be variable or annotated with semantic meanings like \"batch\" or \"channel\".",
      "description_length": 504,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto.SparseTensor",
      "library": "caisar.onnx",
      "description": "This module defines operations for handling sparse tensor type definitions in ONNX, including creating, serializing, and deserializing type messages. It works with protobuf data structures representing sparse tensor types, specifically `TypeProto.SparseTensor.t`, which includes element data type and shape information. Concrete use cases include parsing and generating ONNX model files that specify sparse tensor types, enabling correct type handling during model serialization and deserialization.",
      "description_length": 499,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorProto.DataLocation",
      "library": "caisar.onnx",
      "description": "This module defines an enumeration with two variants, `DEFAULT` and `EXTERNAL`, indicating where the data of a tensor is stored. It provides the `name` function to retrieve the fully qualified protobuf name of the enum. Use this module when handling tensor data location in ONNX models, particularly when serializing or deserializing tensors with embedded or external data storage.",
      "description_length": 381,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto.Optional",
      "library": "caisar.onnx",
      "description": "This module represents an optional type in ONNX, encapsulating a value that may be absent. It provides operations to construct, serialize, and deserialize optional type prototypes, specifically working with `TypeProto.t` values. Use this module when handling optional tensor, sequence, or map types in ONNX models, such as when defining inputs or outputs that may be conditionally present.",
      "description_length": 389,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.ModelProto",
      "library": "caisar.onnx",
      "description": "This module defines the structure and manipulation functions for a machine learning model container that includes metadata, a computation graph, operator sets, and training information. It supports creating, serializing, and deserializing models to and from binary and JSON formats. Concrete use cases include loading and saving ONNX models, inspecting model metadata, and preparing models for execution or training by accessing their graph and operator dependencies.",
      "description_length": 467,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.FunctionProto",
      "library": "caisar.onnx",
      "description": "This module defines a protobuf message structure for representing functions in ONNX, including fields for inputs, outputs, attributes, and nodes. It provides functions to serialize and deserialize instances to and from binary and JSON formats, and to construct messages with optional default values. Use cases include defining custom operations in ONNX models and exchanging function definitions between systems.",
      "description_length": 412,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.GraphProto",
      "library": "caisar.onnx",
      "description": "This module represents a computational graph in ONNX format, containing nodes, inputs, outputs, and initializers for defining machine learning models. It provides functions to construct, serialize, and deserialize graphs, along with metadata like documentation and quantization annotations. Use this module to build or manipulate ONNX models programmatically, inspect graph structure, or integrate with model serialization workflows.",
      "description_length": 433,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorProto",
      "library": "caisar.onnx",
      "description": "This module represents a serialized tensor with structured data fields for numeric, integer, and string values, along with raw byte storage and external data references. It supports serialization to and from binary and JSON formats, includes metadata such as shape and data type, and handles tensor segments for efficient storage of large tensors. The data type module enumerates supported tensor element types and provides utilities for type validation, while the storage location module distinguishes between embedded and external data storage with a clear protobuf name interface. Use these components together to represent, validate, and serialize multi-dimensional arrays in machine learning pipelines, especially when interfacing with ONNX runtimes or handling model import/export with large tensor datasets.",
      "description_length": 814,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TrainingInfoProto",
      "library": "caisar.onnx",
      "description": "This module defines operations to manage training workflows in ONNX models, specifically handling initialization and training algorithm steps. It works with `GraphProto` for defining computation graphs and `StringStringEntryProto` for binding tensor updates, enabling tasks like resetting model parameters or applying gradient updates during training. Concrete use cases include setting up random initialization of neural network weights and specifying optimizer steps for iterative model improvement.",
      "description_length": 501,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TypeProto",
      "library": "caisar.onnx",
      "description": "This module defines the core data types used in ONNX models, such as tensor, sequence, map, optional, and sparse tensor types, along with operations to construct, serialize, and deserialize them. It supports precise type handling for model inputs, outputs, and intermediate values, enabling correct type representation during model parsing and generation. Submodules provide specialized functionality: tensors with shape and element type metadata, sequences for dynamic-length data, maps for structured key-value pairs, optional types for conditionally present values, and sparse tensors for memory-efficient representations. Use these components to define and validate ONNX model type signatures or process type information in machine learning pipelines.",
      "description_length": 755,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.ValueInfoProto",
      "library": "caisar.onnx",
      "description": "This module handles the serialization and deserialization of value metadata, including name, type, and documentation string, primarily used for representing input and output values in computational graphs. It works with protocol buffer and JSON formats, enabling storage and transmission of value information in ONNX models. Concrete use cases include reading and writing value metadata during model import/export and validating value properties in model analysis tools.",
      "description_length": 470,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.NodeProto",
      "library": "caisar.onnx",
      "description": "This module defines a data structure for representing computational nodes in a machine learning graph, with fields for inputs, outputs, operator type, attributes, and metadata. It includes functions to serialize and deserialize nodes to and from binary and JSON formats, and to construct node instances with optional parameters. Concrete use cases include building, modifying, and inspecting ONNX model graphs, such as adding convolution or activation nodes with their respective parameters.",
      "description_length": 491,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.Version",
      "library": "caisar.onnx",
      "description": "This module defines an enumeration of ONNX IR version identifiers, including specific versions like `IR_VERSION_2017_10_10` and `IR_VERSION_2020_5_8`, each corresponding to documented changes in the ONNX format. It supports version tracking and compatibility handling in ONNX models by explicitly encoding version numbers as enum values. Use cases include model serialization, version validation, and ensuring correct interpretation of ONNX graphs according to the IR specification.",
      "description_length": 482,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.SparseTensorProto",
      "library": "caisar.onnx",
      "description": "This module represents a sparse tensor using a serialized format with explicit indices and values, encoded as separate tensors. It supports operations to construct, serialize, and deserialize sparse tensors in both binary and JSON formats. Concrete use cases include efficiently storing and transmitting large sparse matrices for machine learning models, where only non-zero or non-default values are explicitly represented.",
      "description_length": 424,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorShapeProto",
      "library": "caisar.onnx",
      "description": "This module represents tensor shapes in ONNX models, where each dimension can be a fixed integer, a symbolic variable, or unset. It provides functions to construct, serialize, and deserialize shape definitions, supporting dynamic dimensions used in machine learning workflows. The `t` type encapsulates a list of dimensions, each with an optional semantic label such as \"batch\" or \"channel\", enabling precise shape annotations. Use this module to define input and output tensor shapes with variable or symbolic dimensions, and to encode or decode these definitions in binary or JSON format for model interchange.",
      "description_length": 612,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.TensorAnnotation",
      "library": "caisar.onnx",
      "description": "This module defines a data structure for annotating tensors with quantization parameters in ONNX models. It includes functions to serialize and deserialize the structure to and from binary and JSON formats, and to construct instances with optional fields. The module is used to associate tensor names with predefined quantization parameter keys like 'SCALE_TENSOR' and 'ZERO_POINT_TENSOR' during model processing.",
      "description_length": 413,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.OperatorStatus",
      "library": "caisar.onnx",
      "description": "This module defines an enumeration with two values, `EXPERIMENTAL` and `STABLE`, representing the stability status of operators or functions. It includes a function `name` that returns the fully qualified protobuf name of the enum. This module is used to indicate whether a particular operator in the ONNX framework is in an experimental or stable state, helping manage versioning and compatibility.",
      "description_length": 399,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.AttributeProto",
      "library": "caisar.onnx",
      "description": "This module represents ONNX attributes that can hold a single scalar or repeated values of various types, such as floats, integers, strings, tensors, graphs, and sparse tensors. It ensures that each attribute has exactly one value field set, enforcing a union-like structure, and supports operations like construction, serialization, and deserialization. The included enumeration defines valid attribute types, enabling strict type validation when handling ONNX model data, such as verifying kernel sizes or activation types in neural network operators. Together, these components allow precise manipulation and validation of operator parameters within ONNX models.",
      "description_length": 665,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.StringStringEntryProto",
      "library": "caisar.onnx",
      "description": "This module represents a key-value pair with string keys and values, used for serializing and deserializing map-like structures in ONNX protobuf messages. It provides functions to construct, convert to and from both binary and JSON formats, and retrieve the fully qualified protobuf name. It is commonly used when handling ONNX model metadata or annotations stored as string maps.",
      "description_length": 380,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx.OperatorSetIdProto",
      "library": "caisar.onnx",
      "description": "This module defines operations for working with operator set identifiers in ONNX models, specifically handling serialization, deserialization, and construction of operator set metadata. It operates on a record type representing a domain and version pair, used to uniquely identify operator sets. Concrete use cases include reading and writing operator set IDs to and from binary or JSON formats, and constructing these identifiers for model serialization or version tracking.",
      "description_length": 475,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Onnx_protoc.Onnx",
      "library": "caisar.onnx",
      "description": "This module provides a comprehensive toolkit for constructing, manipulating, and serializing machine learning models in the ONNX format. It centers around core data types such as models, computational graphs, tensors, nodes, and attributes, enabling precise representation and validation of model structure, types, and metadata. Operations include building and inspecting graphs with nodes and tensors, handling dynamic shapes and quantization annotations, managing training workflows, and serializing models to binary or JSON formats. Specific examples include loading and saving ONNX models, defining custom operators, specifying tensor shapes with symbolic dimensions, and applying quantization parameters for efficient inference.",
      "description_length": 733,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx.Reader",
      "library": "caisar.onnx",
      "description": "Reads ONNX model files into an intermediate representation, returning a result type that includes the number of inputs and outputs. Parses serialized ONNX data from disk, producing either a structured graph representation or an error message. Useful for loading pre-trained models for inference or transformation workflows.",
      "description_length": 323,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Writer",
      "library": "caisar.onnx",
      "description": "Handles serialization of neural network graphs into ONNX format. Converts a `Nir.Ngraph.t` structure into a valid ONNX file on disk. Useful for exporting trained models for deployment in ONNX-compatible runtimes.",
      "description_length": 212,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Onnx.Onnx_protoc",
      "library": "caisar.onnx",
      "description": "This module offers tools to construct, manipulate, and serialize ONNX machine learning models, centered around data types like models, graphs, tensors, nodes, and attributes. It supports operations such as defining custom operators, specifying symbolic tensor shapes, and applying quantization for efficient inference. Users can load and save models in binary or JSON formats, manage training workflows, and validate model structure and metadata. Example tasks include building computational graphs, inspecting node connections, and serializing models for deployment.",
      "description_length": 567,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Onnx",
      "library": "caisar.onnx",
      "description": "This module provides tools for working with ONNX machine learning models, enabling both loading and exporting of neural network graphs. It supports parsing ONNX models from disk into an intermediate representation and serializing `Nir.Ngraph.t` structures into ONNX files for deployment. Key data types include models, graphs, tensors, nodes, and attributes, with operations for constructing graphs, defining custom operators, applying quantization, and managing model metadata. Example uses include loading a pre-trained model for inference, transforming a neural network graph, or exporting a trained model to ONNX for use in compatible runtimes.",
      "description_length": 648,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 47,
    "meaningful_modules": 47,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 814,
    "min_description_length": 212,
    "avg_description_length": 475.0,
    "embedding_file_size_mb": 0.17120742797851562
  }
}