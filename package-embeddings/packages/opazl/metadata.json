{
  "package": "opazl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:04:57.381658",
  "modules": [
    {
      "module_path": "Opazl.Pp",
      "library": "opazl",
      "description": "This module formats and prints structured data, including timestamps, integers, and content values. It processes lists of timestamped content entries, applying formatting operations to produce readable output. Concrete use cases include logging events with precise timing and generating formatted reports from structured data.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opazl.Lexer",
      "library": "opazl",
      "description": "This module provides lexical analysis operations for tokenizing and parsing structured text input, focusing on Unicode character classification and pattern matching. It works with `Sedlexing.lexbuf` buffers and strings, using internal partition tables to map characters to semantic classes and extract tokens like timestamps, substrings, or AST components. Specific use cases include parsing messages, actions, and notices from input streams, with functions to decompose lexed content into structured data tuples.",
      "description_length": 513,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opazl.Ast",
      "library": "opazl",
      "description": "This module defines core data structures for representing chat logs, including timestamps, user identifiers, messages, notices, and actions. It provides constructors and types for parsing or building individual lines of chat data, each combining a time value with a specific content variant. Concrete use cases include modeling IRC or log file entries for analysis, storage, or transformation into other formats.",
      "description_length": 412,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opazl.Parser",
      "library": "opazl",
      "description": "Parses input sources like lexing buffers, input channels, or strings into a list of structured content elements. Each element pairs a position tuple (line, column, offset) with an AST node from the Opazl.Ast module. Useful for transforming raw input into typed syntax trees with precise source location tracking.",
      "description_length": 312,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opazl",
      "library": "opazl",
      "description": "This module processes structured text data through parsing, formatting, and representation layers. It tokenizes input using Unicode-aware lexing, maps content to typed syntax trees with positional metadata, and formats timestamped entries for output. Core types include lexbuf handlers, AST nodes with source positions, and structured chat log entries combining time and content variants. You can parse log files into typed ASTs, extract timestamped messages from streams, or format chat data into human-readable reports with precise timing.",
      "description_length": 541,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 312,
    "avg_description_length": 420.8,
    "embedding_file_size_mb": 0.01859760284423828
  }
}