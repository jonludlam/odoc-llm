{
  "package": "ffmpeg-avutil",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:14.720841",
  "modules": [
    {
      "module_path": "Avutil.Subtitle",
      "library": "ffmpeg-avutil",
      "description": "This module handles the creation and conversion of subtitle frames with precise timing and text lines. It provides functions to construct a subtitle frame with specified start and end times and extract timing and text data from existing frames. Use it to generate or process timed subtitles in applications like video players or editors.",
      "description_length": 337,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Avutil.Log",
      "library": "ffmpeg-avutil",
      "description": "This module manages logging levels and output handling for FFmpeg components. It allows setting the global log level to control verbosity and registering a custom callback to process log messages. Typical use includes directing FFmpeg logs to a specific output stream or filtering logs to only show errors and warnings.",
      "description_length": 319,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Avutil.Sample_format",
      "library": "ffmpeg-avutil",
      "description": "This module defines types and operations for handling audio sample formats. It provides conversions between sample format identifiers, their string names, and internal numeric IDs. Concrete use cases include parsing audio format strings into typed values, retrieving format metadata for processing pipelines, and mapping between FFmpeg's internal format codes and their canonical representations.",
      "description_length": 396,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Channel_layout",
      "library": "ffmpeg-avutil",
      "description": "This module defines and manipulates audio channel layouts, providing constants for common configurations like stereo, mono, and 5.1 surround sound. It supports operations to compare layouts, retrieve descriptions, count channels, and find layouts by name or channel count. Use cases include configuring audio processing pipelines and setting up channel layouts for encoding or decoding audio streams.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Time_format",
      "library": "ffmpeg-avutil",
      "description": "This module defines time unit formats and provides functions to convert time values between different units. It works with numeric types like integers and floats to represent time durations. Use it to standardize time measurements when handling multimedia timestamps or performance metrics.",
      "description_length": 290,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Avutil.HwContext",
      "library": "ffmpeg-avutil",
      "description": "This module manages hardware device and frame contexts for accelerated video processing. It provides functions to create and configure device contexts for specific hardware types like CUDA or Vulkan, and frame contexts that define pixel format conversions and resolution for hardware-accelerated video frames. It is used when setting up direct rendering or offloading video decoding/encoding to GPUs or specialized hardware.",
      "description_length": 424,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Pixel_format",
      "library": "ffmpeg-avutil",
      "description": "This module defines pixel format types and operations for working with raw image data in FFmpeg. It provides functions to retrieve format descriptors, bit depth, plane counts, and string representations for each pixel format. It is used to configure and interpret video frame layouts in multimedia processing tasks like encoding, decoding, and filtering.",
      "description_length": 354,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Options",
      "library": "ffmpeg-avutil",
      "description": "This module defines and manages configurable options for multimedia processing, supporting typed access to settings like integers, strings, rational numbers, and format descriptors. It works with opaque objects representing option containers, allowing retrieval of values through type-specific getters and inspecting available options via structured metadata. Concrete use cases include parsing encoder/decoder parameters, handling video/audio format settings, and extracting dictionary-based configurations from FFmpeg components.",
      "description_length": 531,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Video",
      "library": "ffmpeg-avutil",
      "description": "This module manages video frame creation and manipulation, providing direct access to pixel data through planes. It supports operations like creating frames with specified dimensions and pixel formats, retrieving frame properties such as width, height, and pixel format, and visiting frame planes for reading or writing. Concrete use cases include video processing tasks like frame resizing, pixel format conversion, and direct pixel manipulation for effects or encoding.",
      "description_length": 471,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil.Audio",
      "library": "ffmpeg-avutil",
      "description": "This module manages audio frame creation and manipulation, providing functions to allocate frames with specified sample formats, channel layouts, and sample counts. It supports direct access to frame properties like sample format, rate, channel count, and layout, along with intra-frame sample copying. Concrete use cases include preparing audio buffers for encoding or decoding, and modifying audio data in processing pipelines.",
      "description_length": 429,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Avutil.Frame",
      "library": "ffmpeg-avutil",
      "description": "This module manages raw multimedia frames, providing direct access to timing information, metadata, and content copying. It supports operations to get and set presentation timestamps (pts), decoding timestamps (pkt_dts), duration, and metadata key-value pairs. Use cases include synchronizing audio/video streams, inspecting frame timing, and transferring frame data between processing stages.",
      "description_length": 393,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avutil",
      "library": "ffmpeg-avutil",
      "description": "This module offers core utilities for multimedia processing, integrating format management, error handling, buffer manipulation, time calculations, and structured configuration. It works with media types, rational numbers, error codes, data buffers, and hierarchical options to support encoding pipelines, format conversion, and time synchronization. Submodules handle specific tasks like subtitle frame timing, logging control, audio format conversions, channel layouts, time unit standardization, hardware acceleration contexts, pixel formats, configurable options, and frame management for video and audio. Examples include creating timed subtitles, configuring GPU-accelerated video decoding, converting audio sample formats, and manipulating raw video frames with direct pixel access.",
      "description_length": 789,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 789,
    "min_description_length": 290,
    "avg_description_length": 427.75,
    "embedding_file_size_mb": 0.04403209686279297
  }
}