{
  "package": "cohttp-eio",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:01:47.624786",
  "modules": [
    {
      "module_path": "Cohttp_eio.Server.IO",
      "library": "cohttp-eio",
      "description": "This module implements low-level IO operations for handling HTTP server connections using Eio primitives. It provides monadic bind and return for composing asynchronous IO actions, along with functions to read from and write to buffered channels, read lines, and manage connection state. Concrete use cases include parsing HTTP headers from a client socket and streaming request/response bodies.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Private.IO",
      "library": "cohttp-eio",
      "description": "This module implements low-level IO operations for handling network communication using Eio's buffered read and write channels. It provides monadic bind and return for sequencing asynchronous IO actions, functions to read lines or binary data from input channels, and to write or flush data to output channels. Concrete use cases include reading HTTP request/response headers line-by-line, transferring binary payloads of known length, and managing buffered network streams for client-server interactions.",
      "description_length": 505,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Body.String_source",
      "library": "cohttp-eio",
      "description": "This module provides a way to read from a string as a sequence of bytes using a position offset. It supports reading operations via `single_read` and exposes the original string for direct access. It is used to implement HTTP body streaming over a string input in a network context.",
      "description_length": 282,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Body",
      "library": "cohttp-eio",
      "description": "This module handles HTTP body streaming by providing a data type for byte-oriented input sources, including support for reading from strings via offset-based sequential access. It includes operations to construct a body from a string and supports reading via `single_read` method for network transmission. Used to implement efficient string-backed HTTP message bodies in asynchronous I/O contexts.",
      "description_length": 397,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Server",
      "library": "cohttp-eio",
      "description": "This module implements HTTP server functionality using Eio for asynchronous IO, handling connections, requests, and responses. It works with HTTP requests and responses, connection state, and buffered IO channels, supporting operations like reading headers, streaming bodies, and sending responses. Concrete use cases include building HTTP servers that process client requests with custom logic, stream large response bodies efficiently, and manage connection lifecycle events.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_eio.Private",
      "library": "cohttp-eio",
      "description": "This module implements low-level IO operations for network communication using Eio's buffered channels. It includes functions for reading lines or binary data, writing and flushing output, and sequencing asynchronous actions via monadic operations. It is used for handling HTTP headers, transferring binary payloads, and managing network streams in client-server applications.",
      "description_length": 376,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Client",
      "library": "cohttp-eio",
      "description": "This module implements HTTP client operations for Eio, supporting standard methods like GET, POST, PUT, DELETE, and PATCH with customizable headers and request bodies. It works with URIs, HTTP headers, and response values paired with bodies, abstracting over Eio's networking layer. Concrete use cases include making HTTP requests to REST APIs, uploading data with chunked transfer encoding, and handling streaming responses.",
      "description_length": 425,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_eio",
      "library": "cohttp-eio",
      "description": "This module provides HTTP client and server implementations using Eio's asynchronous IO, handling requests and responses with support for streaming bodies and custom headers. It works with URIs, HTTP methods, and Eio network streams to enable use cases like querying REST APIs, serving HTTP endpoints with streaming responses, and managing network connections. The module also includes utilities for body streaming and low-level IO operations for HTTP message handling.",
      "description_length": 469,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 505,
    "min_description_length": 282,
    "avg_description_length": 415.75,
    "embedding_file_size_mb": 0.11632061004638672
  }
}