{
  "package": "cohttp-eio",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:24.014353",
  "modules": [
    {
      "module_path": "Cohttp_eio.Server.IO",
      "library": "cohttp-eio",
      "description": "This module implements low-level IO operations for handling HTTP server connections using Eio's buffered read and write channels. It provides functions for reading lines and raw data from input channels, writing and flushing output channels, and managing buffer operations with explicit control over connection state via monadic sequencing. Concrete use cases include parsing HTTP headers from client requests and streaming response bodies over network sockets.",
      "description_length": 461,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Private.IO",
      "library": "cohttp-eio",
      "description": "This module implements low-level IO operations for handling input and output channels using Eio's buffered read and write types. It supports reading lines and binary data from input channels, writing and flushing data to output channels, and managing connections via a switch and socket address pair. Concrete use cases include implementing HTTP message parsing and transmission over network streams using Eio's async IO primitives.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Body.String_source",
      "library": "cohttp-eio",
      "description": "This module implements a string-based data source for HTTP message bodies, supporting incremental reading operations. It provides functions to create a source from a string, read chunks into buffers, and access the original string content. Use it to stream static string data as part of an HTTP body in a non-blocking I/O context.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Private",
      "library": "cohttp-eio",
      "description": "This module provides low-level IO operations for working with input and output channels using Eio's buffered types. It supports reading lines and binary data, writing and flushing output, and managing network connections via switches and socket pairs. Key data types include input and output channels, with operations like read_line, read_binary, write, and flush. Example uses include parsing and sending HTTP messages over network streams using Eio's async IO.",
      "description_length": 462,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Server",
      "library": "cohttp-eio",
      "description": "This module builds asynchronous HTTP servers using Eio, managing connections through request-response callbacks and supporting dynamic content delivery, streaming, and integration with Eio-based services. It offers a core API for starting servers and handling requests, while its child module provides low-level IO primitives for reading headers, writing responses, and managing buffered socket communication with explicit state control. You can define routes that return simple responses or stream large payloads using custom IO operations. Combining high-level routing with fine-grained IO control enables building efficient, custom HTTP services with Eio.",
      "description_length": 658,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Body",
      "library": "cohttp-eio",
      "description": "This module manages HTTP message bodies using Eio's resource-based I/O model, with a `t` type representing body sources and extended read operations that support direct string consumption. It enables constructing and processing HTTP request/response bodies from strings, using the `String_source` module to handle in-memory data transfer efficiently. `String_source` allows creating a body source from a string, reading it incrementally into buffers, and accessing the original string content for streaming static data. Together, they support non-blocking I/O workflows for handling HTTP bodies entirely in memory.",
      "description_length": 614,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio.Client",
      "library": "cohttp-eio",
      "description": "This module implements HTTP client operations for issuing requests and handling responses over network connections. It supports standard HTTP methods like GET, POST, PUT, DELETE, and PATCH, with options to set headers, request bodies, and transfer encoding. It works with URIs, HTTP headers, and response structures, and is used to interact with web services or APIs over Eio's network primitives.",
      "description_length": 397,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_eio",
      "library": "cohttp-eio",
      "description": "This module implements HTTP client and server functionality using Eio for asynchronous I/O, enabling non-blocking request handling and network communication. It provides core types like HTTP requests and responses, along with operations for managing connections, streaming message bodies, and issuing client requests with custom headers and methods. The server module supports defining routes and streaming responses using low-level IO primitives that read headers and write payloads directly over Eio-managed sockets. The client module allows sending HTTP methods to remote endpoints, while the body module handles in-memory data transfer using string-based sources for efficient streaming and parsing.",
      "description_length": 703,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 703,
    "min_description_length": 330,
    "avg_description_length": 507.125,
    "embedding_file_size_mb": 0.029470443725585938
  }
}