{
  "package": "bitv",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:15.678581",
  "modules": [
    {
      "module_path": "Bitv.M",
      "library": "bitv",
      "description": "This module provides functions to convert bit vectors to and from string representations, as well as formatted printing. It operates on the abstract bit vector type `t`, where bits are interpreted with the most significant bit first. Concrete use cases include serializing bit vectors for storage or transmission and debugging via human-readable output.",
      "description_length": 353,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitv.L",
      "library": "bitv",
      "description": "This module provides functions to convert bit vectors to and from strings, as well as formatted printing. It operates on the abstract bit vector type `t`, where bits are ordered with least significant bits first. Use cases include serializing bit vectors for storage or transmission and debugging via human-readable output.",
      "description_length": 323,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitv",
      "library": "bitv",
      "description": "This module implements bit vectors as an abstract type `t`, supporting array-like operations and bitwise manipulations. It enables conversion to and from strings in both big-endian and little-endian bit orders, facilitating serialization, deserialization, and human-readable debugging. The module supports operations such as setting, getting, and flipping individual bits, as well as logical operations like AND, OR, and XOR between bit vectors. Specific use cases include efficiently handling binary data, implementing bit-level protocols, and working with hardware registers.",
      "description_length": 577,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitv_string",
      "library": "bitv.string",
      "description": "This module provides low-level bit manipulation capabilities through a string-based bit vector representation, enabling operations like bitwise logic (AND/OR/XOR), bulk modifications (filling ranges), and indexed traversal with both safe and unsafe accessors. It works directly with bit vectors encoded as strings, supporting transformations such as functional mapping, folding over set bits, and conversions to/from boolean lists. These features are particularly useful for binary data processing, compact state storage, or performance-critical scenarios requiring direct memory manipulation.",
      "description_length": 593,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 323,
    "avg_description_length": 461.5,
    "embedding_file_size_mb": 0.014919281005859375
  }
}