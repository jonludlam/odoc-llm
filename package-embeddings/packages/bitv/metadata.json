{
  "package": "bitv",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:27:21.054895",
  "modules": [
    {
      "module_path": "Bitv.L",
      "description": "Converts between a bitset representation and its string form, parsing and formatting bits in least significant bit order. Operates on an abstract type representing a sequence of bits. Used to serialize and deserialize bit patterns for logging or communication protocols.",
      "description_length": 270,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitv.M",
      "description": "Converts values between string representations and a custom type, with formatting support for output. Operates on a specific type `t` designed for efficient bit manipulation. Used to serialize and deserialize data in network protocols and binary file formats.",
      "description_length": 259,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bitv",
      "description": "Provides bitwise operations such as shifting, masking, and combining bits. Works with unsigned integers of varying widths, including 8-bit, 16-bit, 32-bit, and 64-bit values. Used for low-level data manipulation in network protocols and embedded systems.",
      "description_length": 254,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitv_string",
      "description": "The module offers bit-level manipulation through operations like creation, modification, and traversal of bit vectors, alongside bitwise logical operations (AND, OR, XOR, NOT) on structured bit sequences. It works with bit vectors represented as type `t`, enabling direct bit access and list-based conversions for flexible data handling. Use cases include low-level data processing, protocol implementation, or systems requiring precise bit control.",
      "description_length": 449,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitv",
      "description": "Provides operations for converting between bit vectors and string representations, handling least significant bit ordering, and serializing/deserializing bit patterns. Supports efficient bit manipulation through a custom type `t` and includes bitwise operations and integer conversions. Examples include parsing binary data from logs, encoding flags in network packets, and converting between bit vectors and numeric values. Offers both low-level bit access and high-level serialization utilities.",
      "description_length": 497,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 497,
    "min_description_length": 254,
    "avg_description_length": 345.8,
    "embedding_file_size_mb": 0.018607139587402344
  }
}