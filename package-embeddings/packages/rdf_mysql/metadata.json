{
  "package": "rdf_mysql",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:53.129857",
  "modules": [
    {
      "module_path": "Rdf_mysql.My1.Mysql.BGP",
      "library": "rdf_mysql",
      "description": "This module implements a basic graph pattern (BGP) query engine over an RDF dataset stored in MySQL. It provides operations to convert between internal and RDF terms, compare terms, retrieve subjects and objects, and execute pattern-based triple lookups. The core data structures are terms representing RDF nodes and a graph type `g` backed by MySQL storage. Concrete use cases include querying RDF triples by subject, predicate, or object patterns and mapping results to RDF terms for further processing.",
      "description_length": 505,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_mysql.My2.Mysql.BGP",
      "library": "rdf_mysql",
      "description": "This module implements a basic graph pattern (BGP) interface for querying RDF data stored in MySQL. It provides operations to convert between internal and RDF terms, compare terms, and retrieve subjects, objects, or matching triples based on optional subject, predicate, or object filters. The primary data structures are terms representing RDF nodes and a graph handle for interacting with the MySQL backend.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Rdf_mysql.My2.Mysql",
      "library": "rdf_mysql",
      "description": "This module provides triplestore capabilities for managing RDF graphs in MySQL, supporting CRUD operations, transaction control, and graph state manipulation using SQL-backed structures. It works with RDF terms and IRIs, handles namespace mappings, and generates blank node IDs, enabling transactional updates and SPARQL query execution. The BGP interface allows querying through subject-predicate-object patterns, converting terms and retrieving matches based on filters. Specific operations include merging graph data across sources, managing named graphs, and executing structured queries using MySQL-backed term comparisons.",
      "description_length": 628,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_mysql.My1.Mysql",
      "library": "rdf_mysql",
      "description": "This module manages RDF graphs in MySQL with support for adding or removing triples, querying partial triple information, and traversing graph structures using a folder function. It centers around a graph type `g` that encapsulates MySQL-stored RDF data, enabling transaction control, graph copying, and blank node ID generation. The BGP query engine submodule enhances querying capabilities by supporting pattern-based triple lookups, term conversions, and comparisons, allowing users to retrieve subjects or objects based on RDF term patterns. Together, these features enable semantic web applications to perform efficient, transactional RDF storage and querying with bulk manipulation and namespace management.",
      "description_length": 713,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_mysql.My",
      "library": "rdf_mysql",
      "description": "This module provides database abstraction layers for RDF graph persistence using MySQL, focusing on connection management, schema initialization, and optimized triple storage operations. It works with MySQL database connections (`Mysql.dbd`), RDF terms, and IRI structures to enable efficient querying, transaction control, and namespace handling. Specific use cases include building SPARQL query backends, versioned RDF dataset storage, and ontology management systems requiring ACID-compliant persistence.",
      "description_length": 507,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rdf_mysql.My2",
      "library": "rdf_mysql",
      "description": "This module implements a MySQL-backed RDF triplestore with transactional support for managing named graphs, SPARQL queries, and BGP pattern matching. It handles RDF terms, IRIs, and blank nodes, providing operations for merging graph data, applying filters, and executing structured queries using SQL-backed term comparisons. Namespace mappings and graph state management allow for flexible data integration and retrieval. Example uses include storing and querying RDF datasets with ACID guarantees, merging triples from multiple sources, and filtering graph patterns using SPARQL-like semantics.",
      "description_length": 596,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_mysql.My1",
      "library": "rdf_mysql",
      "description": "This module provides transactional storage and querying of RDF graphs in MySQL, centered around a graph type `g` that supports adding and removing triples, graph traversal with folder functions, and copying. It includes a BGP query engine for pattern-based triple lookups, term conversions, and comparisons, enabling retrieval of subjects or objects based on RDF term patterns. Operations allow bulk manipulation, namespace handling, and blank node ID generation, supporting semantic web applications with efficient, structured MySQL-backed RDF processing. Example uses include storing RDF datasets transactionally, querying for all objects matching a subject-predicate pattern, or copying subgraphs between datasets.",
      "description_length": 717,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_mysql",
      "library": "rdf_mysql",
      "description": "This module implements a transactional RDF triplestore backed by MySQL, providing structured storage and querying of RDF graphs with support for named graphs, SPARQL-like queries, and BGP pattern matching. It centers around a graph type that supports adding, removing, and traversing triples, along with operations for term comparison, namespace handling, and blank node management. Specific capabilities include executing structured queries over RDF data, merging and filtering graph patterns, and maintaining ACID-compliant dataset versions. Example uses include building SPARQL endpoints, managing ontology versions, and integrating RDF data from multiple sources using SQL-backed persistence.",
      "description_length": 696,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 409,
    "avg_description_length": 596.375,
    "embedding_file_size_mb": 0.02947235107421875
  }
}