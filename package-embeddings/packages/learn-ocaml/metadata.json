{
  "package": "learn-ocaml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:48.804728",
  "modules": [
    {
      "module_path": "Mutation_test.Make",
      "library": "learn-ocaml.mutation_testing",
      "description": "This module runs mutation tests on student test suites by comparing test outcomes against intentionally broken function implementations (mutants). It supports functions with one to four arguments, using structural equality or a custom comparison function to check results, and generates reports indicating whether tests successfully detect mutant behavior. Use cases include grading student tests by evaluating their effectiveness at exposing bugs in flawed implementations.",
      "description_length": 474,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutation_test.M",
      "library": "learn-ocaml.mutation_testing",
      "description": "This module runs mutation tests on student test suites by evaluating how well their tests detect errors in modified implementations. It supports functions with 1 to 4 arguments, using structural equality or a custom comparison function to validate outputs. Concrete use cases include grading student tests by checking if they expose predefined faulty implementations, with optional scoring per detected mutant and reporting pass/fail outcomes based on mutation coverage.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mutation_test",
      "library": "learn-ocaml.mutation_testing",
      "description": "This module evaluates the effectiveness of student test suites by running mutation tests against faulty implementations of functions with one to four arguments. It compares outputs using structural or custom equality checks, generating reports that indicate whether tests successfully detect mutants. Users can score submissions based on the number of detected mutants or determine pass/fail outcomes according to mutation coverage thresholds. Submodules extend this functionality to specific grading workflows, supporting detailed analysis of test suite strength in automated evaluation systems.",
      "description_length": 596,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 596,
    "min_description_length": 470,
    "avg_description_length": 513.3333333333334,
    "embedding_file_size_mb": 0.011307716369628906
  }
}