{
  "package": "freetds",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:43.767614",
  "modules": [
    {
      "module_path": "Freetds.Ct",
      "library": "freetds",
      "description": "This module enables direct database communication through the FreeTDS library, offering operations for connection lifecycle management, SQL command execution, and data type conversion between OCaml and SQL representations. It manipulates contexts, connections, commands, and SQL value types to handle tasks like parameterized query execution, result metadata extraction, and row data binding. Specific applications include low-level interaction with Sybase or Microsoft SQL Server databases, streaming query results, and robust error handling via structured message retrieval during database operations.",
      "description_length": 603,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Freetds.Dblib",
      "library": "freetds",
      "description": "This module offers low-level imperative operations for database interaction, following the C API's strict sequencing requirements. It manages connections, executes SQL queries, and processes result sets using a `dbprocess` handle, with support for column metadata, row iteration, and error severity handling. Key use cases include implementing custom error/message handlers for database diagnostics and configuring timeouts for query execution in scenarios requiring direct control over FreeTDS behavior.",
      "description_length": 504,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Freetds",
      "library": "freetds",
      "description": "This module provides low-level access to database operations through the FreeTDS library, enabling direct interaction with Sybase and Microsoft SQL Server databases. It supports connection management, SQL execution, and data type conversion, with key data types including connections, commands, and SQL values. Operations allow for parameterized queries, result streaming, and custom error handling, such as binding rows, extracting metadata, and managing timeouts. Example uses include executing a parameterized query with bound parameters and iterating over a result set to process each row.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 603,
    "min_description_length": 504,
    "avg_description_length": 566.6666666666666,
    "embedding_file_size_mb": 0.011335372924804688
  }
}