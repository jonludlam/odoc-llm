{
  "package": "dunolint-lib",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 74,
  "creation_timestamp": "2025-08-15T15:18:56.225193",
  "modules": [
    {
      "module_path": "Validated_string.Make",
      "library": "dunolint-lib.vendor_vcs",
      "description": "This module enforces the representation of a validated string type where `t` is guaranteed to be a string. It provides `of_string` to safely construct values by checking an invariant, returning an error if validation fails, and `v` to construct values from trusted strings with unchecked conversion. These operations support safe handling of string-based abstractions that require validation, such as identifiers or formatted values.",
      "description_length": 433,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Container_key.String_impl",
      "library": "dunolint-lib.vendor_vcs",
      "description": "This module defines a string-based key type with comparison, equality, and hashing operations. It supports use cases like using strings as keys in hash tables or ordered containers where consistent hashing and comparison are required. The module also includes serialization and deserialization functions for working with S-expressions.",
      "description_length": 335,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Validated_string",
      "library": "dunolint-lib.vendor_vcs",
      "description": "This module implements a validated string abstraction with safe construction via `of_string`, which enforces invariants and returns errors on failure, and an unchecked constructor `v` for trusted inputs. It works with string-based types that require validation, such as identifiers, tokens, or formatted values. Use this to ensure data integrity when handling strings that must conform to specific rules, like email formats or alphanumeric IDs.",
      "description_length": 444,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Container_key",
      "library": "dunolint-lib.vendor_vcs",
      "description": "This module defines a string-based key type with comparison, equality, and hashing operations. It includes support for serialization and deserialization using S-expressions. The key type is suitable for use as identifiers in hash tables or ordered collections where consistent ordering and hashing are necessary.",
      "description_length": 312,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Validated_string_intf",
      "library": "dunolint-lib.vendor_vcs",
      "description": "This module defines interfaces for validating and manipulating string values with specific constraints. It includes operations to check string formats, apply transformations, and handle invalid cases through result types. The module works primarily with string-based data structures where validation is required, such as parsing user input or processing configuration values.",
      "description_length": 375,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Pps.Predicate.Flag.Applies_to",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing the target of a preprocessor flag in a Dune configuration, which can apply to any preprocessor, a specific driver, or a named preprocessor. It includes standard comparison, equality, and S-expression serialization functions for use in configuration parsing and analysis. Concrete use cases include determining which preprocessor a given flag applies to during Dune file validation or transformation.",
      "description_length": 443,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Pps.Predicate.Pp_with_flag",
      "library": "dunolint-lib",
      "description": "This module defines a data structure representing a preprocessor with an associated command-line flag and parameter. It supports comparison, equality checks, and S-expression serialization for parsing and persisting configurations. It is used to specify and validate preprocessor flags in Dune project files.",
      "description_length": 308,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable.Public_name.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines predicates for matching public names of executables based on exact equality, prefix, or suffix checks. It supports operations like `compare`, `equal`, and S-expression serialization/deserialization for efficient comparison and data persistence. Use this module to filter or classify executable names during linting or configuration validation tasks.",
      "description_length": 369,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Instrumentation.Backend.Name",
      "library": "dunolint-lib",
      "description": "This module defines a validated string type `t` for representing backend names in Dune instrumentation, ensuring values meet specific validity constraints. It provides comparison, equality, and hashing operations, along with serialization to and from S-expressions and strings. Use cases include safely constructing and validating backend identifiers from both trusted and untrusted sources.",
      "description_length": 391,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Library.Name.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a set of predicates for matching library names based on exact equality, prefix, or suffix checks. It provides comparison, equality, and S-expression conversion functions for these predicates. Concrete use cases include filtering or validating Dune library names during linting based on specific naming conventions or rules.",
      "description_length": 343,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Pps.Predicate.Param",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic variant type `t` representing predicate parameters for Dune preprocessing specifications, including exact string matching and universal or existential quantifiers. It provides comparison, equality checks, and S-expression serialization/deserialization for this type. Concrete use cases include validating and transforming Dune configuration files based on specific preprocessing conditions.",
      "description_length": 424,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Pps.Predicate.Flag",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing preprocessor flags in a Dune configuration, including their name, parameter, and target applicability. It provides comparison, equality, and S-expression serialization functions for parsing and analyzing Dune files. Concrete use cases include validating and transforming preprocessor flag configurations by comparing and serializing flag definitions.",
      "description_length": 394,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Library.Public_name.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a set of predicates for matching public library names in Dune configurations. It supports exact matches, prefix checks, and suffix checks against a given public name. These predicates are used to define filtering or selection logic for Dune library names based on string relationships.",
      "description_length": 305,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable.Name.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines predicates for matching executable names in Dune files, supporting exact matches, prefix checks, and suffix checks. It works with the `name` type representing Dune executable names and standard types like strings and S-expressions. Concrete use cases include validating executable names during linting and filtering targets based on naming conventions.",
      "description_length": 372,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable.Name",
      "library": "dunolint-lib",
      "description": "This module implements validated string wrappers for Dune executable names with strict validation, comparison, and serialization operations. It supports exact name validation via `of_string` and unsafe construction via `v`, ensuring values conform to Dune's naming rules. The `Predicate` submodule enables matching names against patterns for filtering and linting workflows.",
      "description_length": 374,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Stanza.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a set of predefined predicates used to match or filter Dune stanza types, such as libraries, executables, or include subdirectories. It includes operations for comparison, equality checks, and S-expression serialization/deserialization for these predicates. These functions are used to analyze or manipulate Dune configuration stanzas based on their category.",
      "description_length": 379,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Instrumentation.Backend",
      "library": "dunolint-lib",
      "description": "This module defines a validated string type `t` for representing backend names in Dune instrumentation, ensuring values meet specific validity constraints. It provides comparison, equality, and hashing operations, along with serialization to and from S-expressions and strings. Use cases include safely constructing and validating backend identifiers from both trusted and untrusted sources.",
      "description_length": 391,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Lint.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines and manipulates predicate expressions used to specify conditions on ppx rewriters and their parameters in lint configurations. It supports operations like comparison, equality checks, and S-expression conversion for structured analysis and configuration validation. Concrete use cases include defining conditional logic for enabling or restricting specific ppx rewriters and flags in library or executable stanzas.",
      "description_length": 434,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Package.Name",
      "library": "dunolint-lib",
      "description": "This module defines a validated string type for package names, ensuring values conform to specific naming invariants. It provides comparison, equality checking, hashing, and S-expression serialization for this type. Functions like `of_string` and `v` allow safe construction from raw strings, suitable for validating user input or configuration files.",
      "description_length": 351,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Library.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic variant type `t` representing predicates for filtering or matching Dune library fields such as name, public name, lint settings, instrumentation, and preprocessing. It includes operations for comparison, equality checks, and S-expression serialization/deserialization tailored to these predicates. Use cases include defining and manipulating structured conditions for Dune library analysis or transformation tools.",
      "description_length": 448,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Preprocess.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines and manipulates predicate values used to specify conditional preprocessing configurations, particularly for ppx rewriters and their associated flags or parameters. It supports operations like comparison, equality checks, and S-expression serialization/deserialization for structured data representation. Concrete use cases include defining conditions under which specific ppx rewriters are applied during build configuration in Dune files.",
      "description_length": 459,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Library.Name",
      "library": "dunolint-lib",
      "description": "This module implements validated string identifiers for Dune library names, enforcing invariants via `of_string` and `v`. It supports comparison, hashing, and S-expression serialization, with direct conversions to and from strings. The `Predicate` submodule enables filtering and validation against naming rules like exact matches, prefixes, or suffixes during linting workflows.",
      "description_length": 379,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Include_subdirs.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a single predicate type that checks equality against an `Include_subdirs.Mode.t` value. It provides comparison, equality, and S-expression serialization functions for this predicate. Use this module to define and manipulate conditions based on include subdirectory modes in Dune configurations.",
      "description_length": 314,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Name.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a set of predicates for matching project names based on exact equality, prefix, or suffix checks. It provides comparison and serialization functions to support use in sets, maps, and configuration parsing. Concrete use cases include filtering or validating project names in linting rules based on naming conventions.",
      "description_length": 336,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Instrumentation.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing predicates for filtering or matching instrumentation backends by name. It provides comparison, equality checks, and S-expression serialization/deserialization for these predicates. It is used to specify and manipulate conditions based on backend names in the context of Dune instrumentation.",
      "description_length": 335,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Library.Public_name",
      "library": "dunolint-lib",
      "description": "This module implements validated string identifiers for Dune library public names, ensuring correctness through invariant checks. It provides comparison, hashing, serialization, and string conversion operations, along with validation functions that return result types or raise on failure. The module's `Predicate` submodule enables matching of public names using exact, prefix, and suffix checks, useful for filtering Dune configuration entries based on library naming patterns.",
      "description_length": 479,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Include_subdirs.Mode",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing the mode for including subdirectories in Dune files, with variants `no`, `unqualified`, and `qualified`. It provides comparison, equality checks, and S-expression serialization/deserialization for this type. This is used to enforce or interpret subdirectory inclusion policies in Dune project configurations.",
      "description_length": 352,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Pp.Name",
      "library": "dunolint-lib",
      "description": "This module defines a validated string type for names used in Dune configuration files. It ensures values conform to specific naming conventions through validation functions like `of_string` and `v`, which either return an error or a normalized name. The module supports standard operations like comparison, equality checks, hashing, and S-expression serialization for use in configuration parsing and linting workflows.",
      "description_length": 420,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic variant type `t` representing predicates for filtering or matching executable configurations in Dune files, supporting operations like comparing and serializing predicates. It works with string-based names, public names, linting configurations, instrumentation backends, and preprocessing settings. Concrete use cases include defining conditions to select or validate specific executable attributes during Dune project analysis or transformation.",
      "description_length": 480,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Config.Skip_subtree.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing predicates for skipping subtrees based on file paths, using a branded logical formula (`Blang.t`) over path predicates. It provides comparison, equality, and S-expression serialization/deserialization operations for this type. Concrete use cases include configuring which directories or files to exclude during linting based on declarative path conditions.",
      "description_length": 400,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Pps.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic variant type `t` that represents Dune preprocessing specifications, including preprocessors, flags, and combined preprocessor-flag pairs. It provides comparison, equality checks, and S-expression serialization/deserialization for analyzing and transforming Dune configuration files. Concrete use cases include validating preprocessor configurations and persisting them during Dune project setup or linting.",
      "description_length": 440,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Implicit_transitive_deps.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a single polymorphic variant type `t` with a constructor `equals` that wraps a boolean. It provides comparison, equality checking, and S-expression serialization and deserialization for this type. This type is used to represent a predicate that checks for equality in the context of implicit transitive dependencies analysis.",
      "description_length": 345,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Config.Skip_subtree.Result",
      "library": "dunolint-lib",
      "description": "This module defines a result type for representing skipped subtree configurations, which is an alias to `Base.Nothing.t`. It includes standard comparison, equality, and S-expression serialization functions for handling skip subtree results in configuration parsing and analysis. This type is used to explicitly model cases where a subtree should be skipped during linting, with support for marshaling to and from S-expressions for configuration file processing.",
      "description_length": 461,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Generate_opam_files.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a single predicate type `t` with one constructor, `is_present`, used to represent the presence of a condition in generating opam files. It provides comparison, equality checks, and S-expression serialization/deserialization for this type. This type is used to encode whether a particular field or constraint should be included when generating opam file contents.",
      "description_length": 382,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable.Public_name",
      "library": "dunolint-lib",
      "description": "This module represents validated public names of executables as opaque strings, ensuring correctness through invariant checks. It provides comparison, equality, hashing, and serialization operations, along with safe and unsafe constructors for converting raw strings. Use it to enforce valid executable names during configuration parsing or linting, ensuring consistency and correctness in downstream processing.",
      "description_length": 412,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing structured predicates for filtering and matching Dune configuration elements like executables, libraries, and preprocessing settings. It supports operations such as exact matches, prefix/suffix checks, and boolean logic via `Blang.t`, enabling precise rule definitions for linting or analysis tools. Concrete use cases include validating naming conventions, checking preprocessing flags, and enforcing linting configurations in Dune files.",
      "description_length": 483,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Implicit_transitive_deps",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic variant type `t` with an `equals` constructor that wraps a boolean. It provides functions for comparison, equality checking, and S-expression serialization and deserialization for this type. The type is used to represent equality-checking predicates in the analysis of implicit transitive dependencies.",
      "description_length": 336,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Config.Std",
      "library": "dunolint-lib",
      "description": "This module provides operations to construct and compose boolean logic expressions (`Blang.t`) with Dune-specific configuration conditions, using primitives like `and_`, `or_`, and domain tags such as `backend` or `executable`. It works with Dune types (`Dune.Pp.Name.t`, `Dune.Pps.Predicate.Pp_with_flag.t`), strings, and generic values to model build and linting rules, enabling precise control over configuration via predicates for fields, paths, and preprocessing. These tools are used to define conditional logic in linter configurations, represent configuration stanzas as first-class values, and enforce domain-specific constraints during build processes.",
      "description_length": 662,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Lint",
      "library": "dunolint-lib",
      "description": "This module handles configuration for linting in Dune files, specifically managing ppx rewriters, flags, and parameters. It works with structured data like S-expressions and supports conditional logic through predicate expressions. Concrete use cases include specifying when certain ppx rewriters should apply based on build contexts or configuration parameters.",
      "description_length": 362,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Pp",
      "library": "dunolint-lib",
      "description": "This module provides functions for validating and normalizing strings used as names in Dune configuration files. It includes operations like `of_string` and `v` that enforce naming conventions, returning either an error or a normalized name. The module supports comparison, equality, hashing, and S-expression conversion, enabling robust configuration parsing and linting workflows.",
      "description_length": 382,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Path.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing path matching criteria, either exact matches or glob patterns. It provides comparison, equality checks, and S-expression serialization/deserialization for these predicates. Useful for filtering or validating file paths against specific rules in linters or build tools.",
      "description_length": 312,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Config.Rule",
      "library": "dunolint-lib",
      "description": "This module defines and manipulates rule configurations based on predicates and conditions. It supports comparison, equality checks, and S-expression serialization/deserialization for structured data validation rules. Use this module to define and persist rule sets that determine conditional behaviors in a configuration-driven system.",
      "description_length": 336,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Executable",
      "library": "dunolint-lib",
      "description": "This module provides strict validation, comparison, and serialization for Dune executable names and public names, along with predicate-based filtering. It works with string-based names, public names, and linting configurations to enforce Dune's naming rules and support attribute-based selection. Concrete use cases include validating executable names during configuration parsing and defining filtering conditions for linting and project transformation workflows.",
      "description_length": 464,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a type `t` representing predicates for filtering or matching Dune project properties, such as whether to generate OPAM files, handling of implicit transitive dependencies, and name-based conditions using equality, prefixes, or suffixes. It includes standard comparison, equality, and S-expression conversion functions for these predicates. Concrete use cases include defining rules for Dune project validation or transformation based on project metadata.",
      "description_length": 474,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Package",
      "library": "dunolint-lib",
      "description": "This module defines a validated string type for package names with enforced naming invariants. It supports operations such as safe construction from raw strings, comparison, equality checking, hashing, and S-expression serialization. It is used to ensure correctness of package names in user input or configuration files.",
      "description_length": 321,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Stanza",
      "library": "dunolint-lib",
      "description": "This module provides functions to define and manipulate predicates for filtering Dune stanza types such as libraries and executables. It supports operations like comparison, equality checks, and S-expression serialization and deserialization. These capabilities enable precise analysis and transformation of Dune configuration stanzas based on their type and structure.",
      "description_length": 369,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Generate_opam_files",
      "library": "dunolint-lib",
      "description": "This module generates opam file contents based on dune project configurations. It uses the `Predicate` type to determine inclusion of specific fields or constraints during file generation. Concrete use cases include conditionally producing opam stanzas from dune-project metadata.",
      "description_length": 280,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Library",
      "library": "dunolint-lib",
      "description": "This module provides validated string identifiers for Dune library names and public names, enforcing naming invariants through construction functions and supporting comparison, hashing, and S-expression serialization. It includes a `Predicate` submodule for defining and evaluating match conditions on library attributes like name, public name, and lint settings. Concrete use cases include enforcing naming conventions and filtering libraries during Dune configuration analysis and linting workflows.",
      "description_length": 501,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Pps",
      "library": "dunolint-lib",
      "description": "This module processes Dune preprocessing specifications using a polymorphic variant type `t` that represents preprocessors, flags, and their combinations. It supports comparison, equality, and S-expression serialization for analyzing and transforming Dune configurations. It is used for validating and persisting preprocessor settings during Dune project setup or linting workflows.",
      "description_length": 382,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project.Name",
      "library": "dunolint-lib",
      "description": "This module implements validated project name handling with strict validation, comparison, and serialization. It works with project names represented as strings, ensuring they meet specific invariants through functions like `of_string` and `v`. It supports concrete use cases such as validating project names from untrusted sources and enforcing naming conventions during linting.",
      "description_length": 380,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Include_subdirs",
      "library": "dunolint-lib",
      "description": "This module handles subdirectory inclusion modes and predicates for Dune project configurations. It defines a mode type with `no`, `unqualified`, and `qualified` variants, along with equality, comparison, and S-expression serialization for both modes and predicates that check mode equality. It is used to enforce or evaluate subdirectory inclusion policies in Dune files directly.",
      "description_length": 381,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune.Preprocess",
      "library": "dunolint-lib",
      "description": "This module configures preprocessing settings for libraries and executables, supporting specification of ppx rewriters, flags, and parameters. It works with structured data representations such as S-expressions and predicate values to define conditional preprocessing rules. Concrete use cases include setting up per-compilation-unit preprocessing conditions based on environment variables or build contexts.",
      "description_length": 408,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Config.Skip_subtree",
      "library": "dunolint-lib",
      "description": "This module implements skip subtree configuration rules using path-based predicates and result types to control linting behavior. It supports comparing, serializing, and deserializing rule configurations for use in parsing and analyzing project structures. Concrete use cases include defining and processing which directories or files to exclude from linting based on path conditions in configuration files.",
      "description_length": 407,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune.Instrumentation",
      "library": "dunolint-lib",
      "description": "This module provides types and operations for managing instrumentation backends and predicates in Dune. It includes a validated string type for backend names with equality, comparison, and serialization, along with a predicate type for matching backend names. These are used to safely construct, filter, and validate instrumentation backends based on name conditions.",
      "description_length": 367,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Trilang",
      "library": "dunolint-lib",
      "description": "This module implements a ternary logic system with values `True`, `False`, and `Undefined`. It provides logical operations such as `conjunction`, `disjunction`, and `eval`, which operate on these ternary values, allowing for short-circuiting and custom evaluation. These functions are used to implement conditional logic in configuration analysis and linting rules where truth values may be indeterminate or context-dependent.",
      "description_length": 426,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Config",
      "library": "dunolint-lib",
      "description": "This module manages configuration settings for a linter, supporting operations to define, compare, and serialize rules and skip conditions. It works with structured types like `t`, `Skip_subtree.t`, and `Rule.t`, enabling precise control over which project directories are excluded and which linting rules are applied. Concrete use cases include parsing and applying linter configurations from S-expressions, defining path-based exclusions, and composing rule sets that enforce code quality checks based on project structure.",
      "description_length": 525,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Glob",
      "library": "dunolint-lib",
      "description": "This module implements glob pattern matching operations, converting strings into glob patterns and testing if other strings match those patterns. It supports basic glob syntax like wildcards and character classes, providing precise matching functionality for file paths or textual identifiers. The module also includes serialization and comparison functions for glob values.",
      "description_length": 374,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Rule",
      "library": "dunolint-lib",
      "description": "This module defines operations for comparing, serializing, and evaluating rule structures parameterized by `predicate` and `invariant` types. It supports equality checks, S-expression conversion, and rule evaluation that determines enforcement behavior based on a given function. Concrete use cases include defining and processing linting rules with customizable conditions and invariants in a type-safe manner.",
      "description_length": 411,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Path",
      "library": "dunolint-lib",
      "description": "This module handles path matching logic using exact or glob-based criteria. It supports operations like comparison, equality checks, and S-expression serialization for predicates, enabling validation and filtering of file paths. It is used in linters and build tools to enforce path-based rules.",
      "description_length": 295,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Condition",
      "library": "dunolint-lib",
      "description": "This module represents conditions as parsed logical expressions over file system predicates. It supports comparing and checking equality of conditions, along with serialization to and from S-expressions. It is used to define and manipulate structured linter rules based on file metadata.",
      "description_length": 287,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Predicate",
      "library": "dunolint-lib",
      "description": "This module defines a polymorphic type `t` representing predicates over paths, dune files, or dune_project files, using boolean logic expressions. It provides comparison, equality checks, and S-expression serialization/deserialization for these predicates. Concrete use cases include filtering and validating project structures based on file paths or dune configuration contents.",
      "description_length": 379,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Dune_project",
      "library": "dunolint-lib",
      "description": "This module organizes functionality for analyzing and transforming Dune project configurations based on structured predicates. It handles project names with strict validation, manages implicit transitive dependency analysis through boolean-wrapped equality checks, and generates OPAM file contents conditionally using predicate-based rules. Concrete use cases include validating project metadata, filtering dune-project properties, and producing constrained OPAM stanzas during linting workflows.",
      "description_length": 496,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolint.Dune",
      "library": "dunolint-lib",
      "description": "This module implements core data types and operations for validating, comparing, and serializing Dune configuration elements such as executable names, library identifiers, package names, and preprocessing settings. It works directly with string-based identifiers, S-expressions, and predicate expressions to enforce naming rules, support attribute-based filtering, and manage configuration conditions. Concrete use cases include validating Dune file inputs, defining linting rules, and transforming project configurations based on structured criteria.",
      "description_length": 551,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint.Std",
      "library": "dunolint-lib",
      "description": "Includes core modules like `List`, `Option`, and `Result` for working with common data structures. Provides direct access to standard utilities for manipulating these types without requiring fully qualified names. Useful for simplifying code that frequently uses these built-in types and their associated operations.",
      "description_length": 316,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint",
      "library": "dunolint-lib",
      "description": "This module provides structured linting capabilities through condition parsing, path and Dune configuration validation, and predicate-based rule evaluation. It operates on file system metadata, glob patterns, and Dune-specific identifiers to enforce code quality checks and manage configuration rules. Concrete use cases include validating Dune project structures, applying path-based exclusions, and defining serializable linter rules with custom conditions.",
      "description_length": 459,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Blang.Stable.V1",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module represents boolean expressions built from base properties and standard logical operators. It supports comparing, hashing, and serializing expressions with user-defined property types. Typical use cases include evaluating or manipulating symbolic boolean logic in configurations or domain-specific languages.",
      "description_length": 319,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang.Let_syntax.Let_syntax",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module provides monadic operations for building and combining boolean expressions, including `bind`, `map`, `both`, and `return`. It works with boolean expressions represented as `'a Blang.t`, enabling composition through monadic chaining and product operations. Concrete use cases include constructing complex boolean logic with intermediate results, such as combining multiple property checks into a single expression.",
      "description_length": 425,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang.For_monad",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module provides monadic versions of mapping, binding, and evaluation operations over boolean expressions. It works with boolean expressions parameterized over a monad, allowing for effectful transformations and evaluations. Concrete use cases include evaluating boolean expressions in contexts with side effects, such as reading from a state or handling optional values, and composing boolean logic with monadic control flow.",
      "description_length": 430,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Blang.Let_syntax",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module provides monadic operations for building and combining boolean expressions, including `bind`, `map`, `both`, and `return`. It works with boolean expressions represented as `'a Blang.t`, enabling composition through monadic chaining and product operations. Concrete use cases include constructing complex boolean logic with intermediate results, such as combining multiple property checks into a single expression.",
      "description_length": 425,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang.Monad_infix",
      "library": "dunolint-lib.vendor_blang",
      "description": "Sequences boolean expression computations using monadic bind and map. Works with `'a Blang.t` values representing deferred boolean operations. Enables chaining property evaluations and transformations into composite conditions.",
      "description_length": 227,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang.O",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module provides operations for constructing and manipulating boolean expressions using a set of combinators and operators. It works with the `'a Blang.t` type, representing boolean expressions parameterized over a context type `'a`. Concrete use cases include building complex boolean logic trees, such as combining conditions with `and_`, `or_`, and `not_`, and expressing conditional logic using `if_`.",
      "description_length": 409,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang.Stable",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module implements boolean expressions using user-defined property types, supporting operations like conjunction, disjunction, and negation. It provides functions for evaluating expressions in a given context, comparing expressions for equality, and serializing them for storage or transmission. Concrete use cases include symbolic manipulation of configuration rules and domain-specific logic where boolean expressions must be constructed, transformed, and evaluated dynamically.",
      "description_length": 484,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Blang.Raw",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module reuses the boolean expression type from `Blang` and provides a function to convert these expressions into S-expressions. The conversion function `sexp_of_t` takes a function to handle the atomic values and produces an S-expression representation of the boolean structure. It is used primarily for inspecting and debugging the internal form of boolean expressions during development.",
      "description_length": 394,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Blang",
      "library": "dunolint-lib.vendor_blang",
      "description": "This module represents boolean expressions parameterized over a context type, enabling logical operations like conjunction, disjunction, and negation through combinators such as `and_`, `or_`, and `not_`. It supports traversal, transformation, and analysis of expression structures via monadic operations (`bind`, `map`) and collection-style functions (`fold`, `exists`), while providing evaluation capabilities (`eval`, `specialize`) for dynamic execution in specific contexts. Use cases include constructing customizable logical conditions, analyzing expression properties, and composing effectful boolean computations with short-circuiting behavior.",
      "description_length": 652,
      "index": 73,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 75,
    "meaningful_modules": 74,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9866666666666667
  },
  "statistics": {
    "max_description_length": 662,
    "min_description_length": 227,
    "avg_description_length": 398.7837837837838,
    "embedding_file_size_mb": 1.0727519989013672
  }
}