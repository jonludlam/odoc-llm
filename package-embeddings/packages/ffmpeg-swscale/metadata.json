{
  "package": "ffmpeg-swscale",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:22.756581",
  "modules": [
    {
      "module_path": "Swscale.Bytes",
      "library": "ffmpeg-swscale",
      "description": "This module operates on byte arrays representing pixel data, providing functions to scale images and convert between color spaces or pixel formats. It works directly with the `t` type, which pairs string buffers and integer strides to represent image planes. Concrete use cases include resizing video frames and converting RGB to YUV formats during media processing pipelines.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swscale.VideoData",
      "library": "ffmpeg-swscale",
      "description": "This module defines the data structures and vector kinds used to represent raw video frames during image scaling and color conversion operations. It includes a type `t` that encapsulates video data buffers and a `vk` value specifying the vector kind for memory alignment and access patterns. It is used to configure input and output parameters for video processing pipelines that require precise buffer handling and format specification.",
      "description_length": 437,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swscale.Make",
      "library": "ffmpeg-swscale",
      "description": "This module builds a scaler context for converting video data between specified input and output formats, supporting resizing and pixel format transformations. It operates on video data structures provided by the parameter modules `I` and `O`, which define the input and output data types. Use it to scale frames from one resolution and pixel format to another, such as converting RGB to YUV or resizing 4K video to HD.",
      "description_length": 419,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swscale.Frame",
      "library": "ffmpeg-swscale",
      "description": "This module represents video frames with a specific type binding to `Avutil.video Avutil.frame`, enabling direct manipulation of frame data. It includes a `vector_kind` value that specifies the memory layout for frame buffers. Concrete use cases include storing and processing raw video data during scaling or format conversion operations.",
      "description_length": 339,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swscale.PackedBigArray",
      "library": "ffmpeg-swscale",
      "description": "This module represents pixel data in a single packed array for efficient image scaling and color conversion. It provides access to raw pixel memory through `data` and describes memory layout with `planes` and `stride`. It is used when handling packed pixel formats like RGB24 or YUV422 where all pixel components are stored contiguously.",
      "description_length": 337,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swscale.BigArray",
      "library": "ffmpeg-swscale",
      "description": "This module represents image data as a big array of unsigned 8-bit integers, organized into separate planes for each color channel. It provides direct access to pixel data through the `vk` vector kind and the `t` type, which corresponds to a collection of planes. It is used when handling raw image buffers for operations like scaling or format conversion, where each plane must be processed individually.",
      "description_length": 405,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swscale",
      "library": "ffmpeg-swscale",
      "description": "This module handles image scaling and pixel format conversion using software algorithms on raw video data structured as planar or packed arrays. It supports resizing frames and converting between formats like RGB and YUV, using interpolation methods such as bilinear and bicubic. Operations are performed on types like `t` for image planes and `vk` for memory alignment, enabling precise buffer handling during video processing pipelines. Examples include scaling 4K video to HD resolution or converting RGB frames to YUV for encoding.",
      "description_length": 535,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 535,
    "min_description_length": 337,
    "avg_description_length": 406.85714285714283,
    "embedding_file_size_mb": 0.025838851928710938
  }
}