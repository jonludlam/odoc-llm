{
  "package": "sortedseq_intersect",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:06.400252",
  "modules": [
    {
      "module_path": "Sortedseq_intersect.Sorted_seq_intersect.S",
      "library": "sortedseq_intersect",
      "description": "This module defines a container type for sequences with a comparison function for elements. It supports operations to retrieve elements by index, compare elements, and determine the sequence length. It is used for implementing sorted sequence intersections where element ordering is essential.",
      "description_length": 293,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sortedseq_intersect.Sorted_seq_intersect",
      "library": "sortedseq_intersect",
      "description": "This module computes intersections of sorted sequences using linear merge, binary search-based, and adaptive methods, supporting range-restricted processing and varying sequence sizes. It operates on sorted sequences of any type, producing intersection results as lists, and relies on a container type that provides indexed access, element comparison, and length determination. Specific use cases include efficient set intersection on large datasets, performance-optimized queries when one sequence is much smaller than the other, and comparisons restricted to specific ranges. The direct API selects intersection algorithms while submodules manage sequence representation and ordering.",
      "description_length": 686,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sortedseq_intersect",
      "library": "sortedseq_intersect",
      "description": "This module computes intersections of sorted sequences using linear merge, binary search-based, and adaptive methods, supporting range restrictions and varying sequence sizes. It operates on any sorted sequence type with indexed access, element comparison, and length tracking, producing intersection results as lists. You can efficiently compute set intersections on large datasets, optimize performance when one sequence is much smaller than the other, and restrict comparisons to specific ranges. The API lets you select intersection algorithms, while submodules handle sequence representation and ordering.",
      "description_length": 610,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 686,
    "min_description_length": 293,
    "avg_description_length": 529.6666666666666,
    "embedding_file_size_mb": 0.011320114135742188
  }
}