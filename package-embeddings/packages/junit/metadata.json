{
  "package": "junit",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:04:48.571956",
  "modules": [
    {
      "module_path": "Junit.Testsuite",
      "library": "junit",
      "description": "This module creates and manipulates JUnit test suite reports with support for adding test cases and metadata properties. It works with structured data types including test suites, test cases, and key-value properties. Concrete use cases include aggregating test results from a test run, attaching system output and timestamps, and exporting the final suite to XML for Jenkins integration.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit.Testcase",
      "library": "junit",
      "description": "This module creates individual test case elements for JUnit reports, including pass, skip, failure, and error cases with specific metadata. It works with strings for test names, class names, types, messages, and descriptions, along with float values for time. These functions are used to construct structured test results that Jenkins can process into test reports.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Junit.Property",
      "library": "junit",
      "description": "This module creates and manages key-value pairs representing test execution properties, such as environment settings. It works with string-based names and values to construct property entries. These properties are used to enrich JUnit test reports with contextual metadata for tools like Jenkins.",
      "description_length": 296,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Junit_xml",
      "library": "junit",
      "description": "This module provides operations for constructing and serializing JUnit XML elements, such as test cases, errors, and test suites, using structured types like `property`, `error`, `failure`, and `testsuite`. It leverages `Ptime.t` for timestamp handling and offers typed constructors paired with XML conversion functions to manually assemble reports. These capabilities are particularly useful for generating custom JUnit XML outputs when predefined tools lack flexibility in report structure or content.",
      "description_length": 503,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit",
      "library": "junit",
      "description": "This module generates JUnit XML reports compatible with Jenkins, enabling structured test result aggregation and export. It provides operations to build test suites, add test cases with outcomes and timing, and attach key-value properties for metadata. For example, it can capture test execution data, including pass/fail statuses, error messages, and environment settings, then output a compliant XML file for CI/CD integration. Submodules handle test suite aggregation, individual test case creation, and property management, offering a complete toolkit for constructing detailed test reports.",
      "description_length": 595,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 595,
    "min_description_length": 296,
    "avg_description_length": 429.4,
    "embedding_file_size_mb": 0.018616676330566406
  }
}