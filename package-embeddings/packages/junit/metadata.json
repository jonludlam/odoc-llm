{
  "package": "junit",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:57:50.982957",
  "modules": [
    {
      "module_path": "Junit.Testsuite",
      "library": "junit",
      "description": "This module creates and manipulates JUnit test suite reports, aggregating test cases and properties. It works with test suites, test cases, and key-value properties to capture execution metadata like timestamps, hostnames, and output logs. Concrete use cases include generating structured XML reports for CI systems like Jenkins after test execution.",
      "description_length": 350,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit.Property",
      "library": "junit",
      "description": "This module creates and manages key-value pairs representing test environment properties, such as system settings or runtime configurations. It supports generating these properties in a format compatible with JUnit XML reports. Use it to embed metadata like OS version or test environment details directly into test output for CI tools like Jenkins.",
      "description_length": 349,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit.Testcase",
      "library": "junit",
      "description": "This module creates individual test case elements for JUnit reports, including pass, failure, error, and skipped states, each with associated metadata like name, class name, and execution time. It works with strings for test identifiers and descriptions, float values for timing, and constructs structured test case values. Concrete use cases include logging test outcomes from unit test suites to generate XML reports compatible with Jenkins.",
      "description_length": 443,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit",
      "library": "junit",
      "description": "This module creates and manages JUnit XML reports for CI systems like Jenkins, supporting test suites, test cases, and environment properties. It provides functions to build structured test outputs with pass/failure statuses, execution times, and metadata, then export them to XML files. Concrete use cases include generating Jenkins-compatible test reports from OCaml unit test runs.",
      "description_length": 384,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Junit_xml",
      "library": "junit",
      "description": "This module provides operations to construct and serialize XML elements representing JUnit test reports, including test cases, test suites, and properties. It defines types for test outcomes (error, failure, pass, skipped), suite metadata (name, timestamp, test counts), and attributes like `id`, enabling manual report assembly with direct control over XML structure. It serves use cases requiring custom JUnit XML generation beyond standard library abstractions, such as integrating with tools expecting specific schema-compliant outputs.",
      "description_length": 540,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 540,
    "min_description_length": 349,
    "avg_description_length": 413.2,
    "embedding_file_size_mb": 0.07291126251220703
  }
}