{
  "package": "unisim_archisec",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:05:04.423043",
  "modules": [
    {
      "module_path": "Aarch64dba",
      "library": "unisim_archisec.aarch64dba",
      "description": "This module provides a single function `decode` that takes a 64-bit integer address and a 32-bit integer instruction, and returns a string representing the disassembled AArch64 instruction. It operates directly on raw machine code values, producing human-readable assembly mnemonics. Use this module to inspect or analyze AArch64 machine instructions in low-level debugging or binary analysis tasks.",
      "description_length": 399,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Arm32dba",
      "library": "unisim_archisec.arm32dba",
      "description": "Decodes 32-bit ARM instructions into human-readable assembly strings, handling both Thumb and ARM modes. Accepts parameters such as instruction encoding, address, endianness, and IT state for conditional execution. Useful for disassembling raw machine code during reverse engineering or debugging low-level programs.",
      "description_length": 316,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppc64dba",
      "library": "unisim_archisec.ppc64dba",
      "description": "This module provides a `decode` function that takes a 64-bit address and a 32-bit integer representing machine code, returning a string that disassembles the instruction. It operates on low-level integer types (`int64` and `int32`) to interpret PowerPC 64-bit assembly instructions. Use cases include disassembling raw machine code for analysis, debugging, or instruction inspection in binary tools.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sparcdba",
      "library": "unisim_archisec.sparcdba",
      "description": "Decodes a 32-bit integer value into a string representation using a specific algorithm, based on the given address and two additional integer parameters. Works directly with `int32` and `string` types. Useful for converting low-level numeric data into human-readable strings in networking or binary protocol implementations.",
      "description_length": 324,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Amd64dba",
      "library": "unisim_archisec.amd64dba",
      "description": "This module provides a `decode` function that disassembles machine code into human-readable assembly instructions. It operates on a 64-bit address, a boolean indicating 64-bit mode, and a string of machine code bytes. It is used to analyze and debug low-level code, such as examining compiled binaries or crafting custom assembly sequences.",
      "description_length": 340,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 399,
    "min_description_length": 316,
    "avg_description_length": 355.6,
    "embedding_file_size_mb": 0.0728750228881836
  }
}