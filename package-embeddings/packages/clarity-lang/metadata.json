{
  "package": "clarity-lang",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:37.298989",
  "modules": [
    {
      "module_path": "Clarity.Integer",
      "library": "clarity-lang",
      "description": "This module implements arbitrary-precision integer arithmetic with conversions to and from various integer and string representations. It provides equality checks, comparison, and type conversion functions for handling large integers beyond the limits of native machine types. Concrete use cases include cryptographic calculations, financial computations requiring exact precision, and parsing or serializing numeric data in text formats.",
      "description_length": 438,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Clarity.Sexp",
      "library": "clarity-lang",
      "description": "This module represents and manipulates S-expressions, supporting equality checks and formatted printing. It works with symbolic expressions, literals, and nested lists of expressions. Useful for parsing and pretty-printing structured data in a Lisp-like format.",
      "description_length": 261,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Clarity",
      "library": "clarity-lang",
      "description": "This module provides syntactic manipulation and formatting capabilities for Clarity smart contract programs, centered around parsing S-expressions, comparing AST nodes, and generating human-readable representations of expressions, literals, and program definitions. It includes submodules for arbitrary-precision integer arithmetic used in cryptographic and financial computations, and for working with S-expressions through equality checks and structured printing. Operations allow precise structural comparisons, code transformation, and pretty-printing of complex contract logic. Examples include analyzing contract code, converting large integers between representations, and serializing nested expressions into readable text.",
      "description_length": 730,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 730,
    "min_description_length": 261,
    "avg_description_length": 476.3333333333333,
    "embedding_file_size_mb": 0.011318206787109375
  }
}