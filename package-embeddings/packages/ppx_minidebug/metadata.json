{
  "package": "ppx_minidebug",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:09:08.440163",
  "modules": [
    {
      "module_path": "Ppx_minidebug",
      "library": "ppx_minidebug",
      "description": "This module enables structured logging with customizable levels and output formats (sexp, show, pp) during AST transformations, while providing utilities to manipulate expressions, patterns, and types with context tracking and runtime inspection capabilities. It supports compile-time debugging through type analysis, debug rule configuration, and location-based log control, primarily used for developing and instrumenting OCaml PPX rewriters with detailed diagnostic output.",
      "description_length": 476,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minidebug_runtime.Flushing",
      "library": "ppx_minidebug.runtime",
      "description": "This module flushes log output line-by-line to prevent data loss on program crashes, using reduced indentation for trace formatting. It supports logging values via S-expressions, custom printers, or strings, with options to control log level, nesting depth, and child count limits. Concrete use cases include tracing function calls and values in instrumented code, capturing diagnostic messages, and managing log output during program execution and cleanup.",
      "description_length": 457,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Minidebug_runtime.PrintBox",
      "library": "ppx_minidebug.runtime",
      "description": "This module logs structured debug traces using the `printbox` library, supporting nested log entries with conditional suppression via `no_debug_if`. It works directly with `PrintBox.t` structures, sexps, and formatted values, enabling rich log output with source locations and hierarchical organization. Use cases include visualizing evaluation steps in compilers or interpreters, tracking nested function calls, and inspecting values during program execution.",
      "description_length": 460,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minidebug_runtime",
      "library": "ppx_minidebug.runtime",
      "description": "This module provides functions to create configurable debug logging systems with structured, time-stamped output, supporting multiple formats (text, HTML, Markdown) and backends like `PrintBox` for hierarchical trace rendering or `Flushing` for real-time output synchronization. It operates on logging configurations, output channels, and thread-local state to enable use cases such as debugging concurrent programs with thread-annotated logs or generating browsable, hyperlinked log artifacts for analysis. Key features include dynamic log filtering, diff-aware formatting, and file-splitting strategies for managing large-scale diagnostic data.",
      "description_length": 646,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 646,
    "min_description_length": 457,
    "avg_description_length": 509.75,
    "embedding_file_size_mb": 0.05832672119140625
  }
}