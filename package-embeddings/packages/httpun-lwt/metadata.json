{
  "package": "httpun-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:45.940473",
  "modules": [
    {
      "module_path": "Httpun_lwt.Server",
      "library": "httpun-lwt",
      "description": "Implements HTTP server logic for handling incoming connections and requests over sockets. It provides functions to create connection handlers that process requests with custom logic, manage errors, and interact with client addresses and request data. This module is used to build web servers that handle HTTP/1.1 connections with Lwt-based asynchronous I/O.",
      "description_length": 357,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_lwt.Client",
      "library": "httpun-lwt",
      "description": "This module implements HTTP client operations over a network socket, handling request submission, connection shutdown, and protocol upgrades. It works with HTTP request/response objects, client connections, and runtime-specific socket types. Concrete use cases include sending HTTP requests with custom headers and body streams, managing connection lifecycles, and handling errors and responses asynchronously.",
      "description_length": 410,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_lwt",
      "library": "httpun-lwt",
      "description": "This module provides HTTP/1.1 parsing and handling for clients and servers built on Lwt, supporting asynchronous request and response processing with streaming bodies. It includes core types like requests, responses, and connections, with operations for header manipulation, serialization, and connection lifecycle management. The server submodule enables creating handlers for incoming HTTP connections with custom routing and error handling, while the client submodule supports sending requests, managing connections, and handling responses over network sockets. Example uses include implementing lightweight HTTP servers with pipelining support or building async clients that handle chunked transfers and protocol upgrades.",
      "description_length": 726,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 726,
    "min_description_length": 357,
    "avg_description_length": 497.6666666666667,
    "embedding_file_size_mb": 0.011328697204589844
  }
}