{
  "package": "cvc5",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:06:37.864427",
  "modules": [
    {
      "module_path": "Cvc5.Sort",
      "library": "cvc5",
      "description": "This module manages sort creation and manipulation for SMT types including Boolean, integer, real, string, bit-vector, floating-point, and uninterpreted sorts. It provides functions to construct primitive and composite sorts, compare them for equality, and obtain string representations. Concrete use cases include defining variable types in SMT formulas and inspecting sort structures during solver interaction.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.Result",
      "library": "cvc5",
      "description": "This module defines operations for handling result values from a solver, including checking if a result is SAT, UNSAT, or UNKNOWN, and comparing or converting results. It works with the abstract `result` type, which represents the outcome of a solver query. Use cases include interpreting solver outputs in formal verification tasks and making decisions based on logical satisfiability.",
      "description_length": 386,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.Term",
      "library": "cvc5",
      "description": "This module provides functions to construct and manipulate symbolic terms, including creating constants, variables, and literals (Boolean, integer, string, bit-vector, floating-point), inspecting term properties (kind, sort, equality), and extracting primitive values (integers, strings, IEEE-754 components) from solved results. It operates on terms within a solver context, supporting type-checking operations and format-specific construction for numeric and symbolic data. These capabilities are used to build SMT expressions, analyze term attributes, and retrieve computed values in formal verification or constraint-solving workflows.",
      "description_length": 639,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.Op",
      "library": "cvc5",
      "description": "This module implements operations for creating, comparing, and inspecting indexed operators used in term construction. It works with the `op` type, representing logical and arithmetic operators with associated kinds and indices. Concrete use cases include building parameterized operators for SMT expressions and checking operator properties during term manipulation.",
      "description_length": 367,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cvc5.RoundingMode",
      "library": "cvc5",
      "description": "This module defines a set of rounding modes used in floating-point arithmetic operations. It includes functions to convert rounding modes to and from C++ integer representations and to string form. These operations are essential when configuring solvers that require precise control over numerical behavior, such as formal verification tools or constraint solvers.",
      "description_length": 364,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.Kind",
      "library": "cvc5",
      "description": "This module defines a comprehensive set of term kinds used to represent logical, arithmetic, bitwise, string, and data structure operations in the CVC5 solver. It includes specific constructors for constants, variables, logical connectives, arithmetic expressions, bitvector operations, array and set manipulations, and more. These term kinds are used directly when building and analyzing SMT formulas, enabling precise modeling of constraints and expressions across various theories.",
      "description_length": 484,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.Solver",
      "library": "cvc5",
      "description": "This module implements a solver interface for SMT operations, supporting formula assertion, satisfiability checking, term simplification, and model extraction. It works with terms, sorts, and results from the Cvc5 library, organizing logical constraints in a stack-based assertion context. Use it to solve logical formulas, query model values, manage solver configurations, and extract unsatisfiable cores or domain elements for uninterpreted sorts.",
      "description_length": 449,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5.TermManager",
      "library": "cvc5",
      "description": "Manages term creation and destruction in the Cvc5 SMT solver. Provides functions to initialize and free term manager instances, which are essential for handling logical terms and expressions. Used when interacting with the solver's API to ensure proper resource management.",
      "description_length": 273,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cvc5",
      "library": "cvc5",
      "description": "This module provides core components for interacting with the CVC5 SMT solver, enabling precise term and sort construction, logical and arithmetic operation modeling, and solver interaction. It supports data types such as terms, sorts, operators, and solver results, with specific functions for creating and inspecting symbolic expressions, managing solver contexts, and retrieving computed values. Concrete use cases include building and analyzing SMT formulas for formal verification, constraint solving, and model generation workflows.",
      "description_length": 538,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 639,
    "min_description_length": 273,
    "avg_description_length": 434.6666666666667,
    "embedding_file_size_mb": 0.13086509704589844
  }
}