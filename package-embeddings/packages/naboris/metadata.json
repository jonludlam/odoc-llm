{
  "package": "naboris",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 19,
  "creation_timestamp": "2025-08-14T23:26:44.611820",
  "modules": [
    {
      "module_path": "Naboris.Query.QueryMap",
      "library": "naboris",
      "description": "This module offers ordered map operations for string-keyed collections with arbitrary values, optimized for HTTP query parameter handling. It supports insertion, merging, filtering, and ordered traversal while preserving key order, with utilities for safe value retrieval and transformation. Designed for routed request processing, it addresses use cases like parameter aggregation, ordered query string parsing, and conditional filtering of request attributes.",
      "description_length": 461,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.DateUtils",
      "library": "naboris",
      "description": "Converts a Unix timestamp to an HTTP header-compatible date string using a fixed format. Works with floating-point timestamps representing seconds since the epoch. Useful for generating `Date` or `Last-Modified` headers in HTTP responses.",
      "description_length": 238,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.SessionManager",
      "library": "naboris",
      "description": "This module manages session creation, expiration, and resumption for HTTP requests. It operates on session data, request, and response types, handling cookie headers for session persistence. Concrete use cases include starting a session with user data and expiring sessions on logout.",
      "description_length": 284,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.Req",
      "library": "naboris",
      "description": "This module provides functions to access and manipulate HTTP request data, including headers, session information, and request bodies. It works with data types like `Httpaf.Reqd.t` for request descriptors, `Lwt.t` for asynchronous body reading, and session-related types for managing user state. Concrete use cases include extracting session data, retrieving request headers, and configuring session cookies with keys, secrets, and max age settings.",
      "description_length": 449,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.ServerConfig",
      "library": "naboris",
      "description": "This module enables configuring session-aware HTTP servers by setting session parameters, request/response handlers, middleware pipelines, and static file options like cache control, ETags, and last-modified headers. It operates on a mutable ServerConfig.t structure, supporting use cases like optimizing static asset delivery or tuning low-level HTTP behavior through httpAfConfig. Specific functions also allow retrieving configuration values such as static cache control policies.",
      "description_length": 483,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.Method",
      "library": "naboris",
      "description": "This module defines HTTP request methods as a variant type, including standard methods like GET, POST, and others, as well as a catch-all for custom methods. It provides functions to convert between string representations and the variant type, and to map from another HTTP method type. It is used to match and handle HTTP requests based on their method in routing and request processing logic.",
      "description_length": 393,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.Cookie",
      "library": "naboris",
      "description": "Works with HTTP cookie headers to extract session identifiers. Provides `getSessionId` to parse a session ID from a cookie string using a specified key, and `sessionIdOfReq` to retrieve the session ID directly from a `Req.t` request object. Useful for handling user sessions in web applications by securely identifying sessions from incoming HTTP requests.",
      "description_length": 356,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.Route",
      "library": "naboris",
      "description": "This module provides functions to access the path, HTTP method, raw query string, and parsed query parameters from a routing data structure. It works with a concrete type `t` that holds route components including a string list path, an HTTP method, a raw query string, and a query map with string list values. Use this module to extract and inspect individual components of a route during request handling, such as determining the requested path segments or parsing query parameters for further processing.",
      "description_length": 506,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Query",
      "library": "naboris",
      "description": "This module implements an ordered map structure for handling HTTP query parameters, supporting operations like insertion, merging, filtering, and ordered traversal. It works with string-keyed collections of arbitrary values, providing utilities for safely retrieving and transforming parameter values. Concrete use cases include processing and manipulating query strings in routed HTTP requests, such as aggregating parameters, applying filters, and maintaining parameter order during processing.",
      "description_length": 496,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Router",
      "library": "naboris",
      "description": "Handles route generation and URI parsing for web requests. Extracts path segments, query parameters, and method information to construct route definitions. Useful for mapping incoming HTTP requests to handler functions based on URI patterns and methods.",
      "description_length": 253,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.SessionConfig",
      "library": "naboris",
      "description": "This module provides functions to extract configuration values for session management, including the session ID key, maximum age, and signing secret. It operates on an optional session configuration type that holds session-specific settings. Concrete use cases include retrieving cookie parameters and cryptographic secrets for session handling in web applications.",
      "description_length": 365,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Etag",
      "library": "naboris",
      "description": "This module generates and manipulates HTTP ETag headers from strings and file paths. It provides functions to create strong and weak ETags, including asynchronous operations for file-based ETag generation. Concrete use cases include caching strategies in web servers where ETags are derived from file content or string identifiers.",
      "description_length": 331,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.ErrorHandler",
      "library": "naboris",
      "description": "Defines a type for error handlers that process exceptions and route information, returning a list of response headers and body asynchronously. Works with exceptions and route definitions to customize HTTP error responses. Used to implement centralized error handling logic for web applications.",
      "description_length": 294,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris.RequestHandler",
      "library": "naboris",
      "description": "Handles HTTP request parsing and routing by providing functions to extract headers, query parameters, and request methods. Works with raw HTTP request strings and route configuration data structures to match endpoints and extract relevant data. Useful for building web servers where precise request inspection and dynamic routing are required.",
      "description_length": 343,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.MimeTypes",
      "library": "naboris",
      "description": "Handles mapping between file extensions and MIME types. Provides functions to infer a file's content type from its name and retrieve its extension. Useful for web servers determining response headers based on file names.",
      "description_length": 220,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Middleware",
      "library": "naboris",
      "description": "This module defines functions that process HTTP requests and responses, enabling tasks like logging, authentication, and request modification. It operates on data types representing HTTP handlers, requests, and responses, chaining operations to alter or enhance behavior. Concrete use cases include adding request headers, validating API keys, and measuring response times.",
      "description_length": 373,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Res",
      "library": "naboris",
      "description": "This module handles response creation and manipulation, providing functions to set status codes, headers, and body content. It supports JSON, HTML, text, and raw responses, along with file streaming, redirects, and cookie management. Concrete use cases include sending JSON data from a request handler, serving static files with correct MIME types, and redirecting clients after form submissions.",
      "description_length": 396,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Naboris.Session",
      "library": "naboris",
      "description": "Handles session creation with unique identifiers and associated data. Provides access to session data and identifiers through dedicated functions. Useful for managing user sessions in web applications where each session requires a unique ID and stored state.",
      "description_length": 258,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Naboris",
      "library": "naboris",
      "description": "This module implements a session-aware HTTP server with routing, middleware, and static file handling. It provides functions to start servers, define request/response pipelines, and manage sessions via cookies, with concrete use cases like serving JSON APIs, handling form submissions with redirects, and streaming static assets with proper MIME types and cache control. Key data types include route definitions, HTTP methods, session configurations, and query parameter maps.",
      "description_length": 476,
      "index": 18,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 19,
    "meaningful_modules": 19,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 506,
    "min_description_length": 220,
    "avg_description_length": 367.10526315789474,
    "embedding_file_size_mb": 0.2757272720336914
  }
}