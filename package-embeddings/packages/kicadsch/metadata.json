{
  "package": "kicadsch",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:26.534212",
  "modules": [
    {
      "module_path": "Kicadsch.Sigs.SchPainter",
      "library": "kicadsch",
      "description": "Handles parsing and rendering of Kicad schematic files into visual representations. It processes schematic data line-by-line, incorporating component libraries and revision metadata, and outputs a structured image-ready format. Designed for generating visual schematics from Kicad source files during documentation or visualization workflows.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kicadsch.Sigs.CompPainter",
      "library": "kicadsch",
      "description": "Handles component rendering by loading and managing component libraries, then painting specific components to a drawing context. Works with component definitions, transformation data, and drawing state. Used to draw schematic symbols at specified coordinates with given transformations, supporting optional handling of missing components.",
      "description_length": 338,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kicadsch.Sigs.Painter",
      "library": "kicadsch",
      "description": "This module provides functions to draw text, lines, circles, rectangles, arcs, and images on a canvas, supporting operations like setting canvas size and retrieving the current canvas state. It works with geometric data types such as coordinates, sizes, colors, orientations, and styles, producing modified canvas states after each drawing operation. Concrete use cases include generating schematic diagrams or visual layouts by composing graphical elements into a final image-ready format.",
      "description_length": 490,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kicadsch.Sigs",
      "library": "kicadsch",
      "description": "This module defines the foundational data types and interfaces for representing schematic elements, including coordinates, orientations, styles, and transformations, enabling operations like rendering components, managing text properties, and applying revisions. Its child modules handle schematic file parsing, component drawing with library support, and low-level canvas operations for constructing visual schematics. You can use it to load and render Kicad schematics, draw components with custom transformations, or build diagrams by composing shapes and text on a mutable canvas. Key types include geometric primitives and drawing state, while core operations support parsing, painting, and modifying schematic visuals programmatically.",
      "description_length": 741,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kicadsch.MakeSchPainter",
      "library": "kicadsch",
      "description": "This module processes Kicad schematic files by parsing lines and library definitions into a structured context, then renders the resulting schematic as an image using a provided painter module. It supports handling missing components and tracks schematic revisions. Concrete use cases include generating visual representations of circuit diagrams from Kicad schematic files for documentation or analysis.",
      "description_length": 404,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kicadsch",
      "library": "kicadsch",
      "description": "This module provides tools for parsing and rendering Kicad schematic files into visual diagrams, supporting operations such as loading schematics, drawing components with custom transformations, and generating images. Key data types include geometric primitives, component definitions, and drawing state, with operations for parsing schematic files, handling library references, and applying revisions. You can use it to programmatically render circuit diagrams, visualize component layouts, or generate documentation images from Kicad files. Specific examples include drawing components with rotation and scaling, composing schematics on a mutable canvas, and exporting schematics as images with custom styling.",
      "description_length": 712,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 741,
    "min_description_length": 338,
    "avg_description_length": 504.5,
    "embedding_file_size_mb": 0.022212982177734375
  }
}