{
  "package": "stitch",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:32:00.931046",
  "modules": [
    {
      "module_path": "Stitch.Function.Argument",
      "description": "Constructs a typed wrapper for values that can be converted to and from JSON using specified serialization and deserialization functions. Operates on arbitrary data types encapsulated in a container type. Used to safely parse and generate JSON representations of structured data within a validation-aware workflow.",
      "description_length": 314,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stitch.Function.Return_value",
      "description": "Encapsulates values with custom serialization to and from JSON, equality checks, and string representation. Works with any type that provides conversion to and from Yojson, along with equality and formatting functions. Used to safely handle and inspect data during parsing and output operations.",
      "description_length": 295,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Function.Arity_2",
      "description": "Constructs a function wrapper that takes two arguments of specified types and returns a value of a defined return type. Operates on custom argument and return value types defined elsewhere. Used to encapsulate binary functions for consistent handling in a pipeline or configuration system.",
      "description_length": 289,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stitch.Function.Arity_3",
      "description": "Constructs a function wrapper with three distinct arguments and a return value, using specialized argument and return value types. Operates on tuples of three input types and a result type, enabling structured function encapsulation. Used to define and manage functions with explicit type constraints in configuration or pipeline setups.",
      "description_length": 337,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Config",
      "description": "Creates a configuration object that manages recording settings, initializing with a specified directory or environment variables. Works with strings for directory paths and a record type to store configuration state. Used to control where and whether to save recording files based on user input or environment setup.",
      "description_length": 316,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Function",
      "description": "Encapsulates values with JSON serialization, equality, and string formatting capabilities, enabling safe data handling and inspection. Supports custom function wrappers with two or three arguments, allowing structured function management and consistent type handling in pipelines or configurations. Provides tools to convert between arbitrary types and JSON, ensuring validation-aware data transformation. Examples include parsing complex data structures, generating JSON outputs, and managing typed function signatures in configuration systems.",
      "description_length": 545,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "stitch",
      "description": "Provides functions to instrument code for call recording, replay execution, and assertion of behavior. Operates on function calls, return values, and side effects captured during runtime. Used to create deterministic tests for legacy code changes, ensuring behavior remains consistent after modifications.",
      "description_length": 305,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch",
      "description": "Manages configuration and data serialization for recording systems, combining directory control with structured data handling. It defines a configuration record for storage settings and a generic value type with JSON support, equality, and formatting. It enables parsing and generating JSON, managing function signatures, and controlling file output based on input or environment. Examples include saving recordings to specified paths, serializing complex data, and ensuring type consistency in pipelines.",
      "description_length": 505,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 545,
    "min_description_length": 289,
    "avg_description_length": 363.25,
    "embedding_file_size_mb": 0.029483795166015625
  }
}