{
  "package": "stitch",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:04:43.922184",
  "modules": [
    {
      "module_path": "Stitch.Function.Arity_3",
      "library": "stitch",
      "description": "This module creates functions with three arguments and a return value, using specified argument and return value types. It works with tuples of three input types and a separate return type, encapsulated in a function type. Concrete use cases include defining typed function interfaces for data transformation pipelines or API endpoints with three parameters.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Function.Arity_2",
      "library": "stitch",
      "description": "This module creates functions with two arguments and a return value, using specified argument and return value types. It works with tuples of two input types and a separate return type. Use this to define typed function signatures for two-argument functions in a codebase.",
      "description_length": 272,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stitch.Function.Return_value",
      "library": "stitch",
      "description": "This module creates a return value type with JSON serialization, deserialization, equality checking, and string representation. It works with any type `'a` that can be converted to and from JSON, compared for equality, and converted to a string. Concrete use cases include defining function return types that need to be serialized for storage or transmission, such as in RPC systems or persistent logging.",
      "description_length": 405,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stitch.Function.Argument",
      "library": "stitch",
      "description": "This module creates serializable function arguments by wrapping values with JSON conversion functions. It works with any type `'a` that can be converted to and from JSON using `Yojson.Safe.json`. Concrete use cases include preparing arguments for remote procedure calls or persisting function inputs in a format that can be later reconstructed.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Config",
      "library": "stitch",
      "description": "This module creates and manages configuration values for controlling recording behavior, primarily through `make` and `from_env`. It works with a single opaque type `t` that holds configuration parameters, such as the recording directory. Use this module to set up recording directories either manually or via environment variables, enabling or disabling recording output based on the provided settings.",
      "description_length": 403,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch.Function",
      "library": "stitch",
      "description": "This module implements typed function interfaces with JSON-serializable arguments and return values. It supports defining functions with two or three arguments, where inputs and outputs are wrapped for safe conversion to and from JSON, enabling use cases like remote procedure calls, data persistence, and typed API endpoints. The arity-specific modules enforce correct parameter handling in distributed systems or stored procedure interfaces.",
      "description_length": 443,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stitch",
      "library": "stitch",
      "description": "This module provides functions for creating and verifying typed function interfaces with JSON-serializable arguments, specifically supporting functions with two or three parameters. It works with configuration values and function signatures defined in its submodules to enable use cases like remote procedure calls, typed API endpoints, and data persistence with strict parameter validation. The module uses opaque configuration types and arity-specific function wrappers to ensure correct serialization and behavior during function execution.",
      "description_length": 543,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 543,
    "min_description_length": 272,
    "avg_description_length": 395.42857142857144,
    "embedding_file_size_mb": 0.10188484191894531
  }
}