{
  "package": "higlo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:33.789077",
  "modules": [
    {
      "module_path": "Higlo.Json",
      "library": "higlo",
      "description": "This module provides low-level lexing operations for JSON parsing, focusing on UTF-8 decoding and Unicode character classification. It works with `Sedlexing.lexbuf` input buffers, integer-based state partitions, and precomputed lookup tables to map Unicode code points to token classes during lexical analysis. These components enable efficient identification of JSON syntax elements like strings, numbers, and structural markers while handling complex Unicode ranges specified in the JSON standard.",
      "description_length": 499,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higlo.Lang",
      "library": "higlo",
      "description": "This module defines token types and operations for syntax highlighting, including lexers that process source code into categorized tokens like keywords, strings, and comments. It supports multiple languages through registered lexers, merging consecutive text tokens and handling errors during lexing. Use cases include implementing syntax highlighting for code editors or generating formatted output for documentation tools.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Ocaml",
      "library": "higlo",
      "description": "This module implements lexical analysis operations using UTF-8-aware character classification tables and finite automata state transitions to process input text into structured tokens. It operates on Unicode code point integers and `Sedlexing.lexbuf` buffers, enabling efficient pattern recognition for tasks like syntax highlighting and domain-specific language parsing. The internal tables and partition functions handle character-range mappings and state logic, supporting precise tokenization of structured input streams.",
      "description_length": 525,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Printers",
      "library": "higlo",
      "description": "This module provides functions to convert lexical tokens into XML or rewrite trees using customizable styling classes. It works with token lists and string-based language identifiers, supporting syntax highlighting for different language elements like keywords, strings, and comments. Concrete use cases include generating HTML output for code snippets with specific styling and integrating with templating systems that require structured XML or rewrite trees.",
      "description_length": 460,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Xml",
      "library": "higlo",
      "description": "This module provides XML lexing and parsing capabilities, focusing on tag recognition, token generation, and lexeme extraction through Sedlex-based state transitions. It operates on `Sedlexing.lexbuf` buffers, utilizing character classification tables and partition functions to process XML syntax into structured token sequences. Typical applications include converting raw XML content into consumable token streams and extracting textual data from XML elements during parsing workflows.",
      "description_length": 488,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Commonmark",
      "library": "higlo",
      "description": "This module implements lexical analysis operations for CommonMark parsing, focusing on Unicode character classification and tokenization. It utilizes transition tables and partition functions to map character codes to lexical categories (whitespace, punctuation, delimiters), enabling efficient state management during lexing. The core data structures include Sedlexing lexbuf buffers and encoded state transition tables, primarily used for parsing Markdown syntax elements like inline formatting, code blocks, and structural markers.",
      "description_length": 534,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Dot",
      "library": "higlo",
      "description": "This module implements low-level lexical analysis operations for tokenization, including state transition mappings, character classification, and lexeme extraction. It operates on Sedlex-generated lexing buffers and internal state tables to parse input streams into tokens for compiler frontends or text processing pipelines.",
      "description_length": 325,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higlo.Misc",
      "library": "higlo",
      "description": "Splits strings into lists of substrings based on a list of separator characters, optionally including empty results. Checks if one string is a prefix of another and removes leading or trailing whitespace from a string. Useful for parsing log lines, validating string formats, and normalizing user input.",
      "description_length": 303,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higlo",
      "library": "higlo",
      "description": "This module suite performs lexical analysis and token processing across multiple formats, including JSON, XML, CommonMark, and general source code. It centers on UTF-8 decoding, state-driven lexing with `Sedlexing.lexbuf`, and Unicode-aware character classification to tokenize input into structured elements like keywords, strings, and structural markers. Operations include syntax highlighting via token styling, XML tag recognition, and token stream transformation into XML or rewrite trees. Examples include parsing JSON strings into tokens, highlighting Markdown code blocks, and converting XML content into consumable token sequences.",
      "description_length": 640,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 640,
    "min_description_length": 303,
    "avg_description_length": 466.44444444444446,
    "embedding_file_size_mb": 0.033145904541015625
  }
}