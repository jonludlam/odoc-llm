{
  "package": "errpy",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:41.944183",
  "modules": [
    {
      "module_path": "Errpy.Parser",
      "library": "errpy",
      "description": "Parses Python source code into an abstract syntax tree (AST) representation, handling recoverable syntax errors during parsing. Works with string inputs and produces either a parsed module AST along with a list of errors, or a fatal error message. Useful for analyzing or transforming Python code programmatically, such as in linters or code refactoring tools.",
      "description_length": 360,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Errpy.Ast",
      "library": "errpy",
      "description": "This module provides formatting and string conversion utilities for abstract syntax tree (AST) nodes representing Python-like syntax in OCaml. It operates on custom algebraic data types encoding syntactic constructs such as expressions, statements, patterns, and error-handling structures, including specialized variants for literals, operators, and scoping constructs. These functions are primarily used for debugging, logging, and visualizing AST structures during compiler or interpreter development.",
      "description_length": 503,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Errpy",
      "library": "errpy",
      "description": "This module processes Python source code by parsing it into a structured AST while accommodating recoverable syntax errors, and provides utilities to format and inspect AST nodes. It centers around data types representing Python syntax elements\u2014such as expressions, statements, literals, and scoping constructs\u2014and supports operations like parsing source strings into ASTs, collecting errors, and converting AST nodes to readable string representations. You can use it to build tools that analyze, transform, or visualize Python code, such as linters, refactoring utilities, or AST debuggers. For example, it can parse a malformed Python script into a partial AST and format the result for inspection.",
      "description_length": 701,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 701,
    "min_description_length": 360,
    "avg_description_length": 521.3333333333334,
    "embedding_file_size_mb": 0.011312484741210938
  }
}