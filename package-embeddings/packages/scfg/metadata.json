{
  "package": "scfg",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:37.905287",
  "modules": [
    {
      "module_path": "Scfg.Parse",
      "library": "scfg",
      "description": "This module parses configuration data from various input sources, including strings, files, channels, and lexing buffers. It produces a structured representation of the configuration, handling syntax errors and reporting them as messages. Use it to load and validate configuration files in formats like INI or custom DSLs.",
      "description_length": 322,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scfg.Pp",
      "library": "scfg",
      "description": "This module includes functions for pretty-printing configuration elements such as parameters, lists of parameters, directives, and entire configs using OCaml's Format module. It operates on strings, string lists, and the config and directive types defined in Scfg.Types. Concrete use cases include generating human-readable output of configuration structures during logging, debugging, or exporting configurations to a textual format.",
      "description_length": 434,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scfg.Types",
      "library": "scfg",
      "description": "This module defines core data structures for representing hierarchical configuration data. It includes a `directive` type with name, parameters, and nested directives, and a `config` type as a list of top-level directives. Used to model structured configuration files like Nginx or Apache configs, enabling parsing, traversal, and transformation of configuration trees.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scfg.Query",
      "library": "scfg",
      "description": "This module provides functions to search and extract directives and parameters from a configuration structure. It operates on `Scfg.Types.directive` lists and individual directives, allowing retrieval by name, position, or type. Concrete use cases include parsing configuration files to access specific settings, validating parameter counts, and converting parameter values to typed values like integers, floats, or booleans.",
      "description_length": 425,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scfg",
      "library": "scfg",
      "description": "This module processes hierarchical configuration data from various sources, producing structured representations that can be queried, transformed, and rendered. It centers around the `directive` and `config` types, which model nested configuration elements and top-level directive lists, supporting operations like parsing, searching, and pretty-printing. Functions allow extracting values by name or position, converting parameters to typed values, and generating human-readable output. Example uses include loading and validating DSL-based configuration files, programmatically modifying server configs, and exporting structured settings for logging or debugging.",
      "description_length": 665,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 665,
    "min_description_length": 322,
    "avg_description_length": 443.0,
    "embedding_file_size_mb": 0.018617630004882812
  }
}