{
  "package": "safemoney",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 198,
  "creation_timestamp": "2025-06-18T16:57:22.280110",
  "modules": [
    {
      "module_path": "Safemoney.Ops.Separator",
      "description": "Provides functions to create and retrieve pairs of string separators, where the second can be optional. Works with a private type representing a tuple of a required string and an optional string. Used to parse structured data with distinct delimiter patterns, such as CSV files with custom field and escape characters.",
      "description_length": 318,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AFN",
      "description": "Provides functions to handle Afghani currency data, including retrieving the currency symbol and description. Works with string representations of units and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from quantized values or string-based denominations.",
      "description_length": 313,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ALL",
      "description": "Provides functions to handle Albanian Lek, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, hash tables, and custom money types. Used to create and manipulate monetary values in financial calculations involving Albanian currency.",
      "description_length": 347,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_DZD",
      "description": "Provides functions to handle Algerian Dinar (DZD) values, including retrieving the currency symbol and description, managing units, and constructing quotient and discrete value types. Works with strings, options, and custom money types like `Safemoney__Quotient.Make` and `Safemoney__Discrete.Make`. Used to create and manipulate DZD amounts in financial calculations, ensuring precise representation of currency values.",
      "description_length": 420,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AOA",
      "description": "Provides functions to handle Angolan Kwanza currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary structures like quotient and discrete values. Enables creation of precise monetary representations from quantized values or string-based denominations.",
      "description_length": 317,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XCD",
      "description": "Provides functions to handle East Caribbean Dollar data, including currency symbol, description, and unit mappings. Works with strings, options, and custom money types for precise financial calculations. Enables creation of quotient and discrete money values from numeric and string representations.",
      "description_length": 299,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ARS",
      "description": "Provides functions to handle Argentine Peso data, including retrieving the currency symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with strings, integers, and custom monetary types like `Q.t` and `Z.t`. Used to create precise monetary representations for financial calculations involving Argentine Peso.",
      "description_length": 398,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AMD",
      "description": "Provides currency symbol and description strings, and defines operations for creating and handling monetary values with discrete scales. Works with strings, integers, and custom monetary types based on quotient and discrete value structures. Used to construct and validate Armenian Dram amounts in financial calculations.",
      "description_length": 321,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AWG",
      "description": "Provides functions to handle Aruban Florin currency data, including retrieving the currency symbol, description, and unit conversions. Works with string, option, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 311,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AUD",
      "description": "Provides currency symbol and description, and constructs monetary values using quotient and discrete value functions. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Australian Dollar amounts in financial applications.",
      "description_length": 292,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AZN",
      "description": "Provides functions to handle Azerbaijan Manat, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value types. Works with strings, integers, and custom monetary structures like `Q.t` and `Z.t`. Used to create precise monetary representations for financial calculations involving AZN.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BSD",
      "description": "Provides functions to retrieve the symbol and description of the Bahamian Dollar, and to construct monetary values using quotient and discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Bahamian Dollar amounts in applications requiring currency-specific handling.",
      "description_length": 359,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BHD",
      "description": "Provides functions to handle Bahraini Dinar data, including retrieving its symbol and description, and constructing monetary values with specific units and scales. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Bahraini Dinar amounts in applications requiring currency-specific handling.",
      "description_length": 362,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BDT",
      "description": "Provides functions to handle Bangladeshi Taka, including retrieving the currency symbol and description, mapping unit names to scale values, and constructing quotient and discrete value types from quantities and strings. Works with strings, hash tables, and custom monetary types for precise financial calculations. Used to standardize Taka representation in financial applications and currency conversion systems.",
      "description_length": 414,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BBD",
      "description": "Provides functions to handle Barbados Dollar data, including currency symbol, description, and unit mappings. Works with strings, options, and custom money types for precise financial calculations. Enables creation of quotient and discrete money values from numeric and string representations.",
      "description_length": 293,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BYN",
      "description": "Provides functions to handle Belarusian Ruble data, including retrieving the currency symbol and description, and constructing monetary values from quantized or discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Belarusian Ruble amounts in applications requiring currency-specific formatting and arithmetic.",
      "description_length": 404,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BZD",
      "description": "Provides functions to handle Belize Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient values, and discrete monetary structures. Used to create and manipulate Belize Dollar amounts in financial calculations.",
      "description_length": 290,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XOF",
      "description": "Provides functions to handle currency operations for the CFA Franc BCEAO, including retrieving the symbol and description, managing units, and constructing quotient and discrete value types. Works with strings, options, and custom monetary types like `Q.t` and `Z.t`. Used to create and manipulate precise financial values in contexts requiring currency-specific formatting and arithmetic.",
      "description_length": 389,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BMD",
      "description": "Provides functions to handle Bermudian Dollar data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string identifiers and integer values.",
      "description_length": 300,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BTN",
      "description": "Provides functions to handle Bhutanese Ngultrum, including retrieving its symbol and description, managing currency units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with strings, hash tables, and custom monetary types from the Safemoney library. Used to parse and represent Bhutanese Ngultrum values in financial calculations and data processing.",
      "description_length": 406,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BOB",
      "description": "Provides functions to handle the Bolivian Boliviano, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, and custom money types based on quotient and discrete scales. Used to create and manipulate monetary amounts in Bolivian currency with precise unit definitions.",
      "description_length": 380,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BOV",
      "description": "Provides functions to handle the Bolivian Mvdol, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, and custom money types based on quotient and discrete scales. Used to create and manipulate Mvdol amounts in financial calculations.",
      "description_length": 348,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BAM",
      "description": "Provides functions to handle Bosnia-Herzegovina Convertible Marka, including retrieving the currency symbol and description, managing unit conversions, and constructing quotient and discrete money values. Works with strings, options, and custom money types from the Safemoney library. Used to create precise financial representations and perform currency-specific calculations.",
      "description_length": 377,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BWP",
      "description": "Provides functions to handle Botswanan Pula currency data, including retrieving the currency symbol, description, and unit conversions. Works with string keys and custom monetary types for precise value representation. Used to create quotient and discrete monetary values from numeric and string inputs.",
      "description_length": 303,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NOK",
      "description": "Provides functions to handle Norwegian Krone data, including retrieving the currency symbol, description, and unit mappings. Works with string, option, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for use in monetary operations.",
      "description_length": 309,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BRL",
      "description": "Provides functions to retrieve the symbol and description of the Brazilian Real, manage currency units as a hash table, and construct quotient and discrete value types for precise financial calculations. Works with strings, hash tables, and custom monetary types from the Safemoney library. Used to handle Brazilian Real in financial applications requiring exact decimal representation and currency-specific formatting.",
      "description_length": 419,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BND",
      "description": "Provides functions to handle Brunei Dollar data, including retrieving the currency symbol and description, and constructing monetary values with specific units. Works with string representations, quotient and discrete monetary types, and hash tables mapping unit names to scale values. Used to create precise monetary instances for financial calculations involving Brunei Dollars.",
      "description_length": 380,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BGN",
      "description": "Provides functions to handle Bulgarian Lev currency, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, and custom money types from the Safemoney library. Used to create precise monetary representations for financial calculations in Bulgarian Lev.",
      "description_length": 363,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_BIF",
      "description": "Provides functions to handle Burundi Franc data, including currency symbol, description, and unit mappings. Works with strings, options, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 286,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CVE",
      "description": "Provides functions to handle currency data for Cabo Verde Escudo, including retrieving the symbol, description, and unit conversions. Works with string representations, quotient and discrete money types, and scale mappings. Enables creation of precise monetary values from string denominations and quotient representations.",
      "description_length": 323,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KHR",
      "description": "Provides functions to handle Cambodian Riel data, including retrieving the currency symbol, description, and unit mappings. Works with string, option, and custom monetary types like `Q.t` and `Z.t` for precise financial calculations. Enables creation of quotient and discrete monetary values from string representations and integers.",
      "description_length": 333,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XAF",
      "description": "Provides functions to handle CFA Franc BEAC, including retrieving its symbol and description, mapping units to scales, and constructing quotient and discrete value types from quantities and strings. Works with strings, maps, and custom monetary types for precise financial calculations. Used to create and manipulate BEAC currency values in financial applications requiring regional currency support.",
      "description_length": 400,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CAD",
      "description": "Provides functions to retrieve the CAD symbol and description, manage currency units as a hash table, and construct quotient and discrete value types for precise monetary calculations. Operates with strings, integers, and custom monetary types from the Safemoney library. Used to handle CAD-specific data in financial applications requiring exact decimal arithmetic.",
      "description_length": 366,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KYD",
      "description": "Provides functions to handle Cayman Islands Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient values, and discrete monetary structures. Used to create and manipulate monetary amounts in specific denominations for financial calculations.",
      "description_length": 320,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CLP",
      "description": "Provides functions to handle Chilean Peso data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient values, and discrete monetary structures. Enables creation of precise monetary values from string denominations and quotient-based calculations.",
      "description_length": 313,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CLF",
      "description": "Provides functions to handle the Chilean Unidad de Fomento, including retrieving its symbol and description, constructing quotient and discrete money values from numeric and string representations. Operates with strings, integers, and custom money types based on quotient and discrete scales. Used to create precise financial representations for transactions and reporting in Chilean currency contexts.",
      "description_length": 402,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CNY",
      "description": "Provides functions to handle Chinese Yuan Renminbi, including retrieving its symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with strings, integers, and custom money types based on quotient and discrete scales. Used to create and manipulate precise financial representations of CNY values in monetary calculations.",
      "description_length": 408,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_COP",
      "description": "Provides functions to handle Colombian Peso data, including currency symbol, description, and unit mappings. Works with string, option, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 285,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_COU",
      "description": "Provides functions to handle the Colombian Unidad de Valor Real, including its symbol, description, and conversion to monetary types. Works with strings, scales, and discrete monetary values. Used to create quotient and discrete value representations for financial calculations.",
      "description_length": 278,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KMF",
      "description": "Provides functions to handle Comorian Franc data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and integer scales. Enables creation of precise monetary objects from string identifiers and numeric values.",
      "description_length": 294,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CDF",
      "description": "Provides functions to handle Congolese Franc data, including currency symbol, description, and unit mappings. Works with strings, options, and custom money types for precise financial calculations. Enables creation of quotient and discrete value representations for monetary values.",
      "description_length": 282,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CRC",
      "description": "Provides functions to handle Costa Rican Colon data, including currency symbol, description, and unit mappings. Works with string, option, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 288,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CUP",
      "description": "Provides functions to handle Cuban Peso data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient and discrete money types, and scale mappings. Enables creation of precise monetary values from string identifiers and integer quantities.",
      "description_length": 304,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CUC",
      "description": "Provides functions to handle Cuban Peso Convertible, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, and custom money types based on quotient and discrete scales. Used to convert and represent amounts in Cuban Peso Convertible with precise decimal handling.",
      "description_length": 376,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ANG",
      "description": "Provides functions to handle the Netherlands Antillean Guilder, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete monetary values. Works with strings, options, and custom monetary types from the Safemoney library. Used to create precise financial representations and convert between currency units and numeric values.",
      "description_length": 391,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CZK",
      "description": "Provides functions to handle Czech Koruna data, including retrieving the currency symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities or strings. Works with string, integer, and custom monetary types like Q.t and Z.t. Used to create and manipulate Czech Koruna values in financial calculations and data representation.",
      "description_length": 389,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_DKK",
      "description": "Provides functions to handle Danish Krone data, including retrieving the currency symbol and description, managing unit conversions, and constructing monetary values. Works with strings, options, and custom monetary types like `Q.t` and `Z.t`. Used to create precise financial representations of DKK amounts in applications requiring currency-specific handling.",
      "description_length": 361,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_DJF",
      "description": "Provides functions to handle Djibouti Franc data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from string and integer inputs.",
      "description_length": 281,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_DOP",
      "description": "Provides functions to handle Dominican Peso data, including retrieving its symbol and description, and constructing monetary values using quotient and discrete value types. Works with strings, options, and custom monetary structures like `Safemoney__Quotient` and `Safemoney__Discrete`. Used to create and manipulate precise financial representations of Dominican Peso amounts in applications requiring currency-specific handling.",
      "description_length": 430,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_EGP",
      "description": "Provides functions to handle Egyptian Pound data, including retrieving the currency symbol and description, managing units as a hash table, and constructing quotient and discrete value types from numeric inputs. Works with strings, integers, and custom monetary structures like `Q.t` and `Z.t`. Used to create precise monetary representations for financial calculations involving EGP.",
      "description_length": 384,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SVC",
      "description": "Provides functions to handle currency data for the El Salvador Colon, including retrieving its symbol and description. Works with string representations, monetary scales, and discrete monetary values. Enables creation of quotient and discrete value types from string and integer inputs.",
      "description_length": 286,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ERN",
      "description": "Provides functions to handle Eritrean Nakfa currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary structures like scales and quotient/discrete values. Enables creation of precise monetary representations from string denominations or quotient values.",
      "description_length": 317,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SZL",
      "description": "Provides functions to handle Swazi Lilangeni currency data, including symbol retrieval, description, and unit mappings. Works with string representations, quotient values, and discrete monetary structures. Used to construct and validate monetary amounts with precise scaling and representation.",
      "description_length": 294,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ETB",
      "description": "Provides functions to handle Ethiopian Birr currency data, including symbol retrieval, description, and unit mappings. Works with string representations, quotient values, and discrete monetary structures. Enables creation of precise monetary values from strings and integers for financial calculations.",
      "description_length": 302,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_EUR",
      "description": "Provides functions to handle Euro currency data, including retrieving the symbol and description, and constructing monetary values from quantized or string-based inputs. Works with string representations, hash tables mapping units to scales, and custom monetary types for precise calculations. Used to create and manipulate Euro amounts in financial applications requiring exact decimal handling.",
      "description_length": 396,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_FKP",
      "description": "Provides functions to handle Falkland Islands Pound data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string identifiers and integer values.",
      "description_length": 306,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_FJD",
      "description": "Provides functions to retrieve the symbol and description of the Fiji Dollar, and to construct monetary values using quotient and discrete value representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate FJD amounts in applications requiring currency-specific handling.",
      "description_length": 349,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XPF",
      "description": "Provides functions to handle the CFP Franc, including retrieving its symbol and description, managing units as a hash table, and constructing quotient and discrete value types from numeric and string inputs. Works with strings, hash tables, and custom monetary types for precise financial calculations. Used to standardize CFP Franc representations in currency conversion and financial data processing.",
      "description_length": 402,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GBP",
      "description": "Provides functions to retrieve the symbol and description of Pound Sterling, and to construct monetary values using quotient and discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to initialize currency-specific data in financial applications and ensure consistent handling of GBP values.",
      "description_length": 360,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GMD",
      "description": "Provides functions to handle Gambian Dalasi currency data, including retrieving the symbol, description, and unit conversions. Works with string representations, quotient values, and discrete monetary structures. Used to create and manipulate monetary amounts with precise scaling and validation.",
      "description_length": 296,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GEL",
      "description": "Provides functions to handle Georgian Lari, including retrieving the currency symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with strings, hash tables, and custom monetary types from the Safemoney library. Used to create and manipulate financial values in Georgian Lari with precise scaling and representation.",
      "description_length": 405,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GHS",
      "description": "Provides functions to handle Ghana Cedi currency data, including retrieving the currency symbol, description, and unit mappings. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string identifiers and integer values.",
      "description_length": 319,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GIP",
      "description": "Provides currency symbol and description strings, and defines operations to create monetary values using quotient and discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to instantiate Gibraltar Pound values in financial applications requiring exact decimal handling.",
      "description_length": 338,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GTQ",
      "description": "Provides functions to handle Guatemalan Quetzal data, including retrieving the currency symbol, description, and unit conversions. Works with string, integer, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for transactions and currency conversions.",
      "description_length": 327,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GNF",
      "description": "Provides functions to handle Guinean Franc data, including currency symbol, description, and unit mappings. Works with string, integer, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for monetary amounts.",
      "description_length": 283,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_GYD",
      "description": "Provides functions to retrieve the symbol and description of the Guyana Dollar, and to construct monetary values using quotient and discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Guyana Dollar amounts in applications requiring currency-specific handling.",
      "description_length": 355,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_HTG",
      "description": "Provides functions to handle Haitian Gourde currency data, including retrieving the currency symbol, description, and unit mappings. Works with string keys and scaled numeric types for precise monetary calculations. Enables creation of quotient and discrete value representations from quantities and strings.",
      "description_length": 308,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_HNL",
      "description": "Provides functions to handle Honduran Lempira data, including currency symbol, description, and unit mappings. Works with string, integer, and custom monetary structures for precise financial calculations. Enables creation of quotient and discrete value representations for currency operations.",
      "description_length": 294,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_HKD",
      "description": "Provides functions to handle Hong Kong Dollar data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from string-based units and numeric values.",
      "description_length": 295,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_HUF",
      "description": "Provides functions to handle Hungarian Forint (HUF) data, including retrieving the currency symbol and description. Works with string representations of amounts and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from string-based quantities or integer values.",
      "description_length": 316,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ISK",
      "description": "Provides functions to handle Iceland Krona data, including retrieving the currency symbol, description, and unit mappings. Works with string, option, and custom monetary types like `Q.t` and `Z.t` for precise value representation. Enables creation of quotient and discrete monetary values from string representations and numeric inputs.",
      "description_length": 336,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_INR",
      "description": "Provides functions to handle Indian Rupee data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary objects from string-based units and integer values.",
      "description_length": 298,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_IDR",
      "description": "Provides functions to handle Indonesian Rupiah, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient or discrete value representations. Works with strings, hash tables, and custom monetary types for precise financial calculations. Used to standardize IDR representation in applications requiring currency-specific formatting and arithmetic.",
      "description_length": 398,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XDR",
      "description": "Provides functions to handle the Special Drawing Right (XDR) currency, including retrieving its symbol and description. Works with string representations, quotient values, and discrete monetary structures. Enables creation of quotient-based and string-to-integer discrete money instances for precise financial calculations.",
      "description_length": 323,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_IRR",
      "description": "Provides functions to handle Iranian Rial data, including retrieving the currency symbol and description, managing unit conversions, and constructing monetary values from quantized or string-based inputs. Works with string representations, hash tables mapping units to scales, and custom monetary types for precise financial calculations. Used to create and manipulate Iranian Rial amounts in applications requiring accurate currency handling.",
      "description_length": 443,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_IQD",
      "description": "Provides functions to handle Iraqi Dinar data, including currency symbol, description, and unit mappings. Works with string keys and discrete monetary values using quotient and zero-precision types. Enables creation of precise monetary representations from string denominations or quotient values.",
      "description_length": 297,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ILS",
      "description": "Provides functions to handle the New Israeli Sheqel, including retrieving its symbol and description, and constructing monetary values with specific units. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate discrete monetary amounts in applications requiring currency-specific handling.",
      "description_length": 357,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_JMD",
      "description": "Provides functions to handle Jamaican Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with string, option, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for monetary operations.",
      "description_length": 305,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_JPY",
      "description": "Provides functions to handle Japanese Yen, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value representations. Works with strings, options, and custom monetary types for precise financial calculations. Used to convert string representations of amounts into structured monetary values and to map unit names to their corresponding scale values.",
      "description_length": 410,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_JOD",
      "description": "Provides functions to handle Jordanian Dinar data, including currency symbol retrieval, description, and unit mappings. Works with strings, options, and custom money types for precise financial calculations. Enables creation of quotient and discrete money values from numeric strings and integers.",
      "description_length": 297,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KZT",
      "description": "Provides functions to handle Kazakhstani Tenge, including retrieving the currency symbol, description, and unit mappings. Works with string, integer, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete monetary values from string representations and integers.",
      "description_length": 311,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KES",
      "description": "Provides functions to handle Kenyan Shilling data, including currency symbol, description, and unit mappings. Works with strings, options, and custom money types for precise financial calculations. Enables creation of quotient and discrete money values from numeric and string representations.",
      "description_length": 293,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KPW",
      "description": "Provides functions to handle North Korean Won, including retrieving its symbol and description, defining currency units, and constructing quotient and discrete value types. Operates with strings, options, and custom monetary types for precise financial calculations. Used to create and manipulate KPW values in applications requiring currency-specific handling.",
      "description_length": 361,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KRW",
      "description": "Provides functions to handle South Korean Won, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete value types from numeric inputs. Works with strings, options, hashtables, and custom money types for precise financial calculations. Used to initialize and manipulate KRW values in currency-aware applications.",
      "description_length": 380,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KWD",
      "description": "Provides functions to handle Kuwaiti Dinar data, including currency symbol, description, and unit mappings. Works with string representations, quotient values, and discrete monetary structures. Enables creation of precise monetary instances from string denominations and integer values.",
      "description_length": 286,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_KGS",
      "description": "Provides functions to handle Kyrgystani Som currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary types for precise value representation. Enables creation of quotient and discrete value objects from numeric and string inputs.",
      "description_length": 293,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LAK",
      "description": "Provides functions to handle Lao Kip currency data, including retrieving the currency symbol, description, and unit conversions. Works with string, integer, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from numeric inputs.",
      "description_length": 295,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LBP",
      "description": "Provides functions to handle Lebanese Pound data, including retrieving its symbol and description, and constructing monetary values from quantized or discrete representations. Works with strings, options, and custom monetary types for precise financial calculations. Used to create and manipulate Lebanese Pound amounts in applications requiring currency-specific handling.",
      "description_length": 373,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LSL",
      "description": "Provides functions to handle Lesotho Loti currency data, including symbol retrieval, description, and unit mappings. Works with strings, options, and custom money types like `Safemoney__Quotient` and `Safemoney__Discrete`. Used to construct and validate monetary values in financial applications requiring precise currency handling.",
      "description_length": 332,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LRD",
      "description": "Provides functions to handle Liberian Dollar data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string-based denominations and numeric values.",
      "description_length": 307,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LYD",
      "description": "Provides functions to handle Libyan Dinar data, including retrieving the currency symbol, description, and unit mappings. Works with string, integer, and custom monetary structures for precise financial calculations. Enables creation of quotient and discrete monetary values from quantized and zero-validated inputs.",
      "description_length": 316,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CHF",
      "description": "Provides functions to handle Swiss Franc data, including retrieving the currency symbol and description, and constructing monetary values with specific units. Works with string representations, arbitrary-precision integers, and custom monetary types for precise financial calculations. Used to create and manipulate Swiss Franc amounts in applications requiring exact currency handling.",
      "description_length": 386,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MOP",
      "description": "Provides functions to handle Macanese Pataca, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value types. Works with strings, options, and custom monetary types like `Q.t` and `Z.t`. Used to create and manipulate precise monetary representations for financial calculations.",
      "description_length": 339,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MKD",
      "description": "Provides functions to handle Macedonian Denar currency data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from string and integer inputs for financial calculations.",
      "description_length": 319,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MGA",
      "description": "Provides functions to handle Malagasy Ariary, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value types. Works with strings, options, and custom monetary types like `Q.t` and `Z.t`. Used to create precise monetary representations for financial calculations in contexts requiring Malagasy currency.",
      "description_length": 364,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MWK",
      "description": "Provides functions to handle Malawi Kwacha data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and integer types. Enables creation of precise monetary objects from quantized values or string-based denominations.",
      "description_length": 301,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MYR",
      "description": "Provides functions to handle Malaysian Ringgit values, including converting quantized values to quotient types and creating discrete values from strings and integers. Works with string representations, quantized values, and discrete monetary structures. Used to construct and manipulate Ringgit amounts in financial calculations with precise scaling.",
      "description_length": 350,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MVR",
      "description": "Provides functions to handle Maldivian Rufiyaa currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary structures like Q.t and Z.t for precise value creation. Used to construct and manipulate monetary values in financial applications requiring Maldivian Rufiyaa support.",
      "description_length": 336,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MUR",
      "description": "Provides functions to handle Mauritius Rupee currency data, including retrieving the symbol, description, and unit conversions. Works with string representations, quotient and discrete money types, and scale mappings. Enables creation of precise monetary values and conversion tables for financial calculations.",
      "description_length": 311,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XUA",
      "description": "Provides functions to retrieve the symbol and description of a currency, manage units as a hash table mapping strings to scaled values, and construct quotient and discrete money values from numeric inputs. Works with strings, integers, and custom money types based on quotient and discrete scales. Used to handle currency data in financial calculations requiring precise unit conversions and value representations.",
      "description_length": 414,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MXN",
      "description": "Provides functions to handle Mexican Peso data, including retrieving the currency symbol, description, and unit mappings. Works with string, integer, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from numeric inputs.",
      "description_length": 288,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MXV",
      "description": "Provides functions to handle the Mexican Unidad de Inversion, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete money types from numeric inputs. Operates with strings, options, hashtables, and custom money types from the Safemoney library. Used to standardize currency representation and conversions in financial applications involving Mexican inflation-linked units.",
      "description_length": 441,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MDL",
      "description": "Provides functions to handle Moldovan Leu currency data, including retrieving the currency symbol, description, and unit mappings. Works with string-based identifiers and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary representations from string denominations and rational numbers.",
      "description_length": 337,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MNT",
      "description": "Provides functions to handle Mongolian Tugrik data, including retrieving the currency symbol and description, and constructing monetary values from quantized or discrete representations. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Tugrik amounts in applications requiring accurate currency handling.",
      "description_length": 377,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MAD",
      "description": "Provides functions to handle Moroccan Dirham values, including symbol retrieval, description, and conversion to monetary types. Works with strings, integers, and custom monetary structures like `Safemoney__Quotient` and `Safemoney__Discrete`. Used to create precise monetary representations from quantities or string-based values.",
      "description_length": 330,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_MMK",
      "description": "Provides functions to handle Myanmar Kyat currency data, including retrieving the symbol and description, and constructing monetary values from quantized or string-based inputs. Works with strings, options, and custom monetary types for precise financial calculations. Used to create and manipulate Kyat amounts in applications requiring accurate currency representation.",
      "description_length": 371,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NAD",
      "description": "Provides functions to handle Namibia Dollar data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary objects from string and integer inputs.",
      "description_length": 288,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NPR",
      "description": "Provides functions to handle Nepalese Rupee data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string identifiers and integer values.",
      "description_length": 298,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NZD",
      "description": "Provides functions to retrieve the symbol and description of the New Zealand Dollar, and to construct monetary values using quotient and discrete value representations. Works with string, integer, and custom monetary types for precise financial calculations. Used to create and manipulate NZD amounts in applications requiring currency-specific handling.",
      "description_length": 354,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NIO",
      "description": "Provides functions to handle currency operations for Cordoba Oro, including retrieving the currency symbol, description, and unit conversions. Works with strings, options, and custom monetary types like `Q.t` and `Z.t` for precise value representation. Enables creation of quotient and discrete value objects for financial calculations.",
      "description_length": 336,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_NGN",
      "description": "Provides functions to handle Nigerian Naira, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value types from numeric and string representations. Works with strings, options, hashtables, and custom monetary types like `Q.t` and `Z.t`. Used to create precise monetary representations for financial calculations involving NGN.",
      "description_length": 389,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_OMR",
      "description": "Provides functions to handle Omani Rial currency data, including retrieving the currency symbol, description, and unit conversions. Works with string keys and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary representations from string denominations or numeric values.",
      "description_length": 320,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PKR",
      "description": "Provides functions to handle Pakistan Rupee data, including retrieving the currency symbol and description, and constructing monetary values using quotient and discrete value types. Works with strings, integers, and custom monetary structures like `Q.t` and `Z.t` for precise financial calculations. Used to create and manipulate PKR amounts in applications requiring accurate currency representation.",
      "description_length": 401,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PAB",
      "description": "Provides functions to handle currency units, create quotient and discrete value types for monetary calculations, and retrieve symbolic and descriptive information. Works with strings, options, and custom monetary structures like `Q.t` and `Z.t`. Used to construct and manipulate Panamanian Balboa values in financial applications.",
      "description_length": 330,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PGK",
      "description": "Provides functions to handle Papua New Guinean Kina, including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient or discrete money values from quantities or strings. Operates with strings, hash tables, and custom money types from the Safemoney library. Used to parse and represent financial data specific to the PGK currency in monetary calculations.",
      "description_length": 401,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PYG",
      "description": "Provides functions to handle Paraguayan Guarani currency, including retrieving its symbol and description, and constructing monetary values with discrete scales. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate amounts in Guarani for financial applications requiring exact decimal representation.",
      "description_length": 369,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PEN",
      "description": "Provides functions to handle Peruvian Sol currency data, including symbol retrieval, description, and unit mappings. Works with string representations, quotient values, and discrete monetary units. Enables creation of precise monetary values from string denominations and quotient-based calculations.",
      "description_length": 300,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PHP",
      "description": "Provides functions to handle Philippine Peso data, including currency symbol, description, and unit mappings. Works with strings, options, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 288,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_PLN",
      "description": "Provides functions to handle Polish Zloty, including retrieving the currency symbol and description, mapping unit names to scale values, and constructing quotient and discrete value types. Works with strings, option types, and custom monetary structures like Q.t and Z.t. Used to create precise monetary representations for financial calculations involving PLN.",
      "description_length": 361,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_QAR",
      "description": "Provides functions to handle Qatari Rial data, including retrieving the currency symbol and description. Works with string representations of amounts and discrete monetary values using quotient and zero-validated types. Enables creation of precise monetary objects from string inputs or numeric values.",
      "description_length": 302,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_RON",
      "description": "Provides functions to handle Romanian Leu (RON) with operations for creating monetary values from quantities and strings, and retrieving unit information. Works with strings, integers, and custom monetary types including quotient and discrete value structures. Used to construct precise financial representations of RON amounts in applications requiring currency-specific handling.",
      "description_length": 381,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_RUB",
      "description": "Provides functions to handle Russian Ruble data, including retrieving the currency symbol, description, and unit mappings. Works with string representations, quotient and discrete money types, and scale values. Enables creation of precise monetary values from strings and quantized units.",
      "description_length": 288,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_RWF",
      "description": "Provides functions to handle Rwanda Franc currency data, including symbol retrieval, description, and unit mappings. Works with strings, options, and custom money types for precise value representation. Enables creation of quotient and discrete value objects from numeric and string inputs.",
      "description_length": 290,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SHP",
      "description": "Provides functions to handle the Saint Helena Pound, including retrieving its symbol and description, managing currency units as a hash table, and constructing quotient and discrete value types for precise monetary calculations. Works with strings, hash tables, and custom monetary types derived from quotient and discrete value modules. Used to represent and manipulate financial data specific to Saint Helena's currency in applications requiring exact decimal arithmetic.",
      "description_length": 473,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_WST",
      "description": "Provides functions to handle Samoan Tala currency data, including retrieving the currency symbol and description. Works with hash tables mapping unit names to scale values and constructs quotient or discrete value types from quantities or strings. Used to create precise monetary representations for financial calculations involving Samoan Tala.",
      "description_length": 345,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_STN",
      "description": "Provides functions to handle currency operations for Sao Tome and Principe Dobra, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient and discrete money types, and scale mappings. Enables creation of precise monetary values from string denominations and numeric quantities.",
      "description_length": 342,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SAR",
      "description": "Provides functions to handle Saudi Riyal data, including currency symbol, description, and unit mappings. Works with string, integer, and custom monetary structures for precise financial calculations. Enables creation of quotient and discrete monetary values from string representations and integers.",
      "description_length": 300,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_RSD",
      "description": "Provides functions to handle Serbian Dinar data, including retrieving the currency symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with string, integer, and custom monetary structures like Q.t and Z.t. Used to create precise monetary representations for financial calculations involving Serbian Dinar.",
      "description_length": 395,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SCR",
      "description": "Provides functions to handle Seychelles Rupee data, including currency symbol, description, and unit mappings. Works with string identifiers, monetary scales, and discrete monetary values. Enables creation of quotient and discrete value representations for financial calculations.",
      "description_length": 280,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SLL",
      "description": "Provides functions to handle currency operations for Sierra Leonean Leone, including retrieving the currency symbol, description, and unit mappings. Works with string, option, and custom monetary types like Q.t and Z.t to construct and manage discrete monetary values. Used to create quotient and discrete value representations for financial calculations specific to this currency.",
      "description_length": 381,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SLE",
      "description": "Provides functions to handle Sierra Leonean Leone currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary structures like quotient and discrete values. Used to construct and validate monetary amounts in financial applications requiring precise currency handling.",
      "description_length": 328,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SGD",
      "description": "Provides functions to handle Singapore Dollar data, including retrieving the currency symbol and description. Works with string-based units, quotient values, and discrete monetary structures. Enables creation of precise monetary representations from string-based denominations or quotient values.",
      "description_length": 296,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XSU",
      "description": "Provides functions to handle currency operations specific to the Sucre, including retrieving its symbol and description, managing units as a hash table, and constructing quotient and discrete value types from numeric and string inputs. Works with strings, hash tables, and custom monetary types derived from quotient and discrete value modules. Used to create and manipulate Sucre-based financial data in applications requiring precise currency handling.",
      "description_length": 454,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SBD",
      "description": "Provides functions to handle the Solomon Islands Dollar, including retrieving its symbol and description, managing currency units, and constructing quotient and discrete value types. Works with strings, options, and custom monetary types like Q.t and Z.t. Used to create and manipulate precise financial representations of SBD in monetary calculations.",
      "description_length": 352,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SOS",
      "description": "Provides functions to handle Somali Shilling data, including currency symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from string and integer inputs.",
      "description_length": 296,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ZAR",
      "description": "Provides functions to handle South African Rand, including retrieving its symbol and description, managing units as a hash table, and constructing quotient and discrete value types from quantities and strings. Works with string, Z.t, and custom monetary types from the Safemoney library. Used to create precise financial representations and perform currency-specific operations in monetary calculations.",
      "description_length": 403,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SSP",
      "description": "Provides functions to handle South Sudanese Pound data, including retrieving its symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary objects from string identifiers and integer values.",
      "description_length": 295,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_LKR",
      "description": "Provides functions to handle Sri Lanka Rupee data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary objects from string-based units and integer values.",
      "description_length": 301,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SDG",
      "description": "Provides functions to handle currency symbols, descriptions, and unit conversions for the Sudanese Pound. Works with strings, hash tables, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for use in monetary applications.",
      "description_length": 298,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SRD",
      "description": "Provides functions to handle Surinam Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with string-based keys and discrete monetary values using quotient and integer types. Enables creation of precise monetary representations from quantities and string identifiers.",
      "description_length": 311,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SEK",
      "description": "Provides functions to handle Swedish Krona data, including retrieving the currency symbol and description, and constructing monetary values using quotient and discrete scales. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate SEK amounts in applications requiring currency-specific formatting and arithmetic.",
      "description_length": 380,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_CHE",
      "description": "Provides functions to handle currency symbols, descriptions, and scale mappings for WIR Euro, along with constructors for quotient and discrete money values. Operates on strings, options, and custom money types derived from Qv and Zv modules. Used to create and manage WIR Euro representations in financial calculations.",
      "description_length": 320,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_SYP",
      "description": "Provides functions to handle Syrian Pound data, including retrieving the currency symbol and description, and constructing monetary values using quotient and discrete representations. Works with strings, options, and custom monetary types based on quotient and integer scales. Used to create and manipulate precise financial amounts in applications requiring currency-specific handling.",
      "description_length": 386,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TWD",
      "description": "Provides functions to handle New Taiwan Dollar data, including retrieving the currency symbol and description. Works with string representations and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary objects from quantized values or string-based denominations.",
      "description_length": 312,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TJS",
      "description": "Provides functions to handle Tajikstani Somoni currency data, including symbol retrieval, description, and unit mappings. Works with string, option, and custom monetary types like Q.t and Z.t for precise financial calculations. Enables creation of quotient and discrete monetary values from string representations and numeric scales.",
      "description_length": 333,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TZS",
      "description": "Provides functions to handle Tanzanian Shilling data, including retrieving its symbol and description, and constructing monetary values with precise scaling. Works with strings, integers, and custom monetary types for accurate financial calculations. Used to create and manipulate Tanzanian Shilling amounts in applications requiring currency-specific operations.",
      "description_length": 363,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_THB",
      "description": "Provides functions to handle Thai Baht currency data, including retrieving the currency symbol, description, and unit mappings. Works with string representations, quotient values, and discrete monetary values using specific type constructors. Enables creation of precise monetary instances from string-based denominations or quotient values.",
      "description_length": 341,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TOP",
      "description": "Provides functions to handle currency symbols, descriptions, and unit conversions for the Tongan Pa'anga, including a hash table mapping currency units to scale values. Supports creating quotient and discrete value types from a string and integer, enabling precise monetary calculations. Used to represent and manipulate financial data specific to the Tongan currency.",
      "description_length": 368,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TTD",
      "description": "Provides functions to handle currency symbols, descriptions, and unit conversions for Trinidad and Tobago Dollar. Works with strings, hash tables, and custom monetary types for precise value representation. Enables creation of quotient and discrete monetary values from numeric strings and integers.",
      "description_length": 299,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TND",
      "description": "Provides functions to handle Tunisian Dinar values, including converting quantized values to quotient types and discrete values from strings and integers. Works with string representations, quotient types, and discrete monetary structures. Used to create and manipulate Tunisian Dinar amounts in financial calculations.",
      "description_length": 319,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TRY",
      "description": "Provides functions to handle Turkish Lira currency data, including retrieving the currency symbol, description, and unit mappings. Works with string, integer, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete value representations for transactions and conversions.",
      "description_length": 318,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_TMT",
      "description": "Provides functions to handle currency operations for Turkmenistan New Manat, including symbol retrieval, description, and unit mappings. Works with string representations, quotient values, and discrete monetary scales. Enables creation of precise monetary values from strings and integers for financial calculations.",
      "description_length": 316,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UGX",
      "description": "Provides functions to handle Uganda Shilling data, including retrieving its symbol and description, and constructing monetary values with specific units. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate Uganda Shilling amounts in applications requiring currency-specific handling.",
      "description_length": 353,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UAH",
      "description": "Provides functions to handle Ukrainian Hryvnia, including retrieving the currency symbol and description, mapping unit names to scale values, and constructing quotient or discrete money values from quantities or strings. Works with strings, integers, and custom money types from the Safemoney library. Used to parse and represent UAH amounts in financial applications requiring precise currency handling.",
      "description_length": 404,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_AED",
      "description": "Provides functions to handle UAE Dirham currency data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient and discrete money types, and scale values. Enables creation of precise monetary values for financial calculations involving AED.",
      "description_length": 305,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_USD",
      "description": "Provides functions to handle US Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with string representations, quotient values, and discrete monetary structures. Used to create and manipulate USD amounts in financial calculations and data processing.",
      "description_length": 296,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_USN",
      "description": "Provides functions to handle US Dollar data, including retrieving the currency symbol, description, and unit conversions. Works with strings, options, and custom monetary types like `Q.t` and `Z.t` for precise financial calculations. Enables creation of quotient and discrete monetary values for use in financial systems requiring exact decimal representation.",
      "description_length": 360,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UYU",
      "description": "Provides functions to handle the Uruguayan Peso, including retrieving its symbol and description, managing units with a hash table, and constructing quotient and discrete money values from quantities and strings. Works with strings, integers, and custom money types based on quotient and discrete scales. Used to parse and represent Peso Uruguayo amounts in financial calculations and currency-aware applications.",
      "description_length": 413,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UYI",
      "description": "Provides functions to handle Uruguay Peso en Unidades Indexadas, including retrieving the currency symbol and description, managing unit conversions, and constructing quotient and discrete value types. Works with strings, integers, and custom monetary types for precise financial calculations. Used to convert and represent indexed peso values in applications requiring accurate currency handling.",
      "description_length": 397,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UYW",
      "description": "Provides functions to handle the Unidad Previsional currency, including retrieving its symbol and description. Works with string representations and discrete monetary values using quotient and integer scales. Enables creation of precise monetary objects from string identifiers and integer amounts.",
      "description_length": 298,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_UZS",
      "description": "Provides functions to handle Uzbekistani Sum (UZS) with operations for creating monetary values from quantized and discrete representations. Works with strings, integers, and custom monetary types including scales and quotients. Used to construct precise financial values for transactions and currency conversions.",
      "description_length": 314,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_VUV",
      "description": "Provides functions to handle Vanuatu Vatu currency data, including retrieving the currency symbol, description, and unit conversions. Works with string, option, and custom monetary types for precise financial calculations. Enables creation of quotient and discrete monetary values from string representations and numeric units.",
      "description_length": 327,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_VES",
      "description": "Provides functions to handle currency operations for the Venezuelan Bolivar, including retrieving its symbol and description, managing units as a hash table, and constructing quotient and discrete value types from numeric and string inputs. Works with string, integer, and custom monetary structures like Q.t and Z.t. Used to create and manipulate financial data specific to the Bolivar Soberano S in applications requiring precise currency handling.",
      "description_length": 450,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_VED",
      "description": "Provides functions to handle currency operations for the Bolivar Soberano D, including retrieving its symbol and description. Works with string representations and discrete monetary values using custom scale and quotient types. Enables creation of precise monetary units from string identifiers and integer values.",
      "description_length": 314,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_VND",
      "description": "Provides functions to handle Vietnamese Dong, including retrieving the currency symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, options, and custom money types based on quotient and discrete scales. Used to create and manipulate VND amounts in financial calculations.",
      "description_length": 352,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_YER",
      "description": "Provides functions to handle Yemeni Rial data, including retrieving its symbol and description, and constructing monetary values with specific units and scales. Works with strings, integers, and custom monetary types for precise financial calculations. Used to create and manipulate YER amounts in applications requiring currency-specific formatting and arithmetic.",
      "description_length": 365,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ZMW",
      "description": "Provides functions to handle Zambian Kwacha data, including retrieving the currency symbol, description, and unit mappings. Works with string, option, and custom monetary types like `Q.t` and `Z.t` for precise value representation. Enables creation of quotient and discrete value objects for financial calculations.",
      "description_length": 315,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_ZWL",
      "description": "Provides functions to handle Zimbabwe Dollar data, including retrieving the currency symbol and description, mapping unit names to scale values, and constructing quotient and discrete money values. Works with strings, base types, and custom money structures for precise financial calculations. Used to initialize and manipulate ZWL amounts in monetary applications requiring exact decimal representation.",
      "description_length": 404,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XBA",
      "description": "Provides functions to handle the European Composite Unit (EURCO), including retrieving its symbol and description, managing units with a hash table, and constructing quotient and discrete money values. Works with strings, integers, and custom money types from the Safemoney library. Used to represent and manipulate financial data specific to bond market transactions involving EURCO.",
      "description_length": 384,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XBB",
      "description": "Provides functions to handle the European Composite Unit, including retrieving its symbol and description, managing currency units with a hash table, and constructing quotient and discrete value types from quantities and strings. Works with strings, integers, and custom monetary types for precise financial calculations. Used in bond market systems to represent and manipulate composite currency values accurately.",
      "description_length": 415,
      "index": 169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XBC",
      "description": "Provides functions to handle the European Unit of Account 9 (E.U.A.-9), including retrieving its symbol and description, mapping unit names to scale values, and constructing quotient and discrete value types from quantities and strings. Operates with strings, options, hash tables, and custom monetary types derived from Qv and Zv. Used to standardize and process financial data in bond markets requiring precise unit representation.",
      "description_length": 433,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XBD",
      "description": "Provides functions to handle currency data for the European Unit of Account 17, including retrieving the currency symbol and description. It works with string representations and discrete monetary values using scaled integers. Used to construct and validate monetary units in bond market transactions.",
      "description_length": 301,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XXX",
      "description": "Provides functions to retrieve the symbol and description of a non-currency unit, and to construct quotient and discrete value types from a string and integer. Works with strings, integers, and custom monetary value types based on quotient and discrete scales. Used to handle non-monetary units in financial or measurement contexts where precise representation is required.",
      "description_length": 373,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XAU",
      "description": "Provides functions to handle gold currency data, including retrieving the symbol and description, managing unit conversions, and constructing quotient and discrete value types. Works with strings, integers, and custom monetary structures like `Q.t` and `Z.t`. Used to create and manipulate gold-based financial values in precise, standardized formats.",
      "description_length": 351,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XPD",
      "description": "Provides functions to retrieve currency symbols and descriptions, manage units as hash maps, and construct quotient and discrete money values from numeric inputs. Works with strings, hash tables, and custom money types involving rational and integer scales. Used to initialize currency configurations and convert string representations into structured monetary data.",
      "description_length": 366,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XPT",
      "description": "Provides functions to handle Platinum currency data, including retrieving its symbol, description, and unit conversions. Works with string identifiers, monetary scales, and discrete value structures. Enables creation of quotient and discrete values from string representations and integers.",
      "description_length": 290,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.ISO4217_XAG",
      "description": "Provides functions to handle silver currency data, including retrieving the currency symbol, description, and unit conversions. Works with string identifiers, quotient and discrete money types, and hash tables mapping units to scale values. Enables creation of quotient and discrete money instances from string representations and numeric values.",
      "description_length": 346,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_BTC",
      "description": "Provides functions to handle Bitcoin units, convert quantities to scaled values, and create discrete money representations. Works with strings, integers, and custom money types based on quotient and discrete scales. Used to parse and manipulate Bitcoin amounts in applications requiring precise financial calculations.",
      "description_length": 318,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_ETH",
      "description": "Provides functions to handle Ethereum currency data, including symbol retrieval, description access, and unit mapping. Works with string identifiers, quotient and discrete money types from the Safemoney library. Enables creation of monetary values from string representations and numeric quantities.",
      "description_length": 299,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_BNB",
      "description": "Provides functions to handle Binance Coin data, including retrieving its symbol and description, and converting values into monetary representations. Works with string identifiers, quotient and discrete monetary types for precise financial calculations. Used to create and manage BNB-denominated transactions with exact decimal scaling.",
      "description_length": 336,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_USDT",
      "description": "Provides functions to handle Tether USDT data, including retrieving the currency symbol and description. Works with string representations of amounts and discrete monetary values using quotient and zero-valuation types. Enables creation of precise monetary objects from string-based quantities and Q.t values for financial calculations.",
      "description_length": 336,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_ADA",
      "description": "Provides functions to create and manipulate monetary values using quotient and discrete scales, working with strings, integers, and custom monetary types. Handles currency symbols and descriptions, and supports conversion from numeric values to structured monetary representations. Used to represent Ada tokens with precise scaling and formatting in financial computations.",
      "description_length": 373,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_DOGE",
      "description": "Provides functions to handle Dogecoin symbols, descriptions, and monetary units with custom scaling. Works with string identifiers, quotient and discrete monetary types for precise value representation. Enables creation of quantized values from rational numbers and string-based discrete values for financial calculations.",
      "description_length": 322,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_LTC",
      "description": "Provides functions to handle Litecoin symbols, descriptions, and monetary values using discrete scales and quotient types. Works with strings, integers, and custom types for precise financial calculations. Enables creation of safe monetary representations from string-based amounts and quantized values.",
      "description_length": 303,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_XRP",
      "description": "Provides functions to handle Ripple (XRP) currency data, including retrieving the symbol and description, and constructing monetary values using quotient and discrete value types. Works with strings, integers, and custom monetary structures like `Q.t` and `Z.t` for precise financial calculations. Used to create and manipulate XRP amounts in applications requiring exact decimal arithmetic and currency-specific formatting.",
      "description_length": 424,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_XMR",
      "description": "Provides functions to handle Monero currency data, including symbol retrieval, description access, and unit mapping. Works with string identifiers, quotient and discrete money types from the Safemoney library. Enables creation of monetary values from string representations and numeric quantities.",
      "description_length": 297,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_SOL",
      "description": "Provides functions to create and manipulate monetary values using quotient and discrete representations, including conversion from string-based denominations. Operates with types such as `Q.t`, `Z.t`, and custom monetary structures built from `Safemoney__Quotient` and `Safemoney__Discrete`. Used to handle Solana token symbols, descriptions, and precise value conversions in financial applications.",
      "description_length": 399,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_DOT",
      "description": "Provides functions to handle currency symbols, descriptions, and monetary units with precise scaling. Works with strings, base units, and custom monetary types using quotient and discrete value structures. Enables creation of exact monetary representations from string identifiers and numeric values.",
      "description_length": 300,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_SHIB",
      "description": "Provides functions to handle Shiba Inu cryptocurrency data, including retrieving the symbol and description, managing units with a hash table, and constructing quotient and discrete value types from quantities and strings. Works with string, Z.t, and custom monetary types from the Safemoney library. Used to parse and represent SHIB values in financial calculations and data exchanges.",
      "description_length": 386,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined.Crypto_XTZ",
      "description": "Provides functions to create and manipulate monetary values using quotient and discrete scales, working with strings, integers, and custom money types. Handles currency symbols and descriptions, and supports conversion from numeric values to structured monetary representations. Used to represent Tezos token amounts with precise scaling and formatting.",
      "description_length": 353,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Discrete.Scale",
      "description": "Compares scale instances and converts them to and from JSON, with support for string-based representations. It operates on a `t` type representing scales and a `showable` type for human-readable output. It enables validation of quantitative values against scale definitions and serializes scales for storage or transmission.",
      "description_length": 324,
      "index": 190,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Safemoney.Discrete",
      "description": "manages scale instances with validation, conversion, and serialization capabilities. It works with a `t` type for scale definitions and a `showable` type for readable output, supporting JSON and string representations. It ensures quantitative values conform to scale constraints and allows scales to be saved or shared. For example, it can validate a numeric input against a defined scale or convert a scale to a JSON object for external use.",
      "description_length": 442,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Exchange",
      "description": "Provides operations to create, compare, and manipulate exchange records, including converting between internal representations and JSON. Works with types `t` for exchange data and `showable` for human-readable formatting. Used to generate JSON output, display exchange details, and perform exchange transformations in financial data processing.",
      "description_length": 344,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Quotient",
      "description": "Provides operations for manipulating and inspecting quotient values, including arithmetic, comparison, and conversion to and from JSON. Works with the `t` type representing quotients and the `showable` type for formatted output. Used to construct quotient values, perform arithmetic, and generate human-readable or machine-parsable representations.",
      "description_length": 348,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Predefined",
      "description": "The module provides a unified interface for handling diverse currencies and digital assets, offering precise monetary value creation and manipulation through quotient and discrete types. It supports operations like symbol and description retrieval, unit mapping, and conversion from strings or integers to structured monetary representations. Examples include creating accurate representations of USD, Bitcoin, or Ethereum, performing currency-specific calculations, and managing units with hash tables or custom scales.",
      "description_length": 520,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney.Ops",
      "description": "Handles delimiter configuration for structured data parsing, using a private type for required and optional string pairs. Offers functions to construct and extract these pairs, enabling custom parsing rules. Supports scenarios like defining CSV field and escape separators. Allows precise control over how data is split and processed based on specified delimiters.",
      "description_length": 364,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "safemoney",
      "description": "Provides operations for creating, converting, and performing arithmetic on monetary values, including addition, subtraction, and multiplication with currency-aware type checking. Works with custom currency types and standard ISO4217 currency codes, along with major cryptocurrencies. Used to ensure accurate financial calculations in applications requiring strict type safety for monetary data.",
      "description_length": 394,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Safemoney",
      "description": "Combines scale validation, exchange record management, quotient arithmetic, currency handling, and delimiter configuration into a cohesive system for precise financial data processing. It operates on types `t` and `showable`, enabling validation, conversion, comparison, and serialization across numeric, monetary, and structured data. Users can validate inputs against defined scales, generate JSON from exchange records, perform arithmetic on quotients, create accurate currency representations, and define custom parsing rules. Examples include converting Bitcoin values, generating human-readable financial reports, and parsing CSV data with custom delimiters.",
      "description_length": 664,
      "index": 197,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 198,
    "meaningful_modules": 198,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 664,
    "min_description_length": 278,
    "avg_description_length": 345.7929292929293,
    "embedding_file_size_mb": 0.7196989059448242
  }
}