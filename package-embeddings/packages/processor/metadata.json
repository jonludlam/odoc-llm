{
  "package": "processor",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:59:42.681742",
  "modules": [
    {
      "module_path": "Processor.Affinity",
      "library": "processor",
      "description": "This module retrieves and sets the logical CPUs that a process is allowed to run on, using either CPU identifiers or `Cpu.t` values. It works directly with lists of CPU IDs or `Cpu.t` structures to define execution constraints. Concrete use cases include restricting a process to specific cores for performance tuning or isolating critical tasks to dedicated CPUs.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Processor.Topology",
      "library": "processor",
      "description": "Represents the static CPU topology of the system as a list of logical CPUs. Provides direct access to the list of all logical processors available at runtime. Useful for workload distribution and CPU affinity management in multi-threaded applications.",
      "description_length": 251,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Processor.Query",
      "library": "processor",
      "description": "This module provides direct access to system-level hardware metrics, specifically returning the total number of logical CPUs (threads), physical cores, and processor sockets. It works with basic integer values to represent these hardware components. Use this module to retrieve precise hardware configuration details for performance tuning, resource allocation, or system diagnostics.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Processor.Cpu",
      "library": "processor",
      "description": "This module defines a logical CPU or thread with attributes including performance or energy-efficient type, unique identifier, SMT/thread ID, core ID, and socket ID. It provides functions to construct CPU instances and filter lists of CPUs by SMT, core, or socket identifiers. Use cases include managing CPU affinity, grouping threads by hardware topology, or selecting specific CPUs for task scheduling.",
      "description_length": 404,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Processor",
      "library": "processor",
      "description": "This module provides operations to query hardware metrics, manage CPU affinity, and represent CPU topology and attributes. It works with integers, lists of CPU identifiers, and structured `Cpu.t` values to expose details like core count, thread grouping, and socket distribution. Use it to configure process placement on specific CPUs, optimize performance based on hardware layout, or gather system-specific metrics for scheduling decisions.",
      "description_length": 442,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Amd64",
      "library": "processor.amd64",
      "description": "This module executes CPUID instructions to retrieve processor-specific information, such as vendor, model, and APIC ID components. It provides direct access to low-level CPU data through functions like `cpuid_leaf` and `decompose_apic`, returning results in raw or structured formats. Concrete use cases include identifying CPU features, extracting core/thread topology, and inspecting hardware capabilities directly from OCaml code.",
      "description_length": 433,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 442,
    "min_description_length": 251,
    "avg_description_length": 379.6666666666667,
    "embedding_file_size_mb": 0.08733940124511719
  }
}