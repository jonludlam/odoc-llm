{
  "package": "graphql-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:52.230914",
  "modules": [
    {
      "module_path": "Graphql_async.Schema.Io.Stream",
      "library": "graphql-async",
      "description": "This module provides streaming capabilities for handling sequences of values in a GraphQL schema with asynchronous I/O. It supports operations like `map`, which transforms each value in a stream, and `iter`, which applies a function to each value, both integrating with the schema's I/O monad. Concrete use cases include processing real-time data feeds, handling paginated queries, and implementing subscriptions that emit multiple values over time. The `close` function allows explicit termination of a stream, ensuring proper resource management.",
      "description_length": 548,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.Io",
      "library": "graphql-async",
      "description": "This module orchestrates asynchronous I/O within a GraphQL schema, allowing resolvers to perform non-blocking operations like database queries and API calls using the `Graphql_async.Schema.Io.t` monad. Its `Stream` submodule enables streaming sequences of values with transformations via `map`, side-effects via `iter`, and controlled termination via `close`, ideal for real-time data, paginated results, and GraphQL subscriptions. Direct API functions compose I/O actions with schema resolvers, while streams handle asynchronous value sequences over time. Together, they facilitate efficient, reactive data handling from initial request to final resolution.",
      "description_length": 658,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.StringMap",
      "library": "graphql-async",
      "description": "This module provides operations for manipulating ordered maps with string keys and arbitrary values, supporting insertion, deletion, lookup, traversal, and transformations like filtering, mapping, and merging. It works with a string-keyed map data structure (`StringMap.t`) that preserves key ordering, enabling efficient access and iteration. These operations are particularly useful in scenarios requiring dynamic schema composition or processing of hierarchical data, such as resolving GraphQL query variables or managing named type definitions.",
      "description_length": 548,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_async.Schema.Arg",
      "library": "graphql-async",
      "description": "This module defines argument types and constructors for building GraphQL schema fields with support for asynchronous operations. It provides functions to create scalar, enum, and object argument types, along with utilities for composing lists and non-null constraints. Concrete use cases include defining input parameters for GraphQL queries and mutations, such as filtering options, user input validation, and nested input structures.",
      "description_length": 435,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema",
      "library": "graphql-async",
      "description": "This module constructs and manages GraphQL schemas with asynchronous resolution capabilities, supporting schema definition through objects, enums, and unions, and enabling async-aware field declarations and interface implementations. It operates on context (`'ctx`) and source (`'src`) values, `abstract_typ` and `typ` structures, and variables, facilitating async query execution, subscription handling, and type coercion. The Io module enables non-blocking resolver operations using the `Graphql_async.Schema.Io.t` monad, with a Stream submodule for handling real-time and paginated data via transformations and side-effects. The StringMap module provides ordered string-keyed maps for dynamic schema composition and hierarchical data processing, while the Arg module supports defining and composing input arguments for queries and mutations, including scalars, enums, and structured inputs.",
      "description_length": 893,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async",
      "library": "graphql-async",
      "description": "This module provides a comprehensive framework for building GraphQL schemas with asynchronous resolution, supporting real-time data handling and dynamic composition. Key data types include `typ`, `abstract_typ`, `'ctx`, `'src`, `Graphql_async.Schema.Io.t`, and `StringMap`, with operations for defining schema objects, resolving fields asynchronously, and managing input arguments. It enables constructing complex GraphQL APIs with features like subscriptions, paginated streams, and hierarchical data structures, using non-blocking IO and type-safe variable handling. Specific examples include implementing async resolvers for database queries, streaming live updates via subscriptions, and composing schemas dynamically using string-keyed maps.",
      "description_length": 746,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 893,
    "min_description_length": 435,
    "avg_description_length": 638.0,
    "embedding_file_size_mb": 0.022233009338378906
  }
}