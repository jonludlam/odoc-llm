{
  "package": "graphql-async",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:57:36.062456",
  "modules": [
    {
      "module_path": "Graphql_async.Schema.Io.Stream",
      "library": "graphql-async",
      "description": "This module provides streaming capabilities for handling sequences of values in a GraphQL schema with asynchronous I/O. It supports operations like `map`, which transforms each value in a stream, and `iter`, which applies a function to each value, both integrating with the schema's I/O monad. Concrete use cases include processing real-time data feeds, handling paginated queries, and implementing subscriptions that emit a series of values over time.",
      "description_length": 452,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.Io",
      "library": "graphql-async",
      "description": "This module provides monadic operations for building GraphQL schemas with asynchronous I/O, including `return` for wrapping values and `bind` for chaining asynchronous computations. It works with the `'a t` type representing asynchronous GraphQL values, enabling the construction of schema fields that perform I/O operations. Concrete use cases include implementing resolvers that fetch data from external services, handling file uploads, and executing database queries asynchronously within a GraphQL schema.",
      "description_length": 509,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.Arg",
      "library": "graphql-async",
      "description": "This module defines types and functions for constructing GraphQL input arguments, including scalars, enums, objects, lists, and non-null wrappers. It supports parsing and validating input values with async-compatible coercion functions. Concrete use cases include defining schema input types, handling field arguments, and building typed GraphQL queries with validated parameters.",
      "description_length": 380,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_async.Schema.StringMap",
      "library": "graphql-async",
      "description": "This module implements a string-keyed ordered map with polymorphic values, supporting functional operations like insertion, deletion, and lookup. It provides ordered traversal, merging, and filtering capabilities, along with safe handling of optional keys through exception-free and exception-raising variants. Use cases include managing schema components that require deterministic key-based access, combining configurations, and processing data with ordered string-indexed structures.",
      "description_length": 486,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema",
      "library": "graphql-async",
      "description": "This module provides tools for constructing and executing GraphQL schemas with asynchronous capabilities, enabling operations like defining types (objects, enums, scalars), fields with deferred resolution, and handling input validation or subscription streams. It works with data structures such as schemas, resolver contexts, and parsed GraphQL documents, while leveraging async I/O primitives for non-blocking execution. It is suited for implementing GraphQL APIs requiring real-time features, type-safe schema composition, or integration with event-driven systems.",
      "description_length": 567,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_async",
      "library": "graphql-async",
      "description": "This module enables constructing and executing GraphQL schemas with asynchronous resolvers, supporting operations like defining object types, enums, and fields with deferred resolution. It works with schemas, resolver contexts, and GraphQL documents, using async I/O for non-blocking execution. It is ideal for building real-time GraphQL APIs and integrating with event-driven or type-safe systems.",
      "description_length": 398,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 567,
    "min_description_length": 380,
    "avg_description_length": 465.3333333333333,
    "embedding_file_size_mb": 0.08732223510742188
  }
}