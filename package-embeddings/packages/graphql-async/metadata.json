{
  "package": "graphql-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:29:34.305846",
  "modules": [
    {
      "module_path": "Graphql_async.Schema.Io.Stream",
      "description": "Processes asynchronous data streams by applying transformations and side effects, and allows for graceful termination. It operates on pipe readers from the Async kernel, enabling non-blocking data handling. Used to dynamically generate output based on incoming data and manage resource cleanup.",
      "description_length": 294,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.Io",
      "description": "Handles asynchronous data processing with non-blocking I/O, supporting transformations, side effects, and controlled shutdowns. It works with Async pipe readers to manage streams efficiently. Key operations include mapping, filtering, and resource cleanup. Examples include real-time log processing, dynamic content generation, and handling large data flows without blocking.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.StringMap",
      "description": "This module provides operations for managing ordered maps with string keys, including insertion, deletion, modification, and traversal of key-value pairs. It supports advanced manipulations like folding, filtering, and splitting maps, along with optimizations for efficient key-based lookups and transformations. Use cases include dynamic configuration management, symbolic computation, and scenarios requiring ordered, string-indexed data structures.",
      "description_length": 451,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema.Arg",
      "description": "Provides functions to define and manipulate argument structures for GraphQL, including scalar coercion, enum validation, object field definitions, and list handling. Works with types like `int`, `string`, `bool`, `list`, and custom types through coercion functions. Used to construct argument parsers for query validation and input processing.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async.Schema",
      "description": "Combines asynchronous stream processing, ordered string-keyed maps, and GraphQL argument handling into a unified system for building responsive, data-driven applications. It supports async operations on pipes, efficient key-value manipulations, and structured argument parsing for GraphQL queries. Users can process real-time data streams, manage dynamic configurations, and validate complex input schemas. Examples include logging pipelines, configuration updates, and query argument parsing with type coercion.",
      "description_length": 512,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "graphql-async",
      "description": "Provides type-safe construction and validation of GraphQL schemas using custom type definitions. Works with OCaml's module system to enforce schema correctness at compile time. Enables developers to define queries, mutations, and subscriptions with strong typing guarantees.",
      "description_length": 274,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_async",
      "description": "Processes real-time data streams using asynchronous pipes, manages ordered string-keyed maps for dynamic configurations, and parses GraphQL arguments with type coercion. It enables efficient handling of event-driven workflows, structured input validation, and scalable data processing. Operations include stream transformation, key-based data retrieval, and argument normalization. Examples include real-time logging, configuration updates, and parsing complex GraphQL queries.",
      "description_length": 477,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 512,
    "min_description_length": 274,
    "avg_description_length": 389.42857142857144,
    "embedding_file_size_mb": 0.02583026885986328
  }
}