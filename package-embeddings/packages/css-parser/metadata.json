{
  "package": "css-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:07:48.448074",
  "modules": [
    {
      "module_path": "Css.Types.Declaration",
      "library": "css-parser",
      "description": "This module represents CSS declarations, including the property name, value components, and the `important` flag, each annotated with source location information. It provides operations to construct, access, and manipulate declaration fields, ensuring accurate tracking of positions in the original CSS source. Use cases include parsing CSS rules, transforming stylesheets, and generating source maps.",
      "description_length": 401,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Rule",
      "library": "css-parser",
      "description": "This module defines a type `t` that represents CSS rules, which can either be style rules or at-rules. It works with structured CSS data, enabling precise modeling of stylesheet components. Concrete use cases include parsing and manipulating CSS in a type-safe manner, such as distinguishing between standard selector-based rules and special directives like `@media` or `@keyframes`.",
      "description_length": 383,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.At_rule",
      "library": "css-parser",
      "description": "This module defines the structure and operations for handling CSS at-rules, including parsing and manipulating their name, prelude, and block content. It works with typed representations of CSS components like `Component_value.t` and `Brace_block.t`, along with source location tracking via `Location.t`. Concrete use cases include processing `@media`, `@keyframes`, and custom at-rules during CSS analysis or transformation.",
      "description_length": 425,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Declaration_list",
      "library": "css-parser",
      "description": "Handles lists of CSS declarations and at-rules with source location tracking. Operates on structured CSS elements like `Css.Types.Declaration.t` and `Css.Types.At_rule.t` wrapped in a `with_loc` list. Used to represent and manipulate blocks of CSS rules, such as style sheets or rule sets, preserving position information for error reporting or tooling.",
      "description_length": 353,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Style_rule",
      "library": "css-parser",
      "description": "Represents a CSS style rule with a prelude and a block of declarations, each annotated with location information. It provides structured access to the components of a style rule, including the selector list and the declaration block. This module is used to construct and manipulate CSS rules during parsing or transformation tasks.",
      "description_length": 331,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Types.Component_value",
      "library": "css-parser",
      "description": "This module defines a variant type representing component values in CSS syntax, such as identifiers, strings, numbers, percentages, and function calls. It includes constructors for structured values like parenthetical and bracket blocks, operators, delimiters, and dimensional units. This module is used to model low-level CSS token structures for parsing and generating CSS expressions.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Stylesheet",
      "library": "css-parser",
      "description": "Represents a list of CSS rules with location information for source tracking. It provides operations to construct, manipulate, and traverse styled rule sets, including adding rules, mapping over rule contents, and extracting location data. Used when parsing or generating CSS stylesheets to maintain structure and source position metadata for tooling or error reporting.",
      "description_length": 370,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Brace_block",
      "library": "css-parser",
      "description": "Handles structured CSS content with nested blocks, supporting operations to construct, deconstruct, and manipulate brace-enclosed structures like declaration lists and stylesheets. Works directly with `Declaration_list.t` and `Stylesheet.t` types to represent CSS rules and nested blocks. Useful for building and transforming CSS syntax trees in a type-safe manner, such as parsing or generating CSS rules with nested structures.",
      "description_length": 429,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Lex_buffer",
      "library": "css-parser",
      "description": "This module provides functions to track and manipulate source code positions while lexing CSS input using Sedlexing buffers. It supports operations like marking and backtracking positions, extracting character data, and converting buffers to strings in Latin-1 or UTF-8 encodings. It is used to maintain accurate source location information during CSS parsing for error reporting and AST construction.",
      "description_length": 401,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Menhir_parser",
      "library": "css-parser",
      "description": "Parses CSS stylesheets and declaration lists from token streams generated by a lexer. It processes tokens like identifiers, numbers, operators, and punctuation to construct structured representations of CSS rules and declarations. Useful for building CSS parsers that convert raw input into typed ASTs for further analysis or transformation.",
      "description_length": 341,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Lexer",
      "library": "css-parser",
      "description": "This module implements lexical analysis for CSS by classifying characters and managing state transitions during tokenization. It operates on Unicode characters (`Uchar.t`) using lookup tables, bitmask encodings, and partition functions to distinguish categories like identifiers, numbers, and punctuation, while handling whitespace and comments. The generated tables and helper utilities interface with parser components to process CSS syntax into structured tokens and positions.",
      "description_length": 480,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types",
      "library": "css-parser",
      "description": "This module defines the core data structures for representing CSS syntax and values, including dimensions like length, angle, time, and frequency. It provides types for modeling CSS components such as declarations, rules, at-rules, and nested blocks, along with operations to parse, manipulate, and traverse structured CSS data while preserving source location information. Submodules handle specific elements like style rules with selector lists, declaration blocks with `important` flags, and at-rules with preludes and content blocks, enabling tasks like CSS transformation, linting, and source map generation. Examples include building typed representations of `@media` rules, manipulating declaration lists with precise source tracking, and constructing nested CSS structures like keyframes or custom at-rules.",
      "description_length": 815,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Parser",
      "library": "css-parser",
      "description": "Parses CSS stylesheets and declaration lists from strings into structured representations. Works with string inputs and produces typed ASTs representing CSS syntax. Useful for building CSS processors or linters that analyze or transform stylesheets programmatically.",
      "description_length": 266,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css",
      "library": "css-parser",
      "description": "This module processes CSS input by tracking source positions, lexing Unicode characters into tokens, and parsing structured representations of stylesheets and declarations. It defines core data types for CSS values like lengths and angles, along with rules, at-rules, and declaration blocks, supporting operations to parse, manipulate, and traverse CSS with precise source location tracking. Examples include building typed ASTs for `@media` queries, transforming style rules with selector lists, and extracting or modifying declaration properties with `important` flags. It enables tasks like CSS linting, transformation, and source map generation from string or token stream inputs.",
      "description_length": 684,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 815,
    "min_description_length": 266,
    "avg_description_length": 433.2857142857143,
    "embedding_file_size_mb": 0.051285743713378906
  }
}