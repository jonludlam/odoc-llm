{
  "package": "css-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:15:12.372998",
  "modules": [
    {
      "module_path": "Css.Types.Declaration_list",
      "library": "css-parser",
      "description": "Handles lists of CSS declarations and at-rules, including their associated source location information. Works with `kind` variants representing either individual declarations or at-rules, wrapped in a located list type. Used to construct and manipulate sequences of CSS statements in a stylesheet or rule block.",
      "description_length": 311,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Rule",
      "library": "css-parser",
      "description": "This module defines a polymorphic type `t` that represents CSS rules, either as style rules or at-rules. It allows distinguishing and working with different kinds of CSS rules in a type-safe manner. Concrete use cases include parsing and generating CSS where rule types need to be explicitly handled, such as applying transformations or validations specific to each rule kind.",
      "description_length": 376,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Brace_block",
      "library": "css-parser",
      "description": "This module represents CSS brace blocks, which can be empty, contain a list of declarations, or encapsulate an entire stylesheet. It works with structured CSS data types like `Declaration_list` and `Stylesheet` to model nested CSS syntax. Concrete use cases include parsing and generating CSS rules where block structure determines scope, such as inside media queries or keyframe animations.",
      "description_length": 391,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Types.Style_rule",
      "library": "css-parser",
      "description": "Represents CSS style rules with a prelude and block structure, including source location information. Provides structured access to CSS rule components like selectors and declaration lists. Enables parsing, manipulation, and source tracking of CSS rules in a compiler or linter context.",
      "description_length": 286,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Types.At_rule",
      "library": "css-parser",
      "description": "This module defines the structure of CSS at-rules, including the name, prelude, and block content. It provides operations to construct and manipulate at-rules with associated source locations. Use cases include parsing and generating CSS rules such as `@media`, `@keyframes`, and `@import` with precise location tracking.",
      "description_length": 321,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Types.Stylesheet",
      "library": "css-parser",
      "description": "Represents a list of CSS rules with location information for source tracking. It provides operations to construct, manipulate, and traverse CSS stylesheets, such as appending rules, mapping over rule lists, and extracting source locations. This structure is used directly by the OCaml CSS parser and printer to model valid CSS documents for type-safe stylesheet generation and transformation.",
      "description_length": 392,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Component_value",
      "library": "css-parser",
      "description": "This module defines a variant type `t` representing different CSS component values such as identifiers, strings, numbers, dimensions, and functional expressions. It includes constructors for structured values like parenthesized and bracketed blocks, operators, delimiters, and URI references. This module is used to model low-level CSS syntax elements during parsing and transformation tasks.",
      "description_length": 392,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types.Declaration",
      "library": "css-parser",
      "description": "This module defines a CSS declaration with fields for the property name, value components, an important flag, and source location. It works with structured CSS data, including located values and component values. Concrete use cases include parsing and manipulating individual CSS property declarations with precise source tracking.",
      "description_length": 331,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css.Menhir_parser",
      "library": "css-parser",
      "description": "Parses CSS stylesheets and declaration lists from token streams generated by a lexer. It handles low-level CSS syntax elements like identifiers, numbers, operators, and structural tokens (braces, parentheses, semicolons). Useful for building CSS processors that need to analyze or transform stylesheets and individual declaration blocks.",
      "description_length": 337,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Lex_buffer",
      "library": "css-parser",
      "description": "This module provides a lexing buffer that tracks source code positions and locations for parsing CSS input. It supports reading characters, managing lexing states, and generating precise source locations used during parsing. It is used to implement accurate error reporting and source mapping when parsing CSS files or strings.",
      "description_length": 327,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Parser",
      "library": "css-parser",
      "description": "Parses CSS stylesheets and declaration lists from strings into structured representations. Works with string inputs and produces typed ASTs for stylesheets and declaration blocks. Used to convert raw CSS text into manipulable data structures for analysis or transformation tools.",
      "description_length": 279,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Types",
      "library": "css-parser",
      "description": "This module defines core data types and structures for representing CSS syntax elements, including dimensions, component values, declarations, rules, and stylesheets. It provides precise modeling of CSS constructs like at-rules, style rules, and declaration lists with source location tracking. Concrete use cases include parsing, transforming, and generating CSS in a type-safe way for tools like linters, compilers, or CSS manipulation libraries.",
      "description_length": 448,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css.Lexer",
      "library": "css-parser",
      "description": "This module provides low-level lexical analysis for CSS syntax by defining character classification tables and state transition functions to tokenize Unicode input streams. It operates on `Uchar.t` sequences using precompiled patterns for CSS-specific tokens like identifiers, numbers, and operators, while handling whitespace and comments. The generated tables and partitions enable efficient token recognition and state transitions, supporting integration with parser combinators like Menhir for structured CSS processing.",
      "description_length": 524,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css",
      "library": "css-parser",
      "description": "This module processes CSS input by providing lexing buffers, lexical analysis, and parsing capabilities. It handles Unicode character streams, tokenizes CSS syntax elements, and constructs structured representations of stylesheets and declarations. Concrete use cases include building CSS parsers, implementing linters, and creating transformation tools that require precise source location tracking and type-safe manipulation of CSS constructs.",
      "description_length": 445,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 524,
    "min_description_length": 279,
    "avg_description_length": 368.57142857142856,
    "embedding_file_size_mb": 0.20329570770263672
  }
}