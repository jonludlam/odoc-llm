{
  "package": "sihl-web",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-06-18T16:34:41.462876",
  "modules": [
    {
      "module_path": "Sihl_web.Authentication.Logs",
      "description": "Provides logging operations at different severity levels, including error, warning, info, and debug, with support for formatted messages and error handling. Works with log levels, formatted strings, and result types to capture and process errors. Used to inject custom error handling around operations that return results, and to generate structured log entries with contextual information.",
      "description_length": 390,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Http.Logs",
      "description": "Provides logging operations for different severity levels, including error, warning, info, and debug, with support for formatted messages and error handling. Works with log levels, formatted strings, and result types to capture and process errors. Used to instrument applications with structured logging and handle failures gracefully by converting error results into controlled outputs.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Authentication",
      "description": "Logs messages at various severity levels with formatted output and error handling, supporting structured entries and custom error injection. It manages log levels, processes result types, and includes contextual data in logs. Operations include logging errors, warnings, info, and debug messages with dynamic formatting. Example tasks include capturing operation failures in a structured format or adding context to debug logs for troubleshooting.",
      "description_length": 447,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Authorization",
      "description": "Provides middleware for enforcing user and admin authentication by redirecting to a specified login path. Operates on middleware structures and uses functions to dynamically determine login URLs. Used to secure routes by requiring authenticated access with role-based restrictions.",
      "description_length": 281,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Bearer_token",
      "description": "Extracts a bearer token from an HTTP request, returning it as a string or option. Modifies requests by setting a bearer token in the headers. Acts as a middleware component for handling authentication in web requests.",
      "description_length": 217,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Csrf",
      "description": "Provides functions to extract CSRF tokens from HTTP requests, perform XOR operations on character lists, and decrypt ciphers using a salt. Works with request objects, character lists, and optional keys. Used to enforce CSRF protection in web applications by validating tokens and securing data transmission.",
      "description_length": 307,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Error",
      "description": "Handles HTTP request processing by providing middleware for error logging and JSON response formatting. Operates with request and response objects within the Rock framework. Used to inject error tracking into web workflows and ensure consistent error serialization in API responses.",
      "description_length": 282,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Flash",
      "description": "Retrieves and sets flash messages, notices, and custom data in HTTP requests and responses using session-based storage. Operates on request and response objects from the Rock framework, storing and fetching string-based messages. Used to pass temporary status updates or user-specific data between HTTP requests in web applications.",
      "description_length": 332,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Form",
      "description": "Processes HTTP request bodies by extracting and manipulating form data. Operates on a list of key-value pairs where each key maps to a list of values. Used to retrieve specific form fields, extract all fields, or process incoming form data within a request pipeline.",
      "description_length": 266,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Http",
      "description": "Logs messages at various severity levels using formatted strings and result types, enabling structured error tracking and controlled failure handling. Supports level-based filtering and error conversion to ensure reliable application monitoring. Can record debug details, surface warnings, and report critical errors with contextual information. Examples include logging HTTP request failures, tracking user actions with info messages, and capturing exceptions in a consistent format.",
      "description_length": 484,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Id",
      "description": "Provides functions to extract and set identifier values from HTTP requests, working with `Rock.Request.t` and string data. Includes a method to retrieve an identifier as an option and a middleware component to integrate identification logic into request handling pipelines. Used to manage user or session identifiers within web application workflows.",
      "description_length": 350,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Json",
      "description": "Extracts and modifies JSON data within HTTP requests, supporting both guaranteed and optional access to nested fields. Operates on `Rock.Request.t` and `Yojson.Safe.t` to parse and inject JSON content. Used to retrieve user input from request bodies and dynamically update request state during processing.",
      "description_length": 305,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Session",
      "description": "Provides functions to extract and modify session data from HTTP requests, and to manage session cookies in responses. Works with request and response objects, as well as session identifiers and cookies. Used to retrieve session information, attach sessions to requests, and set cookies for session management in web applications.",
      "description_length": 329,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Static",
      "description": "Provides a middleware function that returns a static file serving handler. Works with HTTP request and response types from the Rock framework. Used to serve static assets like HTML, CSS, and JavaScript files during HTTP requests.",
      "description_length": 229,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.User",
      "description": "Provides functions to retrieve user data from a request, including a safe option version, and to handle user logout by modifying a response. Works with request and response objects, user records, and session or token-based authentication structures. Used to extract user information in middleware, manage session expiration, and validate authentication tokens during request processing.",
      "description_length": 386,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "sihl-web",
      "description": "Provides functions for routing HTTP requests, parsing query parameters, and generating JSON responses. Works with request objects, URL paths, and associative lists for parameter extraction. Handles form submissions and API endpoint implementations with minimal boilerplate.",
      "description_length": 273,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web",
      "description": "Provides logging, authentication, session management, and request processing capabilities for web applications. It includes structured logging with severity levels, middleware for authentication and CSRF protection, token extraction, JSON and form data handling, and session and flash message management. Functions support error tracking, user identification, and static file serving, enabling robust web request handling and secure application workflows. Examples include logging HTTP errors, securing routes with authentication, validating CSRF tokens, and managing user sessions.",
      "description_length": 582,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 217,
    "avg_description_length": 343.94117647058823,
    "embedding_file_size_mb": 0.06221580505371094
  }
}