{
  "package": "sihl-web",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:07:34.576578",
  "modules": [
    {
      "module_path": "Sihl_web.Authentication",
      "library": "sihl-web",
      "description": "This module handles user authentication in web applications using email and password credentials. It provides functions to log in users, manage session and token authentication via middleware, and handle errors in both site and JSON contexts. The module works with `credentials` records containing email and password strings, and integrates with Opium for handling requests and responses.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Authorization",
      "library": "sihl-web",
      "description": "This module provides middleware functions to enforce user and admin authentication in web applications. It works with the `Rock.Middleware.t` type to protect routes by redirecting unauthenticated or unauthorized users to a login page. Concrete use cases include restricting access to admin dashboards or user-specific resources based on session data.",
      "description_length": 350,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Csrf",
      "library": "sihl-web",
      "description": "This module handles CSRF token validation and cryptographic operations for web requests. It extracts tokens from requests, performs XOR decryption, and validates tokens using a middleware that checks for valid CSRF protection. It works with `Rock.Request.t` and `char list` types, focusing on secure form submissions and state-changing HTTP requests.",
      "description_length": 350,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Id",
      "library": "sihl-web",
      "description": "This module handles request-specific identifier extraction and injection in HTTP requests. It provides functions to retrieve, optionally retrieve, and set identifiers within a request context. Concrete use cases include managing session IDs, request tracing, or user authentication tokens across middleware and handlers.",
      "description_length": 320,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.User",
      "library": "sihl-web",
      "description": "This module handles user authentication and session management in web applications. It provides functions to retrieve the current user from a request, log out a user, and apply middleware for session and token-based authentication. Use cases include securing routes by requiring authenticated users and managing user sessions across requests.",
      "description_length": 342,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Json",
      "library": "sihl-web",
      "description": "This module handles JSON data extraction and injection in HTTP requests. It provides direct access to JSON payloads through `find` and `find_opt`, and allows setting JSON content with `set`. The middleware automatically parses incoming JSON bodies into request data for further processing.",
      "description_length": 289,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Session",
      "library": "sihl-web",
      "description": "This module handles session management by extracting, setting, and persisting sessions in HTTP requests and responses. It works with `Rock.Request.t` and `Rock.Response.t` to manage session data through cookies, using `Sihl_contract.Session.t` for session state. Concrete use cases include authenticating users by retrieving session data from requests, setting new sessions after login, and adding signed session cookies to responses.",
      "description_length": 434,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Static",
      "library": "sihl-web",
      "description": "Creates a Rock middleware that serves static files from a specified directory. It maps incoming HTTP requests to static assets and handles file not found errors with a fallback. Useful for serving frontend resources like JavaScript, CSS, and images in web applications.",
      "description_length": 269,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Http",
      "library": "sihl-web",
      "description": "This module provides operations for defining HTTP routes and middleware pipelines, including handlers for specific methods (e.g., GET, POST), composing middleware stacks, and converting routes into Opium-compatible servers. It works with HTTP methods, route paths, middleware functions, and router configurations to enable modular web application development using functional routing patterns. Additionally, it supports server lifecycle management tasks like starting, stopping, and registering routers, making it suitable for deploying HTTP services in containerized environments or integrating with orchestration systems.",
      "description_length": 623,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Bearer_token",
      "library": "sihl-web",
      "description": "This module handles extraction and injection of bearer tokens in HTTP requests. It provides functions to retrieve a token from a request, optionally retrieve it, and attach a token to a request. Use it to implement authentication flows where tokens are passed in authorization headers.",
      "description_length": 285,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web.Error",
      "library": "sihl-web",
      "description": "Handles error responses in web applications by providing middleware for both HTML and JSON request types. The `site_middleware` serves error pages in HTML format, while `json_middleware` returns structured JSON error responses. These are used to ensure consistent error handling across different content types in HTTP routes.",
      "description_length": 325,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Form",
      "library": "sihl-web",
      "description": "Handles form data extraction and manipulation from HTTP requests. It provides functions to retrieve form fields, consume specific values, and process request bodies in a structured format. This module is used to parse and access form inputs in web applications, such as handling user submissions or API payloads.",
      "description_length": 312,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_web.Flash",
      "library": "sihl-web",
      "description": "This module handles flash messages in web requests and responses, providing functions to set and retrieve alert, notice, and custom messages. It operates on `Rock.Request.t` and `Rock.Response.t` types, allowing messages to be stored in the response and retrieved from the request. Concrete use cases include displaying temporary user notifications after form submissions or redirects.",
      "description_length": 385,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_web",
      "library": "sihl-web",
      "description": "This module provides a comprehensive suite of tools for building secure, stateful web applications with OCaml. It centers around handling authentication, session management, CSRF protection, and request/response manipulation using types like `Rock.Request.t`, `Rock.Response.t`, and session and token structures. Developers can secure routes with authentication middleware, manage user sessions, validate form submissions, serve static assets, and handle errors consistently across HTML and JSON contexts. Specific capabilities include logging in users, protecting admin routes, validating CSRF tokens, parsing JSON and form data, and setting flash messages for user feedback.",
      "description_length": 676,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 676,
    "min_description_length": 269,
    "avg_description_length": 382.0,
    "embedding_file_size_mb": 0.05132007598876953
  }
}