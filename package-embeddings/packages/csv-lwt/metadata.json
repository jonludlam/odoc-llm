{
  "package": "csv-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:30.540023",
  "modules": [
    {
      "module_path": "Csv_lwt.Row",
      "description": "Provides functions to access and transform a row's data by index or header, and to associate columns with their headers. Works with a custom row type that stores string values and optional headers. Used to process CSV rows by extracting specific columns, mapping headers to values, or converting rows to structured formats like lists or association lists.",
      "description_length": 355,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Csv_lwt.Rows",
      "description": "Extracts and processes rows from CSV data streams, supporting header detection, custom separators, and row-by-row iteration. Operates on `in_channel` and `Row.t` structures, enabling asynchronous processing of structured data. Used for loading and transforming CSV content, applying custom parsing rules, and handling large datasets efficiently.",
      "description_length": 345,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "csv-lwt",
      "description": "Reads and writes CSV files with support for Excel extensions, handling quoted fields and embedded commas. Processes data as lists of strings, preserving row and column structure. Enables data import/export between spreadsheets and OCaml applications.",
      "description_length": 250,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Csv_lwt",
      "description": "provides asynchronous CSV processing with row-based data manipulation and stream handling. it supports accessing row data via indices or headers, transforming rows into structured formats, and processing large datasets through iterative row extraction. functions operate on `in_channel` and `Row.t`, enabling header detection, custom separators, and asynchronous data flow. examples include extracting specific columns, mapping headers to values, and converting rows to association lists or lists.",
      "description_length": 497,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 497,
    "min_description_length": 250,
    "avg_description_length": 361.75,
    "embedding_file_size_mb": 0.014934539794921875
  }
}