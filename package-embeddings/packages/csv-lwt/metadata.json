{
  "package": "csv-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:38.456140",
  "modules": [
    {
      "module_path": "Csv_lwt.Rows",
      "library": "csv-lwt",
      "description": "This module processes CSV data row by row using Lwt for asynchronous I/O. It supports reading from input channels, handling headers, and applying functions to rows through iteration, folding, and mapping operations. Concrete use cases include parsing large CSV files asynchronously, transforming row data incrementally, and aggregating values across rows without loading the entire file into memory.",
      "description_length": 399,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Csv_lwt.Row",
      "library": "csv-lwt",
      "description": "This module represents a single row of CSV data with associated headers, providing direct access to column values by index or header name. It supports operations to retrieve specific fields, convert the row to list or associative list formats, and update the header set dynamically. Use cases include processing structured CSV records, mapping header-based data, and handling rows with variable column counts.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Csv_lwt",
      "library": "csv-lwt",
      "description": "This module provides asynchronous input and output operations for handling CSV data using Lwt, supporting configurable separators, escaping, and header handling. It enables reading from and writing to CSV files via Lwt_io channels, with row-by-row processing through iteration, folding, and mapping functions, making it suitable for parsing and transforming large datasets incrementally. The row module gives structured access to individual CSV rows by index or header name, allowing field retrieval, conversion to list formats, and dynamic header updates. Use cases include asynchronously loading and aggregating CSV data, mapping header-based records, and processing files without loading them entirely into memory.",
      "description_length": 717,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 399,
    "avg_description_length": 508.3333333333333,
    "embedding_file_size_mb": 0.011311531066894531
  }
}