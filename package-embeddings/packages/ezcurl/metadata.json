{
  "package": "ezcurl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:49.918808",
  "modules": [
    {
      "module_path": "Ezcurl",
      "library": "ezcurl",
      "description": "This module implements HTTP client operations for sending requests and handling responses, supporting methods like GET, POST, PUT, and DELETE with configurable options. It works with URLs, HTTP headers, request bodies, and provides detailed response data including status codes, headers, body content, and metadata like response time. Concrete use cases include interacting with REST APIs, downloading or uploading data, and handling redirects or authentication challenges programmatically.",
      "description_length": 490,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcurl_core.S",
      "library": "ezcurl.core",
      "description": "This module implements HTTP client operations for making generalized and specialized cURL requests. It supports data types like `Ezcurl_core.t`, `Ezcurl_core.Config.t`, and `Curl.curlHTTPPost`, handling request methods such as GET, PUT, POST with customizable headers, content, and ranges. Concrete use cases include fetching remote resources, uploading data with retries, and submitting form-based or custom HTTP POST requests programmatically.",
      "description_length": 445,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcurl_core.Config",
      "library": "ezcurl.core",
      "description": "This module defines and manipulates client configuration settings for HTTP requests, including options like authentication method, maximum redirects, and verbosity. It works with a concrete configuration type `t`, supporting operations to set credentials, redirect behavior, and output formatting. Use cases include customizing request behavior for REST API clients or automated HTTP interactions requiring specific transport settings.",
      "description_length": 435,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcurl_core.IO",
      "library": "ezcurl.core",
      "description": "This module defines an IO monad for handling asynchronous operations with the Curl library. It provides monadic composition through `bind` (`>>=`) and `map` (`>|=`), exception handling via `fail`, and a `perform` function to execute HTTP requests. It is used to sequence network operations while managing side effects like I/O and errors in a type-safe manner.",
      "description_length": 360,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcurl_core.Make",
      "library": "ezcurl.core",
      "description": "This module implements HTTP client operations for making generalized and method-specific network requests. It supports data types like `Ezcurl_core.response`, `Curl.curlCode`, and `Curl.curlHTTPPost`, and works with values such as URLs, HTTP methods, headers, and content payloads. Concrete use cases include sending GET, PUT, POST requests, handling retries, and managing custom client configurations or content streaming.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcurl_core",
      "library": "ezcurl.core",
      "description": "This module implements HTTP client operations using cURL, enabling creation and management of clients, sending requests with methods like GET, POST, and DELETE, and retrieving structured responses with status codes, headers, body content, and metadata such as response time and redirect count. It provides core types like `response`, `response_info`, and `meth`, and supports customizable configurations for authentication, redirects, and verbosity through its submodules, allowing use cases such as authenticated API calls, form submissions, and detailed request logging. The module includes an IO monad for sequencing asynchronous operations with error handling, and supports advanced interactions like content streaming, retries, and custom HTTP POST requests using types like `Curl.curlHTTPPost` and `Curl.curlCode`. Together, the module and its submodules enable precise control over HTTP communication, from basic requests to complex, configured client behaviors.",
      "description_length": 969,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 969,
    "min_description_length": 360,
    "avg_description_length": 520.3333333333334,
    "embedding_file_size_mb": 0.02221965789794922
  }
}