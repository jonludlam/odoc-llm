{
  "package": "ezsqlite",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:57:03.136288",
  "modules": [
    {
      "module_path": "Ezsqlite.Backup",
      "library": "ezsqlite",
      "description": "Handles SQLite database backups by copying pages from a source database to a target. Initializes a backup process between two databases and allows incremental copying of pages. Use for implementing live database backups or migrating data between SQLite instances.",
      "description_length": 263,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezsqlite.Infix",
      "library": "ezsqlite",
      "description": "This module provides infix operators for building and executing SQLite queries in a concise, pipeline-friendly style. It works with the `Ezsqlite.t` type representing a database connection and `Ezsqlite.stmt` for prepared statements, along with values and result handlers. Use it to chain queries, bind parameters, and extract results directly within a pipeline, such as executing a parameterized query and mapping rows to values in a single expression.",
      "description_length": 453,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezsqlite.Value",
      "library": "ezsqlite",
      "description": "This module defines a variant type for SQLite values, including support for null, blobs, text, doubles, and integers. It provides functions to check if a value is null, convert values to strings, and extract specific types like integers, floats, bytes, and booleans. Use cases include handling query results and parameter binding in SQLite operations.",
      "description_length": 351,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezsqlite.Blob",
      "library": "ezsqlite",
      "description": "This module handles binary large objects (BLOBs) in SQLite databases, providing direct access for reading and writing raw binary data. It works with the `blob` type, which represents an open BLOB handle, and supports operations like reading into a buffer, writing from a buffer, and repositioning within the BLOB. Concrete use cases include storing and retrieving binary data such as images, files, or serialized structures directly within SQLite tables.",
      "description_length": 454,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezsqlite",
      "library": "ezsqlite",
      "description": "This module enables SQLite database interactions through loading, SQL statement execution, parameter binding, and typed result retrieval, leveraging `Ezsqlite.t` for connections and `stmt` for prepared statements. It integrates with `Value` for SQLite type handling, `Blob` for binary data operations, and `Backup` for database copying, while pipeline-friendly infix operators simplify functional-style query chaining. Use cases include iterating over query results, extracting metadata like column details, and managing backups or large objects with type-safe conversions.",
      "description_length": 573,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 573,
    "min_description_length": 263,
    "avg_description_length": 418.8,
    "embedding_file_size_mb": 0.07281303405761719
  }
}