{
  "package": "ezsqlite",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:22.601122",
  "modules": [
    {
      "module_path": "Ezsqlite.Value",
      "library": "ezsqlite",
      "description": "This module defines a variant type for SQLite values, including `Null`, `Blob`, `Text`, `Double`, and `Integer`, along with corresponding conversion functions to extract values in specific types like `string`, `float`, `int`, and `int64`. It provides direct access to typed data extracted from SQLite rows, ensuring safe and explicit handling of SQL results. Use cases include retrieving and converting column values from SQLite queries into native OCaml types, particularly when processing query results row by row.",
      "description_length": 516,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezsqlite.Blob",
      "library": "ezsqlite",
      "description": "This module implements direct blob manipulation in SQLite databases, providing functions to open, read, write, and resize binary large objects. It works with the `blob` type representing a blob handle, along with byte buffers for data transfer. Concrete use cases include storing and retrieving binary data such as images or serialized structures directly within SQLite tables.",
      "description_length": 377,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezsqlite.Infix",
      "library": "ezsqlite",
      "description": "This module provides infix operators for composing and executing SQL queries in a fluent style. It works with the `Ezsqlite.t` type representing a database connection and `Ezsqlite.stmt` for prepared statements. Concrete use cases include chaining SQL commands, binding parameters, and mapping result rows to OCaml values directly within query pipelines.",
      "description_length": 354,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezsqlite.Backup",
      "library": "ezsqlite",
      "description": "This module manages SQLite database backups by initializing a backup operation from a source to a destination database. It provides functions to execute backup steps, check remaining pages, and retrieve the total page count. Use it to implement controlled, incremental database backups directly within an application.",
      "description_length": 317,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezsqlite",
      "library": "ezsqlite",
      "description": "This module provides a comprehensive interface for interacting with SQLite databases, combining direct SQL execution with robust data handling and advanced features. It supports core operations like querying, parameter binding, and result processing through a fluent API, using types like `t` for connections and `stmt` for statements, while its child modules enhance functionality with specialized tools for blob management, value conversion, and database backups. You can execute parameterized queries and map results to OCaml types, stream binary data to and from blob fields, or perform incremental backups between databases. Each submodule integrates seamlessly with the main API, enabling efficient and type-safe database workflows.",
      "description_length": 738,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 738,
    "min_description_length": 317,
    "avg_description_length": 460.4,
    "embedding_file_size_mb": 0.018602371215820312
  }
}