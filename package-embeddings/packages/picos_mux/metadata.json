{
  "package": "picos_mux",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:03:44.130579",
  "modules": [
    {
      "module_path": "Picos_mux_fifo",
      "library": "picos_mux.fifo",
      "description": "This module implements a FIFO scheduler for managing fibers in a single-threaded environment, prioritizing fibers woken by cancellation. It works directly with `Picos.Fiber.t` and supports running fiber-based programs with optional quotas and fatal exception handlers. Use it to execute and manage concurrent fiber workflows in test environments or lightweight single-threaded applications where strict parallelism is not required.",
      "description_length": 431,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_mux_random",
      "library": "picos_mux.random",
      "description": "This module implements a randomized, multi-threaded scheduler for the Picos fiber interface, where scheduling decisions are made by selecting ready fibers at random. It supports concurrent execution across multiple domains, with functions to configure contexts, launch runners on threads, and execute fibers using random interleaving to expose concurrency bugs. Concrete use cases include stress-testing Picos-based libraries for race conditions or incorrect scheduling assumptions by introducing non-deterministic execution order.",
      "description_length": 531,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_mux_multififo",
      "library": "picos_mux.multififo",
      "description": "This module implements a multi-threaded scheduler with per-thread queues for distributing fibers, supporting fiber migration between threads and prioritizing cancellation-woken fibers. It works with `Picos.Fiber.t` and provides functions to run fibers across multiple domains, including starting runners on threads and executing fiber-based programs with configurable context. Concrete use cases include testing fiber-based concurrency in Picos and running parallelizable OCaml 5 programs with controlled domain allocation.",
      "description_length": 523,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_mux_thread",
      "library": "picos_mux.thread",
      "description": "This module provides `run_fiber` and `run` functions to execute Picos fibers using a thread-based scheduler. It works directly with `Picos.Fiber.t` and supports running fiber programs with optional exception handling. Use this to test Picos-based libraries or run simple concurrent applications where fiber count is low and thread-per-fiber scheduling is acceptable.",
      "description_length": 366,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 366,
    "avg_description_length": 462.75,
    "embedding_file_size_mb": 0.058388710021972656
  }
}