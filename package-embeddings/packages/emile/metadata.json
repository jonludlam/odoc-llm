{
  "package": "emile",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:56:38.898994",
  "modules": [
    {
      "module_path": "Emile.List",
      "library": "emile",
      "description": "This module parses and serializes lists of email addresses from and to strings, handling formats that include commas, semicolons, and optional CRLF terminators. It operates directly on `Emile.t list` values, supporting both full string parsing and raw substring processing with byte-level control. Use cases include processing email headers like \"To\" or \"Cc\" fields in SMTP or MIME-compliant messages.",
      "description_length": 401,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile.Parser",
      "library": "emile",
      "description": "This module provides character validation and grammar-based parsing operations to dissect email addresses into standardized components like local parts, domains, and message IDs. It operates on strings and characters using Angstrom parsers to enforce RFC822/RFC5322 compliance, handling both modern and obsolete email syntaxes. Typical use cases include validating email formats, extracting structured data from mailboxes, or implementing RFC-conformant email processing pipelines.",
      "description_length": 481,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile",
      "library": "emile",
      "description": "This library provides operations for parsing, comparing, and formatting email address components, with support for RFC-compliant syntax and extended features like IP addresses and encoded words. It operates on structured representations of email elements such as local parts, domains, mailboxes, and groups, enabling precise manipulation and normalization. Typical use cases include validating email strings, comparing addresses with customizable case sensitivity, and converting structured data back to standardized string formats.",
      "description_length": 532,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile_cmdliner",
      "library": "emile.cmdliner",
      "description": "This module provides a function for formatting error messages with custom output handling and a command-line argument converter for parsing email addresses. It works with standard format strings and result types, along with mailbox data structures. It is used to validate and process email inputs directly from command-line arguments.",
      "description_length": 334,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 532,
    "min_description_length": 334,
    "avg_description_length": 437.0,
    "embedding_file_size_mb": 0.058363914489746094
  }
}