{
  "package": "emile",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:21.639992",
  "modules": [
    {
      "module_path": "Emile_cmdliner",
      "library": "emile.cmdliner",
      "description": "This module provides a function for formatting error messages with custom result types and a command-line argument converter for parsing email addresses. It works with `Cmdliner.Arg.conv` and `Emile.mailbox` types to handle input validation and conversion. Concrete use cases include validating email arguments in command-line interfaces and returning structured error messages.",
      "description_length": 378,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile.List",
      "library": "emile",
      "description": "This module parses and serializes lists of email addresses from and to strings, handling formats that include commas, semicolons, and optional named groups. It supports partial parsing of substrings with explicit control over input length and memory buffers, returning the number of bytes consumed. Use cases include processing email headers like \"To\" or \"Cc\" in MIME messages, where precise parsing and formatting of address lists is required.",
      "description_length": 444,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile.Parser",
      "library": "emile",
      "description": "This module offers character classification utilities and Angstrom-based parser combinators to validate and dissect email address components per RFC822, RFC2822, and RFC5322 specifications. It processes character and string inputs to identify structured elements like domains, local parts, mailbox structures, and obsolete syntax, including whitespace and quoted pair handling. It is suited for applications requiring precise email parsing, such as validation frameworks, legacy email migration tools, or protocol-compliant message processors.",
      "description_length": 543,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile",
      "library": "emile",
      "description": "This module parses and manipulates email addresses with structured types like `mailbox`, `domain`, and `local`, supporting case-sensitive and case-insensitive comparisons, normalization, and conversion between raw and parsed forms. It handles internationalized email formats and validates syntax according to RFC standards, enabling tasks like address normalization, equivalence checking, and structured serialization. The list submodule processes comma- and semicolon-separated email lists, supporting named groups and precise header parsing, while the parser submodule provides low-level validation and dissection of address components using Angstrom combinators. Use cases include parsing MIME headers, validating email inputs, and converting structured email data to and from string representations with fine-grained control over parsing and formatting.",
      "description_length": 857,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 857,
    "min_description_length": 378,
    "avg_description_length": 555.5,
    "embedding_file_size_mb": 0.014941215515136719
  }
}