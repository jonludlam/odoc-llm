{
  "package": "emile",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:27:37.478144",
  "modules": [
    {
      "module_path": "Emile.Parser",
      "description": "This module offers character-level validation and structured parsing of email components, such as local parts, domains, and message IDs, adhering to RFC-defined syntax elements like ctext, qtext, and atext. It processes ASCII-based strings and handles both standard and obsolete email formats, including domain literals and mailbox structures. Use cases include enforcing strict email syntax validation, parsing complex address formats like `angle-addr`, and ensuring compatibility with legacy email specifications.",
      "description_length": 515,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile.List",
      "description": "Parses strings into lists of email addresses or groups, handling CRLF termination and sub-string extraction. Works with strings and Bigstringaf.t for efficient parsing. Converts lists back to formatted strings for output.",
      "description_length": 221,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "emile",
      "description": "Parses email addresses according to RFC 5321, validating the domain part against specified rules. It processes strings and returns structured representations of local and domain components. Used to ensure email format compliance in applications handling user input or message routing.",
      "description_length": 284,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile",
      "description": "Processes email addresses and groups by validating and parsing components like local parts, domains, and message IDs using RFC-defined syntax. Handles ASCII strings and Bigstringaf.t, supporting extraction, conversion, and formatting of address lists. Enables validation of complex formats such as `angle-addr` and domain literals, while managing CRLF termination and sub-string parsing. Examples include checking email validity, splitting grouped addresses, and reconstructing formatted address lists.",
      "description_length": 502,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Emile_cmdliner",
      "description": "Handles error messaging with formatted strings and provides a command-line argument converter for Emile mailbox structures. Processes and validates mailbox input during command-line parsing. Used to ensure correct mailbox syntax in CLI tools interacting with email systems.",
      "description_length": 273,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 515,
    "min_description_length": 221,
    "avg_description_length": 359.0,
    "embedding_file_size_mb": 0.018609046936035156
  }
}