{
  "package": "httpcats",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:45.964223",
  "modules": [
    {
      "module_path": "Httpcats.Server",
      "library": "httpcats",
      "description": "This module implements an HTTP server that handles incoming requests using the Miou scheduler. It supports HTTP/1.1 and HTTP/2 protocols over TCP or TLS, with configurable backends and error handling. The server processes connections at a given socket address, invoking a handler for each request and allowing custom response generation through version-specific request descriptors.",
      "description_length": 382,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpcats.Client",
      "library": "httpcats",
      "description": "This module executes HTTP requests over a provided connection flow, handling protocol versions 1.1 and 2.0, with support for TLS and TCP transports. It processes requests with optional response body accumulation via a user-supplied function, returning a processed result or error. Use it to perform targeted HTTP interactions, such as fetching remote resources or querying APIs, while managing connection details through the Miou scheduler.",
      "description_length": 440,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpcats",
      "library": "httpcats",
      "description": "This module provides HTTP client and server functionality using the Miou scheduler, supporting both HTTP/1.1 and HTTP/2 protocols over TCP or TLS. It allows outgoing requests with custom headers, URIs, and body streams, handling redirects and TLS authentication, while the server module listens on a socket address and dispatches requests to user-defined handlers. The request module enables fine-grained control over HTTP interactions, letting users send requests over existing connections and process responses incrementally. Together, these components support use cases like building REST clients, serving HTTP APIs, and managing secure, asynchronous network communication.",
      "description_length": 676,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 676,
    "min_description_length": 382,
    "avg_description_length": 499.3333333333333,
    "embedding_file_size_mb": 0.011319160461425781
  }
}