{
  "package": "higher",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:54.205204",
  "modules": [
    {
      "module_path": "Higher.Newtype0",
      "library": "higher",
      "description": "This module defines a newtype wrapper for a type constructor with zero parameters. It provides injection and projection functions to convert between the original type and the newtype. Useful for creating distinct type identities to prevent accidental misuse of values with the same underlying representation.",
      "description_length": 308,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype4",
      "library": "higher",
      "description": "This module constructs a newtype for a type constructor with four parameters, providing injection and projection functions to wrap and unwrap values. It operates on higher-kinded types using a nested structure of `Higher.app` applied to four type parameters. Use this to define and manipulate complex type abstractions with precise control over type constructor application.",
      "description_length": 374,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype2",
      "library": "higher",
      "description": "This module provides injection and projection operations for nested higher-kinded types, specifically transforming between a base structure `s` and a wrapped form using `Higher.app`. It works with types involving two type parameters, supporting concrete use cases like embedding and extracting values within layered monadic or applicative structures. The operations enable precise manipulation of type-constructed values while preserving structural integrity.",
      "description_length": 459,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype1",
      "library": "higher",
      "description": "This module defines a newtype wrapper with injection and projection operations for a given type `s`. It provides `inj` to wrap values into a higher-kinded type and `prj` to extract them. Useful for creating type-safe abstractions over existing types, such as wrapping integers as identifiers or strings as formatted values.",
      "description_length": 323,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher.Newtype3",
      "library": "higher",
      "description": "This module provides injection and projection operations for a three-argument newtype structure. It works with nested applicative types built from the `Higher.app` constructor, wrapping and unwrapping values of type `s` into a triple-lifted form. Concrete use cases include handling higher-kinded data transformations and abstracting over multi-layered effectful computations.",
      "description_length": 376,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype5",
      "library": "higher",
      "description": "This module constructs a newtype for a type constructor with five parameters, providing injection and projection operations to wrap and unwrap values. It works with higher-kinded types using the `Higher.app` structure to handle parameter nesting. Use this to define and manipulate complex type abstractions with precise type control in domain-specific data transformations.",
      "description_length": 373,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype6",
      "library": "higher",
      "description": "This module defines a newtype wrapper with injection and projection functions for a six-argument type constructor. It operates on a nested structure of higher-kinded types, enabling precise type manipulation and conversion. Concrete use cases include encoding and working with deeply nested algebraic structures where each layer represents a distinct semantic or computational context.",
      "description_length": 385,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher",
      "library": "higher",
      "description": "This module enables the creation and manipulation of newtype wrappers for type constructors with varying arities, from zero to six parameters, ensuring type safety and abstraction. It provides injection and projection functions that allow wrapping and unwrapping values while preserving structural integrity, supporting operations on simple types as well as deeply nested higher-kinded structures. Submodules handle specific arities, such as wrapping integers as identifiers, embedding values in multi-layered monadic structures, or encoding complex domain-specific abstractions with multiple type parameters. These capabilities facilitate precise control over type application and transformation in both basic and advanced type-level programming scenarios.",
      "description_length": 757,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 308,
    "avg_description_length": 419.375,
    "embedding_file_size_mb": 0.029473304748535156
  }
}