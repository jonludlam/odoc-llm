{
  "package": "higher",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:02:29.377380",
  "modules": [
    {
      "module_path": "Higher.Newtype3",
      "library": "higher",
      "description": "This module provides injection and projection operations for a three-argument newtype structure. It works with nested higher-kinded applicative types built from the `Higher.app` constructor and a base type `s`. Use it to wrap and unwrap values in a three-layered applicative context while preserving type distinctions.",
      "description_length": 318,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype6",
      "library": "higher",
      "description": "This module defines a newtype wrapper with injection and projection functions for a six-argument type constructor. It provides `inj` to wrap values in a nested higher-kinded structure and `prj` to extract them, working directly with the type `t` and the parameterized type `s`. It is useful for handling deeply nested applicative structures in a type-safe way.",
      "description_length": 360,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype2",
      "library": "higher",
      "description": "This module provides injection and projection operations for nested higher-kinded types, specifically working with type constructors of two arguments. It supports transforming and unwrapping values wrapped in a higher-order structure `s` and a nested `Higher.app` type. Concrete use cases include handling layered effect systems and manipulating abstract syntax trees with multiple type parameters.",
      "description_length": 398,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher",
      "library": "higher",
      "description": "This module provides injection and projection operations for newtype wrappers of varying arity, enabling safe wrapping and unwrapping of values across different type layers. It works with concrete types like `s` and `t` in the case of `Newtype0`, and extends to higher-kinded type constructors with `Newtype1` through `Newtype6`, handling nested `Higher.app` structures. Use it to enforce type distinctions for wrapped values, such as modeling distinct string formats, numeric units, layered effects, or multi-parameter abstract syntax trees.",
      "description_length": 542,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 542,
    "min_description_length": 318,
    "avg_description_length": 404.5,
    "embedding_file_size_mb": 0.05835247039794922
  }
}