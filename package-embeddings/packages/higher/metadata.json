{
  "package": "higher",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:31:21.967019",
  "modules": [
    {
      "module_path": "Higher.Newtype0",
      "description": "Provides functions to create, unwrap, and compare values of a single-type wrapper. Operates on the `t` type, which encapsulates a single value of another type. Used to enforce type distinctions in contexts where nominal typing is required, such as distinguishing between different numeric domains.",
      "description_length": 297,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype1",
      "description": "Provides operations to wrap and unwrap values of type 'a t, along with mapping and binding functions that transform the contained value. Works with the algebraic data type 'a t, which encapsulates a single value of type 'a. Used to create type-safe wrappers for existing types, such as enforcing non-empty lists or validated inputs.",
      "description_length": 332,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher.Newtype2",
      "description": "Provides operations to wrap and unwrap values of type 'a into a newtype container, and to map over the wrapped value using a function from 'a to 'b. Works with the polymorphic variant type ('a, 'b) t to enforce type distinctions. Used to create distinct types for domain-specific values, such as converting a string into an identifier type while preserving the underlying data.",
      "description_length": 377,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher.Newtype3",
      "description": "Provides operations to construct, deconstruct, and transform values wrapped in a three-component tuple-like structure. Works with the polymorphic type ('a, 'b, 'c) t, enabling safe encapsulation of related but distinct values. Used to enforce type distinctions in domain models, such as separating validated and raw input values in a parser.",
      "description_length": 341,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype4",
      "description": "Provides operations to wrap and unwrap values of type 'a, 'b, 'c, 'd into a single constructor, along with mapping functions that apply transformations to each type parameter. Works with tuples of four distinct types, enabling safe type differentiation in heterogeneous data structures. Used to enforce type boundaries in parser combinators and state machine transitions.",
      "description_length": 371,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype5",
      "description": "Provides operations to construct, deconstruct, and transform values wrapped in a 5-tuple-based newtype. Works with polymorphic types ('a, 'b, 'c, 'd, 'e) t to enforce type distinctions. Enables safe conversions between related types in domain-specific contexts, such as converting between distinct identifier representations.",
      "description_length": 325,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher.Newtype6",
      "description": "Provides operations to construct, deconstruct, and transform values wrapped in a 6-tuple newtype, including mapping over each component with individual functions. Works with the polymorphic variant type ('a, 'b, 'c, 'd, 'e, 'f) t, enabling type-safe encapsulation of heterogeneous data. Used to enforce type distinctions in domain models where multiple related types must remain separate.",
      "description_length": 388,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "higher",
      "description": "Provides type constructors and polymorphic functions for working with functors and higher-kinded types, enabling abstraction over type constructors like list, option, and result. Operates on type variables bound to functors, allowing uniform manipulation of wrapped values. Enables implementation of generic traversals and transformations across different container types.",
      "description_length": 372,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher",
      "description": "Provides injection and projection functions for a five-parameter newtype, enabling conversion between a structured tuple type and an embedded type representation. Operates on polymorphic types with five parameters and a nested application structure. Used to encode and decode complex type hierarchies in a type-safe manner.",
      "description_length": 323,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 388,
    "min_description_length": 297,
    "avg_description_length": 347.3333333333333,
    "embedding_file_size_mb": 0.03310394287109375
  }
}