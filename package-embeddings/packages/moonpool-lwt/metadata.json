{
  "package": "moonpool-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:03:20.450861",
  "modules": [
    {
      "module_path": "Moonpool_lwt.TCP_client",
      "library": "moonpool-lwt",
      "description": "This module provides functions to establish TCP connections and perform non-blocking I/O operations using Lwt. It works with Unix socket addresses and file descriptors, along with Lwt I/O channels for asynchronous communication. Concrete use cases include connecting to a remote server and exchanging data asynchronously using Lwt's event loop.",
      "description_length": 344,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.IO_in",
      "library": "moonpool-lwt",
      "description": "This module implements input channels for reading byte sequences in the Lwt event loop, supporting operations like reading into buffers, concatenating streams, and copying data to output channels. It works with byte strings, input functions, and Unix file descriptors, providing direct access to asynchronous input sources such as sockets or files. Concrete use cases include streaming data from network connections, reading user input asynchronously, and processing large files in chunks without blocking the event loop.",
      "description_length": 521,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.TCP_server",
      "library": "moonpool-lwt",
      "description": "This module implements TCP servers that accept connections and handle clients using Moonpool fibers. It provides functions to start a server with a custom handler for incoming connections, supporting both Lwt I/O channels and direct IO operations. The module is used to build concurrent network services where each client connection is processed independently on a Moonpool runner.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.IO_out",
      "library": "moonpool-lwt",
      "description": "This module implements output channels for streaming data to various destinations such as file descriptors, buffers, or custom output functions. It supports writing characters, strings, integers, and sequences of lines, with options to control flushing and closing behavior. Concrete use cases include logging to files, sending data over network sockets, or capturing output in memory buffers for testing.",
      "description_length": 405,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.IO",
      "library": "moonpool-lwt",
      "description": "This module implements non-blocking IO operations on file descriptors using the Lwt event loop, including reading, writing, and sleeping. It works directly with `Unix.file_descr` and `bytes` to handle low-level IO actions, suspending fibers until resources are ready. Concrete use cases include implementing network clients/servers that require precise control over IO scheduling and timeouts.",
      "description_length": 393,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Moonpool_lwt",
      "library": "moonpool-lwt",
      "description": "This module bridges Moonpool and Lwt by converting between their future types, enabling bidirectional interoperability. It provides functions to run Lwt operations within Moonpool runners, await Lwt futures from Moonpool tasks, and handle low-level IO with `Unix.file_descr` and `bytes`. Concrete use cases include building TCP servers that handle each connection with a Moonpool fiber, streaming data asynchronously over sockets, and integrating Lwt-based libraries into Moonpool-based concurrent applications.",
      "description_length": 511,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 6,
    "filtered_empty_modules": 2,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 344,
    "avg_description_length": 425.8333333333333,
    "embedding_file_size_mb": 0.08734607696533203
  }
}