{
  "package": "moonpool-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:00.261474",
  "modules": [
    {
      "module_path": "Moonpool_lwt.IO",
      "library": "moonpool-lwt",
      "description": "This module implements non-blocking IO operations on file descriptors using the Lwt event loop, including reading, writing, and sleeping. It works directly with Unix.file_descr and bytes for IO transfers, and uses Lwt threads for asynchronous suspension and resumption. Concrete use cases include implementing network clients/servers that require precise control over IO readiness and timing, such as handling partial reads/writes or implementing custom protocols over sockets.",
      "description_length": 477,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Moonpool_lwt.IO_in",
      "library": "moonpool-lwt",
      "description": "This module implements input channels for reading byte sequences in an Lwt event loop. It supports operations like reading into buffers, concatenating input sources, and copying data to output channels. Use cases include handling network streams, file input, or any byte-oriented data source within Lwt-driven applications.",
      "description_length": 323,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.TCP_client",
      "library": "moonpool-lwt",
      "description": "This module provides functions to establish TCP connections and perform non-blocking I/O operations using Lwt. It works with Unix socket addresses and file descriptors, along with Lwt I/O channels for asynchronous communication. Concrete use cases include connecting to a remote server and sending or receiving data asynchronously without blocking the Lwt event loop.",
      "description_length": 367,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Moonpool_lwt.IO_out",
      "library": "moonpool-lwt",
      "description": "This module implements output channels for asynchronous I/O operations using Lwt, supporting writing characters, strings, integers, and lines to various backends such as Unix file descriptors, buffers, or custom output functions. It provides concrete functionality for duplicating output across multiple channels, closing and flushing resources, and writing from sequences. Use cases include logging to multiple destinations, streaming data to network sockets, and capturing output in memory buffers.",
      "description_length": 500,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Moonpool_lwt.TCP_server",
      "library": "moonpool-lwt",
      "description": "This module implements TCP servers that accept connections and handle clients using Moonpool fibers. It provides functions to start a server with a custom handler that processes incoming connections concurrently, using either Lwt I/O channels or direct IO operations. The server can be explicitly shut down, and it supports configuration options like backlog size and socket closure behavior.",
      "description_length": 392,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Moonpool_lwt",
      "library": "moonpool-lwt",
      "description": "This module integrates Moonpool's parallelism with Lwt's event loop, enabling seamless cooperation between the two runtimes by converting futures and providing safe await mechanisms. It allows Lwt-based I/O operations to be embedded within Moonpool tasks, facilitating use cases like handling HTTP requests in a parallel service while performing non-blocking socket I/O with Lwt. The module supports direct manipulation of file descriptors, input/output channels, and TCP connections through submodules, each specializing in specific I/O aspects such as reading from sockets, writing to multiple outputs, or managing concurrent TCP servers with custom handlers. Key data types include Lwt threads, file descriptors, and I/O channels, with operations for sleeping, reading, writing, connecting, and serving over TCP.",
      "description_length": 815,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 6,
    "filtered_empty_modules": 2,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 815,
    "min_description_length": 323,
    "avg_description_length": 479.0,
    "embedding_file_size_mb": 0.022223472595214844
  }
}