{
  "package": "mindstorm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:07:56.849962",
  "modules": [
    {
      "module_path": "Mindstorm.NXT.Sensor.Ultrasonic",
      "library": "mindstorm",
      "description": "This module provides functions to initialize, configure, and read data from an ultrasonic sensor connected to a Lego Mindstorm NXT brick. It supports operations to set the sensor mode (e.g., off, continuous measurement) and retrieve distance measurements or internal configuration values. Use cases include obstacle detection, distance tracking, and sensor calibration in robotics applications.",
      "description_length": 394,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Program",
      "library": "mindstorm",
      "description": "Starts, stops, and queries the status of programs on a connected Lego Mindstorm brick. Operates on a connection object to load and control .rxe program files by name. Useful for remotely launching or terminating specific programs during robotics automation tasks.",
      "description_length": 263,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.Find",
      "library": "mindstorm",
      "description": "This module lists files on a connected Lego Mindstorm brick that match a specified pattern, supporting wildcard-based filtering. It provides operations to iterate through matches, retrieve file names and sizes, and apply functions across all matches. Use cases include searching for log files, firmware updates, or specific data files stored on the brick.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sound",
      "library": "mindstorm",
      "description": "This module plays sound files and tones on a connected Lego Mindstorm brick. It supports playing `.rso` sound files, stopping playback, and generating tones with specified frequency and duration. Concrete use cases include signaling program start/end with sounds, providing audio feedback during sensor events, or generating beeps for user interaction.",
      "description_length": 352,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Message",
      "library": "mindstorm",
      "description": "This module sends and receives messages to and from specific mailboxes on a connected Lego NXT brick, using Bluetooth or USB communication. It operates on mailbox and remote types, each representing a distinct message queue, and provides direct access to read and write string-based messages. Use this module to exchange data between an OCaml program and running NXT programs, such as sending commands or retrieving sensor data.",
      "description_length": 428,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.USB",
      "library": "mindstorm",
      "description": "Handles USB communication with Lego Mindstorm NXT bricks on Linux. Provides `bricks` to list connected devices and `connect` to establish a USB connection to a specific brick. Used to directly control NXT hardware via OCaml programs.",
      "description_length": 233,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Motor",
      "library": "mindstorm",
      "description": "This module controls Lego Mindstorm NXT motor ports with precise operations to set and get motor states, including speed, braking, and rotation limits. It works with ports A, B, C, or all three, and manages motor behavior through parameters like regulation mode, turn ratio, and run state. Concrete use cases include setting a motor to rotate a specific number of degrees at a controlled speed, braking to maintain precision, or synchronizing multiple motors for coordinated movement.",
      "description_length": 484,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sensor",
      "library": "mindstorm",
      "description": "This module configures and reads data from sensors connected to the NXT brick's input ports, supporting sensor types like light, temperature, sound, and color, as well as low-speed I2C devices. It provides functions to set sensor type and mode, retrieve raw and processed sensor values, and handle color detection or I2C communication for sensors like the ultrasonic detector. The ultrasonic sensor submodule allows initializing, configuring, and retrieving distance measurements or internal configuration values, supporting operations like obstacle detection, distance tracking, and sensor calibration. Concrete use cases include reading distance from an ultrasonic sensor, detecting surface color, or measuring light intensity with a calibrated sensor.",
      "description_length": 754,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.EV3.Sound",
      "library": "mindstorm",
      "description": "Plays a sound with specified volume, frequency, and duration on a connected Lego EV3 brick. Works with an established connection to control sound output directly. Useful for signaling events or providing auditory feedback during robot operation.",
      "description_length": 245,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT",
      "library": "mindstorm",
      "description": "This module enables communication with Lego Mindstorm NXT bricks over USB or Bluetooth, offering direct control of brick settings, file systems, and hardware components like motors and sensors. It supports operations such as querying battery levels, managing flash memory, and resetting Bluetooth connections, while submodules handle program execution, file searches, sound playback, inter-device messaging, USB device discovery, motor control, and sensor input. You can use it to launch and stop programs remotely, play tones based on sensor input, send messages between devices, or precisely control motor rotation and sensor readings for tasks like navigation or environmental sensing. Specific capabilities include loading `.rxe` programs, filtering files by pattern, reading ultrasonic sensor data, and coordinating motor movements across multiple ports.",
      "description_length": 859,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_connect.USB",
      "library": "mindstorm",
      "description": "This module provides operations to discover and connect to USB devices, specifically returning a list of available devices and establishing a connection with status checks. It works with USB device structures and handles communication setup for connected hardware. Concrete use cases include detecting plugged-in devices and initializing direct USB communication with specific hardware.",
      "description_length": 386,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.EV3",
      "library": "mindstorm",
      "description": "This module manages communication with Lego Mindstorm EV3 bricks over USB or Bluetooth, allowing connections to be opened and closed using specific addresses. It supports sending commands and retrieving sensor data directly from the brick, enabling real-time control and feedback. A connected feature allows playing sounds with specified volume, frequency, and duration, making it possible to generate alerts or audio cues during robot operation. Together, these capabilities facilitate both low-level interaction and high-level behavioral control of EV3-powered robots.",
      "description_length": 570,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm",
      "library": "mindstorm",
      "description": "This library enables direct control of Lego Mindstorm NXT and EV3 bricks via USB or Bluetooth, providing unified access to motors, sensors, and system functions. It supports operations such as launching and stopping programs, managing files, reading sensor data, and playing sounds, with specific capabilities including motor synchronization, ultrasonic sensing, and inter-device messaging. You can use it to build autonomous navigation systems, remote-controlled devices, or sensor-driven behaviors with precise timing and feedback. Examples include triggering tones based on sensor input, coordinating multi-motor movement, and transferring and executing programs on the brick.",
      "description_length": 679,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm_connect",
      "library": "mindstorm",
      "description": "This module enables direct communication with USB and Bluetooth devices, primarily for sending and receiving binary data packages. It supports operations like `send`, `recv`, and `really_input` to handle protocol differences between transports, with concrete use cases in robotics control and sensor data retrieval from devices like LEGO Mindstorms NXT over Bluetooth or USB. The child module handles USB-specific tasks, including device discovery, connection setup, and status checks, working with USB device structures to initialize and manage communication. Together, they provide a unified interface for cross-platform device interaction using both wired and wireless protocols.",
      "description_length": 682,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 859,
    "min_description_length": 233,
    "avg_description_length": 477.42857142857144,
    "embedding_file_size_mb": 0.05128669738769531
  }
}