{
  "package": "mindstorm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:16:30.263470",
  "modules": [
    {
      "module_path": "Mindstorm.NXT.Sensor.Ultrasonic",
      "library": "mindstorm",
      "description": "This module provides functions to initialize, configure, and read data from an ultrasonic sensor connected to a Lego Mindstorm NXT brick. It supports operations to set the sensor mode (e.g., off, continuous measurement) and retrieve distance readings or internal configuration values as integers. The module works directly with sensor ports and handles communication via the I2C protocol, raising exceptions on bus errors during data retrieval.",
      "description_length": 444,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Program",
      "library": "mindstorm",
      "description": "This module starts, stops, and queries the status of programs on a connected Lego Mindstorm brick. It operates on a connection object to send commands and interact with program names as strings. Use it to control execution of `.rxe` files on the brick, such as launching a specific program or checking which program is currently running.",
      "description_length": 337,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.Find",
      "library": "mindstorm",
      "description": "This module lists files on a connected Lego NXT brick matching a given pattern, providing operations to iterate, map, or fold over the results with access to filenames and their sizes. It works with connection objects and string patterns, supporting wildcard-based file searches. Concrete use cases include retrieving logs, programs, or sensor data files stored on the brick for analysis or backup.",
      "description_length": 398,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sound",
      "library": "mindstorm",
      "description": "This module plays sound files and tones on a connected Lego Mindstorm brick. It provides functions to play `.rso` sound files, stop ongoing playback, and generate tones with specified frequency and duration. Concrete use cases include signaling program events with custom sounds or generating beeps for user feedback during robot operation.",
      "description_length": 340,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sensor",
      "library": "mindstorm",
      "description": "This module configures and reads data from sensors connected to the input ports of a Lego Mindstorm NXT brick, supporting operations to set sensor types and modes, retrieve raw and processed sensor values, and handle color and ultrasonic sensor data. It works directly with sensor ports (`S1` to `S4`), sensor types like `Light_active`, `Color_full`, and `Ultrasonic`, and provides data in formats such as raw, normalized, and scaled values. Concrete use cases include reading distance from an ultrasonic sensor, detecting colors with a color sensor, and measuring light intensity or temperature.",
      "description_length": 596,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Motor",
      "library": "mindstorm",
      "description": "This module controls Lego Mindstorm NXT motor outputs by setting and retrieving motor states, including speed, direction, braking, and rotation limits. It works with motor ports A, B, and C, and supports operations like starting, stopping, and resetting motor position. Concrete use cases include driving robots with precise motor control over USB or Bluetooth, such as moving a robot arm a specific number of degrees or maintaining synchronized motor speeds.",
      "description_length": 459,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.EV3.Sound",
      "library": "mindstorm",
      "description": "Plays a sound with specified volume, frequency, and duration on a connected EV3 brick. Works directly with the EV3 connection type to send sound commands. Useful for triggering audible feedback during robot operations, such as signaling task completion or alerting errors.",
      "description_length": 272,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.Message",
      "library": "mindstorm",
      "description": "This module sends and receives string messages to and from specific mailboxes on a Lego Mindstorm NXT brick, using Bluetooth or USB communication. It provides direct access to the brick's 10 message queues, allowing precise control and data exchange with running programs on the device. Use cases include sending commands to trigger specific actions on the NXT or retrieving sensor data logged by the brick.",
      "description_length": 407,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.USB",
      "library": "mindstorm",
      "description": "This module provides functions to detect and establish USB connections with Lego NXT bricks on Linux systems. It defines a `device` type representing a connected NXT brick and allows retrieving a list of available devices with `bricks()`, then connecting to one using `connect`. Concrete use cases include initializing direct USB communication with a specific NXT brick for sending commands or retrieving sensor data.",
      "description_length": 417,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_connect.USB",
      "library": "mindstorm",
      "description": "This module provides direct USB communication with LEGO NXT bricks. It supports listing available USB devices and establishing connections with optional status checking. Functions interact with raw USB device handles to enable low-level control and data exchange with robotics hardware.",
      "description_length": 286,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.EV3",
      "library": "mindstorm",
      "description": "This module connects to Lego EV3 bricks via USB or Bluetooth, enabling direct control of the device. It provides functions to establish and close connections using specific communication protocols. Concrete use cases include sending commands to control motors, sensors, and sound feedback through the `Sound` submodule.",
      "description_length": 319,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT",
      "library": "mindstorm",
      "description": "This module offers low-level communication and device control operations for Lego Mindstorm NXT bricks over USB or Bluetooth, including connection management, file I/O, program control, motor and sensor interaction, sound playback, and inter-device messaging. It works with NXT brick components like motors, sensors, and flash memory, supporting tasks such as firmware version retrieval, battery level monitoring, flash data deletion, and Bluetooth resets. Utilities like wildcard-based file searches and command buffer polling enable advanced device management and robotics applications requiring precise hardware interaction.",
      "description_length": 627,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_connect",
      "library": "mindstorm",
      "description": "This module implements direct communication with LEGO Mindstorms devices over Bluetooth and USB. It provides functions to connect to devices, send and receive binary data packets with protocol-specific handling, and manage connection lifecycles. Use cases include sending commands to and reading sensor data from LEGO NXT bricks in robotics applications.",
      "description_length": 354,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm",
      "library": "mindstorm",
      "description": "This module connects to and controls Lego Mindstorm NXT and EV3 bricks via USB or Bluetooth, offering direct access to motors, sensors, and device memory. It handles connection setup, command transmission, and device feedback for robotics applications requiring real-time control and data retrieval. Specific use cases include autonomous robot navigation, sensor data processing, and interactive motor control through precise communication protocols.",
      "description_length": 450,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 627,
    "min_description_length": 272,
    "avg_description_length": 407.57142857142856,
    "embedding_file_size_mb": 0.20331382751464844
  }
}