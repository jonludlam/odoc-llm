{
  "package": "mindstorm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:33:33.896996",
  "modules": [
    {
      "module_path": "Mindstorm.NXT.Sensor.Ultrasonic",
      "description": "Initializes and configures an ultrasonic sensor via I2C, allowing setting of operational modes like single-shot, continuous, or event detection, and adjusting parameters such as measurement interval, zero offset, and scaling factors. Retrieves sensor data including distance readings from eight channels, interval settings, and calibration values. Used to control and read sensor outputs in robotics or environmental monitoring applications.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.NXT.USB",
      "description": "Returns a list of LEGO NXT bricks connected via USB, using device-specific data structures. Establishes a USB connection to a brick, with optional status checks during the process. Designed for direct interaction with NXT hardware on Linux systems.",
      "description_length": 248,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Program",
      "description": "Starts and stops specific programs on a brick using connection objects, with options to verify status after execution. Retrieves the name of the currently running program or raises an error if none is active. Designed for direct interaction with .rxe files during runtime control.",
      "description_length": 280,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Motor",
      "description": "Provides functions to control motor speed, set motor states, retrieve motor status, and reset position counters. Operates with port identifiers, motor states, and counters tracking tachometer and rotation data. Used to adjust motor behavior in real-time, monitor motor activity, and recalibrate position readings during robot operation.",
      "description_length": 336,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sensor",
      "description": "Provides real-time sensor data acquisition and configuration through I2C, supporting multiple operational modes and calibration adjustments. Includes distance readings from up to eight channels, interval settings, and scaling factors for precise environmental or robotic sensing. Enables continuous monitoring, event-triggered readings, and custom calibration for accurate measurements. Examples include tracking object proximity, detecting motion events, and adjusting sensor sensitivity for varying environments.",
      "description_length": 514,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Sound",
      "description": "Plays sound files with specified looping and status checking, and generates tones with defined frequency and duration. Operates on connection objects and string-based sound file paths. Used to trigger audio feedback or alerts in embedded systems like LEGO NXT devices.",
      "description_length": 268,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Message",
      "description": "Provides functions to write messages to specific mailboxes on an NXT device and read messages from either a mailbox or a remote inbox. Operates with connection objects, mailboxes, and remote identifiers, enabling direct communication with NXT programs. Used to send commands to a running program with guaranteed delivery or retrieve messages without removing them from the queue.",
      "description_length": 379,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT.Find",
      "description": "Provides functions to iterate over files on a brick, retrieve filenames and their sizes, and process matches using custom functions. Operates on file patterns with wildcards and handles iterators for sequential access. Supports mapping, folding, and iteration over matching files for direct processing or data collection.",
      "description_length": 321,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.EV3.Sound",
      "description": "Generates a tone with specified volume, frequency, and duration using a connection object. Operates on integer values for volume, frequency, and time. Used to produce audible signals in audio applications or user feedback systems.",
      "description_length": 230,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm.NXT",
      "description": "Manages LEGO NXT hardware interactions through USB, motor control, sensor data, sound playback, and file operations. Provides access to brick status, program execution, motor states, sensor readings, mailbox communication, and file management via connection objects and structured data. Enables real-time adjustments, data acquisition, and program coordination, such as monitoring distance sensors, playing audio alerts, or sending control commands via mailboxes. Supports file pattern matching, motor calibration, and program execution verification for comprehensive robot control.",
      "description_length": 582,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm.EV3",
      "description": "Controls audio output by generating tones with precise parameters. Accepts integer volume (0-100), frequency (Hz), and duration (ms) to produce sound through a connected device. Supports real-time feedback and alert systems in embedded applications. Example: emit a 1000Hz tone at 50% volume for 500ms to signal a system event.",
      "description_length": 327,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mindstorm_connect.USB",
      "description": "Provides functions to retrieve a list of connected USB devices and establish a connection with a specific device using status checks and custom validation. Operates on device identifiers and USB connection objects. Used to interface with LEGO NXT bricks via USB communication.",
      "description_length": 276,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mindstorm",
      "description": "Provides functions to send motor commands, read sensor values, and manage brick connections via Bluetooth or USB. Operates on motor identifiers, sensor types, and connection parameters. Used to control robot movements and gather real-time data during autonomous operation.",
      "description_length": 272,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm",
      "description": "Controls LEGO NXT hardware with motor, sensor, and audio capabilities, enabling real-time interaction and program coordination. Provides structured data for brick status, motor states, sensor readings, and file operations, along with audio synthesis using volume, frequency, and duration parameters. Users can monitor distance sensors, play audio alerts, send mailbox commands, and manage files. Example tasks include emitting a 1000Hz tone for 500ms or calibrating motors for precise movement.",
      "description_length": 494,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mindstorm_connect",
      "description": "Establishes and manages connections to LEGO NXT bricks through USB and Bluetooth, using device identifiers and connection objects. Supports retrieving connected devices, validating connections, and initiating communication. Operations include status checks, device selection, and custom validation routines. Enables direct interaction with hardware by handling low-level connection setup and verification.",
      "description_length": 405,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 230,
    "avg_description_length": 358.2,
    "embedding_file_size_mb": 0.05494403839111328
  }
}