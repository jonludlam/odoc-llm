{
  "package": "nottui",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:35.754661",
  "modules": [
    {
      "module_path": "Nottui.Focus",
      "description": "Provides functions to manage a reactive focus state, including requesting and releasing focus, and checking the current status. Operates with `handle` and `status` types, where `status` is a reactive value that reflects whether focus is held. Used to coordinate exclusive access to a resource in a reactive system, such as managing input focus in a user interface.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nottui.Gravity",
      "description": "Provides functions to create and inspect gravity values composed of horizontal and vertical direction components. Includes pretty-printing functions for directions and gravity values, with a default gravity aligned to the top-left. Used to represent and format alignment preferences in layout systems.",
      "description_length": 301,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nottui.Ui",
      "description": "The module provides operations to manipulate UI layout properties, such as retrieving dimensions and combining images through horizontal, vertical, and superposition functions, while handling event sensing. It works with UI elements (`t`) and layout specifications, enabling use cases like dynamic layout customization and image composition with monoid-based concatenation.",
      "description_length": 373,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nottui.Renderer",
      "description": "Manages rendering of user interface elements, updating content based on specified dimensions and event handling. Operates on size tuples and Notty images, maintaining internal state for dynamic updates. Processes mouse and keyboard events to influence UI interactions and returns rendered output.",
      "description_length": 296,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nottui.Ui_loop",
      "description": "Handles real-time user interface updates by stepping through rendering and event processing. Processes input events with timeouts and manages termination based on escape or Ctrl-Q key presses. Integrates with terminal and rendering backends to drive interactive applications.",
      "description_length": 275,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "nottui",
      "description": "Tracks dynamic values that update in response to events, supporting reactive updates through a system of dependent computations. It operates on streams and event sources, enabling real-time data flow management. Used to create interactive terminal interfaces by synchronizing user input with visual output.",
      "description_length": 306,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nottui",
      "description": "manages reactive focus, layout alignment, UI element manipulation, rendering, and real-time updates. It uses types like `handle`, `status`, `gravity`, and `t` to control focus, define alignment, and compose UI elements. Functions include focus coordination, gravity-based layout, image composition, and event-driven rendering. It enables building interactive terminal interfaces with dynamic layouts, input handling, and responsive visual updates.",
      "description_length": 447,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nottui_widgets",
      "description": "This module enables construction of terminal-based user interfaces through layout containers (scrollboxes, flex boxes, grids) and interactive elements (buttons, toggles, tabs), operating on Lwd.t-wrapped components and state variables to manage dynamic, reactive displays. It supports use cases like building scrollable forms, multi-pane layouts, and interactive controls requiring real-time updates. The toolkit emphasizes layout management, input handling, and visual organization for complex command-line applications.",
      "description_length": 521,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 275,
    "avg_description_length": 360.375,
    "embedding_file_size_mb": 0.029476165771484375
  }
}