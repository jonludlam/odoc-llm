{
  "package": "syguslib-utils",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:50.608074",
  "modules": [
    {
      "module_path": "Syguslib.Semantic.Term",
      "library": "syguslib-utils",
      "description": "This module provides functions to convert SyGuS terms to and from S-expressions, along with pretty-printing capabilities. It operates on the `sygus_term` type, enabling structured representation and display of SyGuS program terms. Concrete use cases include parsing and serializing SyGuS terms for communication with solvers and generating human-readable term output.",
      "description_length": 367,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Semantic.Command",
      "library": "syguslib-utils",
      "description": "This module provides functions to convert SyGuS commands to and from S-expressions, along with pretty-printing capabilities. It operates on the `Syguslib.Sygus.command` type, enabling structured representation and display of solver commands. Concrete use cases include parsing solver input from external sources and formatting commands for human-readable output or logging.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Solvers.SolverSystemConfig",
      "library": "syguslib-utils",
      "description": "This module defines system configuration parameters for syntax-guided synthesis solvers by specifying executable paths for CVC, DryadSynth, and EUSolver. It includes functions to retrieve the binary paths and a flag to select between CVC4 and CVC5. Concrete use cases include setting up solver environments and switching between solver versions programmatically.",
      "description_length": 362,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Semantic.Ident",
      "library": "syguslib-utils",
      "description": "This module provides functions to convert identifier values to and from S-expressions, along with pretty-printing capabilities. It operates specifically on the `Syguslib.Semantic.Ident.t` type, which represents identifiers in SyGuS programs. Use cases include serializing and deserializing identifiers for storage or communication, and displaying them in human-readable form.",
      "description_length": 375,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Solvers.Statistics",
      "library": "syguslib-utils",
      "description": "This module tracks timing information for syntax-guided synthesis solver processes. It logs start, restart, quit, and heartbeat events for subprocesses identified by integer IDs, and measures elapsed time in seconds. Concrete use cases include monitoring solver execution duration and tracking subprocess lifecycle events for performance analysis.",
      "description_length": 347,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Solvers.SygusSolver",
      "library": "syguslib-utils",
      "description": "This module defines supported SyGuS solvers like CVC, DryadSynth, and EUSolver, providing operations to execute and manage solver instances with customizable options. It handles solver configuration, binary path resolution, and response parsing, supporting asynchronous execution and solution extraction. Concrete use cases include invoking a specific solver on a SyGuS program, retrieving synthesis results, and managing solver cancellation and statistics collection.",
      "description_length": 468,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Semantic.Sort",
      "library": "syguslib-utils",
      "description": "This module provides functions to convert SyGuS sort representations to and from S-expressions, along with pretty-printing capabilities. It operates specifically on the `sygus_sort` type, enabling structured serialization and human-readable output. Concrete use cases include parsing sort definitions from external sources and formatting sort values for debugging or user-facing tools.",
      "description_length": 385,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Solvers.Logger",
      "library": "syguslib-utils",
      "description": "This module handles logging of solver activity, including error, debug, and verbose messages. It supports writing solver queries to a file when enabled, and controls logging behavior through boolean flags. It works directly with format strings and file output to manage diagnostic information during synthesis tasks.",
      "description_length": 316,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Semantic.Lit",
      "library": "syguslib-utils",
      "description": "This module provides functions to convert SyGuS literals to and from S-expressions, along with pretty-printing capabilities. It operates specifically on the `Syguslib.Sygus.literal` type. Concrete use cases include serializing literals for external representation and formatting them for human-readable output.",
      "description_length": 310,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Serializer",
      "library": "syguslib-utils",
      "description": "This module converts SyGuS terms and commands into s-expressions for serialization. It handles data types like symbols, attributes, literals, sorted variables, grammar definitions, and SyGuS commands. Use it to generate s-expression representations of SyGuS programs and expressions for output or further processing.",
      "description_length": 316,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Sygus",
      "library": "syguslib-utils",
      "description": "This module defines data structures and types that represent the SyGuS language specification, including terms, commands, literals, and identifiers. It supports parsing and constructing SyGuS expressions such as function declarations, constraints, quantifiers, and let-bindings, along with utilities to validate identifiers and check solver responses. Concrete use cases include building and manipulating SyGuS problem specifications for synthesis tasks, encoding constraints for automated reasoning tools, and interpreting solver outputs in synthesis workflows.",
      "description_length": 562,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Semantic",
      "library": "syguslib-utils",
      "description": "This module analyzes and transforms SyGuS commands and programs using predicates and utilities that operate directly on terms, programs, and symbols. It includes operations for checking well-formedness, renaming variables, and comparing identifiers, working alongside submodules that handle S-expression conversions and pretty-printing for terms, commands, identifiers, sorts, and literals. For example, it supports validating program structure, renaming variables in a term, or comparing declared symbols, while submodules enable parsing and serializing terms or commands to and from S-expressions. These capabilities facilitate tasks like program transformation, solver communication, and human-readable output generation.",
      "description_length": 724,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib.Solvers",
      "library": "syguslib-utils",
      "description": "This module orchestrates interaction with SyGuS-compliant synthesis solvers by managing solver execution, logging, and performance tracking. It supports launching synchronous and asynchronous solver instances, configuring solver binaries, and handling process lifecycle events, with core data types including solver configurations, process IDs, and timing metrics. Submodules enable fine-grained control over logging verbosity, binary paths, and statistics collection, allowing use cases such as benchmarking solver runtimes, switching between CVC4 and CVC5, and selectively disabling diagnostic output. Direct APIs and functor-based components work together to execute synthesis queries, parse solver responses, and log subprocess events while accommodating customizable logging and timing backends.",
      "description_length": 800,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syguslib.Parser",
      "library": "syguslib-utils",
      "description": "This module converts s-expressions into Sygus data structures, handling both input parsing and solver response translation. It processes s-expressions into commands, terms, sorts, bindings, and grammar definitions, supporting concrete Sygus program construction and solver interaction. Use cases include parsing Sygus specification files and interpreting solver outputs into structured types for further processing.",
      "description_length": 415,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syguslib",
      "library": "syguslib-utils",
      "description": "This module suite provides end-to-end support for working with SyGuS specifications, enabling the construction, transformation, and serialization of SyGuS terms and commands. It defines core data types such as terms, commands, sorts, and identifiers, and offers operations for parsing, validating, renaming variables, and converting to and from s-expressions. Users can build and manipulate SyGuS problem specifications, interact with synthesis solvers, and process solver outputs programmatically. Example tasks include serializing a SyGuS program to an s-expression, parsing a specification file, validating term structure, or launching and monitoring a synthesis solver with custom logging.",
      "description_length": 693,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 15,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8823529411764706
  },
  "statistics": {
    "max_description_length": 800,
    "min_description_length": 310,
    "avg_description_length": 454.2,
    "embedding_file_size_mb": 0.054909706115722656
  }
}