{
  "package": "obuilder-spec",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:52:43.160902",
  "modules": [
    {
      "module_path": "Obuilder_spec.Secret",
      "library": "obuilder-spec",
      "description": "This module defines a type `t` representing secrets used in build configurations, with fields for an identifier, target mount path, and BuildKit-specific options. It provides functions to convert values between S-expressions and the secret type, ensuring structured handling of sensitive data. A helper function `v` simplifies creating secret values with optional customization of the mount path and BuildKit options, commonly used when defining secure build environments.",
      "description_length": 472,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder_spec.Cache",
      "library": "obuilder-spec",
      "description": "This module defines a cache specification with an identifier, mount target, and BuildKit options. It supports serializing and deserializing cache configurations to and from S-expressions. Use it to declare and manage cache volumes in container build definitions, such as mounting a cache at a specific path with custom size or sharing options.",
      "description_length": 343,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder_spec.Docker",
      "library": "obuilder-spec",
      "description": "Converts a build specification into a Dockerfile string, supporting BuildKit syntax and targeting Unix or Windows operating systems. Works directly with the `Spec.t` type, which represents a sequence of build steps and dependencies. Useful for generating Dockerfiles programmatically from internal build configurations.",
      "description_length": 319,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder_spec",
      "library": "obuilder-spec",
      "description": "This module enables defining and serializing container build processes through structured operations like command execution, file copying, and environment manipulation. It works with typed representations of build stages, runtime settings, and platform-specific configurations (Unix/Windows users), alongside utilities for managing caches, secrets, and Dockerfile generation. It is suited for scenarios requiring programmatic construction of container images with reproducible build specifications and cross-platform support.",
      "description_length": 525,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 525,
    "min_description_length": 319,
    "avg_description_length": 414.75,
    "embedding_file_size_mb": 0.05838966369628906
  }
}