{
  "package": "obuilder-spec",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:55.286709",
  "modules": [
    {
      "module_path": "Obuilder_spec.Docker",
      "library": "obuilder-spec",
      "description": "Converts a build specification into a Dockerfile, supporting BuildKit features and targeting either Unix or Windows operating systems. Works directly with the `Spec.t` type, which represents the abstract build configuration. Useful for generating Dockerfiles programmatically from internal build descriptions, ensuring compatibility with Docker's syntax and feature set.",
      "description_length": 370,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder_spec.Secret",
      "library": "obuilder-spec",
      "description": "This module defines a secret specification with an ID, target path, and BuildKit options. It provides functions to create and serialize secret values, mapping OCaml values to and from S-expressions. A typical use case involves configuring secret mounts in container builds, specifying where a secret should be mounted and how BuildKit should handle it.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder_spec.Cache",
      "library": "obuilder-spec",
      "description": "This module defines a cache specification with an identifier, target path, and BuildKit options. It supports serializing and deserializing cache configurations using S-expressions. Use it to declare and manage cache volumes in build definitions, specifying where and how caches should be mounted during builds.",
      "description_length": 310,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder_spec",
      "library": "obuilder-spec",
      "description": "This module orchestrates the construction of container build specifications, translating high-level configurations into Dockerfiles with support for advanced BuildKit features across Unix and Windows platforms. At its core, it manipulates the `Spec.t` type, representing build steps, and integrates secrets and cache configurations through dedicated submodules. The secrets submodule handles secure value injection via S-expressions, while the cache submodule manages build-time cache volumes. Example usage includes programmatically generating a Dockerfile that mounts a secret at `/run/secrets/mykey` and caches dependencies in `/var/cache/apt`.",
      "description_length": 647,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 647,
    "min_description_length": 310,
    "avg_description_length": 419.75,
    "embedding_file_size_mb": 0.014940261840820312
  }
}