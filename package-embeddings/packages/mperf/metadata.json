{
  "package": "mperf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:29.506331",
  "modules": [
    {
      "module_path": "Mperf.Attr.Kind",
      "library": "mperf",
      "description": "This module defines a set of performance counter types as a variant type `t`, including operations like `to_string` and `of_string` for converting between string representations and the corresponding performance counter values. It works directly with string and the enumerated variant type representing hardware and software performance metrics. Concrete use cases include parsing and serializing performance event identifiers for profiling tools or system monitoring interfaces.",
      "description_length": 479,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mperf.KindMap",
      "library": "mperf",
      "description": "This module provides a polymorphic map structure keyed by attribute kinds, supporting insertion, deletion, ordered traversal, and transformation operations with both safe and unsafe lookup variants. It works with sequences, lists, and key-value pairs, enabling efficient ordered processing via folds, filters, and monotonic predicate-based queries. Use cases include managing attribute-centric data with ordered key requirements, bulk updates from sequences, and safe/unsafe access patterns in performance-sensitive contexts.",
      "description_length": 525,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mperf.Attr",
      "library": "mperf",
      "description": "This module combines attribute configuration with performance counter definitions to provide a complete interface for setting up and managing performance monitoring events. It supports constructing attributes with flags for exclusion, inheritance, and event comparison, while the child module defines concrete counter types and conversion operations like `to_string` and `of_string`. These features enable precise control over hardware and software performance metrics, such as tracking CPU cycles or context switches in user or kernel space. Example uses include configuring low-level profiling events for performance analysis tools or system diagnostics.",
      "description_length": 656,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mperf",
      "library": "mperf",
      "description": "This module provides direct access to Linux performance counters through the `perf_event_open` interface, enabling configuration, monitoring, and retrieval of hardware and software event metrics. It supports grouping counters, setting attributes like exclusion and inheritance, and managing their lifecycle with operations for enabling, disabling, reading, and resetting. The polymorphic map submodule offers ordered, attribute-keyed storage with safe and unsafe access patterns, ideal for tracking and transforming event configurations. Combined with the attribute and counter definitions in the child module, it allows precise setup and control of performance events, such as measuring CPU cycles or context switches in specific execution contexts.",
      "description_length": 750,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 750,
    "min_description_length": 479,
    "avg_description_length": 602.5,
    "embedding_file_size_mb": 0.014927864074707031
  }
}