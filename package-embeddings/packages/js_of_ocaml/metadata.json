{
  "package": "js_of_ocaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 58,
  "creation_timestamp": "2025-06-18T16:43:55.453551",
  "modules": [
    {
      "module_path": "Js_of_ocaml.XmlHttpRequest.Event",
      "description": "Provides event type constants for handling XML HTTP requests, including progress tracking, loading states, and error conditions. Works with the `xmlHttpRequest File.progressEvent` type to capture detailed event data. Used to monitor and respond to specific lifecycle events in asynchronous network operations.",
      "description_length": 309,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Js.Opt",
      "description": "Provides functions to handle values that may be absent, including mapping, binding, testing, and iterating over optional values. Operates on a custom `t` type wrapping values or representing absence. Enables safe value extraction with fallbacks and converts between optional types and the standard `option` type.",
      "description_length": 312,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Js.Optdef",
      "description": "Provides operations to transform, inspect, and combine values that may be absent, including mapping, binding, and checking presence. Works with a custom `t` type representing optional values, supporting conversions to and from OCaml's built-in `option` type. Enables safe handling of missing data by applying functions conditionally or substituting defaults.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Js.Js_error",
      "description": "Provides functions to convert, inspect, and raise JavaScript errors within OCaml, including extracting stack traces and attaching JavaScript backtraces to OCaml exceptions. Operates on OCaml exceptions and a custom error type representing JavaScript errors. Used to debug interoperability issues by preserving stack trace information when exceptions cross from JavaScript to OCaml.",
      "description_length": 381,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Js.Unsafe",
      "description": "These functions enable direct manipulation of JavaScript objects and values, including property access, modification, and function invocation, while bypassing OCaml's type system for interoperability. They work with arbitrary JavaScript values, arrays, and objects, allowing unsafe coercions and direct runtime interactions. Use cases include integrating with existing JavaScript code, optimizing performance-critical sections, or accessing low-level runtime features that require bypassing type safety.",
      "description_length": 503,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_svg.CoerceTo",
      "description": "This module provides type coercion functions that convert generic DOM elements into specific SVG element types, such as `aElement`, `circleElement`, or `pathElement`, by leveraging tag names or optional typing. It operates on `element Js.t` and related SVG-specific types, enabling safe downcasting for targeted manipulations. These utilities are particularly useful when accessing element-specific properties or methods, like adjusting filter effects or path data in SVG graphics.",
      "description_length": 481,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Url.Current",
      "description": "Extracts and manipulates URL components such as host, port, protocol, path, and query arguments. Operates on URL strings and parses them into structured data like lists and association lists. Enables dynamic modification of the URL fragment and full URL replacement, useful for client-side routing and state management.",
      "description_length": 319,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.File.CoerceTo",
      "description": "Converts a file-like object into various specific types including DOM documents, Blobs, JSON, strings, and array buffers. Operates on a custom file_any type representing heterogeneous file inputs. Used to extract structured data from user-uploaded files for web application processing.",
      "description_length": 285,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.File.ReaderEvent",
      "description": "Provides event type constants for file reading operations, including load start, progress updates, abort, error, load completion, and load end. Works with file reader progress events encapsulated in a custom type derived from JavaScript's event system. Used to handle and respond to specific stages of file loading in web applications.",
      "description_length": 335,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.CSS.Color",
      "description": "Converts color names to RGB tuples and hex strings, and constructs colors from RGB or HSL values with optional alpha. Works with color names, RGB tuples, and a private JS-compatible string type. Used to serialize colors for web rendering or JavaScript interop, and to validate color strings from external sources.",
      "description_length": 313,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.CSS.Length",
      "description": "Handles unit conversions and representations for length values, including relative and absolute units like viewport dimensions, font sizes, and physical measurements. Operates on custom `t` type and JavaScript string type `js_t` for interoperability. Converts between human-readable strings, JavaScript values, and internal representations for use in layout or rendering systems.",
      "description_length": 379,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.CSS.Angle",
      "description": "Converts angle values to and from JavaScript string representations, enabling seamless integration with JavaScript code. Operates on internal `t` type and JavaScript string type `js_t`. Used to serialize angles for web API interactions and parse incoming JavaScript values into OCaml representations.",
      "description_length": 300,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_events.Typ",
      "description": "This module provides functions for constructing and encapsulating browser event types, including mouse, keyboard, touch, and media-related interactions, by mapping event names to specific DOM event objects. It works with structured representations of DOM events from modules like `Dom_html`, enabling typed handling of actions such as form input, window resizing, and pointer movements. Use cases include building interactive web applications, managing multimedia controls, and responding to user gestures with precise event categorization.",
      "description_length": 540,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_html.Event",
      "description": "The module provides functions to define and manage browser events, encompassing user interactions like mouse movements, keyboard inputs, touch gestures, and document lifecycle triggers such as load/unload. It operates on specialized event objects including `mouseEvent`, `touchEvent`, `animationEvent`, and `pointerEvent`, enabling precise handling of DOM interactions. Use cases include building responsive web interfaces, tracking media playback states, and managing form input validation through typed event representations.",
      "description_length": 527,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.Dom_html.Keyboard_code",
      "description": "Provides functions to create and interpret key identifiers from keyboard events and key codes. Works with `keyboardEvent Js.t` and integer key codes to represent key presses. Used to accurately map physical key presses in environments where event type affects key identification.",
      "description_length": 279,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_html.Keyboard_key",
      "description": "Identifies the character from a keypress event by converting the keyboard event into a Unicode character option. It processes `keyboardEvent Js.t` to extract the corresponding `Uchar.t` value, if available. This is used to capture user input in real-time, such as in text fields or form inputs.",
      "description_length": 294,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_html.CoerceTo",
      "description": "This module provides type-coercion operations that convert generic DOM elements into specialized HTML element types, such as anchors, buttons, or tables, and events into specific event types like mouse events. It works with data structures like `Dom.node Js.t` and `element Js.t`, enabling safe access to tag-specific properties and methods. Use cases include dynamically handling HTML elements in web applications, ensuring type safety when interacting with DOM nodes, or processing events with precise semantic contexts.",
      "description_length": 522,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.WebGL.Event",
      "description": "Handles WebGL context events through specific event types, including context loss, restoration, and creation errors. Operates with `contextEvent` records and DOM events. Used to monitor and respond to WebGL rendering environment changes in web applications.",
      "description_length": 257,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Typed_array.Bigstring",
      "description": "Converts between OCaml bigstrings and JavaScript array buffers or typed arrays. Operates on bigstrings represented as 8-bit unsigned char arrays in C layout. Used to interface with WebAssembly or JavaScript APIs requiring raw binary data.",
      "description_length": 238,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Typed_array.String",
      "description": "Converts JavaScript array buffers and unsigned 8-bit integer arrays into OCaml strings. Operates on low-level binary data structures used in web APIs. Useful for processing raw data from WebAssembly or network streams.",
      "description_length": 218,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Typed_array.Bytes",
      "description": "Converts typed arrays and array buffers to and from byte sequences, enabling direct manipulation of binary data with minimal copying. Operates on JavaScript typed arrays and array buffers, allowing efficient in-place modifications when possible. Useful for handling raw binary data in web APIs or network protocols where performance and memory efficiency are critical.",
      "description_length": 368,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.Dom.DocumentPosition",
      "description": "Provides bitwise operations for manipulating and querying document position relationships using integer masks. Works with private integer types representing positions and bitmask flags. Used to determine hierarchical and sequential relationships between document elements, such as checking if one element precedes another or if one contains another.",
      "description_length": 349,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.Dom.CoerceTo",
      "description": "Provides functions to safely extract specific DOM node types from a generic node, returning an optional value. Works with DOM nodes and their derived types such as elements, text nodes, and attributes. Used to cast a node to a more specific type when handling dynamic or uncertain DOM structures.",
      "description_length": 296,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom.Event",
      "description": "Creates a type-safe event identifier from a string, enabling distinct event types with associated data. Works with the `'a typ` type to represent events with specific data payloads. Used to define and manage unique event types in a messaging or state management system.",
      "description_length": 269,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json_import.Poly",
      "description": "Provides comparison and equality operations for arbitrary types, including less than, greater than, equality, and ordering. Works with any type that supports these operations, enabling direct comparison between values. Used to implement custom ordering logic in data structures like trees or to sort user-defined types.",
      "description_length": 319,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json_import.Int_replace_polymorphic_compare",
      "description": "Provides comparison and ordering operations for integers, including standard relational operators, equality checks, and functions to determine maximum and minimum values. Works exclusively with integer data types and returns boolean or integer results based on input. Used to implement custom sorting logic or conditional branching based on numeric relationships.",
      "description_length": 363,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json_import.String",
      "description": "This module offers string manipulation, character-level transformations, and integer decoding operations, working with strings, bytes, and numeric types like int32 and int64. It supports tasks such as substring extraction, case conversion, and parsing binary data with endianness-specific decoding, including UTF-8/16 validation. Use cases include text processing, network protocol implementation, and handling serialized data formats.",
      "description_length": 435,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json_import.Char",
      "description": "Converts characters to and from ASCII codes, escapes special characters for string representation, and performs case conversion within the ASCII range. Handles character comparison, hashing, and equality checks for use in data structures. Processes individual characters to generate escaped strings and supports case manipulation in text processing tasks.",
      "description_length": 355,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Defaults",
      "description": "Writes a value of type `a` into a buffer using a custom serialization method. Parses a value of type `a` from a lexical buffer using a predefined deserialization strategy. Designed for efficient binary serialization and parsing of structured data.",
      "description_length": 247,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Defaults'",
      "description": "Writes a value of type `a` to a buffer using a custom serialization format. Parses a value of type `a` from a lexing buffer, supporting variant types with specific constructors. Handles variant matching and reading operations for types tagged with `Cst` or `NCst`.",
      "description_length": 264,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Defaults''",
      "description": "Provides a singleton value of type `a t` for default instances, enabling consistent initialization of custom types. Works with user-defined types wrapped in a monomorphic container. Used to establish a baseline configuration in systems requiring a fixed default state.",
      "description_length": 268,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Json_char",
      "description": "Provides functions to serialize and deserialize character values to and from JSON format. Operates on the `char` type, converting it to and from strings and buffer structures. Enables direct parsing of JSON-encoded characters and efficient string-based conversions.",
      "description_length": 265,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Json_bool",
      "description": "Converts between boolean values and JSON-compatible string representations. Accepts a boolean type and provides serialization to and parsing from JSON strings. Supports writing to a buffer and reading from a lexing buffer.",
      "description_length": 222,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_unit",
      "description": "Provides operations to serialize and deserialize a unit type, including writing to a buffer, reading from a lexer buffer, converting to and from strings. Works exclusively with the unit data type, representing the absence of value. Used to enforce strict JSON structure validation where only null is acceptable.",
      "description_length": 311,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_int",
      "description": "Provides functions to serialize and deserialize integer values to and from JSON format. Operates on the `int` type, offering low-level manipulation through buffer and lexer interfaces. Used to convert integers to JSON strings and parse JSON strings back into integer values.",
      "description_length": 274,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_int32",
      "description": "Provides operations to serialize and deserialize int32 values to and from JSON, including writing to a buffer, reading from a lex buffer, converting to and from strings. Works with the int32 data type exclusively. Used to handle JSON-encoded integers in environments where 32-bit integer precision is required.",
      "description_length": 310,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Json_int64",
      "description": "Handles serialization and deserialization of 64-bit integers to and from JSON format. Accepts and produces values of type int64, using a buffer for writing and a lexer buffer for parsing. Converts between int64 and string representations for easy integration with JSON-based data exchange.",
      "description_length": 289,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_nativeint",
      "description": "Provides operations to serialize and deserialize nativeint values using a custom JSON format. It includes functions to write to a buffer, read from a lexer buffer, convert to and from strings, and retrieve a default value. Used for efficient JSON encoding and decoding of 64-bit integers in systems requiring precise numeric handling.",
      "description_length": 334,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_float",
      "description": "Converts between float values and their JSON string representations, supporting parsing from lexed input and serialization to buffers. Operates directly on the float type, enabling efficient conversion without intermediate structures. Used to embed or extract floating-point numbers in JSON data streams.",
      "description_length": 304,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_string",
      "description": "Provides functions to serialize and deserialize values of type string to and from JSON format. Includes writing to a buffer, reading from a lexer buffer, converting to a string, and parsing from a string. Used to handle JSON-encoded string data in parsing and output operations.",
      "description_length": 278,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_list",
      "description": "Provides functions to serialize and deserialize a custom type `a` to and from JSON format. Operates on the `a` type, using a buffer for writing and a lexer buffer for reading. Converts between `a` and string representations for easy storage or transmission.",
      "description_length": 257,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json.Json_ref",
      "description": "Provides functions to serialize and deserialize values of type `a` to and from JSON format, including writing to a buffer, reading from a lexer buffer, converting to and from strings. Works with the `a` type, which is abstract and defined by the module. Used to parse JSON strings into internal representations and generate JSON output for storage or transmission.",
      "description_length": 364,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Json_option",
      "description": "Provides operations to serialize and deserialize values of type `a` to and from JSON format. Includes functions to write to a buffer, read from a lexer buffer, convert to and from strings. Used to handle JSON data in applications requiring direct encoding and decoding without external dependencies.",
      "description_length": 299,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json.Json_array",
      "description": "Provides operations to serialize and deserialize a custom type `a` to and from JSON format. Works with the `Buffer.t` type for writing and `Deriving_Json_lexer.lexbuf` for reading. Used to convert JSON strings into structured data and vice versa.",
      "description_length": 246,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.CSS",
      "description": "Provides utilities for converting and manipulating CSS-related values, including colors, lengths, and angles. It supports conversions between OCaml types, JavaScript strings, and standardized representations, enabling seamless web interop. For example, it can transform color names into RGB tuples, convert length values between units, and serialize angles for JavaScript APIs. Each submodule defines a core type and its JavaScript counterpart, with functions for bidirectional conversion and validation.",
      "description_length": 504,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Dom_events",
      "description": "Encapsulates browser events with typed representations, supporting mouse, keyboard, touch, and media interactions. Provides operations to create, filter, and respond to events using structured DOM objects. Examples include handling form input changes, tracking window resize events, and detecting touch gestures for interactive interfaces. Integrates with modules like `Dom_html` to enable precise event-driven application behavior.",
      "description_length": 432,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Effect_js",
      "description": "Provides functions to manage effect execution in JavaScript-specific contexts, including `assume_no_perform` to enforce direct-style execution and prevent unhandled effects. Works with functions that return arbitrary values and effectful computations. Used to optimize performance in JavaScript interop by bypassing CPS transformation and ensuring strict effect handling.",
      "description_length": 371,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Js",
      "description": "Provides functions to parse and generate JSON values from JavaScript objects, including handling of arrays, strings, numbers, and nested structures. Works with OCaml's `Json.t` type and JavaScript-specific representations like `Js.Obj.t` and `Js.Array.t`. Enables conversion between OCaml JSON data and JavaScript objects in web assembly environments.",
      "description_length": 351,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Json",
      "description": "Serializes OCaml values to JSON strings and deserializes JSON strings back to OCaml values. It operates on arbitrary OCaml types using runtime marshaling. Used for quick data exchange in web applications where type safety is managed externally.",
      "description_length": 244,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Jstable",
      "description": "Provides operations to create, modify, and query a hash table optimized for JavaScript string keys, supporting addition, removal, and lookup. Works with OCaml values stored under keys of type Js.js_string Js.t. Used to efficiently manage mappings between JavaScript strings and OCaml values in interoperability scenarios.",
      "description_length": 321,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Regexp",
      "description": "Constructs and manipulates regular expressions with case-sensitive, case-insensitive, and flag-controlled matching. Processes strings and returns match results, grouped substrings, and modified strings after replacements or splits. Enables exact string matching, global and first-time replacements, and splitting strings based on pattern matches.",
      "description_length": 346,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml.Sys_js",
      "description": "Provides functions to manage JavaScript-specific I/O operations, including setting custom buffer handlers for input and output channels. Works with channels, file paths, and a pseudo-filesystem to dynamically load and manage files. Registers callbacks for file loading, reads and writes files in a virtual filesystem, and retrieves the Js_of_ocaml version.",
      "description_length": 356,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml.Url",
      "description": "Processes and modifies URL components, converting between string representations and structured data types like lists and association lists. Supports extraction of host, port, protocol, path, query, and fragment, along with dynamic updates to these elements. Allows for full URL replacement and fragment manipulation, enabling client-side routing without direct DOM access. Examples include parsing a URL into its components, updating the query string, and constructing a new URL from modified parts.",
      "description_length": 500,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "js_of_ocaml",
      "description": "Converts OCaml bytecode into executable JavaScript, enabling deployment of OCaml code in web browsers and Node.js environments. Handles OCaml's native data types and structures, including lists, variants, and records, translating them into equivalent JavaScript representations. Supports direct integration with browser APIs through generated bindings, allowing manipulation of DOM elements and event handling from OCaml code.",
      "description_length": 426,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json_import",
      "description": "Combines comparison, ordering, and equality operations across multiple data types, including arbitrary values, integers, and characters, with specialized functions for string manipulation, ASCII handling, and numeric decoding. Supports tasks like custom sorting, text transformation, and data parsing through operations such as substring extraction, case conversion, and endianness-aware decoding. Enables efficient handling of strings, bytes, and numeric values with functions to determine max/min, compare characters, and escape special characters. Can be used to implement ordered data structures, process network protocols, or generate escaped string representations.",
      "description_length": 671,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Deriving_Json",
      "description": "Provides a way to serialize and deserialize values of type `a` to and from JSON format. It supports custom encoders and decoders for structured data, including nested records and variant types. Used to convert application data models into JSON for API responses or configuration files.",
      "description_length": 285,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Deriving_Json_lexer",
      "description": "Provides functions to parse JSON tokens from a lexing buffer, including reading integers, floats, strings, and tagged values. Operates on the `lexbuf` type, which tracks position and input state during lexical analysis. Used to process structured JSON data, validate syntax, and extract values in a parser-driven workflow.",
      "description_length": 322,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml",
      "description": "Provides utilities for converting CSS values, managing browser events, handling JSON serialization, and manipulating JavaScript-specific data structures. Core types include color representations, event objects, JSON values, hash tables with JavaScript string keys, and regular expressions. It enables tasks like converting color names to RGB, handling form input events, serializing OCaml data to JSON, and modifying URL components. Functions support bidirectional conversions, event-driven programming, and efficient data manipulation in web applications.",
      "description_length": 556,
      "index": 57,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 82,
    "meaningful_modules": 58,
    "filtered_empty_modules": 24,
    "retention_rate": 0.7073170731707317
  },
  "statistics": {
    "max_description_length": 671,
    "min_description_length": 218,
    "avg_description_length": 346.91379310344826,
    "embedding_file_size_mb": 0.21108722686767578
  }
}