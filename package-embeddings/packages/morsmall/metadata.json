{
  "package": "morsmall",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:03:24.533184",
  "modules": [
    {
      "module_path": "Morsmall.SafePrinter",
      "library": "morsmall",
      "description": "This module provides functions for safely printing structured data from the Morsmall.AST module, including names, words, patterns, assignments, commands, and programs. It uses OCaml's `Format.formatter` to produce human-readable output for AST nodes and lists of those nodes. Concrete use cases include pretty-printing shell-like programs and commands for debugging or logging purposes.",
      "description_length": 386,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall.AST",
      "library": "morsmall",
      "description": "This module provides utilities for structural comparison, pretty-printing, and string representation of abstract syntax tree (AST) elements in shell programs, focusing on nodes like commands, patterns, and programs that carry source location metadata. It supports operations for rendering AST nodes with consistent formatting, converting them to strings, and resolving default file descriptors for redirections based on node kinds. These capabilities are particularly useful for debugging parser outputs, generating human-readable representations of shell code structures, and mapping syntactic constructs to system-level I/O operations.",
      "description_length": 637,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall.CST_to_AST",
      "library": "morsmall",
      "description": "This module provides structured conversion functions that translate concrete syntax tree (CST) nodes\u2014representing shell commands, control structures, and lexical elements\u2014into abstract syntax tree (AST) nodes while preserving location information. It systematically handles nested command hierarchies, control flow constructs (like conditionals and loops), and I/O redirections, enabling precise parsing of shell scripts into processable ASTs for analysis or execution. Specific transformations include converting pipelines, variable assignments, quoted expressions, and pattern-matching clauses into their corresponding AST representations.",
      "description_length": 641,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Morsmall.Location",
      "library": "morsmall",
      "description": "This module handles source code location tracking with precise positional information. It defines lexing positions and ranges for tracking file names, line numbers, and character offsets, along with equality checks, pretty-printing, and string conversion functions. It supports attaching locations to arbitrary values, enabling use cases like error reporting with exact source positions and syntax tree node annotations.",
      "description_length": 420,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Morsmall",
      "library": "morsmall",
      "description": "This module parses shell scripts into abstract syntax trees with source location metadata, supporting structural comparison, pretty-printing, and conversion to string representations. It includes functions for parsing files into command lists, printing AST nodes in shell-like or OCaml-style formats, and converting concrete syntax trees to annotated ASTs. Use cases include debugging parser outputs, generating readable shell code representations, and mapping syntactic constructs to system I/O operations.",
      "description_length": 507,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall_utilities.TestParser",
      "library": "morsmall.utilities",
      "description": "This module defines an abstract syntax tree for test expressions, supporting logical operations like conjunction, disjunction, and negation, as well as unary and binary comparisons. It includes a `parse` function that constructs these expressions from a list of string tokens, optionally enforcing bracketed syntax. It is used to represent and evaluate structured test conditions from parsed input.",
      "description_length": 398,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall_utilities",
      "library": "morsmall.utilities",
      "description": "This module provides functions to parse and evaluate structured test expressions represented as abstract syntax trees. It supports logical operations, unary and binary comparisons, and optional bracketed syntax parsing. It is used to build and process complex test conditions from string token lists.",
      "description_length": 300,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 641,
    "min_description_length": 300,
    "avg_description_length": 469.85714285714283,
    "embedding_file_size_mb": 0.1017923355102539
  }
}