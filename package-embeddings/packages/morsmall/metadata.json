{
  "package": "morsmall",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:00.415991",
  "modules": [
    {
      "module_path": "Morsmall.SafePrinter",
      "library": "morsmall",
      "description": "This module provides functions for safely printing structured values from the `Morsmall.AST` module, such as names, words, patterns, assignments, and commands. It includes formatters for individual elements and collections, ensuring correct syntax and formatting. Use cases include generating readable representations of abstract syntax trees for debugging or logging shell-like programs.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Morsmall.AST",
      "library": "morsmall",
      "description": "This module provides utilities for structural comparison, human-readable formatting, and string representation of shell abstract syntax tree (AST) elements. It operates on composite data types like commands, programs, patterns, and redirections, along with supporting types such as located values and character ranges. These tools facilitate tasks like AST analysis, transformation pipelines, and error reporting in shell language processing systems.",
      "description_length": 450,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall.Location",
      "library": "morsmall",
      "description": "This module handles source code location tracking with precise positional information. It defines lexing positions and ranges with start and end points, supporting equality checks, string formatting, and mapping over located values. It is used to associate abstract syntax tree nodes with their source locations for error reporting and tooling.",
      "description_length": 344,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall.CST_to_AST",
      "library": "morsmall",
      "description": "This module processes syntactic constructs from a concrete syntax tree into an abstract syntax tree, translating control structures (like conditionals and loops), command groupings, and lexical elements (such as quoted words and assignments) while preserving location metadata. It operates on recursive data structures like pipelines, redirections, and nested commands, transforming specialized forms (e.g., quoted expressions, I/O descriptors) into their abstract representations. Typical use cases include parsing shell scripts into analyzable ASTs or enabling transformations for linters and code generators.",
      "description_length": 611,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall",
      "library": "morsmall",
      "description": "This module parses shell scripts into abstract syntax trees (ASTs), enabling analysis, transformation, and tooling such as linters or code generators. It provides core data types representing shell constructs\u2014commands, conditionals, loops, redirections, and lexical elements\u2014along with operations to manipulate and traverse them. The AST module defines structured representations for programs, commands, and patterns, while the Printer module safely renders these structures into human-readable or debug formats. The Location module tracks source positions for precise error reporting, and the Parse module translates concrete syntax into the abstract representation, preserving location metadata for tooling integration.",
      "description_length": 721,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall_utilities.TestParser",
      "library": "morsmall.utilities",
      "description": "This module defines a recursive algebraic data type for representing logical test expressions, including conjunctions, disjunctions, negations, and comparisons. It provides a `parse` function that constructs these expressions from a list of string tokens, optionally enforcing bracketed syntax. The module is used to build structured representations of test conditions from tokenized input, enabling evaluation or transformation of logical expressions.",
      "description_length": 452,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Morsmall_utilities",
      "library": "morsmall.utilities",
      "description": "This module represents logical test expressions using a recursive algebraic data type, supporting conjunctions, disjunctions, negations, and comparisons. It includes a `parse` function that builds structured expressions from string tokens, with optional enforcement of bracketed syntax. Users can construct, evaluate, or transform complex logical conditions programmatically. For example, given tokens like [\"a\", \">\", \"5\", \"and\", \"b\", \"<\", \"10\"], it can parse and represent the condition as a structured expression tree.",
      "description_length": 520,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 721,
    "min_description_length": 344,
    "avg_description_length": 498.0,
    "embedding_file_size_mb": 0.025852203369140625
  }
}