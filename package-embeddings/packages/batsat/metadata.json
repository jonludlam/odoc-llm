{
  "package": "batsat",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:30.756421",
  "modules": [
    {
      "module_path": "Batsat.Lit",
      "library": "batsat",
      "description": "This module represents propositional literals as integers, with operations to create, negate, compare, and inspect them. It provides functions to convert literals to integers or strings, apply signs, and retrieve absolute values or signs. Concrete use cases include manipulating logical variables in SAT solvers, where literals represent boolean variables or their negations.",
      "description_length": 375,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Batsat",
      "library": "batsat",
      "description": "This module provides a SAT solving framework that manages clauses, extracts unsatisfiable cores, and generates proofs, using literals and their collections to track truth values across decision levels. It integrates literal handling through an integer-based representation, enabling creation, negation, comparison, and conversion of literals to strings or integers, while supporting operations like checking formula consistency and backtracking. Specific capabilities include solving logical constraints, analyzing boolean formulas for satisfiability, and retrieving minimal unsatisfiable subsets in proofs. It serves applications in formal verification and automated reasoning where precise logical analysis is required.",
      "description_length": 721,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 721,
    "min_description_length": 375,
    "avg_description_length": 548.0,
    "embedding_file_size_mb": 0.007694244384765625
  }
}