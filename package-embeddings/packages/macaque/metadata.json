{
  "package": "macaque",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 26,
  "creation_timestamp": "2025-08-15T12:38:50.911649",
  "modules": [
    {
      "module_path": "Query.Make.Db",
      "library": "macaque",
      "description": "This component offers database interaction capabilities centered on connection lifecycle management, transaction control, and SQL execution. It operates on database handles (`Db.t`), connection metadata, and PostgreSQL-specific types like `timestamptz`, `jsonb`, and `inet`, supporting operations such as query preparation, result parsing, and bidirectional type conversion between OCaml and SQL representations. Key use cases include building type-safe database interfaces, handling complex data serialization (e.g., arrays, geometric types), and managing transactional workflows with monadic composition for sequencing operations.",
      "description_length": 632,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql.Table_type",
      "library": "macaque",
      "description": "This module defines SQL field type constructors for use within table declarations, mapping directly to standard SQL types like boolean, integer, text, and timestamp. Each function takes a nullability witness and returns a structured SQL type with `get`, `nul`, and `t` fields representing the type's behavior. It is used to declare schema-aware table structures in OCaml code using the `<:table< .. >>` syntax.",
      "description_length": 410,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public.Sequence",
      "library": "macaque",
      "description": "This module generates unique identifier values for database records using sequence types. It provides functions to create serial, bigserial, and custom sequence values, each returning a tuple of the input and an atom representing the sequence type. These functions are used when defining table columns that require auto-incrementing values in SQL schemas.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public.Table_type",
      "library": "macaque",
      "description": "This module defines functions that construct SQL type representations from OCaml types, mapping directly to database schema definitions. Each function corresponds to a specific SQL data type, such as boolean, integer, text, and timestamp, and accepts a boolean indicating nullability. These functions are used when defining table schemas in OCaml to ensure correct SQL type generation during database interaction.",
      "description_length": 413,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Query.Make",
      "library": "macaque",
      "description": "This module implements type-safe database query execution and result processing workflows. It operates on SQL queries and views defined using the `Sql` module's type definitions, returning results within the `Db.monad` context for handling side effects. Concrete use cases include executing parameterized queries, retrieving lists or single values from views, and handling nullable and non-nullable SQL types with explicit conversion to OCaml representations.",
      "description_length": 459,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public.ViewOp",
      "library": "macaque",
      "description": "This module implements set operations and binary operators for combining SQL views. It provides functions for union, intersection, and difference operations, both with and without duplicate elimination, as well as a general binary operator function. These operations work on concrete SQL views, enabling the construction of complex queries by combining existing view structures.",
      "description_length": 378,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public.View",
      "library": "macaque",
      "description": "Converts a database row into a concrete view instance by applying the row data to a generic view structure. Works with `Sql_internals.row` and `Sql_internals.concrete_view` types. Useful for materializing views from raw query results in a type-safe manner.",
      "description_length": 256,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Query.Make_with_Db",
      "library": "macaque",
      "description": "This module executes SQL queries and views against a database, supporting operations like single-value retrieval, list views, and optional results. It works with SQL types defined via the `Sql` module, handling both nullable and non-nullable values, and integrates with a database abstraction through the `Db` module. Concrete use cases include fetching a list of records, retrieving a single value, or querying an optional result directly from a database connection.",
      "description_length": 467,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql.View",
      "library": "macaque",
      "description": "Handles SQL view injections for single-row queries, converting a SQL expression into a typed view. Works with SQL row types and enforces non-nullability and non-writability constraints. Useful for safely embedding static SQL views directly into OCaml code using antiquotations.",
      "description_length": 277,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sql_public.Op",
      "library": "macaque",
      "description": "This module provides type-safe construction of SQL expressions through operations like comparisons, arithmetic, logical operators, and aggregate functions, working with typed SQL values represented as value-type pairs. It supports use cases such as building query conditions (`is_null`, `is_distinct_from`), performing calculations (`+`, `*`), aggregating data (`sum`, `count`), and utilizing database functions (`md5`, `current_timestamp`) while handling optional values through explicit null semantics.",
      "description_length": 504,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql.Value",
      "library": "macaque",
      "description": "This module directly maps OCaml values to SQL types for query injection, supporting basic and temporal types like integers, floats, strings, dates, timestamps, and arrays. Each function converts a specific OCaml type into a typed SQL value suitable for use in queries. It is used to safely embed values into SQL statements, particularly within pa_macaque antiquotations.",
      "description_length": 370,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public.Value",
      "library": "macaque",
      "description": "This module directly converts OCaml primitive and database-specific types into SQL values paired with their corresponding SQL types. It handles conversions for booleans, integers, floats, strings, byte arrays, and temporal types like time, date, and timestamps, including time zones and intervals. These functions are used when binding OCaml values to SQL queries, ensuring correct type representation in the database.",
      "description_length": 418,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql.Op",
      "library": "macaque",
      "description": "This module provides functions for handling null values, arithmetic operations, comparisons, logical operations, and SQL aggregates like `count`, `sum`, `min`, and `max`. It operates on SQL type values annotated with nullability, SQL groups, sequences, and unit values, producing typed SQL expressions with precise nullability guarantees. These capabilities support use cases such as constructing complex SQL expressions, aggregating data in grouped queries, generating unique sequence values, and working with timestamps or hash functions like `md5`.",
      "description_length": 551,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sql.Sequence",
      "library": "macaque",
      "description": "This module defines sequence generators for SQL identifiers, producing 32-bit and 64-bit integer sequences. It includes functions for creating serial and bigserial sequences commonly used in database schema definitions. These sequences are used to generate auto-incrementing values for table columns in SQL databases.",
      "description_length": 317,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Query.Db",
      "library": "macaque",
      "description": "This module provides database connectivity, transaction control, and type mapping capabilities, working with structured data representations like `oid`, `param`, `result`, and `row`. It enables type-safe query execution through parameterized statements, handles bidirectional conversion between PostgreSQL and OCaml types (e.g., `jsonb`, `timestamptz`, `uuid`), and manages session state with customizable isolation levels. Use cases include executing parameterized SQL with typed results, parsing database schema metadata, and handling transactional operations with explicit commit/rollback semantics.",
      "description_length": 602,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql.ViewOp",
      "library": "macaque",
      "description": "This module implements standard SQL set operations for combining or comparing query results. It provides functions like `union`, `intersect`, and `except`, each with both deduplicated and all-rows variants, operating on SQL views with matching row types. These operations are used to construct complex queries by combining or filtering result sets from multiple views.",
      "description_length": 368,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_keywords",
      "library": "macaque",
      "description": "This module manages SQL keyword normalization and safety, providing a list of reserved keywords with their SQL 2003 and PostgreSQL reservation status. It includes functions to normalize keyword case and escape identifiers that conflict with SQL keywords. These operations are used during SQL query parsing and generation to avoid syntax errors and ensure compatibility.",
      "description_length": 369,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql",
      "library": "macaque",
      "description": "This module provides type-safe construction and manipulation of SQL queries and schemas through typed expressions, views, and nullability-aware values. It operates on structured data representations like rows, tuples, and sequences, enabling use cases such as null-safe aggregation, view composition, and embedding OCaml values into SQL while preserving type correctness. Key operations include query building (select/insert/update), schema definition, and result handling via composable, type-checked primitives.",
      "description_length": 513,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_base",
      "library": "macaque",
      "description": "Handles basic SQL type representations and object identifiers. Provides a type `untyped` for generic SQL values and `oid` for PostgreSQL object IDs, along with a `path_separator` string used for hierarchical data paths. Useful for low-level database interaction where type erasure or object identity is required.",
      "description_length": 312,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_builders",
      "library": "macaque",
      "description": "This module enables constructing and manipulating SQL queries, expressions, and values through operations like type checking, casting, field access, conditional logic, and query building for selects, inserts, updates, deletes, views, and grouping. It operates on internal SQL representations such as values, rows, tables, and views, supporting parameterized query construction via a fluent, type-safe DSL to ensure correctness and composability in dynamic SQL generation.",
      "description_length": 471,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Check",
      "library": "macaque",
      "description": "This module performs schema validation checks for database tables and sequences. It verifies table structures by comparing expected column names, data types, and nullability against actual database metadata, and ensures sequences match expected type definitions. Functions operate on SQL views, sequences, and PGOCaml monadic database connections, using OCaml objects to represent schema metadata.",
      "description_length": 397,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_types",
      "library": "macaque",
      "description": "This interface provides type coercion, value extraction, and type refinement operations for managing SQL type information in structured query systems. It works with type markers like `nullable`, `non_nullable`, and `non_writable`, along with typed value representations, to enforce type safety during query construction and execution. Specific use cases include safely extracting typed values from SQL results (`get`, `get_val`) and refining ambiguous types (`force_gettable`) in type-safe query interfaces.",
      "description_length": 507,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Query",
      "library": "macaque",
      "description": "This module implements type-safe database query execution and result processing workflows. It operates on SQL queries and views defined using the `Sql` module's type definitions, returning results within the `Db.monad` context for handling side effects. Concrete use cases include executing parameterized queries, retrieving lists or single values from views, and handling nullable and non-nullable SQL types with explicit conversion to OCaml representations.",
      "description_length": 459,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_printers",
      "library": "macaque",
      "description": "This module provides functions to convert structured SQL components like selections, conditions, and values into properly escaped and formatted SQL strings, supporting operations such as query assembly and literal value serialization. It works with abstract syntax trees derived from `Sql_internals` types (e.g., `select`, `where`) and OCaml primitives (booleans, floats, byte arrays), ensuring safe SQL generation. It is used to construct dynamic queries from internal data models and embed typed values into SQL statements without injection risks.",
      "description_length": 549,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sql_public",
      "library": "macaque",
      "description": "This module converts SQL abstract syntax trees into string representations, parses SQL values with type handling, and provides type-safe SQL expression and schema construction. It operates on SQL queries, views, and typed values, supporting data types like integers, strings, timestamps, and nullables. Concrete use cases include generating SQL strings from OCaml-defined queries, binding OCaml values into SQL expressions, defining database schemas with typed columns, and combining SQL views using set operations.",
      "description_length": 515,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Inner_sql",
      "library": "macaque",
      "description": "This module enables type-safe manipulation of SQL values and type information through coercions, recovery, and structured field access on polymorphic records and database rows. It facilitates constructing and transforming SQL queries (including SELECT, INSERT, UPDATE, DELETE) with conditional logic, ordering, and view operations, using internal representations like query trees and table data. Its core applications involve dynamically building type-preserving queries and converting structured query objects into executable SQL strings for database interaction.",
      "description_length": 564,
      "index": 25,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 78,
    "meaningful_modules": 26,
    "filtered_empty_modules": 52,
    "retention_rate": 0.3333333333333333
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 256,
    "avg_description_length": 439.7307692307692,
    "embedding_file_size_mb": 0.3770608901977539
  }
}