{
  "package": "kdf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:02:48.600383",
  "modules": [
    {
      "module_path": "Pbkdf.Make",
      "library": "kdf.pbkdf",
      "description": "This module implements the PBKDF1 and PBKDF2 key derivation functions using a provided hash module. It takes a password, salt, iteration count, and desired key length to produce a derived key string. It is used for securely generating cryptographic keys from passwords, such as for encryption or authentication protocols.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pbkdf",
      "library": "kdf.pbkdf",
      "description": "This module implements PBKDF1 and PBKDF2 key derivation functions using a provided hash module. It takes a password, salt, iteration count, and desired key length to produce a derived key string. It is used for securely generating cryptographic keys from passwords, such as for encryption or authentication protocols.",
      "description_length": 317,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scrypt",
      "library": "kdf.scrypt",
      "description": "This module implements the scrypt password-based key derivation function, which generates cryptographic keys from a password and salt using memory-hard operations. It works with strings for password and salt inputs, and takes integer parameters to control computational cost and parallelism. It is used to securely derive keys for encryption or authentication, particularly in contexts like cryptocurrency wallets and password storage where resistance to hardware-based attacks is critical.",
      "description_length": 490,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hkdf.Make",
      "library": "kdf.hkdf",
      "description": "This module implements the HKDF key derivation function using a provided hash function. It provides `extract` to derive a pseudorandom key from input key material and an optional salt, and `expand` to generate output keying material of arbitrary length from the extracted key and optional context info. It operates on strings as input and output, making it suitable for cryptographic key derivation in protocols requiring key expansion from shared secrets.",
      "description_length": 456,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hkdf",
      "library": "kdf.hkdf",
      "description": "This module implements the HKDF key derivation function using a provided hash function. It provides `extract` to derive a pseudorandom key from input key material and an optional salt, and `expand` to generate output keying material of arbitrary length from the extracted key and optional context info. It operates on strings as input and output, making it suitable for cryptographic key derivation in protocols requiring key expansion from shared secrets.",
      "description_length": 456,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 490,
    "min_description_length": 317,
    "avg_description_length": 408.0,
    "embedding_file_size_mb": 0.058602333068847656
  }
}