{
  "package": "rss",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:37.614398",
  "modules": [
    {
      "module_path": "Rss_io.SMap",
      "library": "rss",
      "description": "This module implements a string-keyed map structure with polymorphic values, offering operations for associative data manipulation, transformation, and structural queries. It supports parsing and printing RSS documents by enabling efficient key-value management for attributes, metadata, or element hierarchies, with utilities to convert between maps, lists, and sequences for flexible data traversal and aggregation.",
      "description_length": 417,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rss_rfc822",
      "library": "rss",
      "description": "Parses email-style date strings into POSIX time values, returning an optional result or raising an exception on failure. It operates on standard string representations of dates, such as those found in email headers or log files. This module is useful for converting human-readable timestamps into machine-readable time values for comparison or storage.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rss_io",
      "library": "rss",
      "description": "This module handles the parsing and serialization of RSS documents by converting XML trees to typed RSS structures like channels and items, with support for namespaces, error handling, and customizable field serialization. It includes a child module that provides a string-keyed map for managing attribute-value pairs and hierarchical data, enabling efficient manipulation of metadata and element relationships during RSS processing. Operations include extracting XML attributes, transforming nested structures, and handling optional RSS constructs such as enclosures or categories. Example uses include ingesting feeds from XML, generating compliant RSS output, and converting between RSS versions using structured key-value transformations.",
      "description_length": 742,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rss",
      "library": "rss",
      "description": "This module provides operations to parse, generate, and manipulate RSS 2.0 feeds by handling hierarchical data structures like channels, items, enclosures, and metadata elements. It works with XML representations of RSS content, supporting namespace-aware parsing from files, strings, or streams, and includes utilities for merging feeds, truncating item lists, or copying elements. Specific use cases include building feed aggregators, synchronizing content between RSS sources, and customizing feed extensions with user-defined parsing logic.",
      "description_length": 544,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rss_types",
      "library": "rss",
      "description": "This module defines core data structures for representing RSS feeds, including categories, images, enclosures, and items, along with comparison functions for these types. It supports parsing and comparing RSS elements such as `guid`, `source`, `enclosure`, and `category`, which are used to model feed metadata and content. Concrete use cases include validating feed consistency, merging RSS items, and sorting or deduplicating entries based on GUIDs or other fields.",
      "description_length": 467,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 742,
    "min_description_length": 352,
    "avg_description_length": 504.4,
    "embedding_file_size_mb": 0.018599510192871094
  }
}