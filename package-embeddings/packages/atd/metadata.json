{
  "package": "atd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 28,
  "creation_timestamp": "2025-07-15T23:11:02.163634",
  "modules": [
    {
      "module_path": "Atd.Import.Option.O",
      "library": "atd",
      "description": "This module provides a bind operator for composing computations that return optional values, enabling chaining of operations that may fail. It works with the standard OCaml `'a option` type, allowing for concise handling of optional data without explicit pattern matching. A concrete use case is processing a sequence of operations where each step depends on the successful result of the previous, such as parsing or lookup operations.",
      "description_length": 435,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Ast.Map",
      "library": "atd",
      "description": "This module transforms nodes in an abstract syntax tree by recursively applying user-defined mappings. It supports traversal and modification of type expressions, variants, fields, type definitions, and module structures. Use it to implement custom AST transformations, such as rewriting specific type constructs or updating field attributes during code generation.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Import.List",
      "library": "atd",
      "description": "This module offers a suite of list manipulation primitives centered on creation (cons, append), transformation (map, fold), and optimized sorting algorithms, alongside utilities for predicate-driven filtering (filteri, take_while), sequence splitting, and association list operations with key-based queries. It operates on polymorphic lists and pair-structured association lists, facilitating tasks like merging sorted sequences, partitioning data with custom conditions, and efficiently managing key-value mappings. Performance-critical functions include early-termination comparisons and in-place reversals to minimize overhead in common traversal patterns.",
      "description_length": 659,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Sort.Make",
      "library": "atd",
      "description": "Implements topological sorting for directed graphs with potential cycles, organizing nodes into ordered groups where each group is either a single node or a cycle. Works with nodes of type `P.t` and their identifier lists. Useful for dependency resolution in build systems or task scheduling where cyclic dependencies must be detected and handled.",
      "description_length": 347,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Import.Option",
      "library": "atd",
      "description": "This module enhances working with `option` values by providing core operations like `map`, `bind`, and `value` for transforming, chaining, and extracting optional data safely. It supports handling computations that may fail, such as parsing or lookups, by allowing concise, type-safe code without explicit pattern matching. For example, `map` can apply a function to a value inside an `option`, while `bind` enables chaining of dependent operations. These functions, along with helpers for checking presence or providing defaults, make it easier to work with optional fields in data structures or fallible computations.",
      "description_length": 619,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Sort.Param",
      "library": "atd",
      "description": "This module defines the required interface for customizing topological sorting behavior, including functions to extract node identifiers and convert them to strings. It operates on abstract data types `t` representing nodes and `id` representing unique identifiers. Concrete use cases include configuring sorting logic for dependency graphs where nodes require custom identity or display logic.",
      "description_length": 394,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Util",
      "library": "atd",
      "description": "This module parses ATD files from various input sources like strings, channels, or lex buffers, producing abstract syntax trees and expanded type definitions. It supports configurable parsing options for schema annotations, type expansion, and position tracking. Useful for processing ATD specifications into structured data for code generation or analysis tools.",
      "description_length": 363,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Doc_types",
      "library": "atd",
      "description": "This module defines basic document structures for representing formatted text, with `inline` handling text and code fragments and `block` organizing them into paragraphs or preformatted blocks. It supports building and manipulating structured documents, particularly for lightweight markup processing. Concrete use cases include parsing and rendering documentation with inline code snippets and formatted paragraphs.",
      "description_length": 416,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Ast",
      "library": "atd",
      "description": "The module processes abstract syntax trees derived from ATD data, offering utilities to traverse and transform type expressions, variants, fields, and module structures. It centers around data types like `type_expr`, `loc`, and `annot`, enabling operations such as normalizing variant representations, simplifying type definitions by removing wrappers, and rewriting type constructs. Submodules allow applying recursive transformations to AST nodes, making it possible to update field attributes or perform analysis during code generation. Examples include rewriting specific type expressions, extracting metadata, and restructuring module definitions for consistency or further processing.",
      "description_length": 690,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Doc",
      "library": "atd",
      "description": "This module processes documentation annotations embedded in ATD type definitions, supporting structured text formatting with paragraphs, inline code, and preformatted blocks. It parses and prints documentation in a specialized text format, handling escaping and whitespace preservation, and converts parsed documentation into HTML. It is used to extract and render documentation from ATD source files, particularly for code generation tools that need to include documentation in their output.",
      "description_length": 492,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Sort",
      "library": "atd",
      "description": "This module performs topological sorting on directed graphs, handling cycles by grouping them into strongly connected components and returning a partial order. It works with nodes and edges represented as adjacency lists, using identifiers defined by a child module that also allows customization of node identity and display. Main operations include sorting a graph into ordered groups and detecting cycles, with concrete applications in dependency resolution and task scheduling. Users can define custom node types and identifier logic through the provided interface, enabling integration with various graph structures.",
      "description_length": 621,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Annot",
      "library": "atd",
      "description": "This module processes annotation structures with functions to check for the existence of sections and fields, extract and parse field values with type conversion, and set or merge fields within annotations. It operates on annotation data types that include sections, fields, and location information, supporting validation against predefined schemas. Concrete use cases include parsing configuration flags, extracting metadata from annotated AST nodes, and validating correct placement of annotations in code generation or analysis tools.",
      "description_length": 538,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Predef",
      "library": "atd",
      "description": "This module defines a list of predefined types recognized by the ATD system, including their names, identifiers, and optional type definitions. It provides a function to build a hash table mapping these type names to their identifiers and type definitions. This is used to support type resolution during ATD parsing and code generation.",
      "description_length": 336,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Inherit",
      "library": "atd",
      "description": "Expands inherit statements within sum and product types in a module body. Accepts flags to control expansion of fields and variants, transforming the structure by incorporating inherited definitions directly. Useful for processing ATD files with inheritance, ensuring types are fully resolved for code generation or analysis.",
      "description_length": 325,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Lexer",
      "library": "atd",
      "description": "This module implements a lexer for parsing ATD files, handling tasks like tokenization of integers, strings, and comments. It processes input using `Lexing.lexbuf` and maintains state in an `accu` record for buffering and tracking depth. It is used to convert raw input into structured tokens for the ATD parser, supporting features like hexadecimal and UTF-8 decoding.",
      "description_length": 369,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Expand",
      "library": "atd",
      "description": "Monomorphizes type expressions by replacing repeated type constructs with fresh, unique type definitions, generating a transformed module body along with a mapping of original types. Works with AST representations of type definitions and expressions, handling nested and polymorphic types. Useful for compiling or analyzing complex type structures where unique type identifiers are required, such as in code generation or type-based optimizations.",
      "description_length": 447,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Loc",
      "library": "atd",
      "description": "This module represents and compares source code locations using pairs of Lexing.position values. It provides a `compare` function to determine the order of two locations based on their positions in the source. Useful for tracking and comparing the positions of tokens or expressions in a parsed file.",
      "description_length": 300,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Reflect",
      "library": "atd",
      "description": "Converts an abstract syntax tree (AST) value into OCaml source code that reconstructs it. Works with Atd.Ast.full_module structures, generating code into a buffer under a specified name. Useful for code generation tools that emit OCaml modules from parsed ATD definitions.",
      "description_length": 272,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Version",
      "library": "atd",
      "description": "Holds a string value representing the current version of the Atd library. This module provides direct access to the version string through the `version` value. Useful for runtime checks or logging the version in applications that use Atd-generated code.",
      "description_length": 253,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Jsonschema",
      "library": "atd",
      "description": "Translates ATD type definitions into JSON Schema documents, supporting customization through `<json ...>` annotations in the source. It operates on ATD abstract syntax trees and emits JSON Schema to an output channel. Useful for generating validation schemas for JSON data structures derived from ATD type declarations.",
      "description_length": 319,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Print",
      "library": "atd",
      "description": "This module provides functions for pretty-printing ATD abstract syntax trees into formatted strings using the `Easy_format` library. It operates on data structures defined in `Atd.Ast`, such as `full_module`, `type_expr`, and `annot_section`. Concrete use cases include generating readable ATD code from parsed ASTs and converting type expressions or annotated type names into string representations for display or code generation.",
      "description_length": 431,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Json",
      "library": "atd",
      "description": "This module defines data types and functions for specifying how ATD types are serialized to and deserialized from JSON. It includes types like `json_int`, `json_float`, `json_record`, and `json_sum` to control the JSON representation of ATD primitives and algebraic data types. Functions like `get_json_int`, `get_json_record`, and `get_json_sum` are used to extract JSON-specific type annotations during code generation.",
      "description_length": 421,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Check",
      "library": "atd",
      "description": "Validates the semantic correctness of ATD files by ensuring type definitions are unique and properly structured. Operates on `Atd.Ast.module_body` to detect logical inconsistencies beyond syntax errors. Useful for enforcing constraints during ATD schema compilation or validation pipelines.",
      "description_length": 290,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Doc_lexer",
      "library": "atd",
      "description": "This module processes ATD documentation comments by parsing structured text into blocks and inline elements. It handles lexing of paragraphs, verbatim text, and inline verbatim sections, operating on lex buffers and string lists to build block and inline document structures. Concrete use cases include extracting and formatting documentation from ATD interface files during code generation or documentation rendering.",
      "description_length": 418,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Parser",
      "library": "atd",
      "description": "This module defines a set of token types representing elements of the ATD syntax, such as identifiers, punctuation, and keywords. It provides a function `full_module` that parses a complete ATD module from a lex buffer using a given tokenizer. Concrete use cases include parsing ATD files into abstract syntax trees for further processing or code generation.",
      "description_length": 358,
      "index": 24,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Atd.Import",
      "library": "atd",
      "description": "This module extends core data manipulation capabilities through enhanced list and option operations, combined with flexible formatting tools for structured output. It provides list functions for creation, transformation, and optimized sorting, along with utilities for filtering, splitting, and managing association lists, while the option submodule enables safe, concise handling of optional values through map, bind, and default extraction. Formatted output functions support logging, serialization, and user-facing text generation with precise control over channels, buffers, or strings. Examples include merging sorted sequences, chaining fallible computations, and building custom log messages with controlled formatting.",
      "description_length": 726,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Unique_name",
      "library": "atd",
      "description": "This module translates identifiers to ensure uniqueness and compatibility with reserved names in target languages like Python. It maintains mappings between original and translated names, using suffixes or prefixes to resolve conflicts while preserving readability. Use `create` to assign unique names from a source collection, and `translate` to adapt names for a target language with reserved keywords.",
      "description_length": 404,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd",
      "library": "atd",
      "description": "This module processes ATD specifications into structured data for code generation and analysis, centered around parsing, transforming, and emitting abstract syntax trees. It defines core data types like `type_expr`, `annot`, and `full_module`, supporting operations such as type expansion, monomorphization, inheritance resolution, and JSON schema generation. It enables tasks like extracting and rendering documentation, validating type definitions, and converting ATD types into OCaml code or JSON representations. Specific examples include normalizing variant types, generating code from parsed ASTs, and translating ATD schemas into JSON validation documents.",
      "description_length": 663,
      "index": 27,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 28,
    "meaningful_modules": 28,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 726,
    "min_description_length": 253,
    "avg_description_length": 438.25,
    "embedding_file_size_mb": 0.1021127700805664
  }
}