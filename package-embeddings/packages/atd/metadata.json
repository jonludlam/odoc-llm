{
  "package": "atd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 28,
  "creation_timestamp": "2025-06-18T16:37:15.201199",
  "modules": [
    {
      "module_path": "Atd.Import.Option.O",
      "description": "Performs monadic binding on option values, applying a function that returns an option to the result of a preceding computation. Operates on values of type 'a option and transforms them using functions that take 'a and return 'b option. Used to chain operations that may fail, such as parsing a string into an integer and then validating it.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Import.List",
      "description": "This module offers a comprehensive set of operations for list manipulation, including traversal, transformation, comparison, and aggregation, with functions like mapping, folding, filtering, and sorting. It works with homogeneous and heterogeneous lists, supporting tasks such as element access, concatenation, and custom comparison-based reordering. Specific use cases include data processing pipelines, statistical aggregations, and structured data manipulation through predicates or key-value associations.",
      "description_length": 509,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Import.Option",
      "description": "Provides a way to chain operations that may fail by applying functions that return option values to the result of previous computations. Works with values of type 'a option and functions that take 'a and return 'b option, enabling safe error propagation. For example, it can parse a string to an integer and then check if the integer meets a condition. This allows for clean, sequential handling of potentially missing values.",
      "description_length": 426,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Ast.Map",
      "description": "Transforms AST nodes by applying user-defined mappings, recursively processing child nodes of the same type. Operates on OCaml abstract syntax tree elements such as type expressions, variants, fields, and module structures. Used to rewrite or annotate code during parsing or analysis workflows.",
      "description_length": 294,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Sort.Make",
      "description": "Extracts unique identifiers from node representations and converts them to string form for debugging. Operates on abstract types `t` and `id`, where `t` represents nodes and `id` is their unique key. Used to generate human-readable logs of node identities during system diagnostics.",
      "description_length": 282,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Annot",
      "description": "Provides functions to check, retrieve, and manipulate annotations structured as key-value pairs, supporting operations like checking for sections or fields, extracting boolean flags, parsing field values, and merging annotations. Works with annotation data types and schema definitions to validate and extract information from structured metadata. Used to interpret compiler or tool-specific annotations, such as determining configuration flags or locating annotation sources for error reporting.",
      "description_length": 496,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Ast",
      "description": "Transforms OCaml AST elements like type expressions, variants, and fields by recursively applying user-defined mappings, enabling code rewriting or annotation. It supports operations such as node traversal, transformation, and structure modification. Users can define custom functions to alter specific node types while preserving overall syntax. For example, it can replace all occurrences of a type with another or inject additional metadata into field definitions.",
      "description_length": 467,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Check",
      "description": "Validates ATD files by ensuring type definitions are unique and conform to semantic rules. Operates on AST module bodies generated from ATD syntax. Detects duplicate types and invalid structure during parsing.",
      "description_length": 209,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Doc",
      "description": "Provides functions to parse and print documentation in a custom text format, including handling inline and block-level elements. Works with structured data types representing documentation blocks and inline content, and extracts documentation from annotations in AST nodes. Used to generate HTML documentation and validate annotation placement in type definitions.",
      "description_length": 364,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Doc_lexer",
      "description": "Handles paragraph and inline text parsing with custom lexing tables, processing lists of blocks, inlines, and strings into structured document elements. Processes verbatim content and integrates with OCaml's lexing infrastructure for precise tokenization. Used to convert raw string input into a formatted block structure suitable for documentation rendering.",
      "description_length": 359,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Doc_types",
      "description": "Provides functions to manipulate and analyze inline and block elements used in document formatting, including merging, splitting, and checking structural properties. Works with custom types representing text fragments and paragraph-level structures. Used to process and transform markup in a typesetting system.",
      "description_length": 311,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Expand",
      "description": "Expands parametrized type definitions by inlining them and generating unique names for repeated subexpressions, preserving original type information. It operates on module bodies containing type definitions, transforming polymorphic and nested types into concrete forms. It is used to simplify type structures for code generators, ensuring consistent and optimized type representations.",
      "description_length": 386,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Import",
      "description": "This module combines list processing capabilities with safe error handling through optional values. It supports operations like mapping, filtering, and folding on lists, as well as chaining functions that return options to manage failure cases. Users can build data pipelines that transform and validate information, such as parsing and checking numeric inputs. It enables robust processing of both structured data and error-prone computations in a single workflow.",
      "description_length": 465,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Inherit",
      "description": "Expands inherit statements within module bodies, modifying sum types and product types by incorporating inherited fields and variants. It processes Ast.module_body structures, allowing control over whether record fields and variant types are expanded. This is used to generate fully resolved type definitions during code transformation pipelines.",
      "description_length": 346,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Json",
      "description": "Provides functions to extract specific JSON representations from annotated OCaml types, including lists, records, sums, and primitive values. Works with custom types such as `json_int`, `json_float`, `json_record`, and `json_sum` derived from ATD annotations. Used to serialize OCaml values into structured JSON formats based on schema definitions.",
      "description_length": 348,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Jsonschema",
      "description": "Generates JSON Schema from ATD AST, supporting versioning and extra property control. Operates on ATD abstract syntax trees and version identifiers. Used to produce schema definitions for data validation based on ATD type definitions.",
      "description_length": 234,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Lexer",
      "description": "Provides functions to process and tokenize input, including handling numeric conversions (decimal, hexadecimal), UTF-8 encoding, and comment parsing. Works with `Lexing.lexbuf`, `Buffer.t`, and custom string kinds to manage text processing. Used for parsing source code, extracting tokens, and managing lexical state during compilation.",
      "description_length": 336,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Loc",
      "description": "Compares two position pairs to determine their order, useful for sorting or checking relative positions in source code. Operates on tuples of Lexing.position records, representing start and end points. Used to track and compare code ranges during parsing or analysis.",
      "description_length": 267,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Parser",
      "description": "Parses a stream of tokens into an abstract syntax tree representing a complete module. Processes input using a provided lexer and constructs an `Ast.full_module` structure. Handles token sequences generated by a lexical analyzer to build structured program representations.",
      "description_length": 273,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Predef",
      "description": "Provides functions to retrieve and manage a table of core type definitions, including a list of type names, their arity, and associated definitions. Works with lists and hash tables containing strings, integers, and optional type definitions. Used to access predefined types during parsing or code generation tasks.",
      "description_length": 315,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Print",
      "description": "Produces formatted output for ATD data structures using Easy_format.t. Handles type expressions, annotations, and type names, converting them into human-readable strings. Enables custom annotation formatting during pretty-printing of modules.",
      "description_length": 242,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Reflect",
      "description": "Generates OCaml source code from an AST value, producing expressions that recreate the original structure. It handles module definitions, identifiers, and type declarations, emitting code that can be evaluated to reconstruct the input. Used to serialize complex ASTs into readable, executable OCaml code for debugging or code generation.",
      "description_length": 337,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Sort",
      "description": "Provides functions to extract and convert unique node identifiers, enabling custom sorting logic based on user-defined keys. Operates on abstract types `t` and `id`, where `t` represents nodes and `id` is their associated unique value. Used to sort node collections by converting identifiers to strings for comparison or logging.",
      "description_length": 329,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Unique_name",
      "description": "Initializes translation tables with reserved identifiers, prefixes, and a safe prefix to avoid conflicts. Creates unique identifiers by appending suffixes and translates names to a safe format, ensuring they do not collide with reserved terms. Translates and reverses translations, and lists all registered mappings for verification.",
      "description_length": 333,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atd.Util",
      "description": "Reads ATD files from lexbufs, channels, files, or strings, parsing them into abstract syntax trees with options for type expansion, annotation checking, and debugging. Processes module bodies to perform topological sorting of type definitions based on dependencies. Supports customizing error message context and handling inheritance in records and variants.",
      "description_length": 358,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd.Version",
      "description": "Provides a single function to retrieve a version string. Works with the string data type to represent software version identifiers. Used to dynamically access application version information in logging and user-facing displays.",
      "description_length": 227,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "atd",
      "description": "Provides functions to parse ATD syntax, validate type definitions, and generate code for serialization and deserialization. Works with abstract syntax trees and type definitions structured as labeled records and variants. Used to convert ATD schemas into C++ code for efficient data handling in distributed systems.",
      "description_length": 315,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atd",
      "description": "Manages OCaml type definitions and annotations through a suite of interrelated functions, enabling parsing, transformation, validation, and serialization. It handles AST elements, type expansions, and documentation, supporting operations like merging annotations, rewriting code, checking for duplicates, and generating JSON or JSON Schema. Functions process structured data, manage lexical tokens, and produce human-readable or machine-processable outputs. Examples include serializing OCaml values to JSON, expanding type definitions for code generation, and extracting documentation from annotations.",
      "description_length": 603,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 28,
    "meaningful_modules": 28,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 603,
    "min_description_length": 209,
    "avg_description_length": 348.9642857142857,
    "embedding_file_size_mb": 0.10213088989257812
  }
}