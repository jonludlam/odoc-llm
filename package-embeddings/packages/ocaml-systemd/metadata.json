{
  "package": "ocaml-systemd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:55.541548",
  "modules": [
    {
      "module_path": "Daemon.State",
      "library": "systemd",
      "description": "Handles state transitions and status reporting for long-running processes. Provides functions to send state notifications and retrieve process metadata. Works with Unix error types, process IDs, and string-based status messages. Used to manage lifecycle events like readiness, reloading, and termination in systemd-managed services.",
      "description_length": 332,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Journald.Priority",
      "library": "systemd",
      "description": "Converts log priority levels to their corresponding integer values. Works with the `t` variant type representing syslog priority levels. Useful for mapping log severity to numeric codes when submitting entries to the system journal.",
      "description_length": 232,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Journald",
      "library": "systemd",
      "description": "This module sends structured and plain text logs to the system journal, supporting optional source location tracking and severity levels via the `Priority` type. It works with key-value pairs as string lists and includes operations to submit logs with custom fields or simple messages. The child module maps syslog priority levels to integers, enabling severity-based filtering when writing entries. Example uses include logging application events with metadata or sending error and warning messages with appropriate priority codes.",
      "description_length": 532,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Daemon",
      "library": "systemd",
      "description": "This module integrates with systemd daemon features, enabling status notifications, socket-based activation, and runtime environment checks. It supports operations like sending service status updates, retrieving passed file descriptors, and checking if running under systemd, using systemd state codes and Unix file descriptors. The child module extends this by handling state transitions and lifecycle events such as readiness, reloading, and termination for long-running services. Together, they allow services to signal state changes, manage initialization under socket activation, and coordinate cleanup after notifications.",
      "description_length": 628,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 628,
    "min_description_length": 232,
    "avg_description_length": 431.0,
    "embedding_file_size_mb": 0.014945030212402344
  }
}