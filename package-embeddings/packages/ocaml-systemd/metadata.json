{
  "package": "ocaml-systemd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:20.662477",
  "modules": [
    {
      "module_path": "Daemon.State",
      "description": "Provides operations to create, update, and query a stateful value, including binding and mapping over state transitions. Works with a custom type `t` that encapsulates a mutable value and its history. Used to manage application state in a controlled, reversible manner during interactive sessions.",
      "description_length": 297,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Journald.Priority",
      "description": "Converts priority levels to integer representations for system logging and event filtering. Operates on a custom type representing distinct severity levels from critical to debug. Used to determine log handling behavior in real-time monitoring systems.",
      "description_length": 252,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ocaml-systemd",
      "description": "Provides functions to parse and manipulate systemd unit files, including loading configuration sections, extracting properties, and validating service definitions. Works with structured data like key-value pairs, sections, and service-specific parameters. Used to read and modify service unit files for system initialization and service management tasks.",
      "description_length": 354,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Daemon",
      "description": "Manages application state through a mutable, history-aware type, enabling controlled modifications and rollbacks. Supports operations like binding and mapping to transform state while preserving transition history. Allows for precise manipulation of dynamic values during interactive processes. Example uses include undo functionality, session tracking, and stateful user interactions.",
      "description_length": 385,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Journald",
      "description": "Encapsulates log priority conversion and handling, enabling precise control over system logging through a custom severity type. Supports operations to map and compare priority levels, facilitating real-time log filtering and routing. Allows developers to define and enforce logging policies based on severity, such as triggering alerts for critical events or silencing debug messages. Provides direct integration with system monitoring tools by standardizing log entry metadata.",
      "description_length": 478,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 478,
    "min_description_length": 252,
    "avg_description_length": 353.2,
    "embedding_file_size_mb": 0.018613815307617188
  }
}