{
  "package": "ocaml-systemd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:52:41.407334",
  "modules": [
    {
      "module_path": "Journald.Priority",
      "library": "systemd",
      "description": "This module defines log priority levels as enumerated constants, including EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, and DEBUG. It provides a direct mapping between these symbolic priorities and their corresponding integer values via the `to_int` function. These priorities are used to categorize log messages by severity when submitting entries to the system journal.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Daemon.State",
      "library": "systemd",
      "description": "Handles state transitions and status reporting for daemon processes. Provides functions to send state updates to systemd and interpret responses, working with states like readiness, reloading, and stopping. Used to manage process lifecycle events and communicate health or status changes directly to the service manager.",
      "description_length": 320,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Journald",
      "library": "systemd",
      "description": "This module provides functions to submit structured and plain text log entries to the system journal, with support for associating log priorities and source location metadata. It works with key-value pairs represented as lists of string tuples and uses an enumerated priority type to classify log severity. Concrete use cases include logging application events with custom fields, emitting simple messages with severity levels, and debugging with automatic source tracking.",
      "description_length": 473,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Daemon",
      "library": "systemd",
      "description": "This module provides direct integration with systemd for managing daemon processes. It includes functions to notify the init system of state changes, retrieve file descriptors passed during socket activation, and check if the system is running under systemd. These operations are used to implement lifecycle management, health reporting, and socket-based activation in daemonized applications.",
      "description_length": 393,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 473,
    "min_description_length": 320,
    "avg_description_length": 390.0,
    "embedding_file_size_mb": 0.058348655700683594
  }
}