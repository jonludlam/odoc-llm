{
  "package": "diffast-langs-verilog-parsing",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 73,
  "creation_timestamp": "2025-08-15T15:25:36.739179",
  "modules": [
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF.U.T",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions to extract tokens, positions, and location information from Verilog AST nodes and token structures. It includes operations for converting AST elements to their lexical components, checking token properties like keyword status, and deriving source locations from node descriptions. Concrete use cases include mapping AST nodes to their original source tokens and positions during parsing or analysis of Verilog code.",
      "description_length": 446,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF.U.Aux",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides operations for error handling, symbol registration, and lexical scope management during parsing. It works with lexing buffers, source positions, AST nodes, identifiers, and scope structures to track locations, resolve symbols, and manage identifier attributes. These functionalities are essential for parsing Verilog code, reporting errors with precise source information, and maintaining symbol tables during lexical resolution.",
      "description_length": 450,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F.U.T",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions to convert various AST nodes from the Verilog parser into tokens paired with location information. It supports operations for extracting raw tokens, positions, and source locations from structured data such as node descriptions, module items, statements, expressions, and ports. Use cases include mapping AST elements to their lexical representation and determining token properties like size or keyword classification.",
      "description_length": 450,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF.Tok",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions to convert abstract syntax tree nodes into tokens with location information, extract positional data from token tuples, and check token properties like keyword status or compiler directives. It operates on Verilog AST nodes, tokens, and lexing positions to produce locations and string representations. Concrete use cases include mapping parsed Verilog constructs to their source locations and classifying tokens during lexical analysis.",
      "description_length": 468,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F.U.Aux",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module handles source position tracking for error diagnostics, manages scope hierarchies for Verilog constructs like classes and packages, and converts abstract syntax tree nodes into precise location data. It operates on lexical buffers, AST structures, and scope tables to support parsing tasks such as error recovery, symbol registration, and contextual import resolution.",
      "description_length": 380,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF.A",
      "library": "diffast-langs-verilog-parsing",
      "description": "This component tracks lexical positions and generates parse errors with location details while registering Verilog constructs like types and interfaces. It manages scope transitions and identifier resolution, operating on lexing buffers, scopes, and AST nodes to support symbol table management during Verilog code parsing and semantic analysis.",
      "description_length": 345,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.U.T",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module converts Verilog AST nodes into tokens and location information, extracting raw tokens, lexical positions, and source locations from structured data. It works with tuples containing tokens and positions, as well as Verilog AST nodes like module items, statements, expressions, and case items. Use this module to map Verilog syntax elements to their source locations or to inspect token properties such as size, string representation, and keyword classifications.",
      "description_length": 474,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.U.Aux",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module supports error reporting during Verilog parsing by tracking source positions and registering language constructs like types and packages, while managing scope transitions and identifier resolution through symbol table operations. It works with lexing buffers, abstract syntax tree nodes, and scope hierarchies to resolve identifiers and convert parse locations into precise lexical positions. Typical use cases include diagnosing syntax errors, enabling tool integrations via accurate position data, and maintaining contextual state during recursive descent parsing.",
      "description_length": 578,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF.U",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions for lexical analysis and tokenization of Verilog code, including lexeme extraction, buffer management, source position tracking, and token construction with location metadata. It handles preprocessing directives like macro definitions and include statements, operating on lexing buffers, source positions, and parsing state to support error reporting, symbol resolution, and macro expansion during Verilog parsing.",
      "description_length": 445,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Parser.Make.MenhirInterpreter",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module enables incremental parsing and state manipulation for Verilog grammars using Menhir, offering functions to drive parser execution step-by-step, manage token input streams, and inspect or modify parser checkpoints and stacks. It provides fine-grained control over parsing flow through operations like state transitions, symbol reductions, and environment queries, while working with typed nonterminals representing Verilog constructs (modules, expressions, statements). Key use cases include AST construction, error recovery, and grammar analysis for Verilog/SystemVerilog code processing.",
      "description_length": 601,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokens.Make.MenhirInterpreter",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a comprehensive set of lexical tokens used in parsing Verilog and SystemVerilog code, including keywords, operators, and identifiers. Each token variant represents a distinct syntactic element such as `T_MODULE`, `T_IF`, `T_PLUS`, and `T_IDENTIFIER`, often carrying associated values like strings or custom types for semantic processing. It is used directly by the Menhir parser to drive grammar recognition and AST construction during Verilog source analysis.",
      "description_length": 480,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.TBF",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements token buffering and partial parsing for Verilog code, supporting operations like token lookahead, macro expansion, and branch management during lexical analysis. It works with Verilog tokens, partial parse states, and location metadata to enable incremental parsing, error recovery, and conditional compilation. Concrete use cases include tracking nested `ifdef` branches, resolving macro references, and reconstructing source locations during AST construction.",
      "description_length": 484,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.U",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module performs lexical analysis and preprocessing for Verilog, focusing on token construction with source location tracking, macro expansion, and include directive resolution. It operates on lexing buffers and positional data to parse comments, manage nested file inclusions, and qualify system include paths, producing enriched tokens for downstream parsing. Its utilities are critical for compiling Verilog code with precise error diagnostics and seamless integration of external dependencies.",
      "description_length": 501,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F.U",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides low-level lexical processing capabilities for Verilog code, focusing on tokenization, source location tracking, and preprocessing macro/expansion management. It operates on lexing buffers, abstract syntax tree (AST) nodes, and positional data structures to enable precise parsing and error reporting. Key use cases include handling Verilog include directives through `qtoken` construction, managing macro expansions, and maintaining comment/source position integrity during lexical analysis.",
      "description_length": 512,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Parser.Make.Incremental",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides incremental parsing functions for Verilog syntax elements, supporting partial parsing of expressions, module items, port lists, case items, and block declarations. It works with Verilog AST nodes and partial structures, using Menhir checkpoints to allow resumption of parsing at specific points. Concrete use cases include parsing incomplete Verilog code during interactive editing or streaming large Verilog files in chunks.",
      "description_length": 446,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Ulexer.F.Aux",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module tracks lexical positions and generates diagnostic messages with location context during Verilog parsing, while managing scope transitions and identifier resolution for symbol tables. It operates on lexical buffers, abstract syntax tree nodes, and hierarchical scope structures to handle tasks like error node creation, type registration, and cross-scope identifier binding. Key use cases include parser state synchronization, semantic error detection in hardware descriptions, and symbol resolution for Verilog constructs like modules and packages.",
      "description_length": 560,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F.Tok",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions to extract tokens, positions, and locations from parsed Verilog nodes, converting AST elements into corresponding lexical tokens and location data. It operates on Verilog AST nodes and token structures, enabling precise tracking of source code positions for elements like module items, statements, expressions, and case items. Use cases include generating accurate error messages, source-to-source transformations, and tooling that requires positional information from Verilog code.",
      "description_length": 513,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F.A",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides utilities for precise location tracking and error reporting during Verilog parsing, alongside scope management for resolving identifiers and language constructs. It operates on lexical buffers, abstract syntax tree nodes, and hierarchical scopes to facilitate symbol registration, import resolution, and contextual error generation. These capabilities are essential for parsing Verilog code, maintaining symbol tables, and ensuring accurate diagnostics during language processing tasks.",
      "description_length": 507,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F.A",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides functions for parsing error handling, symbol registration, and lexical scope management during Verilog source code analysis. It operates on lexing buffers, symbol tables, and abstract syntax trees to track source locations, resolve identifiers, and manage hierarchical design contexts, particularly for tasks like importing packages and determining variable types during AST construction.",
      "description_length": 409,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Ulexer.F.T",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module processes lexical tokens and locations from Verilog AST nodes, converting them into structured token and location pairs. It supports specific Verilog constructs such as module items, statements, expressions, and case items by extracting their associated tokens and source locations. Use cases include mapping AST elements to their original source positions for error reporting, pretty printing, or transformation tools that require precise source tracking.",
      "description_length": 468,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.SequenceExpression",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a labeled sum type representing sequence expressions in Verilog, such as concatenation, repetition, and logical operators. It provides functions to convert these expressions to strings, extract identifiers, and serialize them with tags. Use this module when parsing or generating Verilog sequence expressions for hardware verification or synthesis tools.",
      "description_length": 374,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokens.Make",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a comprehensive set of lexical tokens used in parsing Verilog and SystemVerilog code, including keywords, operators, and identifiers. Each token variant represents a distinct syntactic element such as `MODULE`, `IF`, `PLUS`, and `IDENTIFIER`, often carrying associated values like strings or custom types for semantic processing. It is used directly by the Menhir parser to drive grammar recognition and AST construction during Verilog source analysis.",
      "description_length": 472,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.CompilerDirective",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of compiler directives used in Verilog parsing, such as macro definitions, file inclusion, time scaling, and error handling. It provides operations to convert these directives to strings, extract their names, and serialize them into tagged representations. Use cases include processing Verilog source code during compilation, handling preprocessing instructions, and analyzing or transforming Verilog syntax trees.",
      "description_length": 440,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.OverloadOperator",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of labeled operators used in Verilog parsing, including arithmetic, comparison, assignment, and increment/decrement operations. It provides conversions to string representations and tag names for use in abstract syntax tree construction. These labels are used to distinguish operator types during parsing and semantic analysis in Verilog code processing.",
      "description_length": 380,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.IncOrDecOperator",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a type `t` representing Verilog increment and decrement operators, including pre/post increment and decrement variants. It provides functions to convert these operators to string representations, extract tag names, and serialize them with associated attributes. This module is used to parse and manipulate Verilog expressions involving operator tags, particularly in abstract syntax tree (AST) transformations and code generation tasks.",
      "description_length": 456,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.ModuleSpec",
      "library": "diffast-langs-verilog-parsing",
      "description": "Represents module specification types in Verilog parsing, distinguishing between normal modules and macros. Converts module specification values to string representations for debugging or output. Used to label and differentiate module declarations during syntax tree processing.",
      "description_length": 278,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.SystemTask",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of labels representing system task categories in Verilog parsing, such as `Error`, `Warning`, and `Info`. It provides functions to convert these labels to strings, retrieve their names, generate tagged representations, and extract unique identifiers. These operations support logging, error reporting, and task categorization during Verilog code analysis.",
      "description_length": 381,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.Strength",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of label strength values used in Verilog parsing, including both named strengths like `STRONG0` and `WEAK1` and an `Anonymous` case. It provides conversions to string representations and tagged forms with associated attributes. These operations support handling signal strength annotations in Verilog syntax trees.",
      "description_length": 340,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.ConcurrentAssertion",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type `t` representing different kinds of concurrent assertion labels in Verilog, such as `AssertProp`, `AssumeProp`, and `CoverSeq`. It provides functions to convert these labels to strings, simple string representations, and tagged tuples with associated data. These operations support parsing and processing Verilog code elements like assertions and coverage directives.",
      "description_length": 402,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Parser_aux.F",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides utilities for parsing Verilog code with error handling, location tracking, and symbol registration, operating on lexing buffers, abstract syntax tree (AST) nodes, and identifiers. It supports scope management, identifier resolution, and import operations across packages and scopes, enabling tasks like compiling Verilog modules with complex type, class, and interface dependencies.",
      "description_length": 403,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.TimingCheck",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of timing check types used in Verilog parsing, such as `Setup`, `Hold`, and `Recovery`. It provides functions to convert these types to strings, retrieve their names, and serialize them with associated data as tagged strings. These operations support analysis and processing of timing constraints in hardware description files.",
      "description_length": 353,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.Expression",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a labeled type for Verilog expressions, including numbers, operators, method calls, and system tasks. It provides functions to convert expressions to strings, extract identifiers and values, and retrieve structured tags with associated metadata. Use cases include parsing and analyzing Verilog code for simulation, synthesis, and static analysis tools.",
      "description_length": 372,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.JoinSpec",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a type `t` with three variants (`NORMAL`, `ANY`, `NONE`) representing join specifications in Verilog parsing. It provides `to_string` and `to_rep` functions to convert these variants to their string representations. Used to handle and display join type annotations in Verilog netlist processing tasks.",
      "description_length": 321,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.PropertyExpression",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type representing Verilog property expressions such as temporal operators, logical connectives, and control statements. It provides functions to convert these expressions to string representations, extract tags with associated data, and retrieve identifiers from expressions. Use this module when processing or analyzing Verilog assertions to manipulate or inspect property expressions directly.",
      "description_length": 425,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.BinsSpec",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a type `t` with three variants representing bin specification categories in Verilog parsing. It provides functions to convert these variants to string representations, supporting different formatting needs. These functions are used to generate labels or identifiers for bins in coverage models.",
      "description_length": 314,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.Qualifier",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of qualifiers used in Verilog declarations, such as `Protected`, `Local`, and `Virtual`. It provides functions to convert these qualifiers to string representations and to generate tagged output with associated attributes. These operations are used to represent and manipulate Verilog modifier keywords in a structured way during parsing or code generation tasks.",
      "description_length": 389,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Parser.Make",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements a Verilog parser with functions to parse specific syntactic constructs like expressions, module items, port lists, and case items, producing partial or complete AST nodes. It operates on lexbuf inputs and token streams to build Verilog abstract syntax trees. Use cases include parsing Verilog source files, handling incomplete code fragments, and constructing ASTs for downstream analysis or transformation tools.",
      "description_length": 436,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.SimpleImmediateAssertion",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type `t` representing simple immediate assertion labels in Verilog, including `Assert`, `Assume`, and `Cover`. It provides functions to convert these labels to strings, simplified string representations, and tagged string pairs with associated attributes. These operations support parsing and processing of Verilog assertions in tools like linters or code analyzers.",
      "description_length": 396,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Scanner.F",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements token buffering and partial parsing for Verilog code, supporting operations like token lookahead, macro expansion, and branch management during lexical analysis. It works with Verilog tokens, partial parse states, and location metadata to enable incremental parsing, error recovery, and conditional compilation. Concrete use cases include tracking nested `ifdef` branches, resolving macro references, and reconstructing source locations during AST construction.",
      "description_length": 484,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Token.F",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module facilitates conversion of AST nodes into lexical tokens and source location metadata, operating on structures like `token`, `Astloc.t`, and lexing position tuples. It provides utilities to extract token properties (e.g., keyword status, string values) and construct location objects from positional data. These operations are particularly useful during parser implementation or source code analysis tasks requiring precise error reporting and token-to-source mapping.",
      "description_length": 479,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.BinaryOperator",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a comprehensive set of binary operator types used in Verilog parsing, including arithmetic, comparison, logical, bitwise, and shift operations. It provides functions to convert these operators to string representations and structured tags with associated metadata. These capabilities are essential for generating human-readable output, serializing Verilog expressions, or supporting analysis and transformation tools.",
      "description_length": 437,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.PortDirection",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines types and operations for representing and converting Verilog port directions. It includes string conversion functions for both full and simplified string representations, and generates tagged string output with associated attributes. It is used to handle direction annotations in Verilog AST nodes during parsing and code generation tasks.",
      "description_length": 359,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.UnaryOperator",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a set of unary operators used in Verilog parsing, including arithmetic, logical, and bitwise operations. It provides functions to convert these operators to string representations and to generate tagged output with associated attributes. Use cases include AST construction and code generation for Verilog expressions.",
      "description_length": 337,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.Statement",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a labeled statement type for Verilog parsing, including constructors for various statement kinds such as assignments, control structures, and procedural operations. It provides functions to convert statements to strings, extract identifiers, and retrieve structured tags with associated metadata. Use cases include analyzing or transforming Verilog code during compilation or static analysis tasks.",
      "description_length": 418,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer.F",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements a token buffer system for Verilog parsing with operations to manage token streams, track source code locations, and handle partial parsing states. It works with lexical tokens, abstract syntax tree (AST) fragments, and location tracking structures to support tasks like error recovery, macro expansion, and branch context management during parsing. Concrete use cases include reconstructing source code from AST nodes, handling conditional compilation branches, and maintaining precise token-to-source mappings for diagnostics and code transformations.",
      "description_length": 575,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.AlwaysSpec",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines labels for different types of Verilog `always` blocks, including combinational logic, flip-flops, and latches. It provides functions to convert these labels to string representations, used for analysis or transformation tasks in Verilog code processing. The module is useful when distinguishing behavioral semantics of `always` blocks during parsing or synthesis.",
      "description_length": 383,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.EventExpression",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type `t` representing different event expressions in Verilog, such as `Posedge`, `Negedge`, and `Or`. It provides functions to convert these expressions to strings, extract identifiers, and serialize them with associated data. Use cases include parsing and generating Verilog event controls and sensitivity lists.",
      "description_length": 343,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.NetType",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type representing different net types in Verilog, such as `Wire`, `Tri`, and `Supply0`. It provides functions to convert these net types to strings, simplified string representations, and tagged tuples with associated data. These operations are used to serialize or inspect net type values during parsing or analysis of Verilog code.",
      "description_length": 363,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Labels.Gate",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type representing different types of logic gates and provides functions to convert these gate values to string representations. It includes specialized functions for extracting tags and annotations associated with gate types. Use this module when processing or analyzing Verilog circuit descriptions that require gate-level classification and labeling.",
      "description_length": 382,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokens_.T",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a comprehensive set of lexical tokens used in parsing Verilog and SystemVerilog code, including keywords, operators, literals, and syntactic elements. It works with concrete data types like strings, integers, and custom label and AST node types to represent parsed Verilog constructs. These tokens are used directly by the parser to recognize language features such as module declarations, procedural blocks, assertions, and preprocessor directives during Verilog syntax analysis.",
      "description_length": 500,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.DeferredImmediateAssertion",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a type `t` representing different kinds of deferred immediate assertions in Verilog, including `Assert`, `Assume`, `Cover`, and `Anonymous`. It provides functions to convert these assertion types to strings and to extract a tag with associated data. Use cases include parsing and processing Verilog assertions for simulation or formal verification tools.",
      "description_length": 374,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Ulexer.F",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module performs lexical analysis and preprocessing for Verilog code, focusing on token generation, macro expansion, and directive handling like `include` and conditional compilation. It operates on lexing buffers, source positions, and AST nodes to enable precise error reporting, symbol resolution, and source-to-token mapping. Key use cases include resolving file inclusions, managing undefined macros, and maintaining contextual state during complex preprocessing scenarios.",
      "description_length": 482,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.AssignmentOperator",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a variant type representing Verilog assignment operators such as `=`, `+=`, `-=`, and bitwise and shift equivalents. It provides functions to convert these operators to string representations, including simplified forms and tagged names with associated attributes. Use cases include parsing and pretty-printing Verilog code, where precise operator representation is required for syntax trees or code generation.",
      "description_length": 431,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels.DataType",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a sum type representing Verilog data types, including primitive types like `Bit`, `Logic`, and `Integer`, as well as complex types such as `Struct`, `Union`, and `Enum`. It provides functions to convert these types to strings, extract identifiers, and serialize them into tagged representations. Use cases include parsing and analyzing Verilog code, type checking, and generating type-related diagnostics in a Verilog compiler or linter.",
      "description_length": 457,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Lib",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides a function to convert traditional Menhir parsers into revised parsers that track token positions, and a predefined macro table for Verilog preprocessing. It works with parser types from MenhirLib and Lexing positions from Stdlib. Use it to enhance parser error reporting with precise source locations and to set up macro definitions for Verilog files.",
      "description_length": 372,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Source",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a language specification type for Verilog and SystemVerilog versions, including V1995, V2001, V2005, SV2005, and SV2009. It provides a direct mapping from each language variant to its string representation. Use this module when handling version-specific parsing or processing of Verilog source code.",
      "description_length": 319,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Context",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module manages contextual state during Verilog parsing through a tagged data structure that tracks syntactic scopes (e.g., module items, expressions, generate blocks) and activation status. It offers operations to inspect context tags, check active status, and transition between scopes, enabling precise parsing decisions for constructs like case items, port lists, and nested blocks. The context tracking ensures correct handling of Verilog's hierarchical and conditional compilation contexts during analysis.",
      "description_length": 516,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Token",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module handles conversion between lexical tokens and source location metadata, operating on types like `token`, `Astloc.t`, and lexing positions. It provides functions to extract token representations, map tokens to source locations, and format tokens as strings with optional location details. Concrete use cases include error reporting during parsing and generating precise source code mappings for analysis tools.",
      "description_length": 421,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Printer",
      "library": "diffast-langs-verilog-parsing",
      "description": "Converts Verilog AST nodes into human-readable text format. Works directly with the `Verilog_parsing.Ast.node` type. Useful for debugging parsers or generating Verilog code from an AST.",
      "description_length": 185,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Common",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module handles common parsing tasks for Verilog files, including utilities for reporting errors and warnings during lexing and parsing. It defines an `identifier` type as a string and provides functions like `fail_to_parse` for fatal errors, `parse_warning` for positional warnings, and `warning_msg` for general warning output. It also includes `num_to_ordinal` for converting integers to ordinal strings, and lists supported file extensions.",
      "description_length": 448,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokens_",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a rich set of lexical tokens representing Verilog and SystemVerilog language elements such as keywords, operators, literals, and syntactic markers. It includes detailed token variants for hardware constructs like module declarations, procedural blocks, assertions, and preprocessor directives, working with data types like strings, integers, and AST nodes. These tokens are used directly by the parser to identify and structure Verilog code during syntax analysis.",
      "description_length": 484,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Parser",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements a Verilog parser that provides functions to parse syntactic constructs such as expressions, module items, port lists, and case items, producing partial or complete AST nodes. It operates on lexbuf inputs and token streams to construct Verilog abstract syntax trees. Use cases include parsing Verilog source files, handling incomplete code fragments, and building ASTs for analysis or transformation tools.",
      "description_length": 428,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Macro",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module enables representing and resolving Verilog macro definitions, handling raw content, resolution state, conditionality, and source location tracking. It manipulates macro bodies by toggling a boolean flag to control conditional compilation state transitions, supporting workflows like macro expansion and parsing where dynamic state updates and conditional directive management are critical.",
      "description_length": 401,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokens",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines a rich set of lexical tokens representing Verilog and SystemVerilog syntactic elements, such as keywords, operators, and identifiers, each capturing relevant semantic data. It includes variants like `MODULE`, `IF`, `PLUS`, and `IDENTIFIER` with associated values for precise parsing and AST construction. Used directly by the Menhir parser, it enables accurate grammar recognition and source code analysis for Verilog tooling.",
      "description_length": 446,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Ast",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines operations for constructing and manipulating abstract syntax trees (ASTs) with support for node creation, relocation, and traversal. It works with node structures that have lexical locations, labels, and children, along with partial AST fragments representing Verilog constructs like module items, expressions, and port lists. Concrete use cases include building AST nodes from parsed elements, extracting identifiers from scoped constructs, and traversing or measuring tree structures during analysis or transformation passes.",
      "description_length": 547,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Ulexer",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module provides low-level lexical analysis operations for Verilog code, including character classification, state transitions, and token recognition via precomputed lookup tables and partition functions. It operates on character streams and lexing buffers, handling tasks like macro expansion, system call detection, and preprocessor directive parsing. The implementation leverages specialized data structures such as `__sedlex_table_*` for efficient character set matching and `__sedlex_partition_*` functions to map input characters to lexical states, enabling precise tokenization and error reporting during Verilog source processing.",
      "description_length": 642,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_parsing.Scanner",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements token buffering and partial parsing for Verilog code, supporting operations like token lookahead, macro expansion, and branch management during lexical analysis. It works with Verilog tokens, partial parse states, and location metadata to enable incremental parsing, error recovery, and conditional compilation. Concrete use cases include tracking nested `ifdef` branches, resolving macro references, and reconstructing source locations during AST construction.",
      "description_length": 484,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Label",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module supports construction, conversion, and analysis of labeled syntactic constructs in Verilog/SystemVerilog, including declarations, expressions, statements, and structural elements. It employs a polymorphic variant type to represent these constructs, carrying associated data like identifiers or sub-expressions, while unifying categories such as assertions, timing checks, and compiler directives into a single abstraction. These capabilities facilitate parser development, AST manipulation, and error handling in tools processing complex Verilog/SystemVerilog codebases with mixed language features and compiler-specific extensions.",
      "description_length": 644,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Tokenbuffer",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements a token buffer system for Verilog parsing with operations to manage token streams, track source code locations, and handle partial parsing states. It works with lexical tokens, abstract syntax tree (AST) fragments, and location tracking structures to support tasks like error recovery, macro expansion, and branch context management during parsing. Concrete use cases include reconstructing source code from AST nodes, handling conditional compilation branches, and maintaining precise token-to-source mappings for diagnostics and code transformations.",
      "description_length": 575,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Labels",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines labeled sum types and associated operations for representing Verilog language constructs like operators, expressions, statements, and compiler directives. It provides functionality for converting these constructs to string or tagged representations, extracting identifiers, and retrieving metadata, which supports tasks such as parsing, abstract syntax tree (AST) construction, and code generation in Verilog toolchains. The types and functions are specifically designed to handle Verilog's syntactic and semantic elements, including timing checks, system tasks, and unary/binary operations, enabling analysis and transformation workflows.",
      "description_length": 659,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Label_common",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module defines string constants used for attribute names in Verilog parsing, including identifiers for labels, values, paths, and specifications. It also provides a function to convert string literals into encoded paths. These values are used to standardize attribute handling when processing Verilog AST nodes or generating related output.",
      "description_length": 345,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing.Parser_aux",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module manages symbol tables and scope frames for Verilog parsing, supporting operations like frame creation, copying, and identifier attribute manipulation. It works with hashtables mapping identifiers to attributes, scoped attributes for packages, classes, and functions, and a parser state tracking symbol tables, stack frames, and variable types. Concrete use cases include resolving identifiers within nested scopes, handling imports from built-in packages, and maintaining symbol visibility during Verilog module and interface parsing.",
      "description_length": 546,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_parsing",
      "library": "diffast-langs-verilog-parsing",
      "description": "This module implements a comprehensive Verilog parsing infrastructure with AST construction, token handling, and context tracking. It supports parsing Verilog and SystemVerilog code into structured abstract syntax trees, handling macros, lexical tokens, and scoped symbol tables. Concrete use cases include building and transforming Verilog ASTs, resolving identifiers in nested scopes, and managing conditional compilation and macro expansion during source code analysis.",
      "description_length": 472,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 92,
    "meaningful_modules": 73,
    "filtered_empty_modules": 19,
    "retention_rate": 0.7934782608695652
  },
  "statistics": {
    "max_description_length": 659,
    "min_description_length": 185,
    "avg_description_length": 440.9178082191781,
    "embedding_file_size_mb": 1.0583820343017578
  }
}