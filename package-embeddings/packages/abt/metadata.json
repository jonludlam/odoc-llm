{
  "package": "abt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:29:06.499443",
  "modules": [
    {
      "module_path": "Abt.MakeAbt",
      "description": "Provides functions to retrieve the arity of a structure as a list of integers, compare two structures for equality, and convert a structure to its string representation. Works with the abstract type `t` representing some structured data. Used to analyze and serialize abstract syntax tree nodes during parsing or transformation processes.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Variable.Var",
      "description": "Provides operations to create, compare, and convert variables represented as tuples of strings and integers. Includes equality checks, string serialization, and user-friendly string formatting. Used to uniquely identify and manipulate symbolic variables in code analysis or transformation pipelines.",
      "description_length": 299,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Variable",
      "description": "Provides operations to create, compare, and convert variables between internal and user-facing string representations. Works with the `t` type, representing unique variable identifiers. Used to manage symbolic variables in code generation and expression parsing.",
      "description_length": 262,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "abt",
      "description": "Provides functions to parse, validate, and manipulate abstract syntax trees, including node creation, traversal, and transformation. Operates on custom tree structures with labeled nodes and child lists. Used to implement language interpreters and code analysis tools.",
      "description_length": 268,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt",
      "description": "Manages symbolic variables through operations that create, compare, and convert between internal and external representations. It works with the `t` type, enabling precise control over variable identities in code generation and parsing. Users can generate unique identifiers, map them to human-readable strings, and ensure consistency across different stages of processing. This supports tasks like renaming variables, checking equality, and serializing expressions.",
      "description_length": 466,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Variable",
      "description": "Provides operations to create, compare, and convert variables between internal and user-facing string representations. Works with the `t` type, representing symbolic variables. Used to uniquely identify and manipulate variables in symbolic computation or code generation contexts.",
      "description_length": 280,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Operator",
      "description": "Returns the list of valid arities for a given operator, compares operators for equality, and converts an operator to its string representation. Works with the abstract type `t` representing operators. Used to validate operator usage in expression parsing and to generate human-readable representations during code analysis.",
      "description_length": 323,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 7,
    "filtered_empty_modules": 3,
    "retention_rate": 0.7
  },
  "statistics": {
    "max_description_length": 466,
    "min_description_length": 262,
    "avg_description_length": 319.42857142857144,
    "embedding_file_size_mb": 0.025864601135253906
  }
}