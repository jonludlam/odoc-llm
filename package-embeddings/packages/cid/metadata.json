{
  "package": "cid",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:37.283014",
  "modules": [
    {
      "module_path": "Cid.S",
      "library": "cid",
      "description": "This module builds and manipulates CIDs (Content Identifiers) using multihash, multibase, and multicodec encodings. It supports creating CIDs from raw components, parsing them from strings or binary buffers, and converting them back to strings or binary representations. Use cases include working with IPFS identifiers, validating CID encodings, and handling versioned content addresses in distributed systems.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cid.Make",
      "library": "cid",
      "description": "This module builds and manipulates Content Identifiers (CIDs) using a specified multihash implementation. It supports creating CIDs from version, base encoding, codec, and hash values, parsing CIDs from strings or binary data, and converting CIDs to string or binary representations. It is used to handle content-based addressing in systems like IPFS, where precise CID encoding and decoding are required.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cid",
      "library": "cid",
      "description": "This module implements versioned Content Identifiers (CIDs) with support for multibase encoding, multicodec data typing, and multihash content addressing, enabling construction, parsing, comparison, and serialization of CIDs from raw bytes or strings. It provides core operations to build CIDs from components like version, codec, and multihash, and supports converting between string and binary representations for use in content-addressed storage or decentralized systems. Child modules extend this functionality by integrating specific multihash implementations and encoding transformations, allowing precise handling of CID versions and formats in applications like IPFS. Examples include validating CID encodings, generating content references from cryptographic hashes, and serializing CIDs for network transmission or storage.",
      "description_length": 833,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 833,
    "min_description_length": 405,
    "avg_description_length": 549.3333333333334,
    "embedding_file_size_mb": 0.011316299438476562
  }
}