{
  "package": "ozulip",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:33.028236",
  "modules": [
    {
      "module_path": "Ozulip.Events.Message",
      "library": "ozulip",
      "description": "This module defines the structure of Zulip message events, including message metadata like sender details, recipients, content, and flags. It provides functions to inspect message properties (e.g., checking flags, message type), generate replies, and construct message destinations. Use cases include filtering messages based on user identity, generating contextual replies, and determining message visibility or trustworthiness based on sender attributes.",
      "description_length": 456,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ozulip.Events",
      "library": "ozulip",
      "description": "This module orchestrates real-time interaction with Zulip's API, enabling event processing, command response, and queue management for message streams and heartbeat monitoring. It defines core types like `Message` and `events_queue`, supporting operations to consume, filter, and react to events, such as building bots that respond to user input or maintain persistent connections. The child module structures message events with utilities to inspect metadata, construct replies, and validate senders, enabling precise filtering and contextual responses. Together, they allow both high-level bot logic and low-level event stream manipulation.",
      "description_length": 642,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ozulip.Messages",
      "library": "ozulip",
      "description": "This module handles sending, editing, deleting, and uploading files for messages in a messaging system. It works with message destinations using types like `destination` and `propagate_mode`, and supports operations such as sending private or stream messages, editing message content or topic, and uploading files by path or content. Concrete use cases include sending a private message to a list of user emails, uploading a file attachment, or editing the topic of a stream message.",
      "description_length": 483,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ozulip",
      "library": "ozulip",
      "description": "This module enables interaction with a Zulip server using an initialized configuration, supporting message sending, retrieval, and real-time event processing. It defines core types like `Message` and `events_queue`, and integrates submodules for event stream orchestration and message manipulation, including sending, editing, and file uploads. Operations allow bots to respond to user input, manage message streams, upload attachments, and maintain persistent connections. Specific uses include building chatbots, automating message edits, and handling real-time event queues with custom filtering and responses.",
      "description_length": 613,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 642,
    "min_description_length": 456,
    "avg_description_length": 548.5,
    "embedding_file_size_mb": 0.014942169189453125
  }
}