{
  "package": "herdtools7",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 112,
  "creation_timestamp": "2025-07-15T23:22:51.699550",
  "modules": [
    {
      "module_path": "Asllib.Diet.Z.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of integer values with operations to create intervals from start and end points and access their bounds. It works with integer elements and interval structures, enabling precise range definitions. Use it to model continuous ranges of integers, such as defining numeric intervals for data filtering or range-based computations.",
      "description_length": 359,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicInterpreter.IEnv",
      "library": "herdtools7.asllib",
      "description": "This module offers operations for scoped variable management, including declarations, assignments, and removals, alongside scope nesting control and stack size adjustments for recursion tracking. It operates on environment structures that encapsulate global and local variable bindings, scope hierarchies, and loop unrolling counters, enabling deterministic execution in",
      "description_length": 370,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.Make.IEnv",
      "library": "herdtools7.asllib",
      "description": "This module implements operations for managing interpreter environments in ASL execution, including variable declarations, scope control, and stack allocation tracking. It operates on hierarchical environment structures (`env`) and global state containers (`global`) to handle nested scopes, dynamic variable bindings, and stack size adjustments during interpretation. These capabilities are critical for implementing function calls, loop unrolling, and memory management in ASL's execution model.",
      "description_length": 497,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Diet.Make.Interval",
      "library": "herdtools7.asllib",
      "description": "This module constructs and manipulates intervals over a totally ordered type, providing operations to create intervals from start and end points, and to access those endpoints. It works with a comparable element type `elt` and represents intervals as closed ranges. Concrete use cases include modeling time ranges, numeric intervals, or bounded sequences where precise start and end values are required.",
      "description_length": 403,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.Make.Properties",
      "library": "herdtools7.asllib",
      "description": "This module provides a function `order_respected` that checks whether a given list of nodes and successor function represents a valid topological order. It works with a list of nodes and a successor function mapping each node to its neighbors. A concrete use case is validating the output of a topological sort against a known graph structure.",
      "description_length": 343,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Diet.Int.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of integers with inclusive bounds, providing operations to create intervals from start and end points and access their endpoints. It works with integer values and interval structures that define a range of integers. Concrete use cases include modeling contiguous integer ranges for set operations, partitioning integer domains, and defining numeric constraints.",
      "description_length": 394,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Int64.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of 64-bit integers using a start and end value. It provides operations to construct intervals and access their bounds. Useful for defining and manipulating ranges of integer values, such as tracking numeric spans or partitioning integer domains.",
      "description_length": 278,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.SideEffect.SES.SESet",
      "library": "herdtools7.asllib",
      "description": "This module supports standard set operations (union, intersection, difference) and functional transformations (mapping, filtering, folding) on immutable collections of side effects, using ordered comparisons for deterministic behavior. It works with elements of type `Asllib.SideEffect.side_effect`, providing conversions to and from lists and sequences, and is suited for applications requiring ordered traversal, bulk data manipulation, or precise set algebra with structural equality.",
      "description_length": 487,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleSetBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting typing rules during instrumentation, providing operations to push new rules, reset the buffer, and retrieve the collected list. It works with lists of `typing_rule` values, maintaining state internally to track rule additions. Concrete use cases include logging and analyzing typing decisions during interpreter execution or type checking passes.",
      "description_length": 393,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Backend.S-Scope",
      "library": "herdtools7.asllib",
      "description": "This module manages scope creation and manipulation for the interpreter's runtime environment. It provides functions to access the global scope and create new local scopes for subprograms, maintaining identifier visibility and binding contexts. It operates on `Scope.t` values, which represent distinct namespaces for variable and function identifiers during execution. Use cases include setting up fresh scopes for function calls and initializing the global scope at program start.",
      "description_length": 482,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.S",
      "library": "herdtools7.asllib",
      "description": "This module performs type checking on abstract syntax trees (ASTs), producing fully annotated ASTs along with a global static environment that captures the typing context. It operates directly on `Asllib.AST.t` and `Asllib.StaticEnv.global` types, refining type information and resolving ambiguities within the structure of the AST. It is used to ensure type correctness and enable subsequent type-driven transformations or analyses on the AST.",
      "description_length": 444,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.INTERVAL_SET-Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals with start and end points, providing operations to create and manipulate bounded ranges of elements. It works with totally ordered types, such as integers or comparable values, to define inclusive intervals. Use cases include range queries, interval arithmetic, and managing continuous segments in data structures.",
      "description_length": 347,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Env.RunTimeConf",
      "library": "herdtools7.asllib",
      "description": "This module manages runtime configuration parameters for the interpreter, including loop unrolling depth. It provides functions to set and retrieve configuration values, such as the `unroll` parameter, which controls loop unrolling during execution. It operates on a scoped environment structure to maintain configuration state across different interpreter contexts.",
      "description_length": 366,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Parser.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements a parser for processing token streams into abstract syntax trees (ASTs) using a provided configuration. It defines entry points for parsing statements, specifications, and open expressions, each consuming a lex buffer and returning corresponding AST nodes. It is used to construct language-specific parsers by combining tokenization logic with AST generation rules.",
      "description_length": 388,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.ELT",
      "library": "herdtools7.asllib",
      "description": "This module defines arithmetic and ordering operations for a numeric type `t`, including addition, subtraction, predecessor, successor, and a total ordering function. It works with elements of type `t` that represent numeric values in an interval set structure. Concrete use cases include manipulating integer or fixed-point values within a diet-based interval set, such as tracking ranges of numbers with precise arithmetic and comparison operations.",
      "description_length": 451,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Env.RunTimeConf-Scope",
      "library": "herdtools7.asllib",
      "description": "This module manages scope identifiers for runtime interpretation, ensuring uniqueness across function calls. It provides operations to create local scopes for subprograms and access the global scope, depending on initialization state. Use this to track variable visibility and binding during program execution.",
      "description_length": 310,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.S-B-Scope",
      "library": "herdtools7.asllib",
      "description": "Manages scope creation and handling during ASL interpretation, including global and local scope initialization. It provides functions to create a new local scope for subprograms and retrieve the global scope, both returning `B.Scope.t` values. This module is used to establish execution contexts when entering functions or initializing global state during interpretation.",
      "description_length": 371,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Error.ERROR_PRINTER_CONFIG",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration options for formatting and directing error output. It specifies how error messages are structured, including details like severity prefixes and output streams. Concrete use cases include customizing error display in command-line tools or logging systems.",
      "description_length": 288,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a single-threaded buffer for collecting semantics rules during program analysis. It provides operations to add rules (`push`), retrieve the collected list (`get`), and clear the buffer (`reset`). It works directly with `semantics_rule` values and maintains an internal list structure to store them. This module is used to track semantic transformations in a single pass, such as logging rule applications during type checking or interpretation.",
      "description_length": 467,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements topological sorting and strong component analysis using Tarjan's algorithm. It provides operations to fold, sort, and index strongly connected components in a directed graph represented by nodes and successor functions. The child module adds the ability to validate topological orders via `order_respected`, ensuring a given node list respects the graph's dependencies. Together, they support tasks like dependency resolution, cycle detection, and scheduling in directed graphs.",
      "description_length": 501,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TypingNoInstr",
      "library": "herdtools7.asllib",
      "description": "This module disables typing instrumentation by ignoring all typing rule applications. It works with the `typing_rule` type, providing no-op implementations for rule application functions. Use this to run the interpreter or type checker without collecting typing information, such as in production builds where performance matters and tracing is unnecessary.",
      "description_length": 357,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Interpreter.S-IEnv",
      "library": "herdtools7.asllib",
      "description": "This module manages scoped environments and variable state in an interpreter, supporting operations to declare, assign, and remove variables across global and local scopes while tracking recursion depth and loop unrolling counters. It manipulates environment data structures that combine global static state with nested local scopes, using identifiers to bind and resolve values, and adjusts stack sizes dynamically during scope transitions. Key use cases include handling nested scope lifetime management, optimizing loop unrolling through counter tracking, and maintaining recursion depth limits for subprograms.",
      "description_length": 614,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemMake",
      "library": "herdtools7.asllib",
      "description": "This module implements semantic rule instrumentation for tracking and modifying behavior during interpretation or typing. It provides `use` and `use_with` to apply semantic rules, working directly with the `Buffer` module to capture intermediate states. Concrete use cases include logging evaluation steps, enforcing typing constraints dynamically, and tracing function applications in a compiler or interpreter.",
      "description_length": 412,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.ASTFold",
      "library": "herdtools7.asllib",
      "description": "This module processes abstract syntax trees (ASTs) by folding over their declarations in dependency order. It identifies and groups mutually recursive definitions, applying a function to each group or to individual non-recursive declarations. It is useful for analyzing or transforming code where the order of evaluation or processing must respect dependencies between declarations.",
      "description_length": 382,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SEMINSTR",
      "library": "herdtools7.asllib",
      "description": "This module implements semantic instrumentation rules for tracking and modifying interpreter behavior during program analysis. It provides functions to apply instrumentation to abstract syntax trees, enabling fine-grained control over evaluation steps and type propagation. Concrete use cases include inserting logging, enforcing security policies, or collecting runtime metrics at specific semantic points in the interpreter.",
      "description_length": 426,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.ANNOTATE_CONFIG",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration parameters for type annotation during AST processing. It includes strictness levels, error output formats, and flags to control typed output and field getter extensions. It is used to customize type-checking behavior in the `annotate_ast` function.",
      "description_length": 282,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleSetInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a typing rule instrumentation backend that tracks and enforces single set constraints during type checking. It provides functions to activate and apply typing rules with set-based instrumentation, specifically handling data structures like sets and typed expressions. Use cases include ensuring type consistency in symbolic execution and constraint solving within interpreters.",
      "description_length": 400,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Native.NoScope",
      "library": "herdtools7.asllib",
      "description": "This module manages scope identifiers for runtime and local contexts. It provides `global` to reference the global scope based on an initialization flag and `new_local` to generate a fresh scope identifier for a subprogram. It works with a unit type `t` and string identifiers, primarily used in tracking execution scopes during program interpretation.",
      "description_length": 352,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Env.RunTime",
      "library": "herdtools7.asllib",
      "description": "This module manages hierarchical variable scopes and stack memory allocation in a runtime environment with global and local bindings. It provides operations to manipulate scope layers (pushing, popping, inspecting) and track stack sizes for identifiers, enabling precise memory control during program execution. These capabilities are essential for implementing dynamic scoping rules and loop unrolling optimizations in interpreted languages.",
      "description_length": 442,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Types.Domain",
      "library": "herdtools7.asllib",
      "description": "This module represents and manipulates type domains, which are symbolic sets of values that variables of a given type can hold. It provides operations to construct domains from types, check membership of literals, compare domains for equality, and determine inclusion relationships. It works directly with `AST.ty` and `AST.literal` types, and is used during type checking and semantic analysis to enforce value constraints.",
      "description_length": 424,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSet",
      "library": "herdtools7.asllib",
      "description": "This module implements a comprehensive set algebra for manipulating collections of semantic elements, supporting operations like union, intersection, difference, and subset checks, along with functional transformations such as mapping and filtering. It operates on a set structure (`t`) containing elements of a base type (`elt`), offering conversions to and from sequences and lists, and includes safe accessors via optional return types. Designed for scenarios requiring precise set-theoretic manipulations\u2014such as static analysis or constraint solving\u2014it enables efficient membership queries, ordered traversal, and bulk set operations in functional pipelines.",
      "description_length": 663,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsMap",
      "library": "herdtools7.asllib",
      "description": "This module implements associative map operations with key-based aggregation and list-accumulating variants, working with keys of a specific semantic comparison type and arbitrary value types. It supports complex workflows like semantic analysis tracking through bidirectional sequence conversions, predicate-based filtering, and structural transformations, making it suitable for scenarios requiring precise runtime or static data flow analysis with hierarchical or ordered key spaces.",
      "description_length": 486,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Diet.Int",
      "library": "herdtools7.asllib",
      "description": "This module manages integer interval sets through operations like union, intersection, and element selection, organizing intervals as non-overlapping ranges. It supports iteration, transformation, and queries on both individual elements and intervals, enabling tasks like identifying missing ranges or mapping intervals through cross products. The included interval module handles creation and manipulation of bounded integer ranges, providing access to start and end points. Together, they allow modeling numeric constraints, partitioning domains, and performing set operations on contiguous ranges.",
      "description_length": 600,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Error.ErrorPrinter",
      "library": "herdtools7.asllib",
      "description": "This module prints error and warning messages to standard error, including source location information. It operates on annotated error and warning descriptions, as well as standalone warning messages with explicit locations. It is used to report parsing and semantic errors during language processing tasks.",
      "description_length": 307,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Backend.SCOPE",
      "library": "herdtools7.asllib",
      "description": "Manages scope creation and handling for program execution contexts. Provides `global` to access the global scope during runtime or initialization and `new_local` to create a new local scope for a subprogram by name. Works with the abstract type `t` representing scopes, used in evaluating function calls and variable bindings.",
      "description_length": 326,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingNoBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a simple, unbuffered instrumentation backend for tracking typing rules applied during type checking. It provides `push` to record a typing rule, `reset` to clear the recorded rules, and `get` to retrieve the full list of rules. It works directly with the `typing_rule` type, storing a list of rules applied in sequence. Use this to audit or analyze the progression of type inference steps in a compiler or interpreter without intermediate buffering.",
      "description_length": 472,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect.SES",
      "library": "herdtools7.asllib",
      "description": "This module provides a structured way to represent and manipulate side-effect information, combining local and global reads and writes, exceptions, recursion, and non-determinism into abstract values (`SES.t`) that can be converted into concrete sets (`SESet.t`). It supports union operations with conflict resolution, purity checks, and filtering by identifiers, enabling precise analysis of program behavior across different code regions. The child module extends this with standard set operations\u2014union, intersection, difference\u2014and functional transformations like map and fold over ordered collections of side effects, ensuring deterministic processing. Together, they allow tasks like merging effect sets from function calls, analyzing determinism, or extracting structured metadata about side-effecting operations in a type-safe and composable way.",
      "description_length": 854,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSet",
      "library": "herdtools7.asllib",
      "description": "This module provides a functional set interface for manipulating collections of `TypingCmp.t` elements, supporting operations like union, intersection, difference, membership checks, and transformations via mapping or filtering. It integrates with `Stdlib.Seq` for ordered sequence conversions and offers safe access patterns through optional return types. These capabilities are useful for tracking and analyzing type information in program interpretation, such as combining type sets from different code paths or validating hierarchical type relationships.",
      "description_length": 558,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypMake",
      "library": "herdtools7.asllib",
      "description": "This module tracks typing rule applications during program analysis using a buffer. It provides `use` to log a typing rule application and `use_with` to do so while passing through a value. The module is used to record typing behavior for debugging or analysis purposes.",
      "description_length": 270,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticOperations.CONFIG",
      "library": "herdtools7.asllib",
      "description": "This module defines operations for handling configuration-related errors and warnings in a static analysis context. It provides a `fail` function for raising fatal errors and a `warn_from` function for issuing warnings with location information from an AST node. These functions are used to report configuration issues during static analysis passes over OCaml code.",
      "description_length": 365,
      "index": 39,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Asllib.Diet.Make",
      "library": "herdtools7.asllib",
      "description": "This module builds and manages interval-based sets using elements and intervals from its submodules, enabling operations like union, intersection, and difference over continuous ranges. It supports membership queries, folding over intervals and elements, filtering transformations, and advanced set manipulations such as splitting by size or computing gaps and overlaps. The core types include elements ordered by a comparison function and closed intervals defined by start and end points. Example uses include analyzing time ranges, partitioning numeric intervals, and processing bounded sequences with precise coverage and efficiency.",
      "description_length": 636,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticOperations.Make",
      "library": "herdtools7.asllib",
      "description": "This module performs constraint annotation for binary operations in an abstract syntax tree, using a static environment to resolve variable contexts. It operates on annotated AST nodes, binary operators, and lists of integer constraints. It is used during static analysis to propagate and combine constraints across expressions.",
      "description_length": 328,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicInterpreter",
      "library": "herdtools7.asllib",
      "description": "This module evaluates expressions and executes typed-checked ASTs using a deterministic environment model, supporting operations like `eval_expr` for expression evaluation and `run_typed_env` for running programs with a predefined initial state. Its scoped variable management submodule handles declarations, assignments, and scope nesting, enabling precise control over variable lifetimes and recursion tracking through environment structures that encapsulate global and local bindings. Together, they allow concrete use cases such as interpreting test cases with known inputs or simulating program execution from specific global states with controlled scope behavior.",
      "description_length": 669,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsRule",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of symbolic representations for semantic rules used in program analysis and instrumentation. It includes operations for converting rule types to and from strings, pretty-printing, listing all rules, and indexing. These capabilities support precise tracking and manipulation of program constructs such as expressions, statements, control flow, and data structures during static or dynamic analysis.",
      "description_length": 437,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.Annotate",
      "library": "herdtools7.asllib",
      "description": "This module performs type checking on abstract syntax trees (ASTs), returning the annotated AST along with the resulting global static environment. It operates directly on `Asllib.AST.t` and `Asllib.StaticEnv.global` data structures. It is used to resolve type annotations and ensure type correctness during compilation or static analysis of a program.",
      "description_length": 352,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect.TimeFrame",
      "library": "herdtools7.asllib",
      "description": "This module defines a type `t` representing time frames for side effects, with variants for constant, configuration, and execution contexts. It provides comparison operations `is_before` and `max` to determine ordering and precedence between time frames. Additionally, it includes conversions from AST declaration keywords (`local_decl_keyword` and `global_decl_keyword`) to time frames, enabling direct association of syntactic constructs with their side effect timing.",
      "description_length": 470,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SEMBUFFER",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting semantics rules during program analysis. It provides operations to add rules (`push`), retrieve the collected rules (`get`), and reset the buffer (`reset`). The buffer stores values of type `Asllib.Instrumentation.semantics_rule`, maintaining them in a list structure for ordered access. It is used to accumulate rule applications during interpreter or type checker execution for later inspection or logging.",
      "description_length": 455,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a semantics-based instrumentation backend that tracks and applies a single active instrumentation rule during program execution. It works with abstract syntax trees and semantic rule definitions to modify or observe interpreter behavior at specific evaluation points. Use it to inject monitoring logic into language constructs, such as logging variable assignments or enforcing runtime checks on expressions.",
      "description_length": 431,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.S",
      "library": "herdtools7.asllib",
      "description": "Implements evaluation of ASL expressions and programs using a reference interpreter, handling environments and value bindings. It processes abstract syntax trees with typed environments, supporting execution of main functions and initial value assignments. Directly evaluates expressions, runs programs with specified global identifiers, and manages scope and environment state during execution.",
      "description_length": 395,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingCmp",
      "library": "herdtools7.asllib",
      "description": "This module provides a total ordering function for elements of type `Asllib.Instrumentation.typing_rule`. It supports comparison operations needed for organizing or sorting collections of typing rules. A concrete use case is enabling the use of ordered data structures like sets or maps with typing rules as keys.",
      "description_length": 313,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Error.PPrint",
      "library": "herdtools7.asllib",
      "description": "This module provides functions for pretty-printing error and warning messages with source positions, specifically handling annotated AST nodes and type descriptions. It includes utilities for formatting comma-separated lists, error and warning descriptors, and converting error information to strings. Concrete use cases include displaying compiler diagnostics and formatting type-checking errors in a readable form.",
      "description_length": 416,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TYPINSTR",
      "library": "herdtools7.asllib",
      "description": "This module defines typed instrumentation points for tracking typing rule applications. It provides `use` to register a typing rule application and `use_with` to do so while returning a value. These operations support precise monitoring of type system behavior during rule execution.",
      "description_length": 283,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Native.StaticBackend",
      "library": "herdtools7.asllib",
      "description": "This module enables manipulating abstract program values through monadic constructs for control flow (branching, parallel composition), value introspection (labeling, conversion), and bitvector arithmetic. It operates on data structures like vectors, records, and bitvectors to support static analysis tasks such as abstract interpretation of programs with complex data dependencies or low-level bit manipulations. Specific use cases include modeling program semantics with domain-specific primitives and analyzing control/data flow in parallel computations.",
      "description_length": 558,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Interpreter.S-B",
      "library": "herdtools7.asllib",
      "description": "This module provides foundational operations for constructing and manipulating values (integers, labels, vectors, records) and managing control flow in an interpreter context. It combines monadic sequencing of effectful computations with low-level data manipulation (bitvectors, field access) and scope management, enabling tasks like evaluating expressions with side effects, handling exceptions, and implementing ASL semantics with precise state transitions.",
      "description_length": 460,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Lexer.CONFIG",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration options for a lexer, specifically controlling whether variables can start with a double underscore and whether unknown tokens are permitted. It works with boolean values to customize lexical analysis behavior. Concrete use cases include adjusting the lexer to support specific naming conventions or error handling for unrecognized input.",
      "description_length": 371,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Backend.S",
      "library": "herdtools7.asllib",
      "description": "This module provides a monadic framework for constructing and manipulating ASL values, supporting operations like literal conversion, bitvector slicing, structured value creation (vectors/records), and exception handling. It centers on a `value` type representing ASL data and a stateful monad `m`, enabling control flow via combinators (bind/choice) and scoped computations. Key use cases include interpreter state management, low-level bitvector operations for hardware modeling, and evaluation of complex expressions with side effects.",
      "description_length": 538,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsCmp",
      "library": "herdtools7.asllib",
      "description": "This module provides a comparison function for elements of type `Asllib.Instrumentation.semantics_rule`, establishing a total ordering based on structural properties of the rules. It is used to compare semantic rule instances, enabling operations like sorting or equality checks in data structures that require ordering, such as sets or maps. A concrete use case includes organizing semantic rules during analysis or ensuring consistent rule application order in an interpreter or type system.",
      "description_length": 493,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a single in-memory buffer for collecting typing rule applications during program analysis. It provides operations to push individual typing rules, retrieve the full list of recorded rules, and reset the buffer state. It is used to track typing information in a linear sequence for debugging or logging purposes.",
      "description_length": 334,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Env.S",
      "library": "herdtools7.asllib",
      "description": "This module provides operations for managing variable bindings and lexical scoping in a runtime interpreter environment, including declaring and assigning variables, manipulating unrolling counters for loops, and adjusting stack sizes. It works with an environment type that tracks identifiers, storage maps, nested scopes, and scope-specific stack allocations. Specific use cases include handling variable lifetime across nested scopes, tracking loop iterations, and dynamically adjusting stack resources during execution.",
      "description_length": 523,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingsMap",
      "library": "herdtools7.asllib",
      "description": "This component offers a key-based associative data structure for managing polymorphic values indexed by `TypingCmp.t` keys, supporting comprehensive operations like insertion, lookup, filtering, and transformation with optional safety guarantees. It integrates sequence-based workflows through bidirectional conversion utilities, enabling efficient bulk processing of key-value pairs. Designed for scenarios requiring precise type tracking\u2014such as interpreter instrumentation or static analysis\u2014it facilitates dynamic type mapping, ordered traversal, and structured data manipulation in functional pipelines.",
      "description_length": 608,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.Config",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration parameters for the reference interpreter, including loop unrolling thresholds and error handling timing. It works with integers and error handling time enums to control interpreter behavior during execution. Concrete use cases include setting unroll limits for loops and specifying when errors should be reported during interpretation.",
      "description_length": 369,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.Config-Instr",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration and instrumentation rules for modifying the behavior of the ASL interpreter during execution. It provides functions to apply and compose semantics rules that alter how instructions are processed, enabling features like tracing, logging, or custom execution hooks. Concrete use cases include injecting debug instrumentation into specific instruction paths or enforcing runtime constraints on memory access patterns.",
      "description_length": 448,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicBackend",
      "library": "herdtools7.asllib",
      "description": "This module provides monadic primitives for deterministic computation, including binds with data, control, and sequence dependencies, parallel composition, and branching operations. It manipulates values such as integers, vectors, records, and bitvectors, supporting use cases like deterministic interpretation with structured data transformations and non-deterministic control flow management through primitives like `commit` and `choice`.",
      "description_length": 440,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ParserConfig.CONFIG",
      "library": "herdtools7.asllib",
      "description": "This module defines configuration options for the ASL1 parser, specifically controlling whether a semicolon after the `end` keyword is required. It works with boolean values to enable or disable this parsing behavior. Concrete use cases include customizing the parser to accept dialects of ASL that omit the final semicolon in block structures.",
      "description_length": 344,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleInstr",
      "library": "herdtools7.asllib",
      "description": "Implements typing rule instrumentation for single-type expressions, tracking type application during evaluation. Works with `typing_rule` values and arbitrary data types via `use_with`. Use to debug or log type resolution steps in expression evaluation pipelines.",
      "description_length": 263,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Env.S-Scope",
      "library": "herdtools7.asllib",
      "description": "This module manages scope identifiers for runtime environments, ensuring uniqueness across function calls. It provides operations to create local scopes for subprograms and access the global scope, depending on initialization context. Use cases include tracking variable visibility during interpretation and isolating function call environments.",
      "description_length": 345,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.ASTUtils.ISet",
      "library": "herdtools7.asllib",
      "description": "This module provides ordered set operations for managing collections of AST identifiers, supporting efficient insertion, deletion, and algebraic operations like union and intersection while preserving physical equality for unchanged content. It works with a concrete set type that maintains elements in a defined order, enabling ordered traversal, transformation via mapping or filtering, and decomposition into subsets. Typical applications include tracking variable declarations, analyzing identifier scopes, and performing ordered sequence-based manipulations during AST traversal or transformation tasks.",
      "description_length": 608,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsNoInstr",
      "library": "herdtools7.asllib",
      "description": "This module provides `use` and `use_with` operations to apply semantics rules during interpretation or typing without modifying the core logic. It works with `semantics_rule` values, which define transformations or analyses over abstract syntax trees. Concrete use cases include adding logging, tracing, or analysis passes to interpreters or type checkers without altering their structure.",
      "description_length": 389,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleSetBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting semantics rules during program analysis. It provides operations to add rules (`push`), retrieve the collected list (`get`), and reset the buffer (`reset`). It works with lists of `semantics_rule` values, enabling tracking and manipulation of analysis data during interpreter or type-checking phases.",
      "description_length": 346,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.TypeCheckDefault",
      "library": "herdtools7.asllib",
      "description": "This module implements default type-checking logic for filling type annotations in an abstract syntax tree (AST). It processes AST nodes and infers or assigns types based on the provided or initial static environment, returning the updated AST alongside the resulting global environment. It is used during compilation to ensure type correctness and to prepare the AST for subsequent type-driven transformations.",
      "description_length": 411,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleSetInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a semantics-based instrumentation backend that tracks and applies a single set of instrumentation rules during interpretation or typing. It provides operations to activate a specific instrumentation rule and to apply it within a computation, modifying behavior based on the semantics of the program. Concrete use cases include tracing function calls, enforcing security policies, or collecting execution metrics in a controlled and rule-driven manner.",
      "description_length": 474,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ASTUtils.Infix",
      "library": "herdtools7.asllib",
      "description": "This module provides operators for creating integer literals and expressions directly from integers. It works with the `Asllib.AST.literal` and `Asllib.AST.expr` data types. Use cases include embedding numeric values into AST nodes when constructing or transforming ASL abstract syntax trees.",
      "description_length": 292,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.INTERVAL_SET",
      "library": "herdtools7.asllib",
      "description": "This module provides operations to construct, manipulate, and query collections of intervals and individual elements, supporting set operations like union, difference, and intersection, as well as interval-specific transformations, membership checks, and extremal value queries. It works with interval sets (`t`) parameterized by an ordered type (`elt`), where intervals represent contiguous ranges of elements, and individual elements can be treated as singleton intervals. Typical use cases include managing time ranges, numeric intervals, or sparse data structures where efficient merging, splitting, or querying of ranges is required.",
      "description_length": 638,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Diet.Z",
      "library": "herdtools7.asllib",
      "description": "This module manages integer intervals using arbitrary-precision arithmetic, supporting union, intersection, and difference operations on normalized contiguous ranges. It provides core types for representing intervals and sets, along with functions for element transformation and combinatorial set operations. The interval submodule enables precise range construction and bound access, useful for modeling continuous numeric ranges in data filtering or resource allocation. Together, they support complex interval manipulations such as merging overlapping ranges, computing gaps, and pairing elements across sets for formal verification tasks.",
      "description_length": 642,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TypingRule",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of typing rule identifiers used to represent various type-checking and inference operations in a compiler or interpreter. It includes specific tags for expressions, statements, type constructors, constraints, and error conditions, enabling precise tracking and analysis of type-related decisions during program execution or static analysis. Use cases include logging, debugging, and performance monitoring of type resolution steps in a language processing pipeline.",
      "description_length": 505,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.TopoSort.OrderedHashedType",
      "library": "herdtools7.asllib",
      "description": "This module defines a set of operations for a hashable, ordered type used in topological sorting. It includes functions for comparing, checking equality, hashing, and converting values to strings. It is designed to work with elements of a specific type `t` that can be ordered and hashed, enabling their use in data structures like sets or maps for algorithms requiring topological order.",
      "description_length": 388,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Lexer.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements a lexer for parsing assembly-like syntax, handling operations such as string and bitvector literal parsing, comment skipping, and token generation. It works with lexing buffers and token types, producing specific token values from input streams. Concrete uses include processing assembly source files with embedded bitvector constants, escaped strings, and C-style comments.",
      "description_length": 397,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsNoBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a simple, unbuffered instrumentation backend for tracking and retrieving semantic rules during interpretation or typing. It directly supports pushing individual rules, resetting the stored state, and fetching the full list of recorded rules. Concrete use cases include debugging semantic analysis passes or logging rule applications in real-time without intermediate buffering.",
      "description_length": 400,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Int64",
      "library": "herdtools7.asllib",
      "description": "This module provides efficient interval set operations for 64-bit integers, managing both individual values and contiguous ranges through union, intersection, and difference operations. It uses balanced trees to represent interval sets, enabling fast queries for min/max elements, subset checks, and gap detection. Child modules handle interval construction and bound access, allowing precise manipulation of numeric ranges. Example uses include tracking allocated resources, scheduling time intervals, and working with sparse integer domains.",
      "description_length": 543,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TYPBUFFER",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting typing rules during program analysis. It supports operations to add rules (`push`), retrieve the collected list (`get`), and clear the buffer (`reset`). It is used to track typing decisions in interpreters or type checkers where rule application needs to be recorded and later inspected.",
      "description_length": 334,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.Make",
      "library": "herdtools7.asllib",
      "description": "This module evaluates ASL expressions and programs using a customizable value type and computation monad, enabling interpretation with controlled initial global values and typed-checked execution. It manages variable bindings through hierarchical environments and global state containers, supporting nested scopes, dynamic variables, and stack allocation tracking. Operations include expression evaluation in context, program execution with initial state, and environment manipulation for function calls and loops. Examples include interpreting ASL code with custom value representations and running programs with precisely defined global setups.",
      "description_length": 646,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation",
      "library": "herdtools7.asllib",
      "description": "This module enables structured monitoring and manipulation of semantic and typing processes through buffer implementations and specialized data structures. It provides buffers for collecting typing and semantics rules, supporting operations like `push`, `get`, and `reset`, while allowing pipeline-style composition of typing operations via the `|:` operator. The module includes sets and maps for managing rule collections, enabling union, intersection, mapping, and key-based aggregation, with support for typed keys and ordered traversal. Concrete uses include logging type-checking steps, enforcing runtime constraints, tracing interpreter behavior, and analyzing rule application sequences without or with buffering, depending on performance needs.",
      "description_length": 753,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Desugar",
      "library": "herdtools7.asllib",
      "description": "This module handles desugaring complex syntactic constructs into simpler forms during AST processing. It provides operations for expanding setter calls, elided parameters, and various forms of left-hand side accesses including tuples and field selections. These functions transform high-level syntax into core language constructs, enabling further analysis or compilation passes to work with a normalized AST.",
      "description_length": 409,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Typing",
      "library": "herdtools7.asllib",
      "description": "This module provides type annotation and checking for abstract syntax trees, using the `annotate_ast` function to resolve type ambiguities in `Asllib.AST.t` structures. It supports configurable behaviors through a settings module, allowing control over strictness, error reporting, and output formats. The core type-checking logic processes AST nodes and updates them with resolved type information, producing a fully annotated AST and an updated global static environment. These components enable static analysis, compilation, and type-driven transformations by ensuring type correctness and capturing typing context.",
      "description_length": 618,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect",
      "library": "herdtools7.asllib",
      "description": "This module represents and analyzes side effects like variable access, exceptions, recursion, and non-determinism through a core type `t`, enabling purity checks, symbolic evaluation, and effect comparison. It structures side-effect data using abstract values (`SES.t`) and concrete sets (`SESet.t`), supporting union operations, filtering by identifiers, and integration with static analysis tools. Time frames for side effects are modeled with variants like constant, configuration, and execution contexts, with ordering operations and AST keyword conversions to track when effects occur. Combined with submodules offering set algebra and time-based analysis, it supports tasks like merging function call effects, verifying determinism, and extracting structured metadata across code regions.",
      "description_length": 794,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ASTUtils",
      "library": "herdtools7.asllib",
      "description": "This module combines AST manipulation utilities with specialized submodules for handling identifier sets and integer expressions. It supports operations on ASL abstract syntax trees using ordered sets to manage identifiers efficiently and algebraically, while also enabling direct creation of integer literals and expressions within AST nodes. The ordered set functionality preserves physical equality and traversal order, useful for scope analysis and variable tracking, and the integer expression tools facilitate embedding numeric values during AST construction or transformation. Examples include analyzing identifier usage patterns, transforming declaration sequences, and generating arithmetic expressions from integer values.",
      "description_length": 732,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Version",
      "library": "herdtools7.asllib",
      "description": "This module provides direct access to version metadata, revision identifiers, and library directory paths. It exposes string values for runtime inspection of the current build and environment configuration. Useful for logging, diagnostics, and ensuring correct runtime linkage paths.",
      "description_length": 283,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticEnv",
      "library": "herdtools7.asllib",
      "description": "This module provides operations to manipulate and query a static environment during type-checking, focusing on tracking global and local declarations of identifiers, types, constants, storage, subprograms, and expression equivalences. It uses immutable data structures to manage bindings and renaming sets, enabling scoped resolution of variables, type consistency checks, and semantic analysis in compilers or interpreters. Key use cases include validating declared-before-used constraints, resolving aliased names in modular code, and ensuring correct typing of expressions and subprogram calls.",
      "description_length": 597,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Storage",
      "library": "herdtools7.asllib",
      "description": "This module implements a storage system for program evaluation, providing operations to manage variable bindings and memory cells. It supports adding, assigning, and declaring variables, as well as removing them and querying their values, all while maintaining a distinction between bindings and heap memory. It is used to model mutable state during program execution, particularly in handling variable scopes and memory management.",
      "description_length": 432,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticModel",
      "library": "herdtools7.asllib",
      "description": "This module provides functions for comparing, normalizing, and evaluating expressions within a static environment. It operates on expressions and environments defined in the AST and StaticEnv modules, supporting tasks like expression equivalence checking, simplification, and evaluation to boolean or integer values. Concrete use cases include optimizing expressions during compilation, evaluating constant expressions, and checking logical equivalence in symbolic analysis.",
      "description_length": 474,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Diet",
      "library": "herdtools7.asllib",
      "description": "This module implements interval sets using a compact diet representation, supporting efficient union, intersection, and difference operations over ranges of ordered elements. It provides core types for intervals with start and end bounds, and interval sets composed of non-overlapping ranges, enabling precise manipulation of contiguous segments. Operations include membership testing, interval splitting and merging, extremal value queries, and transformations via mapping or filtering. It supports integer types (int, int64) and arbitrary-precision integers (Z) through dedicated submodules, allowing use cases such as resource allocation tracking, time range scheduling, and memory management with exact arithmetic and efficient range queries.",
      "description_length": 746,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Lexer",
      "library": "herdtools7.asllib",
      "description": "This module provides a flexible lexer for tokenizing structured text, supporting customizable rules for identifying identifiers, operators, and literals from character streams. It allows configuration of lexical behavior, such as permitting variables starting with double underscores or allowing unknown tokens, and includes a specialized lexer for assembly-like syntax with support for bitvector and string literals, comment handling, and token generation. Operations include feeding input through lexing buffers, applying tokenization rules, and extracting structured tokens for further parsing. Example uses include building parsers for domain-specific languages, processing configuration files, and analyzing assembly code with custom syntax elements.",
      "description_length": 755,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Serialize",
      "library": "herdtools7.asllib",
      "description": "This module serializes an abstract syntax tree (AST) into valid OCaml strings. It provides functions to convert subprogram types to strings, print ASTs into buffers, and directly transform ASTs into string representations. Use it when generating OCaml code from parsed ASTs, such as in code generation or pretty-printing tools.",
      "description_length": 327,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Types",
      "library": "herdtools7.asllib",
      "description": "This module provides operations for analyzing and transforming types within a structured type system, working with abstract syntax tree representations of types (`AST.ty`) and type environments (`Asllib.Types.env`). It supports built-in, named, anonymous, and parameterized types, enabling subtyping checks, type equality verification, resolving type clashes, and computing hierarchical relationships. The child module handles type domains\u2014symbolic sets of values that variables can hold\u2014allowing construction from types, membership checks for literals, and domain comparison, which is used during type checking to enforce value constraints. Together, they enable precise type manipulation and semantic analysis in language processing tasks.",
      "description_length": 741,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter",
      "library": "herdtools7.asllib",
      "description": "This interpreter evaluates ASL programs by reducing abstract syntax trees to normal form, using environments and scopes to manage variable bindings and control flow. It supports expression evaluation, program execution, and scoped state management through typed environments, value manipulation, and configurable parameters like loop unrolling and error handling timing. Submodules handle scope creation, environment updates, value construction, and instrumentation, enabling features like nested scope tracking, loop optimization, and custom execution semantics. Users can run ASL code with defined global state, trace execution paths, or enforce runtime constraints using composed instrumentation rules.",
      "description_length": 705,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Splitasl",
      "library": "herdtools7.asllib",
      "description": "Splits a lexbuffer into a sequence of sections marked by `// \\=======...` delimiters, returning tuples of section numbers and content. Processes ASL files to extract named sections for further analysis or code generation. Useful for parsing specification files where distinct parts are separated by standardized markers.",
      "description_length": 320,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort",
      "library": "herdtools7.asllib",
      "description": "This module analyzes directed graphs and abstract syntax trees using topological sorting and strong component analysis. It provides core operations for working with dependency graphs represented as hash tables, including sorting nodes, identifying strongly connected components, and validating dependency orderings using Tarjan's algorithm. The AST processing submodule folds over declarations in dependency order, grouping mutually recursive definitions for analysis or transformation. A supporting submodule defines hashable, ordered types required for graph node representation, enabling use in maps and sets. Example uses include scheduling evaluation of interdependent ASL declarations, detecting cycles, and processing code in correct dependency order.",
      "description_length": 758,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Asl_stdlib",
      "library": "herdtools7.asllib",
      "description": "Contains string constants representing the standard library source code for the Asl specification language. Provides direct access to the full text of the standard library (`stdlib`) and an older version (`stdlib0`). Useful for tools that need to parse, analyze, or generate Asl code using the standard definitions.",
      "description_length": 315,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Backend",
      "library": "herdtools7.asllib",
      "description": "This module defines the core abstractions for interpreter backend operations, including scope management, variable binding, and value evaluation. It works with structured types like expressions, environments, and semantic values, enabling implementation of domain-specific language interpreters and runtime symbol resolution. The module provides direct access to scope manipulation and global/local context initialization, while its child modules handle low-level scope operations and ASL value construction using a stateful monad. Examples include setting up fresh scopes for function calls, evaluating expressions with side effects, and performing bitvector operations for hardware modeling.",
      "description_length": 693,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native",
      "library": "herdtools7.asllib",
      "description": "This module implements a deterministic interpreter for evaluating AST nodes in a scoped environment, supporting operations on native values such as literals, vectors, and records. It coordinates with scope management components to track execution contexts, using identifiers for global and local scopes during evaluation, and integrates scoped variable handling to control variable lifetimes and recursion. The interpreter leverages monadic constructs for control flow and data manipulation, enabling concrete use cases such as executing embedded DSL expressions, simulating program execution from known states, and performing static analysis of programs with complex data dependencies. Together with its submodules, it provides a structured environment model for deterministic interpretation, rule tracing, and domain-specific semantic modeling.",
      "description_length": 846,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticInterpreter",
      "library": "herdtools7.asllib",
      "description": "This module evaluates expressions to literals or integers using a static environment, specifically handling expression trees defined in the AST module. It provides two core operations: `static_eval` for reducing expressions to literal values and `static_eval_to_int` for integer-specific evaluation. It is used to compute constant expressions at compile time, such as resolving integer literals or arithmetic expressions in a given environment.",
      "description_length": 444,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticOperations",
      "library": "herdtools7.asllib",
      "description": "This module manipulates and reduces integer constraints for static analysis, combining direct operations like `constraint_binop` for merging constraints and `filter_reduce_constraint_div` for simplifying division with context-aware annotation and error handling from its submodules. It supports precise analysis of arithmetic expressions by propagating constraints through binary operations, resolving variables using a static environment, and reporting configuration issues via `fail` and `warn_from`. Example usage includes simplifying division constraints during analysis, combining arithmetic conditions across expressions, and issuing warnings tied to specific AST nodes. The core data types include integer constraints and annotated AST nodes, manipulated through both direct constraint functions and submodule utilities.",
      "description_length": 827,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ParserConfig",
      "library": "herdtools7.asllib",
      "description": "This module defines a configuration interface for parsers, enabling customization of token handling, error reporting, and parsing behavior through abstract parser states and token streams. It supports concrete use cases such as defining token delimiters, setting custom error messages, and configuring lookahead for recursive descent parsing. A child module extends this functionality to the ASL1 parser, allowing control over whether a semicolon after the `end` keyword is required, using boolean flags to adapt to different dialects. Together, the module and its submodules provide a flexible framework for tailoring parser behavior at both general and language-specific levels.",
      "description_length": 680,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Env",
      "library": "herdtools7.asllib",
      "description": "This module manages runtime environment configurations and state for interpreters, enabling the creation, modification, and querying of environment variables and execution settings. It supports abstract data types representing runtime contexts, variable bindings, and execution flags, with operations to control recursion depth, memory usage, and loop unrolling. Submodules handle scoped configuration parameters, unique scope identifiers, hierarchical scope management, variable binding and lexical scoping, and stack memory allocation. Specific capabilities include setting up sandboxed environments, tracking interpreter state during evaluation, managing dynamic scoping rules, and optimizing loop execution through controlled unrolling and stack manipulation.",
      "description_length": 763,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.AST",
      "library": "herdtools7.asllib",
      "description": "This module provides types and constructors to represent the structure of ASL programs, capturing elements like expressions, statements, declarations, and subprograms. It organizes top-level program components as a list of declaration nodes, incorporating metadata such as versioning and annotations. These data structures are used to model ASL code for tasks like parsing, analysis, or transformation.",
      "description_length": 402,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.PP",
      "library": "herdtools7.asllib",
      "description": "This module provides functions to format ASL abstract syntax tree (AST) elements\u2014such as expressions, types, statements, literals, and operators\u2014into human-readable string representations following ASL syntax conventions. It operates on AST components like `AST.expr`, `AST.ty`, and `AST.annotated`, supporting customizable literal formatting through utility functions. These tools are particularly useful for debugging AST structures, generating code from parsed ASTs, or producing error messages with precise source position annotations.",
      "description_length": 539,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Error",
      "library": "herdtools7.asllib",
      "description": "This module coordinates error handling across compiler stages by combining diagnostic creation, formatting, and output control. It defines error and warning types annotated with source positions, supporting operations like message generation, severity tagging, and structured output in text or CSV formats. The configuration submodule customizes display options such as prefixes and output streams, while the printer submodule emits diagnostics to standard error with source context. The pretty-printing submodule enhances readability by formatting complex type and syntax errors, including source-located AST nodes and comma-separated lists, enabling precise and user-friendly compiler feedback.",
      "description_length": 696,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Parser",
      "library": "herdtools7.asllib",
      "description": "This module processes token streams into abstract syntax trees using a configurable parser, supporting language-specific AST generation. It provides entry points to parse statements, specifications, and open expressions from a lex buffer. Main data types include the AST nodes and the parser configuration. For example, given a lex buffer of a custom language, it can produce an AST representing function definitions or arithmetic expressions.",
      "description_length": 443,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Builder",
      "library": "herdtools7.asllib",
      "description": "This module constructs AST.t values from source files or lexing buffers, supporting multiple AST types and versions. It provides parsing functions that respect configuration options like handling of semicolons and unknown identifiers. Use it to load and build abstract syntax trees from files, optionally including standard library definitions or primitive functions.",
      "description_length": 367,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Tokens",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of lexical token types used for parsing and representing source code elements such as keywords, operators, literals, and punctuation. It includes specific variants for language constructs like control flow (`IF`, `WHILE`, `FOR`), type definitions (`TYPE`, `ENUMERATION`, `RECORD`), and literals (`INT_LIT`, `STRING_LIT`, `BOOL_LIT`). These tokens are used directly by parsers and interpreters to process and analyze structured code input.",
      "description_length": 478,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Operations",
      "library": "herdtools7.asllib",
      "description": "This module evaluates and manipulates literals and bitvectors in the context of an abstract syntax tree. It provides operations for arithmetic, comparisons, and bitvector length checks, working directly with types like `AST.literal`, `Bitvector.t`, `Z.t`, and `Q.t`. Concrete use cases include evaluating binary and unary expressions during static analysis, checking positivity of integers, and ensuring bitvector operand compatibility.",
      "description_length": 436,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib",
      "library": "herdtools7.asllib",
      "description": "This collection provides comprehensive tools for building, analyzing, and executing ASL programs. It supports parsing and lexing structured text, transforming syntax through desugaring, and performing type checking with configurable environments and semantic analysis. Key data types include abstract syntax trees, static environments, semantic values, and effect tracking structures, manipulated through operations like expression evaluation, constraint reduction, and topological sorting. You can use it to implement compilers or interpreters that handle mutable state, perform static analysis on typed expressions, or execute programs with precise control over scopes, memory, and side effects.",
      "description_length": 697,
      "index": 111,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 114,
    "meaningful_modules": 112,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9824561403508771
  },
  "statistics": {
    "max_description_length": 854,
    "min_description_length": 263,
    "avg_description_length": 475.83035714285717,
    "embedding_file_size_mb": 0.4073362350463867
  }
}