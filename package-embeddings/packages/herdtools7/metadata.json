{
  "package": "herdtools7",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 82,
  "creation_timestamp": "2025-08-18T18:36:13.135788",
  "modules": [
    {
      "module_path": "Asllib.Interpreter.Make.IEnv",
      "library": "herdtools7.asllib",
      "description": "This module enables scoped variable management and dynamic environment control through operations like declaring, assigning, and resolving variables, alongside scope manipulation via stack-based adjustments. It employs environment structures that track variable bindings, recursion depths, and dynamic stack sizes to model both static and runtime program state. These mechanisms are critical for executing ASL programs with precise scoping semantics, supporting use cases such as recursive function evaluation, block-level variable isolation, and mutable state transitions during interpretation.",
      "description_length": 595,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Int.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of integers with inclusive bounds, providing operations to create intervals from start and end points. It supports extracting the first and last elements of an interval. Useful for defining and manipulating integer ranges in algorithms that require bounded sequences, such as iteration or partitioning logic.",
      "description_length": 341,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Z.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of integer values with inclusive bounds, supporting construction via `make` and access to endpoints via `x` and `y`. It operates on the `interval` type, which models ranges over `Asllib.Diet.Z.elt`, typically integers. Use this module to define and manipulate bounded integer ranges, such as representing contiguous segments in a sparse set or specifying numeric ranges for inclusion checks.",
      "description_length": 424,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.Make.Properties",
      "library": "herdtools7.asllib",
      "description": "This module provides a function `order_respected` that checks whether a given list of nodes and successor function represents a valid topological order. It operates on lists of nodes paired with a successor function that maps nodes to their successors. A concrete use case is validating the output of a topological sort against a known graph structure to ensure correctness.",
      "description_length": 374,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Make.Interval",
      "library": "herdtools7.asllib",
      "description": "This module constructs and manipulates intervals over a totally ordered type, providing precise operations for defining ranges with inclusive bounds. It works with a comparable element type `elt` and an `interval` type representing continuous segments of values. Concrete use cases include modeling time ranges, numeric intervals, or bounded sequences where exact start and end points are required.",
      "description_length": 398,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicInterpreter.IEnv",
      "library": "herdtools7.asllib",
      "description": "This module supports scoped environment management for program interpretation, enabling operations like declaring and assigning variables, tracking nested scopes, and adjusting loop unrolling counters. It manipulates hierarchical environments (`env`, `global`, `local`) that map identifiers to values while maintaining mutable state for scope depth, recursion levels, and stack sizes. These capabilities are critical for interpreting nested function calls, iterative constructs, or scenarios requiring precise control over variable visibility and lifetime.",
      "description_length": 556,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect.SES.SESet",
      "library": "herdtools7.asllib",
      "description": "This module implements ordered set operations for managing collections of side-effect values, supporting standard set-theoretic operations (union, intersection, difference), membership checks, and transformations with guaranteed ordering. It works with `SESet.t` structures backed by balanced trees, enabling efficient element queries, monotonic predicate searches (`find_first`, `find_last`), and ordered iteration over sequences or lists. Use cases include tracking and manipulating ordered side-effect dependencies, filtering sets based on dynamic criteria, and converting between sets and sequential data structures while preserving element ordering.",
      "description_length": 654,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Int64.Interval",
      "library": "herdtools7.asllib",
      "description": "This module represents intervals of 64-bit integers using the `interval` type, defined by inclusive start and end points. It provides operations to construct intervals and access their bounds. Use it to model continuous ranges of integers, such as time spans or numeric segments, where precise boundary control is required.",
      "description_length": 323,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicInterpreter",
      "library": "herdtools7.asllib",
      "description": "This module evaluates typed-checked abstract syntax trees using a scoped environment model, supporting operations like variable declaration, assignment, and nested scope management. It works with hierarchical environments that track identifiers, values, and scope metadata, along with typed-checked AST structures and mutable interpreter state. Concrete use cases include executing programs with precise control over variable visibility, handling nested function calls, and managing loop unrolling counters during interpretation.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemMake",
      "library": "herdtools7.asllib",
      "description": "This module implements semantic instrumentation for rule-based tracing and analysis of interpreter operations, using a buffer to capture execution events. It provides `use` and `use_with` to apply semantic rules during evaluation, enabling detailed inspection of intermediate states. Concrete use cases include debugging interpreters, logging type-checking decisions, and analyzing program behavior during execution.",
      "description_length": 416,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements an interpreter for evaluating ASL programs with support for typed environments and scoped variable management. It provides functions to evaluate expressions in a given environment, execute programs with initial global values, and run typed-checked code using a static environment. The interpreter handles recursive function evaluation, block-scoped variables, and mutable state transitions using environment structures that track bindings, scopes, and stack sizes.",
      "description_length": 487,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements Tarjan's algorithm for topological sorting and strongly connected component detection. It provides functions to fold over, sort, and index nodes based on their strongly connected components and topological order. It operates on lists of nodes with a successor function mapping each node to its neighbors, suitable for analyzing dependency graphs or directed acyclic structures.",
      "description_length": 400,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingNoBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a non-buffered instrumentation backend for tracking typing rules during interpretation. It directly supports pushing individual typing rules, resetting the internal state, and retrieving the full list of recorded rules. Useful for real-time analysis of type inference steps without intermediate buffering.",
      "description_length": 328,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingRule",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of typing rule identifiers used during type checking and interpretation. It includes operations to convert these identifiers to and from strings, pretty-print them, and access them by index. The module is used to track and categorize type-related decisions and errors, such as type application, subtyping, literal evaluation, and constraint handling, in the context of static analysis and type inference.",
      "description_length": 444,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleSetInstr",
      "library": "herdtools7.asllib",
      "description": "Implements a typing rule instrumentation backend that tracks and enforces single set constraints during type checking. Works directly with type environments and constraint sets to validate typing rules. Useful for ensuring type consistency in interpreters that require strict set-based typing semantics.",
      "description_length": 303,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect.TimeFrame",
      "library": "herdtools7.asllib",
      "description": "This module defines a type `t` with three variants representing time frames and provides functions to compare and determine the later of two time frames. It includes functions to map declaration keywords to time frames, enabling precise tracking of side effects in different contexts. Use cases include analyzing the timing of side effects in program declarations and ensuring correct ordering of execution phases.",
      "description_length": 414,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Parser.Make",
      "library": "herdtools7.asllib",
      "description": "Implements a parser for a simple DSL using a custom token type and AST representation. It provides entry points for parsing statements, specifications, and open expressions from lexed input. Designed for use in domain-specific language interpreters with strict parsing requirements.",
      "description_length": 282,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TypingsMap",
      "library": "herdtools7.asllib",
      "description": "This module implements a polymorphic key-value store with ordered keys, supporting efficient lookups, transformations, and aggregations over dynamic data. It specializes in handling type analysis metadata through ordered key sequences, enabling use cases like tracking type inference constraints during program analysis or accumulating execution metrics with ordered traversal guarantees. Core operations include bidirectional sequence conversions, conditional updates, and combinator-based reductions for processing structured type information.",
      "description_length": 545,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.SideEffect.SES",
      "library": "herdtools7.asllib",
      "description": "This module provides operations to construct, combine, and analyze side-effect sets that track granular effects such as variable reads/writes, exceptions, recursion, and non-determinism. It works with structured side-effect representations (`SES.t`) and ordered sets (`SESet`) to enable efficient membership checks, set operations, and property queries like purity or determinism. Use cases include merging effect collections with conflict resolution, filtering effects by identifiers, and converting hierarchical effect data into flat representations for analysis or reporting.",
      "description_length": 578,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.Annotate",
      "library": "herdtools7.asllib",
      "description": "This module implements type inference and annotation for an abstract syntax tree (AST) using a static environment. It provides two main functions: one that infers types and annotates an AST from scratch, returning the updated AST and resulting global environment, and another that performs the same operation within a preexisting global environment. It works directly with `Asllib.AST.t` and `Asllib.StaticEnv.global`, making it suitable for use in compilers or interpreters where precise type information must be recovered and attached to syntactic structures.",
      "description_length": 561,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Make",
      "library": "herdtools7.asllib",
      "description": "This module supports operations for managing interval sets composed of continuous ranges over a totally ordered type, enabling standard set manipulations like union, intersection, and difference, as well as interval-specific transformations such as splitting gaps, extracting extremal elements, and mapping individual elements. It works with interval sets represented as contiguous ranges, leveraging ordered element types to maintain efficient, structured set operations. Use cases include merging overlapping ranges, identifying missing elements in sequences, and partitioning intervals by size or position in domains like scheduling, genomic intervals, or resource allocation.",
      "description_length": 679,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleSetInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a semantics-based instrumentation backend that tracks and applies a single set of instrumentation rules to interpreter or typing operations. It provides functions to activate and apply these rules, specifically handling `semantics_rule` values that define how instrumentation should be triggered. Concrete use cases include monitoring or modifying the behavior of specific semantic actions during interpretation or type checking.",
      "description_length": 452,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsNoBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a simple stack-based storage for `semantics_rule` values, with `push` adding a rule to the stack, `reset` clearing all stored rules, and `get` retrieving the full list of currently stored rules. It directly works with lists of `semantics_rule` type, enabling tracking and retrieval of instrumentation rules applied during interpretation or typing. Concrete use cases include logging or analyzing the sequence of semantic rules triggered during program execution or type checking.",
      "description_length": 502,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Int",
      "library": "herdtools7.asllib",
      "description": "This module provides operations for managing integer interval sets as inclusive ranges, supporting set construction, membership testing, interval modification, and extremal element retrieval. It works with integer intervals and their collections, enabling both interval-level transformations (e.g., union, intersection, gap detection) and element-level iterations (e.g., folding over individual integers). Specific use cases include efficient range analysis, resource allocation tracking, and handling sparse or continuous integer data spans.",
      "description_length": 542,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.TypingNoInstr",
      "library": "herdtools7.asllib",
      "description": "Implements typing rule instrumentation without runtime tracking, focusing on static analysis enforcement. Works with `typing_rule` values to define and apply type-checking logic during interpretation. Enables precise type validation in language processing pipelines where execution tracing is unnecessary.",
      "description_length": 305,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Error.ErrorPrinter",
      "library": "herdtools7.asllib",
      "description": "This module prints error and warning messages to standard error, including location information from annotated AST nodes. It handles `error_desc` and `warning_desc` values, producing formatted output for diagnostics. Use it to report compiler or interpreter errors and warnings with precise source locations.",
      "description_length": 308,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Error.PPrint",
      "library": "herdtools7.asllib",
      "description": "This module formats and prints error and warning messages with positional information for an abstract syntax tree (AST). It includes functions to print annotated error and warning descriptions, type descriptions, and comma-separated lists. Use it to generate precise, human-readable diagnostics during static analysis or compilation phases.",
      "description_length": 340,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Env.RunTime",
      "library": "herdtools7.asllib",
      "description": "This module manages hierarchical scopes with global and local variable bindings, supporting operations for declaration, assignment, lookup, and scope transitions, while tracking recursion depth and loop unrolling counters. It operates on structured environments that maintain static references and stack-allocated storage, enabling precise control over variable lifetimes and dynamic scope adjustments. Key use cases include subprogram execution, efficient stack size management, and handling nested or recursive computations.",
      "description_length": 526,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsRule",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of symbolic representations for language constructs and operations used in program analysis, including expressions, statements, control flow, and error handling. It provides operations to convert these symbols to and from strings, index them, and access the full list of symbols. Concrete use cases include mapping semantic rules during interpretation or type checking, and enabling precise instrumentation or logging of specific program behaviors.",
      "description_length": 488,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet.Z",
      "library": "herdtools7.asllib",
      "description": "This module provides operations for managing sets of integer intervals using arbitrary-precision integers (`Z.t`), supporting set algebra (union, intersection, difference), interval membership tests, and extremal value queries. It works with interval sets represented as `t` values, offering transformations to and from lists, gap detection between intervals, and element selection via min/max/choice operations. Its design suits tasks requiring precise manipulation of dynamic numeric ranges, such as resource allocation tracking or temporal interval analysis.",
      "description_length": 561,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticOperations.Make",
      "library": "herdtools7.asllib",
      "description": "Implements constraint annotation for binary operations in an AST, using a given environment and constraint system. Works with annotated locations, binary operators, and lists of integer constraints. Useful for static analysis passes that infer or propagate type constraints during compilation.",
      "description_length": 293,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Types.Domain",
      "library": "herdtools7.asllib",
      "description": "This module represents and manipulates the symbolic domains of types, defining the set of values a type can hold. It provides operations to construct domains from types, check membership of literals, compare domains for equality, and determine inclusion order. Concrete use cases include type checking, constraint solving, and validating literals against type definitions.",
      "description_length": 372,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSet",
      "library": "herdtools7.asllib",
      "description": "This module implements a functional set abstraction for elements of type `SemanticsCmp.t`, supporting efficient membership tests, set algebra (union, intersection, difference), and transformations like `map`, `filter`, and `partition`. It integrates with sequences for bidirectional conversion and iterative processing, enabling workflows that combine set operations with ordered data traversal. The design facilitates semantic analysis tasks requiring precise set-based computations, such as tracking reachable states or propagating type constraints in a functional pipeline.",
      "description_length": 576,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypMake",
      "library": "herdtools7.asllib",
      "description": "This module tracks typing rule applications during program analysis using a buffer. It provides `use` to log a typing rule application and `use_with` to do so while returning a value. It works with the `Buffer` module to store and manage rule applications for debugging or performance analysis.",
      "description_length": 294,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a single-buffered instrumentation backend for tracking semantics rules during interpretation or typing. It provides operations to push individual rules onto an internal buffer, reset the buffer to an empty state, and retrieve the full list of recorded rules. It is used to capture and inspect the sequence of semantics rule applications in a single execution context.",
      "description_length": 390,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.ASTUtils.Infix",
      "library": "herdtools7.asllib",
      "description": "This module provides operators for creating integer literals and expressions directly from integers. It works with the `Asllib.AST.literal` and `Asllib.AST.expr` data types. Use cases include embedding numeric constants into AST structures without manually constructing each node.",
      "description_length": 280,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingCmp",
      "library": "herdtools7.asllib",
      "description": "This module provides a total ordering function for elements of type `Asllib.Instrumentation.typing_rule`. It enables comparison of typing rules based on their structural identity, allowing their use in ordered data structures like sets and maps. A concrete use case is maintaining a sorted collection of typing rules or efficiently checking for the presence of specific rules within a set.",
      "description_length": 389,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleSetBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting typing rules during instrumentation, providing operations to push new rules, reset the buffer, and retrieve the collected list. It works with the `typing_rule` type, maintaining a mutable in-memory set to track rule applications. Concrete use cases include logging and analyzing typing decisions during interpreter execution or type checking passes.",
      "description_length": 396,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.DeterministicBackend",
      "library": "herdtools7.asllib",
      "description": "This module offers monadic composition (`bind`, `prod_par`), control flow primitives (`choice`, `commit`), and value manipulation for deterministic interpreters. It operates on a structured `value` type representing integers, literals, vectors, records, and bitvectors, with support for field access, unary/binary operations, and exception handling. Designed for deterministic language interpreters, it enables precise program analysis, symbolic execution, and formal verification workflows.",
      "description_length": 491,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsNoInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a no-op instrumentation backend for interpreters and type systems. It provides `use` and `use_with` functions that accept a semantics rule and optionally a value, returning the value unchanged without applying any instrumentation. It works with abstract semantics rules and arbitrary typed values, enabling scenarios where instrumentation needs to be disabled or bypassed during execution or type analysis.",
      "description_length": 429,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Lexer.Make",
      "library": "herdtools7.asllib",
      "description": "This module implements a lexer for parsing assembly-like syntax, handling operations such as string and bitvector literal parsing, comment skipping, and token generation. It works with lexing buffers and token types, producing specific token values from input streams. Concrete uses include processing assembly source code for interpreters, compilers, or static analysis tools.",
      "description_length": 377,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ASTUtils.IMap",
      "library": "herdtools7.asllib",
      "description": "This module provides ordered map operations for efficiently managing associations between identifiers and arbitrary data, including insertion, lookup, combination, and ordered traversal. It works with maps structured as balanced trees keyed by `identifier`, supporting list-valued entries and functional transformations of stored values. Typical use cases include tracking variable bindings during AST analysis, accumulating identifier-associated metadata, and serializing structured maps to ordered sequences or formatted output.",
      "description_length": 530,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleSetBuffer",
      "library": "herdtools7.asllib",
      "description": "This module implements a buffer for collecting semantics rules during interpretation or typing. It provides operations to add a rule (`push`), retrieve all collected rules (`get`), and reset the buffer (`reset`). The buffer stores rules in a list structure, ensuring they are processed in the order they were added.",
      "description_length": 315,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing.TypeCheckDefault",
      "library": "herdtools7.asllib",
      "description": "Implements default type-checking logic for filling type annotations in an abstract syntax tree (AST). It processes AST nodes using a global static environment, ensuring type consistency and resolving type variables. Used during compilation to validate and annotate expressions with concrete types based on context.",
      "description_length": 314,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsMap",
      "library": "herdtools7.asllib",
      "description": "This module implements a map structure with ordered keys and polymorphic values, supporting standard operations like insertion, deletion, lookup, and ordered traversal, along with merging and combinators for ordered",
      "description_length": 215,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleBuffer",
      "library": "herdtools7.asllib",
      "description": "Implements a single-buffered instrumentation backend for tracking typing rules during interpretation. Provides `push` to record a typing rule, `reset` to clear the buffer, and `get` to retrieve the collected rules. Useful for debugging or analyzing type inference steps in a running interpreter.",
      "description_length": 295,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.TypingSingleInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a typing instrumentation backend that tracks and applies single typing rules during type checking. It provides functions to activate or apply specific typing rules, such as `use` to register a rule globally and `use_with` to apply a rule within a scoped computation. It works directly with the `typing_rule` type, which represents individual type inference or checking rules. Use cases include enforcing or tracing specific type constraints during the execution of an interpreter or type checker.",
      "description_length": 519,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort.ASTFold",
      "library": "herdtools7.asllib",
      "description": "This module provides a `fold` function that processes an abstract syntax tree (AST) by iterating over its declarations in dependency order. It handles two types of steps: individual non-recursive declarations and groups of mutually recursive declarations. Use this module to analyze or transform ASTs in a way that respects the order of dependencies between declarations, such as for compilation or static analysis tasks.",
      "description_length": 421,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsCmp",
      "library": "herdtools7.asllib",
      "description": "This module implements a total ordering function for comparing semantics rules based on their structural properties. It operates directly on the type `t` representing semantics rules, enabling precise sorting and equality checks. It is used to ensure consistent comparison behavior in instrumentation backends that require ordered rule processing.",
      "description_length": 347,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.StaticBackend",
      "library": "herdtools7.asllib",
      "description": "This module provides a monadic interpreter backend for symbolic computation, offering operations to construct and manipulate abstract values (e.g., integers, vectors, records) and manage control/data dependencies during symbolic execution. It supports structured data transformations through bitvector operations, record/vector indexing, and exception handling, while enabling static evaluation via combinators like parallel composition and conditional branching. Key use cases include modeling symbolic execution states, enforcing value conversion protocols, and instrumenting interpreters with debugging or state-commitment hooks.",
      "description_length": 632,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native.NoScope",
      "library": "herdtools7.asllib",
      "description": "This module manages scope identifiers for runtime and initialization contexts. It provides `global` to reference the global scope based on an initialization flag and `new_local` to generate a fresh scope identifier for function calls. It works with a unit type `t` and string identifiers, primarily used in tracking execution scopes during program interpretation or compilation.",
      "description_length": 378,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Instrumentation.SemanticsSingleInstr",
      "library": "herdtools7.asllib",
      "description": "This module implements a semantics-based instrumentation backend that tracks and applies a single active instrumentation rule during interpretation or typing. It provides functions to activate a rule globally or apply it within a scoped context, ensuring that the rule's effects are confined to the target execution path. Concrete use cases include monitoring specific evaluation steps, enforcing runtime checks, or logging intermediate states in a controlled manner.",
      "description_length": 467,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Tokens",
      "library": "herdtools7.asllib",
      "description": "This module defines a comprehensive set of lexical token types used for parsing and representing source code elements such as keywords, operators, literals, and punctuation. It includes specific variants for language constructs like control flow (`IF`, `WHILE`, `FOR`), type definitions (`TYPE`, `ENUMERATION`, `RECORD`), and literal values (`INT_LIT`, `STRING_LIT`, `BOOL_LIT`). These tokens are used directly in the concrete syntax tree (CST) during parsing to represent the structure and semantics of the input language.",
      "description_length": 523,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Splitasl",
      "library": "herdtools7.asllib",
      "description": "Splits a lexbuffer into sections based on ASL-style delimiter lines starting with `// =======...`. Each section is returned with its starting line number and content. Useful for parsing and processing ASL code files into manageable blocks.",
      "description_length": 239,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Native",
      "library": "herdtools7.asllib",
      "description": "This module implements a deterministic interpreter for evaluating abstract syntax trees with scoped environments, using native values to represent literals, vectors, and records. It provides operations for variable binding, scope management, and control flow, supporting structured execution of typed-checked programs with features like nested scopes and loop unrolling. Concrete use cases include executing domain-specific languages with precise semantics, performing program analysis, and supporting symbolic execution workflows through native data transformations.",
      "description_length": 567,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Error",
      "library": "herdtools7.asllib",
      "description": "This module handles error and warning generation, formatting, and reporting during static analysis or compilation of abstract syntax trees (ASTs), with support for annotating diagnostics with source location information. It defines error types for type mismatches, unsupported operations, identifier/field issues, and constraint violations, while enabling output in human-readable or",
      "description_length": 383,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticOperations",
      "library": "herdtools7.asllib",
      "description": "Implements constraint annotation for binary operations in an abstract syntax tree, using a provided environment and constraint system. It operates on annotated locations, binary operators, and lists of integer constraints, applying constraints element-wise across operands. Useful for static analysis passes that infer or propagate type constraints during compilation.",
      "description_length": 368,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Asl_stdlib",
      "library": "herdtools7.asllib",
      "description": "Contains string constants representing OCaml standard library modules. Provides direct access to the standard library module names as string values, specifically for referencing the full standard library and its core components. Useful for tooling or metaprogramming tasks that require explicit module name references.",
      "description_length": 318,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Desugar",
      "library": "herdtools7.asllib",
      "description": "This module handles desugaring complex syntactic constructs into simpler forms within an abstract syntax tree. It processes setter calls, elided parameters, and left-hand side accesses involving fields, tuples, and slices, converting them into basic expressions and statements. It supports case statements by transforming them into conditionals, and ensures correctness in variable usage during destructuring assignments.",
      "description_length": 421,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Types",
      "library": "herdtools7.asllib",
      "description": "This module provides type analysis, transformation, and comparison operations for working with abstract syntax tree (AST) types and functions within a structured type environment. It supports type classification (e.g., primitive, aggregate, named), domain operations, and relationship checks like subtyping, equality, and clash detection, primarily acting on `AST.ty` and `AST.func` structures. Key use cases include enforcing type constraints during compilation, resolving hierarchical type relationships, and maintaining consistency in complex type systems aligned with language specification requirements.",
      "description_length": 608,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.AST",
      "library": "herdtools7.asllib",
      "description": "This module provides structured representations of ASL programs for parsing, type-checking, and static analysis, with support for distinguishing untyped and typed syntactic constructs. It operates on hierarchical data types including expressions, statements, declarations, and subprogram definitions, alongside enumerations for unary/binary operators, literals, and type qualifiers. The design facilitates compiler passes that require both structural traversal of top-level declaration sequences and semantic analysis of nested program elements.",
      "description_length": 545,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Builder",
      "library": "herdtools7.asllib",
      "description": "This module constructs AST.t values from source files or lexing buffers, supporting multiple AST types and parser configurations. It handles version-specific parsing, error recovery, and integration with standard library definitions. Concrete uses include parsing Alloy specifications with customizable syntax rules and building typed ASTs for analysis or compilation.",
      "description_length": 368,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ParserConfig",
      "library": "herdtools7.asllib",
      "description": "Defines a configuration interface for parsers, specifying parameters like input handling, error recovery, and parsing modes. It works with token streams and error reporting structures. Used to customize parser behavior for different grammars or input formats.",
      "description_length": 259,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.SideEffect",
      "library": "herdtools7.asllib",
      "description": "This module represents and analyzes side effects in program declarations using detailed effect types like reads, writes, exceptions, and non-determinism. It supports operations to compare, print, and determine properties such as purity and symbolic evaluability, based on structured effect data and time frames. Use cases include tracking variable access, enforcing execution order, and merging effect sets with conflict resolution during analysis.",
      "description_length": 448,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Interpreter",
      "library": "herdtools7.asllib",
      "description": "Implements a reference interpreter for the ASL language, evaluating abstract syntax trees using environment-based execution. It supports operations for variable binding, expression evaluation, and control flow interpretation. Concrete use cases include executing ASL programs from parsed ASTs and testing semantic correctness of language constructs.",
      "description_length": 349,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticInterpreter",
      "library": "herdtools7.asllib",
      "description": "Statically evaluates expressions in a given environment, producing literals or integers. Works with abstract syntax trees and environments mapping variables to values. Used to compute constant expressions during compilation or analysis without runtime execution.",
      "description_length": 262,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Storage",
      "library": "herdtools7.asllib",
      "description": "This module implements a storage system modeling memory with a map-like interface, supporting operations to bind, assign, and retrieve variables in an environment. It works with identifiers from the AST module and maintains separate mappings for variable bindings and heap-allocated values using pointer-based addressing. Concrete use cases include tracking variable declarations and mutations during program evaluation, managing memory cells for expressions, and supporting semantic operations like assignment and scoping in an imperative language model.",
      "description_length": 555,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Lexer",
      "library": "herdtools7.asllib",
      "description": "This module implements a lexer for parsing assembly-like syntax, handling operations such as string and bitvector literal parsing, comment skipping, and token generation. It works with lexing buffers and token types, producing specific token values from input streams. Concrete uses include processing assembly source code for interpreters, compilers, or static analysis tools.",
      "description_length": 377,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.StaticEnv",
      "library": "herdtools7.asllib",
      "description": "This module provides operations for managing hierarchical environments that track type declarations, identifier bindings, and expression equivalences during type analysis. It works with structured environments containing global and local scopes, supporting typed variable declarations, subprogram signature registration, and constant value resolution. These capabilities enable type-checking workflows that require precise symbol resolution and equivalence validation in compiler frontends.",
      "description_length": 490,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Typing",
      "library": "herdtools7.asllib",
      "description": "This module performs type inference and annotation on an abstract syntax tree (AST), filling type holes using a static environment. It provides the `annotate_ast` function to disambiguate type-dependent behavior, working directly with `Asllib.AST.t` and `Asllib.StaticEnv.global`. It supports use cases such as compiler stages where precise type information must be recovered and attached to syntactic structures for further processing.",
      "description_length": 436,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.TopoSort",
      "library": "herdtools7.asllib",
      "description": "This module implements topological sorting and strongly connected component detection using Tarjan's algorithm. It operates on lists of nodes with a successor function, providing functions to fold, sort, and index nodes based on their dependencies. Use it to process dependency graphs or analyze directed acyclic structures where order of evaluation or grouping of mutual dependencies matters.",
      "description_length": 393,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.PP",
      "library": "herdtools7.asllib",
      "description": "This module provides functions to convert ASL AST components\u2014including expressions, statements, types, literals, and annotations\u2014into formatted string representations. It operates on data structures such as AST nodes, binary/unary operators, and source positions, supporting use cases like debugging and generating human-readable code displays.",
      "description_length": 344,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.StaticModel",
      "library": "herdtools7.asllib",
      "description": "This module provides functions for comparing and simplifying expressions within a static environment. It supports operations like checking equality of expressions, normalizing expressions to canonical forms, and reducing expressions to primitive values such as booleans or integers. It works directly with static environments and abstract syntax tree (AST) expressions, enabling tasks like constant folding and expression simplification during static analysis.",
      "description_length": 460,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Env",
      "library": "herdtools7.asllib",
      "description": "This module implements hierarchical scope management with operations for variable declaration, assignment, and lookup across global and local contexts. It maintains structured environments that track recursion depth and loop unrolling counters, supporting dynamic scope transitions and precise variable lifetime control. Used for executing subprograms, managing stack size during evaluation, and handling nested or recursive computations efficiently.",
      "description_length": 450,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.ASTUtils",
      "library": "herdtools7.asllib",
      "description": "This module offers functions for constructing, transforming, and analyzing abstract syntax trees (ASTs) with support for positional and version metadata, structural equality checks, identifier renaming, and expression substitution. It operates on annotated AST nodes, expressions, statements, identifiers, bitfields, and type definitions, using helper structures like identifier-based sets and maps. Key applications include code generation, AST manipulation with version-aware transformations, and graph algorithms for identifier mappings, such as cycle detection or transitive closure computation.",
      "description_length": 599,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Backend",
      "library": "herdtools7.asllib",
      "description": "Defines core backend interfaces for the interpreter, including scope management and execution context. Works with abstract syntax trees and environment structures to evaluate code. Enables implementing interpreters for domain-specific languages with precise scoping and evaluation rules.",
      "description_length": 287,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Operations",
      "library": "herdtools7.asllib",
      "description": "This module evaluates and manipulates literals and expressions in an abstract syntax tree, including integer conversion, bitvector length checks, and arithmetic operations. It handles data types such as annotated AST nodes, bitvectors, integers (Z), and rational numbers (Q). Concrete use cases include evaluating binary and unary operations, checking positivity of numeric values, and ensuring bitvector compatibility during expression processing.",
      "description_length": 448,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Diet",
      "library": "herdtools7.asllib",
      "description": "This module implements interval sets as contiguous ranges over ordered types, supporting union, intersection, difference, and interval-specific operations like gap splitting and extremal element extraction. It works with integer and arbitrary-precision integer types through dedicated submodules, enabling efficient range analysis, resource allocation tracking, and handling of genomic or temporal intervals. Use cases include merging overlapping ranges, detecting missing elements in sequences, and partitioning intervals by size or position.",
      "description_length": 543,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Version",
      "library": "herdtools7.asllib",
      "description": "This module provides direct access to version metadata, revision identifiers, and library directory paths. It exposes string values for runtime inspection of build and installation details. Useful for logging, diagnostics, or configuring paths based on installed library locations.",
      "description_length": 281,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asllib.Parser",
      "library": "herdtools7.asllib",
      "description": "Implements a parser for a domain-specific language with strict parsing requirements, converting lexed tokens into an abstract syntax tree. Provides functions to parse statements, specifications, and open expressions using a custom token type. Designed for interpreters needing precise control over syntax and structure validation during parsing.",
      "description_length": 345,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Serialize",
      "library": "herdtools7.asllib",
      "description": "This module serializes an AST into valid OCaml string representations. It provides functions to convert subprogram types to strings, print ASTs into buffers, and generate OCaml strings from full ASTs. Use it when generating OCaml code from an AST, such as in code generation or pretty-printing tools.",
      "description_length": 300,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asllib.Instrumentation",
      "library": "herdtools7.asllib",
      "description": "This module offers instrumentation backends for monitoring and analyzing semantic and typing rule applications during program execution or type checking. It operates on semantic and typing rule types, utilizing sets, maps, and buffering mechanisms to manage rule tracking, constraint enforcement, and logging. Specific use cases include auditing rule application sequences, optimizing type system behavior, and debugging interpreter operations through structured data collection and comparison.",
      "description_length": 494,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 87,
    "meaningful_modules": 82,
    "filtered_empty_modules": 5,
    "retention_rate": 0.9425287356321839
  },
  "statistics": {
    "max_description_length": 679,
    "min_description_length": 215,
    "avg_description_length": 424.8170731707317,
    "embedding_file_size_mb": 1.1890869140625
  }
}