{
  "package": "horned_worm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:02:53.206582",
  "modules": [
    {
      "module_path": "Horned_worm.Http_context.Body",
      "library": "horned_worm",
      "description": "This module handles HTTP message bodies with support for both in-memory strings and asynchronous byte streams via pipes. It provides operations to convert bodies to and from strings and pipes, inspect content properties like transfer encoding, and apply transformations or processing pipelines. Concrete use cases include handling HTTP request/response payloads in a web server, streaming large data uploads or downloads, and modifying body content asynchronously.",
      "description_length": 464,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Http_context.Client",
      "library": "horned_worm",
      "description": "This module sends HTTP requests with support for arbitrary methods, bodies, and headers, handling responses asynchronously. It works with URIs, HTTP requests/responses, SSL configurations, and streaming bodies via pipes or deferreds. Use it to interact with REST APIs, submit forms, or stream data over HTTP with methods like GET, POST, PUT, DELETE, and PATCH.",
      "description_length": 360,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Web_part",
      "library": "horned_worm",
      "description": "Handles HTTP requests by composing functions that process incoming contexts and produce tasks. It works with HTTP handlers, contexts, and tasks to manage request lifecycle and responses. Used to define route handlers and middleware that transform requests into asynchronous response operations.",
      "description_length": 294,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Http_handler",
      "library": "horned_worm",
      "description": "Handles HTTP requests by transforming context into tasks. Works with `Horned_worm.Http_context.t` and `Horned_worm.Http_task.t`. Used to define request routing and response generation logic.",
      "description_length": 190,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Cors_config",
      "library": "horned_worm",
      "description": "This module defines a CORS configuration with support for specifying allowed origins as any, a list, or a predicate function. It includes settings for cookies, max age, and exposed headers. Use this to configure cross-origin request policies in web applications.",
      "description_length": 262,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Http_context",
      "library": "horned_worm",
      "description": "This module represents an HTTP transaction context, providing access to connections, requests, responses, and cookies. It works with HTTP requests and responses, socket addresses, and cookie lists. Use it to build middleware, inspect incoming requests, manage sessions via cookies, or construct responses in a web server.",
      "description_length": 321,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Horned_worm.Http_task",
      "library": "horned_worm",
      "description": "Handles asynchronous HTTP request processing with optional context. It provides functions to create, compose, and execute tasks that produce HTTP responses, supporting operations like mapping, binding, and error handling. Useful for building modular web servers where tasks represent individual request handlers or middleware components.",
      "description_length": 337,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Horned_worm",
      "library": "horned_worm",
      "description": "This module provides HTTP request handling, routing, and middleware composition capabilities, enabling developers to filter, transform, and respond to requests based on paths, methods, headers, and custom predicates. It operates on composable web handler types, HTTP contexts, and asynchronous task primitives, while supporting advanced use cases like secure header configuration (CORS, CSP), static file serving, and RESTful API routing. The design facilitates building asynchronous web servers with declarative pipeline composition and fine-grained control over response semantics such as streaming, caching, and content negotiation.",
      "description_length": 635,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 635,
    "min_description_length": 190,
    "avg_description_length": 357.875,
    "embedding_file_size_mb": 0.11632537841796875
  }
}