{
  "package": "cohttp-server-lwt-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:17.401108",
  "modules": [
    {
      "module_path": "Cohttp_server_lwt_unix.Body.Substring",
      "library": "cohttp-server-lwt-unix",
      "description": "This module provides functions for efficiently managing and manipulating HTTP message bodies using substring-based storage. It works directly with custom buffer types represented as records containing base strings, positions, and lengths. Concrete use cases include parsing and transforming incoming HTTP requests or responses with minimal memory allocation and copying, particularly beneficial in high-throughput server applications.",
      "description_length": 434,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Body.Encoding",
      "library": "cohttp-server-lwt-unix",
      "description": "This module defines encodings for HTTP message bodies, specifically supporting fixed-length and chunked transfer encodings. It works with body data by determining how content is serialized and transmitted over the network. Use it to specify the encoding method when constructing HTTP responses in a server handler.",
      "description_length": 314,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Body",
      "library": "cohttp-server-lwt-unix",
      "description": "This module handles HTTP message bodies with support for both static and streaming content, using Lwt for asynchronous operations and custom `t` and `Substring.t` types for efficient buffer management. It enables constructing responses with fixed strings via `string` or streaming data incrementally through `stream`, useful for serving large files or real-time content. The submodule for substring-based storage optimizes parsing and transformation of HTTP messages with minimal memory overhead, while the encoding submodule handles fixed-length and chunked transfer encodings during response serialization. Together, these components provide a cohesive interface for building, manipulating, and transmitting HTTP body content in both client and server applications.",
      "description_length": 767,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Context",
      "library": "cohttp-server-lwt-unix",
      "description": "This module provides direct access to HTTP request and response handling in a high-performance LWT-based server. It supports operations to retrieve the incoming HTTP request, read or discard the request body, and send a response with a custom body. It is used for building lightweight, custom HTTP servers where fine-grained control over network I/O and request processing is required.",
      "description_length": 385,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix",
      "library": "cohttp-server-lwt-unix",
      "description": "This module implements a high-performance HTTP server using Lwt for asynchronous I/O, offering direct control over connections and request handling through low-level channel operations. It works with custom `t` types for managing HTTP bodies and `Substring.t` for efficient buffer handling, enabling use cases like streaming large files or building lightweight, high-throughput HTTP services. Child modules provide support for constructing and transmitting HTTP bodies using `string` or `stream`, and handling requests with fine-grained control over input and output. Specific examples include serving real-time data incrementally or embedding HTTP handling into applications requiring minimal overhead and custom processing logic.",
      "description_length": 731,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 767,
    "min_description_length": 314,
    "avg_description_length": 526.2,
    "embedding_file_size_mb": 0.018579483032226562
  }
}