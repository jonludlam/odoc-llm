{
  "package": "cohttp-server-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:17.533758",
  "modules": [
    {
      "module_path": "Cohttp_server_lwt_unix.Body.Encoding",
      "description": "Encodes integer values into a specific binary format using a fixed-size representation or a chunked encoding scheme. It operates on 64-bit integers and the abstract type `t` to represent encoded data. This is used to prepare numeric data for transmission or storage in a structured binary format.",
      "description_length": 296,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Body.Substring",
      "description": "Provides functions to extract, compare, and manipulate substrings from strings, including checking for presence, slicing, and finding indices. Works with string data and returns results as tagged types for safe handling. Used to parse log entries by extracting error codes and to validate input formats in configuration files.",
      "description_length": 326,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Body",
      "description": "Encodes 64-bit integers into binary formats using fixed or chunked schemes, and processes strings by extracting and manipulating substrings with safe tagged returns. It handles numeric data for storage or transmission and enables precise string analysis for log parsing and input validation. Operations include encoding integers, slicing strings, and locating substrings. Examples include serializing timestamps and isolating error codes from log messages.",
      "description_length": 456,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix.Context",
      "description": "Provides operations to extract and manipulate HTTP requests, including reading or discarding the request body and sending a response with a specified body. Works with HTTP request objects and response bodies. Used to handle incoming HTTP traffic by inspecting requests and generating appropriate responses.",
      "description_length": 306,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cohttp-server-lwt-unix",
      "description": "Provides HTTP request and response parsing, handling, and serialization using a fast, portable parser. Works with core HTTP data types such as headers, status codes, and body content. Enables building secure, asynchronous HTTP servers with TLS support through Lwt and ocaml-tls.",
      "description_length": 278,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_server_lwt_unix",
      "description": "Provides low-level control over HTTP request handling and binary data manipulation for high-performance server applications. It supports encoding 64-bit integers in binary formats, slicing and analyzing strings, and processing HTTP requests by reading or discarding bodies and sending custom responses. Operations include serializing numeric data, extracting substrings, and generating HTTP responses with specified content. Examples include encoding timestamps for network transmission and isolating error codes from log entries.",
      "description_length": 530,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 530,
    "min_description_length": 278,
    "avg_description_length": 365.3333333333333,
    "embedding_file_size_mb": 0.022217750549316406
  }
}