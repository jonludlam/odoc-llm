{
  "package": "opentelemetry",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 57,
  "creation_timestamp": "2025-06-18T16:44:07.225950",
  "modules": [
    {
      "module_path": "Opentelemetry.Conventions.Metrics.Process.Runtime.Ocaml.GC",
      "description": "Provides metrics related to garbage collection activity, including compaction rates, major and minor collection counts, and heap usage. Works with string representations of internal GC statistics. Used to monitor and analyze memory management performance in real-time applications.",
      "description_length": 281,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.Process.Runtime.Ocaml",
      "description": "Tracks garbage collection metrics such as compaction rates, major and minor collection counts, and heap usage through string-parsed data. Exposes operations to extract and process GC-related statistics from raw string inputs. Enables real-time memory management analysis by converting internal GC data into actionable numerical values. Allows developers to monitor application performance and optimize memory usage based on detailed GC behavior.",
      "description_length": 445,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.HTTP.Server",
      "description": "Tracks metrics related to HTTP request and response sizes, including duration, active count, and body size distributions. Works with string-based metrics and histogram data structures. Used to monitor system performance and resource usage in real-time.",
      "description_length": 252,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.HTTP.Client",
      "description": "Tracks the duration of client requests and measures the size of request and response bodies using histograms. It exposes metrics for monitoring performance and resource usage in network interactions. Used to analyze traffic patterns and optimize system efficiency.",
      "description_length": 264,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.Process.Runtime",
      "description": "Tracks garbage collection metrics by parsing and processing string-based data to extract numerical values for compaction rates, collection counts, and heap usage. Provides functions to analyze GC behavior and support real-time memory management decisions. Developers can monitor application performance and optimize resource allocation using detailed statistical outputs. Examples include calculating average compaction rates over intervals or identifying memory bottlenecks through collection frequency trends.",
      "description_length": 511,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.Process.Runtime",
      "description": "Provides access to runtime metadata through named, versioned, and described properties. Works with string-based identifiers and descriptive text. Used to dynamically retrieve and display application-specific information at runtime.",
      "description_length": 231,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.Process",
      "description": "Tracks garbage collection metrics by extracting numerical values from string data, enabling analysis of compaction rates, collection counts, and heap usage. It offers functions to compute averages, detect trends, and identify memory bottlenecks. Operations include parsing, statistical aggregation, and real-time performance monitoring. Users can track changes in heap usage over time or evaluate the impact of compaction rates on application efficiency.",
      "description_length": 454,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics.HTTP",
      "description": "Tracks HTTP-related metrics such as request and response durations, body sizes, and active counts using histograms and string-based metrics. It supports real-time monitoring of system performance and network traffic analysis. Operations include recording durations, aggregating body sizes, and tracking active requests. Examples include measuring API response times, analyzing traffic patterns, and optimizing resource allocation.",
      "description_length": 430,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.Process",
      "description": "Manages application metadata through string identifiers, enabling dynamic retrieval and display of versioned, descriptive properties at runtime. Key operations include fetching and querying metadata by name. Supports scenarios like logging version numbers, displaying build information, or adapting behavior based on runtime properties. Data is structured as key-value pairs with associated descriptions and versions.",
      "description_length": 417,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.Code",
      "description": "Provides functions to extract and represent code-related metadata such as file paths, function names, line numbers, and stack traces. Works with strings and integers to encode detailed source code information. Used to annotate traces with precise location data for debugging and performance analysis.",
      "description_length": 300,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.Service",
      "description": "Provides access to service-specific identifiers including name, namespace, instance ID, and version as strings. Works with service metadata stored in a structured format. Used to uniquely identify and reference services in distributed systems and configuration management.",
      "description_length": 272,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.HTTP",
      "description": "Provides functions to extract and represent specific HTTP-related values such as error types, request methods, route paths, full URLs, status codes, server addresses, ports, and URL schemes. Works with string and integer representations of HTTP protocol elements. Used to inspect and log details of HTTP requests and responses in networked applications.",
      "description_length": 353,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes.Host",
      "description": "Extracts and represents host-specific metadata such as unique identifier, hostname, system type, architecture, IP and MAC addresses, and operating system image details. Works with string-based data representing system attributes and configuration. Used to enrich telemetry data with precise host information for monitoring and diagnostics.",
      "description_length": 339,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Collector.Noop_backend",
      "description": "Handles trace, metric, and log data transmission using OpenTelemetry protocols, with support for GC metric emission and periodic background tasks. Operates on resource-span, resource-metric, and resource-log structures from the Opentelemetry_proto module. Used to integrate with observability pipelines, trigger garbage collection metrics collection, and manage scheduled maintenance operations.",
      "description_length": 395,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Collector.Debug_backend",
      "description": "Handles sending trace, metric, and log data in OpenTelemetry format to a remote collector. Processes resource-based data structures such as resource spans, metrics, and logs. Used to integrate with distributed tracing systems, monitor application performance, and collect structured logs for analysis. Includes mechanisms for periodic background tasks, garbage collection metric emission, and callback execution during scheduled intervals.",
      "description_length": 439,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Attributes",
      "description": "combines metadata handling across application, code, service, HTTP, and host contexts, offering structured access to key-value pairs, source locations, service identifiers, HTTP details, and system attributes. It supports operations like querying, extracting, and representing metadata using strings, integers, and structured data. Users can retrieve version numbers, trace code locations, identify services, log HTTP interactions, and gather host diagnostics. Examples include logging build info, annotating stack traces, referencing distributed services, inspecting request URLs, and collecting system metrics.",
      "description_length": 612,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Conventions.Metrics",
      "description": "Collects and analyzes system performance data through numerical parsing, statistical computation, and real-time monitoring. It handles heap usage, garbage collection metrics, and HTTP request statistics, supporting operations like trend detection, duration tracking, and size aggregation. Users can evaluate compaction efficiency, monitor API response times, and assess memory bottlenecks. Data is extracted from strings, processed into histograms, and used for performance optimization.",
      "description_length": 487,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Trace_context.Traceparent",
      "description": "Parses and constructs values for the traceparent header, which includes a version, trace ID, parent span ID, and flags. It works with `Trace_id.t` and `Span_id.t` to encode and decode these values into a formatted string. Used to propagate distributed tracing context across services in a network.",
      "description_length": 297,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_atomic.Atomic",
      "description": "Provides atomic read, write, and update operations for shared values, including compare-and-set and fetch-and-add for safe concurrent modification. Works with atomic references wrapping any type, with specialized integer operations for incrementing and decrementing. Used to manage shared state in multithreaded environments, such as tracking counters or coordinating access to resources.",
      "description_length": 388,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Lock",
      "description": "Provides functions to manage a global lock by setting custom lock/unlock operations and executing code within a locked critical section. Operates on functions that encapsulate locking behavior and returns values from protected computations. Used to synchronize access to shared resources in concurrent environments.",
      "description_length": 315,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Rand_bytes",
      "description": "Generates 8 or 16 bytes of random data, suitable for creating unique trace and span identifiers. Uses a configurable random generator, with defaults based on the Random module. Provides direct access to byte sequences for use in distributed tracing systems.",
      "description_length": 257,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.AList",
      "description": "Provides operations to create, modify, and inspect an atomic list structure. Supports adding elements, checking emptiness, and capturing a snapshot of all elements. Used to safely manage shared state in concurrent or event-driven contexts.",
      "description_length": 239,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Timestamp_ns",
      "description": "Calculates and retrieves Unix timestamps in nanoseconds since the epoch, with a constant representing nanoseconds in a day. It handles 64-bit integer values to represent time accurately at high resolution. Used for precise time tracking in distributed systems and logging.",
      "description_length": 272,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Collector",
      "description": "Handles sending trace, metric, and log data to a backend using structured lists of OpenTelemetry resources. Executes background tasks and triggers GC metric collection through dedicated signals. Manages periodic operations via a tick function and customizable callback execution.",
      "description_length": 279,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Trace_id",
      "description": "Generates and manipulates 16-byte trace identifiers, supporting conversion to and from byte arrays and hexadecimal strings. Provides validation checks and a placeholder dummy value for testing. Used to uniquely track distributed transactions across systems.",
      "description_length": 257,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Span_id",
      "description": "Generates and manipulates unique span identifiers, supporting conversion to and from byte sequences and hexadecimal strings. Provides validation checks and a placeholder \"dummy\" value for testing. Enables efficient serialization and representation in logging or tracing systems.",
      "description_length": 278,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Span_ctx",
      "description": "Provides functions to create and manipulate span contexts containing trace and parent identifiers, with support for sampling status. Works with trace IDs and span IDs, and converts between internal representations and W3C trace context formats. Used to propagate trace information across distributed systems and validate context integrity.",
      "description_length": 339,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Conventions",
      "description": "Combines metadata handling across application, code, service, HTTP, and host contexts, providing structured access to key-value pairs, source locations, service identifiers, and system attributes through query, extract, and representation operations. Collects and analyzes system performance data, enabling numerical parsing, statistical computation, and real-time monitoring of heap usage, garbage collection, and HTTP metrics. Users can retrieve version numbers, trace code locations, log HTTP interactions, evaluate compaction efficiency, and monitor API response times. Examples include annotating stack traces with service references, inspecting request URLs, and generating histograms for memory usage trends.",
      "description_length": 715,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Globals",
      "description": "Manages process-wide metadata and configuration, including service name, namespace, instance ID, and instrumentation scope. Works with string references, optional strings, and lists of key-value pairs for attributes. Used to set global attributes for traces and metrics, customize span kinds, and generate attribute lists for telemetry data.",
      "description_length": 341,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Event",
      "description": "Creates an event with a specified timestamp and attributes, associated with a trace span. Operates on timestamp values and key-value lists to construct event records. Used to log specific occurrences within a distributed trace for debugging or monitoring purposes.",
      "description_length": 264,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Span_link",
      "description": "Provides functions to create and convert span links using trace and span IDs, along with optional trace state, attributes, and dropped attribute counts. Works with trace IDs, span IDs, and key-value attribute lists to represent relationships between spans across traces. Used to track dependencies in distributed systems, such as linking a batch processing span to individual request spans from different projects.",
      "description_length": 414,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Span_status",
      "description": "Creates a status object with a message and numeric code, suitable for tracking operation outcomes. Operates on a record type containing a string message and an integer code. Used to encode and propagate detailed error or success information within tracing systems.",
      "description_length": 264,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Span_kind",
      "description": "Provides functions to create and inspect span kinds used in tracing, including conversion to and from protocol buffer representations. Works with the `t` type, which encodes different span kind values such as internal, server, client, etc. Used to annotate trace records with semantic information about the span's role in distributed systems.",
      "description_length": 342,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Scope",
      "description": "Provides methods to access and modify span attributes, events, links, status, and kind, along with utilities to convert a scope to a span link or context. Operates on trace and span IDs, key-value pairs, events, and span links. Used to track and annotate distributed traces, such as adding exceptions, events, or links to a specific span during execution.",
      "description_length": 355,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Span",
      "description": "Tracks time-bound operations within a trace, associating them with start and end timestamps, parent spans, and linked spans. It handles structured attributes, events, and status information, using trace identifiers to maintain context. Used to record detailed execution flow in distributed systems for debugging and performance analysis.",
      "description_length": 337,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Trace",
      "description": "Provides functions to create resource spans from a list of spans and attributes, and to emit spans with optional service names and attributes. Works with span, scope, trace_id, and key-value pairs representing attributes. Used to instrument code for distributed tracing, capturing spans and their context within a trace.",
      "description_length": 320,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Metrics",
      "description": "Provides functions to create and aggregate numeric metrics, histograms, and resource-level metric collections. Operates on types like timestamped data points, histograms, and resource metrics. Used to track system performance, log event counts, and send structured metric data to monitoring backends.",
      "description_length": 300,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Metrics_callbacks",
      "description": "Registers a function that generates a list of metrics upon invocation, triggered by the backend at intervals. Works with metric data structures defined in the Metrics module. Used to collect performance data from different parts of an application without manual timing logic.",
      "description_length": 275,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.Logs",
      "description": "Formats severity levels and log flags for human-readable output. Constructs log entries with various data types, including strings and formatted messages, and supports timestamp, trace, and span metadata. Emits structured log records to a backend for centralized logging and analysis.",
      "description_length": 284,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry.Trace_context",
      "description": "Encodes and decodes W3C traceparent headers using trace ID and span ID types, enabling distributed tracing context propagation. Supports version handling, flag manipulation, and string serialization. Allows creation of trace context values from raw data and extraction of identifiers from headers. Enables consistent tracing across microservices by standardizing context representation.",
      "description_length": 386,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry.GC_metrics",
      "description": "Tracks and retrieves garbage collection statistics after each collection. Operates on OCaml's internal GC state and emits structured metrics. Provides runtime metadata and current GC performance data for monitoring and analysis.",
      "description_length": 228,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Common",
      "description": "This module provides functions for constructing and serializing structured data types such as `any_value`, `array_value`, `key_value`, and `instrumentation_scope`, along with utilities for pretty-printing and Protocol Buffers encoding/decoding. It includes specific decoding routines that extract nested data from binary streams, handling lists, optional values, and string-based fields, which are useful for parsing protocol buffer messages in data interchange scenarios.",
      "description_length": 472,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Logs",
      "description": "This module handles structured logging by offering creation, serialization, and encoding/decoding operations for log data, including records, scope logs, and resource logs, using Protocol Buffers for efficient binary representation. It works with types like `log_record`, `resource_logs`, and `severity_number`, providing builders for constructing log entries and ensuring consistency in distributed systems. Use cases include real-time log aggregation, persistent storage, and cross-service log synchronization where standardized data formats are critical.",
      "description_length": 557,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Logs_service",
      "description": "Provides functions to construct, format, and serialize/deserialize protocol buffer messages for log submission and response handling. Works with structured data types representing log requests, partial success responses, and service responses. Used to generate default values, build log payloads, and encode/decode binary representations for network transmission.",
      "description_length": 363,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Metrics",
      "description": "This module offers functions for constructing, encoding, decoding, and formatting metric data structures such as gauges, histograms, summaries, and number data points, along with support for nested types like exemplars and resource-level metric collections. It works with structured data including key-value lists, timestamps, numerical values, and Protocol Buffers-encoded types, enabling tasks like telemetry aggregation and log serialization. Specific use cases include initializing metrics for monitoring systems, serializing performance data for storage, and decoding binary metrics for analysis.",
      "description_length": 601,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Metrics_service",
      "description": "Provides functions to construct, format, and serialize/deserialize protocol buffer messages for metric data exchange. Works with structured data types representing metric requests, partial success responses, and service responses. Used to generate default values, build messages with specific parameters, and handle binary encoding/decoding for network transmission.",
      "description_length": 366,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Resource",
      "description": "Provides functions to construct and format resource objects, encode and decode them using Protocol Buffers, and generate default instances. Works with a `resource` type containing attributes and a count of dropped attributes. Used to serialize and deserialize resource data in binary format and to create standardized resource representations.",
      "description_length": 343,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Status",
      "description": "Provides functions to construct, format, and serialize/deserialize status objects using Protocol Buffers. Works with a `status` type containing code, message, and details fields. Used to generate default status values, build structured status messages, and handle binary encoding and decoding for network transmission.",
      "description_length": 318,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry_proto.Trace",
      "description": "The module provides functions for constructing default trace elements, pretty-printing, and encoding/decoding trace data structures such as spans, events, links, and resource spans using Protocol Buffers. It includes specialized decoding routines for extracting nested trace data from binary streams, enabling efficient processing of serialized trace information. These operations support use cases like debugging distributed systems, serializing trace data for storage, and parsing binary traces during analysis.",
      "description_length": 513,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto.Trace_service",
      "description": "Provides functions to construct, format, and serialize/deserialize protocol buffer messages for trace data, including request payloads, partial success responses, and full service responses. Works with structured data like resource spans, rejected span counts, and error messages. Used to prepare trace data for transmission and to parse incoming trace service messages.",
      "description_length": 370,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "opentelemetry",
      "description": "Provides functions for creating and managing traces, spans, and metrics, with support for exporting data to OpenTelemetry-compatible backends. Works with types such as trace IDs, span contexts, and metric values to track application performance and behavior. Used to integrate distributed tracing into server applications, enabling visibility into request flows and system interactions.",
      "description_length": 386,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_atomic",
      "description": "Manages shared state in multithreaded environments through atomic operations like read, write, compare-and-set, and fetch-and-add, supporting arbitrary types and specialized integer increments. Key data types include atomic references and integer counters, with operations for safe concurrent updates. Users can implement thread-safe counters, resource locks, or shared state tracking. Examples include incrementing a shared counter or updating a value only if it matches an expected state.",
      "description_length": 490,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry_ambient_context",
      "description": "Provides functions to manage a heterogeneous map storing contextual data, allowing keys to be created and bound within scoped operations. Supports thread-local and asynchronous context propagation, enabling values to be accessed and modified within specific execution contexts. Used to track and isolate state in concurrent or nested operations, such as logging identifiers or request-specific data.",
      "description_length": 399,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_ambient_context_lwt",
      "description": "Provides functions to manage and access distributed tracing context using Lwt-based storage. Operates on opaque context objects and thread-local state for asynchronous execution. Enables propagation of trace identifiers across asynchronous operations in a concurrent environment.",
      "description_length": 279,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry",
      "description": "Manages concurrent execution, distributed tracing, and telemetry collection through atomic operations, random generation, and time tracking. Provides trace and span identifiers, context propagation, event logging, and metric aggregation with support for custom attributes and sampling. Enables precise control over distributed systems by capturing span relationships, status, and timing data, while offering tools to format and emit structured logs and metrics. Examples include generating unique trace IDs, annotating spans with events, and tracking GC performance for system analysis.",
      "description_length": 586,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry_ambient_context_types",
      "description": "Provides functions to manage a contextual storage system using a hash map, allowing temporary modification of the ambient context. Works with hash maps and unique keys to store and retrieve values within scoped operations. Enables scoped value binding and unbinding, useful for propagating context in distributed tracing implementations.",
      "description_length": 337,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_proto",
      "description": "Provides functions for constructing, serializing, and decoding structured data types across telemetry domains, including logs, metrics, traces, and status. It handles protocol buffer encoding/decoding for types like `log_record`, `metric_data_point`, `span`, `resource`, and `status`, enabling efficient data interchange and processing. Operations include building payloads, extracting nested fields from binary streams, and generating default values for consistent data representation. Use cases span real-time log aggregation, metric monitoring, trace analysis, and distributed system debugging.",
      "description_length": 597,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 58,
    "meaningful_modules": 57,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9827586206896551
  },
  "statistics": {
    "max_description_length": 715,
    "min_description_length": 228,
    "avg_description_length": 372.0175438596491,
    "embedding_file_size_mb": 0.2075023651123047
  }
}