{
  "package": "httpaf-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:52.179216",
  "modules": [
    {
      "module_path": "Httpaf_lwt_unix.Server",
      "description": "Handles incoming network connections by associating request and error handlers with specific socket addresses, using Lwt for asynchronous processing. Operates on Unix socket addresses, file descriptors, and HTTP request/response structures from Httpaf. Used to manage real-time web server interactions, such as processing HTTP requests from clients and handling connection errors gracefully.",
      "description_length": 391,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpaf_lwt_unix.Client",
      "description": "Handles HTTP requests by establishing a connection, sending a request message, and processing the response through dedicated handlers. Operates with socket file descriptors, HTTP requests, and response bodies using the Httpaf library. Used to send authenticated API calls and stream server responses in real-time.",
      "description_length": 313,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "httpaf-lwt-unix",
      "description": "Provides HTTP request parsing, response serialization, and connection management using a state machine. Operates on byte streams, HTTP headers, and request/response objects defined by the HTTP 1.1 specification. Enables building high-performance web endpoints that handle pipelined requests and integrate with asynchronous runtimes like Async and Lwt.",
      "description_length": 351,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpaf_lwt_unix",
      "description": "Establishes and manages network communication through Unix sockets, handling both incoming requests and outgoing HTTP interactions using Lwt for asynchronous execution. Processes HTTP messages, including request routing, error handling, and response streaming, with support for authenticated API calls and real-time data transfer. Key data types include socket addresses, file descriptors, and HTTP request/response structures. Examples include serving web requests, handling connection errors, and streaming server responses to clients.",
      "description_length": 537,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 313,
    "avg_description_length": 398.0,
    "embedding_file_size_mb": 0.014943122863769531
  }
}