{
  "package": "sexp_select",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:00:06.946957",
  "modules": [
    {
      "module_path": "Sexp_select.For_testing.Program.Action",
      "library": "sexp_select",
      "description": "This module defines operations for matching and selecting identifiers in S-expressions, specifically supporting `descendants` and `children` actions based on string patterns. It works with types like `ident` (including wildcards, literal strings, and sets of strings) and `t`, providing functions to convert these to and from S-expressions. Concrete use cases include testing selection and deselection logic in S-expression traversal, ensuring correct pattern matching against node identifiers.",
      "description_length": 494,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_select.For_testing.Parse",
      "library": "sexp_select",
      "description": "Parses a string representation of a sexp-select program into a structured list of selection operations. Each operation specifies either direct children or descendant matching, with support for exact keys, wildcards, and sets of alternatives. Used to validate the inversion relationship between select and deselect operations by parsing test inputs into executable selection logic.",
      "description_length": 380,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_select.For_testing.Program",
      "library": "sexp_select",
      "description": "This module represents a list of actions for manipulating S-expressions, primarily used to test selection and deselection behaviors. It includes functions to convert between S-expression representations and action lists, enabling validation of pattern matching and traversal logic. Concrete use cases involve verifying that selection and deselection operations correctly invert each other during S-expression processing.",
      "description_length": 420,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_select.For_testing",
      "library": "sexp_select",
      "description": "This module provides reference implementations of `select` and `deselect` operations for S-expressions, specifically designed to test that these operations are exact inverses of each other. It works with S-expressions (`Base.Sexp.t`) and string-based selection patterns that specify child or descendant matches, including wildcards and alternative sets. These functions are used in test cases to validate the correctness of selection and deselection logic without relying on optimized but less precise implementations.",
      "description_length": 518,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_select",
      "library": "sexp_select",
      "description": "This module implements selection and deselection operations on S-expressions using string-based path patterns. It supports querying for specific nodes, extracting single elements with strict cardinality checks, and formatting outputs for testing or documentation. The functions are used in scenarios like filtering configuration data, validating test expectations, or scripting transformations on structured text.",
      "description_length": 413,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 518,
    "min_description_length": 380,
    "avg_description_length": 445.0,
    "embedding_file_size_mb": 0.07287025451660156
  }
}