{
  "package": "conan",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 20,
  "creation_timestamp": "2025-08-15T12:11:42.223231",
  "modules": [
    {
      "module_path": "Conan_string",
      "library": "conan.string",
      "description": "This module parses strings into decision trees and uses them to recognize content types from raw strings. It works with strings and decision trees, where trees are built from strings using `tree_of_string` and used to recognize metadata from input strings via `run`. A typical use case involves converting a `libmagic`-formatted string into a decision tree and then using that tree to identify file types from their raw contents.",
      "description_length": 429,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Fmt.Hmap.Map",
      "library": "conan",
      "description": "This implementation supports polymorphic maps with key-based operations including insertion, deletion, and merging, alongside list-valued entry handling via functions like `add_to_list`. It facilitates transformations through iteration, filtering, and ordering controls, working with sequences for ordered key-value processing and conversion. Designed for scenarios requiring precise key management, value aggregation, or ordered traversal, it enables efficient merging, partitioning, and sequence-to-map interoperability with customizable ordering.",
      "description_length": 549,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Fmt.Hmap.Key",
      "library": "conan",
      "description": "This module manages typed keys for heterogeneous maps, providing operations to create unique keys, hide their types, and compare or check equality of keys. It works with abstract key types that associate values of arbitrary types within a map structure. Concrete use cases include building and manipulating type-safe heterogeneous maps where keys uniquely identify values of varying types.",
      "description_length": 389,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Tree.Unsafe",
      "library": "conan",
      "description": "This module constructs and manipulates abstract syntax trees for parsing rules, handling operations like defining tests, names, MIME types, and file extensions. It works directly with `operation`, `elt`, and `t` types to build hierarchical tree structures representing parsing logic. Concrete use cases include creating custom parsing rules with specific offsets, attaching metadata like filenames and line numbers to tree nodes, and composing complex parsing logic from simpler components.",
      "description_length": 490,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan.Fmt.Hmap",
      "library": "conan",
      "description": "This module implements a type-safe heterogeneous map structure where each key is associated with a specific value type, enabling precise formatting operations for values of different types. It provides key creation, insertion, lookup, and formatting functions that ensure type consistency, supporting operations like `add` and `find` for managing bindings with format specifiers. Concrete use cases include building structured formatters that handle heterogeneous data with type-preserving mappings, such as formatting tables or typed configuration outputs.",
      "description_length": 557,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Serialize",
      "library": "conan",
      "description": "This module defines serializers for basic types like integers, floats, strings, and structured values such as pairs, lists, and options. It supports formatting and parsing operations through combinators like `pair`, `list`, and `option`, enabling precise serialization of complex data. Concrete use cases include converting values to and from string representations for storage, communication, or debugging, such as serializing timestamps, regular expressions, or nested data structures.",
      "description_length": 487,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Fmt",
      "library": "conan",
      "description": "This module enables type-preserving formatting through combinators like `concat` and `^^`, handling padding, precision, and format specifiers across heterogeneous data collections using `Hmap.t`. It operates on formatters, format strings, and typed values (integers, floats, strings) to support structured output generation for use cases like log serialization, table formatting, and mixed-type data parsing. Key features include coercion between types, customizable alignment, and layout-sensitive transformations for precise textual representation.",
      "description_length": 550,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Arithmetic",
      "library": "conan",
      "description": "This module implements arithmetic operations and string parsing for wrapped numeric types, supporting addition, subtraction, multiplication, division, modulus, and bitwise operations. It works with generic numeric types `'a` wrapped in `Conan.Arithmetic.t`, including specialized handling for integers, floats, and time spans via `process`, `process_float`, and `process_ptime`. Concrete use cases include safely evaluating arithmetic expressions from strings, transforming numeric values with inversion and bitwise logic, and formatting or serializing arithmetic structures for logging or output.",
      "description_length": 597,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Process",
      "library": "conan",
      "description": "This module processes file metadata by walking directory trees and building databases of file information. It provides functions to traverse directories either in ascending or descending order, collect metadata, and filter or transform entries based on MIME types and extensions. Use cases include analyzing file distributions, generating file inventories, and processing batches of files according to their types or paths.",
      "description_length": 423,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan.Integer",
      "library": "conan",
      "description": "This module offers serialization, formatting, and arithmetic operations for integer types (including `int64`, `int32`, `int`, and `char`), supporting both signed and unsigned variants with a customizable formatter for structured output. It includes utilities to parse integers from substrings (`Conan__.Sub.t`) and extract zero values from wrapped integer types, enabling precise manipulation of binary data or text-encoded numbers. These capabilities are particularly useful for low-level data parsing, protocol implementation, or generating human-readable representations of numeric values.",
      "description_length": 592,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Sigs",
      "library": "conan",
      "description": "This module defines a positional type `where` with three variants: `SET`, `CUR`, and `END`, representing absolute, current, and end-of-sequence positions. It is used to specify reference points for operations that manipulate or navigate structured data. Concrete use cases include indicating insertion or query positions in sequences, cursors, or file-like structures.",
      "description_length": 368,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan.Comparison",
      "library": "conan",
      "description": "This module implements comparison operations for values of arbitrary type, supporting checks like equality, inequality, and numeric comparisons. It works with custom comparison types that encapsulate both a value and a comparison operation, enabling precise control over how values are evaluated. Concrete use cases include validating integer thresholds, comparing time spans, and evaluating string or numeric conditions in configuration or decision-making logic.",
      "description_length": 463,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan.Tree",
      "library": "conan",
      "description": "This module constructs and manipulates abstract syntax trees for parsing rules, handling operations like defining tests, names, MIME types, and file extensions. It works directly with `operation`, `elt`, and `t` types to build hierarchical tree structures representing parsing logic. Concrete use cases include creating custom parsing rules with specific offsets, attaching metadata like filenames and line numbers to tree nodes, and composing complex parsing logic from simpler components.",
      "description_length": 490,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan.Parse",
      "library": "conan",
      "description": "This module parses lines of text into structured data types representing configuration or rule definitions, handling numeric types, comments, and various tagged values. It processes strings into result types like `line` or `error`, supporting specific formats for dates, integers, and arithmetic expressions. Concrete use cases include reading and validating rule-based configuration files with typed fields and error reporting.",
      "description_length": 428,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Metadata",
      "library": "conan",
      "description": "This module manages metadata for content types, including MIME types, file extensions, and output paths. It provides operations to construct, modify, and query metadata values, such as setting or clearing MIME types, extensions, and output paths, and combining metadata values. Use this module when handling file type information in content processing pipelines or configuration systems.",
      "description_length": 387,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Number",
      "library": "conan",
      "description": "This module defines a numeric type `t` that supports conversion to and from various integer and floating-point representations, including `int64`, `float`, and `char`. It provides functions for parsing numeric values from substrings, formatting for display, and precise conversions to time spans and smaller integer types. Use cases include handling binary data, parsing configuration values, and converting numeric types for system interfaces.",
      "description_length": 444,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Offset",
      "library": "conan",
      "description": "This module represents and manipulates file offsets in a structured way, supporting operations like relative and absolute positioning, value extraction, and arithmetic calculations. It works with `int64` values and integrates with scheduler and syscall interfaces to handle I/O operations based on file descriptors. Concrete use cases include managing read positions in binary file parsing and calculating data segment locations during structured I/O processing.",
      "description_length": 462,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Size",
      "library": "conan",
      "description": "This module provides operations for handling size and endianness specifications in binary data serialization, including type `t` variants like byte, short, long, quad, and ID3 formats with both little and big endian representations. It supports serialization, string conversion, character validation, and syscall behavior inversion for size-based I/O, alongside a `read` function that performs sized reads from file descriptors with error handling. These features are used in low-level binary processing, system call interfacing, and protocols requiring precise size interpretation.",
      "description_length": 582,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conan.Test",
      "library": "conan",
      "description": "This module defines functions to create and manipulate test predicates for various data types, including numbers, strings, dates, and regular expressions. It supports operations like serialization, pretty-printing, and applying tests to values through combinators and comparison operators. Concrete use cases include validating input data, filtering values based on dynamic conditions, and constructing reusable test logic for configuration or rule-based systems.",
      "description_length": 463,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conan",
      "library": "conan",
      "description": "This module provides core utilities for numeric processing, data serialization, metadata management, and file traversal. It supports operations on integers, floating-point numbers, strings, and structured data through arithmetic, comparison, and formatting functions. Concrete use cases include parsing and serializing binary data, processing file metadata trees, evaluating arithmetic expressions, and handling size and offset calculations for I/O operations.",
      "description_length": 460,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 20,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9523809523809523
  },
  "statistics": {
    "max_description_length": 597,
    "min_description_length": 368,
    "avg_description_length": 480.5,
    "embedding_file_size_mb": 0.2902536392211914
  }
}