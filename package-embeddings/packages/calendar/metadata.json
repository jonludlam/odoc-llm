{
  "package": "calendar",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 54,
  "creation_timestamp": "2025-06-18T16:43:50.809369",
  "modules": [
    {
      "module_path": "CalendarLib.Calendar.Precise.Period",
      "description": "The module provides operations for creating, converting, and manipulating time durations, including arithmetic calculations and decompositions into date components like year, month, day, hour, minute, and second. It works with period values representing intervals, enabling safe conversions between calendar-based and time-based representations. Use cases include financial calculations, scheduling systems, and data analysis requiring precise date-time interval handling.",
      "description_length": 472,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make.Period",
      "description": "Provides operations to create, combine, and compare periods based on years, months, and days. Works with custom period types that can represent durations in various granularities. Used to calculate total days in a period, handle date differences, and perform arithmetic on time intervals.",
      "description_length": 288,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise.Period",
      "description": "Provides operations to create, combine, and compare periods based on years, months, and days. Works with custom period types that can represent durations in various units, including labeled constructors for flexible initialization. Supports calculating day counts with safe handling of non-constant periods like years.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make.Second",
      "description": "Converts integers and floats to and from a specialized second type. Works with integer and floating-point representations of time durations. Used to ensure type-safe handling of time values in applications requiring precise second-based calculations.",
      "description_length": 250,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise.Second",
      "description": "Converts integers and floats to and from a specialized second type. Works with integer and floating-point values representing time durations. Used to ensure type-safe handling of time intervals in applications requiring precise second-based calculations.",
      "description_length": 254,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar.Precise.Period",
      "description": "The module provides operations for creating, manipulating, and converting time durations, including arithmetic, calendar-to-time conversions, and constructors for defining periods via years, months, days, and smaller units. It decomposes period values into date-time components and enforces type constraints, enabling precise handling of time intervals in applications like scheduling or financial calculations.",
      "description_length": 411,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Time.Second",
      "description": "Converts integers and floats to and from second-based time values. Operates on a custom type representing seconds. Useful for precise time calculations in applications requiring nanosecond-level accuracy.",
      "description_length": 204,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Time.Period",
      "description": "Provides operations for adding, subtracting, multiplying, and dividing periods, as well as calculating their length in seconds, minutes, or hours. Works with a period type parameterized by date fields, supporting conversions from hours, minutes, and seconds. Used to represent and manipulate time intervals in applications requiring precise duration calculations.",
      "description_length": 363,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Date.Period",
      "description": "Provides operations to create, combine, and compare periods based on years, months, and days. Works with custom period types that can represent durations in different units, such as weeks, days, or mixed components. Used to calculate total days in a period safely or convert between duration components and raw day counts.",
      "description_length": 322,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Period",
      "description": "This module offers operations for creating, manipulating, and converting time durations, focusing on calendar-based periods and arithmetic with components like days, weeks, and seconds. It works with period values that can be decomposed into date fields (year, month, day, hour, minute, second) and supports conversions between calendar and time-based representations. Applications include financial calculations, scheduling, and time tracking, where precise interval handling is critical.",
      "description_length": 489,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Precise",
      "description": "manages precise time durations and conversions between calendar and time-based representations, supporting arithmetic operations and component decomposition. It handles period values for interval calculations, enabling manipulation of years, months, days, hours, minutes, and seconds. Users can perform financial computations, schedule events, or analyze time-based data with exactness. Examples include calculating interest over specific periods or determining elapsed time between dates.",
      "description_length": 489,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Date",
      "description": "Provides functions to format and parse dates using custom specifiers, supporting operations like printing to a formatter, converting to strings, and parsing from strings with a specified format. Works with the `t` type representing dates, allowing conversion between string representations and date values. Used to generate human-readable date outputs, validate date strings, and construct date values from formatted input.",
      "description_length": 423,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.DatePrinter",
      "description": "Provides functions to format and parse dates using custom formats, including outputting to a formatter, converting to strings, and parsing strings into date values. Works with the `Date.t` type, supporting locale-aware parsing and formatting with specific directives. Used to generate human-readable date representations and to convert user input strings into structured date objects.",
      "description_length": 384,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Time",
      "description": "Provides functions to format and parse time values using custom specifiers, supporting operations like printing to a formatter, converting to strings, and parsing from strings with a specified format. Works with the `t` type representing time values, enabling precise control over output and input formatting. Used to generate human-readable time strings, validate time inputs, and convert between string representations and internal time structures.",
      "description_length": 450,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.TimePrinter",
      "description": "Provides functions to format and parse date values using custom formats, including converting dates to strings, printing to output, and parsing strings into dates. Operates on the `t` type, which represents date values. Used to generate human-readable date strings, log dates with specific formatting, and parse date information from text inputs.",
      "description_length": 346,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Ftime",
      "description": "Provides functions to format and parse date values using custom format strings, supporting operations like printing to a formatter, converting to a string, and parsing strings into date objects. Works with the `t` type, representing date values, and supports format specifiers for time components. Used to generate human-readable date strings from structured date data and to convert string representations into date objects for further processing.",
      "description_length": 448,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Calendar",
      "description": "Provides functions to format and parse precise calendar dates using custom format strings. Operates on the `t` type, representing calendar dates with high precision. Converts dates to strings with specified formats, parses strings into dates according to defined patterns, and supports default formatting conventions.",
      "description_length": 317,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Calendar",
      "description": "Provides functions to format and parse dates using custom specifications, including converting dates to strings, printing to output channels, and parsing strings into date values. Operates on the `t` type, representing calendar dates. Used to generate human-readable date outputs, validate date strings, and convert between string representations and internal date structures.",
      "description_length": 376,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.CalendarPrinter",
      "description": "Provides functions to format and parse dates using custom format strings, including converting dates to strings, printing to output, and parsing strings into date values. Works with the `Calendar.t` type, supporting date manipulation and localization. Used to generate human-readable date representations and to parse date information from structured text inputs.",
      "description_length": 363,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Fcalendar",
      "description": "Provides functions to format, parse, and convert precise date values. Operates on the `t` type, representing dates with second-level precision. Supports parsing from strings using custom formats, printing to standard output or strings, and converting between formatted representations and internal date structures.",
      "description_length": 314,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Fcalendar",
      "description": "Provides functions to format and parse dates using custom format strings, supporting operations like converting dates to strings, printing to output, and parsing strings into date values. Works with the `t` type, representing dates, and handles format specifiers for day, month, year, and time components. Used to generate human-readable date strings from structured date data and to extract date information from formatted input strings.",
      "description_length": 438,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make",
      "description": "Calculates and manipulates time intervals using custom period types that encode durations in years, months, and days. Supports operations like adding periods, computing total days, and comparing intervals for equality or ordering. Enables precise date difference calculations and interval composition. For example, it can determine the total days between two dates or combine multiple periods into a single duration.",
      "description_length": 416,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise",
      "description": "Encapsulates period manipulation with custom types for years, months, and days, enabling precise duration calculations and comparisons. Supports creating labeled periods, combining them through arithmetic operations, and computing day counts while handling variable-length units. Examples include adding a period to a date, comparing two durations for equality, and converting a mixed-period structure to total days. Operations are designed for accuracy in financial or scheduling contexts where exact time spans matter.",
      "description_length": 520,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar.Period",
      "description": "The module provides operations for creating, manipulating, and converting time intervals, including arithmetic calculations and conversions between calendar-based and time-based periods. It works with duration values that can be decomposed into year, month, day, hour, minute, and second components, enabling precise date field manipulation. Use cases include financial calculations, scheduling, and applications requiring accurate time interval management.",
      "description_length": 457,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Fcalendar.Precise",
      "description": "Provides precise time duration management with operations for creation, manipulation, and conversion of intervals defined by years, months, days, and smaller units. It supports arithmetic, calendar-to-time conversions, and decomposition of periods into date-time components. Users can construct and validate time intervals with strict type enforcement, suitable for applications requiring exact time calculations. Examples include computing interest over specific periods or scheduling events with fractional seconds.",
      "description_length": 517,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Int",
      "description": "Provides equality, comparison, and hashing operations for integer values. Works with the built-in integer type to support precise numerical checks and ordering. Used in scenarios requiring exact numeric identity verification, sorted data structures, and hash-based lookups.",
      "description_length": 273,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Float",
      "description": "Provides equality, comparison, and hashing for floating-point numbers, with customizable precision for comparisons. Includes a rounding function that converts floats to integers. Operates on the `float` type, with `set_precision` adjusting how equality and ordering are determined.",
      "description_length": 281,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time.Second",
      "description": "Converts integers and floats to and from second-based time values. Operates on a custom type representing seconds. Useful for precise time calculations in applications requiring discrete second-level granularity.",
      "description_length": 212,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time.Period",
      "description": "Provides operations for adding, subtracting, multiplying, and dividing periods, along with functions to create periods from hours, minutes, and seconds. Works with a type representing time intervals constrained to date fields, and includes conversions to seconds, minutes, and hours. Used to calculate and manipulate time spans in applications like scheduling or time tracking.",
      "description_length": 377,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date.Period",
      "description": "Provides operations to create and manipulate time intervals, including addition, subtraction, and negation of periods. Works with period types representing durations in years, months, weeks, and days, and supports conversions to and from day counts. Used to calculate date differences, adjust dates by duration, and handle time-based computations with precise control over field components.",
      "description_length": 390,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime.Second",
      "description": "Converts integers and floats to and from a specialized second type. Works with integer and floating-point values representing time durations. Used to ensure type-safe handling of time intervals in applications requiring precise second-based calculations.",
      "description_length": 254,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime.Period",
      "description": "Provides operations for adding, subtracting, multiplying, and dividing periods, as well as calculating their length in seconds, minutes, or hours. Works with a period type parameterized by date fields, supporting conversions between time units. Constructs periods from hours, minutes, and seconds, and extracts their total duration in various formats.",
      "description_length": 351,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Date",
      "description": "Handles period calculations using custom types for years, months, and days, enabling safe conversions between duration components and total days. Supports creating, combining, and comparing periods with operations that account for varying units and mixed components. Examples include calculating the total days in a three-month period or converting a duration of 2 weeks and 3 days into a raw day count. Provides precise control over date arithmetic through structured period representations.",
      "description_length": 492,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Time",
      "description": "Converts numeric values to and from second-based time representations and handles period arithmetic with date-field parameters. Supports precise nanosecond-level calculations and duration manipulations in seconds, minutes, and hours. Enables operations like adding two periods, converting a float to a time value, or calculating the total seconds in a complex interval. Used for accurate time tracking and scheduling in applications requiring fine-grained temporal control.",
      "description_length": 473,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig.Period",
      "description": "The module provides arithmetic and conversion operations for duration-based calculations, handling days, hours, and seconds, along with decomposition of date components like year-month-day-second. It works with period values to translate between calendar-based and time-based representations, enabling precise interval manipulations. Use cases include financial calculations, scheduling systems, and date arithmetic where converting between granular time units and calendar components is essential.",
      "description_length": 498,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_sig.Second",
      "description": "Converts integers and floats to and from second-based time values. Operates on the `t` type, representing durations in seconds. Used to standardize time measurements in applications requiring precise second-level calculations.",
      "description_length": 226,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time_sig.Period",
      "description": "Provides operations for adding, subtracting, multiplying, and dividing periods, as well as calculating their length in seconds, minutes, or hours. Works with a period type parameterized by date fields, supporting conversions between time units. Constructs periods from hours, minutes, and seconds, and extracts their total duration in various formats.",
      "description_length": 351,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date_sig.Period",
      "description": "Provides operations to create, combine, and compare periods based on years, months, and days. Works with custom period types that can represent durations in various granularities. Used to calculate total days in a period safely, or extract year-month-day components for date arithmetic.",
      "description_length": 286,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar",
      "description": "Provides calendar-based time manipulation with support for period arithmetic, decomposition into date components, and conversions between calendar and time representations. It handles operations on durations involving days, weeks, seconds, and other time units, enabling precise interval calculations. Users can perform financial computations, schedule events, or track time with exactness. Examples include calculating interest over specific periods or determining elapsed time between dates.",
      "description_length": 493,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder",
      "description": "Encapsulates period-based date calculations using custom types for years, months, and days, enabling precise duration manipulation and comparison. Supports arithmetic operations like adding periods to dates, combining multiple intervals, and converting mixed periods to total days. Operations handle variable-length units and ensure accuracy in scenarios requiring exact time spans. Examples include determining date differences, composing periods, and comparing durations for equality.",
      "description_length": 486,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig",
      "description": "Provides structured operations for date and time arithmetic, including period calculations, second-based conversions, and duration manipulations. Key data types include custom period representations, time values, and decomposed date components, with operations for conversion, combination, and comparison. Examples include calculating total days in a period, converting nanoseconds to hours, and decomposing a duration into years, months, and days. Supports precise temporal computations across calendar and time-based systems.",
      "description_length": 527,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date",
      "description": "Calculates and manipulates time intervals using period types for years, months, weeks, and days, supporting arithmetic operations and conversions to day counts. Enables precise date adjustments, difference calculations, and time-based computations by modifying field components. Operations include adding or subtracting periods, negating durations, and converting between period and day representations. Examples include extending a date by a specific month count or determining the day difference between two dates.",
      "description_length": 516,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date_sig",
      "description": "Encapsulates date-related operations with support for period calculations and conversions. Offers types for representing durations and dates, along with functions to add periods to dates, compute differences, and extract components. Enables precise date arithmetic by handling leap years and varying month lengths. Examples include calculating a date six months into the future or determining the number of days between two dates.",
      "description_length": 430,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar",
      "description": "Manages time intervals with support for arithmetic, conversion, and decomposition into date components. It handles durations with float-based seconds and provides precise manipulation of years, months, days, hours, minutes, and seconds. Users can calculate financial periods, schedule events, or validate time spans with strict type control. Operations include interval creation, calendar-to-time conversions, and handling fractional seconds for accuracy.",
      "description_length": 455,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime",
      "description": "Converts between integer and float values and a specialized second type, enabling precise time interval handling. Supports arithmetic operations on periods, including addition, subtraction, multiplication, and division, with conversions between hours, minutes, and seconds. Allows construction of periods from component units and extraction of total durations in different formats. Examples include calculating the total seconds in a 2-hour period or adding 30 minutes to a given time interval.",
      "description_length": 494,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Period",
      "description": "Provides operations to combine, subtract, and invert periods, along with equality, comparison, and hashing. Works with date-based period structures constrained to specific date fields. Used to manage time intervals in scheduling and temporal data processing.",
      "description_length": 258,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer",
      "description": "Provides functions to format and parse values of type t using specific format strings. Supports operations like printing to a formatter, converting to a string, and parsing strings into t based on defined formats. Handles date-like structures by interpreting format specifiers and converting between string representations and internal t values.",
      "description_length": 345,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time",
      "description": "Converts between integer and float representations of time in seconds and handles time intervals expressed in hours, minutes, and seconds. Supports arithmetic operations on time spans and provides conversions between different time units. Enables precise manipulation of time values for applications such as scheduling and duration calculations. Examples include adding two time intervals or converting a duration into total seconds.",
      "description_length": 433,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_Zone",
      "description": "Provides functions to manage and query time zones, including calculating the difference between zones, adjusting the current time zone, and checking daylight saving status. Operates on a custom time zone type that represents UTC offsets and local time settings. Used to convert local time to UTC, determine daylight saving adjustments, and temporarily switch time zones during computations.",
      "description_length": 390,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_sig",
      "description": "Converts between integer and float values and second-based time representations, handling durations through the `t` type. Supports arithmetic operations on period types, enabling calculations in hours, minutes, or seconds, and allows construction of periods from component units. Extracts total duration in different formats and performs unit conversions. Examples include converting 3600 seconds to an hour or calculating the total seconds in a 2-hour period.",
      "description_length": 460,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils",
      "description": "Provides equality, comparison, and hashing operations for custom types. Works with any data type that defines these functions, enabling use in associative containers. Enables precise control over how values are compared and stored in maps, sets, and hash tables.",
      "description_length": 262,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Version",
      "description": "Returns the version string for the calendar module. Works with a static string representing the release version. Used to display or check the current calendar version in application logs or configuration checks.",
      "description_length": 211,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "calendar",
      "description": "Provides functions to manipulate dates, calculate durations, and compare calendar intervals. Works with custom date and time structures, including day, month, and year components. Enables scheduling tasks and generating event timelines based on specific date ranges.",
      "description_length": 266,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib",
      "description": "Combines calendar and time-based operations with custom period types, enabling precise date and duration manipulations. Key data types include periods, time values, and date components, supporting arithmetic, conversions, and comparisons across days, seconds, and mixed units. Users can calculate financial interest, adjust dates by months, convert nanoseconds to hours, or determine time zone differences. Examples include extending a date by a period, parsing date strings, or computing total days in a mixed-duration interval.",
      "description_length": 529,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 66,
    "meaningful_modules": 54,
    "filtered_empty_modules": 12,
    "retention_rate": 0.8181818181818182
  },
  "statistics": {
    "max_description_length": 529,
    "min_description_length": 204,
    "avg_description_length": 382.3703703703704,
    "embedding_file_size_mb": 0.19302082061767578
  }
}