{
  "package": "calendar",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 57,
  "creation_timestamp": "2025-07-15T23:17:15.990231",
  "modules": [
    {
      "module_path": "CalendarLib.Fcalendar.Precise.Period",
      "library": "calendar",
      "description": "This module supports precise date arithmetic with time intervals measured in seconds, enabling operations like addition, subtraction, and exact comparisons between calendars. It handles conversions between date/time representations and periods, decomposing durations into integer-based components such as years, months, days, and seconds for accurate calculations. This is particularly useful in scenarios requiring high precision, such as financial systems or scientific applications where minor time discrepancies must be reliably detected and managed.",
      "description_length": 554,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise.Period",
      "library": "calendar",
      "description": "This module handles precise duration calculations by creating and manipulating periods composed of years, months, weeks, days, hours, minutes, and seconds. It supports arithmetic operations and conversions to/from low-level time representations like seconds, enabling exact calendar-based duration modeling for scenarios like scheduling or timestamp arithmetic. Key use cases include decomposing durations into human-readable units and converting between calendar-aware periods and system time values.",
      "description_length": 501,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make.Period",
      "library": "calendar",
      "description": "This module provides operations to construct, manipulate, and decompose time intervals represented as `Period.t`, which measures durations in years, months, weeks, days, hours, minutes, and seconds between calendar points. It supports arithmetic operations, unit conversions, and decomposition into granular components, while handling both precise and lossy transformations between calendar and time-based representations. Typical use cases include scheduling systems, temporal analytics, or applications requiring high-level duration calculations with variable precision.",
      "description_length": 572,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.CalendarPrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse calendar events using customizable date-time strings. It supports operations like `fprint` for formatted output to a formatter, `sprint` to generate strings, and `from_fstring` to parse strings into calendar values. The module works with calendar event types, handling conversions based on format specifiers such as `%Y` for year or `%H` for hour, and supports padding and case modifiers for output customization.",
      "description_length": 464,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Time-Second",
      "library": "calendar",
      "description": "This module defines operations to convert between integer and floating-point values and a time duration in seconds. It provides functions to construct a time value from an integer or float and to extract the integer or float representation of a time value. These conversions are useful when handling precise time intervals, such as measuring execution durations or scheduling events with sub-second precision.",
      "description_length": 409,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S",
      "library": "calendar",
      "description": "This module provides operations for constructing and manipulating calendar timestamps with precise date and time components, supporting conversions between time zones, arithmetic with periods (e.g., adding days or hours), and extraction of temporal properties (e.g., day of week, leap year checks). It operates on a combined timestamp type (`t`) that integrates date and time, leveraging `Date` and `Time` submodules for granular field access, and supports conversions to Unix time representations for interoperability. Typical use cases include scheduling systems requiring high-precision temporal calculations, historical date analysis accounting for calendar reforms, and applications needing timezone-aware timestamp normalization.",
      "description_length": 735,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Fcalendar",
      "library": "calendar",
      "description": "This module provides functions to format and parse `Fcalendar.t` values using customizable date-time format strings. It supports operations like `fprint`, `print`, `sprint`, and `to_string` for converting calendar values to strings according to format specifiers, and `from_fstring` and `from_string` for parsing strings into calendar values. Concrete use cases include logging timestamps in a specific format, converting user input into calendar values, and generating human-readable date-time strings for reports or UI displays.",
      "description_length": 530,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time_sig.S-Second",
      "library": "calendar",
      "description": "This module implements second-based time values, providing conversion functions between integers and floats to a `t` type representing seconds. It ensures valid time intervals by coercing out-of-range values into the [0; 60[ range, handling carry-over to minutes and hours. Use this module when working with low-level time manipulations such as converting raw numeric inputs into normalized time components or performing arithmetic on seconds within a time triple.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Date-Period",
      "library": "calendar",
      "description": "This module represents time intervals as combinations of years, months, and days, supporting arithmetic operations like addition, subtraction, and negation. It provides constructors to build periods from individual components and functions to extract the total number of days or decompose a period into its year-month-day parts. Concrete use cases include calculating date differences, scheduling recurring events, and adjusting timestamps by variable durations.",
      "description_length": 462,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Period",
      "library": "calendar",
      "description": "This module provides arithmetic operations for manipulating durations expressed in calendar units (years, months, days, hours, etc.), conversions between calendar periods and time-based periods (e.g., seconds), and decomposition of periods into granular components. It operates on calendar periods derived from precise date-time values, which combine dates and times into a single temporal model, enabling use cases like scheduling events with mixed date-time units or calculating exact temporal differences across calendar boundaries.",
      "description_length": 535,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time_sig.S",
      "library": "calendar",
      "description": "This module provides operations for creating, normalizing, and manipulating time values represented as hours, minutes, and seconds, with automatic adjustment of out-of-range components (e.g., 60 seconds increments a minute). It supports arithmetic operations like addition/subtraction of periods, time zone conversions, and comparisons, working with a concrete time type `t` that reflects the current system time zone unless explicitly converted. Typical use cases include time tracking, scheduling, and applications requiring precise time calculations across different zones.",
      "description_length": 576,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date_sig.S-Period",
      "library": "calendar",
      "description": "This module handles date periods with arithmetic operations like addition, subtraction, and comparison. It works with periods expressed in years, months, and days, and supports conversions to and from day counts. Concrete use cases include calculating the difference between two dates or adding a specific duration to a date.",
      "description_length": 325,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Comparable",
      "library": "calendar",
      "description": "This module defines equality, comparison, and hashing operations for a type `t`. It enables the use of standard containers like `Map.Make`, `Set.Make`, and `Hashtbl.Make` with custom types by requiring implementations of `equal`, `compare`, and `hash`. Concrete use cases include defining orderings for custom data types such as dates, times, or intervals, and supporting efficient lookups and comparisons in calendar-based data structures.",
      "description_length": 440,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Ftime",
      "library": "calendar",
      "description": "This module formats and parses floating-point time values using a subset of Unix `date`-style format specifiers, focusing on time-of-day components like hours, minutes, and seconds. It provides functions to print times to strings or formatters, convert strings to time values, and supports customizable format strings with modifiers for padding and case. Concrete use cases include logging timestamps with variable precision, parsing time strings from user input, and generating time strings for output formats like ISO-8601 or custom log formats.",
      "description_length": 547,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Period",
      "library": "calendar",
      "description": "This module supports arithmetic operations (addition, subtraction, negation), unit conversions, and decomposition of time intervals measured in seconds, with explicit handling of year-month-day breakdowns. It operates on duration values represented as floating-point seconds and structured calendar periods, enabling precise temporal calculations where fractional seconds are acceptable but exact comparisons (e.g., for scheduling or timestamp deltas) may require specialized handling due to floating-point precision limits. Key applications include converting between calendar durations and lower-level time representations, or splitting intervals into human-readable components like months or days.",
      "description_length": 700,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make",
      "library": "calendar",
      "description": "This module combines date and time implementations to create, convert, and manipulate calendar timestamps using float-based representations, supporting operations such as Julian day conversion, timezone adjustment, and Unix time interconversion. It introduces a calendar type `t` that captures full date-time components (year, month, day, hour, etc.) and enables arithmetic with periods, such as adding days or weeks. The `Period` submodule provides a rich interface for constructing, decomposing, and transforming time intervals with granular units like years, months, and seconds, facilitating precise or approximate duration calculations. Together, they enable applications like recurring event scheduling, timestamp normalization across timezones, and temporal analytics where sub-second precision is optional.",
      "description_length": 814,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time.Period",
      "library": "calendar",
      "description": "This module represents time intervals as periods in terms of hours, minutes, and seconds, providing arithmetic operations such as addition, subtraction, multiplication, and division. It supports conversions to and from seconds, minutes, and hours, enabling precise time calculations. Concrete use cases include scheduling tasks with specific time intervals, calculating durations between events, or adjusting timestamps by fixed periods.",
      "description_length": 437,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime.Second",
      "library": "calendar",
      "description": "This module defines operations to convert between integers and floats representing seconds, using a float-based time implementation. It provides precise second-level time manipulation through functions like `from_int`, `from_float`, `to_int`, and `to_float`. Use this module when handling durations or timestamps requiring fractional second resolution, such as measuring execution time or parsing time strings.",
      "description_length": 410,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Time-Period",
      "library": "calendar",
      "description": "This module handles time periods represented as durations in seconds, supporting arithmetic operations like addition, subtraction, multiplication, and division. It provides constructors to create periods from hours, minutes, and seconds, and conversion functions to retrieve durations in seconds, minutes, or hours. Concrete use cases include calculating time differences, scheduling events with precise intervals, and converting between different time units for logging or display.",
      "description_length": 482,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Date",
      "library": "calendar",
      "description": "This module provides date formatting and parsing functions using a `Date.t` type, supporting operations like `fprint`, `print`, `sprint`, and `to_string` for converting dates to strings according to format specifiers, and `from_fstring`, `from_string` for parsing dates from strings. It works with `Date.t` values and uses format strings inspired by the Unix `date` utility, handling components like day, month, year, and padding modifiers. Concrete use cases include generating ISO-8601 date strings with `%F`, formatting dates as `%A, %B %d`, or parsing date strings like `\"2023-04-05\"` using a matching format.",
      "description_length": 613,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Ftime.Period",
      "library": "calendar",
      "description": "This module defines operations for creating, manipulating, and comparing time periods measured in seconds as floating-point values. It supports arithmetic operations such as addition, subtraction, negation, multiplication, and division, along with conversion functions to express periods in seconds, minutes, or hours. Concrete use cases include calculating durations between timestamps, scaling time intervals, and converting time units for display or further computation.",
      "description_length": 473,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Calendar",
      "library": "calendar",
      "description": "This module provides functions to format and parse calendar events using customizable date and time strings. It supports operations like `fprint` for outputting events to a formatter, `sprint` for converting events to strings, and `from_fstring` for parsing strings into events based on format specifiers. The module works with `CalendarLib.Calendar.t` values and handles format strings similar to the Unix `date` utility, enabling precise control over input and output representations.",
      "description_length": 486,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Fcalendar",
      "library": "calendar",
      "description": "This module provides precise formatting and parsing of calendar events with support for custom format strings, including detailed control over padding and case modifiers. It operates on `CalendarLib.Fcalendar.Precise.t` values, enabling operations like converting a timestamp to a formatted string or parsing a string into a calendar event using specifiers such as `%Y-%m-%d` or `%H:%M:%S`. Concrete use cases include logging timestamps with millisecond precision, generating ISO-8601 formatted dates, and parsing user-provided date strings for scheduling systems.",
      "description_length": 564,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Period.S",
      "library": "calendar",
      "description": "This module defines arithmetic and comparison operations for periods, which represent time intervals between events. It supports addition, subtraction, and negation of periods, as well as equality checks, ordering, and hashing. It operates on the abstract type `'a period`, built from date fields, enabling concrete use in scheduling, time difference calculations, and event duration manipulations.",
      "description_length": 398,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Int",
      "library": "calendar",
      "description": "This module implements equality, comparison, and hashing operations for integers. It defines a type alias `t` for `int` and provides the functions `equal`, `compare`, and `hash` to support structural operations on integer values. These functions are useful in contexts requiring ordered or hashed integer values, such as storing integers in sets, maps, or hash tables.",
      "description_length": 368,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.S",
      "library": "calendar",
      "description": "This module defines a generic interface for formatting and parsing date, time, and calendar events using customizable format strings. It provides functions to print events to a formatter or string using a specified format, and to parse strings into events based on format specifiers. Concrete use cases include converting a date to a string in ISO-8601 format using `%F`, or parsing a timestamp string like `\"2023-10-05\"` into a date value using a matching format.",
      "description_length": 464,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_sig.S-Period",
      "library": "calendar",
      "description": "This module handles time periods expressed as durations in hours, minutes, and seconds, supporting arithmetic operations like addition, subtraction, multiplication, and division. It provides constructors to create periods from individual time components and functions to convert periods into total seconds, minutes, or hours. Use this module to calculate time intervals, such as determining the duration between two timestamps or scaling time values.",
      "description_length": 450,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.DatePrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse date values using a string-based specification similar to Unix `date`, supporting operations like `fprint` for outputting dates to a formatter and `from_fstring` for converting strings into date values. It works with date representations defined by the `t` type, enabling precise control over output through format specifiers such as `%Y` for the year or `%d` for the day of the month, including modifiers for padding and case. Concrete use cases include generating human-readable date strings for logging or user display and converting date strings from external sources into internal date values for processing.",
      "description_length": 664,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Time",
      "library": "calendar",
      "description": "This module provides time formatting and parsing operations using a `t` type representing time values. It supports functions like `fprint`, `print`, `sprint`, and `to_string` for converting time data to strings according to format specifiers, and `from_fstring` and `from_string` for parsing time from formatted strings. Use cases include logging timestamps, generating ISO time strings, or parsing user input into time values using custom formats like `%H:%M:%S`.",
      "description_length": 464,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date.Period",
      "library": "calendar",
      "description": "This module represents time intervals as combinations of years, months, weeks, and days, supporting arithmetic operations like addition, subtraction, and negation. It provides constructors to build periods from individual components and functions to extract the total days or decompose a period into years, months, and days. Use cases include calculating date differences, scheduling recurring events, and performing calendar-based duration manipulations.",
      "description_length": 455,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar.Period",
      "library": "calendar",
      "description": "This implementation provides operations to represent, manipulate, and compare time intervals as floating-point seconds, supporting arithmetic (addition, subtraction, negation), decomposition into date-time components (years, months, days, seconds), and conversions between calendar and time periods. It works with a `period` type that encodes intervals in seconds, which may lose precision for small differences, and includes both safe and unsafe extraction functions for breaking down intervals into human-readable units. It is suited for applications requiring calendar-aware time spans, such as scheduling systems or date arithmetic, where exact second-level precision is less critical than handling months or years.",
      "description_length": 719,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Date",
      "library": "calendar",
      "description": "This module provides operations for creating and manipulating dates with support for Julian/Gregorian conversions, weekday calculations, and validity checks. It works with a structured date type (`Date.t`) that handles partial information (e.g., year-only) and interoperates with Unix time representations (`Unix.tm`) and business week components. Specific use cases include calendar-aware scheduling, historical date computations, and religious holiday calculations like Easter-based offsets.",
      "description_length": 493,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time.Second",
      "library": "calendar",
      "description": "This module defines conversions between integer and floating-point values and the `t` type representing seconds within a time system where seconds are integers. It supports precise time manipulations by allowing lossless and lossy conversions between numeric types. Concrete use cases include converting durations for time arithmetic or interfacing with systems that represent time as floating-point seconds.",
      "description_length": 408,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date_sig.S",
      "library": "calendar",
      "description": "This module offers date creation, validation, and arithmetic operations for calendar calculations, handling invalid dates through coercion rules except during the Julian-to-Gregorian transition gap. It works with `date`, `month`, `year`, and `Period` types, supporting conversions to Julian/Unix formats, leap year checks, ISO 8601 week computations, and liturgical calendar events like Easter-derived feasts. Key use cases include business date ranges, historical calendar transitions, and religious holiday scheduling requiring fixed offsets from computus-based dates.",
      "description_length": 570,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar.Precise",
      "library": "calendar",
      "description": "This module provides a precise calendar system using integer-based seconds to eliminate floating-point inaccuracies, centered around a `t` type representing moments in time. It supports construction and manipulation of dates with time zones, Julian day conversions, and period arithmetic, including handling leap days and calendar distinctions. Submodules extend functionality for date components, time field extraction, and comparisons, enabling operations like computing week-of-year, converting to and from Unix time, and performing exact date arithmetic. Example uses include scheduling systems, historical date analysis, and any application requiring reliable temporal calculations.",
      "description_length": 687,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.TimePrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse time values using a rich set of format specifiers inspired by the Unix `date` utility. It supports operations like `fprint`, `print`, `sprint`, and `to_string` for converting time data to strings, and `from_fstring` and `from_string` for parsing strings into time values. Specific use cases include generating ISO-8601 timestamps with `%F`, formatting log entries with `%c`, and parsing date strings like \"01/06/03\" using `%D`.",
      "description_length": 478,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise",
      "library": "calendar",
      "description": "This module provides precise calendar construction and temporal arithmetic with support for time zones, Julian day conversions, and sub-second precision. It operates on calendar values paired with date, time, and period types to enable accurate decomposition, arithmetic, and cross-representation conversions such as Unix time and Modified Julian days. The period submodule handles exact duration modeling using years, months, days, and smaller units, supporting arithmetic and conversions to seconds for applications like scheduling and timestamp calculations. Together, they allow tasks such as cross-timezone event alignment, precise interval decomposition, and rigorous timestamp arithmetic.",
      "description_length": 695,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Float",
      "library": "calendar",
      "description": "This module implements equality, comparison, and hashing for floating-point numbers with configurable precision. It provides precise control over float comparisons using a tolerance value, and includes a rounding function for numerical operations. Use this module when handling time-based calculations where small floating-point errors require controlled precision, such as comparing timestamps or durations.",
      "description_length": 408,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_sig.S-Time",
      "library": "calendar",
      "description": "This module provides timezone-aware time creation, conversion, and arithmetic operations, including normalization, component access (hours, minutes, seconds), and unit conversions. It operates on the abstract `Time.t` type alongside `Period` to represent durations, supporting precise temporal calculations across different time zones. Typical use cases include scheduling systems, time-based event management, and cross-timezone data synchronization where granular time manipulation is required.",
      "description_length": 496,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar.Precise",
      "library": "calendar",
      "description": "This module provides precise calendar operations using floating-point seconds for high-resolution time manipulation. It supports creating calendars from exact date components, converting between time zones, and extracting temporal fields like day of week or week number, all with fine-grained accuracy. The module enables precise arithmetic through period types, allowing addition, subtraction, and exact comparisons of time intervals decomposed into years, months, days, and seconds. Applications such as scheduling systems, financial calculations, and scientific measurements can rely on its exact handling of fractional seconds and reliable temporal computations.",
      "description_length": 666,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Calendar",
      "library": "calendar",
      "description": "This module provides precise calendar formatting and parsing using a `t` type representing calendar events. It supports operations like `fprint`, `print`, and `sprint` to output events using format strings similar to Unix `date`, and `from_fstring` to parse strings into events based on a format. Concrete use cases include converting timestamps to ISO-8601 strings using `%F`, parsing date strings like `\"2023-10-05\"` into calendar values, and formatting events with custom layouts such as `%Y-%m-%d %H:%M:%S`.",
      "description_length": 511,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_sig.Second",
      "library": "calendar",
      "description": "Handles conversions between integer and floating-point values and a second type, ensuring precise second measurements. Works with `int` and `float` to represent seconds, including fractional values. Useful for accurately representing and converting time intervals in applications like scheduling or time-based calculations.",
      "description_length": 323,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Utils",
      "library": "calendar",
      "description": "This module provides core utilities for defining and working with comparable and hashable types, enabling their use in standard containers like maps, sets, and hash tables. It includes submodules Int and Float that implement comparison and hashing operations for integers and floating-point numbers, supporting precise equality checks, ordering, and configurable precision for numerical computations. The main module allows defining custom comparable types such as dates or intervals, while its submodules facilitate tasks like sorting integer lists, validating numeric ranges, or comparing timestamps with tolerance for floating-point errors.",
      "description_length": 643,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_Zone",
      "library": "calendar",
      "description": "This module manages time zones and provides operations to retrieve, change, and compare time zones, including support for UTC, local time, and fixed offsets from UTC. It allows querying the current time zone, calculating time differences between zones, and checking daylight saving time status. Use cases include adjusting timestamps for different regions, converting between local and UTC time, and ensuring accurate time calculations during daylight saving transitions.",
      "description_length": 471,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig",
      "library": "calendar",
      "description": "This module provides precise calendar timestamp manipulation across the full Julian period, combining date and time components into a single temporal model. It supports creation, arithmetic, comparison, and formatting of timestamps, with submodules handling time zones, period arithmetic, unit conversions, and date-only or time-only operations. You can construct a timestamp from individual fields, add a period of 3 days and 2 hours to it, convert it to Unix time, or normalize it across time zones. The module enables high-precision scheduling, historical date calculations, and timezone-aware timestamp management using integrated date-time values and separate period types.",
      "description_length": 678,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date",
      "library": "calendar",
      "description": "This module handles date creation, arithmetic, and calendar conversions with a `t` type that supports partial dates, BC/AD eras, and Gregorian/Julian systems. It provides operations for date manipulation using periods, which represent time intervals in years, months, weeks, and days, enabling precise calculations such as adding durations, computing ISO weeks, and determining leap years. You can convert dates to Unix time or Julian days, calculate liturgical offsets like Easter-based feasts, and decompose or compare date ranges. Applications include financial date math, historical calendar transitions, and scheduling recurring events with calendar-aware precision.",
      "description_length": 671,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer",
      "library": "calendar",
      "description": "This module combines formatting and parsing capabilities for date, time, and calendar values using Unix-style format strings. It provides core operations `fprint` for structured output to a formatter and `from_fstring` for parsing strings into values, supporting format specifiers like `%Y` for year or `%H` for hour, with modifiers for padding and case control. Submodules extend this functionality to specific types such as `Date.t`, `Fcalendar.t`, and time values, enabling tasks like converting a timestamp to an ISO-8601 string with `%F`, parsing user input with a custom format, or logging events in a structured layout. Examples include formatting a date as `\"January 6\"` using `%B %-d`, or parsing `\"2023-04-05\"` into a calendar value using `%F`.",
      "description_length": 754,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Period",
      "library": "calendar",
      "description": "This module defines arithmetic and comparison operations for periods, which represent time intervals between events. It supports addition, subtraction, and negation of periods, along with equality checks, ordering, and hashing on the abstract type `'a period`, built from date fields such as years, months, weeks, and days. These operations enable scheduling recurring events, computing deadlines, and adjusting timestamps by fixed intervals. Submodules like Time.Period, Date.Period, and Calendar.Period provide concrete implementations tailored to specific event types.",
      "description_length": 571,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time",
      "library": "calendar",
      "description": "This module represents time using integer seconds and provides core operations for creating, normalizing, and manipulating time values through arithmetic, comparisons, and field-based access to components like hours and minutes. It supports time zone adjustments, AM/PM conversions, and hashing for unique time values, working with types `t` for points in time and `Period` for durations. The Period submodule enables precise interval arithmetic and unit conversions, useful for scheduling and event duration calculations, while the conversion submodule handles transformations between integer and floating-point seconds for interoperability and precision control. Example uses include normalizing a time value across day boundaries, adding a 2-hour interval to a timestamp, or converting a floating-point duration to integer seconds for storage.",
      "description_length": 846,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time_sig",
      "library": "calendar",
      "description": "This module represents and manipulates time values as normalized (hour, minute, second) triples, automatically adjusting out-of-range components and interpreting times in the current time zone. It provides core operations for creating, modifying, and converting time values, with support for arithmetic, comparisons, and time zone handling. The second-based submodules enable low-level manipulation and conversion of numeric time values, while the period module handles durations and interval calculations. Example uses include scheduling tasks, tracking elapsed time, and converting times between zones while maintaining consistent normalization.",
      "description_length": 647,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Version",
      "library": "calendar",
      "description": "Contains a single value representing the version of the calendar library as a string. It works with string data to store and retrieve version information. Useful for checking the library version at runtime or logging purposes.",
      "description_length": 226,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar",
      "library": "calendar",
      "description": "This module implements a calendar system using integer seconds, offering functions to construct, convert, and manipulate date-time values with support for time zones, component extraction, and arithmetic. It represents timestamps as floating-point values (`t`), enabling operations like adding intervals, comparing dates, and breaking down time into year-month-day units, though precision may degrade near second boundaries. The `Period` submodule handles time intervals in seconds and structured forms, useful for splitting durations into months or days, while the `Precise` submodule provides an alternative with integer-only seconds for exact comparisons. Example uses include scheduling, timestamp arithmetic, and converting between calendar systems where exact second-level precision is not critical.",
      "description_length": 805,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Ftime",
      "library": "calendar",
      "description": "This library represents time using floating-point seconds, enabling creation, conversion, and arithmetic operations on time values and intervals. It provides core types like `t` for time and `Period.t` for durations, with operations including addition, comparison, unit conversion, and time field manipulation. Use it to measure execution times, calculate intervals between timestamps, or scale durations by factors, while being mindful of floating-point precision limits. Submodules handle precise second-level conversions and interval arithmetic, supporting use cases from high-resolution timing to time unit transformations.",
      "description_length": 627,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date_sig",
      "library": "calendar",
      "description": "This module provides tools for creating and manipulating dates as year-month-day triples, with robust handling of invalid dates through coercion rules, except for the undefined period during the Julian-to-Gregorian transition. It supports date arithmetic, comparisons, and conversions to and from Julian and Unix time formats, while enforcing strict bounds within the Julian period. A companion module extends functionality with period-based calculations, enabling addition and subtraction of durations expressed in years, months, and days, and another offers calendar-specific operations including ISO week computation, leap year detection, and liturgical feast date calculation. Example uses include scheduling systems, historical calendar conversions, and religious holiday tracking with precise date normalization and arithmetic.",
      "description_length": 833,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_builder",
      "library": "calendar",
      "description": "This module combines date, time, and period types into a unified system for creating, manipulating, and converting calendar timestamps with support for time zones and sub-second precision. The core calendar type `t` captures full date-time components and supports arithmetic operations with periods, which model durations in years, months, days, and smaller units. The `Period` submodule enables exact or approximate duration calculations, facilitating tasks like recurring event scheduling and temporal analytics. Specific applications include cross-timezone timestamp normalization, interval decomposition, and precise Unix time conversions.",
      "description_length": 643,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar",
      "library": "calendar",
      "description": "This module represents time intervals as floating-point seconds, enabling arithmetic operations like addition, subtraction, and negation, while supporting decomposition into date-time components such as years, months, days, and seconds. It includes both safe and unsafe extraction functions for converting intervals into human-readable units, making it suitable for scheduling systems or calendar-aware date arithmetic where exact second-level precision is not critical. Submodules enhance this functionality with precise calendar operations, time zone conversions, and accurate extraction of temporal fields like day of week or week number. Together, they allow applications such as financial calculations and scientific measurements to perform reliable temporal computations with high-resolution time manipulation.",
      "description_length": 816,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib",
      "library": "calendar",
      "description": "This library provides a comprehensive suite of tools for calendar and temporal computations, integrating date, time, and period types into a unified system with support for time zones, precision control, and calendar conversions. Core data types include timestamps representing moments in time, periods modeling intervals, and comparable types for precise equality and ordering, with operations spanning arithmetic, comparison, formatting, parsing, and conversion across Julian, Gregorian, and Unix-based systems. You can construct and manipulate timestamps with sub-second precision, adjust times across time zones including daylight saving transitions, compute recurring events using period arithmetic, or format and parse temporal values using Unix-style specifiers. Specific applications include high-precision scheduling, historical date calculations, timezone-aware timestamp management, and calendar conversions with support for BC/AD eras and liturgical offsets.",
      "description_length": 970,
      "index": 56,
      "embedding_norm": 1.0000001192092896
    }
  ],
  "filtering": {
    "total_modules_in_package": 58,
    "meaningful_modules": 57,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9827586206896551
  },
  "statistics": {
    "max_description_length": 970,
    "min_description_length": 226,
    "avg_description_length": 561.5964912280701,
    "embedding_file_size_mb": 0.20758628845214844
  }
}