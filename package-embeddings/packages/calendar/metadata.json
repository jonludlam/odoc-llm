{
  "package": "calendar",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 41,
  "creation_timestamp": "2025-08-15T14:58:57.610062",
  "modules": [
    {
      "module_path": "CalendarLib.Calendar_builder.Make.Period",
      "library": "calendar",
      "description": "This module supports arithmetic operations, conversions, and decomposition of calendar periods represented as `Period.t`, which accounts for years, months, weeks, days, hours, minutes, and seconds. It enables converting calendar periods to time-based durations and breaking periods into year-month-day-second components, suitable for applications requiring temporal calculations like scheduling or event duration analysis.",
      "description_length": 422,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Precise.Period",
      "library": "calendar",
      "description": "This module handles precise time interval calculations using integer-based seconds, enabling accurate creation, arithmetic, and comparison of periods between calendar points. It supports conversions between calendar periods and time units (years to seconds), including decomposition into structured components and bidirectional transformations for date-time representations. Typical applications include scheduling systems requiring exact time differentials and data serialization workflows needing granular temporal breakdowns.",
      "description_length": 528,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise.Period",
      "library": "calendar",
      "description": "This module provides arithmetic, comparison, and conversion operations for calendar periods defined in terms of date and time components (years, months, days, hours, minutes, seconds), including precise handling of positive and negative intervals. It enables decomposition into lower-level time representations for accurate duration calculations, suitable for applications like resource scheduling or temporal data analysis where exact time differences are critical.",
      "description_length": 466,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar.Precise.Period",
      "library": "calendar",
      "description": "This module offers precise arithmetic operations, comparisons, and conversions for time intervals represented as floating-point seconds, while also supporting structured decomposition into year-month-day-hour-minute-second components. It operates on periods defined by both scalar float values and typed records capturing distinct temporal units, enabling exact calculations where small discrepancies matter. Typical applications include scientific timestamping, financial transaction timing, or system scheduling where sub-second precision and reliable interval comparisons are critical.",
      "description_length": 588,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Fcalendar.Precise",
      "library": "calendar",
      "description": "This module offers high-precision calendar operations using floating-point seconds, enabling accurate date and time manipulations such as creating calendars from components or Julian days, timezone conversions, and sub-second interval arithmetic. It works with calendar values (`t`) and time zones, supporting queries for date components, equality checks, and conversions to Unix time or Julian days. Designed for applications requiring exact timing, it serves financial systems needing precise interval calculations and scientific applications handling microsecond-accurate timestamps.",
      "description_length": 586,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.CalendarPrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse calendar events using customizable string representations. It supports converting calendar data to strings with `sprint` and `to_string`, printing to output streams with `print` and `dprint`, and parsing from strings with `from_fstring` and `from_string`. Use cases include logging timestamps, generating human-readable date strings, and parsing user-provided date-time strings according to a specified format.",
      "description_length": 461,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime.Period",
      "library": "calendar",
      "description": "This module represents time intervals in seconds as floating-point numbers and supports arithmetic operations like addition, subtraction, negation, multiplication, and division. It provides constructors to create periods from hours, minutes, and seconds, and conversion functions to retrieve durations in seconds, minutes, or hours, including fractional components. Concrete use cases include calculating time differences, scheduling events with precise delays, and converting between different time units for logging or timing operations.",
      "description_length": 539,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Date.Period",
      "library": "calendar",
      "description": "This module represents time intervals as combinations of years, months, weeks, and days, supporting arithmetic operations like addition, subtraction, and negation. It provides constructors to build periods from individual components and functions to extract the total number of days or decompose a period into its year-month-day parts. Use cases include calculating date differences, scheduling recurring events, and adjusting dates by variable time spans.",
      "description_length": 456,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Fcalendar",
      "library": "calendar",
      "description": "This module provides precise formatting and parsing of calendar events with support for second-level precision. It works with `CalendarLib.Fcalendar.Precise.t` values, enabling operations like converting a formatted string to a calendar value or printing calendar data using custom format strings. Use cases include logging timestamped events, generating human-readable calendar data representations, and parsing date-time strings from external data sources.",
      "description_length": 458,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.Ftime",
      "library": "calendar",
      "description": "This module provides functions to format and parse floating-point time values using a string-based format specification similar to the Unix `date` utility. It supports operations like `fprint`, `print`, and `sprint` for converting time values into strings according to a given format, and `from_fstring` and `from_string` for parsing time values from formatted strings. The primary data type is `t`, representing a floating-point time, and the module uses a default format of `%T` for seconds rounded to integers.",
      "description_length": 513,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Fcalendar",
      "library": "calendar",
      "description": "This module provides functions to format and parse calendar events using a Unix `date`-inspired format string. It supports operations like `fprint`, `print`, `sprint`, and `to_string` for converting calendar data to strings, and `from_fstring` and `from_string` for parsing strings into calendar events. Concrete use cases include logging timestamps, generating human-readable date strings, and parsing date inputs from user or file sources.",
      "description_length": 441,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Precise_Calendar",
      "library": "calendar",
      "description": "This module provides precise formatting and parsing of calendar events using customizable format strings. It supports operations to print, convert to string, and parse calendar data with specific format specifiers, such as `%i %T` by default. Concrete use cases include logging timestamps, generating human-readable calendar output, and parsing date-time strings for further processing.",
      "description_length": 386,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Date",
      "library": "calendar",
      "description": "This module provides functions to format and parse date values using a string-based specification similar to the Unix `date` utility. It supports converting dates to strings with customizable formats via `fprint`, `print`, and `sprint`, and parsing date strings back into date values using `from_fstring` and `from_string`. The module works specifically with `CalendarLib.Date.t` values and is useful for tasks like logging date information in a structured format or validating date inputs from user-provided strings.",
      "description_length": 517,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make_Precise",
      "library": "calendar",
      "description": "This module offers high-precision date-time construction, conversion, and arithmetic operations, including exact Julian day calculations, time zone adjustments, and calendar system interoperability. It manipulates granular temporal values like timestamps (`t`), dates (`Date.t`), and times (`Time.t`), supporting detailed field extraction (e.g., leap day checks, week-of-year) and conversions to Unix representations. Designed for applications requiring rigorous temporal accuracy\u2014such as financial systems or scientific logging\u2014where precise interval handling and calendar consistency outweigh performance concerns.",
      "description_length": 616,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time.Period",
      "library": "calendar",
      "description": "This module represents time intervals as periods in terms of hours, minutes, and seconds, and supports arithmetic operations like addition, subtraction, negation, multiplication, and division. It provides constructors to create periods from specific time units and conversion functions to retrieve the duration in seconds, minutes, or hours, including fractional values. Concrete use cases include calculating time differences, scheduling recurring events, and converting between different time units for precise timing operations.",
      "description_length": 531,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Calendar",
      "library": "calendar",
      "description": "This module provides functions to format and parse calendar events using customizable format strings, similar to the Unix `date` utility. It supports converting calendar data to strings with specified formats via `sprint` and `print`, and parsing strings into calendar events using `from_fstring` and `from_string`. Use cases include logging timestamps, generating human-readable date representations, and parsing date-time strings from user input or configuration files.",
      "description_length": 471,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer.TimePrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse time values using customizable string representations. It supports operations like `fprint`, `print`, and `sprint` for converting time data to strings according to a specified format, and `from_fstring`, `from_string` for parsing time from strings. It works directly with time values and is used for tasks like logging timestamps, generating human-readable time outputs, or parsing time inputs from user-defined formats.",
      "description_length": 471,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Period",
      "library": "calendar",
      "description": "This module handles arithmetic operations on time intervals, decomposition into year-month-day-second components, and conversion between calendar periods and lower-level time periods. It operates on `Period` values representing durations in calendar units and interacts with `Time.Period` for more granular time representations. Typical use cases include calculating date differences, normalizing durations across calendar boundaries, and extracting human-readable time spans from temporal intervals.",
      "description_length": 500,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Float",
      "library": "calendar",
      "description": "This module implements equality, comparison, and hashing for float values with configurable precision. It provides `equal`, `compare`, and `hash` functions that respect a dynamically set precision threshold, and a `round` function for rounding floats to the nearest integer. It is used to handle floating-point inaccuracies in contexts like time and date calculations where small differences should be treated as equal.",
      "description_length": 419,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Utils.Int",
      "library": "calendar",
      "description": "This module implements equality, comparison, and hashing operations for integers. It defines a type alias `t` for `int` and provides functions to compare values, check equality, and compute hash values. These operations are used when integers need to be stored in hash tables or compared in ordered collections.",
      "description_length": 311,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.Time",
      "library": "calendar",
      "description": "This module provides functions to format and parse time values using a string-based specification, supporting operations like `fprint`, `print`, `sprint`, and `to_string` for outputting times in custom or default formats. It works with the `CalendarLib.Time.t` type, representing time values, and includes `from_fstring` and `from_string` for parsing time strings into structured values. Concrete use cases include logging time stamps, generating human-readable time outputs, and parsing time strings from user input or configuration files.",
      "description_length": 540,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Time.Second",
      "library": "calendar",
      "description": "This module defines conversions between integer and floating-point values and a specialized second type. It provides functions to transform numeric representations into seconds and back, ensuring precise time handling. Use this when working with time intervals that require exact second granularity, such as scheduling events or measuring durations.",
      "description_length": 349,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_builder.Make",
      "library": "calendar",
      "description": "This module combines date and time functionality to construct and manipulate calendar values with float-based precision, offering operations like timezone conversion, component extraction (day, month, year, etc.), and arithmetic using `Period.t`. It works with a calendar type `t` that integrates date and time components, alongside conversions to Unix timestamps, Julian day numbers, and structured representations like `Unix.tm`. Designed for scenarios requiring precise temporal calculations (e.g., calendar arithmetic, Gregorian date validation, or leap day checks), it balances flexibility with known precision limitations inherent to float-based time representations.",
      "description_length": 673,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Printer.DatePrinter",
      "library": "calendar",
      "description": "This module provides functions to format and parse date values using customizable string representations, adhering to the same interface across date, time, and calendar types. It supports operations like `fprint`, `sprint`, and `from_fstring` to convert between strings and date values using format specifiers similar to the Unix `date` utility. Specific use cases include logging timestamps, generating human-readable date strings, and parsing date inputs from user-provided strings.",
      "description_length": 484,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime.Second",
      "library": "calendar",
      "description": "This module defines operations to convert between integers or floats and a second type, representing time with floating-point precision. It provides direct conversions using `from_int`, `from_float`, `to_int`, and `to_float`. Use this module when handling fractional seconds, such as measuring durations with sub-second accuracy or interfacing with systems expecting float-based time values.",
      "description_length": 391,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar.Precise",
      "library": "calendar",
      "description": "This implementation provides precise date-time manipulation using integer-based seconds, enabling accurate calendar arithmetic, time zone conversions, and exact comparisons of timestamps down to the second. It operates on an abstract timestamp type alongside auxiliary representations for date fields, supporting conversions to Unix time structures and floats while maintaining robustness against rounding errors. Particularly suited for applications requiring sub-minute precision, such as financial transaction logging, scientific experiment timing, or systems needing reliable day-of-week/week-of-year calculations across historical or future dates.",
      "description_length": 652,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Version",
      "library": "calendar",
      "description": "Contains a single value representing the version of the calendar library as a string. It works with string data to provide version identification. Useful for checking or displaying the current version of the calendar system in applications.",
      "description_length": 240,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar",
      "library": "calendar",
      "description": "This module provides operations for constructing, converting, and manipulating calendar values with second precision, primarily working with the `Calendar.t` type alongside `Unix.tm`, floats, and integer seconds. Key functionalities include time zone conversion, extraction of date/time components (e.g., day, month, hour), arithmetic with periods (e.g., adding days or hours), and comparisons, though imprecision in float-based calculations may affect accuracy for small time differences. It is suited for general-purpose date and time handling where exactness at the second level is sufficient, such as event scheduling, timestamp normalization, or bridging between Julian/Modified Julian calendar systems.",
      "description_length": 708,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Utils",
      "library": "calendar",
      "description": "This module includes submodules that implement equality, comparison, and hashing operations for integers and floats. It supports precise control over floating-point comparisons using configurable precision, and provides corresponding hash functions suitable for use in hash tables or ordered collections. Concrete use cases include handling time and date calculations where small floating-point differences must be treated as equal, and standardizing integer operations in data structures requiring consistent comparison logic.",
      "description_length": 527,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_sig",
      "library": "calendar",
      "description": "This module defines operations for representing and manipulating time values as triples of hours, minutes, and seconds, automatically normalizing out-of-range values. It supports arithmetic operations, comparisons, and conversions between time values, all respecting the current time zone setting. Concrete use cases include scheduling tasks based on precise time values and performing time calculations that account for time zone differences without altering global state.",
      "description_length": 473,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time",
      "library": "calendar",
      "description": "This module provides operations for constructing, manipulating, and comparing time values with integer seconds, including timezone-aware conversions, normalization to valid hour ranges, and extraction of specific time components. It works with `Time.t` values representing clock times and `Period` values for time intervals, enabling precise arithmetic and unit conversions. Typical use cases include scheduling systems requiring timezone adjustments, duration calculations for event logging, and validating time inputs against standard hour/minute/second ranges.",
      "description_length": 563,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Time_Zone",
      "library": "calendar",
      "description": "This module manages time zones with operations to set, retrieve, and compare them, including support for UTC, local time, and fixed offsets. It provides functions to compute time zone gaps, check daylight saving time status, and run computations in a temporary time zone. Use cases include adjusting timestamps for display, converting between time zones, and handling date arithmetic accounting for local time rules.",
      "description_length": 416,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Date",
      "library": "calendar",
      "description": "This module offers precise date creation, arithmetic, and calendar conversions using a `t` type supporting partial dates and day-of-year calculations, alongside `Period` for time spans. It enables validation, comparison, and transformations between Gregorian/Julian calendars, Unix time, and business weeks, with utilities for leap year checks and weekday-based date adjustments. Specialized functions compute religious holidays like Easter and related feasts by calculating fixed offsets from dynamically determined anchor dates.",
      "description_length": 530,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Period",
      "library": "calendar",
      "description": "This module defines arithmetic operations on time periods, such as adding, subtracting, and comparing durations. It works with the `date_field` variant type to represent units of time like years, months, days, and weeks. Concrete use cases include calculating the difference between two dates or adjusting a date by a specified duration in a specific time unit.",
      "description_length": 361,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Ftime",
      "library": "calendar",
      "description": "This module provides time creation, conversion, and manipulation operations with floating-point precision, including timezone adjustments, component extraction, and normalization. It works with time values (`t`), floating-point seconds, and period intervals to support tasks like scheduling across time zones, fractional second measurements, and interval arithmetic. Designed for scenarios where approximate precision suffices, it accommodates use cases such as logging, scientific timing, and user-facing time displays requiring AM/PM or 24-hour conversions.",
      "description_length": 559,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Printer",
      "library": "calendar",
      "description": "This module provides functions to format and parse date, time, and calendar values using customizable string representations, supporting operations like `fprint`, `sprint`, `print`, `from_fstring`, and `from_string`. It works with `CalendarLib.Date.t`, `CalendarLib.Time.t`, and `CalendarLib.Calendar.t` types, enabling precise conversion between structured values and formatted strings. Concrete use cases include logging timestamps, generating localized date-time strings, and parsing user-provided or configuration-based date-time inputs.",
      "description_length": 541,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Fcalendar",
      "library": "calendar",
      "description": "This module provides float-based calendar operations for date creation, conversion, and manipulation, including time zone adjustments, component extraction (year/month/day/hour/second), and arithmetic with periods. It works with a `t` type representing time as float seconds, alongside `day`, `month`, `year`, and Unix time structures, prioritizing Unix time precision over sub-second accuracy. It suits applications tolerating minor imprecision in date comparisons or arithmetic, such as logging systems or coarse-grained scheduling, where exact floating-point equality isn't critical.",
      "description_length": 586,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Calendar_builder",
      "library": "calendar",
      "description": "Constructs and manipulates calendar data structures, offering functions to create, update, and query events and time slots. Works with event lists, date ranges, and time intervals. Useful for scheduling applications that require dynamic calendar generation and conflict detection between time blocks.",
      "description_length": 300,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib.Date_sig",
      "library": "calendar",
      "description": "This module defines operations for creating and manipulating dates as year-month-day triples, including validation and coercion of invalid dates according to the Julian period and calendar transition rules. It works with integer-based date components and raises specific exceptions for out-of-bounds or undefined dates, such as those skipped during the Julian-to-Gregorian calendar switch. Concrete use cases include date arithmetic, calendar conversions, and handling historical dates around calendar reforms.",
      "description_length": 510,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CalendarLib.Calendar_sig",
      "library": "calendar",
      "description": "This module defines operations for creating, manipulating, and comparing calendar values representing specific points in time as (year, month, day, hour, minute, second) tuples. It supports precise time arithmetic, formatting, and parsing, working with the Julian period spanning from 4713 BC to 3268 AC. Concrete use cases include scheduling systems, historical date calculations, and time-based event management.",
      "description_length": 414,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CalendarLib",
      "library": "calendar",
      "description": "This module provides precise date and time manipulation with support for calendar operations, time zones, periods, and formatted input/output. It works with types like `Calendar.t`, `Date.t`, `Time.t`, and `Period.t` to handle tasks such as event scheduling, timestamp conversion, and historical date calculations. Concrete use cases include scheduling systems, log timestamping, holiday calculations, and cross-timezone time normalization.",
      "description_length": 440,
      "index": 40,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 42,
    "meaningful_modules": 41,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9761904761904762
  },
  "statistics": {
    "max_description_length": 708,
    "min_description_length": 240,
    "avg_description_length": 486.2682926829268,
    "embedding_file_size_mb": 0.5945186614990234
  }
}