{
  "package": "diffast-langs-python",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 24,
  "creation_timestamp": "2025-07-15T23:12:38.865012",
  "modules": [
    {
      "module_path": "Python_base.Py_label.UnaryOperator",
      "library": "diffast-langs-python.base",
      "description": "This module defines unary operator types like `Positive`, `Negative`, `Complement`, and `Not`, and provides conversions to string representations and AST tags. It works with unary operator AST nodes and labels. Concrete use cases include mapping Python unary operators to internal types and generating string or tagged representations for analysis or transformation passes.",
      "description_length": 373,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_label.Literal",
      "library": "diffast-langs-python.base",
      "description": "This module defines a variant type for representing Python literals such as integers, floats, strings, and boolean values. It provides functions to convert these literals to various string representations, anonymize values, and extract structured tags. Use cases include parsing and transforming Python AST literals into simplified or standardized forms for analysis or code generation.",
      "description_length": 386,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_tree.Tree",
      "library": "diffast-langs-python.base",
      "description": "This module constructs and manipulates tree nodes with support for annotations, identifiers, and structural comparison. It operates on tree structures composed of nodes and leaves, each carrying data such as labels, annotations, and metadata like ordinal tables and source locations. Concrete use cases include building abstract syntax trees with positional information and handling tree transformations in parsing and unparsing workflows.",
      "description_length": 439,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_label.BinaryOperator",
      "library": "diffast-langs-python.base",
      "description": "This module defines a variant type representing binary operators in Python, including arithmetic, comparison, bitwise, and logical operations. It provides functions to convert these operators to string representations and map them from abstract syntax tree (AST) nodes. Concrete use cases include parsing Python expressions, generating code, and analyzing operator behavior in static analysis tools.",
      "description_length": 399,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_unparsing.Fmtr",
      "library": "diffast-langs-python.base",
      "description": "This module provides low-level formatting operations for constructing Python code strings, primarily through the `formatter` value, which is used to emit formatted text. It works directly with OCaml's `Format.formatter` type to generate Python syntax trees into readable code. Concrete use cases include printing expressions, statements, and modules during code generation or transformation tasks.",
      "description_length": 397,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_label.Statement",
      "library": "diffast-langs-python.base",
      "description": "This module defines a variant type representing different kinds of Python statements, such as function definitions, loops, and conditionals, each potentially carrying associated identifiers. It provides operations to convert statements to strings, extract or check names, anonymize named statements, and serialize them into tagged representations. Concrete use cases include analyzing or transforming Python code structures, such as identifying function scopes or processing control flow constructs.",
      "description_length": 499,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_label.SimpleStatement",
      "library": "diffast-langs-python.base",
      "description": "This module defines a variant type representing simple statements in Python, such as assignments, control flow, and imports. It provides functions to convert these statements to strings, anonymize them, and extract tags with associated data. Use cases include analyzing or transforming Python code structures, such as identifying control flow statements or normalizing code for comparison.",
      "description_length": 389,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_label.AssignmentOperator",
      "library": "diffast-langs-python.base",
      "description": "This module defines a variant type representing Python assignment operators such as `=`, `+=`, `-=`, etc., along with conversions to string representations and parsing from AST nodes. It supports operations to map augmented assignment operators from the OCaml AST to the corresponding labeled operator type and extract tag-like identifiers. Concrete use cases include translating and pretty-printing Python assignment operations during AST processing or code generation tasks.",
      "description_length": 476,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_unparsing.UPB",
      "library": "diffast-langs-python.base",
      "description": "This module provides low-level formatting and pretty-printing operations for constructing Python code, using block styles and box-based layouts to manage structural elements. It supports printing literals, punctuation, and symbols, along with layout controls like indentation and spacing, facilitating tasks such as converting abstract syntax trees into properly formatted source code.",
      "description_length": 385,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_lib_base.Fact",
      "library": "diffast-langs-python.base",
      "description": "This module provides utilities for constructing structured AST nodes and navigating hierarchical relationships in Python code analysis. It operates on `Diffast_core.Triple.node` values and AST nodes with labeled metadata, enabling precise retrieval of parents, children, and annotated properties. Typical use cases include building abstract syntax tree representations, extracting code relationships, and traversing scopes to locate contextual ancestors like enclosing functions or modules.",
      "description_length": 490,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_lib_base.Tree",
      "library": "diffast-langs-python.base",
      "description": "This module implements tree construction and manipulation operations for abstract syntax trees, handling node creation with labels, annotations, and identifiers. It works with objects representing tree nodes, labels, and ordinal tables, supporting comparisons and accessors for structured data traversal. Concrete use cases include building and transforming ASTs during parsing and unparsing, such as constructing Python syntax trees with positional information and annotations.",
      "description_length": 478,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_label.Primary",
      "library": "diffast-langs-python.base",
      "description": "This module defines a type `t` representing primary expression labels in Python syntax trees, including names, literals, and syntactic constructs like tuples, lists, and attribute references. It provides operations to convert these labels to strings, strip or anonymize identifiers, and extract structured tags with associated names. Concrete use cases include processing Python AST nodes for analysis, transformation, or pretty-printing tasks.",
      "description_length": 444,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_unparsing.Tree",
      "library": "diffast-langs-python.base",
      "description": "This module constructs and manipulates abstract syntax trees for Python code unparsing. It provides functions to create nodes and leaves with annotations, original labels, and identifiers, while supporting ordinal tables and UID generation. Use cases include converting XML representations to Python ASTs and serializing ASTs to source code using custom unparsers.",
      "description_length": 364,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Python_base.Py_lib_base",
      "library": "diffast-langs-python.base",
      "description": "This module combines tree manipulation and fact extraction capabilities with its submodules to support structured data analysis and transformation. It provides core operations like `sprintf` for string formatting and `extract_fact` for retrieving fact values, while the submodules enable AST construction, hierarchical navigation, and metadata-aware traversal over Python code structures. You can build and traverse abstract syntax trees with labeled nodes, extract facts based on input parameters, and retrieve contextual relationships such as parent and child nodes in a tree. The module supports workflows like parsing Python code into annotated ASTs, analyzing code structure, and extracting specific data values during processing.",
      "description_length": 735,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_unparsing",
      "library": "diffast-langs-python.base",
      "description": "This module converts Python abstract syntax trees into textual code representations, combining node formatting, layout control, and AST construction. It provides core operations for emitting Python syntax with precise indentation and box-based formatting, using formatters and layout primitives to handle expressions, statements, and modules. The module supports AST manipulation with functions to create and annotate nodes, manage identifiers, and serialize trees to source code. Specific tasks include converting XML to Python ASTs, custom unparser creation, and generating readable code with controlled spacing and structural elements.",
      "description_length": 638,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_label",
      "library": "diffast-langs-python.base",
      "description": "This module organizes a family of types and operations for modeling Python syntax elements within OCaml AST processing. It includes unary and binary operators, literals, statements, assignments, and primary expression labels, each with conversions to strings, tags, and AST-compatible forms. For example, unary operators can be mapped from Python AST nodes and rendered for analysis, literals can be anonymized or converted to structured tags, and assignment operators can be translated between OCaml representations and labeled forms. Submodules provide specific variants and utilities that support code analysis, transformation, and generation across Python's core syntactic constructs.",
      "description_length": 688,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base.Py_tree",
      "library": "diffast-langs-python.base",
      "description": "This module processes and transforms abstract syntax trees for Python code, converting XML or AST nodes into structured tree formats and manipulating lists, optional values, and location-annotated objects. It supports parsing Python source files, extracting identifiers and labels from nodes, and aligning locations across different AST representations. The child module enhances tree handling with annotated nodes and structural comparison, enabling precise tree construction and transformation with metadata like source positions and ordinal tables. Together, they facilitate workflows that require building, modifying, and analyzing Python ASTs with rich contextual data.",
      "description_length": 674,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Python_base",
      "library": "diffast-langs-python.base",
      "description": "This module processes and transforms Python abstract syntax trees with rich metadata, supporting structured analysis, code generation, and AST manipulation. It provides core data types for Python syntax elements, including expressions, statements, literals, and operators, along with operations for tree construction, node annotation, and fact extraction. You can parse Python code into annotated ASTs, extract contextual relationships and facts, and generate formatted source code with precise layout control. Specific use cases include converting XML to Python ASTs, analyzing code structure, and custom unparser creation with labeled node traversal and metadata-aware transformations.",
      "description_length": 687,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mpython_p.Py_lib_p",
      "library": "diffast-langs-python.p",
      "description": "This module includes a formatting function similar to `printf` for generating strings from formatted input and a function for extracting and handling fact-like data structures. It operates on standard data types like strings and generic values, supporting tasks such as string interpolation and fact extraction. Concrete use cases include constructing dynamic strings and processing structured data elements.",
      "description_length": 408,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mpython_p",
      "library": "diffast-langs-python.p",
      "description": "This module provides string formatting and fact extraction capabilities, extending standard data manipulation with dynamic string generation and structured data handling. It introduces operations for interpolating values into strings and parsing fact-like structures from generic data types. You can use it to build formatted output strings or extract and process structured facts from input sources like logs or configuration files.",
      "description_length": 433,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mpython.Py_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-python",
      "description": "This module provides operations for tree diffing algorithms, postprocessing edit scripts, and optimizing transformations, with a focus on move detection, edit refinement, and mapping validation. It operates on structured data like abstract syntax trees (ASTs), node mappings, and edit operations, supporting use cases such as code transformation tools and version control systems for structured data. Key techniques include traversal algorithms, conflict resolution strategies, and heuristic-based analysis to handle moves, relabeling, and structural modifications in hierarchical data.",
      "description_length": 586,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mpython.Py_lib.Analyzing",
      "library": "diffast-langs-python",
      "description": "This module analyzes tree structures by comparing nodes and their metadata to detect isomorphic subtrees, manage pruned nodes, and evaluate structural changes. It supports operations like boundary node analysis and efficient traversal using indexed representations, working with data such as ASTs, source locations, and digests. Its diffing submodule identifies moves, refines edits, and validates mappings between tree versions, enabling applications like code diffing and transformation tools. Together, the system allows precise structural analysis and optimization of hierarchical data across use cases such as version control and visualization.",
      "description_length": 649,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mpython.Py_lib",
      "library": "diffast-langs-python",
      "description": "This module provides tools for analyzing and transforming tree structures by comparing nodes and metadata to detect structural changes, extract differences, and apply edits. It supports operations like isomorphic subtree detection, node mapping, and edit script generation, working with data such as ASTs, source locations, and tree digests. The diffing submodule identifies moves, refines transformations, and validates mappings, enabling tasks like code diffing and hierarchical data optimization. Examples include analyzing code changes between versions, mapping nodes across ASTs, and generating transformation scripts for structured data.",
      "description_length": 643,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mpython",
      "library": "diffast-langs-python",
      "description": "This module enables the analysis and transformation of tree structures by comparing nodes and metadata to detect structural changes, extract differences, and apply edits. It supports operations such as isomorphic subtree detection, node mapping, and edit script generation, working with data like ASTs, source locations, and tree digests. Specific use cases include analyzing code changes between versions, mapping nodes across abstract syntax trees, and generating transformation scripts for hierarchical data. The module also includes a diffing submodule that identifies moves, refines transformations, and validates mappings.",
      "description_length": 628,
      "index": 23,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 49,
    "meaningful_modules": 24,
    "filtered_empty_modules": 25,
    "retention_rate": 0.4897959183673469
  },
  "statistics": {
    "max_description_length": 735,
    "min_description_length": 364,
    "avg_description_length": 512.0,
    "embedding_file_size_mb": 0.08759498596191406
  }
}