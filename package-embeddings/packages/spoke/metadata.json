{
  "package": "spoke",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:38.860817",
  "modules": [
    {
      "module_path": "Flow.Make",
      "library": "spoke.flow",
      "description": "This module implements a flow-based communication layer with support for reading, writing, and managing the lifecycle of network connections. It works with `Cstruct.t` buffers and lists for data transmission, and exposes operations like `read`, `write`, `writev`, `shutdown`, and `close` for precise control over flow behavior. Concrete use cases include implementing custom network protocols over MirageOS flows, handling client-server authentication with identity and password parameters, and managing connection termination and error states in networked applications.",
      "description_length": 570,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow",
      "library": "spoke.flow",
      "description": "This module implements the SPAKE2+EE handshake protocol for client and server roles, managing symmetric cipher negotiation and secure communication setup over network flows. It integrates a flow-based communication layer that supports reading, writing, and lifecycle management of connections using `Cstruct.t` buffers and lists, with operations like `read`, `write`, `shutdown`, and `close`. The protocol enables password-authenticated key exchange to secure client-server connections and upgrade plaintext streams to encrypted channels using derived symmetric keys. Use cases include implementing secure network protocols in MirageOS, handling authenticated communication with identity and password parameters, and managing cryptographic state transitions with buffered handshake data.",
      "description_length": 787,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Spoke",
      "library": "spoke.core",
      "description": "This module facilitates secure client-server communication through cryptographic handshake protocols, focusing on key derivation, message validation, and symmetric key exchange. It operates on structured cryptographic data representing client/server identities, shared secrets, and protocol messages, using elliptic curve operations and authenticated encryption to ensure forward secrecy. Typical applications include establishing mutually authenticated channels and deriving session keys for encrypted data transmission in distributed systems.",
      "description_length": 544,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 787,
    "min_description_length": 544,
    "avg_description_length": 633.6666666666666,
    "embedding_file_size_mb": 0.011311531066894531
  }
}