{
  "package": "higher_kinded",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 48,
  "creation_timestamp": "2025-08-15T15:08:08.426780",
  "modules": [
    {
      "module_path": "Higher_kinded.Make_monad.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic syntax for working with higher-kinded types, enabling `let%bind` and `let%map` expressions. It operates on values wrapped in a higher-kinded type constructor, allowing sequential composition and transformation of effectful computations. Concrete use cases include chaining asynchronous operations, handling optional values, or managing stateful computations with clear, linear syntax.",
      "description_length": 413,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness3.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic operations like `bind`, `map`, and `both` for working with higher-kinded types that take three type parameters. It enables sequencing and combining computations that carry additional type-level structure, particularly useful when dealing with effectful or context-aware transformations over triply-parametrized data. Concrete use cases include managing effect stacks or transforming nested data structures with consistent type alignment.",
      "description_length": 466,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad3.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic syntax for working with three-argument higher-kinded types, enabling `let%bind` and `let%map` expressions in a monad transformer stack. It supports operations like `bind`, `map`, and `both` over functions taking three type parameters, allowing composition of effectful computations with preserved type relationships. Concrete use cases include sequencing asynchronous operations with shared environment and state parameters, or building complex parsers that combine multiple input streams.",
      "description_length": 518,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic operations like `bind`, `map`, and `both` for working with higher-kinded types. It enables sequencing and transformation of values wrapped in a monadic structure, supporting concrete use cases like asynchronous computations or effectful pipelines. The module focuses on structuring expressions that combine values while preserving type safety and composability.",
      "description_length": 390,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness2.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic operations like `bind`, `map`, and `both` for working with higher-kinded types parameterized by two type variables. It enables sequencing and combining computations that carry effects represented through the `Higher_kinded.t` type constructor. A concrete use case is writing expressive, effectful pipelines over data structures like `Result` or `Option`, preserving type abstraction and composability.",
      "description_length": 430,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make_monad2.Let_syntax.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic operations for working with higher-kinded types, including `bind`, `map`, `both`, and `return`. It manipulates values wrapped in a higher-kinded type constructor, enabling composition of effectful computations. Concrete use cases include sequencing asynchronous operations, handling effectful transformations, and combining multiple effectful values into tuples.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad.Let_syntax",
      "library": "higher_kinded",
      "description": "This module enables monadic syntax for higher-kinded types, supporting `let%bind` and `let%map` to sequence effectful computations. It works directly with values wrapped in a higher-kinded type constructor, using `>>=` and `>>|` under the hood. Use it to cleanly chain operations like async calls, option processing, or state transitions in a readable, linear style.",
      "description_length": 366,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness3.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic `bind`, `map`, and `both` operations for higher-kinded types with three type parameters. It supports sequencing and combining computations that maintain a shared type structure, specifically for triply-parametrized higher-kinded values. It is useful for handling effectful transformations or composing operations over complex nested structures with aligned type parameters.",
      "description_length": 402,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad2.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic binding, mapping, and combination operations for higher-kinded type constructors with two parameters. It supports sequencing effectful computations, transforming results, and pairing values within a monadic context. Concrete use cases include composing asynchronous operations with effects, handling stateful computations, and managing error propagation in multi-step processes.",
      "description_length": 407,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad2.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic binding and mapping operations for higher-kinded types with two parameters. It provides the `>>=` and `>>|` operators to sequence computations and transform results within the context of a higher-kinded structure. These functions enable chaining effectful operations over types that take an environment and produce a result, such as reader monads in a higher-kinded setting.",
      "description_length": 402,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic bind (`>>=`) and map (`>>|`) operators for chaining computations that return higher-kinded values. It works specifically with functions wrapped in the `Higher_kinded.t` type, enabling pipelining of effectful operations in a type-safe way. Concrete use cases include composing asynchronous or context-aware computations, such as parsing with error handling or stateful transformations, where each step depends on the result of the previous.",
      "description_length": 467,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad3.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic bind (`>>=`) and map (`>>|`) operators for composing higher-kinded type values. It enables chaining computations that return wrapped values, transforming and sequencing effects across multiple stages. Use it to handle effectful computations like asynchronous operations or state transitions in a structured, readable way.",
      "description_length": 349,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness2.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic bind and map operations for higher-kinded types with two type parameters. It provides the `(>>=)` and `(>>|)` operators to sequence computations and transform values within the context of a higher-kinded structure. These operations are specifically designed for use with types that support the `Higher_kinded.t` abstraction, enabling expressive, pipeline-style composition of effectful computations.",
      "description_length": 427,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic bind and map operations for higher-kinded types. It provides the `>>=` and `>>|` operators to sequence computations and transform values within a monadic context. Concrete use cases include chaining effectful operations like asynchronous computations or error handling in a type-safe way.",
      "description_length": 316,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic `bind`, `map`, and `both` operations for sequencing and transforming values within higher-kinded type structures. It works directly with `Higher_kinded.t` values, enabling composition of asynchronous or effectful computations in a type-safe manner. Use it to build pipelines that combine futures, optional values, or custom effect types without boilerplate.",
      "description_length": 386,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness3.Monad_infix",
      "library": "higher_kinded",
      "description": "This module defines monadic operators `>>=` and `>>|` for chaining computations that return higher-kinded types with three type parameters. It works with functions wrapped in `Higher_kinded.t` that take three arguments and produce a higher-kinded result. These operators enable composing effectful computations in a pipeline, such as sequencing stateful or reader-like operations across multiple stages.",
      "description_length": 403,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad3.Let_syntax",
      "library": "higher_kinded",
      "description": "This module enables monadic syntax for three-argument higher-kinded types, supporting `let%bind` and `let%map` expressions. It provides operations like `bind`, `map`, and `both` to compose effectful functions that take three type parameters, maintaining type relationships across transformations. It is useful for sequencing asynchronous computations with shared environment and state, or combining parsers that operate on multiple input streams.",
      "description_length": 446,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness2.Let_syntax",
      "library": "higher_kinded",
      "description": "This module provides monadic `bind`, `map`, and `both` operations for higher-kinded types with two type parameters, enabling effectful computation sequencing and combination. It works with types like `Result` and `Option` wrapped in `Higher_kinded.t`, preserving type abstraction. Use it to write composable pipelines that handle effects such as error propagation or optional values in a type-safe manner.",
      "description_length": 405,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Sequence",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions to convert between standard Base.Sequence.t values and higher-kinded representations. It enables working with sequences in contexts that require higher-kinded type abstraction, such as generic programming or type class implementations. Use cases include abstracting over sequence-like structures in reusable code or interfacing with higher-kinded type libraries.",
      "description_length": 418,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Set",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions to work with higher-kinded sets, converting between standard sets and their higher-kinded representations. It operates on data types involving `Base.Set.t` and functions that produce higher-kinded types. Concrete use cases include transforming set operations to work with abstracted type constructors in a type-safe manner.",
      "description_length": 379,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make8",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between a polymorphic higher-kinded type and a concrete 8-argument type constructor from module `X`. It works with arbitrary 8-argument type forms, enabling abstraction and re-instantiation of complex type structures. Use it to write generic code handling types like `('a, 't, 'u, 'v, 'w, 'x, 'y, 'z) X.t` without fixing their parameters.",
      "description_length": 403,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness2",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for higher-kinded types with two type parameters, using the `Higher_kinded.t` abstraction. It provides functions like `bind`, `map`, `return`, and operators `(>>=)` and `(>>|)` to sequence and transform effectful computations, specifically supporting types like `Result` and `Option` wrapped in `Higher_kinded.t`. Use it to build composable pipelines that handle effects such as error handling or optional values while maintaining type safety and abstraction boundaries.",
      "description_length": 512,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Hashtbl",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions to work with `Base.Hashtbl.t` values in the context of higher-kinded types. It allows converting between a standard hash table and a higher-kinded representation by applying functions to keys and values. Concrete use cases include abstracting over type constructors that wrap hash tables, enabling generic programming patterns that require higher-kinded polymorphism.",
      "description_length": 423,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness3",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for higher-kinded types with three type parameters, enabling sequencing and transformation of effectful computations. It works with values wrapped in `Higher_kinded.t` that take three type arguments, supporting operations like `bind`, `map`, `return`, and `all` for structured composition. Concrete use cases include managing stateful pipelines or reader-like contexts where computations must pass through multiple parameterized stages with consistent type alignment.",
      "description_length": 509,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.List",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions to treat standard lists as higher-kinded types. It works with `Base.List.t` and the `higher_kinded` type defined in the parent module. Use it to seamlessly convert between regular lists and their higher-kinded representations for use in type-level programming or abstraction-heavy libraries.",
      "description_length": 347,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Type_equal",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between type equalities and higher-kinded type representations. It works with `Base.Type_equal.t` and functions that produce `Higher_kinded.Type_equal.higher_kinded` values. Use it to bridge concrete type equalities with higher-kinded type manipulations, enabling precise type-level reasoning in generic higher-kinded contexts.",
      "description_length": 392,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for higher-kinded types, providing bind (`>>=`), map (`>>|`), `return`, `join`, and utilities like `all` and `ignore_m`. It works with functions wrapped in `Higher_kinded.t`, enabling composition of effectful computations such as asynchronous operations, error handling, or stateful transformations. Use cases include sequencing database calls with effects, validating data with context-dependent rules, and managing state transitions in parsers or interpreters.",
      "description_length": 504,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Result",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between standard `Base.Result.t` values and higher-kinded representations. It works with result types parameterized over success and error values, enabling their use in contexts requiring higher-kinded abstraction. Concrete use cases include writing generic error-handling logic that operates uniformly across different result-like structures.",
      "description_length": 408,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make2",
      "library": "higher_kinded",
      "description": "This module implements injection and projection operations between a higher-kinded type and a concrete type from module `X`. It supports transforming values wrapped in a higher-kinded structure using `inject`, and unwrapping them back with `project`. Useful for working with abstracted effect types or transformer stacks that require conversion to and from a specific monadic or applicative representation.",
      "description_length": 406,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Map",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between standard maps and higher-kinded representations. It works with three-argument functions and Base.Map values indexed by keys of type `'a`, values of type `'y`, and an additional parameter `'z`. Use it to adapt map-based data structures for use with higher-kinded type abstractions, enabling polymorphic manipulation of map-like containers across different value shapes.",
      "description_length": 441,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make6",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between a 6-argument function type wrapped in `Higher_kinded.t` and a corresponding type from the parameter module `X`. It works with higher-kinded type representations involving six type parameters. Use this to bridge between generic higher-kinded type manipulations and specific 6-argument type constructs from `X`.",
      "description_length": 382,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad3",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for three-argument higher-kinded types, enabling effectful function composition with type-preserving transformations. It provides bind (`>>=`), map (`>>|`), return, and utility functions like `all` and `ignore_m` to sequence and combine computations that share environment and state parameters. Concrete use cases include orchestrating asynchronous workflows with shared context or composing parsers that track multiple input streams.",
      "description_length": 476,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Queue",
      "library": "higher_kinded",
      "description": "This module provides operations for working with queues in a higher-kinded type context. It supports transforming and projecting standard Base.Queue values to and from the higher-kinded representation. Concrete use cases include abstracting queue manipulations in generic code that operates across different container types.",
      "description_length": 324,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make7",
      "library": "higher_kinded",
      "description": "This module implements injection and projection operations for a seven-argument higher-kinded type representation. It works with a higher-kinded type `higher_kinded` and a type constructor `X.t` that takes seven type parameters. Use this to bridge between a direct representation and a higher-kinded wrapper for seven-argument type constructors.",
      "description_length": 345,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make_monad2",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for higher-kinded type constructors with two parameters, supporting sequencing, mapping, and combination of effectful computations. It works with types that take an environment and produce a result, enabling concrete use cases like composing asynchronous workflows, managing state transitions, and handling errors across chained operations. Key functions include `bind`, `map`, `return`, and operators for monadic composition, alongside utilities for collecting results from lists of monadic actions.",
      "description_length": 542,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Ref",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between a `Base.Ref.t` and a higher-kinded type representation. It enables working with references in a context that requires higher-kinded polymorphism, allowing concrete manipulation of reference values through the `higher_kinded` type. Use this when abstracting over type constructors that involve references, such as building generic libraries that handle mutable state in a polymorphic way.",
      "description_length": 460,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make3",
      "library": "higher_kinded",
      "description": "This module implements higher-kinded type transformations for a three-argument type constructor. It provides `inject` and `project` functions to convert between a concrete type `('a, 'y, 'z) X.t` and a higher-kinded representation. Use this to abstract over type constructors with three parameters, enabling generic programming patterns across different data structures.",
      "description_length": 370,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make4",
      "library": "higher_kinded",
      "description": "This module transforms a four-argument type constructor from module `X` into a higher-kinded type representation. It provides `inject` to wrap `X.t` values in a higher-kinded structure and `project` to extract them. Use this when working with generic data structures that need to abstract over type constructors with four parameters.",
      "description_length": 333,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between a type `X.t` and a higher-kinded representation involving `Higher_kinded.t`. It works with polymorphic types where `X` is a module defining a type constructor `t`. Concrete use cases include embedding and extracting values from higher-kinded type wrappers, enabling abstraction over type constructors in OCaml.",
      "description_length": 383,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Array",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions to treat arrays as higher-kinded types, enabling their use in generic programming contexts that require higher-kinded polymorphism. It works directly with `Base.Array.t` and the `higher_kinded` type. Concrete use cases include abstracting over type constructors that take arguments, such as writing generic functions that operate uniformly over different container structures with array-based implementations.",
      "description_length": 465,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Make5",
      "library": "higher_kinded",
      "description": "This module implements higher-kinded type transformations for a 5-argument type constructor. It provides `inject` and `project` functions to convert between a concrete type and a higher-kinded representation, enabling abstraction over type parameters. Useful when building generic traversals or mappers that need to manipulate complex type structures while preserving their parameterization.",
      "description_length": 391,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Lazy",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between `Base.Lazy.t` and a higher-kinded representation. It works with lazy values wrapped in the `Higher_kinded.t` type, enabling manipulation of lazily computed values in a higher-kinded context. Concrete use cases include deferring computation while maintaining compatibility with higher-kinded type abstractions.",
      "description_length": 382,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Either",
      "library": "higher_kinded",
      "description": "This module provides injection and projection functions for working with `Base.Either.t` values in the context of higher-kinded types. It allows transforming between a standard Either type and a higher-kinded representation, enabling use in generic programming scenarios where type abstraction is required. Concrete use cases include writing polymorphic functions that operate over Either-like structures without being tied to their specific type parameters.",
      "description_length": 458,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Hash_set",
      "library": "higher_kinded",
      "description": "This module provides operations for working with hash sets in a higher-kinded type context. It supports injecting and projecting values between a polymorphic higher-kinded type and a concrete `Base.Hash_set.t`. Use this when abstracting over type constructors while maintaining hash set functionality, such as in generic algorithms that operate over extensible data structures.",
      "description_length": 377,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Higher_kinded.Make_monad_using_witness",
      "library": "higher_kinded",
      "description": "This module implements monadic operations for higher-kinded types by using injection and projection between two modules, `M` and `X`. It provides bind (`>>=`), map (`>>|`), return, and related combinators to sequence and transform computations that carry effects represented as higher-kinded types. Concrete use cases include composing asynchronous operations, handling optional values, or managing custom effect types in a structured, type-safe way.",
      "description_length": 450,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Ident",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to wrap and unwrap values of any type `'a` into a higher-kinded type `higher_kinded`. It enables working with abstracted type constructors in a type-safe way, specifically supporting the manipulation of identity-wrapped values in higher-kinded contexts. Use it when defining or using higher-kinded type abstractions that require concrete type injection and extraction.",
      "description_length": 422,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded.Option",
      "library": "higher_kinded",
      "description": "This module provides `inject` and `project` functions to convert between `Base.Option.t` and a higher-kinded representation of optional values. It works directly with `Base.Option.t` and the `higher_kinded` type, enabling manipulation of optional values in a higher-kinded context. Concrete use cases include lifting optional values into a higher-kinded monadic structure and extracting them back after computation.",
      "description_length": 415,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Higher_kinded",
      "library": "higher_kinded",
      "description": "This library enables abstraction over type constructors with 1 to 8 parameters through injection and projection functions, converting standard data structures like `Option`, `List`, `Result`, `Map`, and `Hash_table` into higher-kinded representations. It supports monadic utilities for effectful computations and generic programming, particularly useful for polymorphic manipulation of container-like structures or building reusable abstractions over monads, such as handling complex type transformations or composing effectful operations across diverse data types.",
      "description_length": 565,
      "index": 47,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 54,
    "meaningful_modules": 48,
    "filtered_empty_modules": 6,
    "retention_rate": 0.8888888888888888
  },
  "statistics": {
    "max_description_length": 565,
    "min_description_length": 316,
    "avg_description_length": 418.0416666666667,
    "embedding_file_size_mb": 0.6960830688476562
  }
}