{
  "package": "ppx_inline_test_nobase",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:09:02.560659",
  "modules": [
    {
      "module_path": "Ppx_inline_test_libname",
      "library": "ppx_inline_test_nobase.libname",
      "description": "This module provides a function `get` that retrieves the name of a library specified via the `-inline-test-lib` command line argument or through a ppxlib cookie. It works with string values representing library names and optional annotations. Use cases include configuring which library's inline tests should be executed during test runs in tools like `ppx_bench` and `ppx_inline_test`.",
      "description_length": 386,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Inline_test_config",
      "library": "ppx_inline_test_nobase.config",
      "description": "This module defines configuration options for executing inline tests, primarily through the `pre_test_hook` value, which specifies a function to run before each test. It works with unit tests embedded directly in source files, allowing setup actions like environment initialization. Concrete use cases include resetting state or logging test start events.",
      "description_length": 355,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_inline_test_lib",
      "library": "ppx_inline_test_nobase.runtime-lib",
      "description": "This module provides runtime support for inline tests, including flags to detect test execution context and functions to initialize the test runner with custom command-line arguments. It works with string lists and standard result types to configure test execution dynamically. Concrete use cases include embedding test configurations in libraries and distinguishing between test runner processes and child processes during test execution.",
      "description_length": 439,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search_pattern",
      "library": "ppx_inline_test_nobase.runtime-lib",
      "description": "This module implements substring search and replacement using the Knuth-Morris-Pratt algorithm. It supports case-sensitive or case-insensitive matching, finding first or all occurrences, and splitting or replacing based on precomputed patterns. Typical uses include text filtering, string transformation pipelines, and parsing structured input.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_inline_test",
      "library": "ppx_inline_test",
      "description": "Handles inline test expansion and validation during OCaml compilation. It defines policies for dropping tests based on command-line flags and validates test extension points against allowed tags and rewriters. Works with OCaml parsetree expressions and structures, enforcing test constraints at compile time.",
      "description_length": 308,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 439,
    "min_description_length": 308,
    "avg_description_length": 366.4,
    "embedding_file_size_mb": 0.0728464126586914
  }
}