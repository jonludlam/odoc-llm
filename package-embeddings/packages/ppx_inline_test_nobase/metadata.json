{
  "package": "ppx_inline_test_nobase",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:15.454276",
  "modules": [
    {
      "module_path": "ppx_inline_test_nobase",
      "description": "Provides functions to define and execute inline tests with reduced dependencies, replacing time-based assertions with mtime. Works with test cases structured as expressions and assertions. Used to simplify test execution in environments where external dependencies are restricted.",
      "description_length": 280,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_inline_test_lib",
      "description": "Provides functions to detect and configure inline test execution, including checking if the code is running under a test runner or its child processes, and initializing test configurations from argument lists. Works with boolean flags, string lists, and result types to manage test environments. Used to control test execution flow in dynamically loaded libraries and to handle command-line arguments for test runners.",
      "description_length": 418,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Inline_test_config",
      "description": "Provides a mechanism to execute a predefined function before each test run, ensuring consistent setup. Operates with unit-returning functions to integrate with test execution workflows. Used to initialize environment variables or mock dependencies prior to test execution.",
      "description_length": 272,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_inline_test_libname",
      "description": "Retrieves the name and optional override of a library specified via a command-line argument, used to dynamically load and test code during compilation. Operates on unit input and returns a tuple of strings representing the library identity. Enables integration of inline test execution with custom library configurations in ppx tools.",
      "description_length": 334,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_inline_test",
      "description": "Provides functions to control test expansion based on command line flags, validate ppx extension points, and process AST nodes. Works with ppxlib's location, expression, and structure types. Used to enforce test constraints during ppx rewriting and manage test inclusion/exclusion at compile time.",
      "description_length": 297,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search_pattern",
      "description": "Preprocesses a string into a pattern for efficient substring matching using KMP, enabling repeated searches without reprocessing. It supports case-sensitive or case-insensitive matching, returns match positions, and performs replacements and splits based on the pattern. Functions like `index_all` locate all non-overlapping occurrences, while `replace_all` substitutes every instance in a string.",
      "description_length": 397,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 6,
    "filtered_empty_modules": 2,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 418,
    "min_description_length": 272,
    "avg_description_length": 333.0,
    "embedding_file_size_mb": 0.022223472595214844
  }
}