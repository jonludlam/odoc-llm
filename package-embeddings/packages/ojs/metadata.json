{
  "package": "ojs",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:06:02.459298",
  "modules": [
    {
      "module_path": "Ojs.List",
      "library": "ojs",
      "description": "This module converts OCaml lists to and from JavaScript values using the provided element module `A`. It supports direct serialization and deserialization of list data structures through `t_to_js` and `t_of_js`. Use this module when passing list values between OCaml and JavaScript, such as handling array inputs or outputs in JS interop.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.Array",
      "library": "ojs",
      "description": "This module converts OCaml arrays to and from JavaScript values. It supports arrays of elements that are compatible with the bound JavaScript type. Useful for passing array data between OCaml and JavaScript in a type-safe way.",
      "description_length": 226,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.T",
      "library": "ojs",
      "description": "Handles conversion between OCaml and JavaScript values for a specific type. Provides functions to encode OCaml values into JavaScript-compatible representations and decode JavaScript values back into OCaml. Useful when passing data between OCaml and JavaScript in applications using the Ojs binding system.",
      "description_length": 306,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.Option",
      "library": "ojs",
      "description": "This module converts OCaml option values to and from JavaScript representations. It supports serialization and deserialization of optional data when interfacing with JavaScript, enabling safe handling of nullable or undefined values. Use it when passing optional parameters to JS functions or interpreting JS API responses that may omit fields.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.Bool",
      "library": "ojs",
      "description": "This module converts boolean values to and from JavaScript representations. It provides functions to wrap OCaml booleans into JavaScript values and unwrap JavaScript booleans into OCaml values. Use this module when passing boolean values between OCaml and JavaScript code.",
      "description_length": 272,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.String",
      "library": "ojs",
      "description": "This module provides direct conversions between OCaml strings and JavaScript string values. It includes functions to wrap OCaml strings into JavaScript values and unwrap JavaScript strings into OCaml strings. Useful when passing string data between OCaml and JavaScript in a Js_of_ocaml project.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.Int",
      "library": "ojs",
      "description": "This module converts integers to and from JavaScript values. It provides functions to explicitly cast integers to the JavaScript representation and vice versa. Use this when passing integer values between OCaml and JavaScript code.",
      "description_length": 231,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.Float",
      "library": "ojs",
      "description": "This module converts OCaml `float` values to and from JavaScript representations. It includes functions `t_to_js` and `t_of_js` for bidirectional conversion between OCaml floats and JS values. Use this module when passing float values between OCaml and JavaScript in a Js_of_ocaml project.",
      "description_length": 289,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs_exn",
      "library": "ojs",
      "description": "This module provides operations to access the name, message, and optional stack trace of JavaScript exceptions from OCaml. It works with the `t` type representing JS exceptions. Concrete use cases include logging detailed error information and handling JS-originated exceptions in OCaml code.",
      "description_length": 292,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs",
      "library": "ojs",
      "description": "This module enables seamless data conversion and interaction between OCaml and JavaScript, centered around an abstract type representing JS values. It supports bidirectional conversion of primitives like integers, floats, booleans, strings, and JS-specific optional values through dedicated submodules, allowing safe handling of `null` and `undefined`. Structured data such as lists and arrays are converted using element-specific modules, enabling type-safe passage of complex data between OCaml and JS. Use it to embed OCaml logic in web apps or interface with JS libraries, for example by converting OCaml lists to JS arrays, handling optional parameters in JS function calls, or decoding JS responses into OCaml types.",
      "description_length": 722,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 10,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9090909090909091
  },
  "statistics": {
    "max_description_length": 722,
    "min_description_length": 226,
    "avg_description_length": 331.5,
    "embedding_file_size_mb": 0.0367431640625
  }
}