{
  "package": "ojs",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:03:49.474254",
  "modules": [
    {
      "module_path": "Ojs.Array",
      "library": "ojs",
      "description": "Converts between OCaml arrays and JavaScript arrays. Uses the provided module `A` to handle element conversions. Useful for passing array data between OCaml and JavaScript in a type-safe way.",
      "description_length": 191,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.String",
      "library": "ojs",
      "description": "This module converts OCaml strings to JavaScript string values and vice versa. It provides functions to encode and decode string data for interoperability between OCaml and JavaScript. Use it when passing string values between OCaml code and JavaScript APIs through the Ojs module.",
      "description_length": 281,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.Int",
      "library": "ojs",
      "description": "This module converts integers to and from JavaScript representations. It provides `t_to_js` to wrap an OCaml integer as a JS value and `t_of_js` to extract an OCaml integer from a JS value. Use this module when passing integers between OCaml and JavaScript code.",
      "description_length": 262,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.Float",
      "library": "ojs",
      "description": "This module converts OCaml floats to and from JavaScript values. It provides functions to marshal floating-point numbers between the OCaml and JavaScript runtime environments. Use this module when passing float values to JavaScript APIs or handling numeric return values from JavaScript functions.",
      "description_length": 297,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.Bool",
      "library": "ojs",
      "description": "Converts between OCaml boolean values and their JavaScript representations. Works directly with `bool` and `Ojs.t` types. Useful when passing boolean values to JavaScript functions or interpreting JavaScript boolean returns in OCaml code.",
      "description_length": 238,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs.List",
      "library": "ojs",
      "description": "This module converts between OCaml lists and JavaScript arrays for a specific element type. It provides functions to serialize a list to a JavaScript value and deserialize a JavaScript array back to a list. Use this module when passing list data between OCaml and JavaScript in a type-safe way.",
      "description_length": 294,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs.Option",
      "library": "ojs",
      "description": "This module converts OCaml option values to and from JavaScript representations. It supports serialization and deserialization of optional data when interfacing with JavaScript, enabling safe handling of nullable or undefined values. Use it when passing optional parameters to JS functions or interpreting JS return values that may be absent.",
      "description_length": 342,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ojs_exn",
      "library": "ojs",
      "description": "This module provides operations to access the name, message, and optional stack trace of JavaScript exceptions from OCaml. It works with the `t` type representing JS exceptions. Concrete use cases include logging detailed error information and handling JS-originated exceptions in OCaml code.",
      "description_length": 292,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ojs",
      "library": "ojs",
      "description": "This module provides bidirectional conversion between OCaml and JavaScript values, supporting operations like encoding/decoding primitives (integers, strings, floats, booleans), collections (arrays, lists, options), and object manipulation (property access, method invocation). It operates on a unified JavaScript value representation (`Ojs.t`), enabling seamless interaction with JavaScript objects, arrays, and functions. Specific use cases include integrating OCaml with JavaScript libraries, handling JSON data, and working with web APIs or DOM elements in browser-based applications.",
      "description_length": 588,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 191,
    "avg_description_length": 309.44444444444446,
    "embedding_file_size_mb": 0.13076305389404297
  }
}