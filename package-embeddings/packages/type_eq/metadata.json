{
  "package": "type_eq",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:48:36.879537",
  "modules": [
    {
      "module_path": "Type_eq.Lift",
      "library": "type_eq",
      "description": "This module provides a single operation, `lift`, which takes a type equality proof between two types `'a` and `'b` and produces a type equality proof between `'a M.t` and `'b M.t`. It operates on type equality witnesses and lifted types using the parameter module `M`. A concrete use case is when transforming type equalities under a functor application, ensuring that equivalent types remain equivalent after being wrapped in a module's type constructor.",
      "description_length": 455,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Type_eq",
      "library": "type_eq",
      "description": "This module implements operations for working with type equality proofs, enabling coercion between equivalent types, commuting and composing equality witnesses, and comparing values across equal types. It manipulates type-level equalities represented as witnesses of type `('a, 'b) Type_eq.t`, supporting concrete use cases such as safely casting values between equivalent types, proving transitive chains of equalities, and comparing values under type equivalence. The `Lift` submodule extends these capabilities to higher-order types, enabling equality proofs for types wrapped in a module's type constructor.",
      "description_length": 611,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 611,
    "min_description_length": 455,
    "avg_description_length": 533.0,
    "embedding_file_size_mb": 0.02941608428955078
  }
}