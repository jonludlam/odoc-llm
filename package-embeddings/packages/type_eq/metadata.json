{
  "package": "type_eq",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:26.360315",
  "modules": [
    {
      "module_path": "Type_eq.Lift",
      "library": "type_eq",
      "description": "This module provides a single operation, `lift`, which takes a type equality proof between two types `'a` and `'b` and produces a type equality proof between `'a M.t` and `'b M.t`. It operates on type equality witnesses and module-provided data structures. A concrete use case is transporting values across type equalities when working with abstract data types wrapped in a module like `M`.",
      "description_length": 390,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Type_eq",
      "library": "type_eq",
      "description": "This module centers around the `Type_eq.t` GADT, which encodes proofs of type equality, and provides core operations to compose, commute, and apply these proofs to coerce values between provably equal types. It supports concrete tasks such as safely casting values in dependently typed scenarios or comparing structurally equivalent values across type boundaries. The `Lift` submodule extends these capabilities to structured types, allowing type equality proofs to be lifted through containers like lists, options, and pairs. For example, given a proof that `'a = 'b`, `Lift` enables constructing a proof that `'a list = 'b list`, facilitating safe transformations over complex data.",
      "description_length": 684,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 684,
    "min_description_length": 390,
    "avg_description_length": 537.0,
    "embedding_file_size_mb": 0.007681846618652344
  }
}