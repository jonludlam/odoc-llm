{
  "package": "tgls",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:33:07.103521",
  "modules": [
    {
      "module_path": "Tgl4.Gl",
      "description": "This module provides low-level OpenGL 4.x operations for managing GPU resources, including shader programs, buffers, framebuffers, and textures, with functions for binding, parameter configuration, data uploads, and rendering state control. It works with OpenGL object identifiers, bigarrays, enums, and numeric handles to facilitate direct GPU memory manipulation, texture management, and pipeline configuration. Use cases include real-time graphics rendering, shader program execution, texture mapping, and synchronization of GPU operations through features like framebuffer blitting, uniform value setting, and debug diagnostics.",
      "description_length": 632,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgl3.Gl",
      "description": "This module offers low-level OpenGL 3.x operations for managing GPU resources, configuring rendering states, and querying graphics pipeline data, including texture manipulation, shader program setup, and framebuffer management. It works with OpenGL enums, bigarrays, numeric identifiers, and GPU objects like textures, buffers, and shaders, enabling precise control over graphics pipelines and state transitions. Use cases include real-time rendering, shader data passing, texture compression, and debugging GPU state through detailed queries and configuration settings.",
      "description_length": 570,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgles3.Gl",
      "description": "The module offers low-level operations for managing GPU resources, including shaders, buffers, textures, and rendering state, alongside configuring graphics pipelines and querying GPU parameters. It works with numeric identifiers, bigarrays, OpenGL object types, and enums to handle tasks like shader compilation, buffer data manipulation, framebuffer management, and synchronization. Use cases include 3D graphics rendering, real-time visualization, and GPU resource optimization, with support for texture configuration, shader program setup, and hardware-specific state queries.",
      "description_length": 580,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgles2.Gl",
      "description": "The module offers low-level OpenGL ES 2 operations for managing rendering states, textures, buffers, and shaders, enabling direct GPU resource manipulation and pipeline configuration. It works with OpenGL enums, bigarrays, integer handles, and numeric values to handle tasks like shader compilation, texture parameter setup, and state queries. Specific use cases include configuring blending modes, managing vertex attributes, and optimizing rasterization settings for real-time graphics applications.",
      "description_length": 501,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "tgls",
      "description": "Provides functions for initializing OpenGL contexts, loading shader programs, and managing vertex buffer objects. Works with types such as shader programs, buffer identifiers, and OpenGL context handles. Used to create rendering pipelines and handle GPU data in graphics applications.",
      "description_length": 284,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgl4",
      "description": "Manages GPU resources with direct access to OpenGL 4.x objects like shaders, buffers, and textures, using identifiers, bigarrays, and enums for low-level control. Supports rendering pipelines through state configuration, data uploads, and synchronization mechanisms such as blitting and uniform updates. Operations include creating and binding GPU objects, uploading texture data, and configuring rendering states. Examples include rendering 3D scenes, applying texture maps, and debugging GPU execution via shader compilation checks.",
      "description_length": 534,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgl3",
      "description": "Manages GPU resources and rendering states with low-level OpenGL 3.x operations, supporting textures, buffers, shaders, and framebuffers. Provides direct access to OpenGL enums, bigarrays, and numeric identifiers for precise control over graphics pipelines. Enables real-time rendering, shader program configuration, and GPU state querying. Examples include setting up shader uniforms, binding textures, and managing framebuffer attachments.",
      "description_length": 441,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tgles3",
      "description": "Manages GPU resources and rendering pipelines using numeric IDs, bigarrays, and OpenGL types, enabling shader compilation, buffer manipulation, and texture configuration. Supports 3D rendering, real-time visualization, and state queries through low-level operations like framebuffer setup and synchronization. Operations include creating and linking shader programs, uploading vertex data, and configuring texture parameters. Examples include rendering 3D models, applying custom shaders, and optimizing GPU memory usage.",
      "description_length": 521,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tgles2",
      "description": "Provides low-level control over OpenGL ES 2 rendering by exposing enums, bigarrays, and integer handles to manage shaders, textures, buffers, and state configurations. It supports operations such as compiling shaders, setting texture parameters, and configuring blending modes for real-time graphics. Functions allow querying and modifying GPU state, handling vertex data, and optimizing rendering pipelines. Examples include setting up vertex attribute pointers, binding textures, and enabling depth testing.",
      "description_length": 509,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 284,
    "avg_description_length": 508.0,
    "embedding_file_size_mb": 0.03315258026123047
  }
}