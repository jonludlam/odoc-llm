{
  "package": "picos_io_cohttp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:33.706047",
  "modules": [
    {
      "module_path": "Picos_io_cohttp.Server.IO",
      "library": "picos_io_cohttp",
      "description": "This module provides low-level IO operations for handling HTTP connections, including reading from and writing to input/output channels with explicit control over buffering and connection state. It works with Cohttp request/response flows using file descriptors, string buffers, and monadic result types to sequence IO actions. Concrete use cases include implementing custom HTTP servers that parse request headers line-by-line, stream request bodies, and send formatted responses over Unix file descriptors.",
      "description_length": 508,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_cohttp.Client",
      "library": "picos_io_cohttp",
      "description": "This module provides functions for making HTTP requests, including `get`, `post`, `put`, `delete`, and `patch`, along with utilities like `call` and `map_context` for customizing and chaining operations. It works directly with HTTP methods, URIs, headers, and response bodies via `Cohttp.Body.t`. It is used to interact with HTTP services in a minimalistic Cohttp setup, suitable for lightweight clients or embedded systems needing precise control over HTTP interactions.",
      "description_length": 471,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_cohttp.Server",
      "library": "picos_io_cohttp",
      "description": "This module combines high-level request routing with low-level IO control to build custom HTTP servers. It provides functions for constructing responses with specific headers, status codes, and streaming bodies, while its child module enables direct manipulation of HTTP connections using file descriptors and buffered IO. You can define callbacks to handle incoming requests and use monadic IO actions to manage connection state and stream data efficiently. Examples include parsing headers line-by-line, streaming large request bodies, and sending formatted responses over Unix sockets.",
      "description_length": 588,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_io_cohttp",
      "library": "picos_io_cohttp",
      "description": "This module enables both client and server-side HTTP communication using Cohttp, with lightweight, customizable primitives for precise control over requests and responses. It supports common HTTP methods like `get`, `post`, and `delete` on the client side, and request routing, response construction, and low-level connection handling on the server side. Key data types include `Cohttp.Body.t` for managing payloads, and functions like `call` and `map_context` for composing operations. You can build minimal HTTP clients, handle streaming request bodies, or implement custom servers that process headers and stream responses over Unix sockets.",
      "description_length": 644,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 644,
    "min_description_length": 471,
    "avg_description_length": 552.75,
    "embedding_file_size_mb": 0.014944076538085938
  }
}