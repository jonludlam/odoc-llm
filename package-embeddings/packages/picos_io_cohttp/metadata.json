{
  "package": "picos_io_cohttp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:53:43.735020",
  "modules": [
    {
      "module_path": "Picos_io_cohttp.Server.IO",
      "library": "picos_io_cohttp",
      "description": "This module implements a monadic IO interface for handling HTTP server connections using low-level input and output channels. It provides functions for reading lines and binary data from input channels, writing and flushing data to output channels, and managing buffer operations with direct control over file descriptors. Concrete use cases include parsing HTTP request headers line-by-line, streaming request bodies, and sending structured HTTP responses over network connections.",
      "description_length": 482,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_cohttp.Server",
      "library": "picos_io_cohttp",
      "description": "This module implements HTTP server functionality using low-level IO operations, handling request parsing, response construction, and connection management. It works with HTTP requests and responses, Cohttp connection types, and custom IO channels for reading and writing data. Concrete use cases include building custom HTTP servers that process request bodies, generate responses with correct headers and status codes, and manage streaming or chunked data directly over network connections.",
      "description_length": 491,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_io_cohttp.Client",
      "library": "picos_io_cohttp",
      "description": "This module provides functions for making HTTP requests and handling responses in a Cohttp-compatible format. It supports operations like `get`, `post`, `put`, `delete`, and `patch` with optional headers, body, and chunked transfer encoding, working directly with `Uri.t`, `Http.Header.t`, and `Cohttp.Body.t` types. Concrete use cases include interacting with REST APIs, sending and receiving HTTP payloads, and managing request/response workflows in networked applications.",
      "description_length": 475,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_cohttp",
      "library": "picos_io_cohttp",
      "description": "This module implements a minimal HTTP client and server using Cohttp with Picos_io, providing direct access to HTTP request/response handling and connection management. It works with standard Cohttp types like `Uri.t`, `Http.Header.t`, and `Cohttp.Body.t`, along with custom IO channels for network communication. Concrete use cases include building lightweight HTTP servers that process incoming requests and developing clients that interact with RESTful services over HTTP.",
      "description_length": 475,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 491,
    "min_description_length": 475,
    "avg_description_length": 480.75,
    "embedding_file_size_mb": 0.05838489532470703
  }
}