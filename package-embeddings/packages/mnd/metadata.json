{
  "package": "mnd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:32:43.252081",
  "modules": [
    {
      "module_path": "Mnd.Instances.Option",
      "description": "Provides operations to handle optional values, including lifting functions into the option monad, sequencing computations, and transforming lists with monadic effects. Works with the option type, allowing safe propagation of absence of values through chains of operations. Enables conditional execution, list transformations, and sequential composition of monadic actions that may fail.",
      "description_length": 386,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mnd.Instances.Result",
      "description": "Provides operations to chain computations that may fail, transform successful values, and combine results. Works with the `('a, 'b) t` type, representing either a success value of type 'a or a failure of type 'b. Enables sequential execution of I/O operations, error propagation in parsing, and combining multiple result-bearing computations.",
      "description_length": 342,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd.Instances.State",
      "description": "Provides monadic operations for sequencing computations that carry a state of type 'b, including binding, mapping, and state manipulation. Works with stateful computations represented as functions from 'b to ('b * 'a), enabling transformations and chaining of stateful actions. Used to manage and propagate state through a series of operations, such as updating a configuration or tracking progress in a computation.",
      "description_length": 416,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd.Instances.Reader",
      "description": "Provides operations to sequence computations that carry a shared environment, including mapping, binding, and chaining actions. Works with the function type ('a, 'b) t, which represents a computation that produces a value of type 'a while consuming an environment of type 'b. Executes environment-aware workflows such as processing a list of inputs with a shared context or conditionally executing actions based on a boolean.",
      "description_length": 425,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mnd.Instances.Writer",
      "description": "Provides operations to combine values of type t using monoidal composition, with a neutral element for empty values. Works with structured data that supports associative combining, such as logs or accumulators. Used to concatenate logging contexts or aggregate results in a sequential processing pipeline.",
      "description_length": 305,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd.Make2",
      "description": "Provides operations to transform values within a context that may contain an error, including lifting values into this context, applying functions to the contained value, and chaining operations that produce new contexts. Works with a type parameterized by a success type and an error type, allowing for sequential computation while preserving error states. Used to handle optional or error-prone computations in a structured way, such as parsing input or processing data with potential failures.",
      "description_length": 496,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mnd.Make2WithProduct",
      "description": "Handles computations that may fail, supporting transformation, chaining, and combination of results. Operates on a monadic type that wraps a value or an error. Combines two computations to produce a tuple of their results while preserving any shared error.",
      "description_length": 256,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd.Make",
      "description": "Provides operations to construct and chain computations within a monadic context. Supports transforming values with `map`, sequencing actions with `bind`, and wrapping values with `return`. Works with parameterized types `'a t` to encapsulate computations that may involve side effects or asynchronous behavior.",
      "description_length": 311,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd.Instances",
      "description": "Provides operations for combining and initializing instances of a type `t`, including an empty value and a binary append operation. Works with any data structure that supports these monoidal operations. Used to merge configurations or accumulate results in a consistent manner.",
      "description_length": 277,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "mnd",
      "description": "Provides monadic binding (`>>=`), mapping (`mapM`), and syntax extensions for sequencing operations. Works with monadic types that have one or two type parameters. Enables cleaner handling of effectful computations and state transformations in a structured way.",
      "description_length": 261,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mnd",
      "description": "Provides monadic operations for sequencing computations that may fail, including binding, mapping, and folding over lists. Works with the `( 'a, 'b ) t` type, representing computations that yield a value of type `'a` or an error of type `'b`. Enables error-aware transformations, such as applying a function to a value within a context or executing a series of operations that accumulate errors.",
      "description_length": 395,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 496,
    "min_description_length": 256,
    "avg_description_length": 351.8181818181818,
    "embedding_file_size_mb": 0.040398597717285156
  }
}