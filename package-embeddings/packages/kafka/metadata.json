{
  "package": "kafka",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:58:06.256600",
  "modules": [
    {
      "module_path": "Kafka_helpers.Kafka_producer",
      "library": "kafka.helpers",
      "description": "This module provides functions to stream data to Kafka topics and handle push errors with strategies like retrying or raising exceptions. It works with Kafka producers, topics, partitions, and key-value pairs for message delivery. Concrete use cases include sending log events to a specific Kafka partition with custom producer configurations or publishing messages to topics while handling delivery failures.",
      "description_length": 409,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kafka_helpers.Kafka_consumer",
      "library": "kafka.helpers",
      "description": "This module provides functions to consume messages from Kafka partitions, topics, or queues, allowing stateful processing through a folding interface. It works with Kafka topics, partitions, messages, and offsets, supporting operations like consuming from specific partitions, tracking offsets, and handling consumer configuration. Concrete use cases include processing log streams, aggregating events from multiple partitions, and implementing stateful consumers that resume from saved offsets.",
      "description_length": 495,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kafka_helpers",
      "library": "kafka.helpers",
      "description": "This module contains two submodules for interacting with Kafka. `Kafka_consumer` offers stateful message consumption from topics or partitions using a fold-based interface, with support for offset tracking and custom consumer configurations, ideal for processing log streams or aggregating events. `Kafka_producer` handles publishing messages to Kafka topics, providing error handling strategies like retries and exception raising, suitable for reliably sending log events or messages with custom partitioning and producer settings.",
      "description_length": 532,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kafka.Metadata",
      "library": "kafka",
      "description": "This module retrieves and organizes metadata about Kafka topics, including their partition details. It works with Kafka topics and partitions, providing structured access to their configuration and state. Use this module to inspect topic layouts, check partition availability, or integrate topic metadata into monitoring and management tools.",
      "description_length": 342,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kafka",
      "library": "kafka",
      "description": "Handles message production to specific partitions, consumer operations for fetching messages and managing offsets, and metadata retrieval for inspecting topic and partition configurations. Operates on topics, partitions, queues, and messages, enabling monitoring, reliable message delivery, and event stream processing.",
      "description_length": 319,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 532,
    "min_description_length": 319,
    "avg_description_length": 419.4,
    "embedding_file_size_mb": 0.07280921936035156
  }
}