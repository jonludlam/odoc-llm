{
  "package": "text",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:08.234452",
  "modules": [
    {
      "module_path": "Encoding",
      "library": "text",
      "description": "This module handles character encoding conversion, decoding, and encoding operations. It works with strings, code points (integers), and stateful decoders and encoders tied to specific encodings. Use it to convert strings between encodings (e.g., UTF-8 to ISO-8859-1), incrementally decode bytes into code points, or encode code points into byte sequences with error handling.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text",
      "library": "text",
      "description": "This library handles Unicode text processing through operations like validation, case conversion, substring extraction, and character-level transformations, all working directly on UTF-8 encoded strings. It provides utilities for structured text traversal, filtering, and decomposition into lines or tokens, alongside precise character property checks and pointer-based navigation that respects Unicode scalar values. Such capabilities make it suitable for internationalized text analysis, log parsing, user input sanitization, and document formatting workflows where robust UTF-8 handling is critical.",
      "description_length": 602,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Encoding_bigarray",
      "library": "text.bigarray",
      "description": "This module provides `decode` and `encode` functions for converting between byte arrays and encoded values, operating directly on `byte_array`, which is a Bigarray of characters. It allows decoding from a specified range in the byte array using an `Encoding.decoder` and encoding into the byte array with an `Encoding.encoder`, returning the result along with the number of bytes processed. Concrete use cases include parsing and serializing binary data formats such as network protocols or file formats that require direct memory manipulation.",
      "description_length": 544,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 602,
    "min_description_length": 376,
    "avg_description_length": 507.3333333333333,
    "embedding_file_size_mb": 0.011313438415527344
  }
}