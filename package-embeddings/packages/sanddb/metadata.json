{
  "package": "sanddb",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:04:31.567262",
  "modules": [
    {
      "module_path": "Sanddb.Serializer",
      "library": "sanddb",
      "description": "This module defines interfaces for serializing and deserializing data in different formats, specifically supporting JSON and Biniou. It works with arbitrary data types, allowing conversion to and from strings or binary representations. Concrete use cases include persisting database records to disk or transmitting them over a network in a structured format.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sanddb.Record_id",
      "library": "sanddb",
      "description": "This module defines a type `t` for representing unique record identifiers in a database, along with functions to create, compare, and convert these IDs to and from strings and S-expressions. It includes operations for generating random IDs, checking equality, and producing string representations in upper or lower case. Concrete use cases include uniquely identifying database records, comparing and sorting record IDs, and serializing them for storage or transmission.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sanddb.Database",
      "library": "sanddb",
      "description": "This module defines the core type and internal structure of a database, including operations for initializing, querying, and modifying database instances. It works directly with the database type, which encapsulates storage and metadata configurations. Concrete use cases include setting up a new database with a specified schema, executing schema-aware queries, and managing internal state during transaction processing.",
      "description_length": 421,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sanddb",
      "library": "sanddb",
      "description": "This module implements a persistent, schema-aware database system with support for record versioning and visibility control. It provides operations to create databases in JSON or Biniou format, insert records with automatic or explicit IDs, and retrieve all or only visible records with ordering guarantees. The module works with structured data types that can be serialized, supporting concrete use cases such as lightweight data storage for applications, audit logging with record history, and versioned configuration management.",
      "description_length": 531,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 358,
    "avg_description_length": 445.0,
    "embedding_file_size_mb": 0.058348655700683594
  }
}