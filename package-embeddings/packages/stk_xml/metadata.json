{
  "package": "stk_xml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 20,
  "creation_timestamp": "2025-08-15T12:10:06.990336",
  "modules": [
    {
      "module_path": "Stk_xml.Xml.Of_xtmpl",
      "library": "stk_xml",
      "description": "This module converts Xtmpl.Xml documents into fully namespace-qualified XML structures by mapping names, attributes, processing instructions, and trees. It operates on data types such as `X.tree`, `X.doc`, and associated prolog and attribute types, producing corresponding values in the `Stk_xml.Xml` structure. Concrete use cases include transforming raw XML parse trees into normalized, namespace-resolved XML documents suitable for further processing or serialization.",
      "description_length": 471,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.QName",
      "library": "stk_xml",
      "description": "This module represents XML qualified names as pairs of a namespace IRI and a local name string. It provides comparison, string conversion, and pretty-printing operations for these qualified names. Useful for handling XML elements and attributes that require namespace resolution and display.",
      "description_length": 291,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.P",
      "library": "stk_xml",
      "description": "This module defines and manipulates XML attribute values with location tracking, supporting comparison and pretty-printing operations. It works with attribute keys and values, including optional values with source location information. Concrete use cases include printing XML attributes with proper escaping and comparing attribute names and values during XML processing tasks.",
      "description_length": 377,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Types.PIri",
      "library": "stk_xml",
      "description": "This module defines operations for handling IRIs (Internationalized Resource Identifiers) within an XML context, including comparison, conversion to and from property values, and property creation with optional transition functions. It works primarily with the `t` type, which represents IRI values, and integrates with property systems supporting default values, inheritance, and transition logic. Concrete use cases include managing namespace declarations, resolving relative IRIs in XML documents, and animating IRI-based properties over time.",
      "description_length": 546,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Types.TIri",
      "library": "stk_xml",
      "description": "This module defines a type alias `t` for `Iri.t` and includes a comparison function for ordering IRI values. It also provides a wrapper for `Iri.t` and a transition value that may carry additional context. It is used to represent and manipulate Internationalized Resource Identifiers (IRIs) within XML processing workflows.",
      "description_length": 323,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.PXml",
      "library": "stk_xml",
      "description": "Handles XML document manipulation with functions to convert between XML and property values, compare documents, and apply property transitions. Works with XML documents represented as `Stk_xml.Xml.doc` and integrates with property systems via `Stk.Props`. Useful for serializing and deserializing XML data in property-based systems or comparing structured XML content directly.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Doc.TI",
      "library": "stk_xml",
      "description": "This module builds a text index for XML view documents, enabling efficient text-based searches through their node trees. It constructs a hierarchical tree structure that maps text content to XML nodes, tracking positions and lengths for substring queries. Use it to implement search features in XML viewers where text matches need to locate corresponding document nodes.",
      "description_length": 370,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.Log",
      "library": "stk_xml",
      "description": "This module provides direct logging functions for emitting messages at various severity levels, including specialized loggers for application, error, warning, info, and debug messages. It supports logging structured data using the `Logs` module's logging infrastructure, with functions that accept format strings and custom output handlers. The module is useful for integrating structured XML-related diagnostics into applications, such as logging parsing errors, transformation steps, or validation results with contextual tags and formatting.",
      "description_length": 544,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.TXml",
      "library": "stk_xml",
      "description": "Handles XML document parsing, manipulation, and serialization with typed representations. Provides functions to traverse, query, and modify XML nodes using a structured type `t` representing XML documents. Useful for processing configuration files, generating XML-based reports, or transforming XML data between formats.",
      "description_length": 320,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Style.Log",
      "library": "stk_xml",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all tied to the \"stk_xml_style\" log source. It supports logging formatted messages and handling `result` values by logging and converting `Error` cases using functions like `on_error` and `on_error_msg`. These operations are useful for debugging and reporting issues specifically within XML styling logic, such as tracking style application failures or parsing errors.",
      "description_length": 501,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.View",
      "library": "stk_xml",
      "description": "This module implements an XML document viewer with support for CSS styling, resource loading, and event handling. It works with XML documents, IRIs, and widgets, allowing customization of node rendering and interaction through CSS selectors and user-defined handlers. Concrete use cases include displaying structured XML data with dynamic styling, embedding remote resources, and enabling user interactions on specific document nodes.",
      "description_length": 434,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Style",
      "library": "stk_xml",
      "description": "This module processes CSS styling for XML documents by parsing and applying CSS rules from embedded or linked stylesheets. It handles style sources like document `<style>` and `<link>` elements, converting CSS statements into structured rules for XML node styling. Use cases include applying default XHTML styles, resolving nested CSS rules, and logging style application errors during XML rendering.",
      "description_length": 400,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Eprops",
      "library": "stk_xml",
      "description": "This module defines CSS properties to associate Stk event handlers with XML nodes via CSS selectors. It provides functions to create event properties and generate CSS rules or statements that link handlers to events on specific XML elements. These features enable declarative event binding in XML-based views, where handlers are automatically connected to widgets during creation.",
      "description_length": 380,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Doc",
      "library": "stk_xml",
      "description": "This module manages hierarchical XML view documents with nodes that link XML elements to widgets and track layout properties. It supports operations to navigate node trees, retrieve widget and XML data, and build text indexes for efficient substring searches. Concrete uses include implementing searchable XML viewers and interactive editors where nodes map to UI components and XML content.",
      "description_length": 391,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Types",
      "library": "stk_xml",
      "description": "This module defines core data types and utility functions for handling XML-related operations, including position and location tracking, error handling, and IRI (Internationalized Resource Identifier) properties. It provides types like `pos`, `loc`, and `error`, along with functions for formatting, converting, and extending error messages, and managing IRI-based properties with support for transitions and inheritance. Concrete use cases include parsing XML documents with precise location information, implementing custom error reporting, and managing XML namespace declarations using IRI values.",
      "description_length": 600,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Xml",
      "library": "stk_xml",
      "description": "This library provides tools for constructing, modifying, and analyzing XML documents through operations like node creation, attribute manipulation, and structured value extraction. It works with XML trees, documents, and attributes, supporting namespaces, qualified names, and IRI-based URIs. Specific use cases include building XHTML structures, parsing MIME types, normalizing XML data, and extracting typed values from attributes using functions like `int_att` or `opt_att`.",
      "description_length": 477,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Log",
      "library": "stk_xml",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all of which format and emit log records. It works with standard data types like strings and formatted messages, and supports handling `result` values by logging on error conditions. Concrete use cases include emitting application logs, debugging information, and error traces with customizable levels and tags.",
      "description_length": 444,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Props",
      "library": "stk_xml",
      "description": "This module translates CSS styling information into OCaml values for UI layout and rendering, focusing on measurements, typography, and alignment. It processes CSS contexts and property declarations to generate Stk-specific representations like color values, font descriptors, and spacing dimensions (top/right/bottom/left). Typical applications include converting CSS length units to pixel values, parsing font families for text rendering, and mapping CSS box model properties to layout constraints in graphical interfaces.",
      "description_length": 524,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Layout",
      "library": "stk_xml",
      "description": "This module processes XML nodes into UI widgets, handling layout creation via functions like `build_text`, `build_image`, and `image`, which generate labels, images, and image widgets based on XML attributes. It supports layout composition using `pack`, `pack_break`, and `pack_space` to insert widgets, breaks, or spaces into flex containers. It works with XML nodes and context structures to manage widget placement and styling, specifically integrating with `Stk.Flex.flex` and `Stk.Table.table` widgets through CSS properties.",
      "description_length": 530,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml",
      "library": "stk_xml",
      "description": "This module provides XML document manipulation, styling, and rendering capabilities for building interactive XML-based user interfaces. It includes functions for parsing and constructing XML trees, applying CSS styles and layouts, and connecting XML nodes to UI widgets with event handling. Concrete uses include searchable XML viewers, styled document rendering, and interactive XML editors with dynamic layout and widget binding.",
      "description_length": 431,
      "index": 19,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 20,
    "filtered_empty_modules": 3,
    "retention_rate": 0.8695652173913043
  },
  "statistics": {
    "max_description_length": 600,
    "min_description_length": 291,
    "avg_description_length": 436.55,
    "embedding_file_size_mb": 0.29017162322998047
  }
}