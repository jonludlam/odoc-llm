{
  "package": "stk_xml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 21,
  "creation_timestamp": "2025-07-15T23:09:57.469064",
  "modules": [
    {
      "module_path": "Stk_xml.Xml.QName",
      "library": "stk_xml",
      "description": "This module represents XML qualified names as pairs of IRIs and strings. It provides comparison, string conversion, and pretty-printing operations for these names. Useful for handling namespaced XML elements and attributes in document processing.",
      "description_length": 246,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Types.PIri",
      "library": "stk_xml",
      "description": "This module defines operations for handling IRIs in XML contexts, including comparison, property conversion, and transition functions. It works with the `t` type, which represents IRIs, and supports constructing and manipulating properties with optional transitions and default values. Concrete use cases include managing XML namespace IRIs and handling property changes in XML document processing.",
      "description_length": 398,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.Attributes",
      "library": "stk_xml",
      "description": "This module provides ordered map operations for XML attributes with qualified names as keys, supporting additions, removals, merges, and predicate-driven transformations while preserving key order. It enables efficient querying, filtering, and bulk modifications through sequence conversions, catering to XML processing tasks requiring ordered attribute handling, such as merging document fragments or extracting metadata with positional dependencies.",
      "description_length": 451,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.TXml",
      "library": "stk_xml",
      "description": "Handles XML document parsing, manipulation, and serialization. Works directly with `Stk_xml.Xml.doc` type representing structured XML data. Useful for reading XML files, modifying node content, and generating XML output programmatically.",
      "description_length": 237,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Types.TIri",
      "library": "stk_xml",
      "description": "This module defines a type alias `t` for `Iri.t` and includes a comparison function for ordering IRI values. It also provides a wrapper for `Iri.t` and a placeholder transition value. It is used to represent and compare Internationalized Resource Identifiers in XML processing contexts.",
      "description_length": 286,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.PXml",
      "library": "stk_xml",
      "description": "Handles XML document manipulation with functions to convert between XML and property values, compare documents, and manage transitions and wrappers. Works with XML documents represented as `Stk_xml.Xml.doc` and integrates with property systems. Useful for serializing XML data into properties and managing document state transitions.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Style.Log",
      "library": "stk_xml",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all tied to the \"stk_xml_style\" log source. It supports logging operations on result values, specifically handling errors with customizable output formatting and error extraction. These functions work directly with `Logs.level`, `Logs.Tag.set`, and `result` types, enabling detailed diagnostic output and error handling in XML styling operations.",
      "description_length": 479,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.Log",
      "library": "stk_xml",
      "description": "This module provides functions for logging messages at various severity levels, handling and formatting result errors with customizable output. It works with `result` types and leverages the `Logs` library for structured logging. Concrete use cases include logging XML parsing errors, tracing execution flow, and handling malformed input with descriptive error messages.",
      "description_length": 370,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml.Of_xtmpl",
      "library": "stk_xml",
      "description": "Converts Xtmpl.Xml documents into fully qualified XML structures by applying namespace mappings. It transforms names, attributes, processing instructions, and document trees while resolving namespace prefixes using provided IRI mappings. This module is used to generate valid XML documents with properly qualified names from Xtmpl structures.",
      "description_length": 342,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Doc.TI",
      "library": "stk_xml",
      "description": "This module builds a text index for XML view documents, enabling efficient text-based searches through their node trees. It constructs a hierarchical tree structure that maps text content to XML nodes, tracking positions and lengths for substring queries. Use it to implement search features in XML editors or viewers where users locate content by keyword or phrase.",
      "description_length": 366,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Xml.P",
      "library": "stk_xml",
      "description": "This module defines core XML-related data types and comparison functions for attribute values and document elements. It provides utilities for printing attribute values with escaping, custom attribute printing, and comparing XML names and attribute values. Concrete use cases include serializing XML attributes with proper escaping, comparing XML node names for ordering, and handling optional attribute values with location information.",
      "description_length": 437,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Log",
      "library": "stk_xml",
      "description": "This module creates and manages logging sources with specific severity levels, handling both formatted messages and error results. It works with `Logs.level`, `Logs.Tag.set`, and `result` types, providing functions to log messages, handle errors with custom formatting, and set logging thresholds. Concrete use cases include logging application events at various levels, handling and logging result errors, and dynamically controlling log verbosity.",
      "description_length": 449,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Props",
      "library": "stk_xml",
      "description": "This module converts CSS style properties into typed OCaml values for UI styling, focusing on layout metrics, text alignment, and visual attributes. It operates on CSS property maps (`Css.C.t`) to extract and transform values like lengths, colors, borders, and font descriptions into toolkit-specific property types. Its primary use case involves applying CSS-driven styling rules to UI components in a type-safe manner during element configuration.",
      "description_length": 449,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Style",
      "library": "stk_xml",
      "description": "This module manages CSS styling for XML documents by compiling and applying style rules from document nodes or predefined CSS statements, integrating seamlessly with XHTML elements. It includes operations to extract style sources, apply default styling, and manipulate cascading rules within XML structures. The logging submodule supports detailed diagnostics with severity-tagged message output, handling errors and results with customizable formatting. Together, they enable precise control over XML styling workflows, from rule compilation to error reporting in document styling operations.",
      "description_length": 593,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Eprops",
      "library": "stk_xml",
      "description": "This module defines CSS properties to associate Stk event handlers with XML nodes via CSS selectors. It supports creating event properties, rules, and statements that link handlers to events on specific XML elements. Use cases include declarative event binding in XML-based UIs, such as attaching click handlers to buttons defined in XML through corresponding CSS event rules.",
      "description_length": 376,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stk_xml.Types",
      "library": "stk_xml",
      "description": "This module provides core types and utilities for XML parsing, including position and location tracking, error handling with customizable messages, and property management for IRI values. It supports operations to format and convert locations, manage asynchronous resource loading, and handle property transitions and inheritance. The `Iri` submodule defines IRI comparison, construction, and transition functions, while the `t` type alias in the second submodule enables ordered IRI comparisons in XML contexts. Examples include tracking node positions during parsing, managing namespace IRIs, and reporting errors with contextual formatting.",
      "description_length": 643,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.View",
      "library": "stk_xml",
      "description": "This module implements an XML document viewer with support for CSS styling, resource loading, and event handling. It works with XML documents, IRIs, and widgets, allowing customization of node rendering and interaction through CSS selectors and user-defined handlers. Concrete use cases include displaying structured XML data with dynamic styling, embedding remote resources, and enabling user interactions on specific document nodes.",
      "description_length": 434,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Doc",
      "library": "stk_xml",
      "description": "This module manages hierarchical XML view documents composed of nodes linked to XML trees, widgets, and properties, supporting navigation and queries by ID, tag, or custom predicates. It enables operations such as retrieving widgets, geometry, or text content, and locating nodes within the document structure. The text index submodule builds hierarchical tree structures that map text content to nodes, allowing efficient substring and keyword searches. Together, they support rendering XML-based UIs, implementing interactive views, and enabling search or layout logic based on document structure and widget properties.",
      "description_length": 621,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Layout",
      "library": "stk_xml",
      "description": "This module processes XML nodes into UI widgets, handling layout creation with functions like `pack`, `build_text`, and `build_image`. It works with XML nodes and widget containers such as `Stk.Flex.flex` and `Stk.Table.table`, applying CSS styles and inserting elements like breaks or spaces. Concrete use cases include rendering structured XML content into interactive UIs by mapping nodes to visual components and managing layout flow.",
      "description_length": 438,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml.Xml",
      "library": "stk_xml",
      "description": "This module builds and manipulates XML trees with support for nodes, attributes, namespaces, and metadata, using structured types like `QName` and `Iri.t`. It enables document construction, attribute mapping, value extraction, and serialization, with direct handling of processing instructions, doctypes, and XHTML normalization. Child modules refine this functionality with ordered attribute maps, namespace resolution, document comparison, property conversion, and structured logging for XML processing tasks. Examples include parsing and rewriting XML files, merging document fragments with ordered attributes, logging parsing errors, and generating fully qualified XML from Xtmpl structures.",
      "description_length": 695,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stk_xml",
      "library": "stk_xml",
      "description": "This module processes XML documents with integrated CSS styling and event handling, supporting structured parsing, layout rendering, and interactive UI components. It defines core types for XML nodes, IRIs, and CSS properties, enabling operations like document construction, namespace resolution, style application, and event binding through CSS selectors. Logging facilities provide severity-based diagnostics for parsing and styling workflows, while layout modules convert XML structures into visual elements with typed style attributes. Examples include rendering XHTML with dynamic styling, attaching event handlers to XML nodes, and building searchable, interactive XML views with custom widgets and layout rules.",
      "description_length": 718,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 21,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9130434782608695
  },
  "statistics": {
    "max_description_length": 718,
    "min_description_length": 237,
    "avg_description_length": 445.76190476190476,
    "embedding_file_size_mb": 0.07676506042480469
  }
}