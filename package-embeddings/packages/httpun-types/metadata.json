{
  "package": "httpun-types",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:57:38.067617",
  "modules": [
    {
      "module_path": "Httpun_types.Status",
      "library": "httpun-types",
      "description": "This module defines polymorphic variant types for HTTP status codes, grouped into standard classifications like informational, successful, redirection, client error, and server error. It provides functions to convert status codes to and from integer representations, retrieve default reason phrases, and check the classification of a status code. Concrete use cases include validating HTTP response status codes, generating appropriate response messages, and handling different classes of HTTP errors in a type-safe manner.",
      "description_length": 523,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_types.Method",
      "library": "httpun-types",
      "description": "This module defines HTTP request methods and operations to classify their properties, such as safety, cacheability, and idempotence. It works with the `standard` and `t` types, where `standard` represents common HTTP methods like `GET`, `POST`, and `PUT`, and `t` extends these with support for custom methods via `Other`. Concrete use cases include validating HTTP method semantics, determining caching behavior, and handling custom or non-standard request methods in HTTP servers or clients.",
      "description_length": 493,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_types.Headers",
      "library": "httpun-types",
      "description": "This module provides functions to manipulate, process, and serialize HTTP header fields, supporting operations like adding, replacing, or querying headers while handling both single and comma-separated multi-value fields. It works with a list-based structure that preserves header order and performs case-insensitive name comparisons, ensuring compatibility with HTTP standards. Typical use cases include constructing HTTP messages, handling multi-value headers like `Set-Cookie`, and serializing headers for network transmission.",
      "description_length": 530,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_types.IOVec",
      "library": "httpun-types",
      "description": "This module operates on IOVec.t structures, providing functions to measure their length, shift their contents by a specified offset, and format them for human-readable output. It supports efficient manipulation of vectorized I/O data, such as when handling partial reads or writes in network communication. Use cases include adjusting buffer positions after data transfer and logging buffer contents during debugging.",
      "description_length": 417,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_types.Version",
      "library": "httpun-types",
      "description": "This module defines a type `t` representing HTTP protocol versions with `major` and `minor` integer fields. It provides constants for common versions (`v1_0`, `v1_1`), conversion functions between strings and version values, and a comparison function for ordering versions. It is used to parse, represent, and compare HTTP version strings like \"1.1\" in network communication contexts.",
      "description_length": 384,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_types",
      "library": "httpun-types",
      "description": "This module contains submodules for handling HTTP-specific data types and operations. It supports parsing, representing, and manipulating HTTP headers, I/O vectors, request methods, status codes, and protocol versions. Each submodule targets concrete use cases such as constructing and serializing HTTP messages, validating method properties, handling version strings, and working with vectorized network buffers.",
      "description_length": 413,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 530,
    "min_description_length": 384,
    "avg_description_length": 460.0,
    "embedding_file_size_mb": 0.08734321594238281
  }
}