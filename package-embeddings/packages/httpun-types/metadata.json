{
  "package": "httpun-types",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:31:22.681668",
  "modules": [
    {
      "module_path": "Httpun_types.Headers",
      "description": "This module provides operations for managing HTTP header fields, including adding, removing, querying, and iterating over headers while preserving their order and handling case-insensitive name comparisons. It works with collections of headers represented as key-value pairs, where field names are case-insensitive and values may be combined into comma-separated lists when appropriate. Specific use cases include processing control headers like `Set-Cookie` or ensuring correct header ordering in proxy forwarding scenarios.",
      "description_length": 525,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_types.IOVec",
      "description": "Manages contiguous memory buffers for efficient I/O operations, supporting operations to calculate size, adjust offsets, and pretty-print buffer structures. Works with a type representing a sequence of memory chunks, enabling manipulation of data in a structured, non-copying manner. Used to handle network packet data and file I/O streams with minimal memory overhead.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_types.Method",
      "description": "Provides functions to determine if a request method is safe, cacheable, or idempotent, and to convert between string representations and internal types. Works with request method values defined by HTTP standards, including GET, POST, PUT, DELETE, and others. Used to enforce HTTP semantics in server logic, validate client requests, and manage caching behavior.",
      "description_length": 361,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_types.Status",
      "description": "Provides functions to convert between status codes and their integer representations, check status code categories, and retrieve standard reason phrases. Works with custom types representing HTTP status code classes and a unified status type. Used to validate, classify, and serialize HTTP response status codes in networked applications.",
      "description_length": 338,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_types.Version",
      "description": "Represents HTTP protocol versions with comparison, string conversion, and pretty-printing capabilities. Works with a custom type encapsulating version numbers like \"1.0\" and \"1.1\". Parses and formats version strings for use in HTTP message headers and protocol negotiation.",
      "description_length": 273,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "httpun-types",
      "description": "Provides HTTP request and response parsing, serialization, and handling using Angstrom and Faraday. Works with byte sequences, strings, and custom protocol structures. Used to build efficient HTTP servers and clients that process large volumes of data with minimal memory overhead.",
      "description_length": 281,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_types",
      "description": "Manages HTTP headers, buffers, request methods, status codes, and protocol versions with specialized data types and operations. Headers are stored as ordered key-value pairs with case-insensitive names, buffers handle memory efficiently through chunked structures, methods support semantic checks, status codes provide categorization and string conversion, and versions enable protocol-aware comparisons. Operations include header manipulation, buffer adjustment, method validation, status code classification, and version parsing. Examples include processing `Set-Cookie` headers, optimizing I/O with buffer offsets, validating `GET` requests, generating `200 OK` responses, and comparing HTTP/1.1 with HTTP/1.0.",
      "description_length": 713,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 713,
    "min_description_length": 273,
    "avg_description_length": 408.57142857142856,
    "embedding_file_size_mb": 0.025852203369140625
  }
}