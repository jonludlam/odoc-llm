{
  "package": "genprint",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:44.156227",
  "modules": [
    {
      "module_path": "Ppx_genprint",
      "library": "ppx_genprint",
      "description": "This module handles path manipulation, environment configuration, and expression transformation for code generation tasks. It provides functions to resolve file paths, set load paths, and modify expressions with location-aware operations, primarily working with strings, references, and Ppxlib types like expressions and structure items. Concrete use cases include preprocessing source files, generating print functions, and manipulating OCaml AST nodes during compilation.",
      "description_length": 473,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Genprint.LocalPrinter",
      "library": "genprint",
      "description": "This module manages custom type printers for OCaml values, allowing installation and removal of printers based on type paths. It works with type expressions, environments, and output values, converting typed values into formatted output representations. It is used to customize the printing of specific types during evaluation, such as in toplevel or debugging contexts.",
      "description_length": 370,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Genprint",
      "library": "genprint",
      "description": "This module enables customization and control over value printing, allowing users to set print depth, step limits, and formatter behavior. It supports operations on abstract types, environments, and outcome trees, including type unification and module debugging. The child module extends this by managing custom type printers, enabling installation and removal of type-specific formatters based on type paths. Together, they allow precise control over printed representations, such as customizing output in interactive environments or improving debug logs with tailored type displays.",
      "description_length": 584,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 370,
    "avg_description_length": 475.6666666666667,
    "embedding_file_size_mb": 0.011313438415527344
  }
}