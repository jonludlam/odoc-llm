{
  "package": "diffast-langs-cpp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 28,
  "creation_timestamp": "2025-07-15T23:14:13.693543",
  "modules": [
    {
      "module_path": "Mcpp.Cpp_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-cpp",
      "description": "This module specializes in structural code diffing through tree manipulation and edit script postprocessing, focusing on move detection, edit refinement, and mapping consistency checks. It operates on abstract syntax trees (ASTs) and associated data structures like edit scripts, node mappings, and move tables to enable precise analysis of code changes. Specific applications include eliminating invalid edits (e.g., crossing moves, odd relabels), generating synchronized edit scripts, and validating tree transformations in scenarios like version control systems or refactoring tools where accurate AST differencing is critical.",
      "description_length": 630,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mcpp.Cpp_change.F.CB",
      "library": "diffast-langs-cpp",
      "description": "This module provides functions to retrieve a label from an object and check if an object is marked as phantom. It operates on objects with a nested `data` field containing a `_label`. Useful for analyzing or transforming abstract syntax trees where nodes carry labels and phantom markers.",
      "description_length": 288,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mcpp.Cpp_lib.Change.CB",
      "library": "diffast-langs-cpp",
      "description": "This module provides functions to retrieve label information and check phantom status from objects with specific data structures. It operates on objects containing a `_label` field of type `Stdlib.Obj.t` and returns values of type `Label.t` or `bool`. Use cases include analyzing or transforming labeled data structures in code processing tasks.",
      "description_length": 345,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mcpp.Cpp_lib.Change.F",
      "library": "diffast-langs-cpp",
      "description": "This module provides operations to extract labels and check phantom status from objects with structured data fields. It works with objects that have a `data` method containing a `_label` field of type `Obj.t`. Use this to inspect or manipulate labeled data in object hierarchies, such as tracking metadata in abstract syntax trees or runtime objects.",
      "description_length": 350,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mcpp.Cpp_lib.Analyzing",
      "library": "diffast-langs-cpp",
      "description": "This module analyzes tree structures representing code, enabling comparison, pruning, and classification of nodes based on structural and metadata properties. It supports operations like isomorphic subtree detection, boundary node analysis, and mapping refinement across tree diffs, working with nodes that carry identifiers, source locations, and digests. The child module enhances these capabilities by refining edit scripts, detecting moves, and validating transformations to ensure consistency in AST differencing workflows. Example uses include identifying structural code changes across versions, filtering similar node pairs, and generating clean, actionable edit scripts for refactoring or version control systems.",
      "description_length": 722,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mcpp.Cpp_lib.Change",
      "library": "diffast-langs-cpp",
      "description": "This module represents and manipulates code changes in abstract syntax trees, focusing on diffing and transformation tasks for C++ preprocessing. It defines variant types for change categories like insertion and deletion, supports AST node comparison and subtree traversal, and manages edit operations for tasks like version tracking and patch generation. The first child module retrieves label information and checks phantom status from objects with a `_label` field of type `Stdlib.Obj.t`, returning `Label.t` or `bool` for labeled data analysis. The second module extracts labels and checks phantom status from objects with a `data` method containing a `_label` field, enabling metadata tracking in structured data and ASTs.",
      "description_length": 727,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mcpp.Cpp_change.F",
      "library": "diffast-langs-cpp",
      "description": "This module represents and manipulates AST changes using variants for deletions, insertions, and modifications, along with utilities to hash, convert, and build edit operations. It supports AST analysis and transformation through node property queries, tree traversal, grafting, and edit generation such as relabeling and reordering. A key data type is the AST node, enriched with labels and phantom markers via the child module, enabling precise tracking and application of code changes. For example, it can generate a triple representing a modified node, check if a node is a phantom, or compute edits between tree versions.",
      "description_length": 626,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mcpp.Cpp_change",
      "library": "diffast-langs-cpp",
      "description": "This module represents and manipulates AST changes using variants for deletions, insertions, and modifications, along with utilities to hash, convert, and build edit operations. It supports AST analysis and transformation through node property queries, tree traversal, grafting, and edit generation such as relabeling and reordering. A key data type is the AST node, enriched with labels and phantom markers, enabling precise tracking and application of code changes. For example, it can generate a triple representing a modified node, check if a node is a phantom, or compute edits between tree versions.",
      "description_length": 605,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mcpp.Cpp_lib",
      "library": "diffast-langs-cpp",
      "description": "This module processes tree comparisons and generates edits with customizable thresholds, managing mappings and resolving conflicts through detailed configuration. It works with tree structures carrying identifiers, source locations, and digests, supporting operations like isomorphic subtree detection, edit script refinement, and transformation validation. The module enables tasks such as identifying structural code changes, filtering similar node pairs, and generating clean edit scripts for refactoring or version control. It integrates label extraction and phantom status checks from objects with `_label` fields, enhancing metadata tracking in ASTs and structured data.",
      "description_length": 676,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mcpp",
      "library": "diffast-langs-cpp",
      "description": "This module analyzes and transforms tree structures by generating and refining edit operations based on structural and semantic differences. It uses enriched AST nodes with labels and phantom markers to precisely track and apply changes such as deletions, insertions, relabeling, and reordering. Key operations include comparing tree versions, detecting isomorphic subtrees, resolving conflicts, and producing clean edit scripts for refactoring or version control. For example, it can compute edits between two ASTs, validate transformations, or identify structural changes while filtering irrelevant node pairs.",
      "description_length": 612,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_lib_base.Fact.FB",
      "library": "diffast-langs-cpp.base",
      "description": "This module enables constructing typed nodes for code artifacts (projects, revisions, literals) in a fact graph using string-based identifiers, navigating C++ ASTs via label-driven traversal and metadata extraction (locations, annotations), and locating ancestor nodes in hierarchical object graphs through predicate-based searches. It operates on structured AST nodes with labeled fields, hierarchical data models with parent references, and typed triple-based representations for semantic analysis. These operations support use cases like codebase analysis, semantic graph construction, and context-aware C++ code transformations.",
      "description_length": 632,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_fact.F.FB",
      "library": "diffast-langs-cpp.base",
      "description": "This module provides utilities for constructing and manipulating abstract syntax tree (AST) nodes specific to C++ code analysis, including functions to create structured entities (projects, revisions, literals) and traverse hierarchical relationships (parent, children, siblings) while extracting metadata like source locations or annotations. It operates on `Diffast_core.Triple.node` objects and related types, enabling tasks such as AST navigation, code transformation, and hierarchical query resolution. Specific use cases include building intermediate representations of C++ codebases and implementing analysis passes that require contextual information from ancestor nodes.",
      "description_length": 679,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_unparsing.Fmtr",
      "library": "diffast-langs-cpp.base",
      "description": "This module provides direct access to a shared `Format.formatter` value for printing formatted output. It is used to configure or retrieve the destination and formatting settings for OCaml's pretty-printing functions. Concrete use cases include redirecting output to a file or buffer, customizing indentation, and controlling line breaks during code generation or logging.",
      "description_length": 372,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_tree.FB",
      "library": "diffast-langs-cpp.base",
      "description": "This module enables construction and manipulation of C++ abstract syntax trees through node creation functions for code entities, version control identifiers, literals, and resources, all structured within `Diffast_core.Triple`. It provides traversal capabilities to query node properties (e.g., parent, children, location) and navigate hierarchical relationships in labeled data structures. These operations support use cases like static code analysis, AST transformation, and dependency resolution by enabling precise navigation to semantically relevant ancestors or descendants.",
      "description_length": 581,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_lib_base.Tree",
      "library": "diffast-langs-cpp.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, supporting operations like node creation with annotations, ordinal tables, and optional original labels. It works with objects containing structured data such as `Label.t`, annotations, and XML nodes, and is used to build trees during parsing or transformation tasks. Concrete use cases include building ASTs from XML representations and managing node identity with UID generators during tree diffing.",
      "description_length": 470,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_fact.F",
      "library": "diffast-langs-cpp.base",
      "description": "This module enables pattern matching and traversal of C++ abstract syntax trees, identifying syntactic constructs such as control structures, expressions, and declarations while filtering nodes based on fact restrictions and relationships. It operates on `Diffast_core.Triple.node` and object-like structures with labeled fields, supporting fact extraction, conditional traversal, and structured data export. Child modules provide utilities to construct and manipulate AST nodes, traverse hierarchical relationships, and extract metadata such as source locations. Together, they enable tasks like analyzing `if` conditions, variable declarations, and expression operands, as well as building intermediate representations and performing context-aware code transformations.",
      "description_length": 771,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_label.T",
      "library": "diffast-langs-cpp.base",
      "description": "This module provides operations for manipulating and analyzing C++ labels (`type t`) and annotations, focusing on semantic classification, structural inspection, and AST-related metadata extraction. It supports predicates to distinguish syntactic roles (e.g., statements, expressions, declarations), transformations for anonymization or stripping identifiers, and utilities for serializing labels or resolving preprocessing artifacts like macros and include paths. These capabilities are tailored for C++ parsing, static analysis, and code transformation workflows requiring precise discrimination of AST nodes and label equivalence testing.",
      "description_length": 641,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_label.Annotation",
      "library": "diffast-langs-cpp.base",
      "description": "This module represents annotations for labels in C++ code, supporting three kinds of specifications: requirements, provisions, and type annotations. It provides functions to construct, combine, and convert these annotations into string representations. Use cases include tracking dependencies and type information for code generation or analysis tools.",
      "description_length": 352,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_tree.Tree",
      "library": "diffast-langs-cpp.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and optional identifiers. It supports creating internal and leaf nodes, comparing nodes by label, and extracting annotations or original labels from node data. Concrete use cases include building abstract syntax trees with metadata for code analysis or transformation tools.",
      "description_length": 356,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_unparsing.UPB",
      "library": "diffast-langs-cpp.base",
      "description": "This module provides low-level formatting operations for constructing C++ code through pretty-printing primitives, handling tasks like indentation, punctuation placement, and textual layout. It operates on a formatter state (`Fmtr`) and structured types such as `block_style` and `box` to manage code blocks, while offering functions to emit strings, numbers, identifiers, and symbols (e.g., brackets, semicolons) with support for optional or array-based values. It is particularly suited for code generation scenarios requiring precise control over syntax structure and whitespace alignment.",
      "description_length": 592,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_unparsing.Tree",
      "library": "diffast-langs-cpp.base",
      "description": "This module constructs and manipulates abstract syntax trees with labeled nodes and annotations, supporting operations like node creation, comparison, and annotation extraction. It works with tree structures built from node data, including labeled elements, annotations, and optional original labels. Concrete use cases include building ASTs for C++ code transformation, tracking node metadata during unparsing, and comparing tree nodes based on structural and semantic properties.",
      "description_length": 481,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_lib_base.Fact",
      "library": "diffast-langs-cpp.base",
      "description": "This module enables structured navigation and analysis of C++ abstract syntax trees through typed projections and predicates, operating on AST nodes such as function calls and control structures from the `Triple` module. It provides data types like declarations, expressions, and directives, along with operations for filtering, traversal, and fact serialization, supporting tasks like static analysis and code transformation. Child modules extend this functionality with label-driven navigation, ancestor lookup, and semantic graph construction using identifiers and metadata. Examples include extracting function call patterns, analyzing code structure across revisions, and building context-aware transformations based on typed node relationships.",
      "description_length": 750,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_fact",
      "library": "diffast-langs-cpp.base",
      "description": "This module facilitates analysis and transformation of C++ code by traversing and matching AST nodes based on syntactic and semantic criteria. It works with `Diffast_core.Triple.node` structures, allowing operations such as filtering nodes by type or relationship, extracting source locations, and inspecting control structures, expressions, and declarations. Specific capabilities include identifying `if` statement conditions, analyzing variable declarations, and transforming expressions based on context. It supports building custom analysis tools and refactoring passes over C++ source code.",
      "description_length": 596,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_lib_base",
      "library": "diffast-langs-cpp.base",
      "description": "This module provides tools for constructing and analyzing abstract syntax trees with richly annotated nodes, supporting operations like node creation, traversal, and transformation. It includes data types for structured node labels, annotations, and XML representations, along with typed projections for C++ AST elements such as expressions, declarations, and control structures. You can use it to build ASTs from XML, analyze function call patterns, perform static analysis across code revisions, or generate semantic graphs using node metadata and identifiers. Specific examples include tracking node identity during tree diffing, filtering AST nodes based on typed predicates, and constructing context-aware code transformations.",
      "description_length": 732,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base.Cpp_label",
      "library": "diffast-langs-cpp.base",
      "description": "This module classifies and transforms C++ AST nodes through label-based analysis, working with a variant type `t` that represents syntactic and semantic constructs such as declarations, expressions, and macros. It includes operations for macro parameter extraction, label anonymization, and annotation handling, enabling precise categorization of constructs like literals, scopes, and function-like macros. The first child module focuses on semantic classification, structural inspection, and metadata extraction for C++ labels, offering predicates, transformations, and utilities tailored for parsing and static analysis. The second child module handles label annotations, supporting requirements, provisions, and type annotations with functions for construction, combination, and string conversion, useful for dependency tracking and type-aware code generation.",
      "description_length": 863,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_tree",
      "library": "diffast-langs-cpp.base",
      "description": "This module transforms C++ abstract syntax trees into structured, analyzable tree representations, converting XML nodes and AST elements into labeled nodes with control flow connections and location tracking. It supports node creation, hierarchical traversal, and annotation extraction through labeled data structures that enable precise navigation of parent-child relationships and semantic querying. With operations for building, comparing, and annotating nodes, it facilitates static analysis, AST transformation, and version-aware code comparison. Submodules extend this functionality by providing detailed traversal mechanisms and node manipulation tools, supporting tasks like dependency resolution and metadata-driven transformations.",
      "description_length": 741,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpp_base.Cpp_unparsing",
      "library": "diffast-langs-cpp.base",
      "description": "This module converts abstract syntax trees into properly formatted C++ code, managing layout, spacing, and syntactic elements during output. It works with annotated tree structures, using formatting directives and child nodes to generate code that preserves structure and intent. The module supports operations like node creation and annotation handling, while integrating low-level formatting tools to control indentation, punctuation, and layout. Specific tasks include generating valid C++ from ASTs, inserting semicolons or colons as needed, and redirecting output to files or buffers with custom formatting settings.",
      "description_length": 621,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpp_base",
      "library": "diffast-langs-cpp.base",
      "description": "This module analyzes, transforms, and generates C++ code through abstract syntax tree manipulations, enabling syntactic and semantic operations such as node traversal, filtering, and annotation-based transformations. It centers around data types like `Diffast_core.Triple.node` and variant-based label classifications, supporting operations including source location extraction, control structure inspection, macro analysis, and formatting-aware code generation. You can use it to build static analysis tools, perform context-aware refactoring, track dependencies across code revisions, or generate valid C++ output from ASTs with precise layout control. Specific applications include extracting function call patterns, anonymizing macro parameters, comparing ASTs across versions, and transforming expressions based on semantic annotations.",
      "description_length": 841,
      "index": 27,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 63,
    "meaningful_modules": 28,
    "filtered_empty_modules": 35,
    "retention_rate": 0.4444444444444444
  },
  "statistics": {
    "max_description_length": 863,
    "min_description_length": 288,
    "avg_description_length": 594.7142857142857,
    "embedding_file_size_mb": 0.10215568542480469
  }
}