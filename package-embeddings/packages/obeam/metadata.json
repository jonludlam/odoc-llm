{
  "package": "obeam",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:07:23.447784",
  "modules": [
    {
      "module_path": "Obeam.Parser.Combinator",
      "library": "obeam",
      "description": "This module implements parser combinators for constructing complex parsers from simpler components, using result-typed functions that thread state and handle errors. It operates on input streams represented as tuples of state and remaining input, enabling operations like sequencing, repetition, mapping, and error handling. Concrete use cases include building custom text or binary format parsers with precise error tracking and stateful parsing logic.",
      "description_length": 453,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obeam.Aux.Z",
      "library": "obeam",
      "description": "This module offers arbitrary-precision integer arithmetic, bitwise manipulation, and number-theoretic operations on unbounded integers (`Z.t`), supporting conversions to/from native OCaml types, strings, and floating-point representations. It provides precise control over division semantics, modular arithmetic, prime operations, and bit-level transformations, with explicit handling of edge cases like division by zero and overflow. Designed for cryptographic protocols, mathematical research, and systems requiring exact arithmetic beyond 64-bit limits, it enables tasks like secure modular exponentiation, primality testing, and bitstring encoding/decoding.",
      "description_length": 661,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obeam.Aux",
      "library": "obeam",
      "description": "This module combines low-level byte buffer manipulation with high-precision numeric operations to handle binary data layout and exact arithmetic. It provides direct functions for alignment, padding, and size calculations using byte buffers and 32-bit integers, while its child module extends capabilities with arbitrary-precision integers (`Z.t`) for secure modular math, prime operations, and bit-level encoding. Together, they enable tasks like constructing binary file formats with precise alignment, parsing bit-packed data streams, and implementing cryptographic algorithms requiring exact integer behavior. Key data types include byte buffers with position tuples and unbounded integers, supporting operations from buffer resizing to modular exponentiation.",
      "description_length": 763,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obeam.Err",
      "library": "obeam",
      "description": "This module defines error handling constructs with support for backtrace recording and S-expression conversion. It provides functions to create, wrap, and annotate errors with source code positions, along with Sexp conversion utilities for structured error types. Concrete use cases include error propagation in compilers or interpreters and structured error reporting with location tracking.",
      "description_length": 392,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obeam.External_term_format",
      "library": "obeam",
      "description": "This module implements parsing and serialization of Erlang External Term Format (ETF), handling binary decoding and reconstruction of complex data structures. It supports operations to decompress ETF payloads, convert parsed terms to S-expressions, and map low-level bitstrings to structured types like integers, floats, atoms, tuples, and maps. Concrete use cases include decoding BEAM VM communication protocols, analyzing Erlang distribution packets, and implementing custom Erlang term serialization logic.",
      "description_length": 510,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obeam.Simple_term_format",
      "library": "obeam",
      "description": "This module defines a data type for representing Erlang terms in a simplified format, including integers, atoms, tuples, maps, strings, binaries, big integers, lists, and floats. It provides functions to convert these terms to S-expressions and to construct them from an external term format. Use this module when parsing or serializing Erlang terms for communication or storage.",
      "description_length": 379,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obeam.Parser",
      "library": "obeam",
      "description": "This module provides parser combinators that build complex parsers from simple functions, handling state and errors through result-typed operations. It processes input as state-input tuples, supporting sequencing, repetition, mapping, and error recovery. Users can define custom text or binary format parsers with fine-grained control over parsing logic and error reporting. For example, it can parse structured data formats like JSON or custom configuration files with detailed error messages on failure.",
      "description_length": 505,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obeam.Beam",
      "library": "obeam",
      "description": "This component provides low-level parsing operations for BEAM file format chunks, converting byte buffers and bitstring-encoded data into structured representations of atoms, code segments, function tables, and metadata. It operates on binary buffers using both direct byte manipulation and `Bitstring.t` abstractions to extract specialized chunk layouts like compressed integers, abstract syntax trees, and debug information. The parsers are designed for applications analyzing or transforming BEAM bytecode, such as disassemblers, static analyzers, or compiler backends targeting Erlang VMs.",
      "description_length": 593,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obeam",
      "library": "obeam",
      "description": "This collection combines binary data manipulation, error handling, and structured parsing to support the construction, analysis, and transformation of low-level data formats. It provides data types such as byte buffers, S-expressions, Erlang terms, and parser state, with operations spanning bit-level encoding, modular arithmetic, error annotation, and combinator-based parsing. Use it to decode BEAM files, implement custom serializers, parse ETF payloads with precise error tracking, or build domain-specific parsers for text or binary formats. Examples include extracting function metadata from Erlang VM bytecode, implementing cryptographic bitstrings, or building structured error reports in compiler pipelines.",
      "description_length": 717,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 763,
    "min_description_length": 379,
    "avg_description_length": 552.5555555555555,
    "embedding_file_size_mb": 0.033130645751953125
  }
}