{
  "package": "ez_search",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:07:04.210173",
  "modules": [
    {
      "module_path": "Ez_search.V1.EzSearch.TYPES",
      "library": "ez_search",
      "description": "This module defines core data types for representing files, occurrences, and search contexts in a full-text search system. It includes structured types for file metadata, occurrence positions, and surrounding line context during searches. These types enable precise tracking and retrieval of matches within a pre-built search database.",
      "description_length": 335,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.V1.EzSearch",
      "library": "ez_search",
      "description": "This module builds and queries full-text search databases using regex patterns. It supports indexing directories or custom file sets, then performing efficient searches across the indexed content with options for case sensitivity, parallelism, and result limits. Key data types include files, occurrences, and context metadata, enabling precise match tracking, line numbering, and surrounding text retrieval. Use cases include searching large codebases, log files, or document sets with structured output for tools like grep interfaces or IDE integrations.",
      "description_length": 556,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.Str",
      "library": "ez_search",
      "description": "This module provides functions for compiling regular expressions with case-sensitive and case-insensitive matching, performing substring searches in both directions, partial matches, and replacement",
      "description_length": 198,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.Version",
      "library": "ez_search",
      "description": "Stores and exposes version metadata including a version string, commit hash, and commit date. Works with string and option types to handle optional build information. Used to embed and retrieve version details in applications for debugging or release tracking.",
      "description_length": 260,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.V1",
      "library": "ez_search",
      "description": "This module builds and queries full-text search databases using regex patterns. It supports indexing directories or custom file sets and performing efficient searches with options for case sensitivity, parallelism, and result limits. Key data types include files, occurrences, and context metadata, enabling precise match tracking, line numbering, and surrounding text retrieval, ideal for searching large codebases, log files, or document sets with structured output for tools like grep interfaces or IDE integrations.",
      "description_length": 519,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.UseParmap",
      "library": "ez_search",
      "description": "This module provides parallel mapping operations over a collection using a specified number of cores. It supports retrieving the default number of cores and applying a function to each element in parallel, returning a list of results. It is useful for CPU-bound tasks like batch processing or data transformation across multiple cores.",
      "description_length": 335,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.ReStr",
      "library": "ez_search",
      "description": "This module provides operations for pattern-based text manipulation using regular expressions, enabling tasks like substring matching, capture group extraction, and substitution with templates or functions. It works with strings and compiled regular expressions (`regexp`), supporting both case-sensitive and case-insensitive operations, as well as splitting strings on delimiters or positional boundaries. Typical use cases include parsing structured text, transforming data formats, and extracting information from logs or documents.",
      "description_length": 535,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.Main",
      "library": "ez_search",
      "description": "This module implements a search utility that locates terms in a database using configurable options such as case sensitivity, regular expressions, and result limits. It operates on a database structure defined in `Ez_search.V1.EzSearch.TYPES` and interacts with file systems via paths like `home_dir` and `db_dir_default`. A concrete use case includes searching through structured data files for specific patterns or values, leveraging multi-core processing for performance.",
      "description_length": 474,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search",
      "library": "ez_search",
      "description": "This module implements full-text search capabilities over structured databases with support for regex patterns, case sensitivity, and parallel processing. It operates on file systems and custom data structures like indexed files, occurrences, and context metadata. Concrete use cases include searching large codebases, analyzing log files, and integrating with grep-like tools or IDEs for precise match tracking and result display.",
      "description_length": 431,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 556,
    "min_description_length": 198,
    "avg_description_length": 404.77777777777777,
    "embedding_file_size_mb": 0.13086414337158203
  }
}