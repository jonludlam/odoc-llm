{
  "package": "ez_search",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:30.709421",
  "modules": [
    {
      "module_path": "Ez_search.V1.EzSearch.TYPES",
      "library": "ez_search",
      "description": "This module defines core data types for representing files, occurrences, and search contexts in a full-text search system. It includes structured types for file metadata, occurrence positions, and surrounding line context during searches. These types support precise indexing and retrieval of matching text regions with contextual information.",
      "description_length": 343,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.V1.EzSearch",
      "library": "ez_search",
      "description": "This module implements full-text search with regexps across a set of files using an indexed database. It supports indexing directories or custom file sets, in-memory database loading with memory-mapped options, and efficient multi-core searching with context extraction. Core data types represent files, occurrences, and search contexts, enabling precise indexing and retrieval of matching text regions with surrounding line information. You can index files, count lines and characters, search with custom functions, retrieve file content and line numbers, and extract contextual lines around matches.",
      "description_length": 601,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.Version",
      "library": "ez_search",
      "description": "Stores and exposes version metadata including a version string, optional commit hash, and optional commit date. Works with string and option types to represent versioning information. Useful for embedding build-time details into applications for diagnostics or reporting.",
      "description_length": 271,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.ReStr",
      "library": "ez_search",
      "description": "This module provides operations for compiling and using regular expressions to perform case-sensitive or case-insensitive substring searches, replacements, and group extractions within strings. It supports splitting text using regex delimiters, extracting substrings relative to match positions, and substituting matches via templates or dynamic functions, with structured handling of delimiters and captured groups. These features are particularly useful for text parsing, log analysis, data sanitization, and string transformation workflows.",
      "description_length": 543,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.V1",
      "library": "ez_search",
      "description": "This module enables efficient full-text search across files using regexps, with support for indexing directories or custom file sets and memory-mapped database loading. It provides data types for representing files, occurrences, and search contexts, allowing precise retrieval of matching text regions along with surrounding line information. You can perform multi-core searches, extract contextual lines around matches, and apply custom functions to filter or process results. Example uses include building searchable document indexes, analyzing log files, and extracting structured data from text sources.",
      "description_length": 607,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_search.Str",
      "library": "ez_search",
      "description": "This module facilitates regular expression compilation, matching, and substitution with support for case-sensitive and case-insensitive patterns, tracking the last match globally to enable detailed result extraction (e.g., matched substrings, groups, positions). It operates on strings and regex patterns, offering operations like forward/backward search, dynamic replacement, and split/join utilities with configurable delimiter handling. Use cases include parsing structured text, transforming or validating string data, and extracting substrings based on complex patterns.",
      "description_length": 575,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.Main",
      "library": "ez_search",
      "description": "This module implements a search engine interface with functionality to locate terms in a database using exact, case-insensitive, or regex matching. It supports configuration of search depth, result count, verbosity, and parallel execution via core count. Typical use cases include querying structured data stores for specific entries based on textual patterns.",
      "description_length": 360,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search.UseParmap",
      "library": "ez_search",
      "description": "This module provides parallel mapping operations over a collection using a specified number of cores. It supports retrieving the default number of cores and applying a function to each element in parallel, returning a list of results. It is useful for CPU-bound tasks like processing large datasets or performing independent computations across multiple cores.",
      "description_length": 360,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ez_search",
      "library": "ez_search",
      "description": "This module suite offers a comprehensive toolkit for text processing and search operations, integrating version metadata handling, regular expression capabilities, and parallel processing. Core data types include version information, regex patterns, file and search contexts, and parallel computation structures, supporting operations like substring search, replacement, group extraction, full-text indexing, and multi-core search execution. Users can perform tasks such as embedding build-time version data, parsing and transforming log files, conducting efficient directory-wide searches with context, and parallelizing CPU-intensive string operations. Specific applications include building searchable document indexes, validating and sanitizing data, and extracting structured information from large text sources using customizable regex patterns and parallel execution.",
      "description_length": 874,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 874,
    "min_description_length": 271,
    "avg_description_length": 503.77777777777777,
    "embedding_file_size_mb": 0.033092498779296875
  }
}