{
  "package": "iomux",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:25.491998",
  "modules": [
    {
      "module_path": "Iomux.Util.Raw",
      "library": "iomux",
      "description": "Returns the maximum number of files that can be opened simultaneously on the system. Works directly with system resources and OS limits. Useful for configuring connection pools or file descriptors in high-performance network servers.",
      "description_length": 233,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iomux.Poll.Flags",
      "library": "iomux",
      "description": "This module represents and manipulates event flags for file descriptors used in the `poll(2)` system call. It provides constants for standard flags like `POLLIN`, `POLLOUT`, and `POLLERR`, along with operations to combine flags, check membership, and convert between integers and flag sets. It is used to specify and interpret event masks when monitoring file descriptors for I/O readiness.",
      "description_length": 390,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iomux.Poll",
      "library": "iomux",
      "description": "This module provides low-level event monitoring for file descriptors using the `poll(2)` and `ppoll(2)` system calls, allowing configuration of event masks, waiting for events, and retrieving ready file descriptors. It supports precise control over timeouts and signal masks, enabling efficient handling of multiple I/O sources in custom event loops and network servers. The event flags submodule defines constants like `POLLIN`, `POLLOUT`, and `POLLERR`, and provides operations to combine, test, and convert event masks. Together, they allow setting up monitored descriptors, waiting for specific I/O conditions, and processing triggered events with fine-grained control.",
      "description_length": 673,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iomux.Util",
      "library": "iomux",
      "description": "This module offers low-level utilities for managing file descriptors, including conversion between Unix.file_descr and integers, and retrieving system limits on open files. Its core operations enable precise control over system-level I/O resources, such as tuning connection pools or handling file descriptor limits in network servers. The child module provides direct access to system-imposed file limits, allowing applications to adapt resource usage based on available file descriptor capacity. Together, they support tasks like optimizing server concurrency and managing file resource allocation at the OS level.",
      "description_length": 616,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iomux",
      "library": "iomux",
      "description": "This module combines low-level I/O multiplexing and file descriptor management to enable efficient handling of multiple I/O sources in custom event loops and network servers. It provides event monitoring via `poll(2)` with configurable event masks like `POLLIN` and `POLLOUT`, along with utilities to convert and manage file descriptors and system limits. You can use it to wait for I/O readiness on multiple file descriptors with precise timeouts, or adjust server concurrency based on available file descriptor capacity. Examples include building scalable network servers that monitor many sockets or managing resource limits to prevent exhaustion.",
      "description_length": 650,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 673,
    "min_description_length": 233,
    "avg_description_length": 512.4,
    "embedding_file_size_mb": 0.018606185913085938
  }
}