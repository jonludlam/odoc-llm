{
  "package": "h1-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:48.723885",
  "modules": [
    {
      "module_path": "H1_lwt_unix.Server",
      "description": "Handles incoming TCP connections by initializing HTTP/1 server sessions, routing requests to a custom handler, supporting protocol upgrades, and managing errors during connection processing. Operates on Unix socket addresses, file descriptors, and HTTP/1 request structures. Used to build responsive web servers with custom routing and upgrade capabilities like WebSocket handshakes.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H1_lwt_unix.Client",
      "description": "Handles HTTP requests by establishing a connection, sending a request with a specified configuration, and processing responses through dedicated handlers. Operates with file descriptors, HTTP requests, and response bodies using Lwt for asynchronous I/O. Used to send authenticated API calls and stream data from web servers.",
      "description_length": 324,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "h1-lwt-unix",
      "description": "Provides HTTP request parsing, response serialization, and connection management using a state machine. Works with byte streams, headers, and request/response objects defined by the HTTP 1.1 specification. Used to build scalable web servers that handle GET and other HTTP methods with low memory overhead.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H1_lwt_unix",
      "description": "manages TCP connections and HTTP/1 communication, enabling the creation of web servers that handle requests, route them to custom handlers, and support protocol upgrades. It works with Unix socket addresses, file descriptors, and HTTP request structures, allowing for asynchronous processing of incoming and outgoing HTTP traffic. Operations include establishing connections, sending requests with custom configurations, and handling responses through asynchronous callbacks. Examples include building a WebSocket server, routing HTTP endpoints, and making authenticated API requests with streamed responses.",
      "description_length": 608,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 608,
    "min_description_length": 305,
    "avg_description_length": 405.0,
    "embedding_file_size_mb": 0.014942169189453125
  }
}