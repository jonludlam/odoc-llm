{
  "package": "accessor_core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 26,
  "creation_timestamp": "2025-07-15T23:11:28.852202",
  "modules": [
    {
      "module_path": "Accessor_core.Quickcheck.Generator",
      "library": "accessor_core",
      "description": "This module provides functions for building Quickcheck generators by mapping, iterating, summing, and reducing over data structures using accessors. It supports operations that apply generator functions to elements, optionally with indices, and combines results according to specified strategies (`Parallel` or `Sequential`). Concrete use cases include generating structured test data with constraints, validating properties over collections, and creating complex generator distributions by composing element-wise generators.",
      "description_length": 525,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Gc.Stat",
      "library": "accessor_core",
      "description": "This module provides direct access to individual fields of the `Core.Gc.Stat.t` type, enabling precise manipulation and extraction of garbage collection statistics such as memory allocation, collection counts, and heap usage. Each function corresponds to a specific metric like `minor_words`, `heap_words`, or `compactions`, supporting introspection and monitoring of runtime memory behavior. Concrete use cases include performance profiling, memory optimization, and tracking GC pressure in long-running applications.",
      "description_length": 518,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Time.Span",
      "library": "accessor_core",
      "description": "This module provides direct access to time spans in units like nanoseconds, microseconds, milliseconds, seconds, minutes, hours, and days. It works with `Core.Time_float.Span.t` values, converting them to and from float representations. Concrete use cases include extracting duration components for logging, scheduling, or precise time calculations.",
      "description_length": 349,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Time_ns.Span",
      "library": "accessor_core",
      "description": "This module provides direct access to time spans in units ranging from nanoseconds to days. It allows reading and modifying a span's duration through isomorphic conversions to float values. Concrete use cases include converting a span to seconds for logging, adjusting timeouts in milliseconds, or extracting day-level differences from a span.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Command.Param",
      "library": "accessor_core",
      "description": "This module provides operations for transforming and combining command parameters using accessors. It supports mapping, iterating, summing, counting, and reducing over values extracted via accessors, producing new command parameters. Concrete use cases include constructing command-line argument parsers that aggregate or filter values from multiple fields of a record or collection.",
      "description_length": 383,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Date",
      "library": "accessor_core",
      "description": "This module provides accessors for extracting and modifying the year, month, and day fields of a date value. It works directly with `Core.Date.t` values, using `Date.create_exn` internally to construct new dates when setting fields. Concrete use cases include safely accessing and updating individual components of a date in contexts like date formatting, validation, or transformation pipelines.",
      "description_length": 396,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Fdeque",
      "library": "accessor_core",
      "description": "This module provides operations for inspecting and transforming functional deques through element access, structural manipulation, and aggregation. It works with non-empty sequences and deques, supporting indexed/non-indexed mapping, reduction with custom combining functions, and side-effectful iteration while preserving immutability. These capabilities are particularly useful for processing hierarchical data structures where elements need to be accessed or transformed via getter-style accessors, or when combining values from deque-organized collections requires flexible accumulation strategies.",
      "description_length": 602,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Only_in_test",
      "library": "accessor_core",
      "description": "This module implements operations for mapping, iterating, summing, counting, and reducing over test-only data structures with support for parallel or sequential execution. It works with values wrapped in `Core.Only_in_test.t`, applying functions to extract, transform, and combine results within that context. Concrete use cases include aggregating test results, applying transformations to test data, and performing indexed computations in test environments.",
      "description_length": 459,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Percent",
      "library": "accessor_core",
      "description": "This module provides accessors to convert between percentages and various scaled numeric representations. It supports operations to view a percentage as a float, as a percentage value multiplied by 100, as basis points multiplied by 10,000, and as a custom scaled value. These functions are useful when interfacing with systems that expect numeric inputs in different scales, such as financial calculations or APIs requiring specific units.",
      "description_length": 440,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Gc",
      "library": "accessor_core",
      "description": "This module exposes detailed garbage collection metrics through functions that access specific fields of the GC statistics type. It allows reading and monitoring of memory-related values such as minor and major heap allocations, collection counts, and compaction data. These capabilities support performance analysis, memory tuning, and diagnosing GC pressure in applications. For example, one can track heap growth over time or measure the frequency of garbage collections during execution.",
      "description_length": 491,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Blang",
      "library": "accessor_core",
      "description": "This module implements operations for transforming, aggregating, and traversing data structures using Blang computations. It supports indexed and non-indexed mapping, filtering, summation, counting, and custom reductions, all of which can execute in parallel or sequentially. These functions are designed to work with any data structure that conforms to the accessor and subtyping interfaces, enabling precise and composable data manipulation workflows.",
      "description_length": 453,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Pid",
      "library": "accessor_core",
      "description": "This module provides an accessor to convert a process ID to its integer representation. It works with Core.Pid.t values, exposing the underlying int value. Useful when interfacing with low-level system calls or logging mechanisms that require numeric process identifiers.",
      "description_length": 271,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Byte_units",
      "library": "accessor_core",
      "description": "This module provides accessors for converting between byte units and numeric values, supporting operations like extracting or setting sizes in bytes, kilobytes, megabytes, and up to exabytes. It works directly with `Core.Byte_units.t` values and numeric types such as `int` and `float`. These accessors are used when precise size manipulation or inspection is required, such as reading or modifying storage capacities, memory sizes, or file sizes in specific units.",
      "description_length": 465,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Host_and_port",
      "library": "accessor_core",
      "description": "This module provides accessors for working with `Core.Host_and_port.t` values, allowing direct manipulation of the host and port fields. It includes `host` and `port` functions to get or set the respective components, and `tuple` to convert between a `Host_and_port.t` and a `(string * int)` pair. These operations are useful when integrating with network libraries or APIs that require host-port information in different formats.",
      "description_length": 430,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Quickcheck",
      "library": "accessor_core",
      "description": "This module enables the construction of complex Quickcheck generators through functional transformations on data structures, supporting element-wise operations with optional index tracking. It offers combinators for mapping, folding, and combining generators using parallel or sequential reduction strategies. Key data types include generator functions and strategies, while operations allow composing distributions, applying constraints, and generating structured test data. For example, it can generate lists of varying lengths with element dependencies or validate properties across nested collections.",
      "description_length": 605,
      "index": 14,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Accessor_core.Time_ns",
      "library": "accessor_core",
      "description": "This module decomposes timestamps into calendar components and time spans, enabling precise manipulation of dates, times, and durations in a specified timezone. It provides operations to extract date-time pairs, dates, or time-of-day components from a timestamp, and supports span conversions to units like seconds or milliseconds for logging and scheduling. The child module extends this by exposing span durations as numeric values, allowing arithmetic adjustments and unit conversions. Examples include formatting timestamps for logs, computing day-level differences between times, and tuning timeouts using millisecond precision.",
      "description_length": 633,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Nothing",
      "library": "accessor_core",
      "description": "This module provides a single value `unreachable` that represents an impossible operation, ensuring type safety by never producing a result. It works with the `Nothing` type, which signifies computations that cannot return. Use it to handle logically impossible branches in pattern matching or to mark functions that never return, such as fatal error handlers.",
      "description_length": 360,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Month",
      "library": "accessor_core",
      "description": "This module provides accessors for manipulating `Core.Month.t` values, including direct access to specific months (e.g., `jan`, `feb`, etc.) and a `shifted` function to access a month offset by a given number of months. It supports operations that require navigating or transforming month values in a type-safe manner. Concrete use cases include date calculations, calendar manipulations, and scheduling logic where precise month-level access and transformations are needed.",
      "description_length": 474,
      "index": 17,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Accessor_core.Day_of_week",
      "library": "accessor_core",
      "description": "This module provides accessor values for each day of the week (e.g., `sun`, `mon`, etc.), allowing direct manipulation and inspection of `Core.Day_of_week.t` values. Each accessor supports operations like setting or mapping over a specific day within a larger structure. Concrete use cases include adjusting weekly schedules, filtering events by specific days, or transforming recurring calendar data.",
      "description_length": 401,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.Time",
      "library": "accessor_core",
      "description": "This module offers functions to inspect and transform time values by extracting temporal components or converting them into spans relative to the epoch. It supports decomposing times into date and time-of-day elements using specified time zones, enabling localized time representation and timestamp serialization. The span submodule extends this functionality by breaking down durations into concrete units like seconds, minutes, and hours, facilitating precise time calculations and logging. Examples include converting a timestamp into a human-readable date string or extracting the number of days between two times.",
      "description_length": 618,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Unit_of_time",
      "library": "accessor_core",
      "description": "This module provides accessors for manipulating individual time units within a `Core.Unit_of_time.t` value, including nanoseconds, microseconds, milliseconds, seconds, minutes, hours, and days. Each accessor allows getting or setting the corresponding time unit component of a timestamp. Concrete use cases include adjusting specific parts of a time value, such as extracting the hour from a timestamp or adding a day to a given time.",
      "description_length": 434,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Map",
      "library": "accessor_core",
      "description": "This module facilitates key-based access, indexed traversal, and transformation of values within associative containers, supporting operations like element-wise modification, subrange iteration, and aggregation over sorted key-value pairs. It works with polymorphic map structures and their indexed variants, enabling use cases such as building maps from accessors with conflict resolution, computing derived metrics across subsets of keys, or maintaining invariants during bidirectional transformations between maps and optional values. Core patterns include nonempty map reduction, key set analysis, and isomorphism-preserving conversions.",
      "description_length": 641,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Fqueue",
      "library": "accessor_core",
      "description": "This module provides operations to access and transform elements in a functional queue, including mapping, iterating, summing, and reducing with support for indexed operations and parallel or sequential execution. It works directly with values of type `'a Core.Fqueue.t`, enabling precise manipulation of queue elements while preserving immutability. Concrete use cases include processing asynchronous data streams, aggregating results from queue elements, and applying transformations across queued items in a controlled order.",
      "description_length": 528,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Accessor_core.List",
      "library": "accessor_core",
      "description": "This module offers structural accessors and traversal operations for manipulating sequences, supporting transformations, aggregations, and reductions with both indexed and non-indexed elements. It handles standard and non-empty lists, enabling safe processing of guaranteed elements and combined iteration over paired lists. These capabilities are suited for data processing pipelines requiring element-wise computation, cumulative calculations (e.g., sums, counts), or parallel sequence manipulation while preserving structural integrity.",
      "description_length": 539,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core.Command",
      "library": "accessor_core",
      "description": "This module enables the transformation and combination of command parameters through accessor-based operations. It supports mapping, iteration, summation, counting, and reduction over extracted values, allowing the construction of complex command-line argument parsers. For example, it can aggregate values from multiple record fields or filter elements in a collection to produce new command parameters dynamically.",
      "description_length": 416,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Accessor_core",
      "library": "accessor_core",
      "description": "This module provides a rich set of accessors and transformations for working with structured data types such as dates, times, byte units, percentages, and process identifiers. It enables precise manipulation of individual components within composite values, such as extracting or modifying the year of a date, converting a percentage to basis points, or accessing the integer representation of a process ID. Submodules extend this functionality to deques, queues, sequences, and maps, supporting indexed operations, reductions, and transformations that preserve immutability. Use cases include test data aggregation, GC metric monitoring, command-line argument parsing, and time or unit conversions with customizable scaling and precision.",
      "description_length": 739,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 26,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 739,
    "min_description_length": 271,
    "avg_description_length": 481.2692307692308,
    "embedding_file_size_mb": 0.09494495391845703
  }
}