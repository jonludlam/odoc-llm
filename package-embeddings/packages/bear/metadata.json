{
  "package": "bear",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:34.479603",
  "modules": [
    {
      "module_path": "Bear_option.Infix",
      "library": "bear",
      "description": "This module defines infix operators for chaining operations on `option` values. The `(>>=)` operator sequences computations that return `option` values, passing the result of the first to the second function if it exists. The `(>>|)` operator maps a function over an `option` value, preserving the option structure. It is useful for concise, pipeline-style handling of optional data, such as processing nested JSON fields or filtering optional computations.",
      "description_length": 457,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bear_pervasives",
      "library": "bear",
      "description": "This module provides functions for logging messages, applying transformations with cleanup, and composing operations. It works with functions, tuples, and arbitrary values for logging, resource management, and control flow. Concrete use cases include printing formatted logs, ensuring resource disposal after computation, and chaining operations with intermediate results.",
      "description_length": 372,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bear",
      "library": "bear",
      "description": "This module provides functions for logging messages, applying transformations with cleanup, and composing operations in sequence. It works with functions, tuples, and arbitrary values, supporting controlled resource disposal and formatted output. Concrete use cases include logging with side effects, safely managing resources during function application, and chaining operations with guaranteed finalization steps.",
      "description_length": 415,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bear_option",
      "library": "bear",
      "description": "This module offers a comprehensive set of tools for working with `option` values, allowing safe transformation, chaining, and inspection of optional data. It includes core operations like `map`, `bind`, and `is_some`, enabling tasks such as conditional execution based on presence, transforming values within options, and safely unwrapping optional data. The included infix operators `(>>=)` and `(>>|)` support fluent pipelines, ideal for scenarios like extracting deeply nested values from JSON or composing functions that may fail. Together, the direct API and operator submodule facilitate both explicit and concise handling of optional values in a unified workflow.",
      "description_length": 670,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 670,
    "min_description_length": 372,
    "avg_description_length": 478.5,
    "embedding_file_size_mb": 0.014964103698730469
  }
}