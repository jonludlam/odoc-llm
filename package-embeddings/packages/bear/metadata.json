{
  "package": "bear",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:49:44.404229",
  "modules": [
    {
      "module_path": "Bear_option.Infix",
      "library": "bear",
      "description": "This module provides infix operators for chaining optional computations. It works with `option` types, allowing for concise transformation and flattening of nested `option` values. Use it to handle sequences of operations that may fail, such as parsing or lookup steps, without deeply nested pattern matching.",
      "description_length": 309,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bear_option",
      "library": "bear",
      "description": "This module provides operations for transforming, chaining, and inspecting `option` values. It includes functions like `map`, `bind`, and boolean checks such as `is_some` and `is_none`. Use it to handle optional data in scenarios like configuration parsing, safe arithmetic, or error propagation without verbose pattern matching.",
      "description_length": 329,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bear",
      "library": "bear",
      "description": "This module provides functions for logging messages, applying transformations with cleanup, and composing operations over values. It handles string output through formatted and plain logging, and supports resource management with dispose patterns. Use cases include debugging with contextual logs, safely managing resources during function application, and chaining transformations with guaranteed cleanup steps.",
      "description_length": 412,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bear_pervasives",
      "library": "bear",
      "description": "This module provides functions for logging messages, formatting output, and managing value transformations with side effects. It works with strings, functions, and arbitrary data types through higher-order operations like `apply` and `with_dispose`. Concrete use cases include debugging with `say` and `warn`, safely releasing resources with `with_dispose`, and chaining computations using the `>>:` operator.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 412,
    "min_description_length": 309,
    "avg_description_length": 364.75,
    "embedding_file_size_mb": 0.05837249755859375
  }
}