{
  "package": "rock",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:13:51.975918",
  "modules": [
    {
      "module_path": "Rock.Context.Key",
      "library": "rock",
      "description": "This module manages typed keys for heterogeneous contexts, providing operations to create and manipulate keys with associated metadata. It supports existential keys to enable type-erased comparisons and ordering, useful for filtering or traversing context values. Concrete use cases include tracking request-specific data like headers, session info, or middleware state in web applications.",
      "description_length": 390,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Middleware",
      "library": "rock",
      "description": "This module defines a named filter that transforms HTTP requests and responses as they pass through a handler chain. It works with Rock's request and response types, allowing middleware to inspect or modify these values before invoking the next handler. Concrete use cases include logging request details, adding headers to responses, or authenticating users before routing.",
      "description_length": 374,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Context",
      "library": "rock",
      "description": "This module manages a heterogeneous map for storing and retrieving typed values using keys created by the `Key` module. It supports operations like adding, removing, and querying key-value pairs, as well as iterating, folding, and filtering over bindings. It is used to pass contextual data through web application middleware, such as request headers, session identifiers, or per-request state.",
      "description_length": 394,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rock.Server_connection",
      "library": "rock",
      "description": "Handles HTTP server connections for Rock applications by providing functions to start a server, manage request and error handling, and immediately terminate responses. It works with `Rock.App.t` and integrates HTTP/1.1 server connection types from `Httpaf`, including custom error handlers that generate responses on connection errors. Use this module to bootstrap a production-ready HTTP server with proper error recovery and response handling for Rock-based applications.",
      "description_length": 473,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Filter",
      "library": "rock",
      "description": "This module composes and applies filters to services, transforming request/response pipelines. It supports chaining filters using the `>>>` operator and applying a list of filters to a service with `apply_all`. Concrete use cases include modifying headers, logging requests, or authenticating users before handling HTTP requests.",
      "description_length": 329,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Response",
      "library": "rock",
      "description": "This module creates and manipulates HTTP responses with specific status codes, headers, bodies, and metadata. It handles data types like `Httpaf.Version`, `Httpaf.Status`, `Httpaf.Headers`, and `Rock.Body` to construct fully-formed HTTP responses. Concrete use cases include building custom HTTP responses for web handlers, setting response status and headers for API endpoints, and managing response bodies with streaming or static content.",
      "description_length": 441,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Request",
      "library": "rock",
      "description": "This module creates and manipulates HTTP request objects with specific methods like `get`, `post`, `put`, and `delete`. It works with data types such as HTTP versions, headers, methods, request bodies, and context environments. Concrete use cases include constructing incoming HTTP requests for web applications or testing network clients with precise request parameters.",
      "description_length": 371,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Service",
      "library": "rock",
      "description": "This module defines asynchronous functions that process HTTP requests and produce responses, operating on request and response data structures. It provides combinators for composing and transforming services, such as mapping over inputs or outputs and chaining asynchronous operations. Concrete use cases include building middleware, routing logic, and request/response handlers in web applications.",
      "description_length": 399,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Body",
      "library": "rock",
      "description": "This module handles HTTP request or response bodies with support for empty, string, bigstring, and streaming content. It provides constructors to create bodies from strings, bigstrings, or streams, along with utilities to convert bodies to strings or streams, retrieve content length, and safely copy or drain streaming data. Concrete use cases include handling incoming request payloads, constructing response bodies for transmission, and managing streaming data in web applications.",
      "description_length": 484,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.App",
      "library": "rock",
      "description": "Handles HTTP request processing pipelines by composing middleware layers with a final request handler. Works with middleware functions that transform request and response values, and a handler that processes requests into responses. Used to build web applications where each request passes through a stack of middleware before reaching the application logic.",
      "description_length": 358,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock.Handler",
      "library": "rock",
      "description": "This module defines a handler as a service that processes HTTP requests and produces responses. It operates on `Rock.Request.t` and `Rock.Response.t` types, enabling middleware composition and routing logic. Concrete use cases include building web servers with request/response pipelines, implementing middleware for logging, authentication, or routing, and handling HTTP interactions in a composable way.",
      "description_length": 405,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rock",
      "library": "rock",
      "description": "This module implements a Rack-inspired HTTP processing framework for building web applications with middleware pipelines. It provides composable components for handling HTTP requests and responses, including typed context management, body streaming, service transformation, and filter-based middleware chaining. Concrete use cases include constructing web servers with layered request processing, modifying headers and response metadata, and managing per-request state through typed key-value storage.",
      "description_length": 501,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 501,
    "min_description_length": 329,
    "avg_description_length": 409.9166666666667,
    "embedding_file_size_mb": 0.1742992401123047
  }
}