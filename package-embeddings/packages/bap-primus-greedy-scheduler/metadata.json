{
  "package": "bap-primus-greedy-scheduler",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:15.309578",
  "modules": [
    {
      "module_path": "Primus_greedy_main.Greedy.Eval",
      "library": "bap-plugin-primus_greedy",
      "description": "This module provides low-level operations for symbolic execution, including control flow manipulation (branching, looping, halting), register and variable access, expression evaluation, arithmetic and logical operations, memory access, and value construction. It operates on values, variables, expressions, and memory addresses, enabling program analysis tasks like modeling execution paths, resolving conditional logic, and managing memory interactions within BAP's Primus framework. Specific mechanisms such",
      "description_length": 509,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Primus_greedy_main.Greedy",
      "library": "bap-plugin-primus_greedy",
      "description": "This module implements a greedy scheduling algorithm for a machine model, managing task execution order and termination based on machine state. It provides operations to initialize, reschedule, and halt execution, working with sequences and sets of machine identifiers to track active and halted machines. The child module enables symbolic execution with low-level control flow manipulation, register access, expression evaluation, and memory interaction, supporting program analysis tasks like path modeling and conditional resolution. Together, they allow scheduling decisions to guide symbolic execution, such as selecting the next machine to run based on state, evaluating expressions to resolve branches, and halting execution when termination conditions are met.",
      "description_length": 768,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Primus_greedy_main.Config",
      "library": "bap-plugin-primus_greedy",
      "description": "This module provides facilities for defining and parsing typed configuration parameters, including support for single and multiple values, deprecation handling, and automated documentation generation. It operates on strings, enums, file paths, directories, and composite types like lists and tuples, using conversion functions with customizable separators and validation for structured data parsing\u2014ideal for command-line interface development and self-documenting configuration systems.",
      "description_length": 487,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Primus_greedy_main",
      "library": "bap-plugin-primus_greedy",
      "description": "This module orchestrates binary analysis using a greedy algorithm, combining command-line configuration, logging, and progress tracking with core analysis state management over instruction ID sets. It coordinates with a scheduler that determines execution order of machine models, enabling symbolic execution with register and memory operations, and halts analysis based on dynamic state. The configuration submodule supports typed, self-documenting command-line parameters for fine-grained control of analysis options, while the scheduler submodule enables path exploration and branch resolution. Example usage includes launching a greedy disassembly process that dynamically selects the next machine to execute, logs detailed analysis steps, and respects user-defined limits on instruction depth or execution time.",
      "description_length": 816,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 816,
    "min_description_length": 487,
    "avg_description_length": 645.0,
    "embedding_file_size_mb": 0.014941215515136719
  }
}