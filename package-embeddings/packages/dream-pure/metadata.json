{
  "package": "dream-pure",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:02:03.515871",
  "modules": [
    {
      "module_path": "Dream_pure.Formats",
      "library": "dream-pure",
      "description": "This module handles string transformations and encodings for web protocols, including HTML escaping, Base64URL and percent encoding, form URL encoding, cookie parsing, and path manipulation. It works with strings, key-value pairs, and path segments, providing direct conversions for query parameters, cookies, and URL components. Concrete use cases include safely embedding user input in HTML, encoding/decoding URLs and cookies, generating Set-Cookie headers, and constructing or parsing paths in HTTP requests.",
      "description_length": 512,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure.Stream",
      "library": "dream-pure",
      "description": "This module provides operations for managing bidirectional byte streams with precise control over data flow, including creation, reading, writing, and event notification. It works with `Bigarray`-based buffers and stream abstractions that support low-level manipulation, such as partial writes, flushing, and WebSocket-specific control frames like ping/pong. Typical use cases include implementing network protocols requiring efficient buffer management, asynchronous stream processing with callbacks, and bidirectional communication over WebSockets.",
      "description_length": 550,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_pure.Method",
      "library": "dream-pure",
      "description": "This module defines an extensible type for HTTP methods including standard ones like `GET`, `POST`, and custom methods via `Method of string`. It provides functions to convert methods to and from strings, normalize method representations, and compare methods for equality. Use cases include handling HTTP request methods in web applications, ensuring consistent method representation, and supporting custom HTTP verbs in APIs.",
      "description_length": 426,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure.Status",
      "library": "dream-pure",
      "description": "This module defines a comprehensive set of HTTP status code types, including standard classifications like informational, successful, redirection, client error, and server error. It provides functions to convert status codes to integers, strings, and reason phrases, as well as predicates to check the class of a status code. These features are used to handle and validate HTTP responses accurately in web applications.",
      "description_length": 419,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure.Message",
      "library": "dream-pure",
      "description": "This module provides operations for constructing, modifying, and processing HTTP request/response messages, including header manipulation (adding, dropping, querying), body handling, and status management. It supports bidirectional streams for client-server communication, with WebSocket-specific lifecycle controls (creation, closing with status codes) and utilities for handling fragmented messages during streaming. These features are used to implement web applications with middleware, manage real-time communication, and process large data payloads efficiently.",
      "description_length": 566,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure",
      "library": "dream-pure",
      "description": "This module provides functions for handling web protocol string transformations, managing HTTP messages with headers and bodies, defining and normalizing HTTP methods, representing and converting HTTP status codes, and controlling bidirectional byte streams. It operates on strings, key-value pairs, HTTP messages, method types, status codes, and stream buffers. Use cases include safely encoding URLs and cookies, constructing HTTP responses, handling WebSocket communication, and processing streaming data in network applications.",
      "description_length": 532,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 566,
    "min_description_length": 419,
    "avg_description_length": 500.8333333333333,
    "embedding_file_size_mb": 0.08734607696533203
  }
}