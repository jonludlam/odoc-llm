{
  "package": "dream-pure",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:21.279215",
  "modules": [
    {
      "module_path": "Dream_pure.Stream",
      "library": "dream-pure",
      "description": "This module provides low-level primitives for bidirectional communication streams, including reader/writer creation, pipelining, stream composition, and event handlers for reading, writing, closing, and error propagation. It operates on Bigarray-based byte buffers and asynchronous write callbacks, enabling efficient streaming data processing, event-driven I/O, and network interactions such as WebSocket messaging with control frames (e.g., ping/pong). The design emphasizes low-latency buffer manipulation and asynchronous stream coordination for protocols requiring precise flow control and bidirectional data flow.",
      "description_length": 619,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure.Status",
      "library": "dream-pure",
      "description": "This module defines types and functions for working with HTTP status codes. It includes typed representations of standard status code ranges (e.g., success, client error) and provides conversions between status codes, integers, and reason phrases. Functions like `is_successful` and `status_to_int` allow checking and transforming status codes directly for use in HTTP response handling.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_pure.Formats",
      "library": "dream-pure",
      "description": "This module handles string transformations and encodings for web protocols, including HTML escaping, Base64URL and percent encoding/decoding, form URL encoding, cookie parsing, and path manipulation. It works with strings, string lists, and optional parameters to construct or parse HTTP headers and URLs. Concrete use cases include safely embedding user input in HTML, encoding query parameters, parsing cookies, building paths, and generating Set-Cookie headers with specified attributes.",
      "description_length": 490,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_pure.Message",
      "library": "dream-pure",
      "description": "This module provides operations for processing HTTP requests and responses, including manipulation of headers, bodies, and metadata, as well as bidirectional stream management for client-server communication. It works with message and stream abstractions to support use cases like WebSocket handling, chunked message framing, and middleware pipelines for transforming data flows. Specific utilities include header normalization, content-length tracking, and stream-based I/O for real-time or asynchronous data exchange.",
      "description_length": 519,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_pure.Method",
      "library": "dream-pure",
      "description": "This module defines an extensible type for HTTP methods, including standard variants like `GET`, `POST`, and `DELETE`, as well as a catch-all `Method of string`. It provides functions to convert methods to and from strings, normalize method representations, and compare methods for equality. These operations are used to handle and manipulate HTTP request methods in web applications.",
      "description_length": 384,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_pure",
      "library": "dream-pure",
      "description": "This module combines low-level stream handling with HTTP-specific utilities to enable efficient, bidirectional communication for web protocols. It supports asynchronous I/O with buffer-backed streams, HTTP method and status code manipulation, and string encoding for safe data transmission. Key data types include streams for message framing, typed HTTP methods, status codes with metadata, and encoded strings for headers, cookies, and URLs. Examples include handling WebSocket messages with control frames, constructing safe HTTP responses with encoded user input, and managing request methods and headers in middleware pipelines.",
      "description_length": 632,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 384,
    "avg_description_length": 505.1666666666667,
    "embedding_file_size_mb": 0.02222728729248047
  }
}