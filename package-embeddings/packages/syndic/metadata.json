{
  "package": "syndic",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-07-15T23:08:17.229086",
  "modules": [
    {
      "module_path": "Syndic.Rss1.Error",
      "library": "syndic",
      "description": "This module defines a concrete error type for handling parsing errors in RSS 1.0 documents. It represents errors as a position in the input and a descriptive message string. The `to_string` function converts an error into a human-readable string, making it suitable for reporting malformed RSS feeds during parsing.",
      "description_length": 315,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syndic.W3C.Error",
      "library": "syndic",
      "description": "This module defines a common structure for representing errors from the W3C validation process. It includes a type `t` that pairs a position in the XML input with an error message, and a `to_string` function to convert error values into human-readable strings. It is used to standardize error reporting across different components of the W3C validation toolchain.",
      "description_length": 363,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syndic.Rss2.Error",
      "library": "syndic",
      "description": "This module defines a standard error format for handling parsing issues in RSS 2.0 documents. It includes a type `t` representing an error with a position and message, and a `to_string` function to convert errors into readable strings. It is used to report malformed or invalid XML content during RSS feed processing.",
      "description_length": 317,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Atom.Error",
      "library": "syndic",
      "description": "This module defines a standard error representation for handling parsing errors in Atom feeds. It provides a `to_string` function to convert errors into human-readable strings, using the position in the input and an error message. It is used specifically during the parsing of Atom XML content to report issues like malformed elements or invalid data.",
      "description_length": 351,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Opml1.Error",
      "library": "syndic",
      "description": "This module defines error handling for OPML 1.0 parsing, representing errors as a position in XML input and a descriptive message. It includes a function to convert errors into human-readable strings. This enables precise reporting of malformed or invalid OPML content during parsing operations.",
      "description_length": 295,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Date",
      "library": "syndic",
      "description": "This module represents and manipulates dates using a POSIX time-based type. It supports parsing and formatting dates in RFC 822 and RFC 3339 formats, extracting components such as year, month, day, hour, minute, and second, and performing comparisons and selections between dates. It is suitable for applications requiring precise date handling, such as feed parsing or event scheduling.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.XML",
      "library": "syndic",
      "description": "This module provides functions for parsing and serializing XML documents into a structured tree format, handling DTDs, and resolving URIs with optional base contexts. It works with custom XML tree types, including nodes, tags, and positional data, alongside standard types like input channels and buffers. Concrete use cases include reading XML from a channel, converting XML trees to strings or buffers with optional namespace prefixes, and extracting positional information from XML elements.",
      "description_length": 494,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syndic.W3C",
      "library": "syndic",
      "description": "This module integrates with the W3C Feed Validator API to validate RSS or Atom feeds, producing structured lists of errors and warnings by parsing the API's SOAP 1.2 response. It supports input sources such as raw XML strings or URIs, enabling direct validation and diagnostic extraction for conformance checks. The child module defines a standardized error type that pairs XML positions with messages, enhancing error handling by providing precise, readable diagnostics. Together, they allow developers to programmatically validate feeds and process validation results with positional accuracy.",
      "description_length": 595,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Opml1",
      "library": "syndic",
      "description": "This module provides OPML 1.0 support for parsing, constructing, and serializing hierarchical outline documents. It defines core types like `head` for metadata, `outline` for nested content nodes, and `t` for complete documents, enabling tasks such as importing/exporting RSS feeds or synchronizing structured notes between outliners. The included error module handles parsing failures with positional XML feedback, improving diagnostics for malformed input. Together, these components support robust manipulation and exchange of outline-based data in applications like specification management or content syndication.",
      "description_length": 618,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Atom",
      "library": "syndic",
      "description": "This module implements RFC 4287-compliant handling of Atom feeds and entries, enabling parsing, construction, and manipulation of structured Atom data including metadata, content encodings, and temporal values. It supports XML serialization, date-based sorting, and aggregation of multiple feeds, with core operations for building feed readers or merging distributed publications. The error submodule provides structured parsing error reporting with positional context and human-readable messages for malformed or invalid Atom content. Examples include normalizing timestamps across feeds, filtering entries by category, and combining multiple Atom sources into a unified feed.",
      "description_length": 677,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Syndic.Rss2",
      "library": "syndic",
      "description": "This module parses and processes RSS 2.0 feeds, converting XML input into structured data representing channels, items, and metadata such as images, enclosures, and categories. It supports reading from files or XML streams and includes functionality to convert RSS feeds into Atom format. The core API provides data types like `channel`, `item`, and `category`, along with operations to load and transform feeds. A child module handles parsing errors using a structured error type that captures position and message details, enabling precise reporting of malformed XML during feed processing.",
      "description_length": 592,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic.Rss1",
      "library": "syndic",
      "description": "This module parses and represents RSS 1.0 feeds, converting XML input or files into structured OCaml values that model core elements like channels, items, images, and text inputs, along with metadata. It supports optional base URI resolution and includes operations for reading, validating, and extracting feed data for display or integration into larger applications. A dedicated error module provides precise parsing error handling by capturing input positions and descriptive messages, with a `to_string` function for clear error reporting. Together, these components enable robust RSS 1.0 feed processing with strong error diagnostics and structured data manipulation.",
      "description_length": 672,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syndic",
      "library": "syndic",
      "description": "This module handles date manipulation, XML processing, and syndication feed validation and conversion. It provides precise date handling with RFC 822 and RFC 3339 parsing, structured XML tree operations, and validation against W3C Feed Validator and OPML 1.0 standards. Developers can parse and merge Atom and RSS feeds, convert between formats, and extract structured data with detailed error reporting. Examples include normalizing timestamps across feeds, validating XML conformance, and synchronizing hierarchical outlines.",
      "description_length": 527,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 677,
    "min_description_length": 295,
    "avg_description_length": 477.15384615384613,
    "embedding_file_size_mb": 0.04771232604980469
  }
}