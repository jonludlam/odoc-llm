{
  "package": "mirage-flow-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:12.349482",
  "modules": [
    {
      "module_path": "Mirage_flow_unix.Make",
      "description": "Provides functions for reading from and writing to network flows, with explicit handling of errors and write errors through pretty-printers. Operates on `flow` objects and `Cstruct.t` buffers, supporting both single and vectorized writes. Used to manage reliable data transmission, handle connection termination, and ensure proper resource cleanup in networked applications.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mirage_flow_unix.Fd",
      "description": "Provides functions to read from and write to a network flow, with support for handling errors and shutting down or closing the connection. Operates on `Cstruct.t` buffers and custom error types for read and write operations. Used to manage data transmission in network protocols, ensuring proper error handling and resource cleanup.",
      "description_length": 332,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mirage-flow-unix",
      "description": "Provides operations for manipulating and composing network flow data, including packet inspection, header parsing, and stream segmentation. Works with custom data types representing network packets, flow states, and byte buffers. Used to implement protocol-specific logic in network applications, such as filtering traffic or reassembling fragmented data.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mirage_flow_unix",
      "description": "Converts network flows to Lwt_io channels, enabling asynchronous data transfer with explicit error handling. Operates on `flow` objects and `Cstruct.t` buffers, supporting read, write, and shutdown operations with custom error types. Allows for reliable transmission of data, including vectorized writes and proper cleanup of network resources. Examples include managing TCP data streams, handling connection termination, and ensuring robust error reporting during I/O operations.",
      "description_length": 480,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 480,
    "min_description_length": 332,
    "avg_description_length": 385.25,
    "embedding_file_size_mb": 0.014934539794921875
  }
}