{
  "package": "mirage-flow-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:52.062215",
  "modules": [
    {
      "module_path": "Mirage_flow_unix.Fd",
      "library": "mirage-flow-unix",
      "description": "This module implements bidirectional communication over file descriptors using Lwt for asynchronous I/O, providing functions to read from and write to flows with support for error handling and connection termination. It operates on `Lwt_unix.file_descr` as the primary data type, using `Cstruct.t` buffers for data transfer and offering `read`, `write`, `writev`, `shutdown`, and `close` operations. Concrete use cases include implementing network clients and servers that require low-level control over socket I/O, such as handling raw TCP connections or custom protocols with precise buffer management.",
      "description_length": 604,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mirage_flow_unix.Make",
      "library": "mirage-flow-unix",
      "description": "This module converts Mirage flows into Lwt_io input and output channels, allowing integration of Mirage-based network or I/O operations with Lwt_io-based code. It supports configurable buffer sizes and explicit control over flow closure behavior when channels are closed. Concrete use cases include adapting Mirage TCP/IP connections for use with Lwt_io-aware HTTP servers or clients.",
      "description_length": 384,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mirage_flow_unix",
      "library": "mirage-flow-unix",
      "description": "This module bridges Mirage flows with Lwt-based I/O by converting flows into Lwt_io channels and managing bidirectional communication over file descriptors. It uses `Lwt_unix.file_descr` and `Cstruct.t` for efficient, asynchronous data transfer, supporting operations like `read`, `write`, `shutdown`, and `close`. You can implement custom network protocols or adapt Mirage connections for use with Lwt_io HTTP libraries. Example uses include managing raw TCP sockets or integrating Mirage with existing Lwt-based web servers.",
      "description_length": 526,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 604,
    "min_description_length": 384,
    "avg_description_length": 504.6666666666667,
    "embedding_file_size_mb": 0.011317253112792969
  }
}