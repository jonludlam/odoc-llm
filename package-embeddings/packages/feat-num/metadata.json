{
  "package": "feat-num",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:30.820685",
  "modules": [
    {
      "module_path": "FeatNum.Enum.IFSeq",
      "description": "Provides operations to construct, combine, and transform sequences, including concatenation, reversal, mapping, and Cartesian products. Works with custom sequence types and integer indices, supporting iterative processing and sampling. Enables efficient manipulation of ordered data collections for tasks like generating ranges, combining elements, and iterating over structured data.",
      "description_length": 384,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatNum.Enum",
      "description": "Constructs, combines, and transforms sequences using operations like concatenation, reversal, mapping, and Cartesian products. Supports custom sequence types and integer indices, enabling iterative processing, sampling, and structured data manipulation. Examples include generating ranges, merging elements from multiple sequences, and iterating over complex data structures. Operations work across various sequence representations for flexible data handling.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatNum.IFSeq",
      "description": "Provides operations to construct and manipulate sequences, including reversing, concatenating, and computing Cartesian products. Works with polymorphic sequences and integer indices, supporting functions like mapping, iterating, and sampling elements. Enables creation of sequences from ranges, extraction of elements by index, and integration with OCaml's standard sequence module.",
      "description_length": 382,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatNum.Num",
      "description": "Provides arithmetic operations such as addition, subtraction, multiplication, and division with remainder, along with comparison functions and conversions between integers and a big integer type. Works with arbitrary-precision integers represented as `Big_int.big_int`. Used for precise calculations in applications requiring large numbers, such as cryptographic algorithms or financial computations.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "feat-num",
      "description": "Counts, enumerates, and samples elements from algebraic data types, supporting recursive structures through integration with the Fix library. It handles custom data types by generating sequences and random instances based on defined patterns. Used to explore combinatorial possibilities in formal systems or generate test cases for complex type hierarchies.",
      "description_length": 357,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatNum",
      "description": "Combines sequence manipulation, arithmetic operations, and data transformation into a unified framework. It supports operations like concatenation, reversal, mapping, and Cartesian products on polymorphic sequences, while also handling arbitrary-precision integers with arithmetic and comparison functions. Users can generate ranges, merge sequences, extract elements by index, and perform precise calculations with big integers. Examples include building complex data structures, iterating over structured data, and executing exact mathematical operations in applications like cryptography.",
      "description_length": 591,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 591,
    "min_description_length": 357,
    "avg_description_length": 428.8333333333333,
    "embedding_file_size_mb": 0.022233009338378906
  }
}