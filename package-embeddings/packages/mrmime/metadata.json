{
  "package": "mrmime",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 60,
  "creation_timestamp": "2025-08-15T14:36:33.549513",
  "modules": [
    {
      "module_path": "Mrmime.Content_type.Parameters.Map",
      "library": "mrmime",
      "description": "This module implements a map structure for content-type parameters with string keys and polymorphic values, supporting standard dictionary operations (insertion, lookup, deletion) alongside specialized functions like list-accumulating updates and predicate-based searches. It provides functional transformations (folding, filtering, partitioning) and interoperability with lists and sequences for iterative processing. Typical applications include parsing and manipulating MIME header parameters, handling multi-valued fields like \"accept\" or \"content-language\", and bridging between structured maps and stream-based data representations.",
      "description_length": 638,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Local",
      "library": "mrmime",
      "description": "This module handles the construction and validation of email local parts according to RFC standards. It provides functions to create and manipulate local parts from strings or lists of words, ensuring proper escaping and quoting. Use cases include validating and formatting email addresses for transmission or storage.",
      "description_length": 318,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Decoder",
      "library": "mrmime",
      "description": "This module provides a decoder for unstructured header fields that contain RFC-2047 encoded words, such as email subjects. It processes byte strings into decoded text, handling character set conversions and encoded word parsing. Use it when extracting human-readable content from headers in emails that may contain non-ASCII characters.",
      "description_length": 336,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Address.Decoder",
      "library": "mrmime",
      "description": "Parses email addresses and lists of addresses from raw byte streams using Angstrom parsers. It handles the decoding of individual mailbox addresses and comma-separated address lists according to email standards. Useful when processing email headers like \"To\", \"From\", or \"Cc\" fields directly from message data.",
      "description_length": 310,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Encoder",
      "library": "mrmime",
      "description": "Encodes date values into a human-readable string format suitable for email headers. Works with the `Mrmime.Date.t` type representing dates and times. Useful for generating properly formatted `Date:` headers in email messages.",
      "description_length": 225,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Phrase",
      "library": "mrmime",
      "description": "This module constructs and manipulates email mailbox phrases, handling standard-compliant text encoding and formatting. It supports elements like plain words, encoded words using Base64 or Quoted-Printable, and dots, ensuring valid UTF-8 usage. Use it to build recipient names with proper escaping and encoding for email headers, or to safely convert structured phrases into string representations.",
      "description_length": 398,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Literal_domain",
      "library": "mrmime",
      "description": "This module defines and constructs literal domains for email addresses, supporting IPv4, IPv6, and user-defined extensions. It provides constructors for each domain type and validation according to RFC 5321, ensuring correct formatting for network transmission. Use cases include building valid email addresses with IP literals or custom domain extensions for SMTP communication.",
      "description_length": 379,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID.Decoder",
      "library": "mrmime",
      "description": "Parses email message IDs from input streams using Angstrom combinators. Works directly with `Mrmime.MessageID.t` values and Angstrom parsers. Useful for extracting and validating message IDs during email header parsing.",
      "description_length": 219,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Content_type.Encoder",
      "library": "mrmime",
      "description": "Encodes content types and subtypes into string representations suitable for HTTP headers. Works with `Mrmime.Content_type.Type.t`, `Mrmime.Content_type.Subtype.t`, and `Mrmime.Content_type.t` values. Used to serialize media types when constructing or modifying HTTP responses with specific content type headers.",
      "description_length": 311,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group.Decoder",
      "library": "mrmime",
      "description": "Parses email group addresses from raw string input using Angstrom combinators. Works with `Mrmime.Group.t` to represent structured group data. Useful for extracting mailbox groups in email headers during message parsing.",
      "description_length": 220,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Encoder",
      "library": "mrmime",
      "description": "This module defines pretty-printing functions for encoding email-related data types such as words, phrases, local parts, and mailboxes. It provides formatters for converting structured email data into properly escaped and quoted string representations suitable for use in email headers. These functions are used when generating valid RFC-compliant email messages, particularly when serializing mailbox information.",
      "description_length": 414,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field.Decoder",
      "library": "mrmime",
      "description": "Decodes email fields from raw input using Angstrom parsers, producing structured field values. It operates on field names and maps them to appropriate decoder functions for parsing specific field content. Useful for extracting and interpreting headers like `Subject`, `From`, or `Date` from email messages.",
      "description_length": 306,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group.Encoder",
      "library": "mrmime",
      "description": "This module provides a pretty-printing function for encoding `Mrmime.Group.t` values into a textual representation. It works with the `Mrmime.Group.t` data type, which represents email address groups in MIME messages. A concrete use case is formatting structured email groups into valid, human-readable email headers during message serialization.",
      "description_length": 346,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Decoder",
      "library": "mrmime",
      "description": "Parses MIME content types from input streams using Angstrom. It handles top-level types, subtypes, and structured content-type headers. Useful for decoding `Content-Type` fields in email or HTTP messages into typed representations.",
      "description_length": 231,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured.Craft",
      "library": "mrmime",
      "description": "This module provides functions to construct and combine unstructured data elements, such as strings and Unicode characters, into sequences for email content. It supports operations to create elements from strings, insert spaces, compile lists of elements into a structured format, and concatenate sequences. Concrete use cases include building custom email headers or message bodies with precise control over character encoding and spacing.",
      "description_length": 440,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Decoder",
      "library": "mrmime",
      "description": "Parses email mailbox addresses and lists from raw byte streams using Angstrom parsers. It handles mailbox formats defined in email standards, producing structured `Emile.mailbox` values. Useful for decoding `From`, `To`, or `Cc` header fields in email processing applications.",
      "description_length": 276,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Subtype",
      "library": "mrmime",
      "description": "This module defines and validates content type subtypes, supporting IETF, IANA, and user-defined extensions. It operates on the variant type `t` representing different sub-type categories and provides parsing, comparison, and string conversion functions. Use cases include constructing valid subtypes for MIME types, validating subtypes against IANA standards, and formatting subtypes for display or serialization.",
      "description_length": 414,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Field.Encoder",
      "library": "mrmime",
      "description": "This module provides a pretty-printing function for encoding email fields into string representations. It works with the `Mrmime.Field.field` type, which represents individual fields in an email header. A concrete use case is generating properly formatted header strings when constructing or serializing email messages.",
      "description_length": 319,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Iana.Set",
      "library": "mrmime",
      "description": "This module provides functions for manipulating immutable sets of strings, supporting core operations like union, intersection, difference, and subset checks, alongside element queries and transformations. It enables mapping, filtering, and folding over sets, with optional return types ensuring safe value extraction, and facilitates ordered traversal through conversions to and from sequences. Designed for handling IANA-defined standardized values such as media types or encodings, it emphasizes functional programming patterns while maintaining efficient set algebra and iteration capabilities.",
      "description_length": 598,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Zone",
      "library": "mrmime",
      "description": "This module defines a type for representing time zones as specified in email standards like RFC 822, 2822, and 5322. It supports parsing and printing time zones from and to strings, including handling common abbreviations like UTC, GMT, and military zones, as well as numeric offsets. Use cases include validating and formatting time zone fields in email headers.",
      "description_length": 363,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Mailbox.Domain",
      "library": "mrmime",
      "description": "This module handles the construction and validation of email domains according to RFC 5322 and RFC 5321, supporting atoms, literals, IPv4, IPv6, and custom extension domains. It provides functions to safely create domain values from strings or IP addresses, with strict validation and optional error handling via exceptions. Concrete use cases include parsing and validating email addresses, constructing domain parts for email headers, and ensuring compliance with email formatting standards.",
      "description_length": 493,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID.Encoder",
      "library": "mrmime",
      "description": "This module defines pretty-printing functions for email message IDs and domains. It works with the `Mrmime.MessageID.t` and `Mrmime.MessageID.domain` types, converting them into human-readable string representations. Use this module when generating or debugging email headers that require formatted message identifiers or domain names.",
      "description_length": 335,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Map",
      "library": "mrmime",
      "description": "This module implements a map structure for keys of type `Field_name.t`, supporting standard operations like insertion, deletion, and lookup, as well as ordered traversal, transformation, and filtering that preserve key ordering. It handles polymorphic values with utilities for list-valued entries (e.g., `add_to_list`), safe access via optional returns, and conversions to sequences or lists. It is particularly suited for managing email header fields, enabling efficient aggregation of multi-value entries and ordered iteration for canonical representations.",
      "description_length": 560,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Address.Encoder",
      "library": "mrmime",
      "description": "Encodes email addresses and lists of email addresses into string representations suitable for use in email headers. Works directly with `Mrmime.Address.t` values, handling both single addresses and lists. Useful for generating properly formatted `To`, `From`, or `Cc` header fields in email messages.",
      "description_length": 300,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Date.Decoder",
      "library": "mrmime",
      "description": "Parses RFC 5322 date-time strings into structured date and time values. Works with Angstrom parsers and Mrmime.Date.t records containing day, month, year, hour, minute, second, and timezone fields. Useful for extracting timestamps from email headers like Date: or Received:.",
      "description_length": 274,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Craft",
      "library": "mrmime",
      "description": "This module assembles and encodes unstructured header fields like Subject, handling encoded words for UTF-8 compatibility in 7-bit SMTP. It provides functions to create literal text, encoded text, and space elements, which are combined into a structured field using `compile`. Use cases include constructing email headers with non-ASCII characters while adhering to RFC-2047 encoding rules.",
      "description_length": 390,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Encoder",
      "library": "mrmime",
      "description": "This module encodes unstructured text containing encoded words according to RFC-2047, ensuring the output remains 7-bit compatible when non-ASCII characters are confined to encoded words. It operates on `Mrmime.Unstructured_with_encoded.t` values, which represent text with embedded encoded words. It is used to properly format header fields like Subject for transmission over SMTP without requiring SMTPUTF8.",
      "description_length": 409,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Header.Decoder",
      "library": "mrmime",
      "description": "Parses MIME headers into a structured format using a map of field name witnesses to guide decoding. It operates on `Mrmime.Header.t` values using the Angstrom parser combinator library. This module is used to decode raw header data into typed fields during MIME message parsing.",
      "description_length": 278,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group.Phrase",
      "library": "mrmime",
      "description": "This module constructs and manipulates email phrases, combining plain text, encoded words, and other elements. It supports parsing and creating phrases with quoted-printable or base64 encoding, validating and converting them into a final string representation. Concrete use cases include building email headers with properly encoded display names or subject lines.",
      "description_length": 364,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Encoder",
      "library": "mrmime",
      "description": "This module provides a pretty-printing function for converting `Mrmime.Field_name.t` values into string representations. It is used to serialize email field names in a human-readable format. Concrete use cases include generating valid email headers for transmission or logging.",
      "description_length": 277,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured.Encoder",
      "library": "mrmime",
      "description": "Encodes unstructured data elements into a list of byte-sized chunks, handling partial output when necessary. Works with lists of `elt` values representing encoded data segments. Useful for streaming large payloads where output buffering is required.",
      "description_length": 249,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Content_type.Type",
      "library": "mrmime",
      "description": "This module provides operations to construct, classify, and convert MIME content types, supporting standard discrete (e.g., text, image), composite (message, multipart), and user-defined types. It works with a structured type `t` that enables bidirectional parsing and serialization to strings, including validation and error handling for malformed inputs. Typical use cases include processing MIME headers in email or HTTP protocols where precise content type handling per RFC standards is required.",
      "description_length": 500,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID.Domain",
      "library": "mrmime",
      "description": "This module handles the creation and manipulation of email message ID domains according to RFC standards. It provides functions to construct domains from strings either as atoms or literals, validating against RFC 5322 and RFC 5321 requirements, and converting them to string representations suitable for email headers. Use cases include generating valid message IDs and ensuring domain names comply with email formatting rules during message construction or validation.",
      "description_length": 470,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_encoding.Decoder",
      "library": "mrmime",
      "description": "Handles decoding of email content encoded with mechanisms like Base64, Quoted-Printable, and 7bit. It processes byte streams into decoded values using Angstrom parsers, working directly with `Cstruct.t` and `Mrmime.Content_encoding.t`. Useful for parsing MIME-encoded email bodies into raw text or binary data during message processing.",
      "description_length": 336,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word.Encoder",
      "library": "mrmime",
      "description": "Handles the encoding of non-ASCII text into RFC 2047 encoded words. Works with `Mrmime.Encoded_word.t` values, formatting them into strings suitable for email headers. Useful for generating properly encoded subject lines or header fields containing international characters.",
      "description_length": 274,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_encoding.Encoder",
      "library": "mrmime",
      "description": "This module implements functions to encode data according to RFC 2045 transfer encoding standards, specifically handling Base64, Quoted-Printable, and 7bit/8bit encodings. It operates on byte sequences and strings, providing streaming and in-memory encoding operations for email content. Use it to transform raw payloads into encoded forms suitable for transmission in MIME-compliant messages.",
      "description_length": 393,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word.Decoder",
      "library": "mrmime",
      "description": "Parses MIME encoded words from input streams using Angstrom. Works with `Mrmime.Encoded_word.t` values. Useful for decoding non-ASCII text in email headers like subject lines or encoded names.",
      "description_length": 192,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Date.Month",
      "library": "mrmime",
      "description": "This module provides strict parsing of capitalized month strings, conversion between an enumerated type and integers or strings, and equality comparisons. It centers on an enumerated type representing months per email RFC standards, with operations ensuring canonical representations and error handling during parsing. Typical use cases include email date handling where precise parsing, formatting, and comparison of months are required.",
      "description_length": 438,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Day",
      "library": "mrmime",
      "description": "This module defines a type-safe representation of days of the week as specified in email standards like RFC 5322. It provides functions to convert between string representations (e.g., \"Mon\", \"Tue\") and the corresponding enumerated values, with both safe and unsafe parsing options. The module supports pretty-printing and equality checks for day values.",
      "description_length": 354,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Header.Encoder",
      "library": "mrmime",
      "description": "This module defines a pretty-printing function for email headers, specifically formatting `Mrmime.Header.t` values into human-readable strings. It works directly with the `Mrmime.Header.t` type, which represents structured email headers. A concrete use case is generating properly formatted header sections when constructing or displaying email messages.",
      "description_length": 354,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Decoder",
      "library": "mrmime",
      "description": "Parses valid email field names from input streams using Angstrom combinators. Works directly with `Mrmime.Field_name.t` to represent parsed field names. Useful for decoding headers in email message parsing workflows.",
      "description_length": 216,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Unstructured.Decoder",
      "library": "mrmime",
      "description": "Parses unstructured text from email headers using the Angstrom parser combinator library. It produces values of type `Unstrctrd.t`, representing decoded unstructured text with possible encoded words. This module is used to decode human-readable email header fields like `Subject` or `From` that may contain non-ASCII characters.",
      "description_length": 328,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Content_type.Parameters",
      "library": "mrmime",
      "description": "This module provides operations for parsing, manipulating, and serializing MIME header parameters according to RFC 2045. It works with a map structure storing strict key-value pairs where keys are strings and values are either strings or tokens, enabling safe and unsafe parameter handling. Typical use cases include constructing and processing MIME content-type headers in email or HTTP protocols, ensuring correct parameter formatting and validation.",
      "description_length": 452,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name",
      "library": "mrmime",
      "description": "This module provides functions for creating, validating, and transforming email header field names through operations like capitalization, canonicalization, parsing from strings, and prefix checks. It works with a dedicated type representing field names and an ordered map structure that supports polymorphic, multi-value associations for efficient header management. These tools are optimized for tasks such as email header aggregation, canonicalization, and standardized field name manipulation in parsing or printing workflows.",
      "description_length": 530,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox",
      "library": "mrmime",
      "description": "This module implements email mailbox handling with functions to construct, parse, and format mailboxes including local parts, domains, and display names. It supports operations like `make`, `of_string`, and `to_string` for creating and serializing mailboxes, and includes submodules for handling email-specific components such as encoded phrases, literal domains, and local parts. Use it to build, validate, and serialize email addresses and mailbox names in compliance with RFC 5322 and related standards.",
      "description_length": 506,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date",
      "library": "mrmime",
      "description": "This module handles date and time values according to email standards like RFC 5322, providing structured parsing, formatting, and conversion operations. It works with day, month, and time zone enumerations, date-time records, and POSIX timestamps, supporting precise validation, comparison, and error-checked construction. Concrete use cases include parsing and generating email `Date:` headers, normalizing timestamps across time zones, and validating date strings in email delivery systems.",
      "description_length": 493,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded",
      "library": "mrmime",
      "description": "This module handles RFC-2047 encoded words in unstructured header fields like email subjects, supporting both decoding and encoding of UTF-8 content for 7-bit SMTP compatibility. It works with a list of elements that can be either raw unstructured text or encoded words represented as tuples of charset and decoded string. Use it to correctly parse and generate email headers containing non-ASCII characters without relying on SMTPUTF8.",
      "description_length": 436,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Iana",
      "library": "mrmime",
      "description": "This module provides a database of IANA-defined standardized values, such as media types and encodings, organized using maps and sets for efficient lookup and manipulation. It includes functions for querying, transforming, and combining sets of strings, supporting operations like union, intersection, and subset checks. Use cases include validating and processing internet media types, character encodings, and other standardized identifiers in email and web protocols.",
      "description_length": 470,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group",
      "library": "mrmime",
      "description": "This module handles email address groups with functions to construct, compare, and encode/decode groups. It works with `Mrmime.Group.t`, which combines a phrase name and a list of mailboxes. Use cases include parsing and formatting email headers that contain grouped addresses, such as in the \"To\" or \"Cc\" fields of a MIME message.",
      "description_length": 331,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Location",
      "library": "mrmime",
      "description": "This module represents byte ranges within a data structure, providing operations to create, merge, and query locations defined by start and end points. It handles unknownable locations and supports attaching positional metadata to values. Use cases include tracking positions in binary data parsing and managing regions of interest in buffers.",
      "description_length": 343,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mt",
      "library": "mrmime",
      "description": "This module handles the construction and serialization of email messages, including parts and multipart structures with content encoding. It operates on data types like `buffer`, `field`, `part`, `multipart`, and `t`, supporting operations to build and encode email components from streams. Concrete use cases include creating MIME-compliant emails with custom headers, multipart boundaries, and encoded content streams.",
      "description_length": 420,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID",
      "library": "mrmime",
      "description": "This module implements email message ID handling per RFC standards, providing functions to construct and validate message IDs and domains. It supports parsing from strings, pretty-printing, and equality checks for message IDs composed of local parts and domain names. Concrete uses include generating valid message IDs for email headers and parsing message IDs from incoming email streams.",
      "description_length": 389,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured",
      "library": "mrmime",
      "description": "Handles parsing, crafting, and encoding of unstructured text elements in email headers, supporting operations like decoding encoded words, constructing element sequences, and converting to byte chunks. Works with list-based structures of `elt` values, including strings, Unicode, and box markers. Used for processing email headers like `Subject` with non-ASCII content, building custom message parts, and streaming encoded output.",
      "description_length": 430,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word",
      "library": "mrmime",
      "description": "This module provides functions to encode, decode, and parse MIME-encoded words using Base64 or quoted-printable encodings over arbitrary character sets like UTF-8 or US-ASCII. It includes stream-based decoders and encoders for processing non-ASCII text in email headers, ensuring compliance with RFC 2047, and supports operations like charset conversion, encoding validation, and structured comparison of encoded values. Use cases include handling internationalized email headers, normalizing legacy encodings, and safely interchanging MIME-encoded text across systems with varying charset support.",
      "description_length": 598,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_encoding",
      "library": "mrmime",
      "description": "This module defines and manipulates content transfer encodings like Base64, Quoted-Printable, and 7bit/8bit, using a sum type to represent valid encoding values. It provides functions to parse encodings from strings, compare them, and format them for display, ensuring correct handling of MIME-compliant email content. The associated Decoder and Encoder modules process byte streams to decode or encode data according to the specified encoding, directly working with Cstruct.t values during email message parsing or construction.",
      "description_length": 529,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Address",
      "library": "mrmime",
      "description": "This module represents email addresses as either a mailbox or a named group of mailboxes. It provides constructors to create address values from mailbox or group types, along with equality checking and pretty-printing for debugging. The decoder parses raw byte streams into address structures according to email standards, while the encoder formats addresses into strings suitable for email headers like \"To\" or \"From\".",
      "description_length": 419,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Hd",
      "library": "mrmime",
      "description": "This module implements a streaming decoder for parsing email headers, where each field is associated with a specific parser defined by `Field.witness`. It processes input incrementally via `src`, yielding structured values for known fields, unstructured data for unknown ones, or error states for malformed input. It is used to decode RFC 5322-compliant header sections into typed fields like `Date`, `From`, or `Subject` as they are parsed.",
      "description_length": 441,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mail",
      "library": "mrmime",
      "description": "Parses RFC 5322 email messages, handling both headers and body content. It provides low-level parsers for message bodies that either store content in memory or stream it through a user-provided emitter. Useful for processing large email messages efficiently without loading the entire body into memory.",
      "description_length": 302,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field",
      "library": "mrmime",
      "description": "This module implements the core operations for constructing, manipulating, and converting email header fields. It defines a GADT-based representation of fields with associated values and types, supporting precise handling of different field structures such as dates, addresses, or strings. The module is used to build and inspect individual email headers like `Date`, `To`, or `Content-Type` with type-safe access to their parsed values.",
      "description_length": 437,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime",
      "library": "mrmime",
      "description": "This module provides comprehensive tools for constructing, parsing, and manipulating MIME and email messages. It handles structured data like media types, content encodings, email addresses, and headers with precise RFC-compliant operations, using types such as `Mailbox.t`, `Content_encoding.t`, and `Field.t`. Use cases include building and decoding email messages with proper handling of multipart content, encoded words, and standardized identifiers.",
      "description_length": 454,
      "index": 59,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 63,
    "meaningful_modules": 60,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9523809523809523
  },
  "statistics": {
    "max_description_length": 638,
    "min_description_length": 192,
    "avg_description_length": 380.4166666666667,
    "embedding_file_size_mb": 0.8695554733276367
  }
}