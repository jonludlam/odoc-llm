{
  "package": "mrmime",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 62,
  "creation_timestamp": "2025-07-15T23:15:47.776978",
  "modules": [
    {
      "module_path": "Mrmime.Content_type.Parameters.Map",
      "library": "mrmime",
      "description": "This module offers a specialized map structure for managing ordered key-value pairs with string keys and polymorphic values, optimized for handling MIME content-type parameters in email or HTTP headers. It supports standard map operations like insertion, deletion, iteration, and transformation, along with ordered traversal and conversion to/from lists or sequences. Key features include merging parameter sets, filtering by key, and preserving parameter order during operations, making it suitable for parsing, modifying, and serializing header fields in network protocols.",
      "description_length": 575,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Decoder",
      "library": "mrmime",
      "description": "Parses valid email field names from input streams using Angstrom combinators. Works with `Mrmime.Field_name.t` values, ensuring correct decoding of header field names. Useful for implementing custom email header parsers that require strict field name validation.",
      "description_length": 262,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word.Encoder",
      "library": "mrmime",
      "description": "Handles the encoding of non-ASCII text into RFC 2047 encoded words. Works with `Mrmime.Encoded_word.t` values, formatting them into strings suitable for email headers. Useful for generating properly encoded email headers like subject or from fields containing international characters.",
      "description_length": 285,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Subtype",
      "library": "mrmime",
      "description": "This module defines and manipulates content sub-types, supporting creation via IETF, IANA, and custom extensions. It provides validation, comparison, and conversion to string, ensuring correct handling of MIME content sub-types. Use cases include parsing and constructing MIME content types with specific sub-type constraints.",
      "description_length": 326,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Day",
      "library": "mrmime",
      "description": "This module defines a type-safe representation of days of the week as specified in email standards like RFC 822, RFC 2822, and RFC 5322. It provides functions to convert between string representations (e.g., \"Mon\", \"Tue\") and the corresponding enumerated values, with both safe and unsafe parsing options. The module supports pretty-printing and equality checks for day values.",
      "description_length": 377,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured.Encoder",
      "library": "mrmime",
      "description": "This module encodes unstructured data elements into a formatted output using the `Prettym` pretty-printing combinator library. It handles lists of `elt` values representing raw or encoded characters, supporting incremental encoding with `Ok_or_partial` status tracking. Concrete use cases include rendering email headers or message bodies with proper character encoding and line wrapping.",
      "description_length": 388,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Unstructured.Craft",
      "library": "mrmime",
      "description": "This module provides functions to construct and combine unstructured data elements, such as strings and Unicode characters, into structured values. It supports operations for creating elements with specific spacing, concatenating unstructured values, and compiling lists of elements into finalized structures. Concrete use cases include building email headers, formatting multipart content, and handling raw text in network protocols.",
      "description_length": 434,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Mailbox.Domain",
      "library": "mrmime",
      "description": "This module handles the construction and manipulation of email domains according to RFC standards. It supports domain types such as atoms, literals, IPv4, IPv6, and extensions, providing validation and safe creation functions. Use cases include parsing and generating valid email domains, handling literal domains with escaped characters, and working with IP-based domains.",
      "description_length": 373,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Mailbox.Literal_domain",
      "library": "mrmime",
      "description": "This module defines and constructs literal domains for email addresses, supporting IPv4, IPv6, and user-defined extensions. It provides constructors for each domain type and validation according to RFC 5321. Use this module to safely create and validate literal domain parts of email addresses, such as `[192.168.0.1]` or `[IPv6:::1]`.",
      "description_length": 335,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Encoder",
      "library": "mrmime",
      "description": "This module encodes unstructured text containing encoded words into a 7-bit clean format suitable for SMTP transmission. It operates on `Mrmime.Unstructured_with_encoded.t` values, ensuring that non-ASCII content is properly represented using RFC-2047 encoded words. It is specifically used when serializing email headers like Subject to maintain compatibility with SMTP servers that do not support UTF-8.",
      "description_length": 405,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Decoder",
      "library": "mrmime",
      "description": "Parses email addresses and lists of email addresses according to RFC 5322. Works with `Emile.mailbox` and lists of such values. Used to extract sender, recipient, and other mailbox fields from raw email headers.",
      "description_length": 211,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group.Decoder",
      "library": "mrmime",
      "description": "Parses email group addresses from raw string input using Angstrom combinators. Works with `Mrmime.Group.t` to represent structured group data. Useful for extracting mailbox groups in email header parsing workflows.",
      "description_length": 214,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Group.Encoder",
      "library": "mrmime",
      "description": "Handles the encoding of email group structures into human-readable string formats. Works with `Mrmime.Group.t` types to represent and format email groups, including display names and addresses. Useful for generating properly formatted email headers like `From`, `To`, or `Cc` fields.",
      "description_length": 283,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Encoder",
      "library": "mrmime",
      "description": "This module encodes content types and subtypes into string representations suitable for HTTP headers. It operates on `Mrmime.Content_type.Type.t`, `Mrmime.Content_type.Subtype.t`, and `Mrmime.Content_type.t` values, converting them into properly formatted textual output. Use it when serializing MIME content types for email or HTTP communication.",
      "description_length": 347,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Content_encoding.Encoder",
      "library": "mrmime",
      "description": "This module implements functions to encode data according to RFC 2045 transfer encodings, specifically handling Base64, Quoted-Printable, and 7bit/8bit/binary encodings. It operates on byte streams, transforming input data into properly encoded output suitable for email transmission. Use it when generating MIME-compliant messages that require proper content encoding for safe transport over SMTP.",
      "description_length": 398,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Decoder",
      "library": "mrmime",
      "description": "Parses email date-time strings into structured date representations. Works with `Mrmime.Date.t` values. Useful for extracting and normalizing timestamps from email headers.",
      "description_length": 172,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Unstructured.Decoder",
      "library": "mrmime",
      "description": "Parses unstructured text fields from email messages, handling whitespace and line folding according to RFC 5322. It produces values of type `Unstrctrd.t`, representing decoded unstructured text. Useful when processing email headers like `Subject` or `From` that contain human-readable text.",
      "description_length": 290,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Craft",
      "library": "mrmime",
      "description": "This module assembles and manipulates unstructured header fields containing encoded words, using functions like `e` for encoding text, `v` for literal text, and `sp` for space insertion. It works with lists of `elt` values, representing encoded or literal segments, and compiles them into a structured header value. Use it to construct email headers like Subject with UTF-8 content compatible with 7-bit SMTP transport.",
      "description_length": 419,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Header.Encoder",
      "library": "mrmime",
      "description": "This module provides a function to encode email headers into a pretty-printed format. It works with `Mrmime.Header.t` values, which represent structured email headers. A concrete use case is formatting email headers for transmission or display in a human-readable form.",
      "description_length": 269,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word.Decoder",
      "library": "mrmime",
      "description": "Parses MIME encoded words from input streams using Angstrom. Works with `Mrmime.Encoded_word.t` values. Useful for decoding non-ASCII text in email headers like subject lines or sender names.",
      "description_length": 191,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID.Encoder",
      "library": "mrmime",
      "description": "This module defines pretty-printing functions for email message IDs and domains. It works with `Mrmime.MessageID.domain` and `Mrmime.MessageID.t` types to format them into human-readable strings. Useful for logging or displaying message identifiers in email-related applications.",
      "description_length": 279,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded.Decoder",
      "library": "mrmime",
      "description": "This module provides a decoder for unstructured header fields that contain RFC-2047 encoded words, such as those found in email subjects. It processes byte strings into decoded text, handling character set conversions and encoded word syntax. Use it when parsing email headers to correctly interpret non-ASCII content transmitted over 7-bit SMTP.",
      "description_length": 346,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Type",
      "library": "mrmime",
      "description": "This module provides tools to define and manipulate MIME content types, including standard discrete types (e.g., `Text`, `Image`), composite types (`Message`, `Multipart`), and extensions (`Ietf_token`, `X_token`). It operates on a core type representing content-type values, offering constructors, classification predicates (e.g., `is_multipart`), and utilities to parse string representations into typed values or serialize them back, with explicit error handling for malformed input. Typical use cases include parsing MIME headers, validating multipart message structures, and ensuring correct type representation during email transmission or content processing.",
      "description_length": 665,
      "index": 22,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Mrmime.MessageID.Domain",
      "library": "mrmime",
      "description": "This module handles the creation and manipulation of email message ID domains according to RFC standards. It supports two domain types: atoms, which represent standard domain names, and literals, which represent IP addresses or other raw forms, with strict validation and optional escaping of control characters. Use cases include constructing valid message IDs for email headers and safely formatting domains for transmission.",
      "description_length": 427,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Month",
      "library": "mrmime",
      "description": "This module provides operations to convert between month values and their string or integer representations, enforcing case-sensitive, capitalized string formats and supporting both error-aware and exception-based error handling. It works with an enumerated type representing months (from `Jan` to `Dec`), offering utilities like equality checks and pretty-printing for use in contexts requiring RFC-compliant date parsing or formatting, such as email headers or structured log analysis.",
      "description_length": 487,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date.Encoder",
      "library": "mrmime",
      "description": "Encodes date values into a human-readable string format suitable for email headers. Works with the `Mrmime.Date.t` type representing parsed date information. Useful for generating correctly formatted `Date:` headers in email messages.",
      "description_length": 234,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Header.Decoder",
      "library": "mrmime",
      "description": "Parses MIME headers into a structured format using a map of field name witnesses to guide decoding. It operates on `Mrmime.Header.t` values using the Angstrom parser combinator library. This module is used to decode raw header data into typed fields during MIME message parsing.",
      "description_length": 278,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Address.Encoder",
      "library": "mrmime",
      "description": "This module defines pretty-printing functions for email addresses and lists of email addresses. It works with the `Mrmime.Address.t` type and its list variant, formatting them into human-readable strings. Use it to serialize email address data for display or logging purposes.",
      "description_length": 276,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Phrase",
      "library": "mrmime",
      "description": "This module constructs and manipulates mailbox display names according to email standards. It supports creating phrases from plain text, encoded words, and dots, with functions to safely escape or encode content as needed. Use it to generate valid email headers with properly formatted recipient names, including handling of UTF-8 and quoted-printable or base64 encodings.",
      "description_length": 372,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Map",
      "library": "mrmime",
      "description": "This module implements a finite map with ordered `Mrmime.Field_name.t` keys and polymorphic values, offering operations for key-value manipulation, list-valued field merging, and ordered traversal. It supports transformations, filtering, and bulk operations via sequences, with specialized functions for handling email headers where field names are case-insensitive yet maintain a total order. Use cases include parsing and manipulating structured header data in email messages, leveraging ordered key access and list aggregation.",
      "description_length": 530,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Date.Zone",
      "library": "mrmime",
      "description": "This module defines and manipulates time zone representations according to email standards, supporting both common abbreviations (like UT, GMT, EST) and custom offsets (TZ). It provides parsing from strings, conversion to strings, and equality checks for time zone values. Use cases include handling time zone fields in email headers and validating time zone inputs in message parsing workflows.",
      "description_length": 395,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field.Encoder",
      "library": "mrmime",
      "description": "This module provides a pretty-printing function for encoding email fields into a textual representation. It works with the `Mrmime.Field.field` type, which represents individual fields in an email header. A concrete use case is generating valid email headers by formatting field names and values according to RFC 5322.",
      "description_length": 318,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field_name.Encoder",
      "library": "mrmime",
      "description": "This module provides a pretty-printing function for converting `Mrmime.Field_name.t` values into string representations. It is used to serialize email field names in a human-readable format. Concrete use cases include generating valid email headers and debugging field name values during email parsing or construction.",
      "description_length": 318,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Address.Decoder",
      "library": "mrmime",
      "description": "Parses email addresses and lists of email addresses according to RFC 5322. Works with `Mrmime.Address.t` and lists of such values. Useful for extracting sender, recipient, or CC fields from raw email headers.",
      "description_length": 208,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Group.Phrase",
      "library": "mrmime",
      "description": "This module constructs and manipulates email phrases, handling plain text and encoded words with `q` and `b` encoding options. It provides functions to create phrase elements from strings, validate or coerce structured phrase data, and convert final phrases to strings. Use it to build email headers like `From` or `Subject` that require proper handling of special characters and encodings.",
      "description_length": 390,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type.Parameters",
      "library": "mrmime",
      "description": "This module manages key-value pairs for content-type parameters, where keys are strings and values are strings or tokens, providing operations for creation, modification, and validation against RFC 2045. It supports conversion to lists, pretty-printing, and comparison, enabling tasks like parsing and generating MIME headers in email or HTTP. The Map submodule extends this functionality with an ordered, polymorphic map structure that preserves insertion order and supports standard map operations, including merging, filtering, and iteration. Together, they facilitate structured handling of header parameters, from parsing and transformation to serialization in network protocols.",
      "description_length": 684,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Encoder",
      "library": "mrmime",
      "description": "This module provides pretty-printing functions for encoding email-related data types such as words, phrases, local parts, and mailboxes into textual representations suitable for use in email headers. It handles structured data from the Emile and Mrmime modules, specifically formatting mailbox information for transmission or display. Use this module when generating valid email headers that include properly encoded sender, recipient, or other mailbox fields.",
      "description_length": 460,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field.Decoder",
      "library": "mrmime",
      "description": "Parses email header fields from raw input, handling structured and unstructured field values. It works with field names and constructs `field` values using Angstrom parsers. This module is useful for decoding specific headers like `Content-Type` or `From` into typed representations during email message parsing.",
      "description_length": 312,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Iana.Set",
      "library": "mrmime",
      "description": "This module provides a suite of immutable set operations for managing collections of strings, primarily focused on IANA-registered values used in email systems. It supports standard functional manipulations like union, intersection, filtering, and ordered iteration, along with conversions to and from lists and sequences. The module is particularly suited for handling sets of MIME types, header fields, or other standardized email-related identifiers where efficient membership checks and transformations are required.",
      "description_length": 520,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID.Decoder",
      "library": "mrmime",
      "description": "Parses email message identifiers from input streams using Angstrom combinators. Works with `Mrmime.MessageID.t` values, decoding them according to RFC 5322. Useful for processing email headers in network clients or mail processing pipelines.",
      "description_length": 241,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Content_type.Decoder",
      "library": "mrmime",
      "description": "Parses MIME content types from input streams using Angstrom combinators. It handles top-level types, subtypes, and structured content-type headers. Useful for decoding `Content-Type` fields in email or HTTP messages into typed representations.",
      "description_length": 243,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox.Local",
      "library": "mrmime",
      "description": "This module handles the construction and validation of email local parts according to RFC 5322. It provides functions to create and manipulate local parts from strings or lists of words, ensuring proper escaping and formatting. Use this module when building or parsing email addresses where the local part must adhere to email standards, such as in email validation or message generation.",
      "description_length": 388,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_encoding.Decoder",
      "library": "mrmime",
      "description": "Handles decoding of email content encoded with transfer encodings like Base64, Quoted-Printable, and 7bit. It operates on byte streams, converting encoded data into raw bytes for further processing. Useful when parsing MIME messages to extract and interpret attachments or non-ASCII content.",
      "description_length": 291,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Header",
      "library": "mrmime",
      "description": "This module manages email headers by supporting operations to add, remove, and query fields, while converting between structured and list representations. It handles complex data types like content types and encodings, and works with submodules to parse raw header streams and serialize headers for protocols such as SMTP. One submodule decodes MIME headers into typed fields using Angstrom, enabling precise parsing of raw data, while the other formats headers for human-readable display or transmission. Together, they allow tasks like parsing incoming email messages and generating properly formatted headers for sending.",
      "description_length": 624,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Date",
      "library": "mrmime",
      "description": "This module processes email date-time values with precise construction, validation, and time zone handling. It supports conversion to and from POSIX timestamps, structured encoding and decoding, and integrates submodules for days of the week, months, parsing, formatting, and time zones. You can parse an RFC 5322 date string into a structured value, convert it to a timestamp, extract or modify its components, and then format it back into a valid email header string. The module enables full round-trip handling of email dates with type-safe parts and strict format compliance.",
      "description_length": 579,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Iana",
      "library": "mrmime",
      "description": "This module manages a database that maps IANA media types to file extensions, using a map of strings to sets of strings for efficient lookups. It provides direct access to the `database` value for querying content types and integrates with its submodules to support operations on sets of related values. The `Set` submodule enables functional manipulation of string collections, such as union, intersection, and filtering, making it suitable for handling MIME types and email header fields. Together, the module and its submodules allow for structured, efficient handling of IANA-registered identifiers and their associations.",
      "description_length": 626,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Group",
      "library": "mrmime",
      "description": "This module manages email group structures, allowing creation and manipulation of groups with names and mailbox lists while ensuring validity. It provides core operations for equality checks, pretty-printing, and serialization via dedicated submodules, working with structured types like `Mrmime.Group.t` to represent groups and phrases. The parsing submodule extracts group data from raw strings, the encoding submodule generates MIME-compliant string representations, and the phrase submodule handles text formatting with support for encoded words. Together, these enable tasks like constructing valid email headers, parsing recipient lists, and formatting display names with special characters.",
      "description_length": 697,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_encoding",
      "library": "mrmime",
      "description": "This module handles content transfer encodings used in email, providing data types like `Base64`, `Quoted_printable`, and `Seven_bit` to represent encoding schemes. It supports parsing, equality checks, and formatting of encodings, along with encoding and decoding byte streams for MIME compliance. The encoding submodule transforms data into Base64, Quoted-Printable, or 7bit/8bit/binary formats, while the decoding submodule reverses these encodings, extracting raw bytes from encoded email content. Use this module to prepare email attachments for transmission or to decode received messages containing non-ASCII or binary data.",
      "description_length": 631,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.MessageID",
      "library": "mrmime",
      "description": "This module processes email message IDs with support for parsing, comparison, and formatting, representing IDs as a combination of local part and domain. It provides structured handling of domains, including atoms and literals, with strict RFC-compliant validation and manipulation. The module enables constructing valid message IDs, decoding them from email headers, and formatting them for display or logging. Together with its submodules, it offers a complete workflow from parsing raw message IDs to structured manipulation and human-readable output.",
      "description_length": 554,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Field_name",
      "library": "mrmime",
      "description": "This module handles field names in MIME messages, offering creation, validation, and normalization routines that ensure compliance with email standards. It defines a dedicated type `t` for field names and includes operations for case-insensitive comparison, safe string conversion, and canonical capitalization, enabling reliable parsing and construction of email headers such as `content_type` or `subject`. The module supports a `Map` structure for associating field names with values, allowing ordered traversal, list-valued field merging, and transformations, while the parsing submodule decodes field names from input streams with strict validation. A dedicated pretty-printing function converts field names to human-readable strings, useful for header serialization and debugging.",
      "description_length": 786,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Location",
      "library": "mrmime",
      "description": "This module represents and manipulates byte range locations within a document, primarily working with `point` and `zone` types to define positions and intervals. It supports creating, merging, and querying locations, as well as attaching location metadata to arbitrary values. Concrete use cases include tracking the position of MIME entities or parsing components within a byte stream.",
      "description_length": 386,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mt",
      "library": "mrmime",
      "description": "This module handles the construction and serialization of email messages, supporting operations to create parts, multipart sections, and complete emails with specified headers and encodings. It works with data types like `buffer`, `field`, `part`, `multipart`, and `t`, which represent components of an email structure. Concrete use cases include building MIME-compliant emails with custom boundaries, encoding content, and streaming the final output.",
      "description_length": 451,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Unstructured_with_encoded",
      "library": "mrmime",
      "description": "This module handles unstructured header fields with support for RFC-2047 encoded words, allowing UTF-8 content to be represented in 7-bit SMTP. It provides decoding, encoding, and crafting operations for header fields like Subject, preserving both plain text and encoded elements. The core data type is a list of elements (`elt`), which can be either raw unstructured text or encoded words with charset and decoded content. Encoding is done through functions like `e` for text encoding, `v` for literal insertion, and `sp` for spaces, while decoding processes byte strings into structured text, handling charset conversions and encoded word syntax. Use it to construct, serialize, or parse email headers such as Subject that contain non-ASCII content for compatibility with legacy SMTP servers.",
      "description_length": 794,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Content_type",
      "library": "mrmime",
      "description": "This module handles MIME content type manipulation, supporting creation, analysis, and modification of media type hierarchies with strict RFC compliance. It provides structured representations for types like `Text`, `Image`, and `Multipart`, along with operations to validate, classify, and serialize them. Submodules manage subtypes, parameters as key-value pairs, and parsing from input streams, enabling tasks like email header decoding and content dispatch. Specific examples include constructing MIME types with custom subtypes, extracting charset parameters, and serializing content types for HTTP headers.",
      "description_length": 612,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mail",
      "library": "mrmime",
      "description": "This module provides low-level parsers for RFC 5322 email messages, handling both header and body parsing. It supports two parsing modes: `heavy_octet` stores body content directly in memory, while `light_octet` streams body data to an external emitter. The `mail` and `stream` functions parse full email messages, with `stream` allowing custom handling of body content through user-provided emitters.",
      "description_length": 401,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Address",
      "library": "mrmime",
      "description": "This module represents email addresses with a variant type that distinguishes between individual mailboxes and groups, offering constructors for creation and functions for comparison and formatting. Its `Decoder` and `Encoder` submodules handle parsing from and generating to RFC 5322-compliant string representations. Use it to build, manipulate, and serialize email addresses, such as extracting recipient lists from headers or displaying sender information. The combined functionality supports both structured data handling and string-based interchange of email addresses.",
      "description_length": 575,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Field",
      "library": "mrmime",
      "description": "This module models email header fields with precise types for names and values, enabling structured manipulation of headers in email clients or servers. It includes core operations to construct and render fields, while dedicated submodules handle parsing and pretty-printing, supporting both structured and unstructured field values. The parsing submodule decodes headers like `Content-Type` or `From` into typed values using Angstrom, and the encoding submodule generates RFC 5322-compliant textual representations. Together, these components provide a complete pipeline for processing email headers from raw input to formatted output.",
      "description_length": 636,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime.Unstructured",
      "library": "mrmime",
      "description": "This module processes unstructured data with nested box structures, converting between string representations and structured elements using parsing and rendering operations. It supports the creation, combination, and encoding of unstructured values, such as strings and Unicode characters, with precise layout control, and handles lists of `elt` values for incremental processing. The module's API includes functions for opening and closing boxes with identifiers, concatenating elements, and compiling finalized structures, while its submodules support tasks like rendering email headers, formatting multipart content, and parsing RFC 5322-compliant unstructured text fields such as `Subject` or `From`. It can encode elements with proper line wrapping, construct structured values with specific spacing, and parse folded lines into decoded text representations.",
      "description_length": 863,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Mailbox",
      "library": "mrmime",
      "description": "This module manages email mailbox addresses by combining mailbox construction, manipulation, and parsing with support for domains, local parts, display names, and literal domains. It provides data types for mailboxes, domains, and local parts, along with operations to safely create, compare, escape, and encode these components. You can use it to validate email addresses, generate properly formatted email headers, and parse mailbox fields from raw input. Submodules handle specific tasks like domain validation, literal IP domains, display name encoding, and header generation.",
      "description_length": 580,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Encoded_word",
      "library": "mrmime",
      "description": "This module encodes and decodes text into MIME-encoded words using Base64 or quoted-printable schemes, primarily for handling non-ASCII characters in email headers. It operates on strings and charset-aware data structures, normalizing inputs to UTF-8 while supporting legacy encodings like UTF-16 and US-ASCII. The encoding submodule generates RFC-compliant email headers such as subject or from fields with international characters, while the decoding submodule parses MIME encoded words from input streams using Angstrom. Together, they enable robust handling of internationalized email headers for both generation and interpretation.",
      "description_length": 636,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mrmime.Hd",
      "library": "mrmime",
      "description": "This module implements a streaming decoder for parsing email headers, where each header field is processed according to a specified schema. It works with string inputs and decodes them into structured fields, malformed results, or end markers. Concrete use cases include parsing MIME headers like Content-Type or Date, where each field's value is validated and structured based on predefined expectations.",
      "description_length": 405,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mrmime",
      "library": "mrmime",
      "description": "This module processes email headers and associated data structures with comprehensive support for parsing, constructing, and manipulating MIME-compliant messages. It defines core types for email components such as headers, content types, message IDs, mailboxes, and encodings, along with operations to encode, decode, validate, and format these elements according to RFC standards. You can parse raw email streams into structured headers, construct and serialize MIME messages with custom boundaries, handle internationalized headers with encoded words, and manage content transfer encodings for attachments or binary data. Specific tasks include decoding a Base64-encoded subject line, extracting and reformatting sender addresses, or building a multipart email with properly structured content types and transfer encodings.",
      "description_length": 825,
      "index": 61,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 63,
    "meaningful_modules": 62,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9841269841269841
  },
  "statistics": {
    "max_description_length": 863,
    "min_description_length": 172,
    "avg_description_length": 433.5,
    "embedding_file_size_mb": 0.22562694549560547
  }
}