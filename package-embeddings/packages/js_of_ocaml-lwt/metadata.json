{
  "package": "js_of_ocaml-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:43.573651",
  "modules": [
    {
      "module_path": "Js_of_ocaml_lwt.Jsonp",
      "description": "Provides functions to execute JSONP requests by generating callback names and handling timeouts. Operates with URLs, callback parameters, and Lwt threads for asynchronous execution. Used to fetch data from cross-domain APIs that require JSONP callbacks, such as legacy web services or third-party widgets.",
      "description_length": 305,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml_lwt.Lwt_js",
      "description": "Provides functions for asynchronous control flow in JavaScript environments, including suspending execution for a specified duration or yielding control to the event loop. Operates with Lwt threads and floating-point time values. Used to manage timing and concurrency in browser-based or Node.js applications.",
      "description_length": 309,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_lwt.Lwt_js_events",
      "description": "The module enables asynchronous handling of browser events, including mouse, keyboard, touch, and media-related interactions, by providing functions to register event handlers on DOM elements and manage event streams with Lwt promises. It supports operations like event looping, capture configuration, and throttling for scenarios such as real-time user input processing, media playback control, and responsive UI adjustments. Specific use cases involve managing pointer events, form submissions, and clipboard actions with non-blocking, concurrent event processing.",
      "description_length": 566,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "js_of_ocaml-lwt",
      "description": "Converts OCaml bytecode into executable JavaScript, enabling deployment of OCaml code in web browsers and Node.js environments. Handles OCaml's native data types and integrates with browser-specific APIs through generated bindings. Supports embedding OCaml logic in web applications without requiring JavaScript knowledge.",
      "description_length": 322,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml_lwt",
      "description": "provides asynchronous capabilities for web development through Lwt threads, enabling JSONP requests, timing control, and event handling. It supports URL-based data fetching with callback management, delays and yield operations for concurrency, and event registration for interactive UI elements. Functions include generating JSONP callbacks, pausing execution, and processing browser events asynchronously. Examples include fetching cross-domain data, managing real-time input, and coordinating timed operations in web applications.",
      "description_length": 532,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 5,
    "filtered_empty_modules": 5,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 566,
    "min_description_length": 305,
    "avg_description_length": 406.8,
    "embedding_file_size_mb": 0.0186309814453125
  }
}