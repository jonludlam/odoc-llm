{
  "package": "ppx_fields_conv",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:34.759478",
  "modules": [
    {
      "module_path": "Ppx_fields_conv.Selector.Iterator",
      "library": "ppx_fields_conv",
      "description": "This module defines a polymorphic variant type `t` representing operations for generating field-based functions such as `map`, `fold`, `iter`, and `to_list`. It is used to specify which field-level transformation or traversal should be applied in code generation contexts. Concrete use cases include selecting field iterators for record processing, enabling transformations like mapping over fields or folding into a single result value.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_fields_conv.Selector.Per_field",
      "library": "ppx_fields_conv",
      "description": "This module defines a variant type `t` that represents different aspects of record fields, such as getters, setters, field names, and field definitions. It is used to select and manipulate specific components of record types in a structured way. Concrete use cases include generating or processing record field operations during code transformation or analysis.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_fields_conv.Selector.Direct_iterator",
      "library": "ppx_fields_conv",
      "description": "This module defines a polymorphic variant type `t` representing specific operations for field-based data processing, such as `Fold`, `Map`, and `Iter`. It is used to select and apply transformations or traversals over record fields in generated code. Concrete use cases include implementing custom mapping or folding logic for record fields during serialization, validation, or deep equality checks.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_fields_conv.Selector",
      "library": "ppx_fields_conv",
      "description": "This module organizes a set of selector types that control how record fields are accessed, transformed, and traversed. It provides polymorphic variants for specifying operations like `map`, `fold`, and `iter` over fields, along with representations for field components such as getters and setters. These types enable precise code generation for tasks like serializing records, validating field values, or defining custom traversal logic. For example, a selector can be used to generate a function that maps over specific fields of a record, or to extract field names and definitions for analysis or transformation.",
      "description_length": 615,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_fields_conv",
      "library": "ppx_fields_conv",
      "description": "This module generates functions for accessing and manipulating record fields, enabling operations like selection, iteration, and transformation across OCaml record types. It produces modules with accessors, transformers, and traversal functions, while its child module defines selector types that guide how fields are processed, supporting custom logic like mapping over specific fields or extracting field metadata. These selectors use polymorphic variants to specify actions such as `map`, `fold`, and `iter`, allowing precise control over code generation for tasks like serialization or validation. For example, it can derive a function to map over all fields of a record, or generate a list of field names and their values for inspection.",
      "description_length": 742,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 742,
    "min_description_length": 361,
    "avg_description_length": 510.8,
    "embedding_file_size_mb": 0.018596649169921875
  }
}