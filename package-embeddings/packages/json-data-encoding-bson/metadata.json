{
  "package": "json-data-encoding-bson",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:47.838838",
  "modules": [
    {
      "module_path": "Json_repr_bson.Repr",
      "library": "json-data-encoding-bson",
      "description": "This module provides functions to convert between a BSON value and its corresponding view in a common format, enabling structured access and manipulation. It operates directly on `value` (BSON) and `view` types, facilitating bidirectional transformations. Concrete use cases include serializing and deserializing BSON data for storage or transmission, and inspecting BSON structures in a normalized form.",
      "description_length": 404,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_repr_bson.Json_encoding",
      "library": "json-data-encoding-bson",
      "description": "This module provides functions to encode OCaml values into BSON format and decode BSON values back into OCaml types using specified encodings. It supports operations like `construct` for encoding, `destruct` for decoding with options for field handling, and `custom` for defining custom BSON conversions with schema. It works directly with OCaml types and BSON representations, enabling precise data serialization and deserialization for storage or transmission.",
      "description_length": 462,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_repr_bson.Json_query",
      "library": "json-data-encoding-bson",
      "description": "This module provides functions to query, insert, replace, and merge values in a BSON-like JSON structure using a path-based query system. It operates directly on `Json_repr_bson.Repr.value` types, enabling precise manipulation of nested documents. Concrete use cases include extracting subdocuments, updating specific fields, and combining JSON objects in a database-like manner.",
      "description_length": 379,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_repr_bson",
      "library": "json-data-encoding-bson",
      "description": "This module serializes and deserializes BSON data to and from an intermediate representation, working with `bytes` and `bson` types for efficient parsing and generation. It supports structured access through views, bidirectional conversion between OCaml and BSON, and path-based manipulation of nested documents. You can encode OCaml values to BSON, decode them with custom schemas, inspect BSON structures, or update specific fields in a document tree. Examples include converting OCaml records to BSON for storage, extracting subdocuments via query paths, and normalizing BSON for inspection or transmission.",
      "description_length": 610,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 379,
    "avg_description_length": 463.75,
    "embedding_file_size_mb": 0.014951705932617188
  }
}