{
  "package": "toml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:10:15.588908",
  "modules": [
    {
      "module_path": "Toml.Types.Table.Key",
      "library": "toml",
      "description": "This module represents and manipulates keys used in TOML tables. It provides functions to convert keys to and from strings, and to compare keys for ordering. It is used when working with TOML table keys to ensure consistent handling and ordering.",
      "description_length": 246,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Types.Table",
      "library": "toml",
      "description": "This module manipulates ordered mappings of TOML keys to arbitrary values, enabling precise control over key management, value transformations, and structural composition. It supports operations like merging nested tables, filtering key-value pairs by criteria, and converting between tables and ordered sequences while preserving insertion order. Typical applications include parsing configuration files with hierarchical structure, normalizing TOML data for serialization, and building validated key-value collections with dependency-aware ordering.",
      "description_length": 551,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Compare",
      "library": "toml",
      "description": "This module defines comparison functions for TOML values, arrays, and tables. It supports direct structural comparisons of TOML data types, returning standard integer ordering results. Use it to sort or check equality of TOML data structures directly.",
      "description_length": 251,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Printer",
      "library": "toml",
      "description": "This module provides functions to convert TOML values, tables, and arrays into their string representations, either directly or through a formatter. It works with the `value`, `table`, and `array` types defined in `Toml.Types`. Use this module to serialize TOML data structures into valid TOML strings for output or logging.",
      "description_length": 324,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Unicode",
      "library": "toml",
      "description": "Converts a string from UTF-16 or UTF-32 encoding to UTF-8. Works with standard OCaml strings representing Unicode text. Useful when handling input from sources that use non-UTF-8 encodings, ensuring compatibility with systems expecting UTF-8.",
      "description_length": 242,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Min",
      "library": "toml",
      "description": "This module constructs TOML tables from string keys and key-value pairs. It provides functions to convert a string into a valid table key and to build a table from a list of key-value tuples. Use it to programmatically create TOML configurations, such as generating settings files or structured data exports.",
      "description_length": 308,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Types",
      "library": "toml",
      "description": "This module defines the core data structures for representing TOML documents, including tables and heterogeneous arrays. It provides precise types for scalar values, lists, nested arrays, and tables with ordered key-value pairs. These structures support use cases like parsing and validating TOML configuration files, transforming hierarchical data, and maintaining ordered key-value associations during serialization.",
      "description_length": 418,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Toml.Lenses",
      "library": "toml",
      "description": "This module provides partial lenses for safely accessing and modifying nested values in TOML abstract syntax trees, supporting operations like field extraction, value updates, and array transformations. It works directly with TOML AST constructs such as tables, arrays, and primitive values, offering type-safe accessors for specific data like strings or integers. The lenses enable functional manipulation of deeply nested structures, such as editing values within multi-layered arrays or updating specific keys in hierarchical tables.",
      "description_length": 536,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Toml.Parser",
      "library": "toml",
      "description": "This module parses TOML-formatted input into structured data, handling strings, files, and input channels. It processes UTF-8 encoded TOML data, returning either a parsed table or an error with precise location information. Use it to load configuration files, read TOML data from streams, or validate TOML content with detailed error reporting.",
      "description_length": 344,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Toml",
      "library": "toml",
      "description": "This module implements TOML data handling with functions for parsing, serializing, comparing, and manipulating TOML structures. It works with tables, arrays, and primitive values, supporting operations like loading configuration files, modifying nested fields, and generating TOML strings. Concrete use cases include reading application settings, transforming structured data, and validating TOML input with detailed error reporting.",
      "description_length": 433,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 551,
    "min_description_length": 242,
    "avg_description_length": 365.3,
    "embedding_file_size_mb": 0.14538288116455078
  }
}