{
  "package": "fsml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:09:46.718216",
  "modules": [
    {
      "module_path": "Fsml.Tevents.Ops",
      "library": "fsml",
      "description": "Merges sequences of timed events based on clock cycles, combining events occurring at the same time. Works with lists of timed events, where each event is a tuple of an integer timestamp and a list of assignments. Useful for synchronizing and interleaving event streams in reactive systems or simulation frameworks.",
      "description_length": 315,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Tevents",
      "library": "fsml",
      "description": "This module manages timed event sets using clocked lists of events, enabling precise modeling of digital circuits by capturing signal transitions at specific clock cycles. It supports merging event sequences across clocks, combining events at the same timestamp, and generating new events from value changes. Key data types include timestamped event lists and assignment sets, with operations to interleave, synchronize, and derive events. For example, it can merge multiple signal transitions into a unified event stream or trigger events based on changes in input signals at defined clock edges.",
      "description_length": 597,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Guard",
      "library": "fsml",
      "description": "This module represents transition guards as expressions and provides operations to evaluate them in a given environment, returning boolean results. It supports serialization to and from JSON, pretty-printing, and string conversion. Use this module to define and validate conditions that control state transitions in a state machine.",
      "description_length": 332,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Fsm",
      "library": "fsml",
      "description": "This module implements finite state machines with Mealy and Moore transformations, defactorization, and cleaning operations. It works with states, transitions, inputs, outputs, and local variables, supporting modifications to output assignments and variable-based state expansion. Concrete use cases include converting state-based outputs to transition-based actions, simplifying FSM structure by removing unreachable states, and serializing FSMs to JSON for storage or transmission.",
      "description_length": 483,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Builtins",
      "library": "fsml",
      "description": "This module defines predefined environments for type checking and evaluation. It includes `typing_env` for associating variable names with type schemes and `eval_env` for mapping variable names to expression values. These environments are used to provide initial context when interpreting or analyzing Fsml programs.",
      "description_length": 316,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.C",
      "library": "fsml",
      "description": "This module generates C code from a finite state machine (FSM) definition, producing header and source files that implement the FSM as a step-based function. It works with the `Fsml.Fsm.t` type, which represents the structure and behavior of the state machine, and uses a configuration record to customize variable and file names. The generated C function reads input values from a context structure, determines the next state and actions, and updates outputs and state variables accordingly, enabling direct integration into C projects for embedded systems or event-driven logic.",
      "description_length": 580,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Transition",
      "library": "fsml",
      "description": "This module defines transitions between states in a finite state machine, represented as tuples of source state, guards, actions, and target state. It provides functions to check if a transition can fire based on the current state and environment, and to serialize or display transitions. Use cases include simulating state machine behavior and debugging transitions through string or JSON representations.",
      "description_length": 406,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Vcd",
      "library": "fsml",
      "description": "Writes and visualizes simulation results in VCD format. Converts a list of timed event sets and an FSM into a VCD file, and optionally opens it with a viewer. Useful for debugging digital circuit simulations by tracking signal changes over time.",
      "description_length": 245,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Event",
      "library": "fsml",
      "description": "Handles simulation events represented as identifier-value pairs, providing direct conversion and string formatting. Exposes event data through `to_string` for logging or debugging specific state changes. Useful for tracking variable updates during simulation runs.",
      "description_length": 264,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Parse",
      "library": "fsml",
      "description": "This module directly constructs FSM components from string representations using Menhir parsers. It supports parsing individual and lists of guards, actions, transitions, and stimuli sequences, along with full FSM definitions. Use cases include dynamically loading FSM configurations from text files or user input, and generating FSM instances from serialized data.",
      "description_length": 365,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Expr",
      "library": "fsml",
      "description": "The module provides operations for constructing, evaluating, and transforming expressions in an abstract syntax tree (AST), with support for environment-based variable resolution and value computation. It works with expressions, values, and identifiers as core data structures, enabling use cases like interpreting Fsml programs, managing symbolic environments, and serializing AST nodes to JSON or human-readable formats. Key capabilities include expression simplification, type-aware construction, and environment manipulation for dynamic scoping or state tracking.",
      "description_length": 567,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Seqmodel",
      "library": "fsml",
      "description": "This module defines a sequential model structure for finite state machines, capturing states, inputs, outputs, variables, and transitions. It supports building and representing FSMs with explicit state transitions and actions, primarily used by C and VHDL code generation backends. The `make` function constructs a type-checked sequential model from an FSM, organizing transitions by source state for efficient processing.",
      "description_length": 422,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Simul",
      "library": "fsml",
      "description": "Handles simulation of finite state machines by executing transitions and updating state based on input stimuli. It operates on a context containing the current state and evaluation environment, and supports stepping through transitions or running full simulations with configurable stopping conditions. Used to model and test FSM behavior under specific input sequences and timing constraints.",
      "description_length": 393,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Misc",
      "library": "fsml",
      "description": "This module handles list transformations, string formatting, and basic file system checks. It provides functions for generating strings from lists and options, parsing token streams into lists, creating Cartesian products, replacing elements in association lists, and computing bit sizes or powers of two. Use cases include formatting output for debugging, parsing structured text inputs, generating indentation or spacing, and ensuring directory paths exist before file operations.",
      "description_length": 482,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.State",
      "library": "fsml",
      "description": "This module defines operations for working with finite state machine (FSM) states represented as strings. It provides functions for pretty-printing, converting to and from JSON, and displaying state values. It is used to serialize and debug individual FSM states within a larger state machine implementation.",
      "description_length": 308,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Clock",
      "library": "fsml",
      "description": "This module defines a clock type as an integer and provides functions to format and display clock values. It supports operations to pretty-print and convert clocked values, which are parameterized by a generic type, to strings. Use this module to handle time-stamped data in a typed and consistent manner, such as logging events with associated clock cycles or displaying timed state transitions.",
      "description_length": 396,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Dot",
      "library": "fsml",
      "description": "This module generates DOT representations of finite state machines and provides options to customize their visual layout. It works with FSM structures, allowing users to write DOT files or directly view the FSM using a specified rendering command. Concrete use cases include visualizing state transitions for debugging or documentation purposes.",
      "description_length": 345,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Fsm_parser",
      "library": "fsml",
      "description": "This module parses lexical tokens into structured FSM components like transitions, guards, and actions. It processes lexbuf input using tokenizer functions, producing typed values such as `Fsml.Transition.t`, `Fsml.Action.t`, and `Fsml.Fsm.t`. It is used to construct finite state machines from parsed input, handling stimuli, guards, and state transitions with specific event and value lists.",
      "description_length": 393,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Action",
      "library": "fsml",
      "description": "This module defines transition actions that manipulate state variables by assigning expressions to identifiers. It supports serializing actions to JSON, pretty-printing, and converting to strings. The primary use case is simulating state transitions in a model by evaluating assignments within a given environment and generating resulting events.",
      "description_length": 346,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Typing",
      "library": "fsml",
      "description": "This module performs type checking for finite state machines (FSMs), their guards, actions, and stimulus sequences. It ensures expressions and events conform to expected types, with options to enforce monomorphic typing and include a clock variable. It operates on FSMs, guards, actions, and event lists, validating type consistency within their contexts.",
      "description_length": 355,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Vhdl",
      "library": "fsml",
      "description": "This module generates VHDL code for finite state machines (FSMs) with configurable signal names and encoding options. It works with FSMs represented as `Fsml.Fsm.t` values and supports configuration via a `config` record that controls signal names, reset behavior, clocking, and integer encoding. Concrete use cases include synthesizing hardware descriptions for digital circuits where precise control over state encoding and signal naming is required.",
      "description_length": 452,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Fsm_lexer",
      "library": "fsml",
      "description": "Implements lexical analysis for parsing finite state machine definitions. It tokenizes input using a predefined table of keywords and standard lexing tables, driving the parser with a main function that processes lex buffers. Useful for interpreting configuration files or domain-specific languages describing state transitions.",
      "description_length": 328,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml",
      "library": "fsml",
      "description": "This module suite models and manipulates finite state machines with precise timing, type-checked expressions, and simulation capabilities. It centers on FSMs with transitions guarded by expressions, timed events synchronized across clocks, and environments for evaluation and type checking. You can define state machines with Mealy or Moore outputs, simulate their behavior under timed stimuli, generate C or VHDL code for implementation, and visualize their structure in DOT or VCD formats. Examples include merging signal transitions into a unified event stream, generating synthesizable VHDL from an FSM model, or stepping through state transitions in a simulation context.",
      "description_length": 676,
      "index": 22,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 23,
    "filtered_empty_modules": 2,
    "retention_rate": 0.92
  },
  "statistics": {
    "max_description_length": 676,
    "min_description_length": 245,
    "avg_description_length": 407.2173913043478,
    "embedding_file_size_mb": 0.08397674560546875
  }
}