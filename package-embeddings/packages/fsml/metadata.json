{
  "package": "fsml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 26,
  "creation_timestamp": "2025-06-18T16:36:44.623341",
  "modules": [
    {
      "module_path": "Fsml.Tevents.Ops",
      "description": "Merges two lists of time-stamped events, combining events at the same time by merging their state updates. Operates on lists of tuples containing a timestamp and a list of variable assignments. Used to synchronize and combine event sequences from different sources in a simulation context.",
      "description_length": 289,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Action",
      "description": "Formats, serializes, and deserializes action data, and executes actions to produce event lists. Operates on a custom action type, converting it to and from JSON, strings, and pretty-printed representations. Used to apply actions within an expression environment and capture resulting events.",
      "description_length": 291,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Builtins",
      "description": "Provides type and evaluation environments for built-in values, mapping identifiers to type schemes and evaluated expressions. Works with lists of string-type pairs and string-expression pairs. Used to initialize type checking and evaluation contexts in the interpreter.",
      "description_length": 269,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.C",
      "description": "Generates C code for finite state machines, producing header and implementation files that define a function to execute a single step of the machine. It operates on FSM data structures, embedding state transitions, actions, and context variables into C functions. The output supports real-time execution of state machines within C applications, with customizable output directories and file prefixes.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Clock",
      "description": "Formats and converts clock values and clocked data structures, supporting pretty-printing and string representation. Operates on integer-based clock timestamps and tuples pairing a clock with associated data. Used to serialize timing information in event logs and synchronize data with timestamps.",
      "description_length": 297,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Dot",
      "description": "Writes a finite state machine in DOT format to a file and launches a viewer application to display it, with customizable output filename and viewer command. Operates on FSM data structures and configuration options that control rendering details. Allows direct visualization of state transitions and graph layout adjustments.",
      "description_length": 325,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Event",
      "description": "Formats and converts event data between string representations, using a tuple of an identifier and an expression value. Outputs human-readable forms for debugging and logging. Processes structured event records derived from expression evaluations.",
      "description_length": 247,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Expr",
      "description": "The module provides operations for pretty-printing, JSON serialization/deserialization, and evaluation of expressions, working with identifiers, expression descriptions, environments (lists of identifier-value pairs), and values. It enables constructing and manipulating expressions, converting values to primitive types, and is utilized for tracing state transitions in systems requiring expressive data handling and dynamic evaluation. Specific use cases include debugging, configuration management, and runtime expression evaluation where structured data representation is critical.",
      "description_length": 585,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Fsm",
      "description": "Provides functions to transform finite state machines by reorganizing output assignments, defactorizing variables, and cleaning unreachable states. Operates on a custom `t` type representing FSMs with states, transitions, and output definitions. Supports serialization to and from JSON files and strings, and enables conversion between Mealy and Moore output styles.",
      "description_length": 366,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Fsm_lexer",
      "description": "Provides tokenization of input streams using finite state machine logic, with support for keyword recognition and custom lexing rules. Operates on lexing buffers and token types defined in Fsm_parser. Used to parse structured text inputs like configuration files or domain-specific languages.",
      "description_length": 292,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Fsm_parser",
      "description": "Processes lexical input to extract and evaluate finite state machine transitions, stimuli, guards, and actions. Operates on lexing buffers and token generators, producing structured representations like transitions, events, and actions. Used to parse and validate FSM definitions during model interpretation.",
      "description_length": 308,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Guard",
      "description": "Provides pretty-printing, string conversion, and JSON serialization/deserialization for expressions used as guards. Evaluates guard expressions against an environment to produce boolean results. Works with the Expr.t type to represent and process logical conditions.",
      "description_length": 266,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Misc",
      "description": "Converts lists to formatted strings using custom separators, iterates over lists with index-aware functions, generates lists via range-based mappings, and handles list transformations like flattening, Cartesian products, and parsing from token streams. Operates on lists, options, integers, and strings, with utilities for string manipulation, directory validation, and associative list updates. Used for generating human-readable output, processing structured data, and constructing dynamic string representations.",
      "description_length": 515,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Parse",
      "description": "Converts string representations of boolean guards, actions, transitions, finite state machines, and stimuli into typed structures. Processes syntax for expressions, state transitions, and signal sequences with compile-time error checking via PPX extensions. Supports parsing of FSM definitions and stimulus patterns for simulation or verification workflows.",
      "description_length": 357,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Seqmodel",
      "description": "Builds a sequential model from a finite state machine, ensuring the FSM is type-checked before construction. Operates on FSM structures and returns a model with indexed transitions between states. Used to generate state transition sequences for simulation or analysis.",
      "description_length": 268,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Simul",
      "description": "Provides functions to simulate finite state machines, including stepping through transitions, executing actions, and generating output events. Operates on context structures containing state, inputs, and local variables, and interacts with FSM and event types. Enables controlled simulation runs with stop conditions based on guards or clock cycles, and tracks state changes and output events.",
      "description_length": 393,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.State",
      "description": "Formats, converts, and serializes string-based state representations for logging, display, and data interchange. Handles transformations between string values and JSON structures. Used to serialize application state for storage and deserialize it during initialization.",
      "description_length": 269,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Tevents",
      "description": "Combines time-stamped event lists, merging entries with identical timestamps by aggregating their state changes. Processes tuples of timestamps and variable assignments, ensuring consistent state transitions across synchronized data sources. Supports merging of event sequences to maintain coherent simulation states. For example, it can integrate user input events with system-generated updates to reflect real-time changes accurately.",
      "description_length": 436,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Transition",
      "description": "Processes finite state machine transitions by encoding them as tuples of source state, guard list, action list, and target state. Provides serialization to and from JSON, string conversion, and evaluation of fireability conditions based on current state and environment. Enables runtime validation and execution of transitions within an FSM workflow.",
      "description_length": 350,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Types",
      "description": "This module offers pretty-printing, string conversion, and JSON serialization/deserialization for type-related structures like `t`, `attr`, `var`, `value`, `sign`, `size`, and `range`, along with specialized handlers for nested types. It supports type manipulation tasks such as unification and normalization, targeting type representations and schemes. These utilities are particularly useful for debugging, data interchange in compilers, and enforcing type consistency in symbolic computations.",
      "description_length": 496,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Typing",
      "description": "Checks type consistency of finite state machines, guard expressions, and actions, ensuring monomorphic types when required. Operates on FSM structures, guard and action expressions, and event sequences, validating against defined input types and environments. Validates stimuli sequences against FSM input definitions, rejecting mismatched or undefined events.",
      "description_length": 360,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Valuation",
      "description": "This module handles operations for managing symbolic variable bindings, including adding, removing, and looking up name-value pairs stored in list structures. It provides serialization capabilities for converting these bindings into human-readable formats and JSON, enabling use in scenarios like configuration management or symbolic computation workflows. The functions operate on string-based names and expression-valued values, ensuring structured data manipulation and validation.",
      "description_length": 484,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fsml.Vcd",
      "description": "Writes timed event data from a finite state machine into a VCD file and launches a viewer to inspect simulation results. Operates on FSM state machines and lists of timed events. Enables visualization of state transitions and signal changes during simulation.",
      "description_length": 259,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml.Vhdl",
      "description": "Generates VHDL code from an FSM, using a clock and asynchronous reset signal, with options to control action semantics and signal names. Works with FSM data structures and integer-encoded states, producing synchronous or sequential transition behavior. Writes the VHDL entity and architecture to a file, allowing customization of output directory and signal identifiers.",
      "description_length": 370,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "fsml",
      "description": "Provides functions for defining transitions, initializing states, and stepping through a synchronous finite state machine. Operates with state identifiers, transition rules, and event triggers. Used to model reactive systems such as protocol handlers or user interface workflows.",
      "description_length": 279,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fsml",
      "description": "The module integrates tools for handling finite state machines, expressions, and event data, enabling serialization, execution, and visualization. It manages custom types like actions, expressions, FSMs, and clocks, supporting operations such as JSON conversion, pretty-printing, evaluation, and code generation. It allows building, simulating, and transforming FSMs, generating C or VHDL code, and visualizing state transitions. Examples include converting actions to JSON, generating C functions for real-time execution, and merging timed events for synchronized simulation.",
      "description_length": 576,
      "index": 25,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 26,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 585,
    "min_description_length": 247,
    "avg_description_length": 359.5,
    "embedding_file_size_mb": 0.09483718872070312
  }
}