{
  "package": "vue-ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T23:00:40.892566",
  "modules": [
    {
      "module_path": "Ppx",
      "library": "ppx",
      "description": "This module provides operations for transforming OCaml abstract syntax trees (ASTs) in PPX rewriters, focusing on component property handling, expression rewriting, and JavaScript/DOM code generation. It works with AST elements like expressions, core types, and value bindings, using accumulation records to manage data during traversal, and supports use cases such as Vue.js-style component processing and web development tasks requiring DOM manipulation.",
      "description_length": 456,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Vue",
      "library": "vue-ppx.lib",
      "description": "This module defines functions to create and configure Vue.js-style UI components using OCaml. It supports operations like mounting components to the DOM, registering directives and plugins, and defining component properties, methods, and templates. The module works with JavaScript objects and arrays, string identifiers, and OCaml functions exposed to JavaScript via Js_of_ocaml. Concrete use cases include building interactive web interfaces with reactive data bindings, component hierarchies, and custom rendering logic.",
      "description_length": 523,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 2,
    "filtered_empty_modules": 6,
    "retention_rate": 0.25
  },
  "statistics": {
    "max_description_length": 523,
    "min_description_length": 456,
    "avg_description_length": 489.5,
    "embedding_file_size_mb": 0.02938556671142578
  }
}