{
  "package": "nanoev-picos",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:06:42.337427",
  "modules": [
    {
      "module_path": "Nanoev_picos.Base.Raw",
      "library": "nanoev-picos",
      "description": "This module schedules timed and I/O-driven callbacks with precise control over file descriptors, using `run_after_s` for delayed execution and `on_readable`/`on_writable` to trigger handlers on socket activity. It supports interaction with open file descriptors, passing context values to callbacks when events occur. Use it to implement non-blocking network clients or servers that react to timeouts and I/O readiness without polling.",
      "description_length": 435,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Base",
      "library": "nanoev-picos",
      "description": "This module enables low-level, non-blocking I/O operations on file descriptors, supporting asynchronous network communication through direct Unix interface. It provides core functions for reading, writing, connecting, and closing sockets, while its child module manages event-driven callbacks triggered by I/O readiness or time delays. You can implement custom network protocols, handle socket connections with timeout recovery, or build event-driven servers that react to read/write availability without polling. Specific operations include `run_after_s` for scheduling delayed tasks and `on_readable`/`on_writable` to bind handlers to socket state changes.",
      "description_length": 658,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Background_thread",
      "library": "nanoev-picos",
      "description": "Handles execution of event loops in a background thread, providing setup, shutdown, and scoped management of the thread's lifecycle. Works with `Nanoev.t`, a type representing an event loop instance. Useful for running non-blocking event-driven operations concurrently while ensuring proper initialization and cleanup.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Net",
      "library": "nanoev-picos",
      "description": "This module implements low-level network communication primitives for interacting with picos, providing direct access to socket operations. It handles raw data transmission and reception over Unix file descriptors, supporting both connection-oriented and connectionless protocols. Concrete use cases include sending and receiving byte packets with precise control over message flags, and managing network I/O in event-driven systems.",
      "description_length": 433,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Global_ev",
      "library": "nanoev-picos",
      "description": "This module manages a global event loop and background thread operations for handling asynchronous events. It provides functions to start, stop, and interact with a background thread that runs an event loop, using atomic flags and mutexes for synchronization. Concrete use cases include coordinating long-running background tasks and ensuring thread-safe access to the event loop instance.",
      "description_length": 389,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nanoev_picos.IO_in",
      "library": "nanoev-picos",
      "description": "This module implements low-level input operations for handling byte streams, supporting direct reading into buffers, string conversion, and channel copying. It works with `bytes`, `string`, and file descriptor types, providing concrete functions like `input`, `really_input`, and `copy_into` for efficient data transfer. Use cases include reading from Unix file descriptors, concatenating input streams, and draining input into strings or output channels.",
      "description_length": 455,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Net_server",
      "library": "nanoev-picos",
      "description": "This module creates and manages TCP servers that handle client connections using a provided client handler function. It works with Unix socket addresses and tracks server state, including active connections and shutdown status. Concrete use cases include building network services that accept concurrent client connections, such as HTTP servers or custom protocol handlers.",
      "description_length": 373,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.IO_out",
      "library": "nanoev-picos",
      "description": "This module implements output channels for writing data to various destinations, such as buffers, file descriptors, or in-memory structures. It supports writing characters, strings, integers, and sequences of lines, with optional flushing and closing behaviors. Concrete use cases include logging to memory buffers, streaming output to files, and multiplexing writes across multiple channels using `tee`.",
      "description_length": 404,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos.Net_client",
      "library": "nanoev-picos",
      "description": "This module implements network client operations for connecting to picos over Unix sockets. It provides functions to establish connections and exchange data using `IO_in` and `IO_out` streams. A typical use case involves sending requests to a pico service and receiving responses over the established socket connection.",
      "description_length": 319,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nanoev_picos",
      "library": "nanoev-picos",
      "description": "This module provides low-level, non-blocking I/O operations for handling file descriptors and network communication, enabling direct control over asynchronous events and socket operations. It includes core functions like `read`, `write_once`, and `sleep`, along with submodules that manage event loops in background threads, implement TCP servers, handle client connections, and provide fine-grained input/output channel operations. You can build custom network services, manage concurrent I/O with precise timing and socket control, and coordinate background tasks with thread-safe synchronization. Specific examples include scheduling delayed actions with `run_after_s`, binding handlers to socket readiness with `on_readable`, and streaming data over Unix sockets using `IO_in` and `IO_out`.",
      "description_length": 794,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 10,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 794,
    "min_description_length": 318,
    "avg_description_length": 457.8,
    "embedding_file_size_mb": 0.03674507141113281
  }
}