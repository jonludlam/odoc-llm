{
  "package": "non_empty_list",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:08:41.754421",
  "modules": [
    {
      "module_path": "Non_empty_list.Or_unequal_lengths.Let_syntax.Let_syntax",
      "library": "non_empty_list",
      "description": "This module provides monadic operations like `bind`, `map`, and `both` for working with non-empty lists where all lists must have equal lengths. It supports computations that require preserving length equality across multiple non-empty lists, such as zipping or element-wise transformations. A concrete use case is safely mapping over and combining multiple parallel non-empty lists without losing the guarantee of equal lengths.",
      "description_length": 429,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Non_empty_list.Let_syntax.Let_syntax",
      "library": "non_empty_list",
      "description": "This module provides monadic operations for working with non-empty lists, including `bind`, `map`, `return`, and `both`. It enables concise composition of functions that produce non-empty lists, allowing for chained transformations and combinations of values in a monadic context. Concrete use cases include parsing pipelines, validation workflows, and any computation where maintaining non-empty structure across steps is required.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Non_empty_list.Or_unequal_lengths.Monad_infix",
      "library": "non_empty_list",
      "description": "This module provides monadic bind (`>>=`) and map (`>>|`) operators for computations over non-empty lists of equal length. It ensures that functions applied across multiple non-empty lists maintain consistent lengths, preserving type safety. These operations are useful for chaining transformations and combining results from multiple non-empty lists while enforcing length equality constraints.",
      "description_length": 395,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Non_empty_list.Or_unequal_lengths.Let_syntax",
      "library": "non_empty_list",
      "description": "This module provides monadic operations like `bind`, `map`, and `both` for working with non-empty lists where all lists must have equal lengths. It supports computations that require preserving length equality across multiple non-empty lists, such as zipping or element-wise transformations. A concrete use case is safely mapping over and combining multiple parallel non-empty lists without losing the guarantee of equal lengths.",
      "description_length": 429,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Non_empty_list.Monad_infix",
      "library": "non_empty_list",
      "description": "This module implements monadic operations for non-empty lists, providing the bind (`>>=`) and map (`>>|`) functions. It allows chaining computations that produce non-empty lists, where bind applies a function returning a non-empty list to each element and flattens the result, and map applies a function to each element and wraps the result in a non-empty list. It is useful for composing sequences of operations that must return at least one result, such as parsing pipelines or validation steps that produce non-empty results.",
      "description_length": 528,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Non_empty_list.Or_unequal_lengths",
      "library": "non_empty_list",
      "description": "This module provides monadic operations for working with multiple non-empty lists of equal length, ensuring type-safe transformations and sequencing. It supports functions like `bind`, `map`, `join`, and `all` to chain computations, combine results, and flatten nested structures while preserving length equality. Concrete use cases include element-wise operations across parallel non-empty lists and safely handling collections of computations that must maintain consistent length constraints.",
      "description_length": 494,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Non_empty_list.Let_syntax",
      "library": "non_empty_list",
      "description": "This module provides monadic operations for sequencing computations that produce non-empty lists, including bind (`>>=`), map (`>>|`), and return. It supports working with values wrapped in the non-empty list structure, enabling chained transformations and combinations while preserving the guarantee of non-emptiness. Concrete use cases include building parsing pipelines, composing validation steps, and handling structured data transformations where empty results are invalid.",
      "description_length": 479,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Non_empty_list",
      "library": "non_empty_list",
      "description": "This module enables functional manipulation of non-empty, immutable linked lists through monadic transformations, indexed operations, and dual-list processing while enforcing non-emptiness guarantees. It supports conversions to arrays and standard lists, element access (head/tail/nth), list construction (cons, append, concat), and advanced transformations like zipping, filtering, and folding with index-aware variants. Key use cases include processing sequences requiring at least one element (e.g., configuration pipelines, head-strict algorithms) and safely handling paired operations across equally sized lists with explicit error handling for length mismatches.",
      "description_length": 668,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 8,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 668,
    "min_description_length": 395,
    "avg_description_length": 481.75,
    "embedding_file_size_mb": 0.11636638641357422
  }
}