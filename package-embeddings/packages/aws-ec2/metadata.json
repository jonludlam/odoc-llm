{
  "package": "aws-ec2",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2340,
  "creation_timestamp": "2025-07-16T02:16:11.580798",
  "modules": [
    {
      "module_path": "Aws_ec2.Types.InstanceStatusSummary",
      "library": "aws-ec2",
      "description": "This module represents the status summary of an EC2 instance, including its overall status and detailed status information. It provides functions to construct, parse, and convert the summary to and from XML, JSON, and query formats. Use this module when retrieving or processing instance status checks from AWS EC2, particularly for monitoring health and troubleshooting instances.",
      "description_length": 381,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateChangeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance state changes. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction of empty lists. Use it when processing responses or building requests involving multiple instance state transitions in AWS EC2.",
      "description_length": 278,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 image attributes, supporting fields like description, launch permissions, and product codes. It provides functions to construct, parse, and serialize requests for modifying image attributes in various formats, including JSON and query strings. Concrete use cases include updating an image's visibility, changing ownership permissions, or associating product codes with an AMI.",
      "description_length": 431,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing errors related to fast snapshot restore operations in EC2. It includes fields for an optional snapshot ID and a set of state errors, along with functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to handle and communicate detailed error information when enabling fast snapshot restore fails.",
      "description_length": 401,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status information of an EC2 volume, including its current status and associated details. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. Concrete use cases include monitoring volume health in EC2 instances and integrating volume status data into API requests and responses.",
      "description_length": 394,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupReferences",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of security group reference data in AWS EC2. It works with lists of security group reference records, supporting operations to convert to and from XML, JSON, and query formats. It is used when processing responses or building requests involving security group references in the AWS EC2 API.",
      "description_length": 351,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters to describe scheduled EC2 instances, including filters, result limits, and time ranges. It provides functions to construct, parse, and serialize these parameters for use in API requests. Concrete use cases include querying AWS for scheduled instance details with specific constraints, such as time windows or instance IDs.",
      "description_length": 385,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 Transit Gateway Multicast Domain, including required fields like `transit_gateway_id` and optional fields such as `tag_specifications` and `dry_run`. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include configuring multicast domain creation requests within AWS EC2 infrastructure automation tools.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GroupIds",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group IDs, providing functions to convert them to and from JSON and query formats, parse them from XML, and construct them from other values. It works specifically with lists of strings representing group IDs. Use this module when interacting with EC2 APIs that require or return security group identifiers.",
      "description_length": 349,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU credit configurations, primarily used in managing burstable performance instances. It includes operations to create, serialize, and convert credit specifications to and from JSON and query formats. The module is used when configuring or retrieving credit settings for EC2 instances that use CPU credits for performance bursts.",
      "description_length": 382,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotCapacityRebalanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing a request to rebalance spot capacity in a fleet, with an optional replacement strategy. It provides functions to construct, parse, and serialize the request to query parameters or JSON, specifically handling XML input for AWS API compatibility. Use this when configuring or updating EC2 fleet spot capacity rebalancing behavior through AWS SDK calls.",
      "description_length": 394,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IcmpTypeCode",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing ICMP type and code values, each as optional integers. It provides functions to construct, parse, and convert these values to and from XML, JSON, and query formats. Use cases include handling ICMP protocol specifications in EC2 security group rules, where precise type and code fields are required for rule configuration and API communication.",
      "description_length": 386,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionLogOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring connection logging options in AWS EC2, including fields for enabling logs and specifying CloudWatch log group and stream names. It provides functions to construct, serialize, and parse these options for use in API requests and responses. Concrete use cases include setting up VPC flow logs or load balancer access logs that are sent to CloudWatch.",
      "description_length": 400,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelCertificateRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying an AWS EC2 VPN tunnel certificate. It includes operations to construct, serialize, and parse the request data, working primarily with string and boolean types. It is used to update the certificate for a specific VPN tunnel by providing the connection ID and tunnel IP address, optionally in dry-run mode.",
      "description_length": 358,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 instance attributes, including the attribute name, instance ID, and optional dry-run flag. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include building API requests to retrieve specific instance details like block device mappings or network interfaces from AWS EC2.",
      "description_length": 416,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleScreenshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for capturing an EC2 instance's console screenshot. It includes fields to specify the instance ID, a dry run flag, and a wake-up flag, with operations to construct, parse, and serialize the request to query parameters or JSON. It is used when interacting with AWS EC2 to retrieve console screenshots programmatically.",
      "description_length": 357,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetInstancesResponse",
      "library": "aws-ec2",
      "description": "This module represents the response from describing EC2 spot fleet instances, containing a set of active instances, a pagination token, and an optional spot fleet request ID. It provides functions to construct, parse, and serialize the response for use in querying or processing spot fleet instance data. Use cases include retrieving and handling the output of spot fleet instance descriptions in AWS EC2.",
      "description_length": 405,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplateVersionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 launch template versions, including a set of versions and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in queries or JSON responses. It is used when retrieving and processing version details of EC2 launch templates, particularly in paginated scenarios.",
      "description_length": 363,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservationValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 reservation pricing details, including hourly price and remaining upfront and total values. It provides functions to construct, parse, and convert reservation values to and from JSON and query formats. Concrete use cases include handling AWS EC2 reservation pricing data in API requests and responses.",
      "description_length": 359,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the target types for traffic mirroring, specifically network interfaces and network load balancers. It provides bidirectional conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON and query formats. It is used when configuring traffic mirroring targets in EC2 to specify where mirrored traffic should be directed.",
      "description_length": 445,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListIdSet",
      "library": "aws-ec2",
      "description": "This module handles sets of prefix list IDs in AWS EC2 operations. It provides functions to convert lists of string prefix IDs to and from JSON and query formats, and includes parsing from XML nodes. It is used when managing VPC security rules that reference prefix lists by ID.",
      "description_length": 278,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostRecovery",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `On` and `Off`, representing host recovery settings. It includes functions to convert between strings and the `t` type, serialize to JSON and query formats, and parse from XML nodes. It is used to configure and manage host recovery options in EC2 instance settings.",
      "description_length": 315,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointAttributeStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with two values, `Applying` and `Applied`, representing the status of a Client VPN endpoint attribute in AWS EC2. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization functions for JSON, XML, and query parameters. It is used to track and manage the application state of Client VPN endpoint modifications during API interactions.",
      "description_length": 448,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureValues",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing CPU architectures supported by EC2 instances, including 32-bit x86, 64-bit x86, and 64-bit ARM. It provides bidirectional conversions between these architecture values and strings, JSON, and query parameters, ensuring correct serialization and deserialization for API interactions. The module is used to specify and interpret instance architecture types when making EC2 API requests or processing responses.",
      "description_length": 451,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a transit gateway route table from a transit gateway attachment. It includes operations to construct, parse, and serialize the request for use with AWS EC2 API calls. The module works with string and boolean types to represent the route table ID, attachment ID, and optional dry-run flag.",
      "description_length": 347,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 NAT gateway IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML nodes. It is used when working with AWS EC2 APIs that require multiple NAT gateway IDs as input or return them as output.",
      "description_length": 303,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceTypeDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing service type details in EC2, primarily used for handling service-specific metadata in API requests and responses. It includes functions to construct, parse, and serialize service type information to and from XML, JSON, and query formats. Concrete use cases include processing responses from EC2 API calls related to service types, such as describing VPC endpoint services.",
      "description_length": 422,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnAuthorizationRulesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing client VPN authorization rules in AWS EC2. It provides operations to create, parse, and serialize authorization rule sets along with pagination tokens. It works directly with XML, JSON, and AWS query formats for use in API response handling and processing.",
      "description_length": 301,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayNetworkInterfaceIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Transit Gateway network interface IDs, providing functions to convert them to and from JSON and query formats. It supports parsing from XML nodes and includes a no-op `make` function for compatibility. Use this when working with AWS EC2 Transit Gateway APIs that require lists of network interface IDs in different serialization formats.",
      "description_length": 370,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance type information by providing parsing, serialization, and transformation functions. It works with XML nodes, JSON values, and query parameters to convert and manage collections of instance type data. Concrete use cases include processing AWS API responses, building requests, and extracting structured instance type details from JSON or XML input.",
      "description_length": 389,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of retrieving the default KMS key ID for EBS encryption. It includes functions to construct, parse, and serialize the result in various formats, such as JSON and query parameters. It is used when interacting with AWS EC2 to manage or inspect EBS encryption settings programmatically.",
      "description_length": 344,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API operations. Concrete use cases include preparing deletion requests before sending them via the AWS SDK and validating parameters through dry-run checks.",
      "description_length": 396,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestHostIdSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of string-based request host IDs, typically used in EC2 API requests. It provides functions to convert between XML, JSON, and query string formats, ensuring compatibility with AWS API expectations. Use this module when constructing or interpreting EC2 API calls that involve sets of host IDs.",
      "description_length": 360,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 fleet data represented as lists of `FleetData.t`. It provides functions to convert fleet data to and from XML, JSON, and query formats, enabling interaction with AWS EC2 APIs. Use this module when processing responses or constructing requests involving multiple EC2 fleets.",
      "description_length": 353,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AutoPlacement",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `On` and `Off` to represent auto-placement settings. It includes functions for converting between strings and the enumerated type, serializing to query parameters or JSON, and parsing from XML or JSON. It is used to configure whether EC2 instances are automatically placed on dedicated hosts.",
      "description_length": 343,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a type and operations for specifying network interface configurations when launching EC2 instances using a launch template. It includes functions to construct, parse, and serialize network interface settings, supporting fields like IP addressing, security groups, and subnet configuration. Use this module to configure network interfaces programmatically when creating or modifying EC2 instance launch templates.",
      "description_length": 432,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume modifications. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization and deserialization. Use it when working with AWS EC2 volume modification responses or requests.",
      "description_length": 242,
      "index": 36,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecordEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an entry in an EC2 history record, with optional fields for event information, event type, and timestamp. It provides functions to construct, parse, and serialize these entries to and from XML, JSON, and query parameters. It is used to process and manage historical event data from EC2 fleet operations.",
      "description_length": 353,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance network interface, with fields for metadata like association, attachment, IP addresses, and security groups. It provides functions to construct, parse, and serialize network interface data for use in API requests and responses. Concrete use cases include managing network interface configurations during instance launch or modification, and processing network interface details from EC2 API calls.",
      "description_length": 463,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteTableAssociationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of replacing a route table association in EC2. It includes operations to construct, parse, and serialize the result, handling optional fields like association ID and state. It is used when managing route table changes in AWS networking configurations.",
      "description_length": 312,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkDnsSupportList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing a list of ClassicLink DNS support configurations. It provides operations to convert between XML, JSON, and internal data representations, specifically working with lists of `ClassicLinkDnsSupport.t`. It is used when managing DNS settings for EC2 ClassicLink instances, particularly during API requests and responses.",
      "description_length": 371,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNatGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a NAT gateway in AWS EC2, containing an optional NAT gateway ID. It provides functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. Use this module when handling responses from NAT gateway deletion operations in AWS EC2.",
      "description_length": 336,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnRouteResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a Client VPN route in AWS EC2. It includes operations to construct, parse, and serialize the result, which contains an optional route status. Use this module when managing Client VPN routes, such as tracking route creation success or failure in a Client VPN network.",
      "description_length": 309,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UnassignIpv6AddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of unassigning IPv6 addresses from an EC2 network interface. It provides operations to create, parse, and serialize results containing the network interface ID and the list of unassigned IPv6 addresses. Use this module when processing responses from EC2 API calls that modify IPv6 address assignments.",
      "description_length": 332,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusActionsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 volume status actions. It works with lists of `VolumeStatusAction.t` values, converting them to and from XML, JSON, and query parameters. It is used when processing responses or building requests involving volume status actions in EC2.",
      "description_length": 315,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesListingList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances Listings, providing functions to parse XML input into listing data, convert listings to query parameters or JSON format, and construct listing structures from JSON. It operates on lists of `ReservedInstancesListing.t` records, which represent individual reserved instance offers. Use this module when managing or querying available reserved instance listings in EC2, such as when listing or purchasing reserved instances through the AWS API.",
      "description_length": 493,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror target IDs in AWS EC2. It provides functions to parse, convert to query format, and serialize to and from JSON. It works specifically with lists of string-based traffic mirror target identifiers.",
      "description_length": 239,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing attributes of an FPGA image, including optional fields like ID, name, and description, along with associated permissions and product codes. It provides functions to construct, serialize, and convert the structure to and from JSON and XML formats. It is used when configuring or retrieving metadata for FPGA images in EC2.",
      "description_length": 371,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserData",
      "library": "aws-ec2",
      "description": "This module handles user data configuration for EC2 instances, providing functions to create, parse, and serialize user data. It works with XML nodes, JSON values, and query parameters to facilitate instance setup. Concrete use cases include injecting initialization scripts during instance launch and converting user data between different serialization formats.",
      "description_length": 363,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateReservedInstancesListingRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a Reserved Instances listing in EC2. It includes fields for a client token, instance count, price schedules, and a Reserved Instances ID, along with functions to construct, parse, and serialize the request for API calls. It is used when submitting or modifying Reserved Instances listings with specific pricing and quantity configurations.",
      "description_length": 392,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServiceConfigurationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying a VPC endpoint service configuration, primarily containing an optional boolean indicating success or failure. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses from AWS EC2 API calls that modify VPC endpoint service settings, such as enabling or disabling private DNS.",
      "description_length": 446,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClassicLinkInstancesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing ClassicLink instances in EC2, containing a list of instances and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. Use this module when handling responses from the EC2 API that list ClassicLink instances linked to VPCs.",
      "description_length": 378,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of fast snapshot restore state errors. It works with XML nodes, JSON values, and query parameters, specifically processing error items related to EC2 snapshot restore operations. Use this module when managing error responses from disabling fast snapshot restores in AWS EC2.",
      "description_length": 349,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StaleIpPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing stale IP permissions in EC2 security group rules, including ports, IP ranges, prefix lists, and user group pairs. It provides functions to construct, parse, and serialize these permissions to and from XML, JSON, and AWS query formats. Concrete use cases include managing outdated or unused security group rules for cleanup or auditing purposes.",
      "description_length": 394,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation preferences and targets in EC2 instance configurations. It includes functions to construct, serialize, and deserialize these specifications, enabling precise control over capacity reservation behavior when launching instances. Use cases include setting up EC2 instances with specific capacity reservation strategies or integrating reservation settings into larger configuration workflows.",
      "description_length": 461,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointConnectionNotificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying VPC endpoint connection notifications in AWS EC2. It includes fields for dry run flag, connection notification ID, ARN, and event list, along with functions to construct, parse, and serialize the structure to query or JSON formats. It is used to update configuration of VPC endpoint connection notifications by specifying which events to monitor and where to send them.",
      "description_length": 420,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancer",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a classic load balancer with an optional name field. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. It is used to integrate classic load balancer information into EC2-related API requests and responses.",
      "description_length": 313,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypeOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 instance type offerings, supporting operations to filter by location type, limit results, and handle pagination. It works with boolean, integer, string, and custom filter list types to construct and parse API requests. Concrete use cases include retrieving available instance types in specific regions or zones and integrating with AWS SDK tools for infrastructure management.",
      "description_length": 433,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway virtual interface group, including identifiers, associated virtual interface IDs, owner information, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when managing EC2 local gateway configurations, particularly for network segmentation and routing control in virtual private clouds.",
      "description_length": 438,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionNotificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing VPC endpoint connection notifications, including optional parameters like dry run, notification ID, filters, and pagination. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when querying or managing VPC endpoint connection notifications, particularly for filtering and paginating results.",
      "description_length": 417,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesEbs",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EBS volumes in EC2 scheduled instances, with fields like `delete_on_termination`, `encrypted`, `iops`, `snapshot_id`, `volume_size`, and `volume_type`. It provides functions to construct, parse, and convert these configurations to query parameters or JSON format. Use this module when setting up or modifying EBS-backed EC2 instances with specific storage requirements.",
      "description_length": 422,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module defines operations for working with EC2 network interface attributes, including parsing, serialization, and string conversion. It handles a sum type representing four specific network interface properties: description, group set, source/destination check, and attachment. Use this module when managing EC2 network interfaces via API calls that require attribute selection or configuration.",
      "description_length": 401,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 route table associations, providing direct conversions to and from XML, JSON, and query formats. It supports parsing AWS XML responses into typed route table association lists and serializing them for API requests. Use this when working with AWS EC2 API responses that include route table association data, such as describing route tables or handling subnet associations.",
      "description_length": 404,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 addresses, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with `Address.t` lists and supports data interchange with AWS APIs. Use this module when managing public or private IP addresses in EC2 instances, particularly when interacting with AWS services that require list-based input or output.",
      "description_length": 389,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptionsState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Pending` and `Applied`, representing the state of instance metadata options in a launch template. It includes functions to convert between strings and the enumerated type, along with serialization and deserialization routines for JSON, XML, and query parameters. This module is used when configuring or querying the metadata options state of EC2 instances in launch templates.",
      "description_length": 428,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostProperties",
      "library": "aws-ec2",
      "description": "This module defines a data structure for host properties with optional fields including core count, instance type, family, socket count, and total virtual CPUs. It provides functions to construct instances, parse XML input, and convert to and from query parameters, JSON format. It is used to represent and manipulate host hardware specifications in EC2 operations.",
      "description_length": 365,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an IPv6 address associated with a scheduled EC2 instance. It provides functions to construct, parse, and convert the type to and from query parameters, JSON, and XML. Use this module when managing IPv6 configurations for scheduled EC2 instances, particularly when integrating with AWS APIs that require structured IPv6 data.",
      "description_length": 376,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 CIDR blocks in EC2 configurations. It provides functions to create, parse, and serialize IPv6 CIDR block data, supporting operations like converting to and from JSON and query parameters. It is used when configuring or retrieving IPv6 network settings for EC2 instances or VPCs.",
      "description_length": 333,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting tags from EC2 resources, including optional dry run flag, list of resource IDs, and list of tags. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing and sending batch tag deletion requests to EC2, or processing tag removal responses in JSON or XML formats.",
      "description_length": 392,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayAttachmentPropagationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving propagation details of a transit gateway attachment in AWS EC2. It includes operations to construct, serialize, and parse the request, supporting filtering, pagination, and dry-run functionality. It works directly with EC2 transit gateway attachment IDs, filter lists, and pagination tokens.",
      "description_length": 346,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelReservedInstancesListingRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to cancel a Reserved Instances listing in EC2. It includes operations to construct the request, convert it to query format, serialize it to JSON, and parse or deserialize it from XML or JSON. It is used specifically when managing Reserved Instances lifecycle actions through the EC2 API.",
      "description_length": 349,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetNetwork",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a target network in EC2, with optional fields for association, VPC, and endpoint identifiers, along with security groups and association status. It provides functions to construct, parse, and convert the structure to and from JSON, query format, and XML. It is used when managing Client VPN endpoint associations with VPCs, particularly for tracking and serializing network configuration details.",
      "description_length": 446,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance credit configurations, including instance ID and CPU credit settings. It provides functions to construct, serialize, and deserialize these specifications for use in API requests and responses. Commonly used when managing T-series instances that rely on CPU credit balances for performance.",
      "description_length": 354,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Volume",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 volume with fields for metadata like availability zone, size, encryption status, and associated tags. It provides functions to construct, parse, and serialize volume data for use in querying or processing EC2 volume information. Concrete use cases include retrieving volume details from AWS responses, building volume creation requests, and converting volume data to JSON for logging or further processing.",
      "description_length": 463,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 Spot Fleet options, including fields like allocation strategy, interruption behavior, and instance pool limits. It provides functions to construct, parse, and serialize these configurations to support Spot Fleet request creation and management. Use cases include setting up cost-optimized Spot Fleets with specific capacity and availability constraints.",
      "description_length": 407,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpoint",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC endpoint with fields for identifiers, state, associated resources, and metadata. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing VPC endpoint configurations, retrieving endpoint details from AWS responses, and serializing endpoint data for API requests or storage.",
      "description_length": 419,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RuleAction",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 rule actions with two variants: `Allow` and `Deny`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for XML, JSON, and query parameters. Use this module when handling network access rules in AWS EC2, particularly when parsing or generating rule actions from APIs or configuration files.",
      "description_length": 420,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting specific versions of a launch template in EC2. It includes fields for the launch template ID, name, and version number, along with functions to construct, parse, and serialize the data for use in API requests and responses. It is used when handling the output of batch deletions of launch template versions.",
      "description_length": 380,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 addresses as strings, providing functions to convert between XML, JSON, and query string formats. It supports parsing IPv6 address lists from XML nodes and serializing them for API requests or JSON representation. Use this module when working with AWS EC2 APIs that require or return IPv6 address lists in different data formats.",
      "description_length": 363,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in an EC2 launch template, including optional fields for device name, virtual name, EBS configuration, and no-device indicators. It provides functions to construct, serialize, and parse these mappings, enabling precise control over instance storage configuration during launch. Use cases include configuring root volumes, attaching EBS volumes, or overriding default device mappings when launching EC2 instances.",
      "description_length": 486,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCoipPoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 CoIP pools, including fields like pool IDs, filters, pagination, and dry run options. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Use this to interact with AWS EC2's CoIP pool management API, such as filtering pools by attributes or retrieving paginated results.",
      "description_length": 380,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 route tables, providing direct conversions to and from XML, JSON, and query formats. It supports parsing route table data from AWS XML responses and serializing route table lists for API requests. Use this module when working with AWS EC2 route table collections in API interactions or response processing.",
      "description_length": 339,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when allocating an Elastic IP address in EC2, including optional fields like domain, address, and pool identifiers. It provides functions to construct, parse, and serialize these parameters for use in API requests. Concrete use cases include configuring IP allocation settings before invoking the EC2 allocation API, and converting request data to query or JSON formats for transmission.",
      "description_length": 450,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a VPC peering connection, with optional boolean and string fields. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include initiating a VPC peering acceptance in AWS EC2 with or without a dry run, and converting the request for API transmission.",
      "description_length": 401,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for replacing a network ACL association in EC2, including the association ID, optional dry run flag, and new network ACL ID. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. Concrete use cases include updating network ACL associations in EC2 VPC configurations programmatically.",
      "description_length": 389,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 security group, including its configuration such as ingress and egress rules, tags, and associated VPC. It provides functions to construct, serialize, and parse security group data for use in API requests and responses. Concrete use cases include managing firewall rules for EC2 instances and organizing resources within a virtual private cloud.",
      "description_length": 402,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PropagatingVgw",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a propagating virtual gateway in AWS EC2, primarily used for handling gateway IDs in route propagation scenarios. It includes operations for constructing, parsing, and serializing the structure to and from XML, JSON, and query formats. Concrete use cases include managing route propagation configurations in EC2 route tables and interacting with AWS API requests and responses.",
      "description_length": 427,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateDhcpOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating DHCP options in EC2, containing an optional DHCP options object. It provides functions to construct, parse, and serialize this result in various formats including JSON, query parameters, and XML nodes. It is used when interacting with AWS EC2's DHCP options creation API to handle response data.",
      "description_length": 368,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require multiple launch template IDs in requests or responses.",
      "description_length": 309,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ListingStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the status of a listing in the EC2 API, with specific values like `Active`, `Pending`, `Cancelled`, and `Closed`. It includes functions to convert between string representations and the enumerated type, as well as serialization to and from JSON and query parameters. It is used to handle status values when interacting with EC2 listing operations, such as parsing responses or constructing API requests.",
      "description_length": 463,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to check the default EBS encryption state, with an optional `dry_run` boolean field. It provides functions to construct, parse, and serialize this request type to JSON, query parameters, or XML. Use this when querying AWS EC2 to determine if EBS encryption is enabled by default in a region.",
      "description_length": 357,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an IAM instance profile with optional ARN and ID fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance profiles in AWS, such as when launching or configuring instances with IAM roles.",
      "description_length": 341,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Status",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing the status of an EC2 instance migration, with variants for `MoveInProgress`, `InVpc`, and `InClassic`. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. Concrete use cases include handling API responses and constructing requests involving instance migration status in EC2.",
      "description_length": 396,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupSourcesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deregistering multicast group sources from a transit gateway. It includes a single optional field representing the deregistered multicast group sources. It is used to process and format responses from the EC2 API when managing transit gateway multicast groups.",
      "description_length": 294,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotTaskDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the details of an EC2 snapshot task, including fields like status, progress, encryption, and storage information. It provides functions to construct, parse, and serialize these details for use in API requests and responses. Concrete use cases include tracking the state of snapshot imports or exports and handling task metadata in automation workflows.",
      "description_length": 402,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateOverrides",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying overrides in a launch template, including optional fields like instance type, spot price, subnet ID, and priority. It provides functions to construct, parse, and serialize these overrides to and from XML, JSON, and query formats. Concrete use cases include configuring EC2 Auto Scaling group instances with specific hardware or pricing options.",
      "description_length": 396,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing AWS EC2 local gateway route table virtual interface group associations. It includes operations to construct, parse, and serialize the result, which contains a set of association data and an optional pagination token. It is used when managing connectivity between virtual interfaces and route tables in AWS EC2.",
      "description_length": 355,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateEnclaveCertificateIamRoleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating an IAM role from an enclave certificate, containing optional fields for certificate ARN, role ARN, and a dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats, supporting direct interaction with AWS EC2 APIs. Use this module when managing enclave certificate IAM role disassociations programmatically, especially during infrastructure automation or security configuration workflows.",
      "description_length": 493,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 Traffic Mirror session, including the session ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when interacting with AWS EC2's Traffic Mirror feature to safely delete or simulate deletion of a session configuration.",
      "description_length": 380,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 volume status, supporting operations to filter results, limit output, and specify volume IDs. It works with AWS-specific types like filters, volume IDs, and pagination tokens. It is used to construct and serialize API requests when checking the status of EC2 volumes.",
      "description_length": 326,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway route attachments. It provides operations to convert between XML, JSON, and query string representations of these lists. Use this module when working with AWS EC2 transit gateway routes to process and construct attachment data in different formats.",
      "description_length": 328,
      "index": 100,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.CreateEgressOnlyInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating an egress-only internet gateway in AWS EC2. It includes functions to construct, parse, and serialize the result, supporting operations like XML parsing, JSON conversion, and query parameter generation. It works with types such as client tokens and egress-only internet gateway configurations, primarily used when handling responses from EC2 API calls related to network infrastructure setup.",
      "description_length": 464,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionIdList",
      "library": "aws-ec2",
      "description": "Handles lists of network interface permission IDs in AWS EC2. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Used when managing network interface permissions, such as granting or revoking access to specific principals.",
      "description_length": 278,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplateVersionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 launch template versions, supporting fields like template ID, name, version ranges, and filters. It provides operations to construct, parse, and serialize requests in multiple formats including JSON and query strings. Concrete use cases include retrieving specific versions of an EC2 launch template by ID or name, paginating through results, and filtering output based on custom criteria.",
      "description_length": 446,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RootDeviceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 root device types, providing functions to convert to and from JSON and query formats, as well as parsing from XML. It works with lists of `RootDeviceType.t` values, representing block device configurations for EC2 instances. Use this module when serializing or deserializing root device lists during API requests or responses.",
      "description_length": 359,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceEventStartTimeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the start time of an EC2 instance event. It includes functions to construct, parse, and serialize the request data, which consists of an instance ID, event ID, new start time, and an optional dry-run flag. It is used to reschedule planned maintenance or lifecycle events for EC2 instances via the AWS API.",
      "description_length": 359,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling EBS encryption by default in EC2, containing an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring EBS encryption settings programmatically, such as in infrastructure automation or compliance workflows.",
      "description_length": 358,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SlotDateTimeRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a date and time range with `earliest_time` and `latest_time`, both in AWS DateTime format. It includes functions to create, parse, and convert the structure to query parameters, JSON, and from JSON. It is used when requesting time slots for EC2 resources, such as scheduled instance availability.",
      "description_length": 348,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostReservationIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based host reservation IDs, providing functions to convert them to and from JSON and query formats. It supports parsing from XML nodes and constructing empty or initialized lists. Use this when working with AWS EC2 host reservations that require batch processing of reservation IDs in API requests or responses.",
      "description_length": 348,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetTagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags applied to EC2 Spot Fleet resources. It includes functions to create, parse, and convert tag specifications to and from JSON and query formats. It is used when configuring Spot Fleets to ensure tags are correctly associated with specific resource types like instances or volumes.",
      "description_length": 336,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesPlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement settings of EC2 scheduled instances, including optional availability zone and placement group name. It provides functions to construct, parse, and convert placement data to and from XML, JSON, and query formats. Use this module when configuring or retrieving placement details for EC2 scheduled instances.",
      "description_length": 367,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RestoreManagedPrefixListVersionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for restoring a managed prefix list to a previous version, including parameters like dry run flag, prefix list ID, and version numbers. It provides functions to construct, parse, and serialize the request for use with AWS EC2 operations. Use this module when managing prefix list versions in AWS EC2, particularly for rolling back to a prior configuration.",
      "description_length": 396,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Host",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 host with fields for placement, availability, capacity, and instance management. It provides operations to construct, parse, and serialize host data for use in API requests and responses. Concrete use cases include managing dedicated host configurations, tracking host resource availability, and handling host lifecycle events in AWS EC2.",
      "description_length": 395,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateAddressResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of allocating an Elastic IP address in EC2, with fields for IP details, allocation identifiers, and network configuration. It provides constructors, JSON and XML parsers, and query builders to handle API responses and requests. Concrete use cases include processing EC2 API outputs for address allocation and serializing results for further API interactions.",
      "description_length": 419,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing placement groups in EC2. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when working with EC2 APIs that require placement group names as input or return them as output.",
      "description_length": 313,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicePermissionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint service permissions, primarily working with `allowed_principals` and an optional `next_token` for pagination. It provides operations to construct, parse, and serialize the result data to and from XML, JSON, and query formats. Concrete use cases include processing AWS EC2 API responses when managing VPC endpoint service access permissions.",
      "description_length": 398,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateSubnetCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating an IPv6 CIDR block with a subnet in AWS EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. The module works with a result type that contains an optional IPv6 CIDR block association and a subnet ID, used when managing subnet CIDR blocks in EC2.",
      "description_length": 343,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 volume, containing the volume ID and an optional dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats. Use this when interacting with AWS EC2 to safely delete volumes by specifying their ID and testing deletion impact without execution.",
      "description_length": 349,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of rejecting a VPC peering connection, containing an optional boolean indicating the outcome. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used when handling responses from AWS EC2 API calls that reject VPC peering connections, enabling integration with AWS SDK workflows.",
      "description_length": 402,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a traffic mirror filter rule in EC2, providing constructors, parsing, and serialization functions. It works with XML, JSON, and query string formats to facilitate API response handling and request construction. Concrete use cases include processing AWS API responses and building requests for traffic mirror filter rule creation.",
      "description_length": 372,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetSnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for resetting attributes of an EC2 snapshot, specifically targeting the `createVolumePermission` attribute. It includes operations to construct, parse, and serialize the request for use in API calls, supporting both XML and JSON formats. Concrete use cases include modifying snapshot permissions before sharing or restricting access to EBS volumes.",
      "description_length": 385,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchLocalGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching local gateway routes in EC2, providing structured access to route data and pagination. It works with `LocalGatewayRouteList.t` for route entries and an optional string token for pagination. Use this module to process and serialize route search responses from EC2 API calls.",
      "description_length": 317,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the association state of a route table in EC2, including its current state and an optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing route table associations in AWS EC2, such as tracking association status during network configuration changes.",
      "description_length": 408,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a peering attachment between two transit gateways. It includes fields for transit gateway IDs, peer account ID, region, tag specifications, and a dry-run flag, all using AWS-specific string and boolean types. The module provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations.",
      "description_length": 375,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuState",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing the state of an elastic GPU, with operations to convert between string representations and the enumerated values. It supports parsing from XML nodes, serialization to query parameters and JSON, and provides a constant value for the `ATTACHED` state. Concrete use cases include handling elastic GPU state transitions in AWS EC2, such as serializing state for API requests or deserializing responses from XML or JSON.",
      "description_length": 473,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing prefix list associations in AWS EC2, with optional resource ID and owner fields. It provides functions to construct, parse, and convert these associations to and from JSON and query formats. Use this module when managing VPC prefix lists that reference external resources, such as shared prefix lists from other accounts.",
      "description_length": 375,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for attaching an EBS volume to an EC2 instance, including fields for the device name, instance ID, volume ID, and an optional dry-run flag. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. It is used when issuing volume attachment requests to the EC2 API, ensuring correct serialization and deserialization of request data.",
      "description_length": 416,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeStaleSecurityGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for querying stale security groups in a specific VPC. It handles optional parameters like dry run, maximum results, and pagination token, along with required VPC ID input. Use this module when making API calls to retrieve outdated security group information from EC2.",
      "description_length": 337,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcIpv6CidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of IPv6 CIDR block associations for VPCs in AWS EC2. It operates on a list of `VpcIpv6CidrBlockAssociation.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing or inspecting IPv6 address ranges associated with virtual private clouds.",
      "description_length": 345,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceUsage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking EC2 instance usage, including account ID and instance count. It provides functions to create, parse, and convert instance usage data to query parameters or JSON format. Use this module when handling instance usage reports in AWS EC2 operations, such as retrieving or analyzing resource limits and usage statistics.",
      "description_length": 364,
      "index": 129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC attachment for a transit gateway, including identifiers, state, subnets, and options. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing VPC connectivity through transit gateways, tracking attachment states, and handling subnet associations in AWS EC2.",
      "description_length": 406,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecords",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 history records. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `HistoryRecord.t`. Use this module when processing EC2 event history data from AWS APIs or when preparing such data for API requests.",
      "description_length": 331,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a reserved instance in EC2, including active, pending, failed, retired, and queued states. It provides bidirectional conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON, XML, and query parameters. These operations are used when handling EC2 reserved instance state transitions and status checks in API requests and responses.",
      "description_length": 482,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusDetailsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of EC2 instance status details. It provides functions to convert between XML, JSON, and query string representations of these lists, specifically working with `InstanceStatusDetails.t` values. Use this module when processing responses or building requests for EC2 instance status checks in AWS integrations.",
      "description_length": 390,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway route table and a resource, such as a VPC or VPN attachment. It includes functions to construct, parse, and serialize the association data for use in API requests and responses. Concrete use cases include managing route table associations in AWS EC2 transit gateways and handling association state transitions.",
      "description_length": 401,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoipPoolSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of CoIP pool objects. It provides functions to convert between XML, JSON, and query string formats, specifically for working with sets of CoIP pools in API requests and responses. Use this module when interacting with AWS EC2 APIs that require listing or processing multiple CoIP pools.",
      "description_length": 369,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines and manipulates placement strategy types used in EC2 instance configurations. It supports conversion between string representations and the enumerated type values (`Cluster`, `Spread`, `Partition`), along with serialization to and from JSON, XML, and query parameters. It is used when specifying how instances are distributed across hardware in EC2 launch templates or API requests.",
      "description_length": 402,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to deleting queued Reserved Instances in EC2. It includes functions to construct, parse, and serialize error objects, supporting operations like converting to and from JSON and query formats. It is used when managing Reserved Instance cancellations to capture and communicate failure details from the EC2 API.",
      "description_length": 374,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InterfacePermissionType",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with two values, `INSTANCE_ATTACH` and `EIP_ASSOCIATE`, representing interface permission types in EC2. It provides bidirectional conversion functions between strings and the enumerated type, along with serialization and deserialization to JSON, query parameters, and XML. These operations support handling interface permissions in API requests and responses, particularly for network interface management tasks.",
      "description_length": 456,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatesMonitoringRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring monitoring settings in EC2 launch templates, specifically supporting an optional boolean flag to enable monitoring. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling integration with AWS API requests. Concrete use cases include setting up instance monitoring options when creating or updating EC2 launch templates via the AWS SDK.",
      "description_length": 442,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of copying an FPGA image in AWS EC2. It includes functions to create, parse, and convert the result to and from JSON and query formats. It is used to retrieve and manipulate the identifier of the copied FPGA image.",
      "description_length": 275,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance types, including a list of instance type information and an optional pagination token. It provides operations to construct, parse, and convert the result to and from JSON and query formats. Use this module when processing responses from the EC2 DescribeInstanceTypes API call.",
      "description_length": 334,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a Client VPN endpoint in AWS EC2, including the endpoint ID and an optional dry-run flag. It provides functions to construct, parse, and convert the request to various formats such as JSON and query parameters. Use this module when building or processing API calls to delete Client VPN endpoints programmatically.",
      "description_length": 366,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAcceleratorAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of elastic inference accelerator associations in EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing instance attachments to inference accelerators in AWS EC2 responses.",
      "description_length": 289,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of an EC2 snapshot (`Pending`, `Completed`, `Error`). It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and format snapshot state data when interacting with AWS EC2 APIs or processing related responses.",
      "description_length": 418,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing VPC ClassicLink attributes in EC2. It includes fields for filtering results, specifying VPC IDs, and performing dry runs, along with functions to construct, serialize, and parse these requests. It is used when querying AWS EC2 to retrieve ClassicLink configuration details for specific VPCs.",
      "description_length": 348,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN connection IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple VPN connection IDs as input, such as batch deletion or status checks.",
      "description_length": 328,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeDhcpOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing DHCP options in EC2, providing constructors, parsing, and serialization functions. It works with DHCP options lists and optional pagination tokens. Use it to process responses from EC2 when retrieving DHCP configurations, including handling pagination and converting results to JSON or query formats.",
      "description_length": 345,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTransitGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting transit gateway routes to an S3 bucket. It includes fields for the transit gateway route table ID, optional filters, S3 bucket name, and a dry run flag. Operations allow constructing, parsing, and serializing the request for use with AWS EC2 API calls.",
      "description_length": 306,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastRegisteredGroupSources",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing multicast group sources in a transit gateway, including identifiers for network interfaces and IP addresses. It provides functions to construct, serialize, and deserialize these structures to and from XML, JSON, and query formats. Use this module when configuring or retrieving multicast source registrations in AWS EC2 transit gateways.",
      "description_length": 387,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of import image license configuration requests for EC2. It provides functions to construct, parse, and convert these lists into query parameters or JSON for API interactions. It works with XML nodes, JSON values, and query strings to support importing image licensing data from AWS.",
      "description_length": 308,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a transit gateway route, containing an optional `TransitGatewayRoute` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to handle responses from EC2 API calls that delete routes in a transit gateway.",
      "description_length": 371,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of phase 2 DH group numbers for EC2 requests, containing an optional integer. It provides functions to construct, parse, and serialize the value to query parameters or JSON, specifically used when configuring IPsec VPN tunnel options in AWS EC2.",
      "description_length": 320,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseRequestSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 purchase request lists for API interactions. Works with XML nodes, JSON values, and query parameters. Used to convert between internal data structures and formats required by AWS SDK components during spot instance purchase requests.",
      "description_length": 282,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfacePermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters to delete a network interface permission, including the permission ID, force flag, and dry run option. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when managing network interface permissions programmatically, particularly for deletion with optional safety checks.",
      "description_length": 404,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SlotStartTimeRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a time range with optional earliest and latest timestamps, primarily used in scheduling requests. It includes functions to create, parse, and convert the structure to query parameters or JSON format. Concrete use cases involve configuring time windows for resource allocation or event scheduling in AWS EC2 operations.",
      "description_length": 370,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the default KMS key ID used for EBS encryption. It includes operations to create, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with string and boolean types wrapped in AWS-specific base type modules, and is used when configuring EBS encryption settings programmatically.",
      "description_length": 384,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for querying the history of a spot fleet request in AWS EC2. It includes fields to specify filtering criteria such as event type, time range, and pagination parameters. The module supports serialization to and from JSON and query formats, enabling integration with AWS API requests and responses.",
      "description_length": 333,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAggregateIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing ID format settings in EC2, containing an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. It is used specifically for interacting with the EC2 API to check ID format compatibility before making changes.",
      "description_length": 362,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of fleet launch template configurations. It provides functions to convert between XML, query parameters, JSON, and the internal OCaml representation. It is used when managing EC2 fleet configurations, particularly for working with multiple launch templates in AWS API requests and responses.",
      "description_length": 359,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC ClassicLink DNS support in AWS EC2, providing constructors, parsers, and serializers for the result structure. It works with paginated responses using a `next_token` string and a list of VPC ClassicLink DNS support entries. Concrete use cases include processing and serializing API responses when querying the status of ClassicLink DNS support for VPCs.",
      "description_length": 402,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror filter rules, providing operations to convert, parse, and serialize the data. It works with XML nodes, JSON values, and query parameters, enabling integration with AWS EC2 APIs. Use this module when managing traffic mirror configurations, such as capturing or filtering network traffic for monitoring.",
      "description_length": 345,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceLimitPrice",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying limit prices in EC2 reserved instance configurations, with optional amount and currency code fields. It provides functions to construct, serialize, and deserialize these price specifications, enabling precise control over pricing parameters in API requests. Use cases include setting budget constraints for reserved instance purchases and integrating price limits into automated provisioning workflows.",
      "description_length": 454,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a transit gateway, containing an optional `TransitGateway` object. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Use this module when handling responses from EC2 API calls that delete transit gateways, particularly for inspecting or passing around the resulting gateway data.",
      "description_length": 427,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6Range",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IPv6 CIDR ranges with an optional description. It provides functions to construct, serialize, and deserialize these ranges using XML, JSON, and query parameters. It is used when configuring security group rules that specify IPv6 address ranges for EC2 instances.",
      "description_length": 316,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteTableVpcAssociationResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for deleting a local gateway route table VPC association, containing an optional `LocalGatewayRouteTableVpcAssociation.t`. It includes functions to construct, parse, and serialize the result to query or JSON formats, and to deserialize from JSON. It is used when handling responses from the EC2 API after deleting such an association.",
      "description_length": 368,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC endpoint IDs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It is used when managing VPC endpoints, such as in describing or modifying endpoint configurations.",
      "description_length": 286,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrBlockSet",
      "library": "aws-ec2",
      "description": "This module handles IPv6 CIDR block sets for EC2 operations, providing functions to parse, convert to query format, and serialize to and from JSON. It works with lists of IPv6 CIDR block types, enabling manipulation and transmission of network range data in EC2 configurations. Concrete use cases include processing VPC subnet definitions and network interface configurations involving IPv6 ranges.",
      "description_length": 398,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportSnapshotTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying import snapshot tasks in EC2, supporting filtering by task IDs and custom filters, and controlling result pagination. It provides operations to construct, parse, and serialize these requests in JSON, query string, and XML formats. Use this module when interacting with the EC2 API to list and filter ongoing or completed snapshot import tasks.",
      "description_length": 396,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorTargetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a traffic mirror target in AWS EC2, including optional fields for the target and a client token. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. Use this module when managing traffic mirroring configurations programmatically in AWS environments.",
      "description_length": 392,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for retrieving the default KMS key ID for EBS encryption. It works with a single type `t` that holds an optional `dry_run` boolean. Use this module to construct, parse, and convert EBS KMS key requests to query parameters or JSON for API calls.",
      "description_length": 314,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DnsEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for DNS entries with optional DNS name and hosted zone ID fields. It provides functions to construct, parse, and convert DNS entry data to and from XML, JSON, and query formats. It is used when working with DNS configurations in AWS EC2, particularly for handling responses from API calls that return DNS information.",
      "description_length": 354,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulQueuedPurchaseDeletion",
      "library": "aws-ec2",
      "description": "This module handles the deletion of queued Reserved Instance purchases in EC2. It provides functions to construct, parse, and serialize a deletion response, which includes an optional Reserved Instance ID. Use this when managing Reserved Instance lifecycle operations and interacting with EC2's purchase queue.",
      "description_length": 310,
      "index": 172,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SubnetAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of subnet associations in EC2, providing operations to convert between XML, JSON, and query formats. It works with lists of `SubnetAssociation.t` values, enabling parsing from XML nodes and serialization to AWS query parameters or JSON arrays. Use this module when processing EC2 responses or constructing requests involving multiple subnet associations, such as in VPC or load balancer configurations.",
      "description_length": 428,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating flow logs in EC2, including identifiers for created logs and any errors. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Concrete use cases include tracking successful and unsuccessful flow log creation operations and integrating with AWS SDK workflows.",
      "description_length": 394,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TerminateConnectionStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the termination status of a client VPN connection, including the connection ID and its previous and current status. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. This is used when handling responses from AWS EC2 API calls related to terminating client VPN connections.",
      "description_length": 385,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachmentOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring VPC attachment options in a transit gateway, with fields for DNS, IPv6, and appliance mode support. It provides functions to construct, serialize, and parse these options, enabling precise control over network behavior in AWS EC2 transit gateway setups. Use cases include setting up secure hybrid network architectures and managing connectivity between VPCs and on-premises networks.",
      "description_length": 436,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EndDateType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `Unlimited` and `Limited`, representing end date options in EC2 configurations. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML nodes or JSON. It is used to specify termination policies for EC2 instances or resources with optional end dates.",
      "description_length": 384,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCarrierGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a carrier gateway in EC2, containing an optional carrier gateway object. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from EC2 API calls that create carrier gateways, particularly for processing or serializing the returned data.",
      "description_length": 404,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorFiltersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying traffic mirror filters in EC2, supporting operations to filter, limit, and paginate results. It works with identifiers, boolean flags, key-value filters, integers, and string tokens. Concrete use cases include retrieving specific traffic mirror filters by ID, applying custom filters, and handling pagination in API responses.",
      "description_length": 379,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying load permissions in EC2, supporting operations to create, serialize, and convert permission requests to and from JSON and query formats. It works with optional user IDs and permission groups. It is used when managing AMI (Amazon Machine Image) launch permissions, allowing specific users or groups to access an image.",
      "description_length": 369,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransportProtocol",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing transport protocols with variants `Tcp` and `Udp`. It includes functions to convert between strings and the `t` type, as well as serialization to and from JSON, query parameters, and XML. These operations support handling transport protocol values when interacting with AWS EC2 APIs, such as when specifying security group rules or network interface configurations.",
      "description_length": 409,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateVpcCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a VPC CIDR block, providing access to IPv4 and IPv6 CIDR block associations and the VPC ID. It includes functions to construct, parse, and serialize the result in various formats such as JSON and query strings. Use this module when managing VPC CIDR block disassociations and handling the resulting metadata.",
      "description_length": 357,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulQueuedPurchaseDeletionSet",
      "library": "aws-ec2",
      "description": "This module handles the manipulation of lists of `SuccessfulQueuedPurchaseDeletion` values, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes for input parsing and interacts with AWS-specific types like `Aws.Query.t` and `Aws.Json.t`. Concrete use cases include processing EC2 queued purchase deletion responses in AWS API interactions.",
      "description_length": 397,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of delete fleet error items. It provides functions to convert between XML, JSON, and query string representations of this data. Use this when processing batch deletion errors from EC2 fleets, particularly to extract or format error details in different data formats.",
      "description_length": 334,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RemovePrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles the manipulation of prefix list entries for EC2 operations. It provides functions to convert entry lists to and from JSON and query formats, and to parse XML input into typed entries. It works with lists of `RemovePrefixListEntry.t` structures, primarily for managing route entries in virtual private cloud (VPC) configurations.",
      "description_length": 348,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 host reservations, including the set of reservations and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. Use this module when processing responses from EC2's `DescribeHostReservations` API to extract and manipulate reservation data.",
      "description_length": 382,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupMembersResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering multicast group members for a transit gateway in EC2. It provides constructors, JSON and XML parsers, and query conversion for a structure containing optional multicast group member registration data. It is used when managing multicast traffic in virtual private clouds connected via transit gateways.",
      "description_length": 347,
      "index": 187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceVolumeDetailSet",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of import instance volume details. Works with XML nodes, JSON values, and query parameters to convert between a list of `ImportInstanceVolumeDetailItem.t` structures and their external representations. Useful for processing EC2 import instance volume data during virtual machine setup or disk image imports.",
      "description_length": 356,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupReferencesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing security group references in EC2. It provides constructors, parsers, and serializers for a structure containing a set of security group references. Use this module when processing responses from AWS EC2 that involve security group reference data, such as querying or serializing security group dependencies.",
      "description_length": 352,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateCarrierGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a carrier gateway in EC2, including required VPC ID and optional parameters like tag specifications, dry run flag, and client token. It provides functions to construct, parse, and serialize the request for API calls. Use this module when configuring and sending carrier gateway creation requests to AWS EC2.",
      "description_length": 362,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFleetResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of modifying an EC2 fleet, containing an optional boolean indicating success. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses from the EC2 API when adjusting fleet configurations, such as changing target capacities or terminating instances.",
      "description_length": 403,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DiskImage",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a disk image in EC2, composed of optional description, image details, and volume details. It provides functions to construct, parse, and convert disk image data to and from XML, JSON, and query formats. Concrete use cases include handling disk image information during EC2 instance import or snapshot operations.",
      "description_length": 362,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of import snapshot task IDs in AWS EC2. It provides functions to parse, convert to query format, and serialize to and from JSON. It works specifically with lists of string-based task IDs, supporting operations like extracting task IDs from XML responses or JSON inputs and preparing them for API requests.",
      "description_length": 331,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with three variants (`Interface`, `Gateway`, `GatewayLoadBalancer`) representing service types in EC2. It includes functions to convert between strings and the type, serialize to query and JSON formats, and parse from XML and JSON. Use this module when handling EC2 service type values in API requests, responses, or configuration data.",
      "description_length": 367,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LogDestinationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing log destination types with two variants: `Cloud_watch_logs` and `S3`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to specify and handle log destination types in API requests and responses involving AWS EC2 logging configurations.",
      "description_length": 411,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSubnetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC endpoint subnet IDs, represented as string lists. It provides functions to convert these lists to and from JSON and query formats, as well as to parse them from XML nodes. Use this when working with AWS EC2 VPC endpoints that require specifying multiple subnet IDs in API requests or responses.",
      "description_length": 327,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficDirection",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Ingress` and `Egress`, representing traffic direction in network rules. It provides bidirectional conversion functions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. It is used to specify and process traffic direction in EC2 security group rules and related networking APIs.",
      "description_length": 382,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a target network with a Client VPN endpoint, containing an optional association ID and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from AWS EC2 API calls related to Client VPN target network associations.",
      "description_length": 395,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VpnGateway IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple VpnGateway IDs as input or return them as part of a response.",
      "description_length": 316,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModificationState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of an EC2 volume modification, with variants like `Modifying`, `Optimizing`, `Completed`, and `Failed`. It includes functions to convert between strings and the enumerated type, serialize to AWS query or JSON formats, and parse from XML or JSON. It is used to track and manage the lifecycle of volume modifications in AWS EC2, such as monitoring the progress of a volume resize or performance optimization.",
      "description_length": 460,
      "index": 200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorNetworkServiceList",
      "library": "aws-ec2",
      "description": "This module defines a list of traffic mirror network service values and provides operations to construct, parse, and serialize them. It supports converting between XML, JSON, and query string formats for use in API requests and responses. Typical use cases include handling traffic mirroring configurations in EC2 instances by serializing service lists for API calls or parsing them from received responses.",
      "description_length": 407,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an egress-only internet gateway, including its attachments, ID, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing outbound-only internet connectivity for IPv6 traffic in EC2 VPC configurations.",
      "description_length": 352,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetCidrBlockStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state codes of subnet CIDR blocks in EC2, with specific values like `Associating`, `Associated`, and `Failed`. It provides bidirectional conversions between these states and strings, JSON, and XML, along with query parameter serialization. It is used to interpret and serialize subnet CIDR block state changes in API requests and responses.",
      "description_length": 396,
      "index": 203,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 availability zone data. It provides functions to parse XML input into availability zone lists, convert them to query parameters or JSON format, and construct them from JSON. It works directly with lists of `AvailabilityZone.t` records, handling serialization and deserialization for AWS EC2 API interactions.",
      "description_length": 341,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StaleSecurityGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a stale security group in AWS EC2, including its description, group ID, name, VPC ID, and sets of stale ingress and egress IP permissions. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling stale security group information returned by EC2 API operations like `DescribeStaleSecurityGroups`.",
      "description_length": 429,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RIProductDescription",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing product descriptions for EC2 reserved instances, including variants for Linux/UNIX and Windows systems, with and without Amazon VPC. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with AWS EC2 APIs to specify or interpret reserved instance product descriptions in requests and responses.",
      "description_length": 475,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 transit gateway route tables, containing a list of route tables and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when handling responses from AWS EC2 API calls that list transit gateway route tables.",
      "description_length": 372,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 internet gateway IDs, represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this when managing internet gateways in EC2, such as attaching or detaching them from VPCs.",
      "description_length": 290,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing AWS EC2 virtual private network (VPN) gateways. It provides operations to construct, parse, and serialize results containing a list of VPN gateways. Use this module when retrieving and processing information about existing VPN gateways in AWS EC2, such as filtering or inspecting gateway configurations.",
      "description_length": 348,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a range of public IPv4 addresses within an EC2 public IPv4 pool, including the first and last address in the range, the total number of addresses, and the count of available addresses. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing and querying address pool ranges when configuring or inspecting EC2 network resources.",
      "description_length": 468,
      "index": 210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportEnvironment",
      "library": "aws-ec2",
      "description": "This module defines a set of supported export environments (Citrix, Vmware, Microsoft) and provides bidirectional conversions between these types and strings, JSON, and XML. It includes functions for parsing and serializing values to and from AWS-specific formats like `Aws.Query.t` and `Aws.Json.t`. Use this module when handling EC2 image export configurations that require specifying target virtualization environments in API requests or responses.",
      "description_length": 451,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of an EC2 instance, with integer and named state values. It provides functions to construct, parse, and serialize instance states to and from XML, JSON, and query formats. Use this module when managing EC2 instance lifecycle events or querying instance status in AWS integrations.",
      "description_length": 340,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PciId",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing PCI ID information with optional fields for device, vendor, subsystem, and subsystem vendor IDs. It provides functions to construct instances, parse from XML nodes, convert to query parameters, and serialize to and from JSON. It is used when working with EC2 instance metadata or device information that requires PCI ID details in AWS API requests or responses.",
      "description_length": 415,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for running scheduled EC2 instances, including parameters like client token, dry run flag, instance count, launch specification, and scheduled instance ID. It provides functions to construct, parse, and serialize the request for use with AWS API calls, specifically for interacting with EC2 scheduled instances. Use cases include launching instances based on predefined schedules and validating configurations before execution.",
      "description_length": 467,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a Client VPN endpoint in AWS EC2, including the endpoint ID, status, and DNS name. It provides functions to construct, parse, and serialize this result for use in API responses or further processing. Use this module when handling output from creating Client VPN endpoints, particularly for interacting with AWS EC2 services programmatically.",
      "description_length": 414,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssignPrivateIpAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of assigning private IP addresses to an EC2 network interface. It provides functions to create, parse, and serialize the result, which includes the network interface ID and a list of assigned private IP addresses. Use this module when managing IP address allocations in EC2 networking operations.",
      "description_length": 327,
      "index": 216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC in AWS EC2, providing constructors, JSON and XML parsers, and query builders. It works with the `Vpc.t` type, representing a virtual private cloud. Use this module to process and serialize VPC creation responses from AWS API calls.",
      "description_length": 280,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CidrBlockSet",
      "library": "aws-ec2",
      "description": "This module represents a list of CIDR blocks and provides functions to convert between XML, JSON, and query string formats. It includes parsing from XML nodes, serializing to AWS query format, and converting to and from JSON structures. It is used when working with EC2 network configurations that require multiple CIDR ranges, such as VPC or subnet definitions.",
      "description_length": 362,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a transit gateway route table, including `Pending`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and XML formats. Use cases include handling state transitions and persisting state information in AWS EC2 management workflows.",
      "description_length": 437,
      "index": 219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Default` and `Dedicated`, representing tenancy options for capacity reservations. It provides functions to convert between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. Use this module when handling EC2 capacity reservation tenancy settings in API requests or configuration parsing.",
      "description_length": 383,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConversionIdStringList",
      "library": "aws-ec2",
      "description": "This module handles conversions for a list of string values, typically used in AWS EC2 operations. It provides functions to parse XML nodes into a list of strings, convert the list to query parameters or JSON, and extract the list from JSON input. It is useful when working with EC2 API requests that require handling multiple string identifiers, such as instance IDs or security group names.",
      "description_length": 392,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing ID format settings in EC2, specifically supporting operations to create, serialize, and parse requests targeting a specific resource type. It works with XML, JSON, and query string formats for request construction and parsing. Concrete use cases include configuring and retrieving ID format preferences for EC2 resources like instances or volumes via AWS API calls.",
      "description_length": 420,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupEgressResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of revoking egress rules from a security group. It includes fields for a boolean indicating success and a list of IP permissions that were not revoked. Functions allow constructing, parsing, converting to query format, and serializing to and from JSON this result type.",
      "description_length": 330,
      "index": 223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataEndpointState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Disabled` and `Enabled`, representing the state of an instance metadata endpoint. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. This module is used to configure and interpret the state of instance metadata services in EC2 instances, particularly when managing instance security settings via AWS APIs.",
      "description_length": 449,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotSet",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of EC2 snapshot data. It provides functions to parse XML input into a list of snapshot information, convert snapshot lists to query parameters or JSON format, and construct empty values. It works directly with lists of `SnapshotInfo.t` structures, handling data serialization and deserialization for API interactions.",
      "description_length": 369,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnProtocol",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the OpenVPN protocol and provides bidirectional conversions between strings and the type. It includes functions for parsing, serialization to JSON and query formats, and string manipulation. Concrete use cases include handling protocol values when interacting with AWS EC2 APIs, such as when configuring or querying VPN connections.",
      "description_length": 383,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying network interface configurations when launching or modifying EC2 instances. It includes fields for controlling IP addressing, security groups, device indexing, and interface properties, supporting both IPv4 and IPv6 configurations. Use this type to configure network interfaces programmatically in AWS EC2 instance operations, such as attaching specific network interfaces or setting up private IP addresses.",
      "description_length": 460,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Purchase",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a purchase configuration for EC2 hosts, including fields like currency code, duration, host IDs, pricing, and payment options. It provides functions to construct, parse, and serialize purchase records for use in API requests and responses. Concrete use cases include creating and managing host reservations with specific billing and configuration parameters in EC2.",
      "description_length": 415,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogIdList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 flow log IDs as string-based collections. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Useful for managing multiple flow log resources in API requests and responses.",
      "description_length": 248,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedNetworkType",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing the type of network associated with an EC2 resource, specifically supporting conversion between string representations and the enumerated values. It provides functions for parsing, serializing, and converting values to and from JSON, query parameters, and XML. This module is used when handling network association types like VPC in EC2 API requests and responses.",
      "description_length": 422,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a route in an EC2 transit gateway route table. It includes fields for specifying the destination CIDR block, route table ID, optional attachment ID, blackhole flag, and dry-run mode. The module provides functions to construct, parse, and serialize the request for use with AWS API operations.",
      "description_length": 345,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 transit gateway route tables, including identifiers, filters, pagination, and dry run options. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include retrieving specific route tables by ID, applying filters to narrow results, and handling paginated responses.",
      "description_length": 389,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a customer gateway in AWS EC2, with fields for BGP ASN, IP address, state, type, and optional components like certificate ARN and device name. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing customer gateways in EC2, such as when creating or describing VPN connections.",
      "description_length": 412,
      "index": 233,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupMembersResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deregistering multicast group members in a transit gateway, specifically capturing the deregistered members in an optional field. It provides functions to construct, parse, and serialize the result to query parameters or JSON, as well as parsing from XML nodes. It is used when managing multicast traffic in AWS EC2 transit gateways, particularly after deregistration operations to track which members were successfully removed.",
      "description_length": 462,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfig",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 Spot Fleet requests, including fields like creation time, request state, and associated tags. It provides functions to construct, parse, and serialize these configurations to and from JSON and query formats. Concrete use cases include managing lifecycle states of spot fleet requests and persisting their configurations in AWS-compatible formats.",
      "description_length": 400,
      "index": 235,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupSourcesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering multicast group sources in a transit gateway, supporting operations to configure and serialize the request data. It works with string identifiers, boolean flags, and lists of network interface IDs to manage multicast group membership. Concrete use cases include constructing API requests to update multicast domain configurations in AWS EC2.",
      "description_length": 399,
      "index": 236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling attribute values in EC2 operations, primarily working with optional string values. It provides functions to construct, parse, and convert these values to and from query parameters and JSON representations. Concrete use cases include managing instance attributes like termination protection or monitoring status when interacting with the EC2 API.",
      "description_length": 395,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure to represent the result of registering an EC2 image, containing an optional image ID. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used to handle responses from the image registration process in AWS EC2 workflows.",
      "description_length": 319,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InferenceDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of inference device information in EC2, providing operations to convert, parse, and serialize the data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS EC2 APIs for device configuration. Use this module when managing inference accelerators in EC2 instances, such as attaching or retrieving device details from instance metadata.",
      "description_length": 396,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBundleTaskResult",
      "library": "aws-ec2",
      "description": "This module handles the result of canceling a bundle task in EC2, primarily by encapsulating an optional `BundleTask` record. It provides functions to construct, parse, and convert the result to various formats like JSON and query parameters. Use this when processing responses from EC2 after canceling an instance bundling operation.",
      "description_length": 334,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VCpuInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for CPU configuration details, including default and valid values for vCPUs, cores, and threads per core. It provides functions to construct, parse, and serialize CPU information for use in querying or configuring EC2 instance types. Concrete use cases include retrieving CPU constraints for instance types and preparing CPU configuration parameters for API requests.",
      "description_length": 404,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorTargetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of deleting a Traffic Mirror target in AWS EC2. It includes operations to create, parse, and serialize the result, which contains an optional Traffic Mirror target ID. Use this module when managing network traffic mirroring configurations and processing API responses from EC2.",
      "description_length": 338,
      "index": 242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceExportDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance export details, including the instance ID and target environment. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving details for exporting EC2 instances to external environments.",
      "description_length": 350,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of Client VPN route data in AWS EC2. It works with lists of ClientVpnRoute.t values, supporting conversion to and from XML, JSON, and query formats. It is used when managing Client VPN endpoints, particularly for processing route information returned from API calls or preparing route data for API requests.",
      "description_length": 380,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of local gateway route table virtual interface group association sets in XML, JSON, and query formats. It works with lists of `LocalGatewayRouteTableVirtualInterfaceGroupAssociation.t` records, converting between these representations for use in API requests and responses. Concrete use cases include processing AWS EC2 API responses containing association sets and preparing data for outbound API calls.",
      "description_length": 469,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSubnetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a subnet creation operation, containing an optional subnet object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2 subnet creation requests, particularly to extract and manipulate the resulting subnet information.",
      "description_length": 408,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing location types in AWS EC2, with variants for region, availability zone, and availability zone ID. It provides conversions to and from strings, JSON, and query formats, along with parsing functions for XML input. Use this module when handling location-based resource queries or responses in AWS EC2 APIs.",
      "description_length": 347,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAction",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status actions in EC2, including fields like code, description, event ID, and event type. It provides functions to construct, parse, and convert these structures to and from JSON and query formats. It is used to handle volume status events returned by EC2 APIs, enabling inspection and processing of volume-related system events.",
      "description_length": 390,
      "index": 248,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesListingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 reserved instances listings, supporting filtering by attributes, reserved instance ID, or listing ID. It includes functions to construct, parse, and serialize the request for use with AWS API calls. Use cases include retrieving specific listings based on filters or directly by ID for auditing or resource management.",
      "description_length": 378,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 customer gateway configurations. It provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON values. Use it when managing customer gateways in AWS EC2, such as listing or serializing gateway data for API requests.",
      "description_length": 295,
      "index": 250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a carrier gateway with optional fields such as gateway ID, VPC ID, state, owner ID, and tags. It provides functions to construct, parse, and convert carrier gateway data to and from JSON and query formats. Concrete use cases include handling carrier gateway information returned by EC2 API calls and building requests that interact with carrier gateways in AWS networking operations.",
      "description_length": 433,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template license configurations. It works with lists of `LaunchTemplateLicenseConfiguration.t` records, supporting operations to convert between XML, JSON, and query parameter formats. It is used when configuring or retrieving license settings for EC2 instances in AWS.",
      "description_length": 356,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for associating DHCP options with a VPC in AWS EC2. It includes functions to construct, parse, and convert the request to various formats like JSON and query parameters. Concrete use cases include configuring network settings for EC2 instances by linking custom DHCP options to a specific VPC.",
      "description_length": 330,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based reserved instances modification IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with EC2 reserved instances modifications in API requests or responses.",
      "description_length": 306,
      "index": 254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcTenancyResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPC's tenancy in AWS EC2, primarily working with a boolean return value. It provides functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. Use this module when processing responses from EC2 API calls that change a VPC's tenancy configuration.",
      "description_length": 332,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a VPN connection in AWS EC2. It includes fields for the connection ID and optional identifiers for gateways and dry run configuration. Operations include creating, parsing, and converting the structure to and from JSON and query formats. Use this module when updating a VPN connection's configuration with specific gateway assignments or testing changes without applying them.",
      "description_length": 427,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDeregisteredGroupSources",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling deregistered multicast group sources in a transit gateway, with fields for the multicast domain ID, network interface IDs, and group IP address. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. It is used when managing multicast traffic in AWS EC2 transit gateways, particularly when removing sources from a multicast group.",
      "description_length": 432,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FederatedAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing a federated authentication request with optional SAML provider ARNs. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query parameters. Use this when configuring federated identity authentication for EC2 instances using SAML providers.",
      "description_length": 321,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrefixListsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying prefix lists in EC2, supporting filtering by IDs, result limits, and pagination. It includes functions to construct, parse, and serialize requests in JSON, query string, and XML formats. Concrete use cases include retrieving prefix list information with specific filters, handling dry-run checks, and managing paginated responses from the AWS API.",
      "description_length": 400,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the three possible VPC endpoint types: `Interface`, `Gateway`, and `GatewayLoadBalancer`. It includes functions to convert between strings and the enumerated type values, along with serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when interacting with AWS EC2 APIs to specify and process VPC endpoint configurations.",
      "description_length": 418,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of private IP address specifications for EC2 instances. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when configuring or retrieving EC2 network interfaces with custom private IP settings.",
      "description_length": 302,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 conversion tasks by providing functions to create, parse, and serialize the result data. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with AWS EC2 APIs. Concrete use cases include processing responses from `DescribeConversionTasks` API calls and converting them between different data formats for further processing or client responses.",
      "description_length": 429,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an internet gateway attachment, consisting of a state and a VPC ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 internet gateway attachments, such as when creating or inspecting gateway configurations in AWS.",
      "description_length": 359,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in EC2 scheduled instances, with optional ARN and name fields. It provides functions to construct, serialize, and deserialize these profiles to and from JSON, query parameters, and XML. Use this module when configuring IAM roles for scheduled EC2 instances or processing related API responses.",
      "description_length": 367,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FailedQueuedPurchaseDeletion",
      "library": "aws-ec2",
      "description": "This module handles the deletion of queued EC2 reserved instances, specifically capturing failures in that process. It works with structured data types like `DeleteQueuedReservedInstancesError.t` and string identifiers for reserved instances. It is used to construct, parse, and serialize failure responses when attempting to delete queued reserved instance purchases in AWS EC2.",
      "description_length": 379,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of a spot instance request in AWS EC2, primarily by managing a list of spot instance requests. It provides functions to create, parse, and convert the result to and from XML, JSON, and query formats. Use this module when processing responses from the EC2 API after initiating spot instance requests to extract and manipulate the returned spot instance request data.",
      "description_length": 396,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 reservations by providing operations to convert, parse, and manipulate them in various formats. It works with XML nodes, JSON values, and query parameters, enabling direct interaction with AWS EC2 APIs. Use this module when processing responses from or constructing requests to EC2 that involve multiple reservations.",
      "description_length": 350,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when describing EC2 snapshots, including filters, result limits, ownership, and visibility settings. It provides functions to construct, serialize, and parse these parameters for use in API requests. Concrete use cases include querying snapshots by owner ID, limiting result sets, and filtering by snapshot ID or other attributes.",
      "description_length": 393,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecordSet",
      "library": "aws-ec2",
      "description": "This module represents a list of EC2 history record entries and provides functions to convert between XML, JSON, and query formats. It includes parsing from XML nodes, serialization to JSON and query parameters, and a no-op `make` function that returns its argument. It is used to handle structured history records in AWS EC2 API interactions, such as retrieving and formatting event history data.",
      "description_length": 397,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCustomerGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing customer gateways in EC2, including optional identifiers, filters, and a dry-run flag. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. Concrete use cases include building API requests to retrieve customer gateway configurations and validating request parameters before submission.",
      "description_length": 407,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 Traffic Mirror filter rules, including properties like rule ID, direction, protocol, port ranges, CIDR blocks, and action. It provides functions to construct, parse, and serialize these rules for use in API requests or configuration management. Concrete use cases include defining network traffic monitoring rules and configuring mirror filters in AWS EC2 environments.",
      "description_length": 427,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 Client VPN endpoints, including fields to filter results, limit output, and simulate requests. It supports operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include building API requests to list Client VPN endpoints with optional filtering and pagination.",
      "description_length": 380,
      "index": 272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeAttributeResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing an EC2 volume's attribute, specifically handling boolean auto-enable I/O status, product codes, and volume ID. It provides operations to construct, parse, and serialize the result in various formats including JSON and query strings. Concrete use cases include retrieving and processing volume attribute data from AWS EC2 API responses.",
      "description_length": 383,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnTargetNetworksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing AWS EC2 Client VPN target networks. It includes operations to create, parse, and serialize the result, which contains a set of target networks and an optional pagination token. It works directly with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 311,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeKeyPairsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 key pairs by filters, names, or IDs, with an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include filtering key pairs by tags, retrieving specific key pairs by name or ID, and testing requests without modifying resources.",
      "description_length": 372,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 instance attributes, with fields for network groups, block device mappings, and various configuration flags like API termination protection and ENA support. It provides functions to construct, parse, and convert instance attributes to and from XML, JSON, and AWS query formats. Concrete use cases include retrieving and modifying instance metadata, such as updating shutdown behavior or checking EBS optimization status.",
      "description_length": 474,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. It is used when interacting with AWS EC2 APIs to manage transit gateway peering connections programmatically.",
      "description_length": 388,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewaySet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of local gateway records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 local gateway data. Use this module when interacting with AWS EC2 APIs that require or return local gateway information in different data formats.",
      "description_length": 371,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleOutputRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving EC2 instance console output, including fields for the instance ID, dry run flag, and latest output indicator. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. It is used when interacting with AWS EC2 to fetch diagnostic output from running instances.",
      "description_length": 379,
      "index": 279,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.TunnelInsideIpVersion",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Ipv4` and `Ipv6`, representing tunnel inside IP versions. It provides functions to convert between strings and the `t` type, including `of_string`, `to_string`, and bidirectional list mappings `str_to_t` and `t_to_str`. It also supports serialization to and from JSON, query parameters, and XML parsing, making it suitable for use in AWS EC2 API clients handling IP version configurations.",
      "description_length": 440,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Snapshot",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 snapshot with fields for metadata like encryption settings, ownership, volume details, and state. It provides functions to construct, parse, and serialize snapshot data for use in API requests and responses. Concrete use cases include managing snapshot creation, querying snapshot status, and handling encrypted snapshot configurations in AWS EC2 workflows.",
      "description_length": 414,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PoolCidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing CIDR blocks within an IP address pool. It includes operations to create, parse, and convert CIDR blocks to query parameters or JSON format, as well as parsing from XML nodes. It is used when working with IP address allocation and management in networking services.",
      "description_length": 314,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstancePrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance private IP addresses, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works directly with lists of `InstancePrivateIpAddress.t` values. Use this module when processing responses or constructing requests involving multiple private IP addresses in EC2 instance configurations.",
      "description_length": 372,
      "index": 283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCapacityReservationSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the capacity reservation specification for an EC2 launch template, with optional fields for preference and target settings. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving capacity reservation details for EC2 instances launched from a template.",
      "description_length": 404,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignedPrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling an EC2 instance's assigned private IP address. It provides functions to create, parse, and serialize the structure to common formats like JSON and query strings. It is used when managing network configurations for EC2 instances, such as during instance launch or network interface updates.",
      "description_length": 339,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of fast snapshot restore error items. It provides functions to convert error lists to JSON or query format, and to parse error data from XML or JSON input. It is used when managing EC2 snapshot restore errors, particularly in handling responses from AWS API calls related to snapshot restoration failures.",
      "description_length": 383,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume attachment records. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization/deserialization. Useful when managing EBS volume attachments in EC2 instances, especially during API request/response processing.",
      "description_length": 280,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 fleet creation request. It includes fields for the fleet ID, any errors encountered, and the instances created. Operations include constructing the structure, parsing XML responses, converting to query parameters, and serializing to and from JSON.",
      "description_length": 318,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CpuOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in EC2 instance configurations, with optional fields for core count and threads per core. It provides functions to construct, serialize, and deserialize these options for use in API requests. Concrete use cases include configuring instance CPU settings when launching or modifying EC2 instances via the AWS SDK.",
      "description_length": 375,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string identifiers for queued Reserved Instances in EC2. It provides operations to convert these lists to and from query parameters, JSON, and XML formats. Use this module when managing Reserved Instance cancellations through AWS's API, particularly when working with batched deletion requests.",
      "description_length": 323,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelledSpotInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling cancelled spot instance requests in AWS EC2. It includes operations to create, parse, and convert the structure to query parameters or JSON format. It is used when managing spot instance lifecycle events, such as retrieving or logging cancelled requests.",
      "description_length": 304,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StaleIpPermissionSet",
      "library": "aws-ec2",
      "description": "This module handles lists of stale IP permissions in EC2 security group rules. It provides functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. Use this module when managing stale IP permissions returned by EC2 API operations like describing stale security group rules.",
      "description_length": 307,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfacesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway virtual interfaces, supporting filtering, pagination, and dry-run options. It works with identifiers, filters, and standard AWS pagination and response control parameters. It is used to construct and process EC2 API requests to describe local gateway virtual interfaces with specific constraints.",
      "description_length": 363,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based capacity reservation IDs for EC2 operations. It provides functions to convert the list into query parameters or JSON, and to parse reservation IDs from XML or JSON input. Use this when working with EC2 APIs that require specifying multiple capacity reservation IDs in requests or responses.",
      "description_length": 333,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of export image task IDs in AWS EC2. It provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON input. It works specifically with string lists representing export image task identifiers.",
      "description_length": 262,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 instance types, including optional parameters like dry run, filters, and pagination. It supports constructing, parsing, and serializing requests to interact with AWS EC2's instance type API. Concrete use cases include retrieving instance type details with specific filters or paginated results in an AWS management tool.",
      "description_length": 377,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AdvertiseByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of advertising a Bring Your Own IP (BYOIP) CIDR block in EC2. It provides constructors, parsers, and serializers for a type that optionally contains a `ByoipCidr` record. It is used to interpret and generate API responses when managing custom IP ranges in AWS EC2.",
      "description_length": 295,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing an EC2 Target Group with a single optional ARN field. It provides functions to construct, serialize, and deserialize target group data to and from JSON, query parameters, and XML. Use this module when managing load balancer target groups, particularly for operations involving ARN-based identification in AWS EC2.",
      "description_length": 367,
      "index": 298,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.DisableEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disabling EBS encryption by default, containing an optional boolean indicating the new encryption state. It provides functions to construct the result, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Concrete use cases include handling responses from the EC2 API when modifying EBS encryption settings.",
      "description_length": 408,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a traffic mirror session in EC2, capturing the created session and a client token. It provides constructors, parsing, and serialization functions for working with the result structure. Use this module when managing traffic mirroring sessions to capture and process response data from EC2.",
      "description_length": 331,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume IDs represented as strings. It provides functions to convert, parse, and serialize these lists into query parameters, JSON, and XML formats. It is used when working with batch operations that require multiple volume identifiers, such as describing or deleting multiple volumes.",
      "description_length": 317,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 spot instance datafeed subscriptions, including fields like bucket, owner ID, prefix, and state. It provides functions to construct, parse, and serialize subscription data for interacting with AWS EC2 APIs. Use this module to configure and retrieve spot instance monitoring data destinations in S3.",
      "description_length": 352,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EventCode",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing specific event codes for EC2 instances, such as reboots, maintenance, and retirement. It provides bidirectional conversions between these event codes and strings, JSON, and query parameters, enabling seamless serialization and deserialization. These functions are used when handling EC2 event notifications or API responses that require structured event code handling.",
      "description_length": 428,
      "index": 303,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.Route",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a route in a virtual private cloud, with fields for various route targets like gateways, instances, and peering connections. It provides functions to construct, serialize, and parse route data for use in EC2 API interactions. The module is used when managing route tables to direct traffic within or out of a VPC.",
      "description_length": 363,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RecurringChargesList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of recurring charge data in AWS EC2. It provides functions to convert recurring charge lists to and from XML, JSON, and query formats. Use this module when working with billing or cost management features that involve recurring charges in AWS EC2.",
      "description_length": 308,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of disk information in AWS EC2 operations. It provides functions to parse XML input into disk info lists, convert them to query parameters or JSON format, and construct disk info lists from JSON. It is used when managing instance storage details, such as during instance launch or volume attachment workflows.",
      "description_length": 335,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC attachment with optional state and VPC ID fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling VPC attachment information in EC2 operations, such as retrieving or modifying attachment states.",
      "description_length": 343,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesBlockDeviceMappingSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of block device mappings for scheduled EC2 instances. It works with lists of `ScheduledInstancesBlockDeviceMapping.t` structures, supporting operations to convert between XML, JSON, and query formats. It is used when configuring or retrieving block device mappings in scheduled instance requests or responses.",
      "description_length": 382,
      "index": 308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing detailed information about an EC2 service, including its name, ID, type, availability zones, owner, DNS settings, and policy support. It provides functions to construct, parse, and serialize service details for use in API requests and responses. Concrete use cases include retrieving service metadata for VPC endpoint configuration and inspecting service properties for DNS and policy management.",
      "description_length": 446,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in EC2, with optional ARN and name fields. It provides functions to construct, parse, and convert these specifications to and from JSON and query formats. Use this module when configuring EC2 instances with IAM roles, either during instance launch or updates.",
      "description_length": 333,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportToS3TaskSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying disk image export tasks to Amazon S3. It includes fields for container format, disk image format, S3 bucket, and S3 prefix, all optional. Operations include creating instances, parsing XML input, converting to query parameters or JSON, and constructing from JSON, specifically supporting interactions with AWS EC2 export APIs.",
      "description_length": 378,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsEncryptionSupport",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EBS encryption support status with two variants: `Unsupported` and `Supported`. It provides functions to convert between strings and the `t` type, serialize and parse values to and from JSON and query formats, and extract values from XML nodes. It is used to handle EBS encryption capabilities in EC2 instance types, enabling accurate representation and transformation of this metadata across different data formats.",
      "description_length": 460,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disassociating a client VPN target network, containing an optional association ID and an optional association status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This module is used to handle responses from the EC2 API when managing client VPN network associations.",
      "description_length": 396,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServicePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC endpoint service permissions, supporting operations to add or remove allowed AWS principals. It works with boolean, string, and string list types to specify service identifiers and permission changes. Concrete use cases include updating access control for VPC endpoint services by managing which principals can associate with the service.",
      "description_length": 396,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TunnelOptionsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tunnel options, providing direct conversions to and from XML, JSON, and query formats. It works with lists of `TunnelOption.t` records, which represent individual tunnel configurations. Use this module when serializing or deserializing tunnel option data for API requests or responses in AWS EC2 operations.",
      "description_length": 340,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IKE versions in EC2 requests, primarily used when configuring virtual private gateways or customer gateways. It includes operations for creating, parsing, and serializing the IKE version value, which is represented as an optional string. The module supports converting values to and from JSON and query parameters, facilitating integration with AWS API requests.",
      "description_length": 414,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC peering connection, including information about the requester and accepter VPCs, connection status, expiration time, tags, and connection ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing and transferring VPC peering connection details within AWS EC2 workflows.",
      "description_length": 420,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 Transit Gateway, including fields for the gateway ID, optional description, modification options, and dry-run flag. It provides functions to construct, serialize, and parse modification requests in various formats such as JSON and query strings. It is used when updating Transit Gateway configurations in AWS EC2.",
      "description_length": 371,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateOverridesList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template overrides by providing serialization to JSON and query formats, parsing from XML, and list construction. It works with structured data representing launch template configurations, such as instance types and availability zones. Use this module when configuring or modifying EC2 auto scaling groups with custom launch template parameters.",
      "description_length": 385,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsNvmeSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with three variants (`Unsupported`, `Supported`, `Required`) to represent EBS NVMe support states. It includes functions to convert between strings and the enumerated type, along with serialization and deserialization routines for JSON, XML, and query parameters. This module is used to specify and process EBS volume NVMe support settings in EC2 instance configurations.",
      "description_length": 410,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a transit gateway in AWS EC2, primarily working with the `t` type that contains an optional `TransitGateway.t` value. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when processing responses from EC2 API calls that modify transit gateway configurations.",
      "description_length": 396,
      "index": 321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of availability zone strings in AWS EC2 operations. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when working with EC2 APIs that require or return availability zone information in these formats.",
      "description_length": 303,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 fleet information with optional parameters like pagination, filtering, and fleet identifiers. It supports operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving fleet data with custom filters, handling paginated results, and integrating with AWS SDK APIs for EC2 fleet management.",
      "description_length": 415,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying private IP addresses with an optional primary flag and IP address string. It provides functions to construct, parse, and convert these specifications to query parameters or JSON format. It is used when configuring EC2 instances with multiple private IP addresses or setting up network interfaces.",
      "description_length": 348,
      "index": 324,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in EC2, supporting operations to create, serialize, and parse requests. It works with string, integer, and boolean types, along with custom enums for metadata endpoint and HTTP token states. It is used to modify metadata settings on EC2 instances, such as enabling or disabling the metadata endpoint or adjusting HTTP token requirements.",
      "description_length": 416,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the operational states of an availability zone, including `Available`, `Impaired`, and `Unavailable`. It provides functions to convert between string representations and the enumerated type, along with serialization to and from JSON and query formats. The module is used to interpret and manipulate availability zone status values when interacting with EC2 APIs, particularly during response parsing or request construction.",
      "description_length": 481,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Transit Gateway VPC attachment in AWS EC2. It provides constructors, JSON and XML parsers, and query builders for working with the optional `TransitGatewayVpcAttachment` data structure. Use this module when processing responses from modifying VPC attachments in AWS Transit Gateways, particularly when integrating with AWS SDK tooling.",
      "description_length": 381,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for creating an EC2 subnet. It includes functions to construct, parse, and serialize subnet creation requests with fields like CIDR block, VPC ID, availability zone, and optional tagging. It is used to configure and submit subnet creation parameters to the AWS EC2 API.",
      "description_length": 337,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceRecurrenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying recurrence patterns for scheduled EC2 instances, including optional frequency, interval, occurrence days, and relative positioning. It provides functions to construct, parse, and serialize these recurrence requests into query parameters or JSON format. Use this module when configuring recurring schedules for EC2 instances, such as setting weekly or monthly start times with specific day constraints.",
      "description_length": 453,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateCustomerGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a customer gateway in AWS EC2, containing an optional customer gateway object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from the EC2 API related to customer gateway creation operations.",
      "description_length": 387,
      "index": 330,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for enabling VPC ClassicLink DNS support, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. It is used when interacting with AWS EC2 APIs to manage VPC DNS settings.",
      "description_length": 297,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchasedScheduledInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of scheduled EC2 instance records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with purchased scheduled instances. Use this module when processing responses or building requests for AWS EC2 scheduled instance APIs that involve batch operations.",
      "description_length": 386,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetReservationValueSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of target reservation value types. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 target reservation values. Use this module when interacting with AWS EC2 APIs that require or return target reservation value lists in different data formats.",
      "description_length": 388,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorRuleAction",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two values, `Accept` and `Reject`, representing actions for traffic mirror rules in EC2. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization functions for JSON, XML, and query parameters. This module is used to specify and handle traffic filtering decisions when configuring traffic mirroring in AWS EC2.",
      "description_length": 420,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network ACL IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return network ACL ID lists, such as describing or modifying network ACLs.",
      "description_length": 335,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachClassicLinkVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for detaching a VPC from a classic link in EC2, including fields for dry run, instance ID, and VPC ID. It provides functions to construct, parse, and serialize the request for use with API calls. Use this module when managing VPC associations for EC2 instances in AWS.",
      "description_length": 308,
      "index": 336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointConnectionNotificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoint connection notifications, including an optional dry-run flag and a list of notification IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring or removing endpoint connection monitoring in AWS VPC environments.",
      "description_length": 365,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a specification for launching instances during an import process, including settings like architecture, instance type, security groups, and shutdown behavior. It provides functions to construct, serialize, and parse these specifications using JSON, query parameters, or XML input. Concrete use cases include configuring EC2 instances imported from virtual machine images with specific networking and security constraints.",
      "description_length": 441,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCustomerGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing customer gateways in EC2, primarily working with a list of customer gateway data. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this when processing responses from AWS EC2's customer gateway description API calls.",
      "description_length": 340,
      "index": 339,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTagKeySet",
      "library": "aws-ec2",
      "description": "This module handles a list of string values representing instance tag keys in AWS EC2. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing EC2 instance tags, particularly for filtering or categorizing instances based on tag keys.",
      "description_length": 319,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkAclRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a network ACL, including a dry run flag and network ACL ID. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when configuring or managing VPC network ACL deletions programmatically.",
      "description_length": 299,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseHostsResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for releasing EC2 host resources, containing lists of successfully released host IDs and any associated error details for failed releases. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used specifically to handle responses from EC2 host release operations, enabling clear tracking of which hosts were released and which encountered errors.",
      "description_length": 468,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringConnectionOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 peering connection options, including DNS resolution and egress settings between VPCs and ClassicLink. It provides functions to construct, parse, and serialize these options for use in API requests and responses. Concrete use cases include setting up VPC peering connections with custom network access rules and converting configuration data between XML, JSON, and query formats.",
      "description_length": 436,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return collections of transit gateway IDs.",
      "description_length": 299,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a managed prefix list in EC2, including parameters like name, address family, entry list, and maximum entry count. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include configuring network access rules for VPC resources and managing IP prefix lists programmatically via the AWS SDK.",
      "description_length": 422,
      "index": 345,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfaceGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway virtual interface groups, supporting operations to filter, limit, and paginate results. It works with identifiers, filters, and standard AWS request parameters like `max_results` and `next_token`. It is used to retrieve and manage virtual interface group configurations in EC2, enabling precise control over gateway networking resources.",
      "description_length": 404,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 instance block device mapping specifications. It works with XML nodes, JSON values, and AWS query parameters to convert between these formats and the internal list structure. Concrete use cases include processing AWS API responses, constructing requests for EC2 instance configurations, and converting device mapping data to and from JSON for storage or transmission.",
      "description_length": 435,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating DHCP options in EC2, including configurations, tag specifications, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include setting up custom DNS servers or domain names for EC2 instances.",
      "description_length": 330,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 address information, supporting filtering by public IPs, allocation IDs, and custom filters. It includes operations to construct, parse, and serialize requests in JSON, query string, and XML formats. Concrete use cases include retrieving metadata about allocated Elastic IPs or checking address associations in an EC2 environment.",
      "description_length": 387,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 transit gateway route tables. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `TransitGatewayRouteTable.t` values. It is used when managing route table associations and propagations in AWS EC2 transit gateways via API requests.",
      "description_length": 345,
      "index": 350,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags and their associated resource type in EC2 operations. It includes functions to create, serialize, and parse tag specifications, enabling integration with AWS API requests. Use this module when configuring resource tagging during instance, volume, or network interface creation in AWS EC2.",
      "description_length": 345,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeTaskDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the details of an EC2 import volume task, including optional fields like availability zone, bytes converted, description, and nested image and volume descriptions. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from EC2 API calls related to volume import tasks and marshaling data for further processing or display.",
      "description_length": 475,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateConnectionStatusSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of `TerminateConnectionStatus` values. It provides functions to convert these lists to and from XML, JSON, and query string formats. Use this module when working with AWS EC2 API operations that require transmitting or parsing termination connection status data in different wire formats.",
      "description_length": 371,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidrSet",
      "library": "aws-ec2",
      "description": "This module handles lists of BYOIP CIDR blocks, providing operations to convert them to and from XML, JSON, and query parameters. It works with `ByoipCidr.t` lists and supports parsing from XML nodes, serialization to query format, and bidirectional JSON conversion. Use this module when managing custom IP ranges in EC2, such as when importing or advertising IP prefixes.",
      "description_length": 372,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a license configuration request for an EC2 launch template, containing an optional ARN for the license configuration. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query parameters. This module is used when configuring EC2 instances with specific licensing requirements through launch templates.",
      "description_length": 402,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a transit gateway in AWS EC2, containing an optional `TransitGateway` object. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Use this module when handling the output of transit gateway creation operations, particularly for interacting with AWS EC2 services programmatically.",
      "description_length": 407,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInternetGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for describing EC2 internet gateways. It supports filtering by gateway IDs or custom filters, with optional pagination via `next_token` and `max_results`. It is used to construct and serialize API requests when querying gateway configurations in AWS EC2.",
      "description_length": 322,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association in a transit gateway multicast domain, including optional fields for attachment ID, resource ID, resource type, and subnet. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing multicast domain associations in AWS EC2 transit gateways, particularly when configuring or retrieving subnet and resource relationships.",
      "description_length": 473,
      "index": 358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 snapshot import operation, including fields for the task ID, description, snapshot details, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing responses from AWS EC2 snapshot import tasks and processing associated metadata and status information.",
      "description_length": 425,
      "index": 359,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotPriceHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying spot price history in AWS EC2, including parameters like instance types, time range, and filters. It provides functions to construct, serialize, and parse these requests, supporting operations such as filtering by availability zone, setting time bounds, and handling pagination with max results and next token. Concrete use cases include retrieving historical spot prices for cost analysis, optimizing instance bidding strategies, and monitoring price trends over time.",
      "description_length": 522,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state codes of an FPGA image in EC2, with specific values like `Pending`, `Failed`, `Available`, and `Unavailable`. It provides bidirectional conversions between these states and strings, JSON, and XML, along with query parameter serialization. It is used to interpret and serialize FPGA image state responses from AWS EC2 APIs.",
      "description_length": 384,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRegionsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 regions, supporting operations to filter results, specify region names, and control request execution with flags like `dry_run` and `all_regions`. It works with custom list types for filters and region names, along with standard boolean types. It is used to construct, parse, and serialize EC2 region query requests in AWS interactions.",
      "description_length": 395,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC attachment data structures, providing direct conversions to and from XML, JSON, and query formats. It supports parsing VPC attachment lists from XML nodes, serializing them into JSON or AWS query format, and constructing or extracting values from these lists. Concrete use cases include processing AWS EC2 API responses containing multiple VPC attachments and preparing such data for further API requests.",
      "description_length": 438,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportKeyPairResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of importing an EC2 key pair, including fields like key fingerprint, name, and ID, along with associated tags. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used when working with AWS EC2 key pair imports to manage and exchange key metadata and tags programmatically.",
      "description_length": 410,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6Pool",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing IPv6 address pools, including their identifiers, descriptions, CIDR blocks, and associated tags. It provides functions to construct, serialize, and parse these structures to and from XML, JSON, and AWS query formats. Concrete use cases include handling IPv6 pool configurations in EC2 instances and processing responses from AWS API calls related to IPv6 address management.",
      "description_length": 424,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEnclaveOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for enclave options in an EC2 launch template, specifically supporting the `enabled` flag as an optional boolean. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving enclave settings for EC2 instances programmatically.",
      "description_length": 363,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTagNotificationAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying which instance tags to monitor for changes, using a set of tag keys and an optional flag to include all tags. It provides functions to construct, serialize, and deserialize this configuration for use in EC2 instance tag monitoring. Use this module when setting up or managing EC2 instance tag notifications in AWS SDK workflows.",
      "description_length": 380,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HttpTokensState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with values `Optional` and `Required`, representing HTTP token states for EC2 instance metadata configuration. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support configuring and interpreting EC2 instance metadata settings in API requests and responses.",
      "description_length": 419,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying instance configuration overrides in an EC2 fleet request, including fields like instance type, max price, subnet ID, and priority. It provides functions to construct, parse, and serialize these configurations to JSON or query parameters. Use this when defining varied launch options for EC2 fleet instances, such as setting different instance types or pricing across availability zones.",
      "description_length": 435,
      "index": 369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN endpoint, with fields for a status code and a descriptive message. It provides functions to construct, parse, and convert the status object to and from XML, JSON, and query formats. Concrete use cases include handling API responses and serializing endpoint status information for logging or further processing.",
      "description_length": 387,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of disabling fast snapshot restores in EC2. It includes operations to construct, parse, and serialize the result, which contains sets of successful and unsuccessful snapshot restore entries. It is used to process API responses when managing snapshot restore settings in AWS EC2.",
      "description_length": 339,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway prefix list attachment, with fields for the attachment ID, resource type, and resource ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when managing AWS EC2 transit gateway attachments linked to prefix lists, particularly for network routing configurations.",
      "description_length": 410,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnmonitorInstancesResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of unmonitoring EC2 instances, specifically containing a list of instance monitoring information. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS EC2 API calls that disable detailed monitoring for instances.",
      "description_length": 385,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignIpv6AddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of assigning IPv6 addresses to an EC2 network interface. It provides operations to create, parse, and serialize results containing assigned IPv6 addresses and the associated network interface ID. Use cases include processing responses from AWS EC2 API calls that modify IPv6 address assignments.",
      "description_length": 326,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseHostReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for purchasing host reservations in AWS EC2, including fields like client token, currency code, host ID set, limit price, offering ID, and tag specifications. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or from XML nodes. Concrete use cases include submitting host reservation purchase requests and handling their serialization in API calls.",
      "description_length": 432,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of instance credit specification requests for EC2 instances. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when configuring or retrieving credit specifications for EC2 instances in AWS.",
      "description_length": 298,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateAndOverridesResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the response for an EC2 launch template and its overrides. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing EC2 fleet configurations to capture template specifications and their associated overrides.",
      "description_length": 336,
      "index": 377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAttachmentStatusList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of volume status attachment statuses. It provides functions to convert between XML, JSON, and query string representations of these lists. Use this module when processing EC2 volume status responses that include attachment state information, such as during status checks or monitoring workflows.",
      "description_length": 377,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteOrigin",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the origin of a route in an EC2 route table, with specific values for route creation and propagation. It provides bidirectional conversions between strings and the enumerated type, along with standard serialization and parsing functions for JSON, XML, and query parameters. It is used to specify and handle route origins when interacting with EC2 route tables via the AWS API.",
      "description_length": 428,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetOnDemandAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines and handles conversion for the on-demand allocation strategy used in EC2 fleet configurations. It supports two strategies: `Lowest_price` and `Prioritized`, and provides functions to convert between strings, JSON, XML, and query parameters. It is used to specify how EC2 should allocate on-demand instances within a fleet based on pricing or predefined priorities.",
      "description_length": 384,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIamInstanceProfileAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing IAM instance profile associations in EC2, providing constructors, parsing, and serialization functions. It works with IAM instance profile association sets and optional pagination tokens. It is used to process and format responses from the EC2 API when retrieving IAM role associations for instances.",
      "description_length": 345,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for making requests to purchase scheduled EC2 instances, including optional client tokens and dry-run flags. It provides functions to construct, parse, and serialize these requests into query parameters or JSON format. Use this when interacting with the EC2 API to schedule instance purchases programmatically.",
      "description_length": 347,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA image IDs in string format, providing direct conversions to and from JSON and query parameters. It includes parsing from XML nodes and constructing empty lists. Useful when managing FPGA images in AWS EC2, particularly for batch operations or filtering by image IDs.",
      "description_length": 300,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 key pair information, providing functions to parse, convert to query parameters, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query types. Use this module when managing EC2 key pairs, such as listing or processing existing key pair metadata in AWS operations.",
      "description_length": 339,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MoveStatus",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants representing the status of an EC2 instance move between VPC and Classic networking. It provides bidirectional conversions between the type and strings, JSON, and XML, enabling serialization and deserialization for API interactions. Use this type to track or transition instance migration states and integrate with AWS SDK operations requiring move status representation.",
      "description_length": 419,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestHistoryResponse",
      "library": "aws-ec2",
      "description": "This module defines a response structure for querying the history of a Spot Fleet request, containing fields like history records, timestamps, and pagination tokens. It provides functions to construct, parse, and serialize the response in formats like JSON and AWS query. Concrete use cases include handling and processing the output of EC2 Spot Fleet history requests in AWS integrations.",
      "description_length": 389,
      "index": 386,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 fleet launch templates, with optional fields for launch template ID, name, and version. It includes functions to construct instances, parse XML input, convert to query parameters or JSON, and create instances from JSON data. It is used to configure and manage EC2 fleet resources programmatically.",
      "description_length": 353,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EventType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing event types in EC2, including instance changes, fleet request changes, errors, and informational events. It provides conversions to and from strings, JSON, and query parameters, enabling straightforward integration with AWS APIs. Use this module when handling EC2 event data in API requests or responses, particularly for filtering or reacting to specific event types.",
      "description_length": 412,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in EC2 scheduled instances, including optional fields for device name, EBS configuration, no device indicator, and virtual name. It provides functions to construct, parse, and convert these mappings to and from XML, JSON, and query formats. Use this module when configuring or retrieving block device settings for EC2 instances with specific storage requirements.",
      "description_length": 437,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a local gateway route, including the destination CIDR block, local gateway route table ID, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Use this module when managing local gateway routes in AWS EC2, particularly for constructing deletion requests programmatically.",
      "description_length": 404,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpStringList",
      "library": "aws-ec2",
      "description": "Handles lists of public IP addresses as strings in AWS EC2 operations. Provides parsing from XML nodes, conversion to query parameters, and JSON serialization/deserialization. Useful when managing EC2 instance networking data like security group rules or VPC configurations.",
      "description_length": 274,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when building or processing API calls to reject VPC attachments in a transit gateway setup.",
      "description_length": 359,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for deleting a transit gateway route table, containing an optional transit gateway route table object. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when handling responses from EC2 API calls that delete transit gateway route tables, to extract and manipulate the returned route table data.",
      "description_length": 418,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a client VPN route, containing an optional status field. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Concrete use cases include handling responses from AWS EC2 API calls when managing client VPN routes, specifically for inspecting deletion outcomes.",
      "description_length": 400,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAcceleratorAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Elastic Inference accelerator association, with fields for the accelerator ARN, association ID, state, and association time. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. It is used to manage metadata about EC2 instance associations with Elastic Inference accelerators in AWS.",
      "description_length": 388,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the possible states of an EC2 volume and provides bidirectional conversions between these states and strings, JSON, and XML. It includes functions to serialize and deserialize volume states for use in API requests and responses. The module is used to interpret and construct volume state data when interacting with AWS EC2 services.",
      "description_length": 376,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disabling VPC classic link DNS support in AWS EC2. It provides constructors, parsers, and serializers for a result type that contains an optional boolean indicating success or failure. Use this module when interacting with EC2's VPC API to manage DNS support state programmatically.",
      "description_length": 316,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a transit gateway route table, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing AWS EC2 transit gateway route tables, specifically to prepare deletion requests with or without execution verification.",
      "description_length": 374,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableAssociationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway route table associations. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `TransitGatewayRouteTableAssociation.t` values. It is used when managing route table associations in AWS EC2 transit gateways, particularly during API requests and responses.",
      "description_length": 378,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfacesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateway virtual interfaces, including a set of virtual interface data and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include processing AWS EC2 API output and preparing data for subsequent paginated requests.",
      "description_length": 372,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReferenceSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of transit gateway prefix list reference sets. It works with lists of `TransitGatewayPrefixListReference.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing route propagation and prefix list associations in transit gateways.",
      "description_length": 333,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotCapacityRebalance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing spot capacity rebalance settings for EC2 fleets, primarily working with the `t` record type that includes an optional replacement strategy. It provides functions to construct instances, parse XML input, and convert to and from query parameters and JSON format. It is used when configuring EC2 fleet options that dictate how instances are replaced during capacity rebalancing events.",
      "description_length": 432,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing monitoring configuration for EC2 spot fleet requests, primarily used to specify whether detailed monitoring is enabled. It includes functions to construct, parse, and serialize the configuration to query parameters or JSON, enabling integration with AWS API operations that manage spot fleets. Use cases include setting up or updating spot fleet requests with monitoring options.",
      "description_length": 435,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterNetworkServicesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying network services in a traffic mirror filter. It supports operations to add or remove specific network services, includes a dry-run flag, and provides serialization and deserialization functions for JSON and XML formats. It is used when configuring traffic mirroring rules in EC2 to control which network traffic is captured and mirrored.",
      "description_length": 391,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 1 IPsec negotiations. It includes functions to construct, serialize, and convert the structure to and from XML, JSON, and query formats. It is used when configuring or retrieving VPN connection options that require specifying allowed encryption algorithms.",
      "description_length": 362,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway route table with fields for identifiers, state, association and propagation flags, creation time, and tags. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing route table configurations in AWS EC2, such as creating and updating route tables for transit gateways.",
      "description_length": 426,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TunnelOption",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing tunnel options for configuring virtual private gateways, with fields for IP addresses, encryption settings, and protocol parameters. It provides functions to construct, parse, and serialize tunnel configurations for use in API requests or responses. Concrete use cases include setting up secure tunnels with specific cryptographic algorithms and timeouts, and converting between XML, JSON, and internal representations during AWS API interactions.",
      "description_length": 497,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeByoipCidrsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing BYOIP CIDR blocks in EC2, containing a set of BYOIP CIDR entries and an optional pagination token. It provides operations to construct, serialize, and parse these results in various formats including JSON, query parameters, and XML. It is used when managing Bring-Your-Own-IP address ranges in AWS EC2.",
      "description_length": 350,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeviceType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Ebs` and `Instance_store`, representing storage device types in EC2. It provides bidirectional conversions between these values and strings, JSON, and query parameters, along with parsing from XML. These operations support handling device type data in API requests and responses, particularly when interacting with EC2 instance configurations.",
      "description_length": 394,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 fleet launch templates, with optional fields for template ID, name, and version. It supports converting between XML, JSON, and query string formats, and constructing or parsing instances using those fields. It is used when configuring EC2 Auto Scaling fleets that rely on launch templates for instance configuration.",
      "description_length": 372,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 block device mappings, providing operations to convert between XML, JSON, and query formats. It supports parsing block device mappings from XML nodes and converting them to AWS query parameters or JSON structures. Use this module when configuring EC2 instance storage settings programmatically or processing responses from EC2 API calls involving block device mappings.",
      "description_length": 402,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LastError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing error information with optional message and code fields. It provides functions to construct, parse, and convert error data to and from XML, JSON, and query formats. It is used to handle error responses in EC2 operations, such as reporting failures in instance launches or configuration issues.",
      "description_length": 347,
      "index": 412,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesErrorCode",
      "library": "aws-ec2",
      "description": "This module defines error codes for handling failures when deleting queued Reserved Instances in EC2. It includes operations to convert between string representations and enumerated error types, and supports serialization to and from JSON and query formats. It is used to interpret and respond to specific error conditions during API interactions involving queued Reserved Instance deletions.",
      "description_length": 392,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UsageClassTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 usage class types, providing conversions to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing empty lists. Use this module when working with AWS EC2 APIs that require or return usage class type lists, such as describing instance usage or managing reserved instances.",
      "description_length": 343,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VpnGateway objects, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, and constructs gateway lists from various data sources. Use this module when processing EC2 API responses or building requests that involve multiple virtual private gateways.",
      "description_length": 349,
      "index": 415,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayMulticastGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching for transit gateway multicast groups, including a list of multicast groups and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. Use this module when retrieving and processing multicast group information from EC2 transit gateways, especially when handling paginated responses.",
      "description_length": 422,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing different network interface types in EC2, including `Interface`, `NatGateway`, and `Efa`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These capabilities support handling network interface type data in API requests and responses when interacting with EC2 services.",
      "description_length": 432,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPropagationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the propagation state of a transit gateway route table, with values like `Enabling`, `Enabled`, `Disabling`, and `Disabled`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when interacting with AWS EC2 APIs to manage transit gateway route propagation states programmatically.",
      "description_length": 486,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBatchErrorCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing specific error codes for batch cancellation operations in EC2, such as invalid or malformed fleet request IDs and non-cancellable states. It provides bidirectional conversions between the enumerated values and strings, along with serialization and deserialization functions for JSON, XML, and query parameters. These functions are used when handling batch cancellation responses and requests in EC2 APIs.",
      "description_length": 456,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a route table in EC2, containing an association ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when preparing or handling disassociation operations in EC2 routing configurations.",
      "description_length": 336,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttachmentChanges",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing changes to a network interface attachment, with optional fields for the attachment ID and whether the interface should be deleted on termination. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. Use this module when modifying network interface attachment properties in EC2 instances, such as updating termination behavior or detaching interfaces.",
      "description_length": 461,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of prefix lists, primarily used for interacting with EC2's prefix list data. It provides functions to convert between XML, JSON, and query string formats, facilitating communication with AWS EC2 APIs. Use cases include processing responses from DescribePrefixLists calls and constructing requests that reference multiple prefix lists.",
      "description_length": 402,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 ClassicLinkInstance, containing fields for security groups, instance ID, tags, and VPC ID. It provides functions to construct, parse, and serialize instances of this structure for use in querying and interacting with AWS EC2 APIs. Concrete use cases include managing EC2 instance links to VPCs and handling associated metadata during infrastructure automation tasks.",
      "description_length": 423,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSubnetsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 subnets, including a list of subnets and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing subnet responses in AWS EC2, especially for paginated results.",
      "description_length": 320,
      "index": 424,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorPortRange",
      "library": "aws-ec2",
      "description": "This module defines a type for representing a port range used in traffic mirroring configurations, with optional start and end ports. It provides functions to construct, parse, and convert port ranges to and from XML, JSON, and query formats. Use this module when configuring or querying traffic mirror rules that require specifying port ranges.",
      "description_length": 345,
      "index": 425,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedIntancesIds",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of reserved instance IDs in AWS EC2. It provides functions to convert these lists to and from XML, JSON, and query formats, enabling direct interaction with AWS API requests and responses. Use cases include processing API input/output and constructing requests for managing reserved instances.",
      "description_length": 375,
      "index": 426,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 import snapshot tasks. It provides operations to convert task lists to and from XML, JSON, and query formats. Use it when managing snapshot import workflows, such as tracking progress or handling responses from the EC2 API.",
      "description_length": 256,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageVolumeDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a disk image volume with optional identifier and size. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling EC2 disk image metadata, particularly during import or export operations involving volume descriptions.",
      "description_length": 344,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 Client VPN endpoint. It includes fields for the endpoint ID, optional subnet ID, destination CIDR block, and dry-run flag, along with functions to construct, parse, and serialize the request for API calls. It is used when managing Client VPN routing configurations in AWS.",
      "description_length": 345,
      "index": 429,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with three variants (`Request`, `Maintain`, `Instant`) representing different fleet types in EC2. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. These operations directly support interacting with EC2 APIs that require fleet type values.",
      "description_length": 350,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA device information in AWS EC2. It provides operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when working with FPGA device data in EC2 instance responses or when configuring FPGA-based instances programmatically.",
      "description_length": 310,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for creating a VPC endpoint in AWS EC2. It includes functions to construct, parse, and serialize the request, supporting data types such as strings, boolean flags, lists, and JSON or XML representations. It is used to configure and submit VPC endpoint creation requests with specific networking and security settings.",
      "description_length": 385,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of enabling VPC classic link in EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this module when handling responses from EC2 API calls that enable VPC classic link functionality.",
      "description_length": 348,
      "index": 433,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 Diffie-Hellman group numbers for EC2 VPN connections. It provides functions to construct, parse, and serialize the value, which is an optional integer, to and from query parameters, JSON, and XML. It is used when configuring or retrieving VPN tunnel options in AWS EC2.",
      "description_length": 355,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostOfferingSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of EC2 host offerings. It works with lists of host offering records, supporting operations to convert between XML, JSON, and query formats. Use this module when processing responses or building requests involving EC2 dedicated host offerings.",
      "description_length": 307,
      "index": 435,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a local gateway route table and a virtual interface group in AWS EC2. It includes functions to construct, parse, and serialize the association data for use with AWS API requests and responses. The structure includes identifiers, state, tags, and ARNs, and supports JSON and query parameter encoding for API interactions.",
      "description_length": 393,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VirtualizationTypeList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of virtualization type lists for EC2 instances. Works with XML nodes, JSON values, and AWS query parameters to transform lists of virtualization types. Used when managing instance launch configurations or querying instance metadata that includes virtualization types.",
      "description_length": 314,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of product codes in AWS EC2 operations. It provides functions to convert product code lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of base string types, specifically for handling product code data in API requests and responses.",
      "description_length": 307,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 route table, supporting optional fields like destination CIDR, IPv6 CIDR, or prefix list ID, along with a required route table ID. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. Use this when configuring or modifying route tables programmatically in AWS EC2 environments.",
      "description_length": 422,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 2 encryption algorithm requests for EC2. It provides functions to parse, convert to query format, and serialize/deserialize to and from JSON and XML. It works directly with lists of `Phase2EncryptionAlgorithmsRequestListValue.t` values, supporting operations needed to configure or transmit encryption settings in EC2 API calls.",
      "description_length": 363,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceHealthStatus",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the health status of an EC2 instance, with values `Healthy` and `Unhealthy`. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless integration with AWS APIs. Use this module when handling instance health checks or interfacing with load balancers that report status.",
      "description_length": 351,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Hdd` and `Ssd`, representing disk types. It provides functions to convert between strings and the `t` type, including `to_string`, `of_string`, and bidirectional association lists. Additional functions support JSON and XML serialization, query parameter conversion, and value construction, making it suitable for handling disk type values in AWS EC2 API requests and responses.",
      "description_length": 452,
      "index": 442,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the successful response data from deleting EC2 launch template versions. It provides operations to parse XML input into a list of success items, convert the list to query parameters or JSON format, and construct the response from JSON. The primary data type is a list of `DeleteLaunchTemplateVersionsResponseSuccessItem.t`, representing individual deletion results. Use this module when managing EC2 launch templates to process and serialize deletion responses in API interactions.",
      "description_length": 501,
      "index": 443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a Traffic Mirror filter rule, including its identifier and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring or managing network traffic mirroring in AWS environments.",
      "description_length": 325,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancers",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of Classic Load Balancer data structures in EC2. Works with lists of ClassicLoadBalancer records, converting between XML, JSON, and query formats. Used when managing load balancer configurations via AWS SDK calls or parsing API responses.",
      "description_length": 280,
      "index": 445,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RemovePrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an entry to remove from a prefix list, containing a CIDR range. It provides functions to construct, parse, and serialize this data type to and from XML, JSON, and query parameters. It is used when modifying prefix lists in EC2 by specifying CIDR ranges to remove.",
      "description_length": 315,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CidrAuthorizationContext",
      "library": "aws-ec2",
      "description": "This module defines a CIDR authorization context with message and signature fields. It provides functions to create, parse, and convert the context to and from query parameters, XML nodes, and JSON. It is used when authorizing CIDR blocks in EC2, such as during VPC peering or IP address allocation operations.",
      "description_length": 310,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RootDeviceType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing the root device type of an EC2 instance, with constructors `Ebs` and `Instance_store`. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON and query parameters. It is used to specify and parse the root device type when interacting with EC2 instance configurations or API responses.",
      "description_length": 407,
      "index": 448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Transit Gateway Multicast Domain, with fields for its ID, associated transit gateway ID, state, creation time, and tags. It provides functions to construct instances, parse XML responses, convert to query parameters, and serialize to and from JSON. Concrete use cases include managing multicast domain configurations in AWS EC2 and handling API responses for multicast domain operations.",
      "description_length": 444,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Client VPN endpoint IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing Client VPN endpoint associations or filtering related API requests.",
      "description_length": 290,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Traffic Mirror target in AWS EC2, including optional fields for identifiers, resource types, metadata, and tags. It provides functions to construct, serialize, and deserialize instances for use in API requests and responses. Concrete use cases include configuring network traffic mirroring to network interfaces or load balancers for monitoring and analysis.",
      "description_length": 410,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleInstanceResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for EC2 instance bundling operations, containing an optional bundle task. It provides functions to construct, parse, and serialize the result to query parameters or JSON, specifically handling XML input for task extraction. It is used in workflows that manage EC2 instance image creation and task status tracking.",
      "description_length": 347,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Tenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 instance tenancy options (`Default`, `Dedicated`, `Host`) and provides bidirectional conversions between strings and this type. It includes functions to serialize and deserialize tenancy values to and from JSON, query parameters, and XML, ensuring correct string representations for API interactions. Use cases include handling EC2 launch configurations and parsing tenancy responses from AWS API calls.",
      "description_length": 451,
      "index": 453,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting EC2 fleets, including options to specify whether to terminate associated instances and whether to perform a dry run. It works with fleet ID sets and boolean flags to control deletion behavior. Concrete use cases include constructing and serializing API requests to delete multiple EC2 fleets with specific termination policies.",
      "description_length": 380,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of LaunchTemplateElasticInferenceAccelerator values. It works directly with XML nodes, JSON values, and AWS query parameters to enable serialization and deserialization of accelerator data. It is used when configuring EC2 instance launch templates that include elastic inference accelerators, supporting operations like sending requests to AWS APIs or processing API responses.",
      "description_length": 455,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of VPC endpoint records. It provides functions to convert VPC endpoint lists to and from XML, JSON, and query string formats. Use this module when processing AWS EC2 API responses or requests involving multiple VPC endpoints.",
      "description_length": 308,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnTunnelOptionsSpecificationsList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of VPN tunnel options specifications. It works with XML nodes, JSON values, and query parameters, transforming them into and from a list of `VpnTunnelOptionsSpecification.t` values. It is used when configuring or retrieving EC2 VPN connections that involve multiple tunnel configurations.",
      "description_length": 366,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeMovingAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing moving Elastic IP addresses in EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. It works with moving address status sets and optional pagination tokens for handling large result sets.",
      "description_length": 284,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewayIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based carrier gateway IDs for use with AWS EC2 operations. It provides functions to convert these lists into query parameters, JSON representations, and back, supporting request and response handling. It is used when managing carrier gateways in VPC configurations, such as attaching or listing associated gateways.",
      "description_length": 352,
      "index": 459,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Filter",
      "library": "aws-ec2",
      "description": "This module defines a filter type with a name and list of string values, used to represent EC2 API filters. It provides functions to construct, parse, and serialize filters to query parameters or JSON, enabling precise filtering of EC2 resources like instances or volumes. Use this module when interacting with AWS EC2 API operations that require filtering based on attributes such as tags, instance state, or network configuration.",
      "description_length": 432,
      "index": 460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for DNS support, IPv6 support, and appliance mode support, used when configuring transit gateway VPC attachments. It provides functions to construct, parse, and serialize these options to query parameters or JSON, enabling precise control over VPC attachment behavior in EC2. Use this module when creating or managing transit gateway attachments that require custom networking configurations.",
      "description_length": 447,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Region",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing AWS EC2 regions, including their endpoint, region name, and opt-in status. It provides functions to construct, parse, and convert region data to and from JSON and query formats. Concrete use cases include handling region information during EC2 API requests and responses, and managing region-specific configurations in AWS tooling.",
      "description_length": 385,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing AWS EC2 VPN connections, primarily holding a list of `VpnConnection` entries. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML nodes. It is used when retrieving and processing information about existing VPN connections in an AWS environment.",
      "description_length": 369,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a managed prefix list, containing an optional managed prefix list object. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used to handle responses from EC2 API calls that delete managed prefix lists, allowing retrieval and manipulation of the deleted prefix list data.",
      "description_length": 423,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Static` and `Propagated`, representing route types for AWS EC2 transit gateways. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling route type values in API requests or responses involving transit gateway routes.",
      "description_length": 413,
      "index": 465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network interface's private IP address configuration, including optional association metadata, primary status, private DNS name, and IP address. It provides constructors, JSON and XML parsers, and query builders to facilitate handling EC2 network interface details in API requests and responses. Concrete use cases include managing IP address assignments and querying network interface attributes in AWS EC2 instances.",
      "description_length": 470,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentResourceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the resource types that can be attached to an EC2 transit gateway, such as VPCs, VPNs, and peering connections. It includes functions to convert between string representations and the enumerated values, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used when managing transit gateway attachments in AWS EC2, particularly for operations involving resource type validation and API request/response handling.",
      "description_length": 508,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstanceAvailabilityResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing scheduled instance availability in EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. The module works with scheduled instance availability sets and optional pagination tokens.",
      "description_length": 275,
      "index": 468,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetHistoryResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 fleet history, including parsing and serializing the response data. It works with structured data types like `HistoryRecordSet`, `DateTime`, and `String`, primarily for handling pagination and timestamps. Concrete use cases include processing and transforming EC2 fleet history responses for further analysis or API interactions.",
      "description_length": 378,
      "index": 469,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoints, including a dry run flag and a list of endpoint IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when preparing or processing deletion requests for VPC endpoints in AWS infrastructure management workflows.",
      "description_length": 351,
      "index": 470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of `DeleteFleetSuccessItem` values. It provides functions to convert between XML, JSON, and query string formats, and includes a no-op `make` function for compatibility. It is used when processing responses from EC2 fleet deletion operations.",
      "description_length": 325,
      "index": 471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLog",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Flow Log, capturing network traffic information for a VPC resource. It includes functions to construct, parse, and serialize flow log data for AWS API interactions. Use cases include monitoring network traffic patterns, auditing security rules, and integrating flow logs with external logging systems.",
      "description_length": 358,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNatGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a NAT gateway in AWS EC2, including required and optional parameters such as allocation ID, subnet ID, client token, dry run flag, and tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when provisioning NAT gateways to manage network traffic in virtual private clouds.",
      "description_length": 409,
      "index": 473,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceUsageSet",
      "library": "aws-ec2",
      "description": "This module represents a list of EC2 instance usage records. It provides functions to convert instance usage data to and from XML, JSON, and query formats. It is used when handling responses or requests involving multiple instance usage entries in EC2 billing reports.",
      "description_length": 268,
      "index": 474,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 volumes, including filters, volume IDs, and pagination options. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query parameters. Concrete use cases include building API requests to list volumes based on specific criteria, paginating through large result sets, and integrating with AWS SDK operations for volume management.",
      "description_length": 438,
      "index": 475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionOptionsDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing VPC peering connection options with three optional boolean fields controlling DNS resolution and traffic egress between VPCs and ClassicLink. It provides functions to construct, parse, and serialize these options for use in API requests and responses. Concrete use cases include configuring cross-VPC connectivity policies and managing network access rules in AWS EC2.",
      "description_length": 418,
      "index": 476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientData",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing client-side data transfer details, including optional comment, upload start and end times, and upload size. It provides functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. Concrete use cases include handling metadata for client data uploads in EC2 API interactions.",
      "description_length": 375,
      "index": 477,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Image",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 image with detailed metadata such as architecture, image ID, state, and block device mappings. It includes functions to construct, parse, and convert image data to and from XML, JSON, and query formats. Use this module when managing EC2 image information, such as during instance provisioning or image listing operations.",
      "description_length": 378,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 Reserved Instances lists. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `ReservedInstances.t`. It is used when processing responses or requests involving multiple reserved instance records in AWS EC2 interactions.",
      "description_length": 360,
      "index": 479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 ID format modifications, with fields for resource type and a boolean flag for using long IDs. It includes functions to create instances, parse XML input, convert to query parameters, and serialize to and from JSON. It is used to configure ID formatting behavior for EC2 resources like instances or volumes in API requests.",
      "description_length": 378,
      "index": 480,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ActivityStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible activity statuses in EC2, such as fulfillment or termination states. It provides direct conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when handling EC2 auto-scaling group activities, ensuring correct status parsing and API request formatting.",
      "description_length": 414,
      "index": 481,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FilterList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 filters, providing operations to convert them to and from JSON and query parameters. It supports parsing filter lists from XML nodes and constructing filter lists from JSON values. Concrete use cases include processing AWS EC2 API requests and responses that involve multiple filters for resource querying.",
      "description_length": 339,
      "index": 482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StatusName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with the constructor `Reachability`, representing a specific status category. It includes bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to handle status names in API requests and responses, particularly for interpreting and constructing EC2 instance status data.",
      "description_length": 444,
      "index": 483,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a managed prefix list with fields for identifiers, state, version, and metadata. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing IP address range configurations in AWS EC2 and handling prefix list state transitions.",
      "description_length": 364,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for releasing EC2 host resources by encapsulating a list of host IDs. It provides functions to construct, serialize, and parse requests for host release operations. Use this module when managing dedicated host lifecycle actions, such as releasing hosts back to AWS.",
      "description_length": 302,
      "index": 485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopySnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an EC2 snapshot copy operation with fields like source and destination regions, encryption settings, and tagging. It provides functions to construct, serialize, and parse snapshot copy requests, primarily used when replicating snapshots across regions or accounts. Concrete use cases include configuring encrypted snapshot replication and setting up pre-signed URLs for secure cross-region transfers.",
      "description_length": 452,
      "index": 486,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for creating a transit gateway multicast domain, containing an optional `TransitGatewayMulticastDomain` record. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used specifically to handle responses from EC2 API calls that create transit gateway multicast domains.",
      "description_length": 384,
      "index": 487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of replacing a route in a transit gateway, containing an optional updated route. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include handling the output of route replacement operations in AWS EC2 transit gateways, particularly when integrating with JSON or XML-based APIs.",
      "description_length": 414,
      "index": 488,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VpnConnection's options in the EC2 API. It provides functions to create, parse, and serialize a result containing an optional VpnConnection. Use it when processing responses from modifying a VPC's site-to-site VPN connection options.",
      "description_length": 279,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationInstancePlatform",
      "library": "aws-ec2",
      "description": "This module defines a set of platform types for capacity reservations in EC2, including Linux, Windows, and various SQL Server configurations. It provides bidirectional conversion between these types and strings, JSON, and XML, enabling seamless serialization and parsing for API interactions. Use cases include specifying instance platform compatibility when creating or managing EC2 capacity reservations.",
      "description_length": 407,
      "index": 490,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfigData",
      "library": "aws-ec2",
      "description": "This module defines the configuration data for an EC2 Spot Fleet request, including parameters like allocation strategies, instance interruption behavior, and load balancer integration. It provides functions to construct, parse, and serialize fleet configurations for use in API requests. Concrete use cases include setting up auto-scaling spot fleets with specific capacity targets, defining IAM roles and launch templates, and managing termination policies and pricing constraints.",
      "description_length": 483,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 2 encryption algorithm values used in EC2 VPN connection options. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `Phase2EncryptionAlgorithmsListValue.t` type. It is used when configuring or retrieving EC2 VPN tunnel options that specify allowed encryption algorithms for IPsec Phase 2 negotiations.",
      "description_length": 436,
      "index": 492,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 Spot Instance, including open, active, closed, cancelled, and failed states. It provides functions to convert between string representations and the enumerated type, along with serialization to and from JSON and query parameters. These capabilities are used when handling Spot Instance lifecycle events or integrating with AWS APIs that return or require Spot Instance state information.",
      "description_length": 469,
      "index": 493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnTunnelOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying configuration options for a single VPN tunnel in AWS EC2, including IP ranges, cryptographic parameters, and lifetime settings. It provides functions to construct, serialize, and parse these configurations, enabling precise control over VPN tunnel behavior when creating or modifying virtual private gateways. Use cases include setting up site-to-site VPN connections with custom encryption settings or adjusting tunnel rekeying and dead peer detection policies.",
      "description_length": 511,
      "index": 494,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of customer gateway IDs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML responses. It works directly with lists of string values representing customer gateway IDs.",
      "description_length": 279,
      "index": 495,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a transit gateway peering attachment, containing an optional transit gateway peering attachment object. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when handling responses from AWS EC2 API calls that create peering attachments between transit gateways.",
      "description_length": 416,
      "index": 496,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEbsBlockDeviceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS block device configuration for EC2 instances, with optional fields for encryption, deletion behavior, IOPS, KMS key, snapshot, volume size, and volume type. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring EBS volumes for EC2 instance launch templates, particularly for specifying storage options during instance creation.",
      "description_length": 474,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling unsuccessful item responses in EC2 operations, including fields for error details and resource identifiers. It provides functions to construct, parse, and serialize these structures to and from XML, JSON, and query formats. Concrete use cases include processing batch operation failures and extracting specific error information from API responses.",
      "description_length": 398,
      "index": 498,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPCs by providing operations to parse, convert, and construct VPC list data. It works with XML nodes, JSON values, and query parameters, enabling direct interaction with AWS EC2 APIs. Use this module when retrieving or sending multiple VPC records through AWS SDK calls or when processing API responses in XML or JSON format.",
      "description_length": 358,
      "index": 499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateReservedInstancesListingResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a reserved instances listing in EC2. It provides functions to construct, parse, and serialize the result, which includes a list of reserved instances listings. Use this module when managing EC2 reserved instance listings via AWS API calls, particularly for encoding and decoding responses in JSON or XML formats.",
      "description_length": 355,
      "index": 500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling a capacity reservation, including the reservation ID and an optional dry-run flag. It provides functions to create, parse, and serialize the request for use with query parameters or JSON APIs. Use this module when interacting with EC2's capacity reservation cancellation API, particularly for constructing or processing requests in a format compatible with AWS SDK operations.",
      "description_length": 430,
      "index": 501,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Elastic GPU association with optional fields for GPU ID, association ID, state, and time. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML. Use this module when managing GPU resources in EC2 instances, particularly for attaching or monitoring Elastic GPUs.",
      "description_length": 364,
      "index": 502,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCarrierGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a carrier gateway in AWS EC2, including the carrier gateway ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when interacting with the EC2 API to safely configure and send deletion requests for carrier gateways.",
      "description_length": 369,
      "index": 503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a transit gateway multicast domain with a VPC subnet. It includes fields for the multicast domain ID, transit gateway attachment ID, subnet IDs, and a dry-run flag. Operations allow creating, parsing, and serializing the request for use with AWS EC2 API calls.",
      "description_length": 316,
      "index": 504,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Transit Gateway, including its metadata, configuration options, and state. It provides functions to construct, serialize, and parse Transit Gateway records, supporting operations like converting to and from JSON, query parameters, and XML responses. Concrete use cases include managing Transit Gateway resources in AWS EC2, handling API responses, and building requests for gateway creation or modification.",
      "description_length": 464,
      "index": 505,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroupIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of local gateway virtual interface group IDs for EC2 operations. Works with string lists to encode, decode, and transform group ID data for API requests and responses. Used when managing EC2 local gateways, particularly for filtering or targeting operations on virtual interface groups.",
      "description_length": 299,
      "index": 506,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseReservedInstancesOfferingRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when purchasing a reserved EC2 instance offering. It includes fields for instance count, offering ID, optional dry run flag, limit price, and purchase time, all tailored for interaction with AWS EC2 APIs. The module provides functions to construct, parse, and serialize these requests to JSON or query format, enabling precise control over reserved instance purchases.",
      "description_length": 431,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and transformation of transit gateway lists in XML, JSON, and query formats. It operates on lists of `TransitGateway.t` records, providing direct conversions between these external representations and the internal OCaml structure. Concrete use cases include processing AWS EC2 API responses, constructing API requests, and converting between JSON and in-memory data models.",
      "description_length": 417,
      "index": 508,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a local gateway route in EC2. It provides constructors, JSON and XML parsers, and query builders for working with an optional `LocalGatewayRoute.t` value. Use it when processing responses from EC2 API calls that delete local gateway routes.",
      "description_length": 283,
      "index": 509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 virtual private gateways, including optional filters, specific gateway IDs, and a dry-run flag. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. Use this module when building API calls to retrieve information about existing VPN gateways in an AWS environment.",
      "description_length": 394,
      "index": 510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance type offering, with optional fields for instance type, location type, and location. It provides functions to construct, parse, and serialize these offerings to and from XML, JSON, and query formats. Concrete use cases include querying available instance types across regions or zones and filtering offerings based on location or instance type criteria.",
      "description_length": 418,
      "index": 511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 peering connection options, with fields to enable DNS resolution and cross-VPC/cross-ClassicLink traffic. It provides functions to construct, serialize, and parse these options for use in API requests, specifically when modifying or creating VPC peering connections. The module integrates directly with AWS query and JSON serialization formats for transmission and configuration.",
      "description_length": 436,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a traffic mirror filter, including optional fields for the filter and a client token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. Use this module when managing traffic mirroring configurations in AWS EC2, particularly for capturing and analyzing network traffic.",
      "description_length": 410,
      "index": 513,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConversionTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 conversion task, including task metadata like state, expiration time, and associated import details for instances or volumes. It provides functions to construct, serialize, and convert conversion task data to and from JSON, query parameters, and XML. Use this module when managing import tasks for converting virtual machine images to EC2 instances or volumes.",
      "description_length": 417,
      "index": 514,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 fleet history with fields like dry run flag, event type, result limits, pagination token, fleet ID, and start time. It provides functions to construct, parse, and serialize these requests into query parameters or JSON format. Use this module when retrieving historical events for an EC2 fleet, such as tracking instance launches or terminations over time.",
      "description_length": 412,
      "index": 515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying market options when launching EC2 instances, including optional spot market configurations. It provides functions to construct, serialize, and parse these options for use in API requests. Concrete use cases include configuring spot instances with custom bidding and instance interruption behavior in EC2 launch templates.",
      "description_length": 373,
      "index": 516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a specific virtual private network (VPN) connection in Amazon EC2. It includes operations to construct, serialize, and parse the request using JSON and XML formats. The module works directly with string and boolean types to specify the VPN connection ID and a dry-run flag.",
      "description_length": 326,
      "index": 517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Static` and `Propagated`, representing route types in a local gateway configuration. It provides bidirectional conversions between strings and the `t` type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling route type values in API requests or responses involving local gateway routes.",
      "description_length": 432,
      "index": 518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC attributes, specifically enabling DNS hostnames or DNS support, and associates the change with a VPC ID. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. It is used when updating DNS-related settings for a VPC in AWS EC2.",
      "description_length": 355,
      "index": 519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value within a list of phase 2 Diffie-Hellman group numbers in EC2 settings. It supports parsing from XML nodes, conversion to query format and JSON, and construction with an optional integer value. It is used when configuring or retrieving IPsec VPN tunnel options in AWS EC2.",
      "description_length": 336,
      "index": 520,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRouteSource",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with the value `Static`, representing the source of a static route in a virtual private network. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to specify and process static route sources when configuring or interacting with EC2 virtual private gateways.",
      "description_length": 432,
      "index": 521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of resetting the default KMS key ID for EBS volumes, containing an optional KMS key identifier. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Concrete use cases include handling responses from AWS EC2 API calls that modify EBS encryption settings.",
      "description_length": 386,
      "index": 522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint connections, including a set of connections and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when interacting with AWS EC2 to retrieve and process VPC endpoint connection data across multiple pages.",
      "description_length": 371,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcPeeringConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC peering connections, including a list of connections and an optional pagination token. It provides functions to construct, parse, and convert results to and from XML, JSON, and query formats. Use this module when working with AWS EC2 VPC peering connection responses, especially for handling paginated results or integrating with AWS API calls.",
      "description_length": 393,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetActivityStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the activity status of an EC2 fleet, with values like `Error`, `Pending_fulfillment`, `Pending_termination`, and `Fulfilled`. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless integration with AWS API requests and responses. It is used when managing EC2 Auto Scaling fleets to track and respond to fleet state changes.",
      "description_length": 416,
      "index": 525,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceIdRequestSet",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 scheduled instance IDs for batch operations. It provides functions to convert the list into query parameters or JSON format, and to parse results from XML or JSON. Use it when managing multiple scheduled EC2 instances, such as canceling or describing a set of scheduled instances.",
      "description_length": 314,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying VPN connection options in AWS EC2, including fields for IPv4 and IPv6 CIDR ranges and a dry-run flag. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for API requests. Use this module when configuring or updating VPN connections with specific network settings in an AWS environment.",
      "description_length": 384,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIamInstanceProfileAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying IAM instance profile associations in EC2. It includes fields for filtering by association IDs, custom filters, pagination controls, and provides functions to construct, serialize, and parse these requests in various formats. It is used when retrieving information about IAM instance profile associations from AWS, particularly for paginated queries with optional filters.",
      "description_length": 424,
      "index": 528,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayMulticastDomainsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 transit gateway multicast domains, containing a list of multicast domains and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling output from the `describe-transit-gateway-multicast-domains` API call and processing paginated results.",
      "description_length": 406,
      "index": 529,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointAttributeStatus",
      "library": "aws-ec2",
      "description": "This module handles the status attributes of a Client VPN endpoint in AWS EC2, primarily used for retrieving and interpreting endpoint configuration status. It defines a type with optional `code` and `message` fields, and provides functions to construct, parse, and serialize the status data to and from XML, JSON, and query formats. It is used when managing Client VPN endpoints to check configuration states and error messages returned by the EC2 API.",
      "description_length": 453,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an elastic inference accelerator response in an EC2 launch template. It includes fields for the accelerator type and count, both optional, and provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to configure and retrieve elastic inference accelerator settings when working with EC2 instances.",
      "description_length": 409,
      "index": 531,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationType",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing possible connection notification types, currently only \"Topic\". It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used when configuring EC2 connection notifications to specify the target type for receiving events.",
      "description_length": 407,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 snapshot attribute names, with two specific values: `ProductCodes` and `CreateVolumePermission`. It provides bidirectional conversions between strings and the `t` type, along with functions to serialize and deserialize values to and from JSON, query parameters, and XML. These operations support handling EC2 snapshot metadata in API requests and responses.",
      "description_length": 425,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding information about an EC2 snapshot, including metadata like description, tags, encryption status, and volume details. It provides functions to construct, parse, and convert snapshot data to and from JSON and query formats. Concrete use cases include managing snapshot creation, tracking snapshot state transitions, and handling backup metadata in cloud infrastructure workflows.",
      "description_length": 426,
      "index": 534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for launching EC2 instances, including properties like instance type, networking, storage, and metadata options. It supports operations to construct, serialize, and parse instance launch requests in formats suitable for AWS API calls. Use this module when programmatically provisioning EC2 instances with custom settings such as VPC subnets, IAM roles, or GPU specifications.",
      "description_length": 413,
      "index": 535,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVpcAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles results from describing local gateway route table VPC associations, including association sets and pagination tokens. It provides constructors, parsing, and serialization functions for working with EC2 responses in XML, query, and JSON formats. Concrete use cases include processing and transmitting VPC association data retrieved from AWS EC2 API calls.",
      "description_length": 374,
      "index": 536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group names represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with EC2 APIs that require multiple security group names as input, such as instance launch requests or security group association updates.",
      "description_length": 357,
      "index": 537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of launch template network interface specifications. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `LaunchTemplateInstanceNetworkInterfaceSpecification.t` values. It is used when managing EC2 instance network interfaces in launch templates, particularly during API requests and responses.",
      "description_length": 401,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecification",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an Elastic GPU specification with a string-based type field. It provides functions to construct, parse from XML, convert to query parameters, and serialize to and from JSON. This structure is used when configuring EC2 instances with Elastic GPU attachments, specifically to specify the type of GPU to associate.",
      "description_length": 363,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 CIDR block associations in EC2, with optional fields for the CIDR block and associated resource. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing IPv6 network configurations for EC2 resources like VPCs or subnets.",
      "description_length": 360,
      "index": 540,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcPeeringConnectionOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying VPC peering connection options by providing constructors, parsing, and serialization functions. It works with XML, JSON, and AWS query formats to represent and convert the options for both accepter and requester sides of a VPC peering connection. It is used when updating and retrieving VPC peering configurations in AWS EC2.",
      "description_length": 369,
      "index": 541,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserBucket",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and key information, with operations to create, parse, and serialize the structure to various formats. It works with XML, JSON, and query string representations of S3 bucket data. Concrete use cases include handling S3 references in EC2 instance configurations and image import/export operations.",
      "description_length": 358,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetCapacityReservationUsageStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing strategies for using capacity reservations in EC2 fleets, with operations to convert between string representations and the type, parse from XML, and serialize to query parameters, JSON, and back. It works with the `t` type, which has one constructor `Use_capacity_reservations_first`, along with standard conversion and serialization functions. Concrete use cases include configuring EC2 fleet launch preferences and integrating with AWS API requests that require capacity reservation strategy settings.",
      "description_length": 562,
      "index": 543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationPreference",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Open` and `None`, representing capacity reservation preferences. It provides functions to convert between strings and this enumerated type, along with serialization to and from JSON and query parameters. It is used when configuring EC2 instance launch parameters to specify whether to use open capacity reservations or not.",
      "description_length": 374,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Traffic Mirror filter rule in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional updated Traffic Mirror filter rule. Use this module when working with Traffic Mirror configurations to capture and analyze network traffic.",
      "description_length": 320,
      "index": 545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientCertificateRevocationListStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a client certificate revocation list, with optional fields for a status code and a descriptive message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle status information when managing client certificate revocation lists in EC2 operations.",
      "description_length": 387,
      "index": 546,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStorageInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing instance storage details, including total storage size, disk configurations, and NVMe support. It provides functions to construct, parse, and serialize instance storage information for use in AWS EC2 instance configuration and metadata handling. Use cases include querying instance storage properties from XML responses, converting storage data to JSON for API requests, and building storage configurations for EC2 instance types.",
      "description_length": 482,
      "index": 547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a default subnet in a specified availability zone, with an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring or automating VPC subnet creation workflows directly through the AWS SDK.",
      "description_length": 347,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstancePrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing private IP address details for an EC2 instance, including optional association metadata, primary status, private DNS name, and IP address. It provides functions to construct, parse, and convert instances of this structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from EC2 API calls that describe instance network interfaces and serializing private IP information for further processing or transmission.",
      "description_length": 499,
      "index": 549,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BlobAttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling optional binary large object (Blob) attributes, primarily used in EC2 service interactions. It provides functions to construct, serialize, and convert BlobAttributeValue values to and from JSON and query string formats. Typical use cases include encoding and decoding Blob-based fields in API requests and responses, such as image data or encrypted payloads.",
      "description_length": 408,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyDefaultCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying default credit specifications in EC2, supporting operations to configure CPU credits for unlimited instance families. It includes functions to construct, serialize, and parse requests in various formats such as JSON and query strings. Concrete use cases include setting baseline performance credits for T-series instances in AWS EC2 environments.",
      "description_length": 400,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for handling the outcome of deleting flow logs, containing a set of unsuccessful items. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. It is used to process responses from EC2 API calls that delete flow logs, capturing any errors that occurred during deletion.",
      "description_length": 372,
      "index": 552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 image creation operation, primarily storing an optional image ID. It provides functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used to manage the output of creating an Amazon Machine Image (AMI) in AWS EC2, enabling easy serialization and deserialization for API interactions.",
      "description_length": 441,
      "index": 553,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesListRequest",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of fleet launch template overrides for EC2. It provides functions to convert between XML, JSON, and internal OCaml representations, specifically working with lists of `FleetLaunchTemplateOverridesRequest.t`. It is used when configuring EC2 Auto Scaling fleets with multiple launch templates and overrides.",
      "description_length": 388,
      "index": 554,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.CidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing CIDR blocks, primarily used in networking configurations. It includes functions to create, parse, and convert CIDR block data to and from JSON and query formats. Concrete use cases include handling subnet configurations and IP range definitions in EC2 operations.",
      "description_length": 317,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTargetResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling capacity reservation targets in EC2 responses, with optional fields for capacity reservation ID and resource group ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when working with EC2 API operations that involve capacity reservation targeting, such as describing or modifying instance placements.",
      "description_length": 431,
      "index": 556,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying DHCP options in EC2, supporting filtering by IDs and criteria like dry-run, pagination tokens, and result limits. It provides functions to construct, parse, and serialize these requests in JSON, XML, or query string formats. Concrete use cases include retrieving specific DHCP configurations, listing all options with filters, and paginating through large result sets.",
      "description_length": 421,
      "index": 557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteList",
      "library": "aws-ec2",
      "description": "This module defines a list of route entries for EC2 route tables, supporting serialization and deserialization. It provides operations to convert route lists to and from XML, JSON, and query parameters. Use this module when managing EC2 routing configurations, such as when creating or updating route tables with specific route definitions.",
      "description_length": 340,
      "index": 558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleFieldList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of traffic mirror filter rule fields as a list. It provides operations to convert between XML, JSON, and query string representations of these field lists. It is used when configuring or retrieving traffic mirror filter rules in EC2, specifically for specifying which packet data to mirror.",
      "description_length": 351,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a launch template in AWS EC2, containing an optional updated launch template. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include handling the output of EC2 API calls that update launch templates, converting the result to JSON for logging, or extracting updated template details for further processing.",
      "description_length": 457,
      "index": 560,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NewDhcpConfigurationList",
      "library": "aws-ec2",
      "description": "This module defines a list of DHCP configurations for EC2 instances, supporting operations to convert between XML, JSON, and query formats. It works with lists of `NewDhcpConfiguration.t` values, enabling serialization and deserialization for API interactions. Concrete use cases include processing DHCP options when configuring VPCs or subnets in AWS EC2.",
      "description_length": 356,
      "index": 561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeManagedPrefixListsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing managed prefix lists in EC2, providing structured access to the list data and pagination token. It works with XML, JSON, and query parameter representations of the result, enabling conversion between these formats. Concrete use cases include processing responses from the EC2 API when listing managed prefix lists and preparing subsequent paginated requests.",
      "description_length": 403,
      "index": 562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 export tasks by providing functions to create, parse, and serialize a list of export tasks. It works with XML, JSON, and AWS query formats to facilitate communication with the EC2 API and processing of export task data. Use this module when retrieving and managing virtual machine export information from EC2.",
      "description_length": 358,
      "index": 563,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Address",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 address with fields for IP allocations, instance associations, and metadata. It provides functions to construct, parse, and serialize address data for use in API requests and responses. Concrete use cases include managing Elastic IP addresses, tracking network interface ownership, and handling customer-owned IP pools in EC2 instances.",
      "description_length": 393,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing network configuration details for EC2 instances, including fields like network performance, interface limits, IP address counts, and support for features like ENA and IPv6. It provides functions to construct, parse, and serialize these network configurations to and from XML, JSON, and AWS query formats. Use cases include handling network-related metadata in EC2 instance descriptions and configuring network settings in AWS management tools.",
      "description_length": 493,
      "index": 565,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling VPC classic link functionality, containing a VPC identifier and an optional dry-run flag. It provides operations to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include preparing and dispatching API calls to AWS EC2 to manage VPC connectivity settings.",
      "description_length": 385,
      "index": 566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplatesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 launch templates, supporting filtering by IDs, names, and custom filters, along with pagination via `next_token` and `max_results`. It provides functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving launch template details for environment setup, instance provisioning, or template auditing in AWS deployments.",
      "description_length": 443,
      "index": 567,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceTypeDetailSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 service type details as lists. It provides operations to convert between XML, JSON, and query string formats, specifically for service type detail data structures. Use this module when processing AWS EC2 service configuration responses or building requests that require service type details in different encoding formats.",
      "description_length": 389,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway multicast domain IDs, represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return collections of multicast domain IDs in different serialization formats.",
      "description_length": 352,
      "index": 569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStrategy",
      "library": "aws-ec2",
      "description": "This module defines and maps string representations of EC2 placement group strategies\u2014Cluster, Partition, and Spread\u2014enabling conversion between string values and the corresponding enumerated type. It supports operations for serializing and deserializing these strategies to and from JSON, XML, and query parameters, ensuring compatibility with AWS API requests and responses. Concrete use cases include configuring EC2 placement groups in AWS deployments and processing related API data.",
      "description_length": 488,
      "index": 570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPairSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of user ID/group pair records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 security group rules that reference user IDs and associated groups. Use this module when managing AWS EC2 security group ingress or egress rules that involve cross-account access.",
      "description_length": 405,
      "index": 571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Storage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing storage configurations in AWS EC2, specifically supporting optional S3 storage settings. It provides functions to construct, serialize, and parse these configurations using XML, JSON, and query formats. Use cases include handling storage options in EC2 instance launch requests and managing snapshot exports to S3.",
      "description_length": 368,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of a canceled EC2 Spot Instance request. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization functions for JSON and XML. These operations are used when handling Spot Instance lifecycle events and API responses in AWS EC2 integrations.",
      "description_length": 395,
      "index": 573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AdvertiseByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for advertising a BYOIP CIDR block in EC2, including the CIDR string and an optional dry-run flag. It provides functions to construct, parse, and convert the request to various formats like JSON and query parameters. Use this module when preparing API calls to advertise IP ranges to EC2, such as during IP address management workflows.",
      "description_length": 376,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to reset the default KMS key ID for EBS encryption. It includes operations to construct, parse, and serialize the request in various formats such as JSON and AWS query format. It is used specifically when managing EBS encryption settings in AWS EC2 via API calls.",
      "description_length": 329,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 1 integrity algorithm requests in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. It works directly with lists of `Phase1IntegrityAlgorithmsRequestListValue.t` values, supporting serialization, deserialization, and request construction.",
      "description_length": 347,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings for EC2 instances, including optional fields for device name, EBS configuration, no-device indicators, and virtual device names. It provides functions to construct, parse, and serialize these specifications to support configuring storage when launching or modifying EC2 instances. Use cases include defining root device volumes, attaching EBS volumes, or excluding devices during instance setup.",
      "description_length": 469,
      "index": 577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportToS3Task",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring and handling EC2 disk image exports to S3. It includes functions to create, parse, and serialize export tasks, supporting operations like converting to JSON or query parameters for API requests. Concrete use cases include initiating and managing disk image exports in AWS EC2 workflows.",
      "description_length": 339,
      "index": 578,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDeregisteredGroupMembers",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling deregistered multicast group members in a transit gateway, including identifiers for the multicast domain, network interfaces, and the group IP address. It provides functions to construct, parse, and serialize the structure to query or JSON formats. It is used when managing multicast traffic in AWS EC2 transit gateways, particularly when removing network interfaces from multicast groups.",
      "description_length": 440,
      "index": 579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreAddressToClassicRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for restoring an Elastic IP address to the EC2-Classic platform. It includes operations to create, parse, and serialize the request, supporting both XML and JSON formats. The module is used when migrating resources between EC2-Classic and VPC environments, specifically to reassociate a public IP address with a Classic instance.",
      "description_length": 369,
      "index": 580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a network interface permission, with values like `Pending`, `Granted`, `Revoking`, and `Revoked`. It provides bidirectional conversion functions between the type and strings, JSON, and query parameters, enabling seamless serialization and parsing. It is used to manage and transmit network interface permission states in EC2 operations, such as granting or revoking access to network interfaces.",
      "description_length": 460,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 tags, including optional parameters like dry run, filters, maximum results, and pagination token. It provides functions to construct, parse, and serialize tag requests for API calls. Concrete use cases include querying EC2 tag data with custom filters and handling paginated responses.",
      "description_length": 346,
      "index": 582,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a traffic mirror filter in AWS EC2, containing an optional traffic mirror filter ID. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Use this module when handling responses from EC2 API calls that delete traffic mirror filters, particularly for processing or forwarding the resulting filter ID.",
      "description_length": 441,
      "index": 583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a DHCP configuration structure with an optional key and a list of values, supporting operations to create, parse, and serialize configurations for use in EC2 API requests. It works with XML, JSON, and AWS query formats to facilitate configuration management in cloud environments. Use cases include setting up or modifying DHCP options for Amazon VPCs.",
      "description_length": 372,
      "index": 584,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway route table IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return collections of transit gateway route table IDs.",
      "description_length": 322,
      "index": 585,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequestIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot instance request IDs, represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. Use this when managing spot instance requests in AWS EC2, particularly for batch operations or API interactions that require multiple request IDs.",
      "description_length": 349,
      "index": 586,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneOptInStatus",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants representing availability zone opt-in states and provides bidirectional conversions between strings and these variants. It includes functions to serialize and deserialize the type to and from JSON, query parameters, and XML, enabling integration with AWS API requests and responses. Use this module when configuring or querying EC2 availability zone settings in AWS SDK workflows.",
      "description_length": 429,
      "index": 587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 snapshot, including the snapshot ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to JSON or query parameters. Use this module when issuing snapshot deletion requests to AWS EC2, either directly or through higher-level SDK interfaces.",
      "description_length": 347,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAvailabilityZonesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing availability zones in EC2, primarily containing a list of availability zones. It provides operations to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used when retrieving and processing metadata about EC2 availability zones in AWS.",
      "description_length": 344,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableTransitGatewayRouteTablePropagationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of enabling a transit gateway route table propagation. It provides a data structure containing an optional propagation object, along with functions to construct, parse, and convert the result to and from JSON and query formats. It is used when managing route table propagations in AWS EC2 transit gateways, specifically to enable and represent the propagation state.",
      "description_length": 397,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateAddressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating an Elastic IP address with an EC2 instance. It provides functions to create, parse, and serialize the association result, which includes an optional association ID. Use this module when managing IP address associations in EC2, particularly when working with responses from the EC2 API.",
      "description_length": 331,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling elastic GPU specifications in EC2 responses, primarily working with string-typed fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing GPU resources for EC2 instances, particularly when interacting with AWS APIs or processing related responses.",
      "description_length": 389,
      "index": 592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes for associations in EC2, such as `Associating`, `Associated`, and `Disassociated`. It includes functions to convert between string representations and the enumerated values, along with serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when handling association state transitions and API responses in EC2 resource management.",
      "description_length": 449,
      "index": 593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` that represents the result of creating a capacity reservation in EC2, containing an optional `CapacityReservation` record. It provides functions to construct instances, parse XML responses, convert to query parameters, and serialize to and from JSON. It is used specifically to handle the output of EC2 capacity reservation creation operations in AWS SDK workflows.",
      "description_length": 408,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroupsConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for target groups, including serialization and deserialization functions. It works with XML nodes, JSON values, and AWS query parameters to facilitate API interactions. Use this module when configuring or retrieving target group settings in EC2 services.",
      "description_length": 300,
      "index": 595,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying volume attributes in EC2, supporting operations to set auto-enable I/O and specify volume IDs. It works with boolean and string types, along with optional flags for dry runs. It is used to construct, parse, and serialize volume modification requests for AWS API calls.",
      "description_length": 322,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociationIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of VPC association IDs for local gateway route tables. Provides parsing from XML, conversion to query parameters, and JSON serialization/deserialization. Used when managing EC2 local gateway route table associations in AWS API requests and responses.",
      "description_length": 263,
      "index": 597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying price schedules with optional currency code, price, and term. It provides functions to create, parse, and convert instances to and from XML, JSON, and query formats. It is used to configure pricing parameters for EC2 resources like reserved instances or spot fleets.",
      "description_length": 318,
      "index": 598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Instance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance with detailed metadata such as instance ID, type, state, network interfaces, and device mappings. It includes functions to construct, parse, and convert instance data to and from JSON and query formats. Concrete use cases include managing instance lifecycle information, serializing instance data for API requests, and deserializing responses from AWS EC2 into typed records for further processing.",
      "description_length": 464,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a transit gateway multicast domain. It includes an optional `TransitGatewayMulticastDomainAssociations` field to represent updated associations after disassociation. The module provides functions to construct, parse, and serialize the result in query format, JSON, or XML. Use this when managing multicast domain disassociation responses in AWS EC2.",
      "description_length": 398,
      "index": 600,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ZoneNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 zone names represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 operations that require multiple availability zones as input or output.",
      "description_length": 295,
      "index": 601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneMessageList",
      "library": "aws-ec2",
      "description": "This module handles lists of availability zone messages in AWS EC2. It provides operations to parse, convert to query format, and serialize to and from JSON. Use it when processing responses that include availability zone message data from EC2 API calls.",
      "description_length": 254,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PaymentOption",
      "library": "aws-ec2",
      "description": "This module defines and manipulates payment option types for EC2 services, supporting conversions between string representations and the enumerated type values `AllUpfront`, `PartialUpfront`, and `NoUpfront`. It provides serialization and deserialization functions for JSON, XML, and query string formats, enabling direct integration with AWS API requests and responses. Use cases include handling billing configuration inputs, generating API requests, and parsing EC2 reservation payment options.",
      "description_length": 497,
      "index": 603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with values `Pending` and `Applied`, representing the state of instance metadata options in EC2. It provides bidirectional conversions between strings and the enumerated type, along with standard serialization and parsing functions for XML, JSON, and query parameters. Use this module when handling EC2 instance metadata configuration states in API requests or responses.",
      "description_length": 415,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying load permissions in EC2, with optional user IDs and permission groups. It provides functions to construct, serialize, and parse these permissions in various formats including JSON and query strings. Use this module when managing AMI or snapshot sharing configurations that require precise access control settings.",
      "description_length": 365,
      "index": 605,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting VPC endpoint connections, including fields like `dry_run`, `service_id`, and `vpc_endpoint_ids`. It provides functions to construct, parse, and serialize the request for use with AWS EC2 operations. Use this module when managing VPC endpoint connectivity in AWS environments.",
      "description_length": 329,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ThreadsPerCoreList",
      "library": "aws-ec2",
      "description": "This module handles lists of integers representing threads per core configurations. It provides functions to parse, serialize, and convert these lists to and from XML, JSON, and query parameters. It is used when configuring EC2 instance threading options, where each entry specifies the number of threads per core.",
      "description_length": 314,
      "index": 607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PricingDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding pricing details with optional count and price fields. It provides functions to create, parse, and convert pricing data to and from JSON and query formats. It is used to handle pricing information in EC2 service responses and requests.",
      "description_length": 283,
      "index": 608,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRegionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 regions, primarily working with the `t` type that contains a list of regions. It provides functions to construct, parse, and serialize region data to and from XML, JSON, and query formats. Use this module when retrieving and processing region information from EC2, such as listing available regions or extracting region-specific metadata.",
      "description_length": 387,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceStateFault",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing faults related to EC2 spot instance state changes, with optional `code` and `message` fields. It provides functions to construct, parse, and serialize these fault records to and from XML, JSON, and query formats. Concrete use cases include handling error responses when managing spot instance requests or monitoring state transitions in EC2.",
      "description_length": 395,
      "index": 610,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.RestoreManagedPrefixListVersionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of restoring a managed prefix list to a specific version in AWS EC2. It includes a single data type `t` that may contain a `ManagedPrefixList.t` value. Operations include constructing, parsing from XML, converting to query format, and serializing to and from JSON.",
      "description_length": 295,
      "index": 611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceReservationValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the value of a reserved instance and its associated ID. It provides functions to construct, serialize, and deserialize this structure using JSON, query parameters, or XML. It is used to manage reserved instance values in EC2 operations, such as retrieving or applying reservation discounts.",
      "description_length": 340,
      "index": 612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateways in EC2, supporting filtering by IDs and criteria, with optional pagination and dry-run capabilities. It works with XML, JSON, and query string formats for input and output serialization. Concrete use cases include constructing and parsing API requests to describe local gateways with specific filters or limits in an AWS EC2 environment.",
      "description_length": 405,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorTargetsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror targets, including a set of traffic mirror targets and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include processing and transmitting lists of traffic mirror targets retrieved from AWS EC2.",
      "description_length": 366,
      "index": 614,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStrategyList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 placement group strategies, providing conversions to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing empty lists. Use this module when working with AWS EC2 placement group strategy data in different serialization formats.",
      "description_length": 300,
      "index": 615,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the authentication methods for a Client VPN endpoint, including certificate-based, directory service, and federated authentication. It provides conversions between string representations and the type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to configure and manage authentication types in Client VPN endpoint operations.",
      "description_length": 427,
      "index": 616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring spot instance options in EC2, including fields like allocation strategy, interruption behavior, and instance pool limits. It provides functions to construct, parse, and serialize these configurations to support spot fleet requests. Use this module when setting up or modifying EC2 spot instance fleets with specific operational constraints.",
      "description_length": 390,
      "index": 617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayMulticastDomainAssociationsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of retrieving associations for an EC2 Transit Gateway Multicast Domain. It includes a list of multicast domain associations and an optional pagination token for subsequent requests. It is used to process and serialize responses from AWS EC2 API calls that list these associations.",
      "description_length": 314,
      "index": 618,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseSet",
      "library": "aws-ec2",
      "description": "This module handles a list of purchase items, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with lists of `Purchase.t` values, focusing on serialization and deserialization for API interactions. Use cases include preparing purchase data for AWS API requests and processing responses containing purchase information.",
      "description_length": 378,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateIamInstanceProfileRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to disassociate an IAM instance profile from an EC2 instance. It includes functions to construct the request, convert it to query format, serialize it to JSON, parse it from XML nodes, and deserialize it from JSON. It is used specifically when managing IAM instance profile associations in EC2 through AWS API operations.",
      "description_length": 383,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for GPU device information with optional fields such as name, manufacturer, count, and memory details. It provides functions to construct, parse, and convert GPU device data to and from XML, JSON, and query formats. It is used when handling GPU device metadata in EC2 instance types or launch configurations.",
      "description_length": 345,
      "index": 621,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 network interfaces, supporting operations to filter by interface IDs or criteria, with optional pagination and dry-run functionality. It works with AWS-specific types including filter lists, network interface ID lists, and standard AWS primitives like boolean, string, and integer. Concrete use cases include querying network interface details for monitoring, configuration validation, or resource management in AWS environments.",
      "description_length": 490,
      "index": 622,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteTableVpcAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an association between a local gateway route table and a VPC in AWS EC2. It includes operations to construct, serialize, and parse the request in various formats such as JSON and query parameters. The primary data type is a record containing the association ID and an optional dry-run flag, used when issuing deletion requests to AWS.",
      "description_length": 387,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of running scheduled EC2 instances, primarily by capturing the set of launched instance IDs. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when managing scheduled instance launches and tracking their resulting instance IDs programmatically.",
      "description_length": 371,
      "index": 624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogsResourceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing resource types for flow logs in AWS EC2, including VPC, Subnet, and NetworkInterface. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These capabilities support configuration and parsing of flow log resources in API requests and responses.",
      "description_length": 391,
      "index": 625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImagesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying FPGA images in EC2, supporting filtering by image IDs, owners, and custom filters, along with pagination via `next_token` and `max_results`. It provides functions to construct, parse, and serialize the request in JSON or query string formats. Concrete use cases include listing FPGA images owned by specific accounts or matching tag-based criteria during EC2 instance configuration.",
      "description_length": 435,
      "index": 626,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of NAT gateway address data structures, providing operations to convert between XML, JSON, and query parameter representations. It supports parsing NAT gateway address information from XML nodes and converting lists of addresses to AWS query format or JSON arrays. Use this module when working with AWS EC2 NAT gateway responses that include multiple IP address assignments or network interface details.",
      "description_length": 429,
      "index": 627,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing DHCP options in AWS EC2, including fields for DHCP configurations, options ID, owner ID, and tags. It provides functions to construct, parse, and convert DHCP options to and from JSON and query formats. Concrete use cases include configuring network settings for EC2 instances and managing associated metadata.",
      "description_length": 360,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying FPGA image attributes in EC2. It provides functions to create, parse, and serialize the result, which includes an optional FPGA image attribute. Use this module when working with FPGA image updates in AWS EC2, particularly for processing responses from the `ModifyFpgaImageAttribute` API call.",
      "description_length": 337,
      "index": 629,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of traffic mirror session records. It provides functions to convert between XML, JSON, and query parameter representations, specifically for working with AWS EC2 traffic mirror session data. Use this module when interacting with AWS EC2 APIs that require or return traffic mirror session sets in various data formats.",
      "description_length": 400,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulInstanceCreditSpecificationItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful instance credit specification update, containing an optional instance ID. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. This is used when managing credit specifications for EC2 instances, particularly in scenarios involving burstable performance instances.",
      "description_length": 394,
      "index": 631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseHostReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of purchasing a host reservation in EC2. It includes fields for client tokens, currency codes, purchase details, and pricing information, along with functions to construct, parse, and serialize the data for API interactions. It is used to process and return purchase outcomes in EC2's host reservation workflow.",
      "description_length": 372,
      "index": 632,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportImageTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing export image tasks, including optional parameters like dry run, filters, task IDs, and pagination controls. It provides functions to construct, parse, and serialize these requests into query or JSON formats. Concrete use cases include querying AWS EC2 for the status of specific image exports or listing tasks with custom filters and pagination.",
      "description_length": 400,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizationRule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing authorization rules in a client VPN configuration, including fields like client endpoint ID, group ID, CIDR ranges, and access permissions. It provides functions to construct, serialize, and deserialize these rules to and from JSON, query parameters, and XML. Concrete use cases include managing access control policies for AWS Client VPN endpoints and synchronizing rule state with remote services.",
      "description_length": 453,
      "index": 634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCarrierGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a carrier gateway, containing an optional `CarrierGateway` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2 API calls that delete carrier gateways, particularly for extracting and manipulating the returned carrier gateway data.",
      "description_length": 438,
      "index": 635,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of client VPN authentication requests. It provides functions to convert between XML, JSON, and internal data representations, specifically working with `ClientVpnAuthenticationRequest.t` values. It is used when configuring or modifying client authentication settings for AWS EC2 Client VPN endpoints, enabling integration with identity providers.",
      "description_length": 428,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for deleting an EC2 subnet. It works with XML, JSON, and query string formats, handling data types like string and boolean. Concrete use cases include constructing API requests to delete a subnet by ID, optionally in dry-run mode.",
      "description_length": 300,
      "index": 637,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedIpv6PoolCidrsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving associated IPv6 CIDR blocks from a pool, including parameters like pool ID, pagination token, and result limit. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. It is used when interacting with EC2's IPv6 pool management API to list assigned CIDR ranges.",
      "description_length": 383,
      "index": 638,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing an EC2 key pair, including fields like key name, public key material, and optional tags. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this when programmatically importing SSH keys into AWS EC2 to launch instances with secure access.",
      "description_length": 348,
      "index": 639,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestInstanceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance types, providing operations to convert them to and from JSON and query formats. It includes functions for parsing instance type lists from XML and JSON data. Use this module when working with AWS EC2 APIs that require sending or receiving multiple instance types, such as describing instance types or filtering launch configurations.",
      "description_length": 375,
      "index": 640,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.OwnerStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing owners in EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when working with EC2 APIs that require or return lists of owner strings, such as describing images or snapshots.",
      "description_length": 331,
      "index": 641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 fleet instance configuration with optional fields for launch templates, lifecycle, instance IDs, instance type, and platform. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Concrete use cases include managing responses from EC2 fleet creation requests and handling instance-specific configurations in AWS deployments.",
      "description_length": 434,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 host instances with optional instance ID, instance type, and owner ID. It includes functions to construct instances, parse them from XML, convert to query parameters, and serialize to and from JSON. It is used when managing EC2 host resources, such as associating or describing dedicated hosts in AWS.",
      "description_length": 359,
      "index": 643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySpotFleetRequestResponse",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the response from modifying a Spot Fleet request, primarily containing an optional boolean indicating success or failure. It provides functions to construct, parse, and serialize the response for use in API interactions, specifically handling XML, JSON, and query parameter formats. Concrete use cases include processing and responding to Spot Fleet modification requests in AWS EC2 automation tools or custom resource management systems.",
      "description_length": 489,
      "index": 644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCoipPoolUsageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a COIP pool usage request, including the COIP pool ID, a set of COIP address usages, and a local gateway route table ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when retrieving usage information for a specific COIP pool in EC2.",
      "description_length": 375,
      "index": 645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClassicLinkInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying ClassicLink instance information, supporting filtering by instance IDs and other criteria. It provides functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include listing linked EC2 instances with VPCs and paginating through large result sets using `next_token` and `max_results`.",
      "description_length": 394,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6PoolSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of IPv6 pool data as lists. It provides functions to convert IPv6 pool lists to and from XML, JSON, and query formats, supporting direct data transformation for API interactions. Use this module when processing IPv6 pool responses or requests in AWS EC2 operations.",
      "description_length": 338,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for constructing, parsing, and serializing route replacement requests in an EC2 environment. It handles optional routing parameters like CIDR blocks, gateway IDs, and target configurations, all tied to a required route table ID. It is used to configure or update routes in virtual private cloud (VPC) routing tables by specifying targets such as gateways, instances, or peering connections.",
      "description_length": 439,
      "index": 648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCapacityReservationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 instance's capacity reservation attributes, including the instance ID, capacity reservation specification, and an optional dry-run flag. It provides functions to construct, serialize, and parse this structure for use in API requests. Concrete use cases include updating capacity reservations for EC2 instances and simulating changes without applying them.",
      "description_length": 413,
      "index": 649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an EC2 traffic mirror session, including required fields like network interface, target, and filter IDs, along with optional parameters such as packet length, description, and tags. It provides functions to construct, serialize, and parse the request in various formats, including JSON and query strings. Concrete use cases include configuring traffic mirroring for network monitoring and security analysis in AWS EC2 environments.",
      "description_length": 484,
      "index": 650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for EC2 launch template creation, containing optional launch template and validation warning fields. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this module when handling responses from creating launch templates in AWS EC2, particularly for processing validation warnings or extracting the created template.",
      "description_length": 398,
      "index": 651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 launch template, supporting optional parameters like dry run, template ID, or template name. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing deletion requests for EC2 launch templates by ID or name, with optional dry-run validation.",
      "description_length": 378,
      "index": 652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCpuOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in a launch template, including core count and threads per core. It provides functions to create, parse, and serialize these options for use in API requests or configuration management. Concrete use cases include configuring EC2 instance CPU settings during template creation or updates.",
      "description_length": 351,
      "index": 653,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 regions, providing functions to parse, convert to query parameters, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query types. Use this module when interacting with AWS EC2 APIs that require listing or processing multiple regions.",
      "description_length": 309,
      "index": 654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OperationType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Add` and `Remove`, representing operation types in the context of EC2 service logic. It provides bidirectional conversions between these variants and strings, JSON, and query parameters, enabling seamless serialization and deserialization. These functions are used when handling API requests and responses that require distinguishing between adding or removing resources.",
      "description_length": 422,
      "index": 655,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesListingsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 Reserved Instances listings, containing a list of `ReservedInstancesListing` entries. It provides functions to construct, parse, and serialize the result in various formats including XML, JSON, and query parameters. It is used when retrieving and processing Reserved Instances listing details from the EC2 API, typically for cost management and resource planning.",
      "description_length": 415,
      "index": 656,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.WithdrawByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of withdrawing a Bring Your Own IP (BYOIP) CIDR block in EC2. It provides constructors, parsing, and serialization functions for a structure that optionally contains a BYOIP CIDR. Use this module when processing responses from the EC2 API after initiating a BYOIP CIDR withdrawal.",
      "description_length": 311,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying the default KMS key ID for EBS encryption. It includes functions to construct, parse, and serialize the result in various formats such as JSON and AWS query format. It works with XML input for parsing and handles optional string values for the KMS key ID.",
      "description_length": 329,
      "index": 658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrefixListsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing prefix lists in EC2, providing constructors, parsing, and serialization functions. It works with pagination tokens and sets of prefix lists, enabling retrieval and manipulation of network access control data. Use it when querying EC2 prefix lists for VPC route filtering or security audits.",
      "description_length": 335,
      "index": 659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesId",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling Reserved Instances IDs in AWS EC2, with functions to create, parse, and convert the structure to and from query parameters and JSON. It works primarily with string-based identifiers wrapped in an option type to represent presence or absence of an ID. Concrete use cases include managing EC2 Reserved Instance metadata during API requests and responses, particularly when serializing or deserializing data for AWS SDK operations.",
      "description_length": 478,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyHostsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of modifying EC2 hosts, containing lists of successfully modified host IDs and any associated error information for failed modifications. It provides functions to construct, parse, and serialize the result in various formats, including JSON, XML, and query parameters. Concrete use cases include processing responses from AWS EC2 API calls that modify host configurations, such as changing host properties or associating hosts with new instances.",
      "description_length": 507,
      "index": 661,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoipPool",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a CoIP pool, including its CIDR blocks, associated local gateway route table, and metadata like tags and ARN. It provides functions to construct, serialize, and deserialize instances for use in API requests and responses. Concrete use cases include managing CoIP pool configurations in EC2, such as creating or updating pools and processing their responses from AWS services.",
      "description_length": 425,
      "index": 662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotFleetResponse",
      "library": "aws-ec2",
      "description": "This module defines a response type for spot fleet requests, containing an optional spot fleet request ID. It provides functions to construct, parse, and serialize the response to query parameters, JSON, and XML formats. It is used to handle the output of spot fleet request operations in EC2, enabling integration with APIs that require structured responses.",
      "description_length": 359,
      "index": 663,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayPrefixListReferencesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving transit gateway prefix list references, including a set of references and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses or further processing. The module works with XML, JSON, and query string formats, making it suitable for integration with AWS API clients and server-side request handling.",
      "description_length": 414,
      "index": 664,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a placement group in EC2, including Pending, Available, Deleting, and Deleted. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. These operations are used when interacting with EC2 APIs to interpret and construct placement group state data.",
      "description_length": 436,
      "index": 665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 snapshot attributes, including the attribute name, snapshot ID, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying snapshot permissions or metadata before performing operations like snapshot sharing or deletion.",
      "description_length": 379,
      "index": 666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotPriceHistoryList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot price history entries. It provides operations to convert spot price data to and from JSON and query formats, and includes functions to parse XML input into spot price records. It is used when retrieving and processing historical spot price data from AWS EC2.",
      "description_length": 296,
      "index": 667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnclaveOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for enclave options with a single boolean field indicating whether enclaves are enabled. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query parameters. It is used when configuring EC2 instance launch templates to specify enclave support.",
      "description_length": 327,
      "index": 668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelExportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling an export task, containing a single field for the export task ID. It provides functions to create, parse, and convert the request to query or JSON formats, as well as parsing from JSON. It is used when interacting with AWS EC2 to programmatically cancel an ongoing export task by its identifier.",
      "description_length": 349,
      "index": 669,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a local gateway route, containing an optional `LocalGatewayRoute` record. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling EC2 API responses when creating routes and converting route data to and from JSON or query formats for transmission.",
      "description_length": 406,
      "index": 670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying route creation parameters in EC2, including fields like destination CIDR blocks, gateway IDs, and route table identifiers. It provides functions to construct, serialize, and parse route requests, primarily used when configuring network routing in AWS EC2. Concrete use cases include adding routes to VPC route tables using various targets such as gateways, NATs, or VPC endpoints.",
      "description_length": 429,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of an FPGA image, with optional fields for a state code and a descriptive message. It provides functions to construct, parse, and convert the state to various formats including JSON, query parameters, and XML. Concrete use cases include managing FPGA image lifecycle states and handling state transitions in AWS EC2 operations.",
      "description_length": 387,
      "index": 672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 VPN connection, including its configuration, state, associated gateways, routes, and metadata. It provides functions to construct, parse, and serialize VPN connection data for interacting with AWS EC2 APIs. Use this module when managing VPN connections programmatically, such as creating, updating, or inspecting connections and their properties in an AWS environment.",
      "description_length": 425,
      "index": 673,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with three variants (`ACCEPT`, `REJECT`, `ALL`) representing traffic filtering policies. It provides bidirectional conversions between strings and the type, JSON and query parameter serialization, and XML parsing. It is used to specify traffic handling behavior in network access control rules and firewall configurations.",
      "description_length": 353,
      "index": 674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDetailList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshot details, providing operations to convert them to and from XML, JSON, and query formats. It supports parsing snapshot data from AWS XML responses and serializing snapshot lists for API requests. Use this module when working with AWS EC2 snapshot metadata in different serialization formats.",
      "description_length": 331,
      "index": 675,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 key pair, including parameters like key name, dry run flag, and tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include setting up new SSH key pairs for EC2 instances with custom tags and validating request payloads before submission.",
      "description_length": 384,
      "index": 676,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointRouteTableIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of route table IDs for VPC endpoints in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. It is used when managing route tables associated with VPC endpoints, such as during creation or modification of VPC endpoint configurations.",
      "description_length": 324,
      "index": 677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPCs in EC2, containing a list of VPCs and an optional pagination token. It provides functions to construct, parse, and convert the result to query parameters, JSON, or from JSON. Use this when processing responses from EC2's `DescribeVpcs` API call, especially for handling paginated results.",
      "description_length": 338,
      "index": 678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of fast snapshot restore error items. It works with XML nodes, JSON values, and query parameters to facilitate error handling during EC2 snapshot operations. Use this module when processing API responses or constructing requests related to disabling fast snapshot restores in EC2.",
      "description_length": 355,
      "index": 679,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StopInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of stopping EC2 instances, primarily working with a list of instance state changes. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query strings. Concrete use cases include processing responses from AWS EC2 stop instance API calls and converting them for further processing or storage.",
      "description_length": 373,
      "index": 680,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIpv6CidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing IPv6 CIDR block associations with subnets, including their association ID, CIDR block value, and state. It provides functions to construct, parse, and convert these associations to and from JSON and query formats. It is used when configuring or retrieving subnet IPv6 CIDR block information in EC2.",
      "description_length": 348,
      "index": 681,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcIpv6CidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an IPv6 CIDR block association for a VPC, including fields such as association ID, CIDR block, state, network border group, and IPv6 pool. It provides operations to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing or inspecting IPv6 CIDR block associations in AWS EC2 VPC configurations.",
      "description_length": 404,
      "index": 682,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing network interface permissions, including identifiers, filters, pagination, and result limits. It provides functions to construct, parse, and serialize requests for querying AWS EC2 network interface permissions. Use this module when retrieving information about specific network interface permissions or applying filters to narrow down results in an EC2 environment.",
      "description_length": 421,
      "index": 683,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesConfigurationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances configurations, providing functions to parse XML input into configuration lists, convert configuration lists to query parameters or JSON format, and construct empty lists. It works with the `ReservedInstancesConfiguration.t` type, representing EC2 reserved instance settings such as instance count, platform, and instance type. Use this module when managing or modifying EC2 reserved instance offerings, particularly when interacting with AWS APIs that require configuration lists in specific formats.",
      "description_length": 553,
      "index": 684,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationResultList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and converting lists of reserved instances modification results. It works with XML nodes, JSON values, and query parameters to facilitate AWS EC2 API interactions. Use it to process responses or build requests involving modifications of reserved instances.",
      "description_length": 295,
      "index": 685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 export tasks, containing optional lists of export task IDs and filters. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when querying specific export tasks by ID or applying filters to narrow down results in an EC2 environment.",
      "description_length": 351,
      "index": 686,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcTenancy",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the tenancy options for a VPC in AWS EC2, with only the `Default` constructor. It provides bidirectional conversions between strings and the `t` type, string serialization, XML parsing, and JSON and query parameter encoding. Use cases include translating API input/output for VPC tenancy settings and ensuring correct string representations in requests and responses.",
      "description_length": 418,
      "index": 687,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteList",
      "library": "aws-ec2",
      "description": "This module defines a list of transit gateway routes with operations to convert to and from XML, JSON, and query formats. It works with `TransitGatewayRoute.t` lists and standard AWS serialization types like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. It is used to handle route list data when managing transit gateways in AWS EC2, such as when creating or describing route tables.",
      "description_length": 386,
      "index": 688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostInstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 host instances, providing operations to convert them to and from XML, JSON, and query parameters. It works with the `HostInstance.t` type, representing each host instance's properties. Use this module when processing responses or requests involving multiple host instances in EC2 APIs.",
      "description_length": 318,
      "index": 689,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DirectoryServiceAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a directory service authentication request, containing an optional directory ID string. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query parameters. This module is used when configuring EC2 instances to authenticate with AWS Directory Service, specifically when specifying directory IDs in API requests.",
      "description_length": 407,
      "index": 690,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting specific versions of a launch template in AWS EC2, including optional dry run flag, launch template ID or name, and a list of versions to delete. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when programmatically managing EC2 launch template versions via their string identifiers.",
      "description_length": 401,
      "index": 691,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientConfigurationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting a Client VPN client configuration, primarily providing a data structure to store the configuration string and functions to serialize and deserialize it. It works with a single data type `t` that contains an optional string representing the client configuration. Use this module when retrieving and processing client configuration data from a Client VPN endpoint, particularly for exporting configurations in formats like OpenVPN.",
      "description_length": 473,
      "index": 692,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelCertificateResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPN tunnel certificate in EC2, primarily by encapsulating an optional `VpnConnection` type. It provides functions to construct, parse, and serialize the result to formats like JSON and query strings. Use this module when processing responses from EC2 API calls that modify VPN tunnel certificates.",
      "description_length": 343,
      "index": 693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of EC2 instance description calls, providing access to a list of reservations and an optional pagination token. It includes functions to construct, parse, and convert the result to and from JSON and query formats. It is used when processing responses from AWS EC2's DescribeInstances API to retrieve and paginate through instance data.",
      "description_length": 366,
      "index": 694,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing Client VPN endpoints in AWS EC2. It provides operations to create, parse, and convert the result data to and from JSON and query formats. It works with endpoint sets and optional next tokens for pagination, specifically supporting retrieval and processing of Client VPN endpoint information from AWS.",
      "description_length": 345,
      "index": 695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a network ACL in a VPC, including optional dry-run flag, VPC identifier, and tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring and submitting network ACL creation requests programmatically.",
      "description_length": 353,
      "index": 696,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskS3Location",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 location details in EC2 export tasks, with optional fields for the S3 bucket and prefix. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Use this module when configuring or retrieving S3 output locations for EC2 instance exports.",
      "description_length": 350,
      "index": 697,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointConnectionNotificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating VPC endpoint connection notifications in AWS EC2. It includes fields for specifying the notification ARN, events to monitor, and optional identifiers like service ID or VPC endpoint ID. The module provides functions to construct, serialize, and parse these requests in various formats including JSON and query parameters.",
      "description_length": 374,
      "index": 698,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a transit gateway, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module works directly with XML, JSON, and query string formats for request transmission.",
      "description_length": 302,
      "index": 699,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a local gateway route in EC2, including fields for the destination CIDR block, local gateway route table ID, and virtual interface group ID. It provides functions to construct, serialize, and parse route requests in various formats such as JSON and query strings. It is used when configuring routing between a local gateway and a virtual interface group in AWS EC2.",
      "description_length": 418,
      "index": 700,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ApplianceModeSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Enable` and `Disable`, representing appliance mode support settings. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to configure and interpret appliance mode support values in EC2 API requests and responses.",
      "description_length": 391,
      "index": 701,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceTaskDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking details of an EC2 import instance task, including optional description, instance ID, platform, and a set of volume details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from AWS EC2 API calls related to instance import tasks and serializing task data for storage or transmission.",
      "description_length": 441,
      "index": 702,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCoipPoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 CoIP pools, including the list of pools and pagination token. It provides constructors, parsing, and serialization functions for the result type. Use it when processing responses from AWS EC2's DescribeCoipPools API to extract and manipulate pool data or handle pagination.",
      "description_length": 322,
      "index": 703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationList",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 Elastic GPU specifications in list form. Works with XML, JSON, and query parameter formats for AWS API interactions. Used when managing GPU resources for EC2 instances, such as launching or modifying instances with GPU configurations.",
      "description_length": 283,
      "index": 704,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a Client VPN route in AWS EC2, including transitions between string representations and supporting serialization to and from JSON and query formats. It works directly with the `t` type, string values, XML nodes, and AWS-specific data structures like `Aws.Query.t` and `Aws.Json.t`. Concrete use cases include parsing API responses, generating request queries, and converting status strings to typed values during configuration or monitoring of Client VPN routes.",
      "description_length": 534,
      "index": 705,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in EC2 instances, including device names, virtual names, EBS configurations, and device exclusion. It provides functions to construct, serialize, and parse these mappings to and from XML, JSON, and query formats. Use this module when configuring storage for EC2 instances, particularly for defining how block devices are attached during instance launch.",
      "description_length": 427,
      "index": 706,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSecurityGroupIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of security group IDs used in VPC endpoint configurations. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when configuring or retrieving security groups associated with EC2 VPC endpoints.",
      "description_length": 294,
      "index": 707,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupIngressResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of revoking ingress rules in a security group. It includes operations for creating, parsing, and serializing the result, which contains a boolean indicating success and a list of IP permissions that were not found. It is used to handle responses from EC2 API calls that revoke security group ingress rules.",
      "description_length": 367,
      "index": 708,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdentityIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying identity ID formats in EC2, with fields for a principal ARN and an optional resource. It provides functions to construct, parse, and serialize the request to JSON or query parameters. Use this when configuring or retrieving ID format settings for IAM principals in EC2 environments.",
      "description_length": 335,
      "index": 709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for the result of copying an EC2 image, containing an optional image ID. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from the EC2 copy image API to retrieve the new image identifier.",
      "description_length": 345,
      "index": 710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of IKE version values. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 IKE version lists. Use this module when interacting with AWS EC2 APIs that require or return IKE version data in different encoding formats.",
      "description_length": 362,
      "index": 711,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC peering connection in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional VPC peering connection record. Use this module when managing VPC peering workflows, particularly for handling API responses and converting them to and from JSON or query formats.",
      "description_length": 354,
      "index": 712,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetHostReservationPurchasePreviewResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of previewing a host reservation purchase in EC2. It includes fields for currency code, purchase details, and pricing information, along with functions to construct, parse, and serialize the data for API interactions. It is used to process and manage host reservation pricing responses in string, JSON, and query formats.",
      "description_length": 382,
      "index": 713,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing AWS EC2 transit gateway configurations, specifically for safely initiating or testing deletion operations.",
      "description_length": 375,
      "index": 714,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIpv6PoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying IPv6 address pools, supporting operations to filter, paginate, and configure dry-run behavior. It works with lists of IPv6 pool IDs, string tokens, integers, and boolean flags, along with EC2 filters. It is used to retrieve detailed information about IPv6 pools in AWS EC2, such as when listing pools with specific criteria or paginating through large result sets.",
      "description_length": 417,
      "index": 715,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PropagatingVgwList",
      "library": "aws-ec2",
      "description": "This module handles lists of propagating virtual gateway configurations in AWS EC2. It provides functions to parse XML input into a list of propagating VGW records, convert them to query parameters or JSON format, and construct an empty list. It is used when managing route propagation in EC2 virtual private gateways, particularly when interacting with the AWS API for configuration updates or status retrieval.",
      "description_length": 412,
      "index": 716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePublicIpv4PoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing public IPv4 pools in EC2, providing constructors, parsers, and serializers for the result structure. It works with `PublicIpv4PoolSet.t` and an optional `String.t` for pagination. It is used to process and format responses from the EC2 API when listing public IPv4 address pools.",
      "description_length": 324,
      "index": 717,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the successful response set from disabling fast snapshot restore in EC2. It provides functions to parse XML input into a list of success items, convert the list to query parameters, and serialize to and from JSON. The primary data type is a list of `DisableFastSnapshotRestoreSuccessItem.t`, representing individual success entries in the response.",
      "description_length": 368,
      "index": 718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTagsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 tags, providing functions to create, parse, and convert tag descriptions to query parameters, JSON, and back. It works with EC2 tag descriptions and optional pagination tokens. Use this module when processing responses from EC2 tag queries, especially when handling paginated results or integrating with JSON-based APIs.",
      "description_length": 369,
      "index": 719,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of network interface specifications for EC2 instance launch templates. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML. It is used when configuring or modifying EC2 instance network interfaces via the AWS SDK.",
      "description_length": 297,
      "index": 720,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StorageLocation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and object key locations. It includes functions to construct, parse, and convert storage location data to query parameters or JSON format. It is used when configuring EC2 instance storage settings that reference S3-backed data, such as instance store volumes or snapshot exports.",
      "description_length": 341,
      "index": 721,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportInstanceStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for reporting instance status in EC2, including fields like instance IDs, status type, timestamps, and reason codes. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this when submitting instance health reports to AWS EC2, such as indicating impaired instances with specific failure reasons and timeframes.",
      "description_length": 404,
      "index": 722,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAvailabilityZonesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying availability zones in EC2, supporting filtering by zone names, zone IDs, and optional flags like `all_availability_zones` and `dry_run`. It provides functions to construct, parse, and serialize these requests to JSON or query parameters for API calls. Concrete use cases include listing zones matching specific criteria or checking configuration without making changes using dry run mode.",
      "description_length": 443,
      "index": 723,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DefaultRouteTablePropagationValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing route table propagation states. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. This module is used when configuring route table propagation behavior in AWS EC2, such as enabling or disabling propagation during VPC route table association.",
      "description_length": 428,
      "index": 724,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC CIDR block association, including its association ID, CIDR block, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing IPv4 or IPv6 CIDR blocks associated with a VPC in AWS EC2.",
      "description_length": 327,
      "index": 725,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6RangeList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 ranges in AWS EC2 configurations. It provides functions to parse XML input into IPv6 range lists, convert them to query parameters or JSON format, and construct IPv6 range lists from JSON data. It is used when managing security group rules or network interface configurations that involve IPv6 addresses.",
      "description_length": 338,
      "index": 726,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 key pair, supporting operations to create, serialize, and parse key deletion requests. It works with string and boolean types to represent key names, key pair IDs, and dry run flags. Concrete use cases include constructing API requests to delete SSH key pairs from EC2 instances and converting those requests to query parameters or JSON for transmission.",
      "description_length": 414,
      "index": 727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelImportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for canceling an import task in EC2, including optional fields for the cancellation reason, dry run flag, and import task ID. It provides functions to construct, parse, and serialize the request for use with API calls. Concrete use cases include sending a cancellation request to EC2 and handling the response in JSON or query format.",
      "description_length": 371,
      "index": 728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting flow logs, including a dry run flag and a list of flow log IDs. It provides functions to construct, parse, and serialize the request for use with query parameters or JSON payloads. Concrete use cases include preparing API requests to remove VPC flow logs before processing or archival.",
      "description_length": 338,
      "index": 729,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EphemeralNvmeSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Unsupported`, `Supported`, and `Required`, representing NVMe support states for EC2 instance storage. It includes functions to convert between strings and the enumerated type, enabling parsing and serialization to JSON, XML, and query parameters. Use this module when handling EC2 instance configurations that require specifying ephemeral NVMe device support levels.",
      "description_length": 418,
      "index": 730,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskS3LocationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and prefix information when exporting EC2 resources. It includes functions to create, parse, and convert the structure to and from JSON and query formats. Concrete use cases include configuring S3 export destinations for EC2 instance exports or disk image transfers.",
      "description_length": 328,
      "index": 731,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IpPermissionList",
      "library": "aws-ec2",
      "description": "Handles lists of IP permissions for EC2 security group rules. It provides parsing from XML nodes, conversion to AWS query format, and serialization to and from JSON. Used when managing security group ingress or egress rules with specific IP ranges and protocols.",
      "description_length": 262,
      "index": 732,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetReservationValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the target reservation value configuration for EC2, with optional fields for reservation value and target configuration. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include handling EC2 reserved instance exchange requests and managing capacity configurations in AWS deployments.",
      "description_length": 419,
      "index": 733,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultSubnetResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a default subnet in EC2, primarily parsing and serializing the optional subnet response. It works with XML, JSON, and query string formats, facilitating communication with AWS EC2 APIs. Concrete use cases include processing EC2 API responses when creating default subnets and constructing test or mock responses for subnet creation operations.",
      "description_length": 386,
      "index": 734,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteTableVpcAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating a VPC with a local gateway route table in AWS EC2. It provides constructors, JSON and XML parsers, and query builders for working with the optional `LocalGatewayRouteTableVpcAssociation` data structure. Use this module when creating or processing VPC associations for local gateway route tables in AWS networking workflows.",
      "description_length": 369,
      "index": 735,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddPrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing prefix list entries in AWS EC2, consisting of a CIDR block and an optional description. It provides functions to construct, parse, and convert these entries to and from query parameters and JSON format. It is used when managing VPC prefix lists, such as adding or updating entries in a managed prefix list via the EC2 API.",
      "description_length": 376,
      "index": 736,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HibernationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 instance hibernation options. It includes functions to create, parse, and convert the structure to query parameters or JSON format. Use this when setting up or modifying EC2 instances with hibernation enabled in AWS.",
      "description_length": 273,
      "index": 737,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceCreationType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` with a single constructor `Efa`, representing a network interface creation type in EC2. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless serialization and parsing. It is used specifically for handling EFA (Elastic Fabric Adapter) network interfaces in EC2 API requests and responses.",
      "description_length": 368,
      "index": 738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MonitoringState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the monitoring state of an EC2 instance, with variants for disabled, disabling, enabled, and pending states. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions support handling monitoring state in API requests and responses, particularly when interacting with AWS EC2 services.",
      "description_length": 435,
      "index": 739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidr",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing Bring Your Own IP (BYOIP) CIDR blocks, including fields for the CIDR range, description, status message, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when importing or advertising custom IP ranges in EC2 networking operations.",
      "description_length": 364,
      "index": 740,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusItem",
      "library": "aws-ec2",
      "description": "This module represents EC2 volume status data, including associated actions, events, and attachment states. It provides constructors, parsers, and serializers for handling volume status information retrieved from AWS EC2 APIs. Use this module to inspect or process detailed volume health and event data directly from EC2 responses.",
      "description_length": 331,
      "index": 741,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to disable VPC ClassicLink DNS support, containing an optional VPC ID. It includes functions to construct the request, parse it from XML, and convert it to query or JSON formats. Use this when configuring VPC settings in AWS EC2 to manage DNS resolution for ClassicLink.",
      "description_length": 336,
      "index": 742,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding information about an EC2 key pair, including its ID, fingerprint, name, and associated tags. It provides functions to construct, parse, and serialize key pair data for use with AWS EC2 operations. Use cases include managing SSH key access to EC2 instances and handling key metadata in API requests or responses.",
      "description_length": 360,
      "index": 743,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VgwTelemetryList",
      "library": "aws-ec2",
      "description": "This module represents a list of virtual gateway telemetry entries. It provides functions to parse XML data into a list of telemetry objects, convert the list to a JSON representation, construct a query object, and extract the list from JSON input. The module is used to handle telemetry data for virtual private gateways in AWS EC2, specifically for serializing and deserializing data when interacting with the EC2 API.",
      "description_length": 420,
      "index": 744,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of scheduled EC2 instance data. It provides functions to convert between XML, JSON, and internal data representations, specifically working with `ScheduledInstance.t` lists. Use this module when processing responses or building requests for EC2 scheduled instance APIs, such as when launching or describing scheduled instances.",
      "description_length": 409,
      "index": 745,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying license configurations in EC2 launch templates, primarily working with string and XML data types. It provides functions to construct, serialize, and deserialize license configuration objects, including handling optional ARN values. Concrete use cases include configuring software licenses when launching EC2 instances and processing related API requests and responses.",
      "description_length": 420,
      "index": 746,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableTransitGatewayRouteTablePropagationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disabling a transit gateway route table propagation. It provides constructors, JSON and XML parsers, and query conversion for a structure containing an optional transit gateway propagation. It is used to process API responses when managing AWS EC2 transit gateway route tables.",
      "description_length": 311,
      "index": 747,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring network interface creation in EC2, including fields like subnet ID, security groups, IP addresses, and interface type. It provides functions to construct, serialize, and parse network interface requests in JSON, query string, and XML formats. Use this module when programmatically creating EC2 network interfaces with specific networking and tagging configurations.",
      "description_length": 418,
      "index": 748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a subnet, with values `Pending` and `Available`. It includes functions to convert between string representations and the type, as well as serialization to and from JSON, query parameters, and XML. It is used to handle subnet state values when interacting with EC2 APIs, such as when parsing responses or constructing requests.",
      "description_length": 399,
      "index": 749,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring transit gateway settings, such as DNS support, route table associations, and propagation. It provides functions to construct, parse, and serialize these configuration options for use in API requests. The module is used when modifying AWS EC2 transit gateway properties through the SDK.",
      "description_length": 356,
      "index": 750,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MoveAddressToVpcResult",
      "library": "aws-ec2",
      "description": "This module handles the result of moving an EC2 address to a VPC, providing constructors, parsing, and serialization functions. It works with XML, JSON, and query string formats to manage a result type containing an optional allocation ID and status. Concrete use cases include processing API responses when migrating Elastic IPs to a VPC and constructing requests for status verification.",
      "description_length": 389,
      "index": 751,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSpotDatafeedSubscriptionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a Spot Instance data feed subscription in AWS EC2. It includes operations to construct, parse, and serialize the result, which contains an optional SpotDatafeedSubscription record. Use this module when managing Spot Instance usage data delivery configurations programmatically.",
      "description_length": 320,
      "index": 752,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing attribute names for FPGA images in EC2, with specific variants like `Description`, `Name`, `LoadPermission`, and `ProductCodes`. It provides conversions to and from strings, JSON, and query parameters, enabling direct use in API requests and responses. Concrete use cases include specifying which FPGA image attribute to modify or describe in EC2 operations.",
      "description_length": 402,
      "index": 753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotPlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement parameters of EC2 spot instances, including availability zone, group name, and tenancy. It provides functions to construct, serialize, and deserialize this structure to and from JSON, query parameters, and XML. Use this module when configuring spot instance requests with custom placement settings.",
      "description_length": 360,
      "index": 754,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling capacity reservation settings in EC2, including optional preference and target configurations. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving EC2 instance capacity reservations programmatically.",
      "description_length": 355,
      "index": 755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTablePropagationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of transit gateway route table propagation entries. It works with XML nodes, JSON values, and AWS query parameters to facilitate data transformation during API interactions. Use this module when processing responses or constructing requests involving multiple transit gateway route table propagations.",
      "description_length": 379,
      "index": 756,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VgwTelemetry",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing telemetry information for a virtual gateway in AWS EC2, including fields like route count, status, and IP address. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling API responses and serializing/deserializing telemetry data for network monitoring and diagnostics.",
      "description_length": 410,
      "index": 757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance purchase requests, with fields for the number of instances and a purchase token. It provides functions to create, parse, and serialize these requests in various formats, including JSON and query parameters. Concrete use cases include submitting spot instance purchase requests and handling responses from EC2 APIs.",
      "description_length": 379,
      "index": 758,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of resetting an FPGA image attribute, containing an optional boolean indicating success. It provides functions to construct, parse, and convert the result to various formats including JSON and query parameters. Use this module when handling responses from EC2 API operations that reset FPGA image attributes, such as modifying permissions or visibility settings.",
      "description_length": 423,
      "index": 759,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsOptimizedSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing EBS optimization support states (`Unsupported`, `Supported`, `Default`) and provides bidirectional conversions between strings and the enumerated values. It includes functions for parsing and serializing these values to and from XML, JSON, and query parameters. Use cases include handling EC2 instance EBS optimization settings in API requests and responses.",
      "description_length": 410,
      "index": 760,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateways, providing structured access to a list of transit gateways and an optional pagination token. It includes operations for constructing, parsing, and converting the result to and from XML, JSON, and query formats. It is used when processing responses from the EC2 API's `DescribeTransitGateways` operation, particularly for handling paginated results and serializing/deserializing data during API interactions.",
      "description_length": 473,
      "index": 761,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCapacity",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing instance capacity information in EC2, including available and total capacity counts for specific instance types. It provides functions to construct, parse, and convert instance capacity data to and from JSON and query formats. Use this module when managing EC2 instance capacity details, such as tracking resource availability across instance types in auto-scaling or provisioning workflows.",
      "description_length": 445,
      "index": 762,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ValidationError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing validation errors, with optional code and message fields. It provides functions to create, parse, and convert validation error instances to and from query parameters, JSON, and XML. Use this module when handling API-level validation errors in AWS EC2 operations, such as malformed input or constraint violations.",
      "description_length": 366,
      "index": 763,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 price schedule specifications, providing functions to parse XML input into price schedule lists, convert them to query parameters or JSON format, and construct them from JSON data. It works specifically with lists of `PriceScheduleSpecification.t` records, which represent pricing details for EC2 instances. Use cases include managing spot instance pricing schedules when interacting with AWS EC2 APIs, particularly for requests involving multiple pricing entries across different regions or instance types.",
      "description_length": 540,
      "index": 764,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfigurationRequestSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 target configuration requests. Works with XML nodes, JSON values, and query parameters. Used to convert between these formats and a list of target configuration request structures when interacting with AWS EC2 APIs.",
      "description_length": 264,
      "index": 765,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN route, including optional status code and message fields. It provides functions to construct, parse, and convert the status to various formats like JSON and query parameters. Concrete use cases include handling responses from AWS EC2 API operations related to Client VPN route management, such as describing or monitoring route status updates.",
      "description_length": 420,
      "index": 766,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceIamInstanceProfileAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of replacing an IAM instance profile association in EC2. It provides constructors, parsing, and serialization functions for a structure containing an optional IAM instance profile association. Use this module when modifying instance profile associations for EC2 instances and processing the resulting state.",
      "description_length": 338,
      "index": 767,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MovingAddressStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a moving Elastic IP address, with fields for the move status and associated public IP address. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include tracking the state of IP address migrations between AWS EC2 instances and regions.",
      "description_length": 381,
      "index": 768,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` representing the attribute names that can be reset for an EC2 image, specifically `LaunchPermission`. It includes functions to convert between string representations and the enumerated values, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used when modifying EC2 image attributes via the AWS API, particularly for resetting launch permissions.",
      "description_length": 453,
      "index": 769,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAccountAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 account attributes, including a list of attribute names and an optional dry-run flag. It provides functions to construct, serialize, and parse requests in various formats such as JSON, XML, and query strings. It is used when querying AWS EC2 to retrieve specific account-level configuration details like supported platforms or default VPC settings.",
      "description_length": 409,
      "index": 770,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway route attachment with optional fields for resource ID, transit gateway attachment ID, and resource type. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. It is used to manage route attachments in AWS EC2 transit gateways, specifically for configuring and retrieving route propagation and association data.",
      "description_length": 446,
      "index": 771,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CertificateAuthentication",
      "library": "aws-ec2",
      "description": "This module handles certificate authentication configurations for EC2 resources. It provides functions to create, parse, and serialize certificate authentication data, primarily working with string and JSON representations. Use this module when configuring or retrieving client certificate settings for EC2 instances or related services.",
      "description_length": 337,
      "index": 772,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of public IPv4 pools in EC2. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 public IPv4 pool data. Use this module when interacting with EC2 APIs that require listing or processing public IPv4 pools, such as allocating or describing IP ranges.",
      "description_length": 394,
      "index": 773,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch permissions, providing functions to convert them to and from JSON, query parameters, and XML. It works with lists of `LaunchPermission.t` values, representing access controls for EC2 images. Use this module when managing AMI sharing between AWS accounts or handling launch permissions in API requests and responses.",
      "description_length": 355,
      "index": 774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StopInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for stopping EC2 instances, including options to hibernate, perform a dry run, or force stop. It works with instance ID lists and boolean flags, providing constructors, JSON and XML parsers, and query formatters. It is used to build and serialize API requests when interacting with the EC2 service to manage instance lifecycle actions.",
      "description_length": 375,
      "index": 775,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a license configuration request with an optional ARN field. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. This module is used when making API requests that require specifying license configurations, such as associating or disassociating licenses with EC2 instances.",
      "description_length": 395,
      "index": 776,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for releasing an Elastic IP address in EC2, supporting operations to construct, serialize, and parse release address requests. It works with string and boolean types to represent allocation ID, public IP, network border group, and dry run flag. Concrete use cases include releasing an Elastic IP by allocation ID or public IP, with optional dry run simulation.",
      "description_length": 397,
      "index": 777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientConnectOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client connect options in an EC2 client VPN, with optional boolean and string fields. It provides functions to create, serialize, and parse these options to and from JSON, query parameters, and XML. Use this module when setting up or modifying client VPN endpoints that require custom connection handling via Lambda functions.",
      "description_length": 379,
      "index": 778,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.WithdrawByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for withdrawing a BYOIP CIDR block, including the CIDR string and an optional dry-run flag. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. Use this when managing IP address withdrawals in AWS EC2, particularly for custom CIDR range operations.",
      "description_length": 361,
      "index": 779,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigListRequest",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 fleet launch template configurations. It provides operations to convert the list to and from JSON and query formats, and to parse XML into the list structure. Use this module when configuring EC2 fleets with multiple launch templates, especially when serializing or deserializing request data for AWS API calls.",
      "description_length": 345,
      "index": 780,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnlimitedSupportedInstanceFamily",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing specific EC2 instance families that support unlimited CPU credits. It provides bidirectional conversions between strings and the enumerated type values, along with serialization to and from JSON, query parameters, and XML. These operations are used when configuring or querying EC2 instances that support burstable performance.",
      "description_length": 371,
      "index": 781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a Traffic Mirror session in AWS EC2, containing an optional session ID. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. Use this module when handling responses from EC2 API calls that delete Traffic Mirror sessions, particularly for extracting and processing session IDs from XML or JSON input.",
      "description_length": 423,
      "index": 782,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a Transit Gateway VPC attachment, including operations to specify subnets to add or remove, update options, and perform dry runs. It works with string identifiers, subnet ID lists, and optional configuration objects. Concrete use cases include updating VPC connectivity in AWS EC2 by modifying existing Transit Gateway attachments with precise subnet control and configuration validation.",
      "description_length": 439,
      "index": 783,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating an Elastic IP address from an EC2 instance, supporting operations through optional fields like association ID, public IP, and dry-run mode. It works with string and boolean types wrapped in OCaml option values to represent optional parameters. Concrete use cases include constructing and parsing EC2 API requests to manage IP address disassociations in AWS infrastructure.",
      "description_length": 431,
      "index": 784,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorTargetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 Traffic Mirror target, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include preparing deletion requests for AWS EC2 Traffic Mirror targets before sending them via the AWS SDK.",
      "description_length": 347,
      "index": 785,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client authentication methods in a VPN client setup. It supports specifying authentication via directory service, mutual certificate verification, federated identity, and authentication type selection. Operations include creating instances, converting to and from JSON, query parameters, and XML parsing for integration with AWS services.",
      "description_length": 391,
      "index": 786,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring an import snapshot request, with optional fields for client data, encryption settings, disk container details, and tagging. It provides functions to construct, parse, and serialize the request for use with XML or JSON APIs. Concrete use cases include initiating snapshot imports with custom encryption keys, specifying disk container formats, and applying tags during EC2 snapshot creation.",
      "description_length": 440,
      "index": 787,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DirectoryServiceAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for directory service authentication, containing an optional directory ID. It provides functions to create, serialize, and deserialize this structure to and from JSON, query parameters, and XML. Use this module when configuring EC2 instances to authenticate using AWS Directory Service, particularly when integrating with Active Directory.",
      "description_length": 376,
      "index": 788,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLinkList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC ClassicLink objects, providing operations to convert them to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing from JSON values. Use this module when managing EC2 VPC ClassicLink configurations, such as enabling or disabling ClassicLink for VPCs and serializing the results for API requests.",
      "description_length": 368,
      "index": 789,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshots, providing operations to convert, parse, and serialize snapshot data. It works with XML nodes, JSON values, and AWS query parameters, enabling direct interaction with AWS EC2 APIs. Use this module when retrieving or sending batches of snapshots, such as listing snapshots for backup management or cross-region replication tasks.",
      "description_length": 371,
      "index": 790,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetReservedInstancesExchangeQuoteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a Reserved Instances exchange quote in AWS EC2, including fields like currency code, payment due, and validity status. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include retrieving and processing exchange quotes for Reserved Instances to evaluate cost savings or eligibility during instance upgrades.",
      "description_length": 447,
      "index": 791,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and serializing lists of fast snapshot restore state errors. It works with XML nodes and JSON values, transforming them into typed error item lists or query parameters. Use this module when processing EC2 fast snapshot restore API responses or constructing requests with error state data.",
      "description_length": 329,
      "index": 792,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeStaleSecurityGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing stale security groups in EC2, providing access to a token for pagination and a set of stale security group data. It includes functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used when managing cleanup of unused security groups in AWS EC2 environments.",
      "description_length": 363,
      "index": 793,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeprovisionByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deprovisioning a BYOIP CIDR block, including the CIDR string and an optional dry-run flag. It provides functions to create, parse, and convert the request to query parameters or JSON format, as well as to construct the request from JSON input. It is used when making API calls to AWS EC2 to release a provisioned IP range, typically during resource cleanup or network reconfiguration.",
      "description_length": 428,
      "index": 794,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 fleet descriptions, including optional fields for launch templates, instance lifecycle, error codes, and error messages. It provides functions to construct, parse, and serialize these error records to and from XML, JSON, and query formats. Concrete use cases include processing and transmitting detailed error information when managing EC2 instance fleets in AWS.",
      "description_length": 435,
      "index": 795,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing Client VPN connections in AWS EC2. It provides operations to create, parse, and serialize results containing a set of client connections and an optional pagination token. Use this module when processing responses from the `DescribeClientVpnConnections` API call to manage and traverse large sets of active Client VPN sessions.",
      "description_length": 371,
      "index": 796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesModificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Reserved Instances modifications, providing structured access to a list of modifications and an optional pagination token. It supports parsing from XML, converting to query parameters or JSON, and constructing results programmatically. Concrete use cases include processing responses from the EC2 API when retrieving information about Reserved Instances modifications for cost management or resource tracking.",
      "description_length": 458,
      "index": 797,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MonitorInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of monitoring EC2 instances, primarily working with the `InstanceMonitoringList` type to represent monitoring data for instances. It provides operations to create, parse, and convert monitoring results to query parameters, JSON, and XML formats. Concrete use cases include processing responses from AWS EC2 API calls that enable or modify instance monitoring settings.",
      "description_length": 399,
      "index": 798,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListEntriesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving entries from an EC2 managed prefix list, including optional parameters like dry run, target version, and pagination controls. It provides functions to construct, parse, and serialize the request for use with AWS API operations. Concrete use cases include querying specific prefix list entries and handling paginated results when listing large sets of entries.",
      "description_length": 414,
      "index": 799,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteState",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Active` and `Blackhole`, representing the possible states of a route in a routing table. It includes functions to convert between string representations and the type, as well as serialization and deserialization to JSON and query formats. It is used when managing route tables to determine whether a route is actively routing traffic or is a blackhole route that drops traffic.",
      "description_length": 428,
      "index": 800,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based association IDs, primarily used for managing EC2 resource associations. It provides operations to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. Use this module when working with EC2 API operations that require handling multiple association IDs, such as network interface or route table associations.",
      "description_length": 389,
      "index": 801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetTagSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of spot fleet tag specifications in AWS EC2. It works with lists of `SpotFleetTagSpecification.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving tags for spot fleet requests in AWS EC2 APIs.",
      "description_length": 330,
      "index": 802,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying route tables in EC2, supporting filtering by attributes, specifying route table IDs, and controlling result pagination. It includes functions to construct, parse, and serialize requests in various formats, including JSON and query strings. Concrete use cases include retrieving route table information with custom filters, handling dry-run checks, and managing paginated responses from the EC2 API.",
      "description_length": 451,
      "index": 803,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockStateCode",
      "library": "aws-ec2",
      "description": "This module defines a variant type representing the state of a VPC CIDR block in AWS EC2, including states like `Associating`, `Associated`, `Disassociating`, and `Failed`. It provides functions to convert between string representations and the variant type, along with serialization and deserialization to JSON, query parameters, and XML. These operations support handling VPC CIDR block state transitions and status checks in EC2 API interactions.",
      "description_length": 449,
      "index": 804,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetCidrBlockState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a subnet CIDR block, including its current status and any associated message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This is used when managing subnet CIDR blocks in EC2 to track and communicate their provisioning state and errors.",
      "description_length": 366,
      "index": 805,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 network interface attachment with fields like attachment ID, instance ID, and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing network interface attachments in AWS EC2, such as when creating or inspecting VPC configurations.",
      "description_length": 381,
      "index": 806,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressConfigSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of private IP address configurations for scheduled EC2 instances. It works with lists of `ScheduledInstancesPrivateIpAddressConfig.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving private IP settings for EC2 scheduled instances.",
      "description_length": 361,
      "index": 807,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing DNS support configuration for EC2 ClassicLink, with fields indicating whether DNS support is enabled and the associated VPC ID. It provides functions to construct, serialize, and parse this configuration, enabling integration with AWS API requests and responses. Use this module when configuring or querying ClassicLink DNS settings for EC2 instances linked to a VPC.",
      "description_length": 417,
      "index": 808,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of transit gateway VPC attachment data. It works with lists of `TransitGatewayVpcAttachment.t` values, supporting operations to convert to and from XML, JSON, and query formats. It is used when managing EC2 transit gateway attachments, particularly for interacting with AWS API requests and responses.",
      "description_length": 360,
      "index": 809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a network ACL entry, including fields like dry-run flag, egress direction, network ACL ID, and rule number. It provides constructors, JSON and XML parsers, and query builders to facilitate forming and processing deletion requests. It is used when modifying network access control lists in EC2 by removing specific ingress or egress rules.",
      "description_length": 391,
      "index": 810,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultVpcResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a default VPC in EC2, primarily by encapsulating an optional Vpc record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when managing VPC creation responses from AWS EC2 API calls, particularly for retrieving the newly created VPC data.",
      "description_length": 378,
      "index": 811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServiceConfigurationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoint service configurations, including optional parameters like dry run, service IDs, filters, and pagination. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include listing VPC endpoint services with custom filtering and pagination, and validating service configurations before deployment.",
      "description_length": 429,
      "index": 812,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Monitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for monitoring state in EC2 instances, with operations to create, serialize, and convert monitoring configurations to and from JSON and query formats. It works with the `MonitoringState` type to represent whether monitoring is enabled or disabled. Concrete use cases include configuring instance monitoring settings when launching or modifying EC2 instances, and parsing monitoring state from API responses.",
      "description_length": 444,
      "index": 813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchSpecsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Spot Fleet launch specifications, providing operations to convert, parse, and serialize the list to and from XML, JSON, and query formats. It works directly with lists of `SpotFleetLaunchSpecification.t` values. Concrete use cases include preparing launch specifications for API requests and processing responses containing multiple launch configurations.",
      "description_length": 388,
      "index": 814,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayPrefixListReferencesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving transit gateway prefix list references, including fields for filtering, pagination, and dry-run options. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when querying transit gateway route tables to find associated prefix list references, especially when applying filters or handling large result sets.",
      "description_length": 431,
      "index": 815,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network interface descriptions, providing direct conversions to and from XML, JSON, and query formats. It supports parsing network interface data from AWS XML responses and serializing interface lists for API requests. Use this when working with EC2 operations that return or require multiple network interfaces, such as describing instances or configuring VPC attachments.",
      "description_length": 406,
      "index": 816,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemSet",
      "library": "aws-ec2",
      "description": "This module handles lists of unsuccessful EC2 operation items, providing functions to parse XML input into typed structures, convert to query parameters, and serialize to or from JSON. It works with lists of `UnsuccessfulItem.t` structures, which contain error details for individual EC2 resource operations. Use this module when processing batch operation failures in EC2, such as failed instance launches or configuration updates.",
      "description_length": 432,
      "index": 817,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstancePlacementRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 instance placement, supporting fields like affinity, host ID, and tenancy. It provides constructors, JSON and query serialization, and XML parsing for configuring instance placement options. Use this module when adjusting placement settings for EC2 instances, such as changing host affinity or specifying a host resource group.",
      "description_length": 385,
      "index": 818,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 VPN connections, including optional filters, specific connection IDs, and a dry-run flag. It provides functions to construct, serialize, and parse these requests in various formats such as JSON, query strings, and XML. It is used to interact directly with the EC2 API to retrieve information about existing VPN connections.",
      "description_length": 384,
      "index": 819,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 flow logs, including optional parameters like dry run, filters, log IDs, and pagination. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Concrete use cases include querying AWS EC2 for flow log details with specific filters or retrieving paginated results.",
      "description_length": 368,
      "index": 820,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressStringList",
      "library": "aws-ec2",
      "description": "Handles lists of private IP addresses as strings in AWS EC2 operations. Provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON values. Used when managing network interfaces or instance configurations that require multiple private IP addresses.",
      "description_length": 294,
      "index": 821,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for GPU information in EC2 instances, including a list of GPU devices and optional total GPU memory in MiB. It provides functions to construct, serialize, and parse this data structure in various formats such as JSON, query parameters, and XML. It is used to describe GPU capabilities of instance types in AWS EC2.",
      "description_length": 351,
      "index": 822,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsServersOptionsModifyStructure",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying DNS server options in EC2, supporting operations to create, parse, and serialize the structure to query or JSON formats. It works with custom DNS server lists and an optional boolean flag to enable or disable DNS settings. Concrete use cases include configuring VPC DNS options via the AWS SDK and managing DNS server settings programmatically.",
      "description_length": 395,
      "index": 823,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UnassignIpv6AddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for unassigning IPv6 addresses from an EC2 network interface. It includes operations to create, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with IPv6 address lists and string identifiers for network interfaces, used when managing network configurations in AWS EC2.",
      "description_length": 365,
      "index": 824,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 image attributes, including fields like block device mappings, launch permissions, and metadata such as description and kernel ID. It provides functions to construct, serialize, and parse these attributes for use in API requests and responses. Concrete use cases include configuring EC2 image properties and processing AWS API responses containing image metadata.",
      "description_length": 417,
      "index": 825,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying attributes of an EC2 network interface, including fields like attachment, description, security groups, and source/destination check settings. It provides functions to construct, parse, and serialize these modification requests in various formats such as JSON and query strings. Use this module when programmatically updating network interface settings in AWS EC2, such as changing security groups or disabling source/destination checks for a specific interface.",
      "description_length": 513,
      "index": 826,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrincipalIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing principal ID formats in EC2, primarily used when interacting with AWS EC2's `DescribePrincipalIdFormat` API action. It structures the output containing a list of principal ID formats and an optional pagination token for retrieving additional results. The module provides functions to construct, parse, and serialize this result for use in API requests and responses.",
      "description_length": 411,
      "index": 827,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 placement group descriptions, providing functions to convert them to and from XML, JSON, and query formats. It supports parsing placement group data from XML nodes and serializing them into structured JSON or AWS query parameters. Use this module when working with AWS EC2 API responses that include multiple placement group entries.",
      "description_length": 366,
      "index": 828,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageDiskContainerList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 image disk containers, providing direct conversions to and from XML, JSON, and query formats. It supports parsing from XML nodes, constructing empty lists, and serializing to AWS-specific query and JSON representations. Use this module when working with EC2 image import/export operations that require disk container metadata in various data formats.",
      "description_length": 383,
      "index": 829,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a volume modification operation in EC2, containing an optional `VolumeModification` record. It provides functions to construct, parse, and serialize this result for use in API responses and requests. The module is used to handle the output of EC2 volume modification calls, enabling integration with XML and JSON serialization formats.",
      "description_length": 399,
      "index": 830,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StatusType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the status of an EC2 instance, with specific values like `Passed`, `Failed`, `Insufficient_data`, and `Initializing`. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. Concrete use cases include handling instance health checks and translating status values in API requests and responses.",
      "description_length": 427,
      "index": 831,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedEnclaveCertificateIamRolesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving associated IAM roles for an EC2 enclave certificate. It includes operations to construct, parse, and serialize the result, which contains a list of associated roles. It is used when managing enclave certificates to identify which IAM roles are linked to a specific certificate in AWS EC2.",
      "description_length": 333,
      "index": 832,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifierList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group identifiers, providing functions to convert them to and from XML, JSON, and query parameters. It supports parsing group data from AWS XML responses and serializing group lists for API requests. Use this when working with EC2 operations that require multiple security groups, such as instance launch or network interface creation.",
      "description_length": 377,
      "index": 833,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a target configuration structure with optional instance count and offering ID fields. It provides functions to construct, parse, and serialize configurations for use in API requests, specifically handling conversions to and from JSON and query formats. The module is used when specifying desired EC2 instance configurations, such as during the modification of instance fleets or auto-scaling operations.",
      "description_length": 423,
      "index": 834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for associating a Client VPN endpoint with a target network subnet in AWS EC2. It includes functions to construct, serialize, and parse the request, supporting operations like query string generation, JSON serialization, and XML parsing. Concrete use cases include configuring Client VPN endpoints programmatically and handling dry-run validations or idempotent requests using client tokens.",
      "description_length": 428,
      "index": 835,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PermissionGroup",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with a single value `All`, representing a permission group in AWS EC2. It provides bidirectional conversion between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to handle EC2 security group permissions in API requests and responses, ensuring correct string representations are mapped to and from the internal type.",
      "description_length": 463,
      "index": 836,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateway attachments, including a list of attachments and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving and managing transit gateway attachment data from AWS EC2, especially when handling paginated results.",
      "description_length": 394,
      "index": 837,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.EventInformation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling event information with optional fields such as event description, sub-type, and instance ID. It provides functions to construct, parse, and convert event data to and from XML, JSON, and query formats. Concrete use cases include processing EC2 event notifications and integrating event details into API requests or logging systems.",
      "description_length": 380,
      "index": 838,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of FleetLaunchTemplateOverrides. It works with XML nodes, JSON values, and AWS query parameters to transform data into and from these formats. Use this module when interacting with AWS EC2 Auto Scaling APIs that require or return launch template override lists in JSON, XML, or query string form.",
      "description_length": 374,
      "index": 839,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway route table and a resource, such as a VPC or VPN attachment. It includes functions to construct, serialize, and convert the structure to and from JSON and XML formats. Use this module when managing route table associations in AWS EC2 transit gateways, particularly for configuration or state tracking purposes.",
      "description_length": 401,
      "index": 840,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants representing volume status categories in EC2. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to handle volume status checks in AWS EC2 APIs, specifically for identifying whether a volume has issues with I/O performance or is fully enabled.",
      "description_length": 423,
      "index": 841,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 fleet creation. It includes fields for launch template overrides, instance lifecycle, error code, and error message, with operations to construct, parse, and serialize the data for API interactions. It is used to capture and communicate detailed error information when creating or managing EC2 instance fleets.",
      "description_length": 382,
      "index": 842,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseReservedInstancesOfferingResult",
      "library": "aws-ec2",
      "description": "This module handles the result of purchasing a reserved EC2 instance offering. It provides a data structure with an optional reserved instance ID, along with functions to construct, parse, and serialize the result in various formats. Use this module to retrieve and manage the output from a reserved instance purchase operation in EC2.",
      "description_length": 335,
      "index": 843,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIdList",
      "library": "aws-ec2",
      "description": "Handles lists of network interface IDs in AWS EC2 operations. Provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON values. Used when managing network interfaces, such as attaching, detaching, or filtering interfaces in EC2 instances.",
      "description_length": 286,
      "index": 844,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding detailed information about an EC2 snapshot, including fields like description, snapshot ID, status, and associated bucket details. It provides functions to construct, parse, and convert snapshot data to and from JSON and query formats. It is used to manage snapshot metadata when importing or exporting EC2 images.",
      "description_length": 363,
      "index": 845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags in a launch template, including optional resource type and tag list. It provides functions to construct, serialize, and parse these specifications in various formats such as JSON and query parameters. Use this module when configuring EC2 launch templates with tags for resources like instances or volumes.",
      "description_length": 362,
      "index": 846,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 instance credit specifications, including optional dry run and client token fields. It supports operations to create, parse, and serialize the request for use with AWS API calls. The module is used when adjusting credit settings for T-series instances, such as changing between standard and unlimited credit modes.",
      "description_length": 372,
      "index": 847,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for creating VPC peering connection requests, with optional fields for dry run, peer owner ID, peer VPC ID, local VPC ID, peer region, and tag specifications. It provides functions to construct, parse, and serialize these requests to query parameters or JSON for use with AWS EC2 APIs. Concrete use cases include initiating cross-region or cross-account VPC peering connections with custom tagging.",
      "description_length": 432,
      "index": 848,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 security groups, containing a list of security groups and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when handling outputs from EC2's `DescribeSecurityGroups` API call, especially during resource listing or network configuration audits.",
      "description_length": 407,
      "index": 849,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling response errors in EC2 operations, including error code and message fields. It provides functions to construct, parse, and serialize error data to and from XML, JSON, and query formats. Concrete use cases include processing failed API responses when managing EC2 instances or launch templates.",
      "description_length": 343,
      "index": 850,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 image attributes, including the attribute name, image ID, and optional dry-run flag. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying EC2 image permissions or launch permissions before modifying or launching instances.",
      "description_length": 381,
      "index": 851,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateName",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 instance, such as `Running`, `Stopped`, or `Terminated`. It includes functions to convert between string representations and the enumerated values, supporting parsing from and serialization to JSON and XML formats. These operations are essential when interpreting EC2 instance state data from AWS API responses or preparing requests that require specifying instance states.",
      "description_length": 455,
      "index": 852,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for bundling an EC2 instance, including the instance ID, storage configuration, and an optional dry-run flag. It provides functions to construct, serialize, and parse bundle instance requests in various formats such as JSON and query parameters. Concrete use cases include preparing and submitting requests to bundle EC2 instances into images for backup or distribution.",
      "description_length": 407,
      "index": 853,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIpv6CidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of IPv6 CIDR block associations for EC2 subnets. It operates on a list of `SubnetIpv6CidrBlockAssociation.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing subnet configurations that include IPv6 addressing in AWS EC2.",
      "description_length": 333,
      "index": 854,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorFiltersResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror filters, including the filter set and pagination token. It provides operations to construct, parse, and serialize the result for API interactions. Use it when retrieving and processing traffic mirror filter configurations from AWS EC2.",
      "description_length": 299,
      "index": 855,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying options when creating or modifying an EC2 VPN connection. It includes fields for enabling acceleration, setting IP versions, defining tunnel options and network CIDRs, and provides functions to construct, parse, and serialize these options. It is used to configure low-level network settings for AWS EC2 VPN connections programmatically.",
      "description_length": 386,
      "index": 856,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OccurrenceDaySet",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of integer lists representing occurrence days, typically used in scheduling contexts. It provides functions to parse, serialize, and convert these lists to query parameters or JSON format. Concrete use cases include handling recurring event configurations in AWS EC2, such as scheduled instance start or stop days.",
      "description_length": 366,
      "index": 857,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationOfferingsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 host reservation offerings, providing structured access to a paginated token and a set of host offerings. It includes functions to construct, serialize, and parse the result using XML, JSON, and query formats. Concrete use cases include processing responses from AWS EC2's `DescribeHostReservationOfferings` API to display or analyze available host reservations.",
      "description_length": 411,
      "index": 858,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a prefix list reference from a transit gateway route table. It includes operations to construct, parse, and serialize the request for use with AWS EC2 APIs. The module works with string and boolean types to represent the route table ID, prefix list ID, and optional dry-run flag.",
      "description_length": 332,
      "index": 859,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsInstanceBlockDeviceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EBS block device configurations in EC2 instances, with optional fields for controlling deletion behavior and volume identification. It supports operations to construct, serialize, and convert these specifications to and from XML, JSON, and query formats. It is used when configuring or modifying EC2 instance storage settings programmatically.",
      "description_length": 395,
      "index": 860,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfacePermissionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a network interface permission, containing an optional `NetworkInterfacePermission` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used specifically to handle responses from AWS EC2 API calls that create network interface permissions.",
      "description_length": 404,
      "index": 861,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of rejecting VPC endpoint connections, primarily by managing a set of unsuccessful items. It provides functions to construct, parse, and serialize the result, including conversion to JSON and query formats. Use this module when processing responses from rejecting VPC endpoint connection requests to identify which connections failed.",
      "description_length": 365,
      "index": 862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ListingState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a resource listing, with values like Available, Sold, and Cancelled. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. It is used to interpret and format listing states in API requests and responses, particularly for systems interacting with resource marketplaces.",
      "description_length": 422,
      "index": 863,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Client VPN endpoint in AWS EC2, including metadata like endpoint ID, status, network configuration, and authentication settings. It provides functions to construct, parse, and serialize endpoint data for use in API requests and responses. Concrete use cases include managing Client VPN endpoint configurations, handling endpoint lifecycle events, and integrating with monitoring or logging systems.",
      "description_length": 450,
      "index": 864,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in EC2 launch templates, including settings like metadata state, HTTP tokens requirement, hop limit for PUT responses, and metadata endpoint status. It provides functions to construct, serialize, and parse these options to and from JSON, query parameters, and XML, enabling precise control over EC2 instance metadata behavior during instance launch. Use cases include setting up secure metadata access by requiring tokens or limiting metadata hops in cloud infrastructure automation.",
      "description_length": 562,
      "index": 865,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fast snapshot restore state operations. It includes functions to create, parse, and convert error data to various formats like JSON and query parameters. It is used when managing EC2 snapshot restore errors, particularly for capturing and transmitting error codes and messages.",
      "description_length": 345,
      "index": 866,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableVgwRoutePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling route propagation from a virtual private gateway to a route table. It includes operations to construct, parse, and serialize the request, supporting interactions with EC2's routing APIs. Use this module when configuring route propagation in AWS EC2 virtual private cloud environments.",
      "description_length": 337,
      "index": 867,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OccurrenceDayRequestSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of integers representing occurrence days. It provides operations to convert between XML, JSON, and query string formats, and constructs empty or initialized lists. It is used when specifying recurring schedule days in EC2 event configurations.",
      "description_length": 326,
      "index": 868,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterNetworkServicesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying traffic mirror filter network services in EC2. It provides constructors, parsers, and serializers for a result type that optionally includes a `TrafficMirrorFilter`. It is used when working with AWS EC2 traffic mirroring APIs to update and process filter configurations.",
      "description_length": 314,
      "index": 869,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item in the response when deleting EC2 launch template versions. It includes fields for the launch template ID, name, version number, and associated error details, supporting operations to construct, parse, and serialize the data for use in API responses and queries. It is used to handle and propagate specific error information during batch deletion of launch template versions in AWS EC2.",
      "description_length": 450,
      "index": 870,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateEnclaveCertificateIamRoleResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for a specific EC2 operation response, containing an optional boolean indicating success or failure. It includes functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. It is used specifically when handling responses from disassociating an IAM role from an enclave certificate in EC2.",
      "description_length": 360,
      "index": 871,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching EC2 Transit Gateway routes, including parameters like route table ID, filters, and optional limits or dry-run settings. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and XML. It is used when querying route information in AWS EC2 Transit Gateways, particularly for filtering and retrieving route data programmatically.",
      "description_length": 429,
      "index": 872,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfigurationList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP configurations for EC2 instances, providing direct conversions to and from XML, JSON, and query parameters. It supports parsing DHCP configuration data from AWS XML responses and serializing configurations for API requests. Concrete use cases include managing EC2 network settings during instance launch or VPC configuration.",
      "description_length": 359,
      "index": 873,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateIamInstanceProfileResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating an IAM instance profile from an EC2 instance. It includes operations to construct, parse, and serialize the result, which contains an optional IAM instance profile association. It is used when managing IAM roles for EC2 instances, particularly in workflows that require tracking or modifying instance profile attachments.",
      "description_length": 370,
      "index": 874,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignedPrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of assigned private IP addresses in AWS EC2. It provides functions to parse XML input into IP address lists, convert them to query parameters or JSON format, and construct empty lists. It is used when managing EC2 instance networking configurations that involve multiple private IP addresses.",
      "description_length": 318,
      "index": 875,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing disk information with optional fields for size in gigabytes, count, and disk type. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. It is used to configure disk properties in EC2 instance requests and responses.",
      "description_length": 338,
      "index": 876,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance event notification attributes in EC2, including optional dry-run support and instance tag attributes. It provides functions to construct, serialize, and parse these configurations for use in API requests. Concrete use cases include setting up event notifications for EC2 instances based on specific tag-based criteria.",
      "description_length": 380,
      "index": 877,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnEcmpSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `Enable` and `Disable`, representing ECMP support settings for VPN connections. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML nodes or JSON. Concrete use cases include configuring and serializing ECMP support state in AWS EC2 VPN connection APIs.",
      "description_length": 385,
      "index": 878,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceIdSet",
      "library": "aws-ec2",
      "description": "Works with lists of string identifiers for reserved EC2 instances. Provides functions to convert these lists to and from XML, JSON, and query parameters, enabling easy integration with AWS APIs. Used when managing reserved instance IDs in requests or responses from EC2 services.",
      "description_length": 279,
      "index": 879,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InternetGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Internet Gateway in AWS EC2, including its attachments, ID, owner ID, and tags. It provides functions to construct, parse, and serialize gateway data for use in API requests and responses. Concrete use cases include managing gateway attachments to VPCs and handling gateway metadata in EC2 operations.",
      "description_length": 354,
      "index": 880,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTarget",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation targets in EC2, with optional fields for capacity reservation ID and resource group ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring EC2 instances to target specific capacity reservations or resource groups during launch.",
      "description_length": 394,
      "index": 881,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 host configurations, supporting operations to set auto-placement, host recovery, instance type, and instance family. It works with lists of host IDs and optional placement or recovery settings. Concrete use cases include updating host properties in AWS EC2 environments, such as enabling host recovery or changing instance capacity.",
      "description_length": 387,
      "index": 882,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRouteList",
      "library": "aws-ec2",
      "description": "This module represents a list of static routes for a virtual private network (VPN) connection. It provides functions to convert route data to and from JSON and query formats, as well as parsing from XML nodes. It is used when configuring or retrieving static routes for AWS EC2 VPN connections.",
      "description_length": 294,
      "index": 883,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteTableResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a route table in EC2, containing an optional route table object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle the output of route table creation operations in AWS EC2, enabling integration with API responses and further configuration.",
      "description_length": 413,
      "index": 884,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GatewayType",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing the type of gateway, specifically supporting the `Ipsec_1` variant. It includes functions for converting between string representations and the enumerated type, as well as parsing and serializing values to and from XML, JSON, and query formats. These operations are used when interacting with EC2 APIs that require or return gateway type information, such as describing or creating virtual private gateways.",
      "description_length": 465,
      "index": 885,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the association details of a network interface in AWS EC2, including optional fields like public IP, public DNS name, and allocation IDs. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing or inspecting network interface associations, particularly for handling public IP assignments or NAT gateway configurations.",
      "description_length": 453,
      "index": 886,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 connection notifications. It provides functions to convert between XML, JSON, and query formats, specifically working with lists of connection notification records. Use this module when interacting with AWS EC2 APIs that require or return connection notification data, such as creating or listing notifications.",
      "description_length": 391,
      "index": 887,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance data by providing parsing, serialization, and transformation functions. It works with XML nodes, JSON values, and query parameters to convert and manipulate instance lists. Use it to process responses from EC2 API calls or prepare instance data for further API requests.",
      "description_length": 312,
      "index": 888,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing disk images, including optional fields like checksum, format, import manifest URL, and size. It provides functions to construct, parse, and convert disk image descriptions to and from JSON and query formats. It is used when importing or managing disk images in EC2, particularly for handling metadata during virtual machine image transfers.",
      "description_length": 392,
      "index": 889,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeStatusResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 volume status, containing a list of volume statuses and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses and requests. Concrete use cases include handling output from the `DescribeVolumeStatus` API call and processing volume health information in EC2 management tools.",
      "description_length": 394,
      "index": 890,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful fast snapshot restore operation in EC2, including fields like snapshot ID, availability zone, state transitions, and timestamps. It provides functions to construct, parse, and serialize these records for use in API responses and queries. Use cases include monitoring the status of snapshot restores and logging detailed outcome information.",
      "description_length": 417,
      "index": 891,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AllowedPrincipalSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 allowed principal lists. Works with XML, JSON, and query string formats for EC2 policy principal data. Used when managing VPC endpoint policies or S3 bucket policies requiring principal whitelisting.",
      "description_length": 248,
      "index": 892,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatesMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for monitoring settings in EC2 launch templates, specifically supporting optional boolean configuration for monitoring. It provides functions to construct, serialize, and convert monitoring settings to and from JSON, query parameters, and XML. Use this module when configuring or retrieving monitoring options for EC2 instances at launch.",
      "description_length": 375,
      "index": 893,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a capacity reservation, with values like Active, Expired, and Cancelled. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to interpret and format capacity reservation states when interacting with EC2 APIs or processing related responses.",
      "description_length": 435,
      "index": 894,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayPeeringAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateway peering attachments, including a list of attachments and an optional pagination token. It provides operations to construct, serialize, and parse results in JSON, XML, and query formats. Use this module when processing responses from AWS EC2 API calls that list transit gateway peering attachments.",
      "description_length": 362,
      "index": 895,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with an optional boolean field `enabled`, representing monitoring settings for scheduled EC2 instances. It provides functions to construct, parse, and convert the type to and from query parameters, JSON, and XML, enabling configuration and communication with AWS EC2 APIs. Use this module when setting up or managing monitoring options for scheduled instances in AWS.",
      "description_length": 398,
      "index": 896,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway prefix list reference in AWS EC2. It includes a single optional transit gateway prefix list reference, along with functions to construct, parse, and serialize the result to query parameters or JSON. It is used when managing route propagation in transit gateways using prefix lists.",
      "description_length": 342,
      "index": 897,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring transit gateway request options, including settings like ASN, route table association, and multicast support. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include creating and managing transit gateway configurations in AWS EC2 with specific networking policies.",
      "description_length": 422,
      "index": 898,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdentityIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing identity ID format settings in EC2. It provides operations to create, parse, and convert the result structure to and from JSON and query formats. It works with a list of ID format descriptions, typically used when inspecting how EC2 represents resource identifiers for specific principals.",
      "description_length": 334,
      "index": 899,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway route in EC2, with optional fields for CIDR block, virtual interface group ID, route type, state, route table identifiers, and owner information. It provides functions to construct, parse, and convert route data to and from JSON and query formats. Concrete use cases include managing route entries in virtual private cloud (VPC) configurations and tracking routing behavior for EC2 local gateways.",
      "description_length": 463,
      "index": 900,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Subnet",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 subnet with fields for configuration and state, such as availability zone, CIDR block, IP mapping settings, and associated IPv6 blocks. It provides functions to construct, parse, and convert subnet data to and from XML, JSON, and query formats. Concrete use cases include managing subnet configurations in AWS EC2, handling subnet responses from API calls, and serializing subnet data for storage or transmission.",
      "description_length": 470,
      "index": 901,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartVpcEndpointServicePrivateDnsVerificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for initiating private DNS verification for a VPC endpoint service, containing optional dry-run flag and required service ID. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when configuring or verifying DNS settings for a VPC endpoint service in AWS EC2.",
      "description_length": 354,
      "index": 902,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying transit gateways, including fields for filtering, pagination, and dry-run options. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Use this module when interacting with EC2's transit gateway API to list or filter existing gateways.",
      "description_length": 337,
      "index": 903,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles IPv6 CIDR block association sets for EC2 resources. It provides functions to convert, parse, and serialize lists of IPv6 CIDR associations to and from XML, JSON, and query formats. Use this module when managing IPv6 network configurations for EC2 instances or VPCs.",
      "description_length": 285,
      "index": 904,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportInstanceReasonCodes",
      "library": "aws-ec2",
      "description": "This module defines a set of reason codes for reporting instance issues in EC2, including specific causes like unresponsiveness or credential problems. It provides conversions between these reason codes and strings, JSON, and XML, enabling use in API requests and responses. These operations support handling and transmitting instance status reports in EC2 interactions.",
      "description_length": 370,
      "index": 905,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 security group IDs in string format. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Used when working with EC2 API requests and responses that require or return security group ID lists.",
      "description_length": 266,
      "index": 906,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 fleet instances, including parameters like `fleet_id`, `max_results`, and `filters`. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Use this module when interacting with the EC2 API to retrieve information about instances in a fleet, particularly for paginated or filtered results.",
      "description_length": 412,
      "index": 907,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetReplacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing strategies for replacing EC2 fleet instances, specifically supporting the `Launch` strategy. It provides bidirectional conversions between the enumerated type and strings, along with serialization to and from JSON, query parameters, and XML. This module is used when configuring EC2 fleet replacement policies to ensure proper encoding and decoding during API interactions.",
      "description_length": 431,
      "index": 908,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to canceling spot fleet requests in EC2. It includes fields for error code and message, with operations to construct, parse, and serialize the error data to query parameters or JSON. It is used when managing spot fleet request cancellations and processing associated error responses.",
      "description_length": 348,
      "index": 909,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying options of a specific VPN tunnel in an EC2 environment. It includes fields to identify the VPN connection, target tunnel by IP address, and specify new tunnel options. Functions support creating the request, converting it to query or JSON formats, and parsing from XML or JSON input, enabling direct interaction with AWS EC2 APIs for tunnel configuration updates.",
      "description_length": 417,
      "index": 910,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a virtual private gateway in AWS EC2. It includes functions to construct, serialize, and parse the result, primarily working with XML and JSON formats. It is used to retrieve and process the resulting VpnGateway object from EC2 API responses.",
      "description_length": 315,
      "index": 911,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecificationSecurityGroupIdList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of security group IDs used in EC2 spot instance launch specifications. It provides functions to convert between XML, JSON, and query string representations of the list. Use this module when working with AWS EC2 spot instance requests that require specifying security groups.",
      "description_length": 342,
      "index": 912,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeClientVpnIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of authorizing ingress access to a Client VPN endpoint. It provides functions to create, parse, and serialize a result containing an optional authorization rule status. Use this module when managing Client VPN ingress rules programmatically, especially when integrating with AWS API calls or processing responses from authorization requests.",
      "description_length": 372,
      "index": 913,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing VPC endpoint services, including parameters like dry run flag, service names, filters, and pagination. It provides functions to construct, parse, and serialize requests for querying AWS EC2 services. Use this module when configuring and sending DescribeVpcEndpointServices API calls with specific filters or pagination options.",
      "description_length": 384,
      "index": 914,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdsSet",
      "library": "aws-ec2",
      "description": "This module handles a list of instance IDs in EC2 operations. It provides functions to convert instance ID lists to query parameters or JSON, and to parse them from XML or JSON input. It is used when performing batch operations on EC2 instances, such as stopping or describing multiple instances.",
      "description_length": 296,
      "index": 915,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkCardInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing network card details, including index, performance, and maximum interface count. It provides functions to construct, serialize, and convert instances to and from JSON, query parameters, and XML. Use this module when handling EC2 instance network configuration data in API requests or responses.",
      "description_length": 345,
      "index": 916,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway multicast domain, with values like `Pending`, `Available`, `Deleting`, and `Deleted`. It provides functions to convert between string representations and the enumerated type, along with serialization to and from JSON and query formats. These operations are used when interacting with AWS EC2 APIs to manage multicast domain state transitions and status checks.",
      "description_length": 443,
      "index": 917,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedEnclaveCertificateIamRolesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving IAM roles associated with an EC2 enclave certificate. It includes operations to construct, serialize, and parse requests using JSON or query parameters, primarily handling string and boolean types. It is used when managing permissions for AWS Nitro Enclaves by associating IAM roles with specific certificates.",
      "description_length": 365,
      "index": 918,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateVersion",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a version of a launch template in AWS EC2, including metadata like version number, creation time, and whether it is the default version. It provides functions to construct, serialize, and parse launch template version data, supporting operations like converting to and from JSON, query parameters, and XML. Concrete use cases include managing EC2 instance configurations programmatically and synchronizing launch template versions across environments.",
      "description_length": 501,
      "index": 919,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a managed prefix list in EC2. It provides constructors, parsers, and serializers for a structure that may contain an updated `ManagedPrefixList`. Use this module when processing responses from EC2 API calls that modify prefix lists, such as updating entries or metadata.",
      "description_length": 314,
      "index": 920,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of fast snapshot restore success items. It provides functions to convert between XML, JSON, and query string formats, specifically for processing results from EC2 snapshot restore operations. Use this module when parsing responses or constructing requests related to enabling fast snapshot restores in AWS EC2.",
      "description_length": 393,
      "index": 921,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetCapacitySpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying target capacities in EC2, including total, on-demand, and spot capacities, along with a default capacity type. It provides functions to construct, parse, and serialize these specifications to and from JSON, query strings, and XML. Use this module when configuring EC2 Auto Scaling or Spot Fleet requests with specific capacity targets.",
      "description_length": 387,
      "index": 922,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize these configurations to JSON, XML, or query parameters for use in AWS API requests. Concrete use cases include defining varied instance configurations for EC2 Auto Scaling or Spot Fleet requests.",
      "description_length": 404,
      "index": 923,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroups",
      "library": "aws-ec2",
      "description": "Handles the creation, parsing, and conversion of target group lists used in EC2 load balancing configurations. Works with lists of `TargetGroup.t` structures, supporting transformations to and from XML, JSON, and query formats. Useful for interacting with AWS EC2 APIs that require target group data in specific serialization formats.",
      "description_length": 334,
      "index": 924,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConfirmProductInstanceResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure with optional string and boolean fields, along with functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to represent and manipulate the result of confirming a product instance in EC2, specifically capturing the owner ID and a boolean return value. Direct use cases include handling API responses when verifying product codes attached to EC2 instances.",
      "description_length": 446,
      "index": 925,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIpv6PoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing IPv6 pools in EC2, including the list of pools and a token for pagination. It provides functions to construct, parse, and convert the result to and from JSON and query formats. It is used when retrieving and processing IPv6 address pool information from AWS EC2 responses.",
      "description_length": 317,
      "index": 926,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, conversion, and serialization of spot fleet request cancellation results. It works with lists of `CancelSpotFleetRequestsSuccessItem` values, supporting operations to convert to and from JSON and query formats, and to parse XML input. It is used when managing EC2 spot fleet requests, specifically for processing responses from cancellation operations.",
      "description_length": 385,
      "index": 927,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedIpv6PoolCidrsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving associated IPv6 CIDR blocks for an EC2 IPv6 pool. It includes operations to construct, parse, and serialize the result, which contains a set of IPv6 CIDR associations and an optional pagination token. It is used when working with AWS EC2 IPv6 pool CIDR data, particularly in API responses that require structured handling of CIDR associations and result truncation.",
      "description_length": 410,
      "index": 928,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPC IDs represented as strings. It provides functions to convert, parse, and serialize these lists to and from JSON and query formats. Use this module when working with AWS EC2 APIs that require or return multiple VPC IDs in JSON or query string form.",
      "description_length": 284,
      "index": 929,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting a Transit Gateway VPC attachment in AWS EC2. It provides operations to create, parse, and serialize the result, which includes an optional Transit Gateway VpcAttachment object. Use this module when processing responses from accepting VPC attachments to a Transit Gateway, particularly for querying, JSON serialization, or XML parsing workflows.",
      "description_length": 388,
      "index": 930,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePlacementGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 placement groups, supporting filtering by name, ID, or custom criteria. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving metadata about specific placement groups before instance launches or validating group configurations during infrastructure checks.",
      "description_length": 404,
      "index": 931,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolRangeSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of public IPv4 pool ranges in AWS EC2. It works with lists of `PublicIpv4PoolRange.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing IP address allocations from AWS public IPv4 pools, particularly in operations like describing or modifying pool ranges.",
      "description_length": 367,
      "index": 932,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointServiceConfigurationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoint service configurations, including an optional dry-run flag and a list of service IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when issuing deletion requests for VPC endpoint services while optionally validating the request via dry-run.",
      "description_length": 383,
      "index": 933,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a scheduled EC2 instance, with fields for metadata like availability zone, instance type, pricing, and scheduling details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing scheduled EC2 instances, such as retrieving details from AWS or configuring scheduled instance requests programmatically.",
      "description_length": 435,
      "index": 934,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a Client VPN endpoint, including states like `Pending_associate`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include interpreting and transmitting endpoint state information in AWS EC2 API interactions.",
      "description_length": 452,
      "index": 935,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume objects, providing direct conversions to and from XML, JSON, and query formats. It supports parsing volume data from XML nodes and serializing volume lists for API requests. Concrete use cases include processing EC2 volume responses from AWS API calls and constructing volume data for JSON-based services.",
      "description_length": 345,
      "index": 936,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportClientVpnClientCertificateRevocationListRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing a client certificate revocation list into a Client VPN endpoint. It includes operations to construct, serialize, and parse the request, handling string and boolean types for endpoint ID, revocation list content, and dry-run flag. It is used to manage certificate revocation in AWS Client VPN configurations through EC2.",
      "description_length": 370,
      "index": 937,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotMaintenanceStrategies",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot fleet maintenance strategies, specifically supporting capacity rebalance settings. It provides functions to create, serialize, and parse these configurations, enabling integration with AWS EC2 spot fleet APIs. Use this module when setting up or managing spot fleets that require automatic capacity rebalancing in response to instance interruptions.",
      "description_length": 406,
      "index": 938,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance credit specifications, providing functions to convert to and from JSON and query formats, as well as parsing from XML. It works with lists of `InstanceCreditSpecification.t` type, enabling data interchange with AWS APIs. Use this module when managing credit specifications for EC2 instances, such as during instance launch or modification requests.",
      "description_length": 390,
      "index": 939,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceVolumeDetailItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the volume details of an instance import task, including fields like availability zone, bytes converted, image description, and volume status. It provides constructors, JSON and XML parsers, and query builders to create and convert these records for API interactions. Concrete use cases include tracking progress and metadata of importing virtual machine volumes into EC2.",
      "description_length": 422,
      "index": 940,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of a bundle task in EC2, including transitions like `Pending`, `Bundling`, `Storing`, and `Failed`. It provides direct conversions between string representations and the enumerated values, along with serialization to and from JSON and query formats. It is used to interpret and emit EC2 bundle task state data in API requests and responses.",
      "description_length": 417,
      "index": 941,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorSessionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 traffic mirror sessions, including fields like session IDs, filters, and pagination options. It provides functions to construct, parse, and serialize these requests into query or JSON formats. Concrete use cases include querying AWS EC2 for traffic mirror session details with specific filters or retrieving paginated results.",
      "description_length": 385,
      "index": 942,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfacePermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating network interface permissions in EC2, including fields like network interface ID, AWS account or service, permission type, and dry run flag. It provides functions to construct, parse, and serialize these permission requests for use with AWS API calls. Use this module when configuring access control for EC2 network interfaces programmatically.",
      "description_length": 394,
      "index": 943,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a route table in a VPC. It includes fields for dry-run mode, VPC ID, and optional tag specifications. The module provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations.",
      "description_length": 270,
      "index": 944,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a specification for launching EC2 instances, including device mappings, networking, and instance configuration. It provides functions to construct, serialize, and parse launch specifications for use in scheduling requests. Concrete use cases include configuring spot instance setups and defining instance templates for automated deployments.",
      "description_length": 361,
      "index": 945,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverrides",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying overrides in a fleet launch template, including fields like instance type, max price, subnet ID, and priority. It provides functions to construct, parse, and serialize these overrides for use in API requests or configuration management. Concrete use cases include configuring EC2 fleet instances with specific pricing, placement, or capacity settings.",
      "description_length": 403,
      "index": 946,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a prefix list in EC2, with specific tags for lifecycle stages like creation, modification, restoration, and deletion in both successful and failed states. It provides bidirectional conversion functions between the variant type and strings, along with serialization and deserialization capabilities for JSON, XML, and query parameters. This module is used to interpret and persist prefix list states when interacting with AWS EC2 APIs, particularly during operations like state tracking, API response parsing, and request formatting.",
      "description_length": 605,
      "index": 947,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnmonitorInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling monitoring on EC2 instances, including instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing and sending unmonitor requests to stop detailed monitoring of specific EC2 instances.",
      "description_length": 355,
      "index": 948,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoints, including fields like dry-run flag, endpoint IDs, filters, and pagination parameters. It provides functions to construct, parse, and serialize these requests into query or JSON formats. Concrete use cases include listing VPC endpoints with optional filtering and pagination in AWS EC2 environments.",
      "description_length": 366,
      "index": 949,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddPrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of prefix list entries for EC2 operations. It works with lists of `AddPrefixListEntry` structures, converting them to and from XML, JSON, and query formats. Use this module when modifying prefix lists in EC2, such as adding or updating CIDR entries in a prefix list.",
      "description_length": 324,
      "index": 950,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetGroupsForCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving capacity reservation groups in EC2. It includes operations to create, parse, and serialize the result, which consists of an optional pagination token and a set of capacity reservation groups. It is used when processing responses from the EC2 API to manage capacity reservations efficiently.",
      "description_length": 335,
      "index": 951,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagDescriptionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tag descriptions, providing operations to convert between XML, JSON, and query formats. It works with lists of `TagDescription.t` records, which represent metadata tags associated with EC2 resources. Use this module when processing responses from EC2 API calls that include resource tags, or when preparing tag data for API requests.",
      "description_length": 366,
      "index": 952,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoipPoolIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string identifiers representing EC2 CoIP pools. It provides functions to convert the list into query parameters, JSON, and back, as well as parsing from XML nodes. It is used when managing CoIP pool associations that require multiple pool IDs in API requests or responses.",
      "description_length": 302,
      "index": 953,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCapacityReservationUsageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving capacity reservation usage in EC2, including fields for the capacity reservation ID, pagination token, maximum results, and dry run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying current usage details of a specific capacity reservation and paginating through large result sets.",
      "description_length": 424,
      "index": 954,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route table, including a dry-run flag and route table ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 operations. The module is used when issuing delete requests to ensure correct formatting and validation before execution.",
      "description_length": 324,
      "index": 955,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 fleet deletion, containing an optional error and fleet ID. It provides functions to construct, parse, and serialize these error items to and from JSON and query formats. Concrete use cases include processing responses from the EC2 API when attempting to delete multiple fleets and handling partial failures.",
      "description_length": 379,
      "index": 956,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 Traffic Mirror session, including fields like session ID, target ID, filter ID, packet length, and more. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include updating mirror session configurations and removing specific fields during session modification.",
      "description_length": 377,
      "index": 957,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotInstanceRequestsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 spot instance requests, including a list of spot instance requests and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats such as JSON and query strings. It is used when interacting with AWS EC2's spot instance request API to retrieve and process request data across paginated responses.",
      "description_length": 403,
      "index": 958,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating snapshots in EC2, primarily working with the `t` type that contains a `SnapshotSet`. It provides functions to construct, parse, and convert snapshot results to and from XML, JSON, and query formats. Use this module when processing responses from EC2 snapshot creation requests, particularly for handling multiple snapshots returned in a single result.",
      "description_length": 394,
      "index": 959,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastRegisteredGroupMembers",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing registered group members in a transit gateway multicast domain, including their network interface IDs and group IP address. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing multicast group membership in AWS EC2 transit gateways and processing related API responses.",
      "description_length": 415,
      "index": 960,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteList",
      "library": "aws-ec2",
      "description": "This module defines a list of local gateway routes and provides operations to construct, parse, and convert route lists to and from XML, JSON, and query formats. It works with lists of `LocalGatewayRoute.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include handling route data when managing virtual private cloud (VPC) routing through EC2's local gateways.",
      "description_length": 425,
      "index": 961,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the configuration of an EC2 instance at launch, including properties like image ID, instance type, storage mappings, network interfaces, and security settings. It provides functions to construct, parse, and serialize this configuration for use in API requests or responses. Concrete use cases include creating launch templates for EC2 instances with specific hardware, networking, and storage configurations.",
      "description_length": 458,
      "index": 962,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for enabling fast snapshot restores, containing sets of successful and unsuccessful operations. It provides functions to construct, parse, and serialize the result in various formats including JSON and query strings. It is used to handle responses when managing EC2 snapshot restore configurations programmatically.",
      "description_length": 354,
      "index": 963,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC endpoint connection with fields for service ID, endpoint ID, owner, state, creation timestamp, DNS entries, and load balancer ARNs. It provides functions to construct, parse, and convert the structure to and from JSON, query format, and XML. Concrete use cases include managing VPC endpoint connections in AWS EC2, tracking endpoint states, and handling DNS and load balancer configurations.",
      "description_length": 447,
      "index": 964,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IdFormat",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying ID format settings in EC2, including deadline, resource type, and whether to use long IDs. It provides functions to construct, parse, and serialize these settings for use in API requests. Concrete use cases include configuring ID format for EC2 resources like instances or volumes during API interactions.",
      "description_length": 357,
      "index": 965,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTransitGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting transit gateway routes, primarily working with an optional S3 location string. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Concrete use cases include retrieving the S3 URL where exported route tables are stored after initiating a transit gateway route export.",
      "description_length": 384,
      "index": 966,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulitcastDomainAssociationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association states of a transit gateway multicast domain. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization operations for JSON, XML, and query parameters. It is used to manage and interpret the state of multicast domain associations in AWS EC2 transit gateways.",
      "description_length": 404,
      "index": 967,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusEvent",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status events in EC2, including event details like description, type, timestamps, and associated instance ID. It provides functions to construct, parse, and convert these events to and from JSON and query formats. Concrete use cases include handling volume health notifications and event-based monitoring in EC2 instances.",
      "description_length": 383,
      "index": 968,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskState",
      "library": "aws-ec2",
      "description": "This module defines a set of states representing the lifecycle of an export task, including `Active`, `Cancelling`, `Cancelled`, and `Completed`. It provides bidirectional conversion functions between these states and strings, JSON, and XML, enabling seamless serialization and deserialization. These conversions are used when interacting with AWS EC2 APIs to send or interpret export task status in requests and responses.",
      "description_length": 423,
      "index": 969,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrefixList",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing prefix lists in AWS EC2, including CIDR blocks and optional identifiers and names. It provides functions to construct, serialize, and convert prefix list data to and from JSON and XML formats. Use this module when working with VPC endpoint policies or route tables that require prefix list references.",
      "description_length": 351,
      "index": 970,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for VPC endpoint creation, containing an optional VpcEndpoint and a client token. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from VPC endpoint creation operations in EC2.",
      "description_length": 327,
      "index": 971,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA images in the EC2 service. It provides operations to convert FPGA image lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with FPGA image data in EC2 API requests and responses, such as listing or filtering FPGA images.",
      "description_length": 309,
      "index": 972,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for provisioning a Bring Your Own IP (BYOIP) CIDR block in AWS EC2. It includes fields for specifying the CIDR range, authorization context, advertisability, description, dry run flag, and tag specifications. Operations include creating, parsing, and serializing the request for API interactions.",
      "description_length": 336,
      "index": 973,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of unsuccessful instance credit specification items. It provides functions to convert this list to and from JSON and query formats, as well as to parse it from XML data. It is used when managing credit specifications for EC2 instances, particularly in handling responses from AWS API calls related to credit settings.",
      "description_length": 395,
      "index": 974,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for importing instances in EC2, including fields like platform, disk images, and optional launch specifications. It provides constructors, JSON and XML parsers, and query conversion functions to facilitate API interactions. Use this module when initiating instance imports from virtual machine images with specific configurations.",
      "description_length": 370,
      "index": 975,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of VPC CIDR block association sets in AWS EC2. Works directly with lists of VpcCidrBlockAssociation.t records, supporting conversion to and from XML, JSON, and query formats. Used when managing VPC network configurations, particularly for associating or disassociating CIDR blocks with VPCs in AWS.",
      "description_length": 347,
      "index": 976,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a VPC peering connection deletion in AWS EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from the EC2 API after attempting to delete a VPC peering connection.",
      "description_length": 378,
      "index": 977,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance launch configurations, including fields like image ID, instance type, security groups, and network interfaces. It provides functions to construct, serialize, and parse launch specifications in various formats such as JSON, XML, and AWS query format. Use this module when configuring spot instance requests or custom EC2 instance setups with precise hardware and networking requirements.",
      "description_length": 451,
      "index": 978,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocationState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible allocation states of an EC2 resource, such as `Available`, `Released`, or `Pending`. It includes functions to convert between string representations and the enumerated values, as well as serialization and deserialization to JSON and query formats. It is used to interpret and format allocation state data when interacting with EC2 APIs, such as handling responses or constructing requests.",
      "description_length": 459,
      "index": 979,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating an FPGA image, with optional identifiers for the image and its global ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from EC2 FPGA image creation operations and integrating with AWS API request workflows.",
      "description_length": 391,
      "index": 980,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetDefaultCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving default credit specifications for EC2 instance families. It provides functions to construct, serialize, and parse the result, which includes an optional instance family credit specification. Use this module when working with EC2 burstable performance instances to get or set default credit configurations via AWS SDK calls.",
      "description_length": 368,
      "index": 981,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing flow logs in EC2, containing a set of flow logs and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing VPC flow log responses, particularly for paginated retrieval and serialization.",
      "description_length": 345,
      "index": 982,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 subnet IDs represented as strings. It provides operations to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple subnet IDs as input or return them as part of a response.",
      "description_length": 309,
      "index": 983,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of export task IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML data. It works directly with lists of base string types.",
      "description_length": 228,
      "index": 984,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting a VPC peering connection in AWS EC2. It provides functions to create, parse, and serialize the result, which includes an optional VPC peering connection record. Use this module when managing VPC peering responses in XML, JSON, or query string formats.",
      "description_length": 295,
      "index": 985,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoint connections, including optional parameters like dry-run, filters, and pagination. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Concrete use cases include listing VPC endpoint connections with custom filters or retrieving paginated results from AWS EC2.",
      "description_length": 370,
      "index": 986,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying volume creation permissions in AWS EC2, with fields for optional user IDs and permission groups. It includes functions to construct, parse, and convert these permissions to query parameters or JSON format. Use this module when configuring access control for EBS volumes during creation, particularly when granting permissions to specific users or predefined groups like \"all\".",
      "description_length": 428,
      "index": 987,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 account attribute names, with specific values `Supported_platforms` and `Default_vpc`. It provides bidirectional conversions between strings and the variant type, along with serialization and deserialization functions for JSON, XML, and query parameters. Concrete use cases include handling EC2 account attribute responses from AWS APIs and constructing requests that require specifying account attributes.",
      "description_length": 474,
      "index": 988,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for FPGA device information with optional fields such as name, manufacturer, count, and memory details. It provides functions to construct instances, parse XML input, convert to query format, and serialize to and from JSON. It is used to represent and manipulate FPGA device metadata in EC2 instance configurations.",
      "description_length": 352,
      "index": 989,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling fast snapshot restores in EC2, including availability zones, source snapshot IDs, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring fast snapshot restores for specific snapshots in designated availability zones.",
      "description_length": 374,
      "index": 990,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetGroupsForCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving resource groups associated with a capacity reservation in AWS EC2. It includes operations to construct, serialize, and parse the request data, supporting query parameters like pagination and dry-run mode. The module works directly with EC2 capacity reservation identifiers and related metadata.",
      "description_length": 349,
      "index": 991,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoipAddressUsageSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of CoIP address usage records. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of CoIP address usage entries. It is used when processing responses or building requests for AWS EC2 operations involving CoIP address usage data.",
      "description_length": 379,
      "index": 992,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association state of an IAM instance profile with an EC2 instance, including states like associating, associated, disassociating, and disassociated. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization capabilities for JSON, XML, and query parameters. These operations are used when managing IAM profile associations in EC2 instance configurations or tracking their lifecycle states.",
      "description_length": 522,
      "index": 993,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogSet",
      "library": "aws-ec2",
      "description": "Handles the serialization and deserialization of EC2 flow log data. Works with lists of FlowLog.t records, converting between XML, JSON, and query parameter formats. Used when retrieving or sending flow log information via AWS API calls, particularly for processing network traffic logs.",
      "description_length": 287,
      "index": 994,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a service in EC2, including states like `Pending`, `Available`, and `Failed`. It provides functions to convert between string representations and the enumerated values, along with serialization to and from JSON, XML, and query parameters. These operations are used when handling service state responses and requests in EC2 API interactions.",
      "description_length": 405,
      "index": 995,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoints in AWS EC2, specifically capturing any unsuccessful deletions. It works with the `UnsuccessfulItemSet.t` type to represent failed operations and provides functions to construct, parse, and serialize the result to various formats like JSON and query parameters. Concrete use cases include processing API responses after attempting to delete VPC endpoints and handling errors in batch deletion operations.",
      "description_length": 460,
      "index": 996,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorPortRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a range of ports in a traffic mirror request, with optional `from_port` and `to_port` fields. It provides functions to construct, serialize, and parse this structure to and from JSON, query parameters, and XML. Use this when configuring traffic mirroring in EC2 to define which port range should be captured.",
      "description_length": 360,
      "index": 997,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of an EC2 association, with optional code and message fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling EC2 association status responses from AWS APIs, particularly for operations involving VPC associations or network interfaces.",
      "description_length": 393,
      "index": 998,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of Phase 1 DH group numbers used in EC2 VPN connections. It operates on a list of `Phase1DHGroupNumbersListValue.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving VPN tunnel options in AWS EC2.",
      "description_length": 343,
      "index": 999,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AutoAcceptSharedAttachmentsValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing whether shared VPC attachments are automatically accepted. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used when configuring VPC sharing options in AWS EC2, specifically for handling shared VPC attachment acceptance behavior.",
      "description_length": 446,
      "index": 1000,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of NAT gateway resources in AWS EC2. It provides functions to parse XML input into NAT gateway lists, convert them to query parameters or JSON format, and construct them from JSON data. It is used when managing NAT gateway configurations, such as retrieving or modifying multiple NAT gateways in a VPC.",
      "description_length": 328,
      "index": 1001,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImagesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 images, supporting filtering by executable users, image IDs, owners, and custom filters. It includes operations to construct, parse, and serialize requests in JSON, query string, and XML formats. Concrete use cases include retrieving AMI metadata with specific criteria, such as owned images or images shared with particular users.",
      "description_length": 388,
      "index": 1002,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentPropagationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway attachment propagation entries. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `TransitGatewayAttachmentPropagation.t` values. It is used when managing route propagation in transit gateways, particularly for interacting with AWS EC2 APIs that require or return such lists in their payloads.",
      "description_length": 421,
      "index": 1003,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServicePermissionsResult",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the result of modifying VPC endpoint service permissions, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. It is used to handle responses from AWS EC2 API calls that update VPC endpoint service configurations.",
      "description_length": 359,
      "index": 1004,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with one constructor `Launch`, representing a strategy for replacing resources. It includes functions to convert between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to specify how instances should be replaced in EC2 Auto Scaling operations, ensuring correct string representations and structured data interchange.",
      "description_length": 454,
      "index": 1005,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Traffic Mirror session in AWS EC2. It includes a parsed response type containing an optional Traffic Mirror session object, along with functions to construct, serialize, and convert the result to and from JSON and query formats. It is used to process and return the updated session configuration after a modification operation.",
      "description_length": 373,
      "index": 1006,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuHealth",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the health status of an Elastic GPU, with operations to create, parse, and serialize instances. It works with XML, JSON, and query string formats for data interchange. Use cases include handling API responses and constructing requests for Elastic GPU health information in AWS EC2.",
      "description_length": 331,
      "index": 1007,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttributeBooleanValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing an optional boolean attribute value, primarily used in EC2 API interactions. It includes functions to construct, parse, and convert the value to and from query parameters, JSON, and XML formats. Concrete use cases include handling EC2 instance attribute responses, such as whether an instance is monitored or associated with a public IP.",
      "description_length": 391,
      "index": 1008,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and serialization functions for terminating EC2 instances. It works with instance ID lists and optional dry-run flags, providing operations to construct, parse, and convert termination requests to query parameters or JSON. Concrete use cases include preparing batch instance termination requests and handling dry-run validations in AWS EC2 management tools.",
      "description_length": 391,
      "index": 1009,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorTargetsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 Traffic Mirror targets, including fields for target IDs, filters, pagination, and dry-run options. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying specific Traffic Mirror targets by ID or filter criteria, and handling paginated results when listing targets in AWS environments.",
      "description_length": 443,
      "index": 1010,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CopySnapshotResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of a snapshot copy operation in EC2. It includes functions to construct, parse, and serialize the result, which contains an optional snapshot ID and a list of tags. Use this module when processing responses from copying EBS snapshots across regions or accounts, particularly for extracting and manipulating the returned snapshot identifier and associated metadata.",
      "description_length": 425,
      "index": 1011,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachClassicLinkVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the result of attaching a VPC to a ClassicLink instance, primarily holding an optional boolean indicating success or failure. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses from the EC2 API when managing VPC and ClassicLink associations.",
      "description_length": 389,
      "index": 1012,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an EBS encryption by default query, containing an optional boolean value. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle responses from AWS EC2 API calls that retrieve the default EBS encryption status.",
      "description_length": 351,
      "index": 1013,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCpuOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in a launch template, with optional fields for core count and threads per core. It provides functions to construct, serialize, and parse these options, enabling precise control over instance CPU configuration when interacting with EC2 APIs. Use this module to set custom CPU settings for EC2 instances during launch template creation or modification.",
      "description_length": 414,
      "index": 1014,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an internet gateway in AWS EC2, including optional tag specifications and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with API calls. Use this module when configuring and submitting create-internet-gateway requests programmatically.",
      "description_length": 336,
      "index": 1015,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing ID format settings for EC2 resources. It provides operations to create, parse, and convert the result structure to and from JSON and query formats. It works with a list of ID format statuses, each describing the format settings for a specific resource type.",
      "description_length": 302,
      "index": 1016,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateDnsNameConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring private DNS names in EC2, with fields representing the DNS name's state, type, value, and name. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. Concrete use cases include managing DNS settings for EC2 instances and interfacing with AWS API operations that require DNS configuration details.",
      "description_length": 419,
      "index": 1017,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UsageClassType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 usage classes with variants `Spot` and `On_demand`. It includes functions to convert between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. It is used to specify and handle instance pricing models in EC2 API interactions.",
      "description_length": 325,
      "index": 1018,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 1 IPsec configuration. It provides functions to construct, serialize, and deserialize this structure, specifically handling string-based algorithm identifiers. It is used when configuring or retrieving VPN connection settings that require specifying encryption algorithms.",
      "description_length": 378,
      "index": 1019,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientCertificateRevocationListRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting a Client VPN client certificate revocation list, containing the endpoint ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when interacting with AWS EC2 API to manage Client VPN certificate revocation programmatically.",
      "description_length": 369,
      "index": 1020,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAcl",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL in AWS EC2, including its associations, entries, metadata, and tags. It provides functions to construct, parse, and serialize network ACL data for use in API requests and responses. Concrete use cases include managing network access rules, processing EC2 API responses, and persisting network configuration state.",
      "description_length": 377,
      "index": 1021,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetExcessCapacityTerminationPolicy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `No_termination` and `Termination`, representing policies for handling excess capacity in EC2 fleets. It provides functions to convert between string representations and the enumerated type, along with serialization and deserialization for JSON, XML, and query parameters. It is used when configuring EC2 fleet behavior, ensuring correct handling of excess instances during scaling operations.",
      "description_length": 443,
      "index": 1022,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptReservedInstancesExchangeQuoteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a Reserved Instances exchange quote, including optional dry-run validation, a set of reserved instance IDs, and optional target configurations. It provides functions to construct, serialize, and parse the request for use with EC2 API operations. Use this module when initiating a Reserved Instances exchange to evaluate or apply new pricing commitments without fully committing upfront.",
      "description_length": 440,
      "index": 1023,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance credit configurations, including instance ID and CPU credit settings. It provides functions to create, serialize, and convert these specifications to and from JSON and query formats. It is used when configuring burstable performance instances in AWS EC2, such as setting credit allocation for T2 or T3 instances.",
      "description_length": 377,
      "index": 1024,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing CPU credit specifications for EC2 instances, with a string field for `cpu_credits`. It provides functions to construct, parse from XML, convert to query parameters, and serialize to and from JSON. Use this when configuring burstable performance instances in AWS EC2 using CPU credit-based pricing models.",
      "description_length": 356,
      "index": 1025,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for querying VPCs in EC2. It supports filtering by VPC IDs and attributes, with options for dry-run validation, pagination via next token, and limiting result size. It works directly with EC2 VPC data types, enabling precise control over VPC discovery and management workflows.",
      "description_length": 345,
      "index": 1026,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.KeyNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 key pair names as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with EC2 operations that require multiple key names, such as describing or deleting key pairs.",
      "description_length": 297,
      "index": 1027,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeElasticGpusResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing elastic GPUs in EC2, providing constructors, parsers, and serializers for the result structure. It works with elastic GPU sets, integer limits, and string tokens for pagination. Concrete use cases include processing responses from EC2's `DescribeElasticGpus` API, handling paginated results, and converting between XML, JSON, and query formats for communication with AWS services.",
      "description_length": 425,
      "index": 1028,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogResourceIds",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of string lists for flow log resource identifiers in AWS EC2. Works directly with `Aws.BaseTypes.String.t list` for query parameters, JSON, and XML formats. Used when managing flow logs that track network traffic for resources like VPCs or subnets.",
      "description_length": 290,
      "index": 1029,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 instance IDs represented as strings. Provides functions to convert instance ID lists to and from JSON and query parameters, and to parse them from XML. Useful when working with AWS EC2 APIs that require multiple instance IDs as input.",
      "description_length": 255,
      "index": 1030,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCapacityReservationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 capacity reservations, providing structured access to reservation data and pagination. It works with XML, JSON, and query string formats for AWS API interactions. Use it to retrieve and process capacity reservation details from AWS responses.",
      "description_length": 291,
      "index": 1031,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS block device configuration for EC2 instances, with fields like `snapshot_id`, `volume_size`, and `encrypted`. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include configuring EBS volumes when launching EC2 instances or modifying existing volume settings via API calls.",
      "description_length": 410,
      "index": 1032,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of license configuration requests for EC2 launch templates. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML nodes. Use this module when configuring or modifying EC2 instance licensing through launch templates in AWS.",
      "description_length": 305,
      "index": 1033,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfaceAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding the result of describing an EC2 network interface attribute, including fields like attachment, description, security groups, and source/destination check status. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and processing network interface metadata in AWS EC2, such as checking security group associations or source/destination checks for a specific interface.",
      "description_length": 515,
      "index": 1034,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnclaveOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing enclave options for EC2 instances, with an optional boolean field indicating whether enclaves are enabled. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. Concrete use cases include configuring enclave settings when launching or modifying EC2 instances via the AWS SDK.",
      "description_length": 393,
      "index": 1035,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGatewayIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of egress-only internet gateway IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 operations that require multiple egress-only internet gateway identifiers.",
      "description_length": 314,
      "index": 1036,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableVolumeIORequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling I/O operations on an EC2 volume, containing a volume ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when preparing or processing EC2 volume I/O enablement requests in JSON or query string formats.",
      "description_length": 342,
      "index": 1037,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkAclsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 network ACLs, supporting operations to filter by IDs or criteria, with optional dry-run and pagination controls. It works with AWS-specific types including filter lists, network ACL ID lists, and standard AWS primitives like Boolean, String, and Integer. Concrete use cases include querying network ACL configurations for monitoring, auditing, or conditional modifications in AWS infrastructure automation.",
      "description_length": 467,
      "index": 1038,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a carrier gateway in EC2, including `Pending`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversions between these states and strings, JSON, and query parameters, enabling seamless serialization and parsing. These functions are used when interacting with EC2 APIs to interpret or send carrier gateway state information.",
      "description_length": 418,
      "index": 1039,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateVersionSet",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of EC2 launch template versions. Works with XML nodes, JSON values, and AWS query parameters. Used to convert between API responses, internal data structures, and JSON representations when managing EC2 instance configurations.",
      "description_length": 275,
      "index": 1040,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateConfigList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template configurations. It provides operations to convert these lists to and from JSON and XML formats, as well as to build and parse them. It is used when managing EC2 instance launch templates, particularly in scenarios involving multiple template versions or overrides.",
      "description_length": 313,
      "index": 1041,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationItemError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to instance credit specifications in EC2. It includes functions to create, parse, and serialize error objects that contain an optional error code and message. These operations support processing failed credit specification updates in API responses or preparing error data for logging and debugging.",
      "description_length": 363,
      "index": 1042,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachClassicLinkVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of detaching a VPC from a classic link in EC2. It includes functions to construct, parse, and serialize the result, primarily working with boolean and XML data types. It is used to handle responses from the EC2 API when managing VPC associations in legacy EC2 environments.",
      "description_length": 334,
      "index": 1043,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalIdFormatList",
      "library": "aws-ec2",
      "description": "This module handles lists of principal ID format configurations, providing functions to parse XML input, convert to query parameters or JSON, and construct empty instances. It operates on a list of `PrincipalIdFormat.t` records, each representing a resource type and its associated ID format. Use this module when interacting with AWS EC2 APIs that require specifying how resource IDs are formatted for different principals.",
      "description_length": 424,
      "index": 1044,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a VPC peering connection, including an optional dry-run flag and a required VPC peering connection ID. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. Use this module when interacting with AWS EC2 APIs to delete VPC peering connections programmatically.",
      "description_length": 383,
      "index": 1045,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` with an optional `dry_run` boolean field and provides functions to construct, parse, and serialize this type to and from XML, JSON, and query parameters. It is used specifically to describe a Spot Datafeed subscription request in EC2, where `dry_run` checks permissions without performing the actual operation. Concrete use cases include building API requests to retrieve Spot Instance datafeed subscription details and handling responses in AWS SDK workflows.",
      "description_length": 498,
      "index": 1046,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeManagedPrefixListsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying managed prefix lists in EC2, supporting filtering, pagination, and optional constraints. It works with boolean, integer, string, and list types to configure API requests. Concrete use cases include retrieving prefix list details by ID, applying filters for specific attributes, and handling paginated results with max results and next token parameters.",
      "description_length": 405,
      "index": 1047,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a transit gateway prefix list reference, including required fields like transit gateway route table ID and prefix list ID, along with optional parameters such as blackhole and dry run flags. It provides functions to construct, serialize, and parse the request in various formats including JSON and query strings. It is used when configuring route tables in AWS EC2 transit gateways to associate prefix lists with specific route entries.",
      "description_length": 489,
      "index": 1048,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsNameState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the verification state of a DNS name, with values `PendingVerification`, `Verified`, and `Failed`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. The module is used to handle DNS name validation states in API requests and responses, particularly when interacting with AWS EC2 services.",
      "description_length": 466,
      "index": 1049,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthorizationRuleStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of client VPN authorization rules, with specific values like `Authorizing`, `Active`, `Failed`, and `Revoking`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include handling AWS EC2 API responses, validating status updates, and integrating with AWS SDK operations that manage client VPN authorization rules.",
      "description_length": 512,
      "index": 1050,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 local gateway route table IDs, encoded as strings. It provides operations to convert these IDs to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing routing configurations tied to specific local gateways in AWS EC2.",
      "description_length": 291,
      "index": 1051,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsEgressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of updating egress security group rule descriptions in EC2. It provides functions to construct, parse, and serialize a result containing an optional boolean indicating success. Use this module when processing responses from modifying outbound security group rules in AWS EC2.",
      "description_length": 306,
      "index": 1052,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeHypervisor",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two constructors, `Nitro` and `Xen`, representing EC2 instance hypervisor types. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON and query parameters. It is used to handle hypervisor type values when interacting with EC2 instance metadata or API requests.",
      "description_length": 357,
      "index": 1053,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating a Vpn Gateway in AWS EC2. It includes fields such as availability zone, gateway type, tag specifications, Amazon side ASN, and dry run flag. The module provides functions to construct, parse, and serialize the configuration for use in API requests.",
      "description_length": 299,
      "index": 1054,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines and manipulates allocation strategies for EC2 instances, supporting conversions between string representations and the enumerated type values. It provides direct mappings to and from JSON, XML, and query string formats, enabling seamless integration with AWS API requests and responses. Use cases include configuring spot fleet launch specifications and processing allocation strategy fields in EC2 API calls.",
      "description_length": 429,
      "index": 1055,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusList",
      "library": "aws-ec2",
      "description": "This module represents a list of volume status items, providing functions to convert the list to and from XML, JSON, and query formats. It supports parsing EC2 volume status data from AWS responses and serializing it for requests. Use this module when handling batch volume status information in API interactions with Amazon EC2.",
      "description_length": 329,
      "index": 1056,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationResponseList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of lists of elastic GPU specification responses. Works with XML nodes, JSON values, and query parameters to facilitate AWS EC2 API interactions. Used when retrieving or configuring elastic GPU settings for EC2 instances, converting between wire formats and internal data representations.",
      "description_length": 334,
      "index": 1057,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting VPC endpoint connections, primarily by capturing any unsuccessful items in the operation. It works with XML, JSON, and query parameter representations of the result data. It is used when processing responses from the EC2 API after attempting to accept one or more VPC endpoint connections.",
      "description_length": 333,
      "index": 1058,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating an EC2 Transit Gateway, including optional description, request options, tag specifications, and dry-run flag. It provides constructors, JSON and XML parsers, and query parameter conversion for handling Transit Gateway creation requests. Concrete use cases include setting up network infrastructure configurations and validating gateway creation parameters before deployment.",
      "description_length": 426,
      "index": 1059,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResourceIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based resource IDs, primarily used for managing AWS EC2 resources. It provides operations to convert resource ID lists to and from JSON and query parameters, and includes parsing from XML nodes. Use cases include serializing EC2 resource identifiers for API requests and deserializing responses.",
      "description_length": 331,
      "index": 1060,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceMetadataOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying instance metadata options, including the instance ID and updated metadata configuration. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. This is used when handling responses from AWS EC2 after updating instance metadata settings.",
      "description_length": 368,
      "index": 1061,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with `Enable` and `Disable` constructors, representing DNS support settings. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. It is used to configure DNS support in EC2 resources like VPCs and subnets.",
      "description_length": 329,
      "index": 1062,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCarrierGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing carrier gateways in EC2, providing constructors, parsing, and serialization functions. It works with carrier gateway sets and optional next tokens for pagination. Use this module to process and format results from EC2 API calls related to carrier gateways.",
      "description_length": 301,
      "index": 1063,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuAssociationList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of elastic GPU associations in XML or JSON formats. Works with lists of `ElasticGpuAssociation.t` values. Used when retrieving or sending batches of elastic GPU association data to and from AWS EC2 APIs.",
      "description_length": 252,
      "index": 1064,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 fleet instances by providing constructors, parsers, and serializers for the result data. It works with structured data types like `ActiveInstanceSet`, strings, and optional fields to manage fleet instance responses. Concrete use cases include processing and serializing EC2 fleet instance data for API requests and responses.",
      "description_length": 374,
      "index": 1065,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a transit gateway route table in AWS EC2. It includes fields for the transit gateway ID, tag specifications, and a dry run flag, supporting operations to configure and serialize the request for API calls. It works directly with string, boolean, and custom list types for tag specifications, enabling precise control over route table creation parameters.",
      "description_length": 408,
      "index": 1066,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemList",
      "library": "aws-ec2",
      "description": "This module handles lists of unsuccessful EC2 operation items, providing functions to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `UnsuccessfulItem.t` records, which represent individual failures in batch EC2 requests. Concrete use cases include processing failed instance launches or configuration updates in bulk EC2 operations.",
      "description_length": 386,
      "index": 1067,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesNetworkInterfaceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of scheduled EC2 network interface configurations. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 scheduled instances network interfaces. Use this module when configuring or retrieving network interface settings for scheduled EC2 instances, such as in instance launch templates or status checks.",
      "description_length": 442,
      "index": 1068,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and manipulating lists of launch template deletion error items. It provides operations to convert error sets to query parameters or JSON, and to parse them from XML or JSON input. It is used when processing responses from EC2's launch template version deletion API calls.",
      "description_length": 312,
      "index": 1069,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TelemetryStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `UP` and `DOWN`, representing the operational status of telemetry systems. It includes functions to convert between strings and the enumerated type, serialize to JSON and query formats, and parse from XML nodes. It is used to interpret and emit telemetry status values in API requests and responses, particularly when interacting with AWS EC2 services.",
      "description_length": 416,
      "index": 1070,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when programmatically managing transit gateway connections in AWS, particularly during peering attachment acceptance workflows.",
      "description_length": 402,
      "index": 1071,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IdFormatList",
      "library": "aws-ec2",
      "description": "This module handles lists of ID format descriptions in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing ID format settings for EC2 resources, such as specifying valid resource ID formats for different resource types.",
      "description_length": 315,
      "index": 1072,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceAvailability",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the availability of scheduled EC2 instances, with fields for attributes like availability zone, instance count, pricing, and scheduling parameters. It provides functions to construct, serialize, and deserialize this structure for use in API requests and responses. Concrete use cases include querying available scheduled instances, processing purchase tokens, and managing recurring instance reservations.",
      "description_length": 455,
      "index": 1073,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 integrity algorithm values used in EC2 VPN connection options. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `Phase1IntegrityAlgorithmsListValue.t` type. It is used when configuring or retrieving EC2 VPN tunnel options that specify allowed integrity algorithms for IPsec Phase 1 negotiations.",
      "description_length": 433,
      "index": 1074,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunInstancesMonitoringEnabled",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing monitoring configuration for EC2 instances, with a single field indicating whether monitoring is enabled. It provides functions to construct, parse, and serialize this configuration to JSON, query parameters, or XML input. Use this when configuring or interpreting monitoring settings in EC2 instance launch requests.",
      "description_length": 361,
      "index": 1075,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateChange",
      "library": "aws-ec2",
      "description": "This module represents changes in the state of EC2 instances, capturing the previous and current states along with the instance ID. It provides functions to construct, parse, and serialize state change data to query parameters or JSON. Use this module when handling instance lifecycle events or monitoring state transitions in EC2.",
      "description_length": 331,
      "index": 1076,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 key pair IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with EC2 operations that require multiple key pair IDs, such as describing or deleting multiple key pairs.",
      "description_length": 319,
      "index": 1077,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSubnetsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 subnets, including filters, subnet IDs, and pagination options. It provides functions to construct, parse, and serialize requests for querying subnet information. Use this module when configuring API calls to retrieve subnet details with specific criteria or pagination.",
      "description_length": 331,
      "index": 1078,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneMessage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling availability zone messages in AWS EC2, with operations to create, parse, and serialize the structure to query parameters, JSON, and XML. It works with optional string messages embedded in an availability zone context. Concrete use cases include processing and transmitting availability zone status messages in API requests and responses.",
      "description_length": 387,
      "index": 1079,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fast snapshot restore state in EC2, including fields for availability zone and error details. It provides functions to construct, parse, and serialize the structure to query parameters or JSON. This is used when managing snapshot restore errors across availability zones in AWS EC2.",
      "description_length": 350,
      "index": 1080,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusInfoStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status of an EC2 volume, with values for normal operation, impairment, and insufficient data. It includes functions to convert between string representations and the enumerated type, as well as serialization to and from JSON, query parameters, and XML. It is used to interpret and transmit volume status information in interactions with the AWS EC2 API.",
      "description_length": 409,
      "index": 1081,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotMaintenanceStrategies",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot instance maintenance strategies, specifically supporting capacity rebalance settings. It provides functions to create, serialize, and parse these configurations to and from XML, JSON, and query parameters. It is used when managing EC2 spot fleet requests to control how instances are replaced during scheduled maintenance.",
      "description_length": 380,
      "index": 1082,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with two variants, `One_time` and `Persistent`, representing spot instance behavior in EC2. It provides bidirectional conversion between these variants and strings, along with serialization to and from JSON, query parameters, and XML. These operations support handling spot instance type values in API requests and responses.",
      "description_length": 364,
      "index": 1083,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of license configuration requests for EC2 instances. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use it when specifying or processing license configurations during instance launch or modification.",
      "description_length": 290,
      "index": 1084,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionedBandwidth",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking bandwidth provisioning details, including timestamps and status. It provides functions to create, parse, and convert the structure to and from JSON, query parameters, and XML. Use this module when managing EC2 instance bandwidth provisioning information, such as handling API responses or configuring network capacity.",
      "description_length": 368,
      "index": 1085,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 instance export tasks, including details like the export ID, S3 task information, instance metadata, and task state. It provides functions to construct, parse, and convert export tasks to and from JSON and query formats. Use this module when managing EC2 instance exports to S3, such as tracking export status or configuring export destinations.",
      "description_length": 403,
      "index": 1086,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableTransitGatewayRouteTablePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling route table propagation in a transit gateway, containing identifiers for the route table and attachment, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring route propagation between transit gateways and attachments in AWS networking setups.",
      "description_length": 401,
      "index": 1087,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionFieldList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror session fields in AWS EC2. It provides functions to parse XML input into a list of session fields, convert the list to query parameters or JSON, and construct an empty list. Use this module when configuring or retrieving traffic mirror sessions that require specifying which packet data to capture.",
      "description_length": 342,
      "index": 1088,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking egress rules from an EC2 security group. It supports operations to construct, serialize, and parse requests containing parameters like group ID, IP permissions, port ranges, and source security group details. It is used when modifying security group egress policies by providing structured input for API calls.",
      "description_length": 363,
      "index": 1089,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an FPGA image, including fields like storage locations, metadata, and tagging. It provides functions to construct, serialize, and parse these requests, primarily working with XML, JSON, and query parameter formats. Use this module when configuring and submitting FPGA image creation requests to EC2.",
      "description_length": 352,
      "index": 1090,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteTableAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for replacing a route table association in EC2, including the association ID, optional dry run flag, and new route table ID. It provides functions to construct, parse, and convert the structure to query parameters or JSON for API requests. Use this when modifying route table associations in AWS VPC configurations.",
      "description_length": 352,
      "index": 1091,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an FPGA image, including a dry-run flag and the image ID. It provides functions to construct, parse, and serialize the request for use with query parameters or JSON APIs. Concrete use cases include preparing deletion requests for AWS EC2 FPGA images before sending them via an API client.",
      "description_length": 341,
      "index": 1092,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReferenceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway prefix list reference, with values like `Pending`, `Available`, `Modifying`, and `Deleting`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization functions for JSON, XML, and query string formats. It is used to manage and interpret the operational state of prefix list references in EC2 transit gateways.",
      "description_length": 468,
      "index": 1093,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for replacing an entry in a network ACL within EC2, supporting fields like CIDR blocks, protocol, rule action, and port ranges. It provides constructors, JSON and query serialization, and XML parsing for building and interpreting API requests. Use this module when programmatically updating network ACL rules in AWS EC2, such as modifying ingress or egress traffic rules for a subnet.",
      "description_length": 424,
      "index": 1094,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupSourcesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering multicast group sources in a transit gateway, including optional identifiers for the multicast domain, group IP address, and network interfaces. It provides functions to construct, serialize, and parse these requests, specifically handling operations related to multicast source registration in AWS EC2 transit gateways. Use cases include managing multicast traffic by associating network interfaces with specific multicast groups during routing configuration.",
      "description_length": 516,
      "index": 1095,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 resource tags, including fields for the tag key, resource ID, resource type, and value. It provides functions to construct, parse, and convert tag descriptions to and from XML, JSON, and query formats. It is used when managing metadata tags on EC2 resources like instances or volumes.",
      "description_length": 342,
      "index": 1096,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelConversionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for canceling a conversion task in EC2, including the task ID, optional dry-run flag, and an optional reason message. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for API requests. Use this when issuing a cancellation request for an ongoing instance store-backed AMI conversion.",
      "description_length": 369,
      "index": 1097,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceTagAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering instance tag attributes in EC2, including whether to include all tags and a set of specific tag keys. It provides functions to construct, parse, and serialize the request for use with API calls. Use this when configuring which tags to register for EC2 instances in custom resource management workflows.",
      "description_length": 358,
      "index": 1098,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a Vpn Tunnel Options operation, containing an optional VpnConnection. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling AWS EC2 API responses when updating a Vpn Tunnel's configuration options.",
      "description_length": 360,
      "index": 1099,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCoipPoolUsageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving usage information about a specific CoIP pool in AWS EC2. It includes fields to specify the pool ID, optional filters, pagination controls, and a dry-run flag. The module provides functions to construct, parse, and serialize the request for use with AWS API operations.",
      "description_length": 323,
      "index": 1100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for attaching a virtual private gateway to a VPC. It includes fields for the VPC ID, virtual private gateway ID, and an optional dry-run flag. Operations allow constructing, parsing, and converting the request to query or JSON formats for API interaction.",
      "description_length": 295,
      "index": 1101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImage",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an FPGA image with fields for identifiers, metadata, state, timestamps, ownership, product codes, tags, and boolean flags. It provides functions to construct instances, parse XML data, convert to query parameters, and serialize to and from JSON. Concrete use cases include managing FPGA image data in AWS EC2, handling API responses, and persisting or transmitting image configuration details.",
      "description_length": 443,
      "index": 1102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypeOfferingsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance type offerings, including a list of offerings and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. Use this module when working with AWS EC2 instance type availability across regions or zones.",
      "description_length": 350,
      "index": 1103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostTenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Dedicated` and `Host`, representing EC2 host tenancy options. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions support handling host tenancy values when interacting with AWS EC2 APIs, such as launching instances with specific tenancy requirements.",
      "description_length": 414,
      "index": 1104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsInstanceBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS instance block device attachment, with fields for attachment time, deletion policy, status, and volume ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 instance block device mappings during instance configuration or termination workflows.",
      "description_length": 401,
      "index": 1105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway route tables, supporting operations to filter, limit, and paginate results. It works with identifiers, filters, and standard AWS request parameters. Concrete use cases include retrieving specific route tables by ID, applying filters to narrow results, and handling paginated outputs in EC2 networking management.",
      "description_length": 379,
      "index": 1106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ValueStringList",
      "library": "aws-ec2",
      "description": "Handles conversion and parsing of string lists in AWS EC2 operations. Works with `Aws.BaseTypes.String.t list` for interacting with EC2 APIs. Used to transform string lists into query parameters, JSON, and back from XML or JSON responses.",
      "description_length": 238,
      "index": 1107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CertificateAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling certificate authentication requests in EC2, primarily working with string and XML data types. It provides functions to construct, serialize, and deserialize certificate authentication request objects, specifically supporting operations like query parameter conversion, JSON serialization, and XML parsing. It is used when configuring or modifying EC2 client VPN endpoints that require certificate-based authentication.",
      "description_length": 468,
      "index": 1108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetNetworkSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 target network lists for API requests and responses. Works with `TargetNetwork.t` lists, converting them to and from XML, JSON, and query parameters. Used when managing VPC endpoint services or load balancer target groups that require network configuration data.",
      "description_length": 311,
      "index": 1109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateways in EC2, providing access to a set of local gateway data and an optional next token for pagination. It supports operations to construct, parse, and convert results to and from JSON and query formats. It is used when processing responses from EC2's `DescribeLocalGateways` API call, enabling structured access to gateway sets and pagination control.",
      "description_length": 407,
      "index": 1110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to the disabling of fast snapshot restore functionality. It provides constructors, parsing, and serialization functions for converting between XML, JSON, and query formats. It is used specifically for processing error responses from EC2 API calls related to snapshot restore state management.",
      "description_length": 357,
      "index": 1111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZone",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 availability zone with fields for state, opt-in status, messages, and metadata like region and zone names. It provides functions to construct, parse, and serialize availability zone data to and from XML, JSON, and query formats. Concrete use cases include retrieving availability zone details from AWS EC2 responses and preparing zone-related parameters for API requests.",
      "description_length": 428,
      "index": 1112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the configuration of an AWS EC2 service, including fields like service type, state, availability zones, load balancer ARNs, and DNS settings. It provides functions to construct, parse, and serialize service configurations to and from XML, JSON, and query formats. Concrete use cases include managing VPC endpoint services, configuring private DNS settings, and retrieving service metadata for AWS resources.",
      "description_length": 457,
      "index": 1113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC peering connection data by providing parsing, serialization, and conversion operations. It works with XML nodes, JSON values, and query parameters to facilitate interaction with AWS EC2 APIs. Use this module when processing responses or constructing requests involving multiple VPC peering connections.",
      "description_length": 335,
      "index": 1114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint services in AWS EC2. It includes operations to create, parse, and serialize the result, which contains service names, service details, and an optional pagination token. It works with string lists, service detail sets, and JSON or XML representations for data interchange.",
      "description_length": 329,
      "index": 1115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsInstances",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing EC2 fleet instances, including instance IDs, type, lifecycle, platform, and optional launch template overrides. It provides functions to construct, parse, and serialize the structure to JSON, query format, or XML. Concrete use cases include managing spot fleet instance configurations and querying instance details within an EC2 fleet.",
      "description_length": 387,
      "index": 1116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing network interface permissions in AWS EC2, including fields like permission ID, network interface ID, AWS account ID, service, and permission state. It provides functions to construct, parse, and convert these permissions to and from JSON and query formats. Use this module when configuring or retrieving access permissions for EC2 network interfaces, particularly when integrating with AWS services or managing cross-account access.",
      "description_length": 482,
      "index": 1117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with one variant `LoadPermission`, representing attributes that can be reset for an EC2 FPGA image. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. This module is used when modifying FPGA image permissions via the EC2 API, specifically when resetting load permissions.",
      "description_length": 434,
      "index": 1118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationIdsList",
      "library": "aws-ec2",
      "description": "This module handles lists of connection notification IDs for EC2 operations. It provides functions to parse, convert to query format, and serialize/deserialize to and from JSON. It works directly with lists of base string types, specifically for managing connection notification identifiers in AWS EC2.",
      "description_length": 302,
      "index": 1119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHibernationOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for EC2 launch template hibernation options, primarily working with a boolean flag indicating whether hibernation is configured. It provides functions to construct, serialize, and convert the structure to and from XML, JSON, and query parameters. Use this module when configuring or retrieving EC2 instance hibernation settings in AWS infrastructure code.",
      "description_length": 392,
      "index": 1120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a reserved instances listing in EC2, with fields such as instance counts, price schedules, status, and timestamps. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 reserved instance listings, tracking pricing and availability, and integrating with AWS APIs for resource provisioning.",
      "description_length": 435,
      "index": 1121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIamInstanceProfileSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in EC2 launch templates, with optional ARN and name fields. It provides functions to construct, serialize, and parse these specifications to and from JSON, query parameters, and XML. Use this module when configuring or modifying EC2 instance profiles as part of a launch template in AWS infrastructure automation.",
      "description_length": 387,
      "index": 1122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving routes associated with a Client VPN endpoint. It includes fields to specify the endpoint ID, filtering criteria, pagination settings, and a dry-run flag. Operations allow constructing, parsing, and serializing the request for use with query or JSON-based APIs.",
      "description_length": 315,
      "index": 1123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationList",
      "library": "aws-ec2",
      "description": "This module handles lists of client VPN authentication configurations. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when managing AWS EC2 client VPN endpoints that require multiple authentication methods.",
      "description_length": 291,
      "index": 1124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNatGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a NAT gateway in AWS EC2, containing an optional client token and an optional NAT gateway object. It provides functions to construct, parse, and serialize the result for use in API responses and requests. Concrete use cases include handling the output of a NAT gateway creation operation, including converting the result to JSON or query parameters for further processing or client communication.",
      "description_length": 469,
      "index": 1125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointServiceConfigurationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoint service configurations, primarily by capturing any unsuccessful deletion attempts. It works with XML, JSON, and query data formats to serialize and deserialize the result structure, which includes a set of unsuccessful items. Concrete use cases include processing responses from the EC2 API after attempting to delete multiple VPC endpoint service configurations.",
      "description_length": 419,
      "index": 1126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotDatafeedSubscriptionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing an EC2 Spot Instance datafeed subscription. It provides functions to construct, parse, and serialize the result, which includes an optional `SpotDatafeedSubscription` record. Use this module when retrieving and processing datafeed subscription details from AWS EC2, such as when monitoring or configuring billing notifications for Spot Instances.",
      "description_length": 391,
      "index": 1127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway route table sets in AWS EC2. It provides functions to convert between XML, JSON, and query string representations of a list of local gateway route tables. Use this module when working with AWS EC2 API requests and responses that involve listing or passing multiple local gateway route tables.",
      "description_length": 382,
      "index": 1128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to enable VPC ClassicLink DNS support, containing an optional VPC ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring VPC settings related to ClassicLink DNS support through programmatic AWS interactions.",
      "description_length": 361,
      "index": 1129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance configurations within a Spot Fleet request, including networking, storage, and instance-specific settings. It supports operations to construct, serialize, and parse these specifications using XML, JSON, and query parameters. Concrete use cases include configuring spot instance fleets with custom block devices, network interfaces, and IAM roles.",
      "description_length": 411,
      "index": 1130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AllocationIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 allocation IDs, providing functions to convert them to and from XML, JSON, and query parameters. It works with `Ezxmlm.nodes`, `Aws.Json.t`, and `Aws.Query.t` for serialization and parsing. Use this module when interacting with EC2 APIs that require handling allocation IDs in different data formats.",
      "description_length": 333,
      "index": 1131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RegionNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based region names in AWS EC2 operations. It provides functions to convert, parse, and serialize region name lists to and from XML, JSON, and query formats. Use this module when working with AWS EC2 API requests and responses that require handling multiple region names.",
      "description_length": 306,
      "index": 1132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of elastic GPU configurations. It provides functions to convert between XML, JSON, and internal data representations, specifically working with `ElasticGpus.t` lists. It is used when managing EC2 instance elastic GPU attachments, particularly during API requests and responses.",
      "description_length": 359,
      "index": 1133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfigSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of Spot Fleet request configurations. Works with XML nodes, JSON values, and query parameters to transform lists of Spot Fleet request configurations. Used to process responses from and build requests to AWS EC2 Spot Fleet APIs, enabling configuration management across different data formats.",
      "description_length": 340,
      "index": 1134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway route table in AWS EC2. It includes a parsed response type with an optional transit gateway route table, along with functions to convert to and from JSON, query format, and XML. It is used to process and manipulate the output of transit gateway route table creation operations directly with AWS API responses.",
      "description_length": 370,
      "index": 1135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthorizationRuleStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN authorization rule, with fields for a status code and a descriptive message. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. This module is used to manage and communicate the outcome of authorization rule operations in Client VPN configurations.",
      "description_length": 387,
      "index": 1136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailableCapacity",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the capacity of an EC2 instance, including available instance capacity and optional vCPU count. It provides functions to construct, parse, and serialize this data for use in querying or configuring EC2 resources. Use cases include checking available resources in an EC2 fleet or managing capacity during instance provisioning.",
      "description_length": 376,
      "index": 1137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatePlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement information in EC2 launch templates, including optional fields like availability zone, tenancy, and host ID. It provides functions to construct, parse, and serialize placement configurations for use when launching EC2 instances with specific placement constraints. Use cases include setting up dedicated host placements or controlling instance distribution across hosts and partitions.",
      "description_length": 447,
      "index": 1138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 fleet request, including fields like dry run flag, termination policy, launch templates, fleet ID, and capacity specification. It provides functions to construct, parse, and serialize the structure to query or JSON formats. Concrete use cases include configuring fleet updates with specific capacity adjustments or template changes when managing EC2 auto-scaling fleets.",
      "description_length": 428,
      "index": 1139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetLaunchTemplateDataRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving launch template data associated with an EC2 instance. It includes operations to construct, parse, and serialize the request, supporting interactions with the AWS API through query parameters or JSON. The module works with instance identifiers and optional dry-run flags, enabling programmatic retrieval of launch configurations for existing instances.",
      "description_length": 406,
      "index": 1140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 transit gateway attachments, including fields for attachment IDs, filters, pagination, and dry run options. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying AWS EC2 for transit gateway attachment details with specific filters or pagination parameters.",
      "description_length": 416,
      "index": 1141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deregistering instance event notification attributes in EC2. It includes a single optional field for instance tag notification attributes and provides functions to construct, parse, and serialize the result in various formats. It is used when managing event notifications for EC2 instances, specifically when updating or removing tag-based notification settings.",
      "description_length": 396,
      "index": 1142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating a VPC in AWS EC2, including IPv4 and IPv6 addressing, tenancy settings, and tagging. It supports operations to construct, serialize, and parse VPC creation requests in multiple formats including JSON and query parameters. Concrete use cases include setting up isolated network environments with specific CIDR ranges, enabling IPv6, and applying resource tags during VPC creation.",
      "description_length": 430,
      "index": 1143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing details of a disk image, including its size in bytes, format, and import manifest URL. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling disk image metadata for EC2 instance imports or exports.",
      "description_length": 334,
      "index": 1144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 address association requests, with optional fields like allocation ID, instance ID, public IP, and flags for reassociation and dry runs. It provides functions to construct, serialize, and parse these configurations, enabling precise control over associating elastic IPs with instances. Use this module when programmatically managing IP address assignments in AWS EC2, such as reassociating addresses during instance replacement or testing configuration changes without applying them.",
      "description_length": 540,
      "index": 1145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a type and operations for constructing and serializing requests to create traffic mirror filter rules in EC2. It works with string, integer, boolean, and option types, along with nested structures for port ranges and traffic direction. It is used to configure traffic mirroring rules with specific CIDR blocks, port ranges, protocols, and actions for network monitoring.",
      "description_length": 390,
      "index": 1146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Vpc",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Virtual Private Cloud (VPC) with fields for network configuration, state, identifiers, and metadata. It provides functions to construct, parse, and serialize VPC instances to and from XML, JSON, and query formats. Concrete use cases include managing VPC configurations in AWS EC2, handling VPC responses from API calls, and building requests for VPC creation or modification.",
      "description_length": 427,
      "index": 1147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacePermissionsResult",
      "library": "aws-ec2",
      "description": "This module handles the response data from an EC2 network interface permissions describe operation. It includes a list of network interface permissions and an optional pagination token. Use this module to parse, serialize, and work with results returned from querying network interface permissions in AWS EC2.",
      "description_length": 309,
      "index": 1148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance status objects, providing direct conversions to and from XML, JSON, and query parameters. It supports parsing instance status data from AWS responses and constructing requests with instance status information. Commonly used when interacting with EC2 APIs to retrieve or send instance health and state details.",
      "description_length": 351,
      "index": 1149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 2 integrity algorithm values used in EC2 VPN tunnel configurations. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `Phase2IntegrityAlgorithmsListValue.t` type. It is used when configuring or retrieving EC2 VPN connection options that require specifying allowed integrity algorithms for IPsec phase 2 negotiations.",
      "description_length": 451,
      "index": 1150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ActiveInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an active EC2 instance with optional fields for instance ID, type, spot request ID, and health status. It provides functions to construct, parse, and convert instances to and from JSON and query formats. Concrete use cases include handling responses from EC2 API calls related to instance management and health monitoring.",
      "description_length": 372,
      "index": 1151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying network interface configurations in EC2 launch templates, including fields like subnet, security groups, IP addressing, and interface type. It provides functions to construct, serialize, and parse these specifications for use in API requests and responses. Concrete use cases include configuring network interfaces when launching EC2 instances and processing network settings from AWS API responses.",
      "description_length": 451,
      "index": 1152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssignPrivateIpAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for assigning private IP addresses to an EC2 network interface. It includes operations to create, parse, and serialize the request in JSON, query string, and XML formats. The module works with boolean, string, integer, and list types to configure IP reassignment and specify target network interfaces.",
      "description_length": 341,
      "index": 1153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceDetailSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of EC2 service details. It provides functions to convert service detail lists to and from XML, JSON, and query formats. It is used when interacting with AWS EC2 APIs that require or return service configuration data.",
      "description_length": 274,
      "index": 1154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcPeeringConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC peering connection options, including settings for both accepter and requester sides, a dry run flag, and the connection ID. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. It is used when updating routing or VPC peering configurations in AWS EC2 without making actual changes, for validation purposes.",
      "description_length": 435,
      "index": 1155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclAssociationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of network ACL associations. It provides functions to convert between XML, JSON, and query string representations and a list of network ACL association records. Use this module when working with AWS EC2 API responses that include network ACL association data in different formats.",
      "description_length": 348,
      "index": 1156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for rejecting a transit gateway VPC attachment, containing an optional `TransitGatewayVpcAttachment` value. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when handling responses from AWS EC2 API calls that reject a transit gateway VPC attachment.",
      "description_length": 374,
      "index": 1157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotInstanceRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying spot instance requests, including filters, request IDs, and pagination parameters. It provides functions to construct, parse, and serialize requests for AWS EC2 spot instance management. Use this module to filter and retrieve spot instance request details, supporting operations like listing pending requests or analyzing spot instance pricing.",
      "description_length": 397,
      "index": 1158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNatGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a NAT gateway in AWS EC2, including a dry run flag and the NAT gateway ID. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when initiating a NAT gateway deletion with optional pre-checks in AWS network management workflows.",
      "description_length": 349,
      "index": 1159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSecurityGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 security group, supporting operations to create, parse, and serialize the request in various formats. It works with string and boolean types to represent the security group identifier, name, and dry-run flag. Concrete use cases include constructing API requests to delete a security group by ID or name, and converting between JSON or XML representations and the internal request type.",
      "description_length": 445,
      "index": 1160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing the attachment status of an EC2 resource, with values like `Attached` and `Detaching`. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. It is used to handle state transitions and API responses for resources like network interfaces or volumes.",
      "description_length": 339,
      "index": 1161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for retrieving associations of a managed prefix list in AWS EC2. It includes fields for optional dry-run mode, prefix list ID, maximum results per page, and a pagination token. The module provides functions to construct, parse, and serialize these requests to JSON or query parameters for API calls.",
      "description_length": 341,
      "index": 1162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 route table IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. It is used when working with AWS EC2 operations that involve multiple route tables, such as describing or modifying route tables.",
      "description_length": 317,
      "index": 1163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL association in Amazon EC2, with fields for association ID, network ACL ID, and subnet ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing network ACL associations when configuring or modifying EC2 subnets and security policies.",
      "description_length": 390,
      "index": 1164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageDiskContainer",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying disk container information when importing or exporting EC2 images. It includes fields for image format, source URLs, device names, and associated snapshots or S3 buckets. Operations include creating instances, parsing XML input, and converting to and from JSON and query formats for API interactions.",
      "description_length": 352,
      "index": 1165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceLifecycleType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Spot` and `Scheduled`, representing EC2 instance lifecycle types. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. These functions support handling instance lifecycle values in API requests and responses, specifically for interacting with AWS EC2 services.",
      "description_length": 424,
      "index": 1166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating a network ACL entry in EC2, including fields like CIDR block, protocol, rule action, and port range. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use cases include configuring network access rules for EC2 subnets by specifying allow/deny rules with specific conditions.",
      "description_length": 371,
      "index": 1167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateClientVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for terminating specific client connections on a Client VPN endpoint. It includes fields for the endpoint ID, optional connection ID, username, and dry-run flag, supporting precise connection termination control. Operations include creating, parsing, and serializing termination requests for API interaction.",
      "description_length": 348,
      "index": 1168,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 2 integrity algorithms for EC2, containing an optional string. It provides functions to construct, parse, and serialize the value to various formats including JSON, query parameters, and XML nodes. It is used when configuring or retrieving IPsec tunnel integrity algorithm settings in EC2 Virtual Private Gateways.",
      "description_length": 398,
      "index": 1169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionLogResponseOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring connection logging options in EC2, including fields for enabling logs and specifying CloudWatch log group and stream names. It provides functions to construct, parse, and serialize these options for use in API requests and responses. Concrete use cases include enabling VPC flow logs and configuring logging destinations for network traffic analysis.",
      "description_length": 403,
      "index": 1170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BillingProductList",
      "library": "aws-ec2",
      "description": "This module handles lists of billing product strings in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with billing product data in AWS EC2 API requests or responses.",
      "description_length": 286,
      "index": 1171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PoolCidrBlocksSet",
      "library": "aws-ec2",
      "description": "This module handles CIDR block sets for IP address pools, providing operations to convert CIDR lists to query parameters, parse XML responses, and serialize/deserialize JSON. It works with lists of `PoolCidrBlock.t` values, representing IP ranges in EC2 networking configurations. Use this module when managing IP address allocations for EC2 instances or VPC subnets via AWS SDK calls.",
      "description_length": 385,
      "index": 1172,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 reserved instances, providing functions to create, parse, and convert the result to query or JSON formats. It works with a list of `ReservedInstances` data structures, which contain details like instance type, availability zone, and pricing. Use this module when managing reserved instance responses from AWS EC2, particularly for serialization or extracting instance details from API calls.",
      "description_length": 440,
      "index": 1173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceTagAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering instance tag attributes in EC2, supporting operations to set whether all tags are excluded and specify individual tag keys to remove. It works with boolean and string set data types to model tag inclusion and exclusion policies. It is used when modifying instance tag visibility settings in EC2 instance attribute configurations.",
      "description_length": 387,
      "index": 1174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionModifications",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing modifications to load permissions, with fields for adding and removing permissions. It provides functions to construct, parse, and convert these modifications to various formats like JSON and query parameters. It is used when updating load balancer listener rules or managing access to load balancers in AWS EC2.",
      "description_length": 356,
      "index": 1175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotPriceHistoryResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 spot price history, providing constructors, parsing, and serialization functions. It works with a custom type containing an optional next token and a list of spot price history entries. Use it to process and format spot price data retrieved from AWS EC2, particularly when handling paginated responses or integrating with AWS SDK operations.",
      "description_length": 390,
      "index": 1176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of EC2 validation error lists. It provides operations to convert error lists to and from XML, JSON, and query formats. Use it when processing EC2 API responses that include validation errors, particularly for handling malformed input or constraint violations.",
      "description_length": 318,
      "index": 1177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationState",
      "library": "aws-ec2",
      "description": "This module defines a simple enumeration type with values `Enabled` and `Disabled`, representing the state of a connection notification. It provides bidirectional conversion functions between strings and the enumerated type, along with standard serialization and deserialization routines for JSON, XML, and query parameters. It is used to manage and transmit connection notification states in API requests and responses.",
      "description_length": 420,
      "index": 1178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServiceConfigurationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint service configurations, including a set of service configurations and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving and handling VPC endpoint service configuration data from AWS EC2.",
      "description_length": 372,
      "index": 1179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateEnclaveCertificateIamRoleResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating an enclave certificate IAM role in EC2. It includes fields for an S3 bucket name, S3 object key, and KMS key ID, all optional. Operations include creating instances, parsing XML, converting to query or JSON formats, and constructing from JSON, primarily used when managing enclave certificates in AWS EC2.",
      "description_length": 381,
      "index": 1180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting queued Reserved Instances in EC2, including an optional dry-run flag and a list of Reserved Instance IDs. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include managing Reserved Instance cancellations before they are processed by AWS.",
      "description_length": 357,
      "index": 1181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetLaunchTemplateDataResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving launch template data from EC2. It provides functions to construct, parse, and serialize the result, which includes optional launch template data. Use this module when working with EC2 launch templates, particularly to extract and process template configuration details returned by AWS API calls.",
      "description_length": 340,
      "index": 1182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of capacity reservation group sets in EC2. It provides functions to convert between XML, JSON, and query string representations of these group sets, specifically working with lists of capacity reservation group records. Use this module when processing EC2 API responses or constructing requests that involve capacity reservation groups.",
      "description_length": 409,
      "index": 1183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupMembersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering multicast group members in a transit gateway, including optional identifiers for the multicast domain, group IP address, and network interfaces. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when managing multicast group membership changes in AWS transit gateways, particularly for validation or API interaction workflows.",
      "description_length": 446,
      "index": 1184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcPeeringConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC peering connections, including filters, connection IDs, and pagination parameters. It provides functions to construct, parse, and serialize requests for use with AWS EC2 APIs. Use this module when retrieving information about existing VPC peering connections, applying filters, or handling paginated results.",
      "description_length": 365,
      "index": 1185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCount",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing instance count information, including the number of instances and their listing state. It provides functions to create, parse, and convert the structure to query parameters, JSON, and back from JSON. It is used when handling EC2 instance listings and state transitions in AWS operations.",
      "description_length": 337,
      "index": 1186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based bundle IDs in AWS EC2 operations. It provides functions to convert, parse, and serialize these lists to and from JSON and query formats. Use this module when working with EC2 bundle tasks that require list manipulations in API requests or responses.",
      "description_length": 291,
      "index": 1187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6SupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Enable` and `Disable`, representing IPv6 support settings. It provides bidirectional conversions between strings and the `t` type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to configure IPv6 support in EC2 resources like VPCs and subnets.",
      "description_length": 350,
      "index": 1188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignIpv6AddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for assigning IPv6 addresses to a network interface in EC2. It includes operations to construct, parse, and serialize the request in various formats such as JSON and query strings. It works with string, integer, and list types to handle network interface identifiers, IPv6 address counts, and address lists.",
      "description_length": 347,
      "index": 1189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptionsList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP options in AWS EC2, providing functions to convert, parse, and serialize them for API requests. It works with XML nodes, JSON values, and query parameters, enabling direct interaction with EC2's DHCP options APIs. Use this module when managing DHCP configurations for VPCs, such as setting domain names or NTP servers.",
      "description_length": 352,
      "index": 1190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 NAT gateway, including timestamps, state, network configuration, and associated addresses. It provides functions to construct, serialize, and deserialize NAT gateway records for use in AWS API interactions. These operations support managing NAT gateway lifecycles and configurations within virtual private clouds.",
      "description_length": 370,
      "index": 1191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSecurityGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for the result of creating a security group in EC2, containing the group ID and associated tags. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when handling responses from EC2 security group creation operations, particularly for extracting and transmitting group identifiers and metadata.",
      "description_length": 419,
      "index": 1192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling account attribute values in AWS EC2, specifically containing an optional string attribute. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when retrieving or setting account-level attributes such as maximum instance limits or VPC quotas via the EC2 API.",
      "description_length": 382,
      "index": 1193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalIdFormat",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the ARN of a principal and its associated ID format statuses in EC2. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query parameters. Concrete use cases include handling responses from EC2 API calls that describe principal ID format settings and preparing input for operations that configure ID formats.",
      "description_length": 405,
      "index": 1194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PortRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing port ranges with optional start and end ports, using integer values. It provides functions to construct, parse, and convert port range data to and from XML, JSON, and query formats. Concrete use cases include specifying network access rules in EC2 security group configurations and processing API requests involving port ranges.",
      "description_length": 382,
      "index": 1195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 Transit Gateway Multicast Domain, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when configuring or tearing down network infrastructure involving multicast traffic in AWS EC2 environments.",
      "description_length": 356,
      "index": 1196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NewDhcpConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying DHCP configurations with an optional key and a list of string values. It provides functions to create, serialize, and parse these configurations to and from XML, JSON, and query formats. It is used when configuring DHCP options for EC2 instances, such as setting domain names or NTP servers.",
      "description_length": 343,
      "index": 1197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful fast snapshot restore operation in EC2. It includes fields for snapshot metadata, state transitions, timestamps, and ownership details, all optional. Operations include creating instances, parsing XML responses, and converting to and from JSON and query formats for API interactions.",
      "description_length": 360,
      "index": 1198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing account attributes in AWS EC2, specifically capturing attribute names and their associated values. It provides functions to construct, serialize, and deserialize these attributes to and from XML, JSON, and query formats. Use this module when retrieving or configuring EC2 account-level settings such as maximum instance limits or supported platforms.",
      "description_length": 404,
      "index": 1199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 VPC attributes, specifically `EnableDnsSupport` and `EnableDnsHostnames`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when configuring or querying VPC attribute settings in AWS EC2 APIs.",
      "description_length": 364,
      "index": 1200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateSubnetCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to disassociate a subnet CIDR block, containing an `association_id`. It provides functions to construct, parse, and serialize the request in various formats including JSON, query parameters, and XML. This is used when managing IPv6 or secondary IPv4 CIDR blocks associated with subnets in EC2.",
      "description_length": 359,
      "index": 1201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a transit gateway prefix list reference. It provides constructors, JSON serialization/deserialization, and query conversion for a structure containing an optional transit gateway prefix list reference. It is used when updating routing configurations in AWS EC2 transit gateways, specifically for associating or disassociating prefix lists.",
      "description_length": 383,
      "index": 1202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering instance event notification attributes, including optional dry-run and instance tag attribute settings. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Concrete use cases include configuring event notifications for EC2 instances during instance management workflows.",
      "description_length": 378,
      "index": 1203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpotMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring spot market options in EC2 launch templates, including max price, spot instance type, block duration, validity period, and interruption behavior. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. It is used when specifying spot instance parameters in AWS EC2 Auto Scaling or launch template APIs.",
      "description_length": 429,
      "index": 1204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for associating a route table with a subnet or gateway in EC2. It includes fields for the route table ID, optional subnet ID, optional gateway ID, and a dry-run flag, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring route table associations in AWS EC2 networking workflows.",
      "description_length": 377,
      "index": 1205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageTypeValues",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing image types in EC2, including machine, kernel, and ramdisk. It provides bidirectional conversion between strings and the enumerated values, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with EC2 APIs to specify or interpret image types in requests and responses.",
      "description_length": 380,
      "index": 1206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportImageTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 export image tasks, providing structured access to a list of export tasks and an optional pagination token. It supports parsing from XML, converting to JSON or query format, and constructing results programmatically. Concrete use cases include processing responses from AWS EC2's `DescribeExportImageTasks` API to monitor or manage image export workflows.",
      "description_length": 404,
      "index": 1207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for handling transit gateway peering attachment responses, primarily used when accepting peering connections in AWS EC2. It includes functions to construct, serialize, and deserialize the result, supporting operations like converting to JSON or query parameters and parsing XML input. The core data type is a record containing an optional `TransitGatewayPeeringAttachment.t`, enabling safe handling of potentially missing responses.",
      "description_length": 471,
      "index": 1208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpnConnectionRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 VPN connection, containing the destination CIDR block and the VPN connection ID. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. This is used when managing routing for site-to-site VPN connections in AWS EC2.",
      "description_length": 358,
      "index": 1209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancersConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for classic load balancers, primarily used in AWS EC2 service interactions. It includes functions to construct, serialize, and parse load balancer configurations, supporting operations like API request generation and JSON conversion. It works directly with XML, JSON, and query parameter formats for integration with AWS APIs.",
      "description_length": 372,
      "index": 1210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.OfferingTypeValues",
      "library": "aws-ec2",
      "description": "This module defines a set of predefined offering type values for EC2 instances, including Heavy_Utilization, No_Upfront, and All_Upfront. It provides direct conversions between these types and strings, JSON, and query parameters, ensuring consistent handling during API interactions. These functions are used when configuring or retrieving EC2 reserved instance offerings.",
      "description_length": 372,
      "index": 1211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 bundle tasks, providing direct conversions to and from XML, JSON, and query formats. It supports parsing task lists from XML nodes and serializing them for API requests or JSON responses. Use this module when managing instance store-backed AMI bundling operations in EC2.",
      "description_length": 304,
      "index": 1212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an image copy operation in EC2, including parameters like source image ID, target name, encryption settings, and KMS key ID. It provides functions to construct, serialize, and parse copy image requests, supporting both JSON and XML formats. Concrete use cases include preparing API requests to duplicate EC2 images across regions with specific encryption configurations.",
      "description_length": 422,
      "index": 1213,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplate",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 launch template, with fields for template identifiers, timestamps, version numbers, and tags. It provides functions to construct, serialize, and deserialize instances for use in API requests and responses. Concrete use cases include managing EC2 instance configurations and retrieving template metadata from AWS.",
      "description_length": 369,
      "index": 1214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LicenseConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing license configurations in AWS EC2, specifically capturing an optional license configuration ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance license configurations via the AWS SDK, particularly when integrating with AWS License Manager.",
      "description_length": 400,
      "index": 1215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionStateReason",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state reason for a VPC peering connection, consisting of an optional state reason code and a message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling and transmitting state change reasons for VPC peering connections in AWS EC2.",
      "description_length": 380,
      "index": 1216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeClientVpnIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking ingress access to a Client VPN endpoint. It includes fields for the endpoint ID, target network CIDR, optional access group ID, and flags to revoke all groups or perform a dry run. The module provides functions to construct, parse, and serialize the request for use with AWS API calls.",
      "description_length": 338,
      "index": 1217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListResourceIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based prefix list resource IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. It is used when working with EC2 prefix list associations and related resource tagging operations.",
      "description_length": 292,
      "index": 1218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 2 integrity algorithm requests, primarily used when configuring virtual private gateways or transit gateways in AWS EC2. It supports operations to construct, serialize, and deserialize this value using query parameters, JSON, or XML formats. A typical use case involves specifying allowed integrity algorithms like SHA1 or SHA2 during the setup of IPsec VPN connections.",
      "description_length": 454,
      "index": 1219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcState",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two states, `Pending` and `Available`, representing the lifecycle state of a VPC in AWS EC2. It includes functions to convert between string representations and the type, as well as serialization and deserialization to JSON and query formats. It is used to interpret and format VPC state data when interacting with AWS EC2 APIs or processing XML/JSON responses.",
      "description_length": 397,
      "index": 1220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplatesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 launch templates, containing a set of launch templates and an optional pagination token. It provides functions to construct, parse, and convert results to and from XML, JSON, and query formats. Use this module when handling responses from EC2 API calls that list launch templates, particularly for paginated results.",
      "description_length": 368,
      "index": 1221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking ingress rules in a security group, supporting operations to construct, serialize, and parse requests with optional fields like CIDR IP, port ranges, and source security group details. It works with AWS EC2 IP permissions, string and integer types, and integrates with AWS query and JSON formats. Concrete use cases include building and modifying security group ingress revocation requests before sending them to the EC2 API.",
      "description_length": 477,
      "index": 1222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing an image into EC2, including fields like architecture, disk containers, encryption settings, and metadata. It provides functions to construct, parse, and serialize the structure to support API requests. Concrete use cases include preparing image imports from disk containers, specifying encryption with KMS keys, and tagging resources during import setup.",
      "description_length": 406,
      "index": 1223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreatePlacementGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 placement group, including optional parameters like dry run, group name, strategy, and partition count, along with required tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring placement groups with specific strategies and tags when launching EC2 instances.",
      "description_length": 422,
      "index": 1224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for attaching a network interface to an EC2 instance, including fields like device index, instance ID, and network interface ID. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when programmatically managing network interfaces in EC2, such as during instance configuration or network reconfiguration tasks.",
      "description_length": 411,
      "index": 1225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptReservedInstancesExchangeQuoteResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of accepting a Reserved Instances exchange quote, containing an optional exchange ID. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses when finalizing Reserved Instance exchanges in EC2.",
      "description_length": 348,
      "index": 1226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCapacityReservationSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation preferences and targets when launching EC2 instances. It includes functions to construct, serialize, and parse these specifications, supporting integration with AWS EC2 launch templates. Use cases include configuring instance launches to prioritize specific capacity reservations or specify tenancy options.",
      "description_length": 380,
      "index": 1227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot instance requests, providing operations to convert between XML, JSON, and query formats. It supports parsing spot instance request data from XML nodes and converting them to structured lists, JSON, or AWS query parameters. Use this module when managing spot instance request responses from AWS API calls or when constructing requests to submit.",
      "description_length": 382,
      "index": 1228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 fleet, including values like `Active`, `Deleted`, and `Failed`. It provides bidirectional conversion functions between the type and strings, JSON, and XML, enabling serialization and deserialization for API interactions. Use this module when handling EC2 fleet state transitions, status checks, or event-driven workflows that require precise state tracking.",
      "description_length": 439,
      "index": 1229,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupIdentifier",
      "library": "aws-ec2",
      "description": "This module defines a data structure for identifying EC2 security groups using either a group ID or group name. It provides functions to construct, parse, and convert security group identifiers to and from query parameters and JSON format. Use this module when managing security group associations in EC2 instances or network configurations.",
      "description_length": 341,
      "index": 1230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseSpecificationListResponse",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and manipulating lists of import image license configuration responses. It provides operations to convert such lists to AWS query format, JSON, and back, as well as creating and parsing them from XML nodes. It is used when managing license configurations during EC2 image imports.",
      "description_length": 321,
      "index": 1231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a transit gateway route table with a transit gateway attachment in AWS EC2. It includes operations to construct, serialize, and parse the request data, working with string and boolean types to represent required and optional parameters. It is used when configuring routing for transit gateways, enabling network traffic management between VPCs and on-premises networks.",
      "description_length": 425,
      "index": 1232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.S3Storage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring S3 storage with optional fields such as access key ID, bucket name, prefix, upload policy, and signature. It provides functions to construct, parse, and serialize the structure to different formats including JSON, query parameters, and XML. Use this module when setting up S3-backed storage configurations for EC2 instances, particularly for specifying where and how data should be stored and accessed.",
      "description_length": 455,
      "index": 1233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway VPC attachment in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional transit gateway VPC attachment object. Use this module when managing VPC connectivity through transit gateways, particularly for processing API responses or building requests with the AWS SDK for OCaml.",
      "description_length": 386,
      "index": 1234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIpv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 addresses for scheduled EC2 instances. It provides functions to parse XML input into IPv6 address lists, convert them to query parameters or JSON format, and construct them from JSON data. It works directly with lists of `ScheduledInstancesIpv6Address.t` values, supporting serialization, deserialization, and query construction for AWS EC2 API interactions.",
      "description_length": 392,
      "index": 1235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIamInstanceProfileSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profile requests in EC2 launch templates, with optional ARN and name fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring IAM roles for EC2 instances at launch time, particularly when working with AWS SDK bindings in OCaml.",
      "description_length": 387,
      "index": 1236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateSubnetCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disassociating a subnet CIDR block, containing an optional IPv6 CIDR block association and a subnet ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling responses from AWS EC2 API calls that disassociate CIDR blocks from subnets.",
      "description_length": 380,
      "index": 1237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ContainerFormat",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing container formats supported by EC2, with operations to convert between string representations and type values. It provides functions for serialization to JSON and query parameters, as well as parsing from XML and JSON input. It is used when importing or exporting virtual machine images in EC2, particularly for handling OVA format containers.",
      "description_length": 401,
      "index": 1238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductDescriptionList",
      "library": "aws-ec2",
      "description": "This module handles lists of product descriptions in AWS EC2 operations. It provides functions to convert lists of strings to and from XML, JSON, and query parameters, enabling interaction with EC2 APIs using standard data formats. Use this module when working with EC2 product description lists in API requests or responses, such as listing available product descriptions or filtering instances by product description.",
      "description_length": 419,
      "index": 1239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateRouteTableResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of associating a route table with a subnet or gateway in EC2. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include processing API responses when managing route table associations in AWS infrastructure automation.",
      "description_length": 355,
      "index": 1240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for initiating a spot fleet in EC2, containing a dry-run flag and spot fleet request configuration data. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when programmatically creating spot fleet requests with specific configurations and dry-run checks.",
      "description_length": 357,
      "index": 1241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status details in EC2, including optional name and status fields. It provides functions to construct, parse, and convert these details to and from JSON and query formats. It is used to handle volume status information returned by EC2 API operations like `DescribeVolumeStatus`.",
      "description_length": 338,
      "index": 1242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying Spot Fleet instances, including parameters like `spot_fleet_request_id`, `max_results`, and `next_token`. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Use this module when interacting with AWS EC2 Spot Fleet APIs to list active instances within a specific fleet.",
      "description_length": 367,
      "index": 1243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Affinity",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Default` and `Host`, representing EC2 instance affinity settings. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when configuring EC2 instance placement to specify whether the instance should run on a dedicated host or use the default affinity.",
      "description_length": 422,
      "index": 1244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 architecture types, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with the `ArchitectureType.t` type, representing CPU architectures supported by EC2 instances. Use this module when interacting with AWS EC2 APIs that require or return lists of architecture types, such as describing instance types or filtering by architecture.",
      "description_length": 424,
      "index": 1245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointConnectionNotificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC endpoint connection notification in AWS EC2. It includes operations to construct, parse, and serialize the result, which contains an optional connection notification and client token. It is used to process responses from the AWS API when setting up notifications for VPC endpoint connections.",
      "description_length": 341,
      "index": 1246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrincipalIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying principal ID format settings in EC2, supporting operations to configure optional parameters like dry run, resource list, maximum results, and pagination token. It provides functions to construct, serialize, and parse these requests in different formats including JSON, query strings, and XML. It is used specifically when interacting with AWS EC2 to retrieve ID format information for resources such as VPCs or subnets.",
      "description_length": 472,
      "index": 1247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for DNS support, IPv6 support, and appliance mode support, representing configuration options for modifying a transit gateway VPC attachment. It provides functions to construct, parse, and convert these options to query parameters or JSON format, primarily used when updating VPC attachment settings in EC2. Concrete use cases include enabling or disabling DNS or IPv6 support, or switching appliance mode on a transit gateway attachment during runtime.",
      "description_length": 508,
      "index": 1248,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizationRuleSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and JSON conversion for a list of EC2 authorization rules. Works with `AuthorizationRule.t` lists, transforming them to and from XML, query parameters, and JSON formats. Used when managing VPC security group rules in AWS EC2 API interactions.",
      "description_length": 274,
      "index": 1249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing detailed status information for an EC2 instance, including the time it became impaired, the status name, and the status type. It provides functions to construct, parse, and serialize this data structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and processing instance health status details from AWS EC2 API responses.",
      "description_length": 406,
      "index": 1250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationRequestList",
      "library": "aws-ec2",
      "description": "This module handles a list of launch template tag specification requests for EC2. It provides operations to parse XML input into a list of tag specifications, convert the list to query parameters or JSON format, and construct an empty instance. It is used when configuring EC2 instance tags during launch template creation or modification.",
      "description_length": 339,
      "index": 1251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceConfigurationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of EC2 service configurations. It works with lists of service configuration records, converting them to and from XML, JSON, and query formats. It is used when managing EC2 service configurations through API requests and responses.",
      "description_length": 288,
      "index": 1252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorResponseList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of lists of elastic inference accelerator responses from AWS EC2 launch templates. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `LaunchTemplateElasticInferenceAcceleratorResponse.t` values. It is used when managing EC2 instance configurations that include elastic inference accelerators, enabling proper request and response handling with AWS services.",
      "description_length": 464,
      "index": 1253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachmentState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of an EC2 volume attachment, with variants like `Attached`, `Detaching`, and `Busy`. It provides conversions to and from strings, JSON, and XML, along with helper functions for query parameter serialization. It is used to interpret and manipulate volume attachment states in API responses and requests.",
      "description_length": 356,
      "index": 1254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing scheduled EC2 instances, providing access to a set of scheduled instances and an optional pagination token. It supports parsing from XML, conversion to JSON and query formats, and construction with optional fields. Concrete use cases include processing responses from EC2's `DescribeScheduledInstances` API call and integrating with AWS SDK workflows for managing scheduled instance data.",
      "description_length": 433,
      "index": 1255,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.State",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 resource, such as VPC peering connections or VPC endpoints. It provides bidirectional conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling state transitions or status checks for EC2 resources in API requests and responses.",
      "description_length": 443,
      "index": 1256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 Reserved Instances offerings, with fields for attributes like availability zone, duration, pricing, and tenancy. It provides functions to construct, parse, and convert offerings to and from JSON, query parameters, and XML. Use this module to manage and manipulate Reserved Instances offering data in EC2 operations, such as listing or purchasing offerings.",
      "description_length": 410,
      "index": 1257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway virtual interface group sets in AWS EC2. It provides functions to convert between XML, JSON, and query string representations of these group sets, specifically working with lists of `LocalGatewayVirtualInterfaceGroup.t`. Use this module when interacting with AWS EC2 APIs that require or return local gateway virtual interface group set data in different formats.",
      "description_length": 453,
      "index": 1258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance network interface specifications. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when configuring or retrieving network interfaces for EC2 instances in AWS requests and responses.",
      "description_length": 307,
      "index": 1259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for modifying a managed prefix list in EC2. It supports setting or updating prefix list attributes such as name, version, and entries to add or remove. The module works with string, boolean, and long types from AWS base types, and handles serialization to and from JSON and query formats. It is used when making API requests to update prefix list configurations in AWS.",
      "description_length": 418,
      "index": 1260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance event notification attributes. It works with XML, JSON, and query parameter formats to serialize and deserialize the `instance_tag_attribute` field, which contains tag-based event notification settings. It is used when retrieving or configuring event notifications for EC2 instances based on resource tags.",
      "description_length": 364,
      "index": 1261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MovingAddressStatusSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of EC2 moving address status data. Works with lists of `MovingAddressStatus.t` records, transforming them to and from XML, JSON, and query formats. Useful for processing API responses and preparing requests related to IP address movement tracking in EC2.",
      "description_length": 301,
      "index": 1262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 prefix list IDs, providing operations to convert between XML, JSON, and query string formats. It supports parsing prefix list IDs from XML nodes and serializing them into query parameters or JSON lists. Use this module when working with AWS EC2 operations that require passing multiple prefix list IDs in API requests or responses.",
      "description_length": 364,
      "index": 1263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateEgressOnlyInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an egress-only internet gateway in a specific VPC. It includes fields for the VPC ID, optional client token, dry run flag, and tag specifications, along with functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when configuring network access in AWS infrastructure code that requires precise control over outbound traffic from a VPC.",
      "description_length": 446,
      "index": 1264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListEntriesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving managed prefix list entries from EC2. It provides operations to construct, parse, and serialize results containing prefix list entries and an optional pagination token. Use this module when processing responses from EC2's `GetManagedPrefixListEntries` API to extract entry data and handle pagination.",
      "description_length": 345,
      "index": 1265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringAttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of a VPC peering attachment, with optional `code` and `message` fields indicating the current state and any associated details. It provides functions to construct, serialize, and convert the status from and to XML, JSON, and query parameters. This module is used when handling responses from EC2 API calls related to VPC peering connections, such as describing or accepting peering attachments.",
      "description_length": 459,
      "index": 1266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPair",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a user ID and security group pair with optional fields for description, group ID, group name, peering status, user ID, VPC ID, and VPC peering connection ID. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. It is used to manage security group membership and peering relationships in EC2 configurations.",
      "description_length": 419,
      "index": 1267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeOfferingsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance type offerings by providing operations to parse XML input into typed lists, convert the lists to query parameters or JSON representations, and construct empty instances. It works with lists of `InstanceTypeOffering.t` records, which represent metadata about available instance types in specific AWS regions. Concrete use cases include processing responses from the `DescribeInstanceTypeOfferings` API call and preparing instance type filters for subsequent AWS SDK operations.",
      "description_length": 518,
      "index": 1268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 addresses, primarily working with a list of address data structures. It provides functions to construct, parse, and convert address results to and from XML, JSON, and query formats. Use this module when retrieving and processing public IP address information from EC2 instances.",
      "description_length": 327,
      "index": 1269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeprovisionByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deprovisioning a BYOIP CIDR block in EC2, primarily providing construction, parsing, and serialization operations. It works with the `t` record type containing an optional `ByoipCidr.t` value. Use this module to process responses from EC2's deprovisioning API calls, particularly when managing custom IP ranges.",
      "description_length": 345,
      "index": 1270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayMulticastDomainAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving associations of a transit gateway multicast domain, including optional identifiers, filters, pagination controls, and dry run capability. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include querying multicast domain associations with specific filters or paginating through large result sets.",
      "description_length": 427,
      "index": 1271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway prefix list reference, including its route table, prefix list, and attachment details. It provides functions to construct, parse, and serialize the structure for use in API requests and responses. Concrete use cases include managing route propagation in AWS EC2 transit gateways and handling prefix list associations.",
      "description_length": 385,
      "index": 1272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling results from describing EC2 fleets, including a token for pagination and a set of fleet data. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. It is used to process and manage responses when retrieving information about EC2 fleet instances.",
      "description_length": 346,
      "index": 1273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfaceResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for creating a network interface, containing an optional `NetworkInterface` record. It includes functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. It is used to handle the response data from an EC2 network interface creation request.",
      "description_length": 314,
      "index": 1274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientCertificateRevocationListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting a client certificate revocation list for a Client VPN endpoint. It includes operations to create, parse, and serialize the result, which contains an optional certificate revocation list string and an optional status. Concrete use cases include retrieving and processing revocation list data from AWS EC2 Client VPN, and converting the result to and from JSON or query formats for further processing or transmission.",
      "description_length": 459,
      "index": 1275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCustomerGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a customer gateway in EC2, including the gateway ID and an optional dry-run flag. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. Use this when interacting with AWS EC2's API to manage customer gateways programmatically.",
      "description_length": 350,
      "index": 1276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetData",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 fleet configuration and state, including fields for capacity, lifecycle policies, timestamps, and instance management. It provides constructors, parsers, and serializers for working with fleet data in XML, JSON, and query formats. Concrete use cases include describing, creating, and managing EC2 fleets with specific launch templates, capacity targets, and termination policies.",
      "description_length": 433,
      "index": 1277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnaSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumeration with three values representing ENA support states and provides bidirectional conversions between these values and strings, JSON, and query parameters. It includes functions for parsing and serializing ENA support states from XML nodes, JSON, and string inputs. Use this module when handling EC2 instance ENA support configuration in API requests or responses.",
      "description_length": 394,
      "index": 1278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetPasswordDataRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for retrieving password data from an EC2 instance. It includes operations to create, parse, and serialize the request, supporting interaction with the EC2 API. The module works with XML, JSON, and query string formats for request transmission.",
      "description_length": 285,
      "index": 1279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a Traffic Mirror filter in AWS EC2, including the filter ID and an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. Use this module when interacting with EC2's Traffic Mirror deletion API to ensure correct request formatting and response handling.",
      "description_length": 403,
      "index": 1280,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of capacity reservation data as lists of `CapacityReservation.t` values. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 capacity reservation sets. Use this module when processing responses or building requests involving multiple capacity reservations in AWS EC2.",
      "description_length": 404,
      "index": 1281,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifier",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 security group identifiers, with optional fields for group name and group ID. It provides functions to construct, parse, and convert group identifiers to and from JSON and query formats. Concrete use cases include handling security group references in EC2 API requests and responses, such as launching instances or describing security groups.",
      "description_length": 400,
      "index": 1282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfaceGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 local gateway virtual interface groups, providing constructors, parsers, and serializers for the result structure. It works with XML, JSON, and query data formats to facilitate API interactions involving local gateway virtual interface group sets and pagination tokens. Concrete use cases include processing responses from the `DescribeLocalGatewayVirtualInterfaceGroups` API call and converting between different data representations for further processing or storage.",
      "description_length": 518,
      "index": 1283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateCustomerGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating a customer gateway in AWS EC2, including fields like BGP ASN, public IP, and gateway type. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. Concrete use cases include configuring and submitting customer gateway creation requests to AWS EC2 via the API.",
      "description_length": 376,
      "index": 1284,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 account attribute names, providing conversions to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing empty lists. Use this module when working with AWS EC2 account attributes in different serialization formats.",
      "description_length": 286,
      "index": 1285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceInterruptionBehavior",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible behaviors for spot instance interruptions in EC2, with values `Hibernate`, `Stop`, and `Terminate`. It provides bidirectional conversions between these values and strings, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to configure interruption handling for EC2 spot instances during API interactions.",
      "description_length": 431,
      "index": 1286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotCapacityRebalance",
      "library": "aws-ec2",
      "description": "This module defines a type `t` that represents spot capacity rebalance configuration with an optional replacement strategy. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. It is used when configuring EC2 spot fleet or auto scaling group rebalance behavior in AWS deployments.",
      "description_length": 333,
      "index": 1287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an EC2 image export task, with fields for metadata like the image ID, disk format, S3 export location, and task status. It provides constructors, JSON and XML parsers, and query builders to facilitate handling export task responses from the AWS API. Concrete use cases include tracking export progress, retrieving exported image locations in S3, and managing task metadata in automation workflows.",
      "description_length": 461,
      "index": 1288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and operations for creating an EC2 launch template request. It includes fields like `launch_template_name`, `launch_template_data`, and optional parameters such as `dry_run`, `client_token`, and `tag_specifications`. Functions allow constructing, parsing, and serializing the request to JSON or query format, specifically used when configuring EC2 instance launch settings.",
      "description_length": 407,
      "index": 1289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a Reserved Instances configuration in EC2. It includes operations to construct, parse, and serialize the result, supporting interactions with AWS APIs through query parameters or JSON. Concrete use cases include handling responses from EC2 when adjusting Reserved Instances, such as updating instance counts or instance types.",
      "description_length": 400,
      "index": 1290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyIdentityIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying identity ID formats in AWS EC2. It includes functions to construct, serialize, and parse the request, working with string and boolean types to specify the principal ARN, resource type, and whether to use long IDs. It is used when configuring ID format settings for EC2 resources via the AWS SDK.",
      "description_length": 349,
      "index": 1291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoipAddressUsage",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the usage details of a CoIP address in EC2, including allocation ID, AWS account ID, service, and the CoIP address itself. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include tracking and serializing CoIP address assignments for network management and auditing within AWS EC2.",
      "description_length": 412,
      "index": 1292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastGroupList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway multicast groups. It provides operations to convert between XML, JSON, and query string formats for these lists. Use this module when working with AWS EC2 transit gateway multicast group data in different serialization formats.",
      "description_length": 307,
      "index": 1293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of import task IDs in AWS EC2 operations. It provides functions to parse, convert to query format, and serialize to and from JSON. It works directly with lists of base string types, supporting operations like importing virtual machine images.",
      "description_length": 268,
      "index": 1294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing IAM instance profile associations in EC2. It operates on lists of `IamInstanceProfileAssociation.t` values, providing direct conversions to and from XML, JSON, and AWS query format. It is used when managing or inspecting EC2 instance IAM profile associations via API requests and responses.",
      "description_length": 345,
      "index": 1295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclEntryList",
      "library": "aws-ec2",
      "description": "This module represents a list of network ACL entries and provides functions to convert between XML, JSON, and query string formats. It supports parsing EC2 network ACL entry lists from XML nodes and converting them to AWS query or JSON representations. Concrete use cases include serializing and deserializing network ACL entry lists when interacting with the EC2 API, particularly during network configuration or security rule management operations.",
      "description_length": 450,
      "index": 1296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsOptimizedInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing EBS-optimized instance performance characteristics, including baseline and maximum bandwidth, throughput, and IOPS. It provides functions to construct, parse, and serialize these records to and from XML, query parameters, and JSON. Concrete use cases include configuring EC2 instance types with specific EBS performance requirements and reporting instance capabilities in AWS responses.",
      "description_length": 438,
      "index": 1297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of an instance import operation in EC2, primarily by encapsulating an optional conversion task. It provides functions to construct, parse, and serialize the result in various formats such as JSON, query parameters, and XML nodes. Use this module when managing instance imports to track or manipulate conversion tasks associated with the import process.",
      "description_length": 383,
      "index": 1298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Elastic GPU in AWS EC2, with fields for its ID, availability zone, type, health, state, associated instance ID, and tags. It provides functions to construct, parse, and convert Elastic GPU data to and from XML, JSON, and AWS query formats. Concrete use cases include managing GPU-accelerated EC2 instances and handling GPU resource metadata in cloud infrastructure tooling.",
      "description_length": 426,
      "index": 1299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserGroupStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing user groups in EC2 configurations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when working with EC2 API operations that require specifying user groups, such as security group rules or IAM role associations.",
      "description_length": 355,
      "index": 1300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceRecurrence",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying recurring schedules for EC2 instances, with fields like frequency, interval, and occurrence day set. It includes functions to construct, parse, and convert the structure to query parameters or JSON for API requests. Concrete use cases include configuring scheduled instance launches and managing recurring time-based resource allocations in AWS EC2.",
      "description_length": 401,
      "index": 1301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating an internet gateway in AWS EC2, containing an optional `InternetGateway` object. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from EC2 API calls that create internet gateways, particularly for processing or serializing the returned data.",
      "description_length": 413,
      "index": 1302,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of rejecting a transit gateway peering attachment, containing an optional transit gateway peering attachment object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML nodes. Use this module when handling responses from AWS EC2 API calls that reject peering attachments between transit gateways.",
      "description_length": 434,
      "index": 1303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserBucketDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding optional S3 bucket and key information, along with functions to construct, serialize, and convert instances of this structure. It works with AWS-specific string types and integrates with XML, JSON, and query parameter formats. It is used when handling user-provided S3 bucket details in EC2-related operations, such as importing or exporting instances.",
      "description_length": 401,
      "index": 1304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a managed prefix list, including a dry run flag and prefix list ID. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when interacting with EC2 to safely delete a prefix list by ID, optionally checking the operation without applying it.",
      "description_length": 353,
      "index": 1305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of an EC2 instance, including fields like availability zone, instance state, and system status. It provides functions to construct, parse, and serialize instance status data to and from XML, JSON, and query formats. Use this module when retrieving or reporting the health and state of EC2 instances in AWS management tools or monitoring systems.",
      "description_length": 406,
      "index": 1306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying credit specifications for EC2 instances, capturing both successful and unsuccessful updates. It works with structured sets of instance credit specification results, enabling precise tracking of API operation outcomes. Use this module to process and serialize responses when adjusting credit settings for burstable performance instances in EC2.",
      "description_length": 387,
      "index": 1307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ValidationWarning",
      "library": "aws-ec2",
      "description": "This module handles validation warnings by providing functions to create, parse, and convert warning data. It works with XML, JSON, and query parameter formats, specifically handling error sets within EC2 validation contexts. Use cases include processing API responses and preparing validation data for further handling.",
      "description_length": 320,
      "index": 1308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorNetworkService",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing network services that can be used with EC2 Traffic Mirroring, specifically supporting conversion to and from strings, JSON, XML, and query parameters. It works with string representations and structured data formats like JSON and XML for serialization and deserialization. Concrete use cases include configuring and parsing Traffic Mirror rules that reference services like DNS.",
      "description_length": 436,
      "index": 1309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayAttachmentPropagationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving transit gateway attachment propagations, including a list of propagations and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when working with EC2 transit gateway attachments to manage route propagation settings across VPCs or handle paginated API outputs.",
      "description_length": 416,
      "index": 1310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of GPU device information by providing operations to parse, convert, and manipulate these lists. It works with XML nodes, JSON values, and query parameters, enabling seamless data transformation between different formats. Use this module when processing EC2 instance GPU details from AWS responses or preparing GPU data for API requests.",
      "description_length": 363,
      "index": 1311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HypervisorType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two possible values, `Ovm` and `Xen`, representing hypervisor types in EC2. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization to JSON and query formats. It is used to handle hypervisor type values when interacting with EC2 APIs, such as parsing responses or constructing requests.",
      "description_length": 385,
      "index": 1312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCapacityReservationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 capacity reservations, supporting filtering by IDs, pagination via next token, and result limits. It includes functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include listing specific capacity reservations, paginating through large result sets, and applying filters to narrow down reservations by attributes like start or end time.",
      "description_length": 452,
      "index": 1313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Client VPN connection with fields for metadata like connection IDs, timestamps, IP addresses, and network statistics. It provides functions to construct, parse, and convert the structure to and from JSON, query parameters, and XML. It is used to manage and track individual Client VPN connections in AWS EC2, including their status and compliance information.",
      "description_length": 411,
      "index": 1314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of EC2 instance network interfaces. Works with XML nodes, JSON values, and AWS query parameters. Used to convert network interface data between different formats when interacting with AWS EC2 APIs.",
      "description_length": 246,
      "index": 1315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateInstancesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of terminating EC2 instances, containing a list of instance state changes. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when handling responses from the EC2 API after issuing a terminate instances request.",
      "description_length": 329,
      "index": 1316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnTargetNetworksRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing AWS EC2 Client VPN target networks, including fields for endpoint ID, association IDs, pagination, filters, and dry run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying the status of Client VPN target network associations and filtering results by custom criteria.",
      "description_length": 410,
      "index": 1317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestsResponse",
      "library": "aws-ec2",
      "description": "Handles responses from EC2 Spot Fleet request descriptions, providing functions to construct, serialize, and parse results containing optional pagination tokens and sets of spot fleet configurations. Works with XML, JSON, and AWS query formats for integration with AWS SDK workflows. Used to retrieve and process status and configuration details of spot fleet requests in EC2.",
      "description_length": 376,
      "index": 1318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupMembersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering multicast group members in a transit gateway, including optional identifiers for the multicast domain, group IP address, and dry run flag. It provides functions to construct, serialize, and parse these requests, primarily working with string, boolean, and network interface ID list types. It is used when configuring multicast traffic forwarding in AWS EC2 transit gateways.",
      "description_length": 430,
      "index": 1319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateIamInstanceProfileResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating an IAM instance profile with an EC2 instance. It provides functions to construct, parse, and convert the result to and from JSON and query formats. The primary data type is a record containing an optional IAM instance profile association.",
      "description_length": 284,
      "index": 1320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPC peering connection IDs, represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this when managing VPC peering connections in AWS EC2, particularly when working with APIs that require serializing or deserializing connection ID lists.",
      "description_length": 358,
      "index": 1321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 2 IPsec settings. It provides functions to construct, serialize, and deserialize this structure, specifically handling string-based algorithm identifiers. It is used when configuring or querying VPN connection options that require specifying encryption algorithms.",
      "description_length": 370,
      "index": 1322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of deleting EC2 fleets, containing sets of successful and unsuccessful deletions. It provides constructors, parsing, and serialization functions to handle deletion outcomes in API responses. Use it to interpret the result of batch fleet deletion operations, distinguishing between successfully deleted fleets and those that failed with specific errors.",
      "description_length": 386,
      "index": 1323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating a transit gateway with a multicast domain. It includes a single optional field for the resulting domain associations. It is used to parse and serialize the response from the EC2 API when managing multicast domain associations for transit gateways.",
      "description_length": 293,
      "index": 1324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering an EC2 image, containing the image ID and an optional dry-run flag. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Use this when building API calls to deregister AMIs, particularly in automation or cleanup workflows.",
      "description_length": 365,
      "index": 1325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResourceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing various AWS EC2 resource types, such as Instance, Volume, Vpc, and Security_group. It includes functions to convert between string representations and the enumerated type, along with serialization and deserialization routines for JSON, XML, and query parameters. This module is used when interacting with EC2 APIs that require specifying resource types in different formats, such as tagging operations or describing resources.",
      "description_length": 478,
      "index": 1326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInstanceExportTaskResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for an EC2 instance export task, containing an optional export task descriptor. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2 instance export operations, particularly to extract and process export task metadata.",
      "description_length": 378,
      "index": 1327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 address requests for EC2 instances. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when configuring or modifying IPv6 addresses in EC2 instance operations.",
      "description_length": 276,
      "index": 1328,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying an availability zone group, specifically containing an optional boolean indicating the success of the operation. It provides functions to construct, parse, and serialize the result to various formats including JSON, query parameters, and XML nodes. Use this module when handling responses from EC2 API calls that modify availability zone group settings, such as enabling or disabling partition placement.",
      "description_length": 478,
      "index": 1329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelledSpotInstanceRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of cancelled EC2 spot instance requests. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction of empty lists. It is used when managing responses and requests involving multiple cancelled spot instance entries in EC2 APIs.",
      "description_length": 288,
      "index": 1330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a target configuration request with an instance count and reserved instance offering ID. It provides functions to construct, parse, and serialize the configuration for use in API requests. The module works with XML, JSON, and query string formats to support AWS EC2 API interactions.",
      "description_length": 303,
      "index": 1331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleOutputResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 console output retrieval, including instance ID, output text, and timestamp. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when retrieving and processing console output from EC2 instances in AWS.",
      "description_length": 347,
      "index": 1332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 capacity reservation groups, with fields for the group ARN and owner ID. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Use this module when managing capacity reservations in EC2 to associate groups with specific reservations or retrieve ownership information.",
      "description_length": 387,
      "index": 1333,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointConnectionNotificationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a VPC endpoint connection notification, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling AWS EC2 API calls to update VPC endpoint connection notifications and processing the returned status.",
      "description_length": 409,
      "index": 1334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of Phase 1 DH group numbers used in EC2 VPN connection requests. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of `Phase1DHGroupNumbersRequestListValue.t`. It is used when configuring or modifying EC2 VPN connections that require specifying Diffie-Hellman groups for IPsec negotiations.",
      "description_length": 442,
      "index": 1335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVgwRoutePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling route propagation from a virtual private gateway to a route table. It includes operations to construct, parse, and serialize the request data, supporting both XML and JSON formats. The module is used when managing route propagation in EC2 Virtual Private Cloud (VPC) configurations.",
      "description_length": 336,
      "index": 1336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror filter IDs in AWS EC2. It provides operations to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with traffic mirror filters in API requests or responses.",
      "description_length": 272,
      "index": 1337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the placement response in EC2, primarily holding an optional group name. It includes functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Use this module when handling EC2 instance placement responses, particularly for interacting with AWS APIs that return placement group information.",
      "description_length": 384,
      "index": 1338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModification",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state and parameters of an EC2 volume modification. It includes functions to create, parse, and convert volume modification records to and from XML, JSON, and query formats. It is used to track changes to EBS volume properties like size, IOPS, and volume type during modification operations.",
      "description_length": 345,
      "index": 1339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a transit gateway route table. It provides constructors, JSON serialization/deserialization, and query conversion for a structure containing an optional transit gateway association. It is used when managing AWS EC2 transit gateway route tables, specifically to process and manipulate the output of disassociation operations.",
      "description_length": 373,
      "index": 1340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for memory information with an optional size in MiB. It provides functions to create, parse, and convert memory info to and from JSON and query formats. It is used to handle memory-related data in EC2 instance configurations and responses.",
      "description_length": 276,
      "index": 1341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeBundleTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 bundle tasks, primarily working with the `t` record type that contains a list of bundle tasks. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when retrieving and processing information about instance bundling tasks in AWS EC2.",
      "description_length": 368,
      "index": 1342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEnclaveOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing enclave options for an EC2 launch template, with an optional boolean field indicating whether enclaves are enabled. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. This module is used when configuring enclave support for EC2 instances at launch time.",
      "description_length": 374,
      "index": 1343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnassignPrivateIpAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for unassigning private IP addresses from an EC2 network interface. It includes operations to create, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with string lists of private IP addresses and network interface identifiers, used when managing IP address assignments in AWS EC2.",
      "description_length": 374,
      "index": 1344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for reserved EC2 instances, with fields for availability zone, instance count, instance type, platform, and scope. It provides constructors, JSON and XML parsers, and query parameter conversion for handling reserved instance configurations in API requests. Concrete use cases include creating and serializing reserved instance settings for AWS EC2 API operations like purchasing or modifying reservations.",
      "description_length": 451,
      "index": 1345,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HostOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure for EC2 host offerings with fields like currency code, duration, and pricing. It provides functions to construct, parse, and convert offering data to and from XML, JSON, and query formats. It is used to manage and process EC2 host offering information in API requests and responses.",
      "description_length": 319,
      "index": 1346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAccountAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing account attributes in EC2, primarily parsing and serializing the `account_attributes` field. It works with XML, JSON, and query parameter representations of account attribute data. Use this module when interacting with the EC2 API to retrieve and process account-level metadata such as supported platforms or region information.",
      "description_length": 373,
      "index": 1347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 capacity reservations, including fields like reservation ID, instance count, end date, and dry run flag. It provides functions to construct, parse, and serialize these requests in various formats such as JSON and query strings. Concrete use cases include updating the number of instances in a reservation or changing its end date configuration.",
      "description_length": 399,
      "index": 1348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying market options when launching EC2 instances, including optional spot instance configurations. It provides functions to construct, serialize, and parse these options for use in API requests. Use this module when configuring instance purchasing options in AWS EC2 launch templates or instance requests.",
      "description_length": 352,
      "index": 1349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupReferencesRequest",
      "library": "aws-ec2",
      "description": "This module constructs and manipulates requests to describe security group references in EC2. It handles serialization to query parameters and JSON, and parsing from XML and JSON. It works directly with security group IDs and optional dry-run flags, used when querying AWS for security group dependencies.",
      "description_length": 305,
      "index": 1350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesPrivateIpAddressConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring private IP addresses in scheduled EC2 instances, with optional boolean and string fields. It provides functions to construct, parse, and serialize these configurations to and from XML, JSON, and query formats. Use this module when setting up or modifying scheduled instances with custom private IP settings in AWS EC2.",
      "description_length": 371,
      "index": 1351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing an EC2 volume attribute, including the attribute name, volume ID, and optional dry-run flag. It provides functions to construct, parse, and serialize the request to query or JSON formats, as well as conversion from JSON. It is used when querying AWS EC2 for specific volume attributes like auto-enable IO or product codes.",
      "description_length": 377,
      "index": 1352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 instance status, supporting filtering by instance IDs, result limits, pagination, and dry-run options. It provides functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include building API requests to retrieve instance status with specific filters or pagination tokens.",
      "description_length": 388,
      "index": 1353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for replacing a route in a transit gateway route table. It includes fields for specifying the destination CIDR block, route table ID, optional attachment ID, blackhole flag, and dry-run mode. The module provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations.",
      "description_length": 345,
      "index": 1354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleField",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing fields of a Traffic Mirror filter rule, such as `Destination_port_range` and `Protocol`. It provides bidirectional conversions between these field values and strings, JSON, and query parameters. These operations support serialization, deserialization, and parsing for use in API requests and responses involving Traffic Mirror configurations.",
      "description_length": 394,
      "index": 1355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorCode",
      "library": "aws-ec2",
      "description": "This module defines a set of error codes related to fleet deletion operations in EC2, including malformed IDs, non-existent fleets, and invalid states. It provides bidirectional conversions between error code variants and strings, JSON, and XML representations. These functions are used to handle and propagate specific error conditions during fleet deletion in AWS EC2 APIs.",
      "description_length": 375,
      "index": 1356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DnsEntrySet",
      "library": "aws-ec2",
      "description": "Handles DNS entry sets in XML, query, and JSON formats. Converts between DNS entry lists and structured data representations for API interactions. Useful for processing EC2 DNS configuration responses and requests.",
      "description_length": 214,
      "index": 1357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing CIDR blocks and their descriptions in prefix lists. It provides functions to construct, parse, and convert entries to query parameters or JSON format. Use this module when managing EC2 prefix lists, such as when creating or updating network access rules with associated CIDR ranges and metadata.",
      "description_length": 349,
      "index": 1358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OfferingClassType",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type with values `Standard` and `Convertible`, representing EC2 offering classes. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support handling EC2 reserved instance offerings in API requests and responses.",
      "description_length": 361,
      "index": 1359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductCode",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing product codes in EC2, with optional fields for product code ID and type. It provides functions to construct, parse, and convert product code data to and from JSON and query formats. Concrete use cases include handling product code information when managing EC2 instances or marketplace images.",
      "description_length": 343,
      "index": 1360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MarketType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` with the constructor `Spot`, representing EC2 market types. It includes functions to convert between strings and the enumerated type, such as `of_string`, `to_string`, and bidirectional list mappings. Additional functions support serialization to JSON and query formats, and parsing from XML and JSON, enabling integration with AWS APIs.",
      "description_length": 375,
      "index": 1361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for initiating a new VPN connection by specifying required identifiers and optional parameters. It supports operations to serialize and deserialize the request to and from JSON, query parameters, and XML. It is used to construct and process AWS EC2 API requests for creating VPN connections with attributes like customer gateway, connection type, and tagging.",
      "description_length": 397,
      "index": 1362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines an enumeration with two values, `LowestPrice` and `Prioritized`, representing strategies for allocating on-demand instances. It provides bidirectional conversion between these values and strings, along with serialization to and from JSON, query parameters, and XML. These operations support configuration and communication with AWS EC2 APIs that require specifying on-demand allocation strategies.",
      "description_length": 417,
      "index": 1363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermissionModifications",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing modifications to volume creation permissions in EC2, specifically supporting adding and removing permissions through lists. It provides functions to construct, parse, and convert these modifications into query or JSON formats for API requests. Use cases include updating volume permissions when creating or modifying EC2 volumes, particularly for sharing volumes across accounts or regions.",
      "description_length": 440,
      "index": 1364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying traffic mirror filter rules, including fields like rule action, port ranges, CIDR blocks, and protocol. It provides functions to construct, parse, and serialize these requests to interact with AWS EC2 APIs. Use cases include updating traffic filtering rules for network monitoring and security analysis in cloud environments.",
      "description_length": 376,
      "index": 1365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpotMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot market options in EC2 launch templates, with fields like maximum price, spot instance type, block duration, and interruption behavior. It provides functions to construct, serialize, and deserialize these options for use in API requests. Concrete use cases include setting up cost-controlled EC2 instances with specific spot market parameters.",
      "description_length": 400,
      "index": 1366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of block device mappings in EC2 launch templates. It works with lists of `LaunchTemplateBlockDeviceMapping.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving block device settings for EC2 instances launched from templates.",
      "description_length": 361,
      "index": 1367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a managed prefix list in EC2. It provides functions to construct, parse, and serialize the result, which includes an optional managed prefix list. Use cases include processing API responses when creating prefix lists and converting between XML, JSON, and query formats for communication with AWS services.",
      "description_length": 348,
      "index": 1368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachNetworkInterfaceResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of attaching a network interface in EC2, containing optional attachment ID and network card index. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Use this module when managing network interface attachments and needing to process or return attachment metadata in EC2 operations.",
      "description_length": 397,
      "index": 1369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of security group IDs in EC2 operations, providing serialization to query parameters and JSON, and parsing from XML. Works with string lists representing security group identifiers. Used when configuring EC2 instances or modifying network interfaces that reference multiple security groups.",
      "description_length": 304,
      "index": 1370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing different principal types in AWS EC2, such as Account, Role, User, and Service. It provides bidirectional conversions between strings and the sum type, along with serialization to and from JSON, query parameters, and XML. Use this module when handling AWS EC2 principal type values in configuration, API requests, or policy documents.",
      "description_length": 378,
      "index": 1371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedTargetNetwork",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an associated target network with optional network ID and type. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML formats. It is used when managing network associations in EC2 operations, such as describing or modifying network interfaces.",
      "description_length": 343,
      "index": 1372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances modifications, providing functions to parse XML input into modification records, convert them to query parameters or JSON format, and reconstruct them from JSON. It works specifically with lists of `ReservedInstancesModification.t` structures, which represent changes to reserved instance configurations. Use this module when managing or transforming reserved instance modification requests or responses in EC2 APIs.",
      "description_length": 468,
      "index": 1373,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a transit gateway multicast domain, including fields like multicast domain ID, transit gateway attachment ID, subnet IDs, and a dry run flag. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Concrete use cases include preparing API requests to manage transit gateway multicast associations and handling their query or JSON representations for submission or testing.",
      "description_length": 477,
      "index": 1374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 host reservations, supporting filtering by attributes, specifying reservation IDs, and controlling result pagination. It includes functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include listing host reservations with custom filters, paginating through large result sets, and integrating with AWS API calls.",
      "description_length": 428,
      "index": 1375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInternetGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing internet gateways in EC2, providing constructors, serialization, and parsing functions. It works with internet gateway lists and optional next tokens for pagination. Use it to process responses from EC2 when listing internet gateways, enabling JSON and XML conversions for API interactions.",
      "description_length": 335,
      "index": 1376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ApplySecurityGroupsToClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module handles the result of applying security groups to a Client VPN target network, primarily working with a set of security group IDs. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Concrete use cases include managing AWS Client VPN configurations and retrieving applied security group IDs after an update operation.",
      "description_length": 402,
      "index": 1377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetInstancesSet",
      "library": "aws-ec2",
      "description": "This module handles the creation and manipulation of EC2 fleet instance configurations. It provides functions to convert instance lists to and from XML, JSON, and query formats, specifically for use in AWS EC2 fleet requests. It operates on a list of `CreateFleetInstance.t` records, enabling structured input and output handling during fleet setup or modification operations.",
      "description_length": 376,
      "index": 1378,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.TagList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tags, providing operations to convert tag lists to and from JSON and query formats, and to parse them from XML. It works with EC2 tag data structures, specifically lists of key-value tag objects. Use this module when managing metadata for EC2 resources, such as attaching or retrieving tags for instances or volumes.",
      "description_length": 349,
      "index": 1379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewaySet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of carrier gateway data as lists of carrier gateway objects. It provides functions to convert between XML, JSON, and query string formats, and to extract carrier gateway information from JSON input. It is used when working with AWS EC2 API responses that include carrier gateway details.",
      "description_length": 360,
      "index": 1380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifySpotFleetRequestRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 Spot Fleet request, including fields for termination policy, launch templates, fleet ID, and capacity targets. It provides functions to construct, parse, and serialize the structure for use in API requests. Concrete use cases include updating the target capacity of a Spot Fleet or changing its termination policy during fleet management operations.",
      "description_length": 407,
      "index": 1381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for starting EC2 instances, including instance IDs, optional additional info, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include initiating instance start operations and preparing requests for API submission.",
      "description_length": 341,
      "index": 1382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkCardInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of network card information, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with EC2 network card data. Use this module when retrieving or configuring instance network interfaces through AWS SDK operations.",
      "description_length": 375,
      "index": 1383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 instance launch templates, including fields for storage, networking, instance type, and security settings. It provides functions to construct, serialize, and parse these configurations, supporting operations like setting block device mappings, network interfaces, and instance market options. Use cases include programmatically creating and modifying EC2 launch templates with precise control over instance initialization and resource allocation.",
      "description_length": 503,
      "index": 1384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorSessionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror sessions, including the session set and pagination token. It provides constructors, parsing, and serialization functions for working with `DescribeTrafficMirrorSessionsResult` data. Use it when retrieving and processing traffic mirror session information from AWS EC2.",
      "description_length": 332,
      "index": 1385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayPeeringAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 transit gateway peering attachments, including fields for filtering by attachment IDs, applying filters, and controlling result pagination. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying AWS EC2 for peering attachment details with specific constraints and processing the results in a structured format.",
      "description_length": 469,
      "index": 1386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and operations for creating an EC2 snapshot request. It includes fields for specifying a volume ID, optional description, tag specifications, and dry run flag, along with functions to construct, parse, and serialize the request for use with AWS API calls. It is used to configure and manage snapshot creation parameters when interacting with Amazon EC2.",
      "description_length": 387,
      "index": 1387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CopyTagsFromSource",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with the constructor `Volume`, representing the source of tags to be copied in EC2 operations. It provides functions to convert between string representations and the `t` type, along with serialization and deserialization functions for query parameters, JSON, and XML. It is used specifically when configuring EC2 instances to copy tags from a source like a volume during API requests.",
      "description_length": 434,
      "index": 1388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 conversion tasks, including optional task IDs and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying specific conversion tasks or checking task status without making changes.",
      "description_length": 331,
      "index": 1389,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying reserved instances in EC2, containing an optional modification ID. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from the EC2 API when modifying reserved instance configurations.",
      "description_length": 367,
      "index": 1390,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BatchState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a batch operation, including values like `Submitted`, `Active`, `Cancelled`, and `Failed`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These capabilities support integration with AWS EC2 APIs that require state handling and data exchange in various formats.",
      "description_length": 437,
      "index": 1391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayMulticastGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching EC2 transit gateway multicast groups, supporting filtering, pagination, and dry-run options. It works with string, integer, boolean, and filter list types to configure API requests. Concrete use cases include querying multicast group information for a specific transit gateway domain, applying filters like group IP addresses, and handling paginated results.",
      "description_length": 412,
      "index": 1392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating EC2 snapshots, including optional description, instance specification, tag specifications, dry run flag, and tag copying behavior. It provides functions to construct, parse, and serialize snapshot requests in various formats such as JSON and query parameters. Use this module when initiating snapshot operations for EC2 instances, especially when managing tags or simulating requests without execution.",
      "description_length": 457,
      "index": 1393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying FPGA image attributes, including fields for dry-run validation, FPGA image ID, and attribute name. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Concrete use cases include retrieving metadata or permissions associated with FPGA images in EC2.",
      "description_length": 346,
      "index": 1394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying license configurations when importing images in EC2. It includes operations to create, serialize, and parse license configuration requests, primarily working with XML, JSON, and query string formats. It is used to associate license configurations with image import operations using ARNs.",
      "description_length": 339,
      "index": 1395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a client VPN connection, including `Active`, `Failed_to_terminate`, `Terminating`, and `Terminated`. It provides bidirectional conversion between the type and strings, JSON serialization/deserialization, and XML parsing for handling API responses. Use this module when interacting with AWS EC2 client VPN connections to interpret or set connection status values in requests and responses.",
      "description_length": 460,
      "index": 1396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesNetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network interface configuration for scheduled EC2 instances, including fields like IP addressing, security groups, and device indexing. It provides functions to construct, parse, and serialize these configurations to support interactions with EC2 APIs. Use cases include setting up network interfaces when provisioning scheduled instances or processing network configuration responses from AWS.",
      "description_length": 446,
      "index": 1397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of deleting EC2 launch template versions, containing sets of successfully and unsuccessfully deleted versions. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when interacting with AWS EC2 APIs to manage launch template version deletions and track their outcomes.",
      "description_length": 411,
      "index": 1398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN connection records. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization/deserialization. It is used when managing AWS EC2 virtual private network configurations, particularly for listing and transmitting connection details.",
      "description_length": 299,
      "index": 1399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing AWS EC2 transit gateway attachments programmatically, particularly during acceptance operations.",
      "description_length": 366,
      "index": 1400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SelfServicePortal",
      "library": "aws-ec2",
      "description": "This module defines a simple enumeration type with two states, `Enabled` and `Disabled`, representing the self-service portal status for EC2 instances. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON and query parameters. This module is used when configuring or retrieving EC2 instance settings that involve self-service portal access control.",
      "description_length": 415,
      "index": 1401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying VPC endpoint configurations, supporting operations to update policies, route tables, subnets, security groups, and DNS settings. It works with optional boolean flags, string identifiers, and lists of resource IDs. Concrete use cases include programmatically adjusting VPC endpoint access controls and network interfaces in AWS EC2 environments.",
      "description_length": 395,
      "index": 1402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for detaching an EBS volume from an EC2 instance, including fields like volume ID, instance ID, and force flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when programmatically managing volume detachment in EC2 environments.",
      "description_length": 331,
      "index": 1403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelReservedInstancesListingResult",
      "library": "aws-ec2",
      "description": "This module handles the result of canceling reserved EC2 instance listings. It provides functions to create, parse, and serialize the result, which includes a list of canceled reserved instance listings. It works directly with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 293,
      "index": 1404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 bundle tasks, consisting of an optional error code and message. It provides functions to construct, parse, and convert error data to and from XML, JSON, and query formats. Concrete use cases include error reporting in EC2 instance management workflows and handling failed bundle task responses from AWS.",
      "description_length": 375,
      "index": 1405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPair",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 key pairs, including their metadata such as fingerprint, material, name, optional ID, and associated tags. It provides functions to construct, serialize, and convert key pairs to and from JSON and query formats. It is used when managing SSH access to EC2 instances, such as creating or importing key pairs and handling API responses.",
      "description_length": 391,
      "index": 1406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlatformValues",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing platform values, specifically `Windows`, along with functions to convert between string representations and the enumerated type. It provides bidirectional mapping through `str_to_t` and `t_to_str`, and supports serialization and deserialization via `to_string`, `of_string`, `to_json`, `of_json`, `to_query`, and `parse`. Concrete use cases include handling platform-specific metadata in EC2 instance configurations and translating between API wire formats and internal types.",
      "description_length": 534,
      "index": 1407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusEventsList",
      "library": "aws-ec2",
      "description": "This module represents a list of volume status events in AWS EC2, providing functions to parse XML input into event lists, convert event lists to query parameters or JSON format, and construct event lists from JSON. It works with `VolumeStatusEvent.t` records, organizing them into standard OCaml lists. It is used when handling volume health monitoring responses, particularly for serializing and deserializing event data during API interactions.",
      "description_length": 447,
      "index": 1408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationOptions",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` that represents capacity reservation options for EC2, specifically supporting the configuration of a usage strategy. It provides functions to construct instances, convert to and from JSON, and serialize to query parameters. It is used when configuring EC2 instance fleets to control how reserved capacity is utilized.",
      "description_length": 360,
      "index": 1409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecifications",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 Elastic GPU specifications. Works with lists of ElasticGpuSpecification.t records, converting between XML, JSON, and query parameter formats. Used when configuring or retrieving GPU settings for EC2 instances.",
      "description_length": 258,
      "index": 1410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a network interface permission, including its current state and an optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 network interface permissions and handling API responses with permission state details.",
      "description_length": 393,
      "index": 1411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseConfigurationResponse",
      "library": "aws-ec2",
      "description": "This module handles the response data for an image import license configuration in AWS EC2. It includes a license configuration ARN field, along with functions to construct, parse, and serialize the response to query parameters or JSON format. It is used when importing images with specific licensing information, enabling tracking and management of license configurations through ARNs.",
      "description_length": 386,
      "index": 1412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying DNS support status of VPCs linked to a ClassicLink, including optional pagination and VPC identifiers. It provides functions to construct, serialize, and parse the request in various formats such as JSON and query strings. It is used when interacting with AWS EC2 ClassicLink DNS support APIs to retrieve configuration details for specific VPCs.",
      "description_length": 398,
      "index": 1413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering instance event notification attributes in EC2. It works with XML, JSON, and query parameter formats to serialize and deserialize a single optional instance tag notification attribute. Use this module when configuring or retrieving event notifications for EC2 instances based on tags.",
      "description_length": 329,
      "index": 1414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 images, providing functions to convert them to and from XML, JSON, and query parameters. It includes parsing from XML nodes, JSON serialization and deserialization, and building query strings for API requests. Concrete use cases include processing responses from EC2's DescribeImages API and preparing image data for subsequent AWS requests.",
      "description_length": 374,
      "index": 1415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConversionTaskState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of an EC2 conversion task, with values like `Active`, `Cancelling`, `Cancelled`, and `Completed`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used to interpret and format conversion task states when interacting with AWS EC2 APIs or processing task status updates.",
      "description_length": 442,
      "index": 1416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 2 Diffie-Hellman group numbers used in EC2 VPN connections. It operates on a list of `Phase2DHGroupNumbersListValue.t` values, converting between XML, JSON, and query string formats. It is used when configuring or retrieving VPN tunnel options in AWS EC2.",
      "description_length": 342,
      "index": 1417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network interface private IP addresses. It provides parsing from XML nodes, conversion to query parameters, and serialization to and from JSON. Use this module when working with AWS EC2 API requests and responses that involve private IP address lists.",
      "description_length": 284,
      "index": 1418,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for deleting an internet gateway in AWS EC2. It works with the `t` record type containing an optional dry-run flag and a required internet gateway ID string. It supports operations like query parameter conversion, JSON serialization, and XML parsing, specifically for handling deletion requests in EC2 networking workflows.",
      "description_length": 393,
      "index": 1419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMatchCriteria",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Open` and `Targeted`, representing instance match criteria in EC2. It provides functions to convert between strings and this type, along with serialization to and from JSON and query parameters. It is used to specify whether instance matching should be open or targeted in EC2 requests.",
      "description_length": 337,
      "index": 1420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Internet Gateway resources. It provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON input. Use this module when managing Internet Gateway associations in EC2, such as listing or configuring gateways for VPC routing.",
      "description_length": 301,
      "index": 1421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing route table propagation details in a transit gateway, including attachment ID, resource ID, resource type, and propagation state. It provides functions to construct, parse, and serialize these records for use in API requests and responses. Concrete use cases include managing route propagation configurations in AWS EC2 transit gateways via the AWS SDK for OCaml.",
      "description_length": 417,
      "index": 1422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListId",
      "library": "aws-ec2",
      "description": "This module defines a data structure with optional `description` and `prefix_list_id` fields, both as string values. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when handling EC2 prefix list identifiers in API requests or responses, particularly for tagging or filtering operations.",
      "description_length": 367,
      "index": 1423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceIamInstanceProfileAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for replacing an IAM instance profile association in EC2. It includes operations to construct, parse, and serialize the request, working with IAM instance profile specifications and string association IDs. It is used when updating the IAM role associated with a running EC2 instance.",
      "description_length": 320,
      "index": 1424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of provisioning a Bring Your Own IP (BYOIP) CIDR block in EC2. It provides constructors, JSON and XML parsers, and query builders for working with the optional `ByoipCidr` response data. It is used when managing custom IP ranges for EC2 instances, particularly in workflows involving CIDR allocation and tracking.",
      "description_length": 344,
      "index": 1425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 snapshot attributes, including create volume permissions, product codes, and snapshot ID. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Use this module when retrieving or modifying snapshot permissions or metadata in AWS EC2 workflows.",
      "description_length": 344,
      "index": 1426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of public IPv4 pool IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this when working with AWS EC2 APIs that require or return public IPv4 pool ID lists.",
      "description_length": 260,
      "index": 1427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayVpcAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 transit gateway VPC attachments, including fields for filtering, pagination, and dry-run configuration. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query parameters. It is used when querying AWS EC2 for details about transit gateway VPC attachments, allowing precise control over the data retrieved.",
      "description_length": 418,
      "index": 1428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for handling the output of deleting a transit gateway VPC attachment. It includes functions to construct, parse, and serialize the result, which contains an optional transit gateway VPC attachment record. It is used when interacting with AWS EC2 to confirm deletion and retrieve the resulting attachment state.",
      "description_length": 344,
      "index": 1429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseHostIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based host IDs in AWS EC2 responses. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. It is used when managing host reservations or querying host pools in EC2.",
      "description_length": 256,
      "index": 1430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 route table, with fields for associations, routes, tags, and metadata like VPC ID and owner ID. It provides functions to construct, parse, and serialize route tables to JSON, query format, or XML. Concrete use cases include managing route table configurations in AWS EC2, such as creating custom route tables or inspecting existing ones during network diagnostics.",
      "description_length": 421,
      "index": 1431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of canceling a capacity reservation in EC2, containing an optional boolean indicating success. It includes functions to construct, parse, and convert the result to and from JSON and query formats. This module is used to handle API responses when programmatically managing EC2 capacity reservations.",
      "description_length": 361,
      "index": 1432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template tag specifications. It works with lists of `LaunchTemplateTagSpecification.t` records, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving tags for EC2 instances launched from a template.",
      "description_length": 337,
      "index": 1433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeBundleTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 bundle tasks, including optional bundle IDs, filters, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include querying the status of instance bundling tasks and applying filters to narrow down results.",
      "description_length": 357,
      "index": 1434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a set of image attribute names used in EC2 operations, such as Description, Kernel, and BlockDeviceMapping. It provides bidirectional conversions between these attributes and strings, JSON, and query parameters, along with parsing from XML. These functions are used when modifying or retrieving specific attributes of EC2 images through AWS API calls.",
      "description_length": 371,
      "index": 1435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateVersionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a launch template version, including an optional launch template version and a validation warning. It provides functions to construct, parse, and serialize the result for use in API responses and XML/JSON transformations. Concrete use cases include handling AWS EC2 API responses when creating or updating launch templates, and processing validation warnings during template version creation.",
      "description_length": 465,
      "index": 1436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateSubnetCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for associating an IPv6 CIDR block with a subnet in EC2. It includes functions to construct, parse, and convert the structure to and from query parameters and JSON. Use this when configuring subnet CIDR blocks in AWS EC2 using the OCaml SDK.",
      "description_length": 278,
      "index": 1437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVpnGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of attaching a virtual private gateway to a VPC. It includes functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used to handle the response from the EC2 API after a successful attachment operation.",
      "description_length": 323,
      "index": 1438,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeElasticGpusRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying elastic GPU information, supporting operations to filter, limit, and paginate results. It works with identifiers, boolean flags, filters, and pagination tokens to construct API requests. Concrete use cases include listing elastic GPUs with specific criteria, checking configurations without execution, and handling paginated responses from the EC2 service.",
      "description_length": 409,
      "index": 1439,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageFormat",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing disk image formats (VMDK, RAW, VHD) and provides bidirectional conversions between these types and strings, JSON, and XML. It includes functions for parsing and serializing disk image format values, making it suitable for use in API requests and responses involving virtual machine images. The module supports operations like string representation, format validation, and integration with AWS query and JSON formats.",
      "description_length": 460,
      "index": 1440,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 integrity algorithm requests, containing an optional string value. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. It is used when configuring or retrieving IPsec VPN tunnel options in EC2, specifically for specifying allowed integrity algorithms during Phase 1 negotiation.",
      "description_length": 434,
      "index": 1441,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeEgressOnlyInternetGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing egress-only internet gateways in EC2. It includes fields for filtering by gateway IDs, setting result limits, and handling pagination, alongside functions to construct, parse, and serialize the request for API calls. It is used to query specific egress-only internet gateway configurations with optional filters and pagination controls.",
      "description_length": 393,
      "index": 1442,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 network interface, containing an optional dry-run flag and a required network interface ID. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when preparing or processing deletion requests for network interfaces in AWS EC2, particularly when integrating with the AWS SDK's query or JSON protocols.",
      "description_length": 414,
      "index": 1443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstancePlacementResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 instance's placement by providing a data structure with an optional boolean indicating success. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when working with EC2 instance placement changes in AWS API integrations.",
      "description_length": 344,
      "index": 1444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyDefaultCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying default credit specifications for EC2 instance families. It provides functions to create, parse, and serialize the result, which includes an optional instance family credit specification. It is used when updating default credit settings for T-series instances in EC2.",
      "description_length": 311,
      "index": 1445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting attributes of an FPGA image in AWS EC2. It includes functions to construct, parse, and serialize the request to query parameters or JSON, supporting operations like specifying the FPGA image ID and optional attributes. It is used when interacting with EC2 APIs to reset permissions or other FPGA image settings.",
      "description_length": 365,
      "index": 1446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing CPU architectures supported by EC2 instances, including 32-bit x86, 64-bit x86, and 64-bit ARM. It provides bidirectional conversions between string values and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with EC2 instance metadata or configuration APIs that require architecture specification.",
      "description_length": 426,
      "index": 1447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsErrorSet",
      "library": "aws-ec2",
      "description": "This module handles a list of fleet description errors, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON values to facilitate error handling during EC2 fleet descriptions. Use this module when processing failed fleet requests or inspecting error responses from the EC2 API.",
      "description_length": 344,
      "index": 1448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the attachment status of an EC2 volume, including optional fields for I/O performance and instance ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling volume status checks and managing volume attachment information in EC2 API interactions.",
      "description_length": 388,
      "index": 1449,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulInstanceCreditSpecificationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of `SuccessfulInstanceCreditSpecificationItem` values. It provides functions to convert the list to and from XML, JSON, and query formats, supporting data serialization and API interaction. Use this module when processing EC2 instance credit specification responses in different data formats.",
      "description_length": 370,
      "index": 1450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway peering attachment in AWS EC2. It provides constructors, JSON serialization/deserialization, and XML parsing for a structure that may contain a `TransitGatewayPeeringAttachment.t` value. It is used to interpret and format responses from the EC2 API after a transit gateway peering deletion operation.",
      "description_length": 361,
      "index": 1451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StaleSecurityGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of stale security group records. It provides functions to convert between XML, JSON, and query formats, specifically for processing stale security group data returned by EC2 API operations. Use this module when working with EC2 API responses that list stale security groups, such as those retrieved during security group cleanup or audit workflows.",
      "description_length": 431,
      "index": 1452,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableTransitGatewayRouteTablePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling route table propagation in a transit gateway. It includes fields for the route table ID, attachment ID, and an optional dry-run flag. Operations support creating, parsing, and serializing the request for use with AWS EC2 APIs.",
      "description_length": 280,
      "index": 1453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of egress-only internet gateway resources. It provides operations to convert between XML, JSON, and query string representations, and includes a function to construct an empty list. It is used when managing or serializing collections of egress-only internet gateways in AWS EC2.",
      "description_length": 304,
      "index": 1454,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4Pool",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a public IPv4 address pool in AWS EC2, including its metadata and address ranges. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing IP allocations, tracking available addresses, and integrating with EC2 APIs for network resource configuration.",
      "description_length": 392,
      "index": 1455,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListEntrySet",
      "library": "aws-ec2",
      "description": "This module handles sets of prefix list entries, primarily used for managing IP address ranges in network configurations. It provides functions to parse XML input into a list of prefix entries, convert entries to query parameters or JSON format, and construct prefix lists from JSON data. Commonly used when working with AWS EC2 network resources like VPCs and route tables.",
      "description_length": 374,
      "index": 1456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCapacityReservationUsageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a capacity reservation usage query, including fields like instance counts, state, and associated instance usages. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and AWS query formats. Concrete use cases include retrieving and processing EC2 capacity reservation usage data from AWS API responses.",
      "description_length": 408,
      "index": 1457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association state of a route table in AWS EC2, with specific values like `Associating`, `Associated`, and `Failed`. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when handling route table association state responses or requests in EC2 API interactions.",
      "description_length": 435,
      "index": 1458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Placement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement configurations of EC2 instances, including fields like availability zone, tenancy, and host ID. It provides functions to construct, serialize, and deserialize placement data for use in API requests and responses. Use this module when configuring instance placement options for launching or managing EC2 instances.",
      "description_length": 375,
      "index": 1459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for detaching a virtual private gateway from a VPC, including fields for the VPC ID, virtual private gateway ID, and an optional dry run flag. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when managing AWS EC2 networking operations, specifically for detaching a virtual private gateway from a VPC.",
      "description_length": 450,
      "index": 1460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for creating transit gateway routes, containing an optional `TransitGatewayRoute` value. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used to handle the output of EC2 API operations that create transit gateway routes, enabling integration with AWS SDK workflows.",
      "description_length": 381,
      "index": 1461,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotsResult",
      "library": "aws-ec2",
      "description": "Handles the result of describing EC2 snapshots, including snapshot metadata and pagination. Works with EC2 snapshot lists and string tokens for pagination. Used to process and serialize EC2 snapshot query responses in AWS SDK workflows.",
      "description_length": 236,
      "index": 1462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC attributes, including the VPC ID, attribute name, and optional dry-run flag. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. It is used when retrieving specific configuration details of a VPC, such as whether DNS support is enabled.",
      "description_length": 353,
      "index": 1463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListAssociationSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of EC2 prefix list association sets. Works with lists of `PrefixListAssociation.t` records, converting them to and from XML, JSON, and query formats. Used when managing VPC routing policies and network access controls involving prefix lists.",
      "description_length": 290,
      "index": 1464,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of successfully canceling a Spot Fleet request, capturing the current and previous states of the request along with its ID. It provides functions to construct, parse, and serialize this structure for use in API responses and queries. Concrete use cases include handling EC2 Spot Fleet cancellation responses and converting them to and from JSON or query formats for further processing or logging.",
      "description_length": 457,
      "index": 1465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a VPC, including the VPC ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when interacting with the EC2 API to delete a VPC, either directly or as part of a larger workflow involving network resource management.",
      "description_length": 369,
      "index": 1466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a launch template in AWS EC2, containing an optional `LaunchTemplate` record. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used specifically when handling responses from the EC2 API after issuing a delete launch template request.",
      "description_length": 374,
      "index": 1467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway peering attachment in AWS EC2, including identifiers, requester and accepter gateway info, status, state, creation time, and tags. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing cross-account or cross-region transit gateway connections, particularly for creating, inspecting, or serializing peering attachment data.",
      "description_length": 477,
      "index": 1468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating an EC2 volume, including parameters like availability zone, encryption, size, and tagging. It provides constructors, JSON and XML parsers, and query builders to form and process volume creation requests. Concrete use cases include setting up encrypted EBS volumes with specific IOPS or snapshot-based configurations in AWS deployments.",
      "description_length": 386,
      "index": 1469,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionVpcInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing VPC information for a VPC peering connection, including CIDR blocks, owner ID, peering options, VPC ID, and region. It provides functions to construct, parse, and serialize this data for use in AWS EC2 operations. Use cases include configuring and managing VPC peering connections with precise network settings and ownership details.",
      "description_length": 383,
      "index": 1470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway, with values like `Pending`, `Available`, and `Deleting`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. It is used to interpret and manipulate transit gateway state values in API requests and responses.",
      "description_length": 382,
      "index": 1471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN connection, with optional `code` and `message` fields indicating the connection's state. It provides functions to construct, parse, and serialize this status for use in querying, logging, or monitoring AWS EC2 Client VPN endpoints. Use cases include checking connection health, diagnosing failed connections, and integrating status data into API responses or operational dashboards.",
      "description_length": 459,
      "index": 1472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateVersionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a new version of an EC2 launch template. It includes fields for specifying the template data, source version, and optional metadata like version description or client token. The module provides functions to construct, parse, and serialize the request for use with AWS API calls.",
      "description_length": 331,
      "index": 1473,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module defines a transit gateway route with optional CIDR block, prefix list ID, route type, and state, along with a list of associated gateway attachments. It provides functions to construct, serialize, and convert route data to and from XML, JSON, and AWS query formats. Concrete use cases include managing route entries in AWS EC2 transit gateways and handling route propagation across network attachments.",
      "description_length": 414,
      "index": 1474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MembershipType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `Static` and `Igmp`, representing membership types for EC2 networking features. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. It is used to specify multicast group membership behavior in EC2 when interacting with AWS APIs.",
      "description_length": 370,
      "index": 1475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Traffic Mirror session, with optional fields for identifiers, configuration parameters, and tags. It provides functions to construct, parse, and serialize session data to and from XML, JSON, and query formats. Concrete use cases include configuring traffic mirroring for network monitoring and capturing packet data in virtualized environments.",
      "description_length": 401,
      "index": 1476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring on-demand options in EC2 fleet requests, supporting fields like allocation strategy, capacity reservation settings, instance type constraints, availability zone restrictions, target capacity, and price limits. It provides functions to construct, serialize, and parse these configurations, enabling precise control over EC2 instance provisioning. Use cases include setting up cost-controlled, high-availability EC2 fleets with specific capacity and placement requirements.",
      "description_length": 524,
      "index": 1477,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a NAT gateway in AWS EC2, including transitions between those states. It provides direct conversions to and from strings, JSON, and query formats, enabling straightforward integration with AWS APIs. Use this module when handling NAT gateway state changes, status checks, or API responses that require serialization or deserialization.",
      "description_length": 409,
      "index": 1478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FailedQueuedPurchaseDeletionSet",
      "library": "aws-ec2",
      "description": "This module handles a list of failed queued purchase deletions, providing functions to parse XML input into a list of failure records, convert the list to query parameters or JSON format, and construct the list from JSON data. It works with custom failure types representing unsuccessful deletion attempts of queued purchases. Use this module when managing batch deletion responses from EC2 to process or serialize failure details efficiently.",
      "description_length": 443,
      "index": 1479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 spot instance launch configurations, including fields for networking, storage, and instance metadata. It provides functions to construct, parse, and serialize these specifications for use in API requests. Concrete use cases include configuring spot instance requests with specific block device mappings, network interfaces, and IAM roles.",
      "description_length": 394,
      "index": 1480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching for transit gateway routes, including a list of matching routes and whether additional routes are available. It provides operations to construct, parse, and serialize the result in various formats like JSON and query strings. Use this module when processing responses from EC2's transit gateway route search API calls.",
      "description_length": 362,
      "index": 1481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of a spot instance, including optional code, message, and update time fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling spot instance status responses from AWS EC2 APIs and serializing them for logging or further processing.",
      "description_length": 394,
      "index": 1482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOfferingIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based reserved instances offering IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with reserved instance offerings, such as listing or selecting specific offerings in API requests.",
      "description_length": 324,
      "index": 1483,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 launch permissions, supporting operations to create, parse, and serialize permission entries. It works with optional user IDs and permission groups to control image sharing. Use this module when configuring or modifying AMI launch permissions via the AWS API.",
      "description_length": 315,
      "index": 1484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifierSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of security group identifiers. It provides functions to convert between XML, JSON, and query string representations, specifically for working with EC2 security group data in AWS API requests and responses. Use this module when interacting with AWS EC2 operations that require passing or receiving sets of security group identifiers, such as instance creation or network configuration APIs.",
      "description_length": 472,
      "index": 1485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportClientVpnClientCertificateRevocationListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of importing a Client VPN client certificate revocation list in EC2. It provides functions to create, parse, and serialize a result value that contains an optional boolean indicating success or failure. The module works with XML, JSON, and query string formats for integration with AWS API requests and responses.",
      "description_length": 344,
      "index": 1486,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkAclsResult",
      "library": "aws-ec2",
      "description": "Handles the result of describing EC2 network ACLs, including parsing from XML, conversion to JSON and query formats, and construction of result objects. Works with network ACL lists and optional next tokens for pagination. Used when retrieving and processing network ACL information from AWS EC2, particularly for handling paginated responses.",
      "description_length": 343,
      "index": 1487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExcessCapacityTerminationPolicy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `NoTermination` and `Default`, representing policies for handling excess capacity termination in EC2. It includes functions to convert between strings and the type `t`, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used when configuring EC2 instances to specify whether excess capacity should be terminated or preserved.",
      "description_length": 422,
      "index": 1488,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6PoolIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 pool IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this when working with AWS EC2 APIs that require or return IPv6 pool ID lists, such as describing or allocating IPv6 pools.",
      "description_length": 298,
      "index": 1489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeClientVpnIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for authorizing ingress access to a Client VPN endpoint. It includes fields such as the endpoint ID, target network CIDR, access group ID, and optional flags like `authorize_all_groups` and `dry_run`. The module provides functions to construct, serialize, and parse these requests in formats like JSON and query strings, specifically for interacting with the EC2 API when managing Client VPN access rules.",
      "description_length": 445,
      "index": 1490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointServiceConfigurationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC endpoint service configuration, containing the service configuration and an optional client token. It provides functions to construct, parse, and serialize the result to different formats like JSON and query parameters. It is used when managing VPC endpoint services in AWS EC2, specifically to retrieve and process the output of service creation operations.",
      "description_length": 407,
      "index": 1491,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsInstancesSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and querying of EC2 fleet instance data. It operates on lists of `DescribeFleetsInstances.t` records, providing functions to convert to and from XML, JSON, and AWS query formats. It is used when managing EC2 fleet responses, particularly for parsing API outputs or preparing requests involving multiple fleet instances.",
      "description_length": 375,
      "index": 1492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of an EC2 image, with values like `Pending`, `Available`, and `Failed`. It includes functions to convert between strings and the variant type, serialize to JSON or query parameters, and parse from XML or JSON. Use this module when handling EC2 image state transitions, status checks, or API responses involving image lifecycle management.",
      "description_length": 408,
      "index": 1493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservationState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of an EC2 reservation, including `Payment_pending`, `Payment_failed`, `Active`, and `Retired`. It provides direct conversions between these states and strings, JSON values, XML nodes, and query parameters, enabling seamless serialization and deserialization. These functions are used when interpreting or constructing API responses and requests involving reservation state data.",
      "description_length": 455,
      "index": 1494,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling error information with optional code and message fields. It provides functions to create, parse, and convert error data to query parameters, JSON, or XML. Use this module when processing EC2 API responses that include error details, particularly for handling unsuccessful item responses in batch operations.",
      "description_length": 357,
      "index": 1495,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 transit gateway attachments. It provides operations to convert between XML, JSON, and query string formats for transit gateway attachment data. Use this when working with AWS EC2 transit gateway APIs to process responses or build requests.",
      "description_length": 307,
      "index": 1496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBundleTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling a bundle task in EC2, including a bundle ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when interacting with EC2 bundle task cancellation operations, particularly when preparing or processing API requests in JSON or query format.",
      "description_length": 377,
      "index": 1497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesModificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying volume modifications in EC2, supporting filtering by volume IDs and custom filters, with optional pagination via `next_token` and `max_results`. It provides functions to construct, parse, and serialize the request in JSON and query formats. Concrete use cases include retrieving volume modification history for monitoring or auditing specific EBS volumes in AWS.",
      "description_length": 415,
      "index": 1498,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway virtual interface sets in EC2. It provides functions to convert between XML, JSON, and query string representations of a list of local gateway virtual interfaces. Use this module when working with AWS EC2 responses that include lists of local gateway virtual interfaces, particularly for API operations like describing local gateway virtual interfaces.",
      "description_length": 442,
      "index": 1499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a VPN connection, containing an optional updated `VpnConnection` object. It provides functions to create, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from modifying a specific type of network resource in an AWS EC2 context.",
      "description_length": 378,
      "index": 1500,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLinkIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPC classic link IDs, represented as base string lists. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing VPC connections to classic link instances, such as in VPC configuration or instance linking workflows.",
      "description_length": 333,
      "index": 1501,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifySubnetAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying subnet attributes in EC2, supporting operations to set IPv6 assignment, public IP mapping, and customer-owned IP configurations. It works with boolean attribute values, string identifiers, and optional fields to represent subnet modification parameters. Concrete use cases include updating subnet behavior for IP allocation when launching instances or changing ownership IP pool associations.",
      "description_length": 446,
      "index": 1502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of an EC2 volume import operation. It includes a conversion task object that tracks the status and details of the import process. The module provides functions to construct, parse, and serialize the result for use with AWS API requests and responses.",
      "description_length": 281,
      "index": 1503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ManagedPrefixListSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of managed prefix list entries. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 prefix list data in AWS API requests and responses. Use this module when interacting with AWS EC2 APIs to manage or retrieve prefix list information in different data formats.",
      "description_length": 387,
      "index": 1504,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of user ID strings in AWS EC2 operations. Provides functions to convert, parse, and serialize user ID lists to and from XML, JSON, and query parameters. Used when managing EC2 instance permissions or tagging operations that require multiple user IDs.",
      "description_length": 264,
      "index": 1505,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceInterruptionBehavior",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible behaviors for handling instance interruptions in EC2, with values `Hibernate`, `Stop`, and `Terminate`. It provides bidirectional conversions between these values and strings, JSON, and query parameters, enabling seamless serialization and deserialization. These functions are used when configuring spot instance interruption behavior in API requests and responses.",
      "description_length": 430,
      "index": 1506,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostReservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 host reservation, including fields like reservation ID, duration, pricing, and associated host IDs. It provides functions to construct, parse, and serialize host reservation data for interacting with AWS EC2 APIs. Use cases include managing dedicated host reservations, retrieving reservation details, and integrating with billing or resource management systems.",
      "description_length": 419,
      "index": 1507,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImagesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 images, primarily storing a list of images. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when retrieving and processing image metadata from EC2, such as listing available AMIs or filtering images by attributes.",
      "description_length": 338,
      "index": 1508,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleScreenshotResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving a console screenshot from an EC2 instance. It provides functions to create, parse, and serialize a result containing the base64-encoded image data and the instance ID. Use this module when interacting with EC2 instance screenshots via the AWS SDK, particularly for converting responses to and from XML, JSON, or query formats.",
      "description_length": 371,
      "index": 1509,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway attachment and a route table, with optional fields for the route table ID and association state. It provides functions to construct, serialize, and deserialize this structure using JSON, query parameters, and XML. Concrete use cases include managing and persisting transit gateway attachment associations within AWS EC2 networking workflows.",
      "description_length": 432,
      "index": 1510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for querying EC2 instance descriptions. It supports filtering by instance IDs and other criteria, with optional parameters for pagination and dry-run validation. The module provides functions to construct, parse, and serialize requests in JSON and query formats for API interactions.",
      "description_length": 351,
      "index": 1511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating flow logs in EC2, including parameters like resource IDs, log destination, and traffic type. It provides functions to construct, parse, and serialize flow log requests for API interactions. Use cases include configuring VPC flow logs with specific delivery permissions and log formats.",
      "description_length": 338,
      "index": 1512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeEgressOnlyInternetGatewaysResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing egress-only internet gateways in AWS EC2, containing a list of gateways and an optional pagination token. It provides functions to construct, serialize, and parse this result in various formats including JSON, query parameters, and XML. Use this module when handling responses from the `DescribeEgressOnlyInternetGateways` API call to manage VPC egress traffic configurations.",
      "description_length": 424,
      "index": 1513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a transit gateway prefix list reference, including required and optional fields like route table ID, prefix list ID, and blackhole flag. It provides functions to construct, parse, and serialize the structure to different formats such as JSON and query parameters. Concrete use cases include configuring route propagation in AWS EC2 transit gateways and managing prefix list references programmatically.",
      "description_length": 453,
      "index": 1514,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving managed prefix list associations in AWS EC2. It includes operations to create, parse, and serialize the result, which contains a set of prefix list associations and an optional pagination token. It is used when querying for associations of a managed prefix list, enabling pagination and response handling in API interactions.",
      "description_length": 370,
      "index": 1515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTablePropagationsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for retrieving transit gateway route table propagations, including parameters like route table ID, filters, pagination, and dry run options. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Concrete use cases include querying AWS EC2 for route propagation details in a transit gateway, handling filtered results, and managing pagination with optional tokens.",
      "description_length": 452,
      "index": 1516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 local gateway, including its ID, associated outpost ARN, owner ID, state, and tags. It provides functions to construct, parse, and serialize local gateway data for use in API requests and responses. These operations support managing local gateways within AWS EC2, particularly when integrating with on-premises networks via Outposts.",
      "description_length": 390,
      "index": 1517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DatafeedSubscriptionState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a datafeed subscription, with values `Active` and `Inactive`. It provides bidirectional conversions between strings and the variant type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to handle state transitions and representations when interacting with EC2 datafeed subscription APIs.",
      "description_length": 424,
      "index": 1518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of replacing a network ACL association in EC2. It provides functions to create, parse, and serialize a result containing an optional new association ID. Use this module when managing network ACLs to capture and process the outcome of association updates in XML, query string, or JSON formats.",
      "description_length": 323,
      "index": 1519,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointServiceIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC endpoint service IDs in AWS EC2. It provides functions to convert these lists to and from query parameters, XML nodes, and JSON values. Use this module when managing VPC endpoint services, such as when listing or referencing multiple service IDs in API requests or responses.",
      "description_length": 308,
      "index": 1520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteEgressOnlyInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an egress-only internet gateway, including a dry run flag and the gateway ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when preparing or handling deletion requests for egress-only internet gateways in AWS infrastructure management workflows.",
      "description_length": 375,
      "index": 1521,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LicenseList",
      "library": "aws-ec2",
      "description": "This module represents a list of license configurations for EC2 instances. It provides functions to convert license lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing licensing for EC2 resources, such as when associating or retrieving license configurations for instances or AMIs.",
      "description_length": 331,
      "index": 1522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstances",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 reserved instances with fields for configuration and metadata. It provides functions to construct, parse, and serialize reserved instance data for use in AWS API requests and responses. Concrete use cases include managing reserved instance configurations, converting instance data to JSON for API interactions, and parsing AWS responses into structured records.",
      "description_length": 415,
      "index": 1523,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SearchLocalGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching local gateway routes, including parameters like route table ID, filters, pagination settings, and dry run options. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. It is used when interacting with EC2's local gateway route tables, particularly for retrieving route information with specific filtering and pagination constraints.",
      "description_length": 456,
      "index": 1524,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetHostReservationPurchasePreviewRequest",
      "library": "aws-ec2",
      "description": "This module constructs and manipulates requests for previewing host reservation purchases by handling sets of host IDs and offering IDs. It supports parsing from XML, conversion to query parameters or JSON, and validation through an option-returning parse function. Concrete use cases include preparing API requests to evaluate EC2 host reservation costs and configurations before purchase.",
      "description_length": 390,
      "index": 1525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 network interface with fields for metadata like availability zone, MAC address, private IP addresses, and associated security groups. It includes functions to construct, parse, and serialize network interface data for use in API requests and responses. Concrete use cases include managing network interface configurations during instance provisioning or querying interface details for monitoring and networking purposes.",
      "description_length": 477,
      "index": 1526,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AttachInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for attaching an internet gateway to a VPC, including fields for dry-run mode, internet gateway ID, and VPC ID. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Use this module when configuring network connectivity by associating an internet gateway with a specific VPC in AWS infrastructure management workflows.",
      "description_length": 406,
      "index": 1527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the address information of a NAT gateway, with fields for allocation ID, network interface ID, private IP, and public IP. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and back from JSON. This module is used to manage and serialize NAT gateway address details when interacting with AWS EC2 APIs or processing network configurations.",
      "description_length": 432,
      "index": 1528,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetPasswordDataResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling password data retrieval results from EC2 instances, including the instance ID, password data, and timestamp. It provides functions to construct, parse, and convert the data to and from JSON and query formats. It is used when retrieving password data for Windows instances in EC2.",
      "description_length": 329,
      "index": 1529,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportSnapshotTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 import snapshot tasks, providing structured access to a list of tasks and an optional pagination token. It includes functions to construct, parse, and serialize the result in various formats like JSON and query parameters. Use this module when processing responses from AWS EC2's `DescribeImportSnapshotTasks` API to manage virtual machine image imports.",
      "description_length": 403,
      "index": 1530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstanceAvailabilityRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying scheduled instance availability in EC2. It includes fields for filtering results, specifying time ranges, controlling result size, and defining recurrence patterns. The module provides functions to construct, parse, and serialize these requests for use with AWS API calls.",
      "description_length": 325,
      "index": 1531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying market options when launching EC2 instances, including optional spot market configurations. It provides functions to construct, parse, and serialize these options to JSON, query parameters, or XML. Concrete use cases include configuring spot instance behavior and specifying market types in EC2 launch templates.",
      "description_length": 364,
      "index": 1532,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a transit gateway route, including pending, active, blackhole, deleting, and deleted states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and query formats. The module is used to handle state transitions and status checks when managing transit gateway routes in AWS EC2.",
      "description_length": 443,
      "index": 1533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 launch templates, with optional fields for template ID, name, and version. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML data. Use this module when configuring or retrieving EC2 instance launch parameters using named or versioned templates.",
      "description_length": 359,
      "index": 1534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InferenceAcceleratorInfo",
      "library": "aws-ec2",
      "description": "This module handles inference accelerator information for EC2 instances, primarily working with a list of inference device details. It provides functions to construct, parse, and serialize accelerator data to JSON, query parameters, or XML. Use this module when configuring or retrieving details about inference accelerators attached to EC2 instances, such as when launching or describing instance types with attached accelerators.",
      "description_length": 431,
      "index": 1535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 snapshot attributes, including fields like snapshot ID, user permissions, and group names. It provides functions to construct, serialize, and parse modification requests, specifically for adjusting access control settings on EC2 snapshots. Use cases include granting or revoking snapshot access to specific users or groups, and setting up shared snapshots for cross-account usage.",
      "description_length": 435,
      "index": 1536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EndpointSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and query conversion for lists of EC2 Client VPN endpoints. Works with XML nodes, JSON values, and AWS query parameters to facilitate API interactions. Useful for processing AWS EC2 API responses and constructing requests involving Client VPN endpoint configurations.",
      "description_length": 299,
      "index": 1537,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailableInstanceCapacityList",
      "library": "aws-ec2",
      "description": "This module handles lists of instance capacity information, parsing them from XML nodes, converting to query parameters, and serializing to and from JSON. It works with instance capacity records, typically used when querying EC2 for available instance types and their associated capacities. Use cases include processing responses from EC2's DescribeInstanceTypeOfferings API to determine supported instance types in specific regions or zones.",
      "description_length": 442,
      "index": 1538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 price schedules represented as lists. It provides functions to convert between XML, JSON, and query string formats, specifically working with `PriceSchedule.t` lists. Use this module when processing spot instance pricing data from AWS EC2 responses or preparing requests that require price schedule parameters.",
      "description_length": 390,
      "index": 1539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateVpcCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to disassociate a VPC CIDR block by association ID. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON. Concrete use cases include handling VPC CIDR block disassociation in AWS EC2 API interactions.",
      "description_length": 327,
      "index": 1540,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientConnectResponseOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling client connect response options in an EC2 Client VPN configuration. It includes fields for enabling the feature, specifying a Lambda function ARN, and tracking the status of the endpoint attribute. Operations include creating instances, parsing XML responses, converting to query parameters, and serializing to and from JSON.",
      "description_length": 375,
      "index": 1541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnAuthorizationRulesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying Client VPN authorization rules in AWS EC2. It includes fields to specify the Client VPN endpoint, filtering criteria, pagination, and dry-run mode. Operations allow constructing, parsing, and converting the request to query or JSON formats for API interaction.",
      "description_length": 313,
      "index": 1542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorTargetRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring a traffic mirror target request in AWS EC2, supporting optional network interface IDs, network load balancer ARNs, and metadata like description and tags. It provides functions to construct, serialize, and parse the request for use with API calls, enabling precise control over traffic mirroring configurations. Use cases include setting up network monitoring by specifying source and target endpoints for mirrored traffic.",
      "description_length": 476,
      "index": 1543,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayVpcAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 Transit Gateway VPC attachments, containing a list of attachments and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when handling responses from AWS EC2 API calls that list Transit Gateway VPC attachments.",
      "description_length": 377,
      "index": 1544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartVpcEndpointServicePrivateDnsVerificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of initiating a private DNS verification for a VPC endpoint service. It provides functions to construct, parse, and serialize a result containing an optional boolean return value. Use cases include managing responses from AWS EC2 API calls related to VPC endpoint service DNS configuration.",
      "description_length": 321,
      "index": 1545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostReservationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of EC2 host reservation records. It provides functions to convert between XML, JSON, and query string representations of host reservation data. Use this module when processing responses or building requests involving multiple EC2 host reservations, such as listing or purchasing host reservations.",
      "description_length": 380,
      "index": 1546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTableAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving associations for a transit gateway route table, including the list of associations and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. Use this module when working with EC2 transit gateway route table associations, especially for handling paginated responses from AWS API calls.",
      "description_length": 424,
      "index": 1547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 bundle task, including its state, progress, timestamps, and associated instance and storage details. It provides functions to construct, parse, and convert bundle tasks to and from JSON and query formats. Concrete use cases include managing instance image creation tasks and tracking their execution status in AWS EC2.",
      "description_length": 375,
      "index": 1548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 2 integrity algorithm requests in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of `Phase2IntegrityAlgorithmsRequestListValue.t` values, supporting serialization, deserialization, and transformation for use in API requests and responses.",
      "description_length": 373,
      "index": 1549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for deleting an EC2 transit gateway multicast domain, containing an optional `TransitGatewayMulticastDomain` record. It provides constructors, parsers, and serializers for handling API responses in XML, JSON, and query formats. It is used to process the output of EC2 API calls that delete multicast domains, enabling integration with AWS management workflows.",
      "description_length": 399,
      "index": 1550,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway virtual interface with optional fields for identifiers, network configuration, and BGP settings. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing virtual interface configurations in AWS EC2 and handling API requests or responses involving local gateways.",
      "description_length": 420,
      "index": 1551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayAttachmentList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of internet gateway attachment lists for EC2 operations. Works with lists of InternetGatewayAttachment records, supporting XML, JSON, and query parameter formats. Used to process responses and requests involving multiple internet gateway attachments in AWS EC2 APIs.",
      "description_length": 313,
      "index": 1552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointConnectionSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of VPC endpoint connection lists. It provides functions to convert between XML, JSON, and query string representations of these connections. Use this module when working with AWS EC2 VPC endpoint connection data in different formats, such as when processing API responses or constructing requests.",
      "description_length": 362,
      "index": 1553,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DefaultTargetCapacityType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing capacity types for EC2 instances, with variants `Spot` and `On_demand`. It provides conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions support handling capacity type values in API requests and responses.",
      "description_length": 335,
      "index": 1554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for instance monitoring information, including instance ID and monitoring state. It provides functions to construct, parse, and serialize monitoring data to query parameters or JSON format. Use this module when managing EC2 instance monitoring settings, such as enabling or retrieving monitoring for specific instances.",
      "description_length": 356,
      "index": 1555,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring requests to describe EC2 Spot Fleet requests, including optional parameters like dry run, maximum results, pagination token, and a list of Spot Fleet request IDs. It provides functions to construct, serialize, and parse these requests in different formats such as JSON and query strings. It is used when interacting with the EC2 API to retrieve information about existing Spot Fleet requests.",
      "description_length": 445,
      "index": 1556,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateEnclaveCertificateIamRoleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating an enclave certificate with an IAM role in EC2. It includes functions to construct, parse, and serialize the request data, supporting operations like query parameter conversion, JSON serialization, and XML parsing. It works with optional string and boolean fields representing certificate and role ARNs, and a dry-run flag.",
      "description_length": 379,
      "index": 1557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelImportTaskResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of canceling an import task, with fields for the import task ID, previous state, and current state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when canceling virtual machine import tasks.",
      "description_length": 379,
      "index": 1558,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHttpTokensState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of HTTP tokens for an EC2 launch template, with values `Optional` and `Required`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON, query parameters, and XML. This module is used when configuring instance metadata options in EC2 launch templates, specifically to enforce or allow HTTP tokens.",
      "description_length": 447,
      "index": 1559,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of cancelling spot instance requests in EC2. It provides constructors, parsing, and serialization functions for a structure containing a list of cancelled spot instance requests. It is used to process responses from the EC2 API when cancelling spot instance requests, enabling integration with XML and JSON data formats.",
      "description_length": 351,
      "index": 1560,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an EC2 volume import request, including parameters like availability zone, image details, and volume configuration. It provides functions to construct, serialize, and parse these requests, specifically working with XML, JSON, and query string formats. It is used when importing disk images into EC2 as new volumes, supporting operations like dry runs and custom volume sizing.",
      "description_length": 428,
      "index": 1561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptionsIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP options IDs in EC2 operations. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. It works specifically with lists of `Aws.BaseTypes.String.t` values representing DHCP options IDs, used when configuring or retrieving EC2 network settings.",
      "description_length": 331,
      "index": 1562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an IPv6 address request for an EC2 instance, with optional IPv6 address field. It provides functions to construct, parse, and serialize the data structure to query parameters or JSON. Use this module when configuring IPv6 settings for EC2 instances programmatically.",
      "description_length": 318,
      "index": 1563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDiskContainer",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling disk container information in EC2 snapshot operations. It includes fields for description, format, URL, and user bucket, and provides functions to construct, parse, and serialize the structure to query parameters or JSON. It is used when importing or managing EBS snapshots from external sources.",
      "description_length": 346,
      "index": 1564,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCapacityReservationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 instance's capacity reservation attributes. It provides functions to create, parse, and serialize a result that includes an optional boolean indicating success. The module works with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 300,
      "index": 1565,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling EC2 connection notifications, including fields like notification ID, service ID, VPC endpoint ID, notification type, ARN, events, and state. It provides operations to construct, parse, and serialize connection notification data to and from JSON, query parameters, and XML. Concrete use cases include managing VPC endpoint connection notifications and integrating with AWS event-driven architectures.",
      "description_length": 449,
      "index": 1566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing volume attribute names in EC2, with variants `AutoEnableIO` and `ProductCodes`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. Use cases include handling EC2 volume attribute modifications and parsing API responses or user input into typed values.",
      "description_length": 393,
      "index": 1567,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway prefix list reference in AWS EC2. It provides constructors, parsing, and serialization functions for working with the optional `TransitGatewayPrefixListReference.t` value contained in the result. Use this module when interacting with AWS EC2's transit gateway APIs to delete and manage prefix list references.",
      "description_length": 370,
      "index": 1568,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProcessorInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for processor information, including supported architectures and sustained clock speed. It provides functions to create, parse, and serialize instances for use in querying or processing EC2 instance details. Concrete use cases include retrieving processor capabilities from XML responses and converting them to JSON or query parameters for further processing.",
      "description_length": 396,
      "index": 1569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeSecurityGroupEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for authorizing egress traffic in a security group. It includes fields like `group_id`, `ip_permissions`, and `cidr_ip` to specify the traffic rules and target group. Operations allow constructing, parsing, and serializing the request for use with AWS EC2 API calls.",
      "description_length": 306,
      "index": 1570,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to delete DHCP options in EC2, containing the DHCP options ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request in various formats including JSON, query parameters, and XML. Concrete use cases include building API requests to delete DHCP configurations and processing responses in EC2 management tools.",
      "description_length": 417,
      "index": 1571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful EC2 fleet deletion, including the current and previous fleet states and the fleet ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from AWS EC2 API calls that return fleet deletion results, such as tracking fleet state transitions after deletion.",
      "description_length": 437,
      "index": 1572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume details in EC2 operations, primarily working with XML, JSON, and query parameter formats. It provides functions to construct, parse, and convert volume detail objects, specifically handling size values as 64-bit integers. Use cases include serializing volume details for API requests and deserializing responses from EC2 into typed OCaml values.",
      "description_length": 406,
      "index": 1573,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceEventStartTimeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 instance event start time, containing an optional `InstanceStatusEvent`. It provides functions to construct, parse, and serialize the result for use in API requests and responses, specifically working with XML, JSON, and query parameter formats. Use this module when interacting with EC2 instance status events via the AWS SDK, particularly when adjusting scheduled event times.",
      "description_length": 429,
      "index": 1574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing different strategies for allocating Spot Instances in EC2, including `Lowest_price`, `Diversified`, and `Capacity_optimized`. It provides bidirectional conversions between these strategies and string representations, along with serialization to and from JSON, query parameters, and XML. These functions are used when configuring Spot Fleet requests or Auto Scaling groups to control how EC2 selects instance types based on price, availability, or a balance of both.",
      "description_length": 517,
      "index": 1575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting specific attributes of an EC2 instance, such as `instance_id` and `attribute`, with an optional `dry_run` flag. It includes functions to construct, serialize to JSON or query parameters, and parse from XML or JSON. Use this when configuring or resetting instance attributes like source/destination checking or kernel ID in AWS EC2.",
      "description_length": 385,
      "index": 1576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedRolesList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 associated roles, providing operations to convert, parse, and serialize role data. It works with XML nodes, JSON values, and AWS query parameters to facilitate role list manipulation. Concrete use cases include processing EC2 instance role associations from AWS API responses and constructing requests for role-based configurations.",
      "description_length": 365,
      "index": 1577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string identifiers representing local gateway virtual interfaces. It provides functions to convert the list into query parameters or JSON, and to parse it from XML nodes or JSON. It is used when managing EC2 local gateway configurations that require multiple virtual interface IDs as input.",
      "description_length": 320,
      "index": 1578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateVpcCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a VPC CIDR block, including optional IPv6 and IPv4 CIDR block associations and a VPC ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from VPC CIDR block association operations in AWS EC2.",
      "description_length": 370,
      "index": 1579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying an EC2 capacity reservation, primarily holding an optional boolean indicating success. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses from the AWS EC2 API when adjusting capacity reservations, providing direct access to the operation's outcome.",
      "description_length": 425,
      "index": 1580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsErrorSet",
      "library": "aws-ec2",
      "description": "This module handles a list of spot fleet request cancellation errors. It provides functions to parse XML error responses, convert error lists to query parameters or JSON format, and construct error structures from JSON input. It is used when managing spot fleet termination responses in AWS EC2 interactions.",
      "description_length": 308,
      "index": 1581,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateIamInstanceProfileRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating an IAM instance profile with an EC2 instance. It includes functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. The module is used when configuring IAM roles for EC2 instances programmatically.",
      "description_length": 308,
      "index": 1582,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for detaching an internet gateway from a VPC in AWS EC2. It includes fields for dry-run mode, internet gateway ID, and VPC ID, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring or tearing down network infrastructure in EC2 by associating or disassociating internet gateways.",
      "description_length": 377,
      "index": 1583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 export tasks, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, along with structured output generation for API interactions. Use this module when managing VM export operations, especially for importing and exporting virtual machine images to and from EC2.",
      "description_length": 361,
      "index": 1584,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a virtual private gateway in AWS EC2, including the gateway ID and an optional dry run flag. It provides functions to construct, parse, and serialize the request for use with API calls. Use this module when interacting with EC2's VPN gateway deletion API to format requests or process responses.",
      "description_length": 348,
      "index": 1585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreatePlacementGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a placement group in EC2, containing an optional placement group object. It provides functions to construct, parse, and convert the result to query parameters, JSON, or XML. Use this when handling responses from EC2's placement group creation API calls, particularly to extract and work with placement group metadata.",
      "description_length": 390,
      "index": 1586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesSecurityGroupIdSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and querying of security group ID lists for EC2 scheduled instances. Works with lists of base string types, converting between XML, JSON, and query formats. Used when configuring or retrieving security groups for scheduled EC2 instances.",
      "description_length": 269,
      "index": 1587,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcTenancyRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the instance tenancy of a VPC. It includes operations to create, parse, and serialize the request in various formats such as JSON and query strings. It is used when updating the tenancy attribute of a VPC to control whether instances launched in the VPC run on shared or dedicated hardware.",
      "description_length": 344,
      "index": 1588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 route table associations, including fields like association ID, route table ID, subnet ID, and association state. It provides functions to construct, parse, and convert route table association data to and from XML, JSON, and query formats. Concrete use cases include managing route table associations in EC2 when configuring VPC routing or handling subnet and gateway associations.",
      "description_length": 439,
      "index": 1589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeMovingAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying moving Elastic IP addresses in EC2, supporting filtering, dry run checks, and pagination via `max_results` and `next_token`. It works with EC2 filters, boolean flags, integers, strings, and JSON or XML data during request construction and parsing. Concrete use cases include building and handling API requests to describe moving addresses by public IP or other EC2 metadata.",
      "description_length": 427,
      "index": 1590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure and associated operations for creating a Client VPN endpoint in AWS EC2. It includes functions to construct, parse, and serialize the request data, which consists of network configuration, authentication settings, logging options, and metadata. Concrete use cases include programmatically setting up secure remote access to VPC resources using Client VPN.",
      "description_length": 395,
      "index": 1591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientCertificateRevocationListStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Pending` and `Active`, representing the status of a client certificate revocation list. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to handle status values when interacting with AWS EC2 API operations related to client certificate revocation lists.",
      "description_length": 447,
      "index": 1592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot market options in EC2, with fields like maximum price, spot instance type, block duration, validity period, and interruption behavior. It provides functions to construct, parse, and convert these options to and from JSON and query formats. It is used when launching spot instances with specific bidding and runtime constraints.",
      "description_length": 385,
      "index": 1593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceType",
      "library": "aws-ec2",
      "description": "This module defines a comprehensive enumeration of EC2 instance types, including general-purpose, compute-optimized, memory-optimized, and specialized hardware instances. It provides bidirectional mappings between string representations and typed values, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when working with EC2 instance provisioning, configuration, or querying to ensure correct instance type handling and conversion across different data formats.",
      "description_length": 521,
      "index": 1594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway attachment IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require or return multiple transit gateway attachment IDs.",
      "description_length": 309,
      "index": 1595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecificationSecurityGroupList",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of security group lists for spot instance launch specifications. It provides functions to parse XML input into a list of security group names, convert the list to query parameters or JSON format, and extract the list from JSON input. It works specifically with lists of security group names represented as `Aws.BaseTypes.String.t list`. A concrete use case includes configuring EC2 spot instance requests with specific security groups when interacting with the AWS API.",
      "description_length": 521,
      "index": 1596,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribePlacementGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 placement groups by providing functions to construct, parse, and serialize the result data. It works with placement group lists and supports operations for converting to and from XML, JSON, and query formats. Use this module when retrieving and processing placement group information from EC2, particularly for integration with AWS APIs or configuration tools.",
      "description_length": 409,
      "index": 1597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOfferingList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances Offerings, providing direct parsing from XML nodes, conversion to AWS query format, and serialization to and from JSON. It works specifically with lists of `ReservedInstancesOffering.t` records. Use this module when processing responses from EC2 API calls related to reserved instance offerings, such as listing available offerings or handling API request payloads.",
      "description_length": 417,
      "index": 1598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying host reservation offerings, including filters, duration constraints, pagination, and specific offering identifiers. It provides functions to construct, parse, and serialize these requests for use with AWS EC2 APIs. Use this module when configuring or retrieving available host reservations with specific criteria or paginating through large result sets.",
      "description_length": 406,
      "index": 1599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 2 IPsec configuration. It provides functions to construct, serialize, and deserialize this structure, specifically handling string-based algorithm identifiers. It is used when configuring or retrieving VPN tunnel options in AWS EC2.",
      "description_length": 338,
      "index": 1600,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 account attributes, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON values to facilitate attribute list manipulation during API interactions. Use this module when processing responses or constructing requests involving EC2 account attributes.",
      "description_length": 347,
      "index": 1601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceCreditSpecificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying instance credit specifications in EC2, supporting filtering by instance IDs and custom result limits. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving credit specification details for monitoring or managing burstable performance instances.",
      "description_length": 388,
      "index": 1602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 reserved instance IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require or return groups of reserved instance IDs.",
      "description_length": 292,
      "index": 1603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 virtual private gateway, including its attachments, state, type, and metadata like tags and IDs. It provides functions to construct, parse, and serialize gateway data for use in API requests and responses. Concrete use cases include managing gateway configurations, querying attachment status, and handling gateway lifecycle operations in AWS EC2.",
      "description_length": 404,
      "index": 1604,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkInstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 ClassicLinkInstance objects. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization/deserialization. Use this module when working with AWS EC2 ClassicLink instance data in XML, query string, or JSON formats.",
      "description_length": 276,
      "index": 1605,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a local gateway route table and a VPC in AWS EC2. It provides functions to construct, parse, and serialize the association data, including handling optional fields like IDs, ARN, state, and tags. Use cases include managing VPC connectivity through local gateways and tracking association metadata in EC2 networking workflows.",
      "description_length": 398,
      "index": 1606,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupStringList",
      "library": "aws-ec2",
      "description": "Handles lists of security group names or IDs for EC2 operations. Provides functions to convert these lists to and from JSON and query string formats, used when configuring or retrieving EC2 instance security settings. Directly supports working with AWS EC2 API requests and responses involving security groups.",
      "description_length": 310,
      "index": 1607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesModificationsResult",
      "library": "aws-ec2",
      "description": "This module handles results from describing volume modifications in EC2, providing constructors, JSON and XML parsers, and query conversion. It works with volume modification lists and optional pagination tokens. Use it to process and serialize responses when querying the status of EBS volume modifications.",
      "description_length": 308,
      "index": 1608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a client VPN endpoint from a target network. It includes operations to create, parse, and serialize the request in various formats such as JSON, query parameters, and XML. It works directly with string and boolean types to represent the client VPN endpoint ID, association ID, and optional dry-run flag.",
      "description_length": 362,
      "index": 1609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsErrorItem",
      "library": "aws-ec2",
      "description": "This module handles individual error items from canceling EC2 spot fleet requests, providing constructors, JSON and XML parsing, and query parameter conversion. It works with structured error types and string identifiers to represent failed spot fleet cancellation attempts. Concrete use cases include processing AWS API responses and building error diagnostics for spot fleet operations.",
      "description_length": 388,
      "index": 1610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a VPC peering connection, containing an optional dry-run flag and a required VPC peering connection ID. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing network connectivity between VPCs in AWS EC2, allowing precise control over peering termination with safety checks via dry-run.",
      "description_length": 409,
      "index": 1611,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateInstanceExportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 instance export task to S3. It includes fields for the instance ID, export destination details, target environment, optional description, and tag specifications. The module provides functions to construct, parse, and serialize the request for use with AWS API operations.",
      "description_length": 333,
      "index": 1612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DomainType",
      "library": "aws-ec2",
      "description": "This module defines a domain type enumeration with two variants, `Vpc` and `Standard`, and provides bidirectional conversion functions between these variants and strings. It includes utilities for parsing, serialization, and JSON/XML query handling, making it suitable for use in API request/response processing where domain types must be encoded or decoded. Concrete use cases include translating EC2 domain type values during AWS API interactions, such as when launching instances or querying network configurations.",
      "description_length": 518,
      "index": 1613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a Client VPN endpoint in AWS EC2. It includes fields to specify changes to the endpoint's configuration, such as the server certificate ARN, DNS servers, connection logging, and network settings. The module provides functions to construct, serialize, and parse modification requests, primarily used when updating a Client VPN endpoint's properties via the AWS API.",
      "description_length": 415,
      "index": 1614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for detaching a network interface from an EC2 instance, including the attachment ID, optional dry run flag, and optional force flag. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. Use this module when programmatically managing network interface detachment in AWS EC2, particularly for building and processing API requests.",
      "description_length": 437,
      "index": 1615,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CpuOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options with optional core count and threads per core. It provides functions to create, parse, and convert CPU options to and from XML, JSON, and query formats. Use this module when configuring EC2 instance CPU settings in API requests or processing responses.",
      "description_length": 316,
      "index": 1616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetCapacitySpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying target capacities in EC2 Auto Scaling requests, including total, on-demand, and spot capacity values along with a default capacity type. It provides functions to construct, serialize, and deserialize these specifications for use in API requests. Concrete use cases include configuring auto scaling groups with mixed capacity types and managing capacity allocation in EC2 Fleet requests.",
      "description_length": 438,
      "index": 1617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportImageTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 import image tasks, including task lists and pagination tokens. It provides operations to create, parse, and serialize results in various formats like JSON and query strings. Use it when managing virtual machine image imports in AWS EC2, especially for tracking task status or handling paginated responses.",
      "description_length": 355,
      "index": 1618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in EC2 launch templates, with fields to set HTTP tokens, hop limit for PUT responses, and HTTP endpoint state. It provides functions to construct, parse, and serialize these options for use in API requests, specifically handling conversions to and from JSON, query parameters, and XML. Concrete use cases include configuring security and network behavior for EC2 instances at launch time, such as enforcing token usage for metadata access or limiting response hops.",
      "description_length": 544,
      "index": 1619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNatGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing NAT gateways in EC2, providing constructors, parsing, and serialization functions. It works with NAT gateway lists and optional next tokens for pagination. Use it to process responses from EC2's `DescribeNatGateways` API call, including paginated results and JSON or XML conversions.",
      "description_length": 328,
      "index": 1620,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a VPN connection in EC2, including states like `Pending`, `Available`, `Deleting`, and `Deleted`. It provides functions to convert between strings and the variant type, serialize to JSON and query formats, and parse from XML and JSON. Concrete use cases include handling API responses and constructing requests involving VPN states in EC2.",
      "description_length": 412,
      "index": 1621,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LoadBalancersConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for load balancers with optional classic load balancers and target groups. It provides functions to construct, parse, and serialize load balancer configurations to query parameters or JSON, supporting integration with AWS EC2 APIs. Use cases include setting up or modifying auto scaling group configurations that reference load balancers or target groups.",
      "description_length": 401,
      "index": 1622,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceCreditSpecificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance credit specifications, including a list of credit specifications and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in querying and processing T2 instance credit information. Use this module when retrieving or handling instance credit settings in AWS EC2 environments.",
      "description_length": 385,
      "index": 1623,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecord",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing historical events related to EC2 resources, including event details, type, and timestamp. It provides functions to construct, serialize, and deserialize these records using XML, JSON, and query parameters. Concrete use cases include tracking state changes of EC2 instances and auditing API calls within AWS environments.",
      "description_length": 371,
      "index": 1624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 launch templates, with fields like `dry_run`, `launch_template_id`, and `default_version`. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Use this when updating launch template configurations programmatically via the AWS SDK.",
      "description_length": 334,
      "index": 1625,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of fast snapshot restore success items. It provides functions to convert between XML, query parameters, and JSON formats, specifically working with lists of `DescribeFastSnapshotRestoreSuccessItem` structures. Use this module when processing EC2 fast snapshot restore responses in different data formats.",
      "description_length": 379,
      "index": 1626,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceAvailabilitySet",
      "library": "aws-ec2",
      "description": "This module handles a list of scheduled instance availability records. It provides functions to convert the list to and from XML, JSON, and query formats, enabling easy serialization and deserialization for API interactions. Use this module when processing responses or building requests for scheduled EC2 instance availability data.",
      "description_length": 333,
      "index": 1627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a network ACL in AWS EC2, containing an optional `NetworkAcl` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2's network ACL creation API calls, particularly for extracting and working with the returned network ACL data.",
      "description_length": 431,
      "index": 1628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 addresses associated with EC2 instances, including optional IPv6 address fields. It provides functions to construct, parse, and convert these addresses to and from query parameters and JSON representations. Concrete use cases include managing instance metadata and configuring network interfaces in AWS EC2.",
      "description_length": 362,
      "index": 1629,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceMemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for GPU device memory information, specifically capturing the size in MiB as an optional integer. It provides functions to construct, serialize, and convert instances to and from XML, JSON, and query formats. Use this module when handling GPU memory details in EC2 instance configurations or responses from AWS API calls.",
      "description_length": 358,
      "index": 1630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 security groups, supporting filtering by ID, name, or custom filters. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include building API requests to list security groups with optional constraints like VPC ID or tag values.",
      "description_length": 361,
      "index": 1631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationErrorCode",
      "library": "aws-ec2",
      "description": "This module defines error codes for unsuccessful instance credit specification operations in EC2, including malformed or missing instance IDs, unsupported credit specifications, and incorrect instance states. It provides bidirectional conversion between error code variants and strings, JSON and query parameter serialization, and XML parsing. These functions are used to handle and interpret errors when modifying credit specifications for EC2 instances.",
      "description_length": 455,
      "index": 1632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags in an EC2 launch template, including the resource type and a list of tags. It provides functions to construct, parse, and serialize these specifications to and from JSON and query formats. Use this module when configuring or modifying EC2 launch templates with specific tagging requirements.",
      "description_length": 348,
      "index": 1633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PriceSchedule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing price schedules with optional boolean, numeric, and currency fields. It provides functions to construct, serialize, and deserialize price schedule data for use in querying or processing EC2 pricing information. Use cases include handling AWS EC2 spot instance pricing data in API requests and responses.",
      "description_length": 357,
      "index": 1634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpRangeList",
      "library": "aws-ec2",
      "description": "This module handles lists of IP ranges in the context of EC2 configurations. It provides operations to convert IP range lists to and from XML, JSON, and query parameters, enabling their use in API requests and responses. It is used when managing security group rules or network access configurations that involve multiple IP address ranges.",
      "description_length": 340,
      "index": 1635,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfacePermissionResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of deleting a network interface permission, with a boolean field indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this module when handling responses from EC2 API calls that delete network interface permissions.",
      "description_length": 346,
      "index": 1636,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling EBS encryption by default, containing an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when configuring EC2 EBS encryption settings programmatically, particularly for validating or applying encryption defaults without making actual changes.",
      "description_length": 384,
      "index": 1637,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway route table in AWS EC2, including fields such as route table ID, ARN, associated local gateway ID, and tags. It provides functions to construct, parse, and serialize route table data for use in API requests and responses. Concrete use cases include managing route table configurations for EC2 local gateways and processing route table information returned by AWS API calls.",
      "description_length": 439,
      "index": 1638,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeValueList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of EC2 account attribute values. Works with lists of account attribute values, supporting operations to convert to and from JSON, query parameters, and XML. Used when retrieving or modifying EC2 account attributes via API calls.",
      "description_length": 275,
      "index": 1639,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` with an optional boolean field `dry_run`, representing parameters for describing instance event notification attributes in EC2. It includes functions to construct, parse, and serialize the data structure to JSON, query format, or from JSON. This module is used when querying AWS EC2 to retrieve details about instance event notifications, specifically whether a dry run is requested.",
      "description_length": 426,
      "index": 1640,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResourceList",
      "library": "aws-ec2",
      "description": "This module represents a list of string resources, primarily used for handling collections of identifiers or tags in EC2 operations. It provides functions to convert between XML, JSON, and query string formats, enabling seamless integration with AWS API requests and responses. Use cases include parsing EC2 instance tags, security group IDs, or subnet IDs from API responses and preparing them for further processing or output.",
      "description_length": 428,
      "index": 1641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReasonCodesList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of lists of instance status reason codes. It provides operations to convert these lists to and from XML, JSON, and query parameters. Use this module when working with EC2 instance status reporting APIs that require structured reason codes.",
      "description_length": 298,
      "index": 1642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of load permissions for EC2 images. It provides functions to convert load permission lists to and from XML, JSON, and query formats. Use it when managing AMI sharing permissions via AWS API operations like describe or modify image attributes.",
      "description_length": 268,
      "index": 1643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIpv6AddressesList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and JSON serialization of EC2 network interface IPv6 address lists. Works with lists of `NetworkInterfaceIpv6Address.t` values. Used to convert between XML, JSON, and query string formats when managing EC2 instance networking configurations.",
      "description_length": 268,
      "index": 1644,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 volume attributes, including optional parameters like size, volume type, and IOPS. It provides functions to construct, parse, and serialize volume modification requests for interacting with the EC2 API. Use this module when programmatically adjusting volume configurations in AWS EC2 environments.",
      "description_length": 352,
      "index": 1645,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ApplySecurityGroupsToClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for applying security groups to a Client VPN target network. It includes operations to construct the request with required parameters, convert it to query format or JSON, and parse it from XML or JSON input. Concrete use cases involve configuring security settings for AWS Client VPN endpoints by associating specific security groups with VPC resources.",
      "description_length": 393,
      "index": 1646,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayIdSet",
      "library": "aws-ec2",
      "description": "This module represents a list of local gateway IDs as strings. It provides functions to convert the list into query parameters, JSON, and back, as well as parsing from XML and JSON input. It is used when working with AWS EC2 operations that require specifying multiple local gateways, such as describing or modifying their configurations.",
      "description_length": 338,
      "index": 1647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying an availability zone group, including the group name, opt-in status, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring or updating availability zone group settings in EC2.",
      "description_length": 341,
      "index": 1648,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLink",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing VPC ClassicLink configurations, including enabling status, associated tags, and VPC identifier. It provides functions to construct, parse, and serialize instances for use in API requests and responses. Concrete use cases include configuring and retrieving ClassicLink settings for EC2 instances in AWS.",
      "description_length": 352,
      "index": 1649,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disabling VPC classic link functionality, containing an optional boolean indicating the success of the operation. It provides functions to construct, parse, and serialize the result to various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from AWS EC2 API calls that disable VPC classic link support.",
      "description_length": 415,
      "index": 1650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusEvent",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing events related to EC2 instance status, including fields like event ID, code, description, and timestamps. It provides functions to construct, parse, and serialize these events for use in querying AWS services or processing event data from JSON or XML sources. Concrete use cases include handling scheduled maintenance events or instance reboot notifications in EC2 instances.",
      "description_length": 425,
      "index": 1651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllowedPrincipal",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying allowed principals in EC2 security configurations, with optional fields for principal type and identifier. It provides functions to construct, serialize, and deserialize these structures to and from JSON, query parameters, and XML. Use this module when configuring or retrieving security group rules that specify allowed principals by type and ID.",
      "description_length": 399,
      "index": 1652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing a request to create a default VPC, with an optional `dry_run` flag to simulate the operation. It includes functions to construct, parse, and serialize the request in JSON, query string, and XML formats. It is used when interacting with the EC2 API to configure network settings programmatically.",
      "description_length": 346,
      "index": 1653,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of IKE versions in EC2 requests, providing functions to parse, convert to query format, and serialize to and from JSON. It works with lists of `IKEVersionsRequestListValue.t` type, typically used when configuring or querying IPsec VPN tunnel options. Concrete use cases include marshaling IKE version data for API requests and unmarshaling responses from AWS EC2.",
      "description_length": 389,
      "index": 1654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SendDiagnosticInterruptRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for sending diagnostic interrupts to EC2 instances, including the instance ID and an optional dry-run flag. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. Use this module when interacting with EC2's diagnostic interrupt API to simulate instance crashes for troubleshooting purposes.",
      "description_length": 398,
      "index": 1655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for deleting a Client VPN endpoint, including an optional status field. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used to handle the response from an EC2 API call that deletes a Client VPN endpoint, allowing inspection of the resulting status.",
      "description_length": 363,
      "index": 1656,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotPrice",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 spot price data, including fields like availability zone, instance type, product description, spot price, and timestamp. It provides functions to construct, parse, and convert spot price records to and from XML, JSON, and query parameters. It is used to retrieve and process current spot price information from EC2 for cost optimization and instance provisioning decisions.",
      "description_length": 431,
      "index": 1657,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 route tables, including a list of route tables and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. Use this module when processing responses from EC2's `DescribeRouteTables` API call, especially for handling paginated results or integrating with other AWS SDK components.",
      "description_length": 424,
      "index": 1658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 Diffie-Hellman group numbers for EC2 VPN connections. It includes functions to construct, parse, and serialize the value, supporting integration with AWS EC2 APIs for managing IPsec configuration. The module works with XML, JSON, and query string formats for use in API requests and responses.",
      "description_length": 379,
      "index": 1659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageTaskList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 import image tasks. It works with XML nodes, JSON values, and AWS query parameters to convert between and manipulate these representations. Use it when managing virtual machine image imports in AWS EC2, particularly for batch operations or status tracking.",
      "description_length": 324,
      "index": 1660,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 image IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 operations that require multiple image IDs, such as batch deletion or filtering.",
      "description_length": 303,
      "index": 1661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure and associated operations for querying local gateway route table virtual interface group associations in AWS EC2. It includes functions to construct, parse, and serialize requests, supporting filtering, pagination, and dry-run options. Concrete use cases include retrieving association details by ID, applying filters for specific attributes, and handling paginated responses.",
      "description_length": 416,
      "index": 1662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPeeringAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway peering attachments. It provides operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when working with AWS EC2 APIs that return or require multiple transit gateway peering attachment entries, such as describing or filtering peering connections.",
      "description_length": 355,
      "index": 1663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling fast snapshot restores in EC2, including availability zones, source snapshot IDs, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring snapshot restore settings programmatically, particularly when managing snapshot restore behavior across regions or testing configuration changes without applying them.",
      "description_length": 463,
      "index": 1664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing network interface association details for EC2 instances, including optional fields like carrier IP, IP owner ID, public DNS name, and public IP. It provides functions to construct, parse, and convert these associations to and from JSON and query formats. Use this module when handling EC2 instance metadata or responses that include network interface association information.",
      "description_length": 425,
      "index": 1665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance's block device mapping, with optional fields for the device name and EBS volume details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving block device mappings for EC2 instances, particularly during instance launch or inspection.",
      "description_length": 404,
      "index": 1666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding the result of an EC2 host description, including a list of hosts and an optional pagination token. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to handle responses from the EC2 API when listing dedicated hosts with support for paginated results.",
      "description_length": 373,
      "index": 1667,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Spot Instance request in AWS EC2, with fields capturing configuration and state such as spot price, instance ID, launch specification, and lifecycle status. It provides functions to construct, serialize, and convert these requests to and from JSON and XML formats. Concrete use cases include managing spot instance provisioning, tracking request state changes, and integrating with AWS API calls for spot fleet management.",
      "description_length": 474,
      "index": 1668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of client VPN connection records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 client VPN connection data. Use this module when processing API responses or constructing requests involving client VPN connections.",
      "description_length": 364,
      "index": 1669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IKE versions in EC2, with operations to create, parse, and serialize instances. It works with XML nodes, JSON values, and query parameters, enabling seamless integration with AWS API requests and responses. Concrete use cases include handling IKE version configurations in EC2 VPN connections during API calls or resource provisioning.",
      "description_length": 389,
      "index": 1670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 reserved instances offerings, with fields to filter and configure the request such as availability zone, instance type, offering type, and pagination. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when retrieving information about available reserved instance offerings in EC2, including marketplace offerings or specific instance configurations.",
      "description_length": 469,
      "index": 1671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a Client VPN route in AWS EC2, including fields such as the endpoint ID, destination CIDR block, and target subnet ID. It provides functions to construct, serialize, and parse route requests in various formats including JSON and query parameters. Concrete use cases include configuring secure remote access to VPC resources through a Client VPN endpoint programmatically.",
      "description_length": 424,
      "index": 1672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesOfferingsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Reserved Instances offerings, containing a list of offerings and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving or handling Reserved Instances offerings data from AWS EC2, especially when managing pagination.",
      "description_length": 388,
      "index": 1673,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of successfully disabling fast snapshot restore for an EC2 snapshot. It includes fields for the snapshot ID, availability zone, state transitions, timestamps, and owner information. The module provides functions to construct, parse, and serialize this data for use in API requests and responses.",
      "description_length": 356,
      "index": 1674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL entry in Amazon EC2, including fields such as CIDR block, rule action, protocol, and port range. It provides functions to construct, parse, and serialize these entries to and from XML, JSON, and query formats. Concrete use cases include managing network access rules for EC2 instances and integrating with AWS SDK operations that configure network ACLs.",
      "description_length": 417,
      "index": 1675,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsResponse",
      "library": "aws-ec2",
      "description": "This module handles responses from canceling EC2 spot fleet requests by structuring the result into successful and unsuccessful request sets. It provides functions to construct, parse, and serialize the response in various formats including JSON, query parameters, and XML. It is used when managing spot instance fleets to determine which cancellations succeeded and which failed.",
      "description_length": 380,
      "index": 1676,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AllocateHostsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of allocating dedicated hosts in EC2, primarily managing a list of host IDs. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this when working directly with EC2 host allocation responses, particularly for retrieving and serializing host identifiers.",
      "description_length": 344,
      "index": 1677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 image export tasks. It provides functions to convert task lists to and from XML, JSON, and query formats. Use it when managing or serializing the output of EC2 image export operations.",
      "description_length": 217,
      "index": 1678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance network interface attachment, with fields for metadata like attachment time, ID, device index, and status. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when managing network interface attachments in EC2 instances, such as during instance configuration or status monitoring.",
      "description_length": 423,
      "index": 1679,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseHostIdSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of a list of string-based host IDs returned in EC2 responses. It provides operations to convert host ID lists to and from XML, JSON, and query string formats. Use this module when processing EC2 API responses that include sets of host IDs for operations like instance placement or host management.",
      "description_length": 362,
      "index": 1680,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.PricingDetailsList",
      "library": "aws-ec2",
      "description": "This module handles lists of pricing details for EC2 instances, providing operations to convert between XML, JSON, and query formats. It works with lists of `PricingDetail.t` records, which represent individual pricing components. Use this module when processing EC2 pricing data from AWS API responses or when constructing requests that require pricing information in different serialization formats.",
      "description_length": 401,
      "index": 1681,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Scope",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the scope of resources in AWS EC2, with variants for availability zones and regions. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization routines for query parameters, JSON, and XML. These operations are used when handling scoped resource identifiers in EC2 API requests and responses.",
      "description_length": 396,
      "index": 1682,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing sets of local gateway route table VPC associations. It operates on lists of `LocalGatewayRouteTableVpcAssociation.t` values, supporting operations like XML parsing, JSON serialization, and query construction. It is used when managing EC2 local gateway route table associations in AWS, particularly for interacting with the EC2 API's VPC association responses.",
      "description_length": 414,
      "index": 1683,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StartInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of starting EC2 instances, specifically capturing the list of instance state changes. It provides operations to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used when processing responses from the EC2 API after initiating instance start operations.",
      "description_length": 345,
      "index": 1684,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMappingRequestList",
      "library": "aws-ec2",
      "description": "Handles EC2 block device mappings as a list of device configurations. Provides functions to convert mappings to and from XML, JSON, and query parameters. Used when launching EC2 instances with custom storage configurations or modifying instance volumes.",
      "description_length": 253,
      "index": 1685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of EC2 security group lists. Works with XML nodes, JSON values, and query parameters to transform security group data. Useful for interacting with AWS EC2 APIs that require security group configurations in different formats.",
      "description_length": 271,
      "index": 1686,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServiceConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring VPC endpoint service modifications, including fields like service ID, DNS settings, load balancer ARNs, and acceptance requirements. It provides functions to construct, parse, and serialize these configurations for use in API requests. Use this module when updating VPC endpoint service properties in AWS EC2, such as enabling private DNS or modifying associated load balancers.",
      "description_length": 428,
      "index": 1687,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatePlacementRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement configurations when launching EC2 instances using a launch template. It includes fields for availability zone, affinity, host placement, tenancy, and other placement-related settings. The module provides functions to construct, parse, and serialize these placement configurations for use in API requests, particularly when integrating with AWS EC2 launch templates.",
      "description_length": 427,
      "index": 1688,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnSecurityGroupIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of security group IDs for client VPN configurations. It provides functions to convert the list to query parameters, parse it from XML nodes, and serialize or deserialize it to and from JSON. It is used when configuring or retrieving client VPN endpoint settings that require associated security groups.",
      "description_length": 329,
      "index": 1689,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a transit gateway attachment in AWS EC2, such as `Available`, `Deleting`, or `Failed`. It provides direct conversions between these states and strings, JSON values, and XML nodes, enabling seamless serialization and deserialization. These functions are used when processing API responses or constructing requests that involve transit gateway attachment state transitions.",
      "description_length": 446,
      "index": 1690,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTablePropagationsResult",
      "library": "aws-ec2",
      "description": "This module handles results from querying AWS EC2 transit gateway route table propagations. It includes operations to construct, parse, and serialize result data, supporting XML, JSON, and query string formats. It works with transit gateway route table propagation lists and optional pagination tokens for handling large result sets.",
      "description_length": 333,
      "index": 1691,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeletePlacementGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a placement group in EC2, including optional dry-run functionality and the group name. It provides constructors, JSON and query parameter serialization, and parsing from XML and JSON formats. It is used to prepare and manage deletion requests for EC2 placement groups before sending them via an API client.",
      "description_length": 359,
      "index": 1692,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an unsuccessful credit specification update for an EC2 instance, containing an optional instance ID and an error. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This module is used to handle errors when modifying credit specifications for EC2 instances in AWS.",
      "description_length": 374,
      "index": 1693,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MoveAddressToVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure and conversion functions for moving an EC2 address to a VPC. It works with XML, JSON, and query string formats, handling data types like Boolean and String. It is used to construct and serialize requests to reassign EC2 public IP addresses to VPC environments.",
      "description_length": 300,
      "index": 1694,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for updating ingress security group rule descriptions. It includes fields for dry-run mode, group identifier, and IP permissions, and supports conversion to and from JSON and query formats. It is used to modify security group rule descriptions in EC2 by providing updated IP permission entries.",
      "description_length": 334,
      "index": 1695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetEventType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing event types for EC2 fleets, including instance changes, fleet changes, and service errors. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. These functions support handling event data in APIs and logs specific to EC2 fleet management.",
      "description_length": 378,
      "index": 1696,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionField",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing fields of a Traffic Mirror session, such as packet length, description, and virtual network ID. It includes conversions to and from strings, JSON, and query formats, along with parsing from XML. It is used when configuring or retrieving Traffic Mirror session attributes in EC2.",
      "description_length": 330,
      "index": 1697,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Traffic Mirror session IDs, providing functions to convert them to and from JSON and query parameters. It supports parsing from XML nodes and constructing empty or initialized lists. Use this when working with AWS EC2 Traffic Mirror APIs that require session ID lists in specific formats.",
      "description_length": 321,
      "index": 1698,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MonitorInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for monitoring EC2 instances, containing a list of instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing API requests to enable monitoring for specific EC2 instances or testing request configurations without actual execution.",
      "description_length": 388,
      "index": 1699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 image export requests, including parameters like disk format, target S3 location, and optional metadata. It provides functions to construct, serialize, and parse these requests, specifically working with string, boolean, and custom types like `DiskImageFormat` and `ExportTaskS3LocationRequest`. Concrete use cases include initiating AMI exports to S3 and configuring export settings for virtual machine images.",
      "description_length": 468,
      "index": 1700,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for copying FPGA images in Amazon EC2, including fields like source image ID, source region, and optional description and name. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. Concrete use cases include preparing and submitting FPGA image copy operations across regions in EC2.",
      "description_length": 386,
      "index": 1701,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting VPC endpoint connections, including fields for dry-run mode, service ID, and a list of VPC endpoint IDs. It provides functions to construct, parse, and serialize the request for use in API calls to AWS EC2. The module supports operations like query string generation, JSON serialization, and XML parsing, tailored for managing VPC endpoint connection rejections.",
      "description_length": 416,
      "index": 1702,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing FPGA image attributes, primarily working with the `FpgaImageAttribute.t` type. It provides functions to construct, parse, and serialize the result to query parameters or JSON, and includes parsing from XML nodes. Use cases include retrieving and processing FPGA image metadata in EC2 environments, such as when managing FPGA-based instances or querying image permissions and properties.",
      "description_length": 431,
      "index": 1703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling spot instance requests, including a dry run flag and a list of spot instance request IDs. It provides functions to construct, parse, and serialize the request for use with EC2 APIs. Use this module when programmatically canceling spot instance requests in AWS EC2, particularly when managing instance lifecycle or cost optimization workflows.",
      "description_length": 396,
      "index": 1704,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a subnet association with optional subnet ID and state fields. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include managing subnet associations in AWS EC2 transit gateway configurations, particularly for multicast domain setups.",
      "description_length": 367,
      "index": 1705,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of block device mapping requests for EC2 launch templates. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when configuring or modifying EC2 instance storage settings through launch templates.",
      "description_length": 296,
      "index": 1706,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 fleet launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize these configurations to support creating or modifying EC2 fleets with varying instance configurations. Use cases include setting up diverse instance types and launch parameters within a single fleet request.",
      "description_length": 422,
      "index": 1707,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupSourcesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering multicast group sources for a transit gateway in EC2. It provides constructors, parsing, and serialization functions for a structure that may contain a `TransitGatewayMulticastRegisteredGroupSources` object. It is used to process and return response data from EC2 API calls related to multicast group source registration.",
      "description_length": 367,
      "index": 1708,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNatGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing NAT gateways in EC2, including optional filters, result limits, and gateway IDs. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query parameters. Concrete use cases include querying NAT gateway details with specific filters, paginating results using a next token, and integrating with AWS SDK operations that require NAT gateway information.",
      "description_length": 453,
      "index": 1709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template names represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple launch template names as input.",
      "description_length": 293,
      "index": 1710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of network interface permissions. It provides functions to convert between XML, JSON, and internal OCaml representations, as well as to build and normalize these lists. It is used when managing EC2 network interface permissions via AWS API requests and responses.",
      "description_length": 346,
      "index": 1711,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the status of a network interface in EC2, with specific values like `Available`, `Associated`, and `Attaching`. It includes functions to convert between string representations and the variant type, as well as serialization to and from JSON and query formats. It is used to interpret and format network interface status values when interacting with EC2 APIs or processing related XML, JSON, or query data.",
      "description_length": 464,
      "index": 1712,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a VPC CIDR block, including its current state code and an optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing VPC CIDR blocks in AWS EC2, particularly for tracking association states and error messages during CIDR block operations.",
      "description_length": 408,
      "index": 1713,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying permissions of a VPC endpoint service, including fields like service ID, filters, and pagination controls. It provides functions to construct, parse, and serialize the request in formats like JSON and query strings. Concrete use cases include configuring access control for VPC endpoint services and retrieving permission details for auditing or automation.",
      "description_length": 410,
      "index": 1714,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item related to fast snapshot restore state disabling in EC2, including availability zone context and specific error details. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when handling responses from AWS EC2 API calls that report per-zone fast snapshot restore disable errors.",
      "description_length": 414,
      "index": 1715,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RecurringCharge",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing recurring charges with optional amount and frequency fields. It provides functions to construct, parse, and convert recurring charge data to and from XML, JSON, and query formats. It is used to model billing information for EC2 resources like reserved instances or subscriptions.",
      "description_length": 333,
      "index": 1716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a route creation operation in EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Use cases include handling the output of route table modifications and integrating with AWS SDK workflows for network configuration.",
      "description_length": 388,
      "index": 1717,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` that represents capacity reservation options for EC2 instances, primarily holding an optional usage strategy. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Use this when configuring capacity reservations in EC2 requests, particularly when specifying how reserved capacity should be utilized.",
      "description_length": 404,
      "index": 1718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachClassicLinkVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for attaching a classic link to a VPC in EC2. It includes fields for dry-run mode, security groups, instance ID, and VPC ID, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring network connectivity between EC2 instances and VPCs using classic link.",
      "description_length": 349,
      "index": 1719,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotMaintenanceStrategiesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot fleet maintenance strategies, specifically supporting capacity rebalance settings. It provides functions to create, serialize, and parse these configurations, enabling integration with AWS EC2 spot fleet requests. Use this module when setting up or modifying spot fleets to handle instance rebalancing during maintenance events.",
      "description_length": 386,
      "index": 1720,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEbsBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS block device configuration for EC2 instances, with optional fields for encryption, deletion behavior, IOPS, KMS key, snapshot, volume size, and volume type. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include specifying EBS volumes when creating EC2 launch templates or modifying existing ones via AWS API calls.",
      "description_length": 458,
      "index": 1721,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAccelerator",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying elastic inference accelerators in an EC2 launch template, including their type and optional count. It provides functions to create, parse, and convert these accelerators to and from JSON and query formats. Use this module when configuring EC2 instances with elastic inference capabilities, such as attaching GPU or custom inference hardware resources.",
      "description_length": 403,
      "index": 1722,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePublicIpv4PoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying public IPv4 pools in EC2, supporting filtering, pagination, and selection by pool ID. It includes functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving metadata about public IPv4 address ranges and managing pool information in AWS infrastructure automation.",
      "description_length": 388,
      "index": 1723,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling EC2 spot fleet requests, including fields to specify dry run mode, fleet request IDs, and whether to terminate associated instances. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include managing spot instance fleets by programmatically canceling multiple requests and controlling instance termination behavior.",
      "description_length": 435,
      "index": 1724,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 reserved instances, including their IDs, optional client token, and target configurations. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when adjusting the configuration of existing reserved instances in EC2, ensuring the request adheres to the expected format for submission.",
      "description_length": 404,
      "index": 1725,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointServiceConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration request structure for creating a VPC endpoint service. It includes fields for specifying load balancers, DNS settings, tagging, and client tokens, along with functions to construct, serialize, and parse the request in various formats. It is used when setting up VPC endpoint services that integrate with network or gateway load balancers in AWS.",
      "description_length": 383,
      "index": 1726,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of transit gateway multicast domain lists. It provides functions to convert between XML, JSON, and query string formats and a list structure of transit gateway multicast domain data. Use it when working with AWS EC2 transit gateway multicast domain responses in different data formats.",
      "description_length": 346,
      "index": 1727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating an EC2 image request, including fields like instance ID, image name, block device mappings, and optional settings such as description and reboot behavior. It provides functions to construct, serialize, and parse the request in various formats including JSON and query parameters. Concrete use cases include preparing an API call to create a custom Amazon Machine Image (AMI) from a running EC2 instance.",
      "description_length": 453,
      "index": 1728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client authentication methods in a virtual private network, supporting options like Active Directory, mutual TLS, and federated authentication. It provides constructors, serialization to JSON and query formats, and parsing from XML for these configurations. Concrete use cases include setting up authentication for EC2 Client VPN endpoints with specific identity providers or certificate authorities.",
      "description_length": 453,
      "index": 1729,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeType",
      "library": "aws-ec2",
      "description": "This module defines a variant type `t` representing different volume types for EC2 storage, including Standard, Io1, Gp2, and others. It provides bidirectional conversions between strings and volume types, along with serialization to and from JSON and query parameters. It is used to specify and handle storage volume configurations in EC2 API requests and responses.",
      "description_length": 367,
      "index": 1730,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermissionList",
      "library": "aws-ec2",
      "description": "Handles EC2 volume creation permissions by converting between XML, JSON, and query formats. Works with lists of CreateVolumePermission structures containing user or group access settings. Used to manage shared volume access in AWS EC2 by serializing and deserializing permission data for API requests.",
      "description_length": 301,
      "index": 1731,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCountList",
      "library": "aws-ec2",
      "description": "This module handles lists of instance count data in AWS EC2 operations. It provides functions to convert instance count lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return instance count information, such as describing instance counts or managing instance limits.",
      "description_length": 360,
      "index": 1732,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tag specifications, providing functions to convert them to and from JSON and query formats. It works with XML nodes for parsing and supports direct manipulation of tag specification lists. Use this module when constructing or processing EC2 resource tags in AWS API requests or responses.",
      "description_length": 321,
      "index": 1733,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 encryption algorithms used in EC2 VPN connections. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of Phase1EncryptionAlgorithmsListValue.t values. It is used when configuring or retrieving VPN tunnel options in AWS EC2, specifically for IPsec settings.",
      "description_length": 389,
      "index": 1734,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceLifecycle",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the lifecycle type of an EC2 instance, with variants `Spot` and `On_demand`. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. These operations support handling instance lifecycle values in API requests and responses, particularly when interacting with AWS EC2 services.",
      "description_length": 406,
      "index": 1735,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Client VPN route with fields for endpoint ID, CIDR block, target subnet, route type, origin, status, and description. It provides functions to construct, parse, and convert route data to and from XML, JSON, and query formats. Concrete use cases include managing Client VPN routing configurations in AWS EC2, particularly when creating, updating, or inspecting routes associated with a Client VPN endpoint.",
      "description_length": 457,
      "index": 1736,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring and requesting EC2 dedicated hosts. It includes fields for specifying availability zone, instance type, quantity, and optional settings like auto placement and host recovery. The module supports serialization to and from JSON and query formats, enabling integration with AWS API requests.",
      "description_length": 341,
      "index": 1737,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetErrorsSet",
      "library": "aws-ec2",
      "description": "This module handles a list of CreateFleetError values, providing direct conversions to and from XML, JSON, and query formats. It supports structured parsing and serialization for AWS EC2 fleet error responses. Use this module when processing batch fleet creation errors from AWS API calls.",
      "description_length": 289,
      "index": 1738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of updating ingress security group rule descriptions in EC2. It provides functions to create, parse, and serialize a result that contains an optional boolean indicating success. The module works with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 297,
      "index": 1739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshot IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return lists of snapshot IDs.",
      "description_length": 287,
      "index": 1740,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an image import operation in AWS EC2, containing fields such as image ID, status, encryption settings, and associated snapshots. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from EC2 image import tasks, particularly for tracking task status or retrieving imported image metadata.",
      "description_length": 449,
      "index": 1741,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying fast snapshot restore configurations in EC2. It includes filters, pagination controls, and dry run options, and supports conversion to and from JSON and query formats. It is used to construct and process API requests to describe the status of fast snapshot restores for specific snapshots.",
      "description_length": 342,
      "index": 1742,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a VPC endpoint, specifically containing an optional boolean indicating success or failure. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include handling responses from AWS EC2 API calls that modify VPC endpoint configurations, such as enabling or disabling private DNS.",
      "description_length": 425,
      "index": 1743,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAggregateIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing aggregated ID format settings in EC2. It provides functions to construct, parse, and serialize a result containing whether long IDs are used and a list of ID format statuses. It works with boolean and list data types, specifically for ID format configuration responses.",
      "description_length": 314,
      "index": 1744,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeValues",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `Devpay` and `Marketplace`, representing product code types in EC2. It includes functions to convert between strings and the variant type, as well as serialization and deserialization routines for JSON, query parameters, and XML. These operations are used when interacting with AWS EC2 APIs to handle product code values in requests and responses.",
      "description_length": 411,
      "index": 1745,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidrState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a BYOIP CIDR block in EC2, with specific values like `Advertised`, `Deprovisioned`, and `Pending_provision`. It provides bidirectional conversions between string representations and the enumerated type, along with standard serialization and parsing functions for JSON, XML, and query parameters. Use cases include tracking and managing the lifecycle of Bring Your Own IP address ranges within AWS EC2.",
      "description_length": 466,
      "index": 1746,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of virtual interface group association IDs for local gateway route tables in EC2. Provides parsing from XML, conversion to query parameters and JSON, and extraction from JSON. Used when managing associations between virtual interface groups and local gateway route tables in AWS EC2.",
      "description_length": 296,
      "index": 1747,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataEndpointState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with two states, `Disabled` and `Enabled`, representing the endpoint state of instance metadata in a launch template. It includes functions to convert between strings and the enumerated type, supporting serialization to and from JSON, query parameters, and XML. These operations are used when configuring or interpreting EC2 launch templates in AWS deployments.",
      "description_length": 400,
      "index": 1748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuIdSet",
      "library": "aws-ec2",
      "description": "Handles parsing, formatting, and conversion of lists of EC2 Elastic GPU IDs for use in AWS API requests and responses. Works with `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t` for communication with AWS services. Used when managing Elastic GPU attachments, detaching, or querying GPU resources in EC2 instances.",
      "description_length": 313,
      "index": 1749,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of network ACLs. It provides functions to convert network ACL lists to and from XML, JSON, and query parameters. Use this module when working with AWS EC2 API requests and responses that involve network ACL list data.",
      "description_length": 285,
      "index": 1750,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HibernationOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for EC2 instance hibernation settings, containing an optional boolean indicating whether hibernation is configured. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or querying the hibernation state of EC2 instances in AWS.",
      "description_length": 355,
      "index": 1751,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting a Client VPN client configuration, including the endpoint ID and an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include generating client configuration exports for AWS Client VPN endpoints and validating configurations without applying changes.",
      "description_length": 427,
      "index": 1752,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an EC2 fleet with options to configure spot and on-demand instances, capacity specifications, termination policies, and tagging. It provides functions to construct, parse, and serialize fleet requests in various formats such as JSON and query parameters. Use this module when programmatically launching and managing EC2 fleets with custom configurations.",
      "description_length": 407,
      "index": 1753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a CIDR block and a VPN connection ID when creating a route in a virtual private network. It includes functions to construct, serialize, and parse route requests using JSON, query strings, or XML. Concrete use cases include configuring network routing for EC2-based VPN connections and integrating with AWS management tools.",
      "description_length": 375,
      "index": 1754,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StateReason",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling state reasons in EC2, with optional code and message fields. It provides functions to construct, parse, and convert state reason data to and from JSON and query formats. Use this module when working with EC2 instance state changes that include diagnostic information.",
      "description_length": 317,
      "index": 1755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 import image task, with fields for metadata like architecture, encryption status, KMS key ID, platform, and task status. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing custom AMI imports, tracking task progress, or integrating with AWS EC2 APIs that require task details in specific serialization formats.",
      "description_length": 456,
      "index": 1756,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of traffic mirror filter sets in AWS EC2. It provides functions to convert between XML, JSON, and internal OCaml representations of a list of traffic mirror filters. It is used when configuring or retrieving traffic mirroring rules in AWS networking setups.",
      "description_length": 330,
      "index": 1757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing routes for a Client VPN endpoint in EC2. It provides operations to create, parse, and serialize route data along with an optional pagination token. Use this module when retrieving and processing route information from AWS Client VPN configurations, particularly for paginated responses.",
      "description_length": 331,
      "index": 1758,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConfirmProductInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for confirming product instance requests in EC2, including instance ID, product code, and an optional dry-run flag. It provides functions to construct, parse, and convert the structure to query parameters or JSON format. Use this when interacting with EC2 APIs to verify product instance ownership or test request validity without making actual changes.",
      "description_length": 390,
      "index": 1759,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing instance metadata options for EC2 instances, with fields for state, HTTP tokens, hop limit, and HTTP endpoint. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. It is used when configuring or retrieving metadata settings for EC2 instances in AWS.",
      "description_length": 360,
      "index": 1760,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring transit gateway options, including ASN, route table associations, DNS support, and multicast settings. It provides functions to construct instances, convert to and from JSON and query formats, and parse XML data. Use this module when creating or managing AWS EC2 transit gateways with custom routing and connectivity configurations.",
      "description_length": 403,
      "index": 1761,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExecutableByStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of strings representing executable entities in EC2, such as user IDs or group names. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Use it when working with EC2 API operations that require or return executable permissions, such as describing images or managing launch permissions.",
      "description_length": 369,
      "index": 1762,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FederatedAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for federated authentication settings in EC2, with optional SAML provider ARNs. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving federated identity options for EC2 instances using SAML-based authentication.",
      "description_length": 352,
      "index": 1763,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModification",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying reserved EC2 instances, including fields like modification ID, status, timestamps, and associated instance IDs. It provides functions to construct, parse, and convert the structure to and from JSON, query format, and XML. Concrete use cases include handling responses from AWS EC2 API calls that modify reserved instances, such as tracking modification status and results.",
      "description_length": 446,
      "index": 1764,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance types, providing operations to convert them to and from JSON, query parameters, and XML. It includes parsing from XML nodes and constructing from JSON values. Use this module when working with AWS EC2 APIs that require listing or processing multiple instance types in different data formats.",
      "description_length": 333,
      "index": 1765,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options, including HTTP tokens, endpoint state, and hop limit settings. It provides functions to construct, parse, and serialize these options for use in EC2 instance configuration requests. Use cases include setting up secure metadata access and controlling network hop limits in AWS EC2 instances.",
      "description_length": 370,
      "index": 1766,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 instance attributes, supporting operations like updating block device mappings, security groups, and instance behavior settings. It works with data types such as boolean values, strings, and lists to represent instance configuration options. Concrete use cases include changing an instance's EBS optimization setting, updating its network interfaces, or adjusting shutdown behavior.",
      "description_length": 440,
      "index": 1767,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpRanges",
      "library": "aws-ec2",
      "description": "This module handles IP range data as lists of strings, providing functions to convert between XML, JSON, query parameters, and internal string list representations. It supports parsing IP ranges from XML nodes, serializing them to query format or JSON, and constructing or extracting them from JSON values. Concrete use cases include processing EC2 security group rules and network configuration data involving IP address ranges.",
      "description_length": 429,
      "index": 1768,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ShutdownBehavior",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Stop` and `Terminate`, representing EC2 instance shutdown behaviors. It includes functions to convert between strings and the `t` type, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used when configuring EC2 instance behavior on shutdown, ensuring correct values are passed to AWS APIs.",
      "description_length": 386,
      "index": 1769,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway attachment in AWS EC2, including fields such as attachment ID, transit gateway ID, resource type, state, and tags. It provides functions to construct, parse, and serialize these attachments for use in API requests and responses. Use cases include managing connections between transit gateways and resources like VPCs or VPNs, tracking attachment states, and handling tag-based metadata.",
      "description_length": 454,
      "index": 1770,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetReservedInstancesExchangeQuoteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exchanging Reserved Instances in EC2, supporting operations to create, serialize, and parse exchange quotes. It works with identifiers for reserved instances and target configuration sets to model exchange scenarios. Use this module when evaluating or initiating Reserved Instance exchanges in EC2.",
      "description_length": 342,
      "index": 1771,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceStatusResult",
      "library": "aws-ec2",
      "description": "This module represents the result of an EC2 instance status description, containing a list of instance statuses and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when handling responses from EC2 instance status queries, particularly for processing or forwarding status data in AWS management tools.",
      "description_length": 422,
      "index": 1772,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteEgressOnlyInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of deleting an egress-only internet gateway, with an optional boolean return code. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used specifically to handle responses from the EC2 API after attempting to delete an egress-only internet gateway.",
      "description_length": 378,
      "index": 1773,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for updating egress rule descriptions on a security group. It includes fields for dry-run mode, group identifier, and IP permissions, and supports conversion to and from JSON and query formats. It is used when modifying outbound security group rules in AWS EC2, enabling precise description updates for IP-based access control.",
      "description_length": 367,
      "index": 1774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC ClassicLink configurations in EC2. It provides functions to create, parse, and serialize results containing a list of VPCs with ClassicLink attributes. Use it when querying EC2 to retrieve and process ClassicLink-enabled VPC information in AWS.",
      "description_length": 293,
      "index": 1775,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting specific attributes of an EC2 image. It includes functions to construct, parse, and serialize the request for use with AWS API operations. The module works directly with image identifiers and attribute names, supporting dry-run checks during resets.",
      "description_length": 303,
      "index": 1776,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "Handles EC2 instance block device mappings by converting between XML, JSON, and query string formats. Works with lists of `InstanceBlockDeviceMapping.t` records. Used to process and serialize block device configurations when launching or describing EC2 instances.",
      "description_length": 263,
      "index": 1777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in an EC2 launch template request, with optional fields for device name, virtual name, EBS configuration, and no-device indicator. It provides functions to construct instances, parse XML input, and convert to query parameters or JSON format. Use this module when configuring storage for EC2 instances at launch time, particularly when defining EBS volumes or mapping ephemeral disks.",
      "description_length": 457,
      "index": 1778,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of traffic mirror target configurations. It provides functions to convert between XML, JSON, and internal OCaml representations, as well as constructing and extracting target sets. It is used when configuring or retrieving traffic mirroring targets in EC2, such as when setting up network monitoring or packet capture.",
      "description_length": 401,
      "index": 1779,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermissionModifications",
      "library": "aws-ec2",
      "description": "This module handles modifications to launch permissions for EC2 images by managing lists of permissions to add or remove. It works with `LaunchPermissionList.t` structures, enabling precise updates to who can launch an image. Use this module when adjusting access controls for EC2 images in AWS, such as granting or revoking specific accounts or organizations.",
      "description_length": 360,
      "index": 1780,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying specific attributes of an EC2 network interface, including the attribute type, dry run flag, and network interface ID. It provides functions to construct, parse, and serialize these requests into query or JSON formats. Concrete use cases include retrieving details like description, security groups, or source/destination checking status for a specific network interface in AWS EC2.",
      "description_length": 435,
      "index": 1781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAccelerators",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of elastic inference accelerators. It provides functions to convert accelerator data to and from XML, JSON, and AWS query formats. Use this module when working with AWS EC2 instance types that include elastic inference accelerators, particularly for API requests and responses.",
      "description_length": 352,
      "index": 1782,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FastSnapshotRestoreStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of fast snapshot restore in EC2, including enabling, optimizing, enabled, disabling, and disabled. It provides bidirectional conversions between the enumerated type and strings, along with serialization to and from JSON and query parameters. The module is used to interpret and manipulate fast snapshot restore state codes when interacting with EC2 APIs, particularly for snapshot management and restoration status tracking.",
      "description_length": 496,
      "index": 1783,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedTargetNetworkSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of associated target network structures. It provides functions to convert these lists to and from XML, JSON, and query parameters, ensuring correct formatting for AWS EC2 API interactions. Use this module when working with VPC association sets in AWS EC2, particularly for operations involving network load balancers or VPC peering connections.",
      "description_length": 412,
      "index": 1784,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestHostIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based request host IDs for EC2 operations. It provides functions to convert, parse, and serialize these lists into query parameters, JSON, and XML formats. It is used when managing host reservations or querying host status in EC2 APIs.",
      "description_length": 271,
      "index": 1785,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an import snapshot task in EC2, including optional description, task ID, snapshot task details, and tags. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and back from JSON. Use this module when managing snapshot imports programmatically, such as tracking task status or serializing task data for storage or transmission.",
      "description_length": 419,
      "index": 1786,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an IAM instance profile association, including fields like association ID, instance ID, IAM profile, state, and timestamp. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance associations with IAM roles, particularly for serialization and deserialization during API interactions.",
      "description_length": 431,
      "index": 1787,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Traffic Mirror filter, including its ID, ingress and egress rules, associated network services, description, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving Traffic Mirror filters in EC2 for network traffic monitoring and analysis.",
      "description_length": 405,
      "index": 1788,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionListRequest",
      "library": "aws-ec2",
      "description": "This module defines a list of load permission requests for EC2 images, supporting operations to convert the list to and from JSON, query format, and XML. It works with `LoadPermissionRequest.t` records, organizing them into lists for batch processing. It is used when modifying or describing image launch permissions across accounts.",
      "description_length": 333,
      "index": 1789,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupReference",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a security group reference with optional fields for group ID, referencing VPC ID, and VPC peering connection ID. It includes functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used when handling cross-VPC security group references in EC2 operations, particularly during security group authorization or modification workflows involving peered VPCs.",
      "description_length": 463,
      "index": 1790,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of describing a VPC attribute, including the VPC ID and boolean flags for DNS settings. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and modifying DNS configuration details of a VPC in AWS EC2.",
      "description_length": 360,
      "index": 1791,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to delete a Spot Datafeed subscription, containing an optional `dry_run` boolean field. It provides functions to construct, parse, and serialize the request for use in API calls, specifically handling conversion to query parameters and JSON format. The module is used when interacting with EC2's Spot Instance Datafeed service to manage subscription deletion programmatically.",
      "description_length": 442,
      "index": 1792,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageList",
      "library": "aws-ec2",
      "description": "This module represents a list of disk images in the EC2 API, providing functions to convert the list to and from JSON, XML, and query parameters. It works with `DiskImage.t` lists and supports serialization and deserialization for use in API requests and responses. Concrete use cases include handling disk image data when launching or describing EC2 instances.",
      "description_length": 361,
      "index": 1793,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying reserved EC2 instances, supporting filtering by instance IDs, offering class, and type. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving reserved instance details for cost management and resource planning in AWS EC2 environments.",
      "description_length": 378,
      "index": 1794,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceMemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing FPGA device memory information with an optional size in MiB. It provides functions to create, parse, and convert the structure to and from XML, JSON, and query formats. It is used when working with EC2 instance types that include FPGA devices, particularly for specifying or retrieving memory configuration details.",
      "description_length": 365,
      "index": 1795,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeSecurityGroupIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for authorizing ingress traffic to a security group, supporting fields like IP ranges, port ranges, and protocol types. It provides operations to construct, serialize, and parse these requests in formats suitable for AWS API calls. Use cases include programmatically updating EC2 security group rules with specific IP permissions or port configurations.",
      "description_length": 393,
      "index": 1796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAccelerator",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying elastic inference accelerators, including type and optional count fields. It provides functions to create instances, parse XML input, and convert to query parameters or JSON format. Use this module when configuring EC2 instances with inference acceleration capabilities, such as attaching GPU-backed inference devices to instances.",
      "description_length": 383,
      "index": 1797,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to disabling fast snapshot restore on EC2 snapshots. It includes operations for constructing, parsing, and serializing the error item, which contains an optional snapshot ID and a set of state-related errors. It is used when processing responses from the EC2 API to track which snapshots failed to disable fast restore and why.",
      "description_length": 392,
      "index": 1798,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 product codes, providing functions to convert them to and from XML, JSON, and query parameters. It works with lists of `ProductCode.t` values, representing metadata about EC2 instance product codes. Use this module when interacting with AWS EC2 APIs that require or return product code lists in different serialization formats.",
      "description_length": 360,
      "index": 1799,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a Traffic Mirror filter rule, containing an optional ID of the deleted rule. It provides functions to construct the result, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Concrete use cases include handling responses from AWS EC2 API calls that delete Traffic Mirror filter rules, enabling downstream processing or logging of the deleted rule's ID.",
      "description_length": 464,
      "index": 1800,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandOptions",
      "library": "aws-ec2",
      "description": "This module defines configuration options for on-demand instances within an EC2 fleet request. It includes fields to control allocation strategy, capacity reservations, instance type and availability zone constraints, target capacity, and spending limits. These settings are used when creating or managing EC2 fleets to specify how on-demand instances should be provisioned.",
      "description_length": 374,
      "index": 1801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportStatusType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two possible values, `Ok` and `Impaired`, representing status reports for EC2 instances. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and generate instance status data in AWS EC2 API requests and responses.",
      "description_length": 399,
      "index": 1802,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Reservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 reservation, containing associated security groups, instances, owner and reservation identifiers. It provides functions to construct, parse, and convert reservation data to and from XML, JSON, and query formats. Concrete use cases include handling EC2 instance reservation responses from AWS API calls and serializing them for further processing or storage.",
      "description_length": 414,
      "index": 1803,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing detailed configuration and capabilities of EC2 instance types, including properties like CPU, memory, storage, and supported features. It provides functions to construct, serialize, and parse instance type information, enabling integration with AWS EC2 APIs and tools that analyze or select instance types based on specific requirements. Use cases include filtering instances by supported virtualization types, checking EBS optimization, or determining availability in free tier.",
      "description_length": 529,
      "index": 1804,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfigurationValueList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP configuration values in EC2, specifically working with `AttributeValue.t` lists. It provides operations to parse, convert to query format, and serialize to and from JSON. Use this module when managing EC2 instance metadata options that involve lists of DHCP values, such as boot-related attributes.",
      "description_length": 332,
      "index": 1805,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of purchasing scheduled EC2 instances by providing a structured type to store the set of purchased instances. It includes functions to create, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include processing responses from the EC2 API after purchasing scheduled instances and serializing the result for logging or further processing.",
      "description_length": 409,
      "index": 1806,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceReservationValueSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of reserved instance reservation values. It provides functions to convert between XML, JSON, and internal OCaml representations, specifically working with lists of `ReservedInstanceReservationValue.t`. It is used when processing AWS EC2 reserved instance responses and building requests involving reservation values.",
      "description_length": 399,
      "index": 1807,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RebootInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rebooting EC2 instances, containing a list of instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include preparing EC2 instance reboot commands with safety checks and converting them into query parameters or JSON for transmission.",
      "description_length": 376,
      "index": 1808,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of placement group IDs in EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It works directly with lists of base string types, focusing on data serialization and deserialization for API interactions.",
      "description_length": 316,
      "index": 1809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusDetailsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of volume status details. It provides functions to convert between XML, JSON, and query string representations of this list structure. Use this module when processing EC2 volume status responses or constructing requests that require volume status details.",
      "description_length": 338,
      "index": 1810,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring a spot instance data feed subscription request, including required parameters like the S3 bucket and optional settings such as dry run and prefix. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include setting up logging for EC2 spot instances by specifying where and how the data feed should be delivered.",
      "description_length": 462,
      "index": 1811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateway route tables in EC2, providing constructors, JSON and XML serialization, and parsing for a structure that includes a set of local gateway route tables and an optional pagination token. It works with custom types representing sets of local gateway route tables and string options for pagination. Concrete use cases include processing and serializing responses from the EC2 API when listing local gateway route tables.",
      "description_length": 475,
      "index": 1812,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeByoipCidrsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying BYOIP CIDR blocks in EC2, including optional dry-run flag, result limit, and pagination token. It provides functions to construct, serialize, and parse these requests in various formats including JSON, query strings, and XML. Use this module when interacting with the EC2 API to list BYOIP CIDR ranges with support for pagination and dry-run checks.",
      "description_length": 402,
      "index": 1813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 transit gateway route table, including the route table ID, destination CIDR block, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API operations. Concrete use cases include configuring network routing in AWS environments by removing specific CIDR-based routes from transit gateways.",
      "description_length": 424,
      "index": 1814,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoreCountList",
      "library": "aws-ec2",
      "description": "This module handles lists of integer values representing core counts in EC2 configurations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with EC2 instance types or virtualization settings that require core count specifications.",
      "description_length": 336,
      "index": 1815,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointConnectionNotificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoint connection notifications in AWS EC2. It includes a data structure that holds a set of unsuccessful deletion items, along with functions to construct, parse, and serialize the result for use in API requests and responses. It is used when managing VPC endpoint connections to track which notifications failed to delete during an operation.",
      "description_length": 393,
      "index": 1816,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdSet",
      "library": "aws-ec2",
      "description": "Handles parsing, formatting, and conversion of EC2 instance ID lists for API requests and responses. Works with lists of base string types, transforming them into query parameters, JSON lists, or XML node representations. Used when managing multiple EC2 instances in batch operations like termination, reboot, or status checks.",
      "description_length": 327,
      "index": 1817,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying FPGA image attributes in AWS EC2, supporting operations like updating permissions, descriptions, and names. It works with scalar types like strings and booleans, as well as lists and nested structures for permissions and product codes. It is used to construct and serialize API requests to modify FPGA image settings programmatically.",
      "description_length": 388,
      "index": 1818,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IP address ranges with CIDR notation and an optional description. It provides functions to construct, parse, and convert these ranges to and from query parameters and JSON format. It is used when configuring network access rules, such as security group ingress or egress policies, where CIDR blocks need to be specified with optional metadata.",
      "description_length": 397,
      "index": 1819,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImagesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing FPGA images in EC2, providing constructors, JSON and XML conversions, and query parameter serialization. It works with FPGA image lists and optional pagination tokens. Use it to process and serialize responses from EC2's FPGA image queries, supporting both direct data handling and integration with AWS API request flows.",
      "description_length": 366,
      "index": 1820,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewaySubnetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Transit Gateway subnet IDs, represented as string lists. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 Transit Gateway APIs that require or return subnet ID lists.",
      "description_length": 309,
      "index": 1821,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 encryption algorithm request values for EC2. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `Phase1EncryptionAlgorithmsRequestListValue.t`. It is used when configuring or modifying EC2 VPN connections that require specifying encryption algorithms for IKE Phase 1 negotiation.",
      "description_length": 430,
      "index": 1822,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 integrity algorithms for EC2, containing an optional string value. It provides functions to construct, parse, and serialize the value to query parameters, JSON, and XML formats. Use this module when configuring or retrieving IPsec VPN tunnel options in EC2 Virtual Private Gateways.",
      "description_length": 368,
      "index": 1823,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 host information, supporting filtering by criteria, specifying host IDs, and controlling result pagination. It includes functions to construct, serialize, and parse requests in various formats including JSON and XML. Concrete use cases include building paginated host queries for monitoring, inventory, or resource management workflows.",
      "description_length": 393,
      "index": 1824,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHibernationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing hibernation options for an EC2 launch template, with an optional boolean field indicating whether hibernation is configured. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. Use this module when configuring or modifying EC2 instance launch templates with hibernation support.",
      "description_length": 398,
      "index": 1825,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling VPC ClassicLink in AWS EC2, including fields for a dry run flag and a VPC ID. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring or managing VPC connectivity settings programmatically.",
      "description_length": 317,
      "index": 1826,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DefaultRouteTableAssociationValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing route table association states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to configure whether a subnet automatically associates with the default route table in EC2 operations.",
      "description_length": 413,
      "index": 1827,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the propagation details of a transit gateway route table, including optional fields for attachment ID, resource ID, resource type, route table ID, and propagation state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing route table propagations in AWS EC2 transit gateways, particularly when configuring or querying route propagation states and associations.",
      "description_length": 505,
      "index": 1828,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupInfo",
      "library": "aws-ec2",
      "description": "This module handles placement group configuration data, specifically listing supported placement strategies. It provides functions to create, parse, and serialize placement group information for use in AWS EC2 operations. Use cases include retrieving valid placement strategies from AWS responses and preparing placement group settings for API requests.",
      "description_length": 353,
      "index": 1829,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCarrierGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing carrier gateways in EC2, including optional identifiers, filters, pagination, and dry run settings. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying carrier gateway details with specific IDs or filters, paginating through large result sets, and simulating requests without execution.",
      "description_length": 444,
      "index": 1830,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 network interfaces, including a list of network interfaces and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when processing responses from EC2's `DescribeNetworkInterfaces` API call, especially for handling paginated results.",
      "description_length": 383,
      "index": 1831,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetDefaultCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving default credit specifications for EC2 instances, including optional dry-run validation and instance family selection. It provides functions to construct, serialize, and parse the request in various formats such as JSON and query parameters. It is used when configuring or inspecting credit settings for T-series EC2 instances.",
      "description_length": 381,
      "index": 1832,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EbsInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing EBS (Elastic Block Store) configuration details, including support for encryption, EBS optimization, and NVME. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include handling EBS configuration data in EC2 instance metadata or API requests.",
      "description_length": 379,
      "index": 1833,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VersionStringList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of lists of string-based version identifiers in AWS EC2 operations. Works with `Aws.BaseTypes.String.t list` to support query string encoding, JSON serialization, and XML node parsing. Used when managing versioned resources or responses that require list-based string handling in EC2 APIs.",
      "description_length": 336,
      "index": 1834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for tagging EC2 resources, including optional dry-run functionality. It works with resource ID lists and tag lists to associate metadata with AWS resources. It is used to construct, parse, and serialize tag creation requests for EC2 instances, volumes, or other supported resources.",
      "description_length": 322,
      "index": 1835,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SummaryStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the summary status of EC2 instances, with specific values like `Ok`, `Impaired`, and `Initializing`. It includes functions to convert between strings and the variant type, serialize to JSON and query formats, and parse from XML and JSON. Use this module when handling EC2 instance status data from AWS API responses or when constructing requests that require status filtering.",
      "description_length": 436,
      "index": 1836,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaInfo",
      "library": "aws-ec2",
      "description": "This module handles FPGA device information for EC2 instances, including memory specifications. It provides functions to create, parse, and convert FPGA data to and from XML, JSON, and query formats. Use it when managing FPGA-backed instances or retrieving instance metadata in AWS EC2.",
      "description_length": 286,
      "index": 1837,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 image export task, with fields for task metadata like description, progress, status, and S3 export location. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. Concrete use cases include managing EC2 image exports to S3 and tracking their status within an AWS environment.",
      "description_length": 383,
      "index": 1838,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentPropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the propagation of a transit gateway attachment to a route table, including its state and associated route table ID. It provides functions to construct, parse, and serialize this structure for use in API requests and responses. Concrete use cases include managing route propagation settings in AWS EC2 transit gateways and handling related API data transformations.",
      "description_length": 415,
      "index": 1839,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the attachment of an EC2 volume to an instance, with fields for attachment time, device name, instance and volume IDs, attachment state, and deletion behavior. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing volume attachment metadata during instance provisioning or snapshot operations in AWS EC2.",
      "description_length": 447,
      "index": 1840,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeClientVpnIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of revoking client VPN ingress authorization in AWS EC2. It includes a status field indicating the outcome of the operation. It is used when managing client VPN access rules, specifically to track the status of a revoked authorization rule.",
      "description_length": 271,
      "index": 1841,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportImageTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 import image tasks, supporting filtering by task IDs and other criteria. It includes operations to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include retrieving the status of specific image import tasks or listing tasks matching certain filters.",
      "description_length": 350,
      "index": 1842,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template sets. It provides functions to convert between XML, JSON, and query string representations of a list of launch templates. Use this module when working with AWS EC2 APIs that require sending or parsing groups of launch templates in different data formats.",
      "description_length": 350,
      "index": 1843,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociations",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing associations for EC2 transit gateway multicast domains, including identifiers for domains, attachments, resources, and subnets. It provides functions to construct, serialize, and convert these associations to and from JSON and XML formats. It is used to manage and persist multicast domain configurations in AWS EC2 environments.",
      "description_length": 379,
      "index": 1844,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestorableByStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of strings that represent restorable EC2 resources. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this when working with EC2 APIs that require or return restorable resource identifiers in string list form.",
      "description_length": 307,
      "index": 1845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateClientVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of terminating client connections to a Client VPN endpoint. It includes fields for the endpoint ID, username, and a set of termination statuses, along with functions to construct, parse, and serialize the data for use in API responses or further processing. The module supports converting the result to JSON or query format, and constructing instances from JSON or XML input.",
      "description_length": 436,
      "index": 1846,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing static routes in a virtual private network, with fields for the destination CIDR block, route source, and route state. It provides functions to construct, parse, and convert route data to query parameters, JSON, and from JSON. It is used to manage and serialize static routing information in EC2 VPN configurations.",
      "description_length": 369,
      "index": 1847,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 Client VPN connections, including fields to filter results, paginate, and specify the target endpoint. It provides functions to construct, serialize, and parse these requests, enabling precise control over API calls to retrieve connection data. Use this module when interacting with AWS EC2's Client VPN API to list active connections with custom filters and pagination.",
      "description_length": 431,
      "index": 1848,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for registering an Amazon EC2 image, including fields like name, description, architecture, and block device mappings. It provides functions to construct, serialize, and parse image registration requests, supporting operations like validation and conversion to and from JSON and query formats. It is used when creating custom Amazon Machine Images (AMIs) from existing instances or snapshots.",
      "description_length": 429,
      "index": 1849,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionStateReasonCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a VPC peering connection in AWS EC2, such as `Active`, `Rejected`, or `Deleting`. It provides direct conversions between these states and string representations, along with serialization and deserialization functions for JSON, XML, and query parameters. This enables straightforward handling of VPC peering state transitions and status checks within AWS API interactions.",
      "description_length": 446,
      "index": 1850,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTableAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for retrieving associations of a transit gateway route table, including optional filters, pagination, and dry-run parameters. It provides functions to construct, serialize, and parse these requests in JSON and query formats. Concrete use cases include querying AWS EC2 to list route table associations with filtering and pagination support.",
      "description_length": 382,
      "index": 1851,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Spot Fleet request IDs, providing functions to convert them to and from JSON and query formats. It supports parsing from XML nodes and constructing empty lists. Use this when managing Spot Fleet requests in AWS EC2, particularly for batch operations or API interactions.",
      "description_length": 303,
      "index": 1852,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ActiveInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of active EC2 instances. It provides functions to convert between XML, JSON, and query formats, specifically working with `ActiveInstance.t` lists. It is used when processing responses or requests involving multiple active instances in EC2 API interactions.",
      "description_length": 340,
      "index": 1853,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fleet deletion in EC2, with optional error code and message fields. It provides functions to construct, parse, and convert error data to and from XML, JSON, and query formats. Concrete use cases include processing API responses when deleting EC2 fleets and extracting error details for logging or retry logic.",
      "description_length": 377,
      "index": 1854,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance IPv6 addresses, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `InstanceIpv6Address.t` values, supporting data transformation for API interactions. Concrete use cases include processing IPv6 address lists in EC2 instance metadata and formatting them for AWS API requests or responses.",
      "description_length": 403,
      "index": 1855,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesModificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 reserved instances modifications, including filters, modification IDs, and a pagination token. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include retrieving specific modification records and paginating through large result sets.",
      "description_length": 358,
      "index": 1856,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.PeeringTgwInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing peering transit gateway information with optional fields for transit gateway ID, owner ID, and region. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. Concrete use cases include handling EC2 peering connection responses and managing transit gateway metadata in AWS API interactions.",
      "description_length": 408,
      "index": 1857,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing fast snapshot restores in EC2, providing constructors, parsing, and serialization functions. It works with a custom type containing a list of fast snapshot restore records and an optional pagination token. It is used to process and format responses from the EC2 API when querying the status of fast snapshot restores.",
      "description_length": 362,
      "index": 1858,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSecurityGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 security group, including fields for description, group name, VPC ID, tag specifications, and dry-run mode. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring network security rules for EC2 instances and managing infrastructure as code in cloud deployment scripts.",
      "description_length": 411,
      "index": 1859,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 instance attribute names, such as `InstanceType`, `Kernel`, and `UserData`. It includes functions to convert between string representations and the variant type, as well as serialization and deserialization routines for JSON, query parameters, and XML. These operations are used when interacting with AWS EC2 APIs to specify or retrieve individual instance attributes.",
      "description_length": 436,
      "index": 1860,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Tag",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling key-value tags in AWS EC2, with operations to create, parse, and convert tags to and from XML, JSON, and query formats. It works with string-based keys and values, structured as an XML node sequence or JSON association list. Concrete use cases include tagging EC2 instances and resources during API requests or processing tag data from AWS responses.",
      "description_length": 400,
      "index": 1861,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying options when modifying a VPN tunnel, including fields like tunnel CIDR, pre-shared key, and encryption parameters. It provides functions to construct, parse, and serialize these options for use in API requests. Concrete use cases include configuring tunnel lifetime settings, specifying encryption algorithms, and setting up IKE versions for AWS EC2 VPN connections.",
      "description_length": 415,
      "index": 1862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IP permissions in EC2 security group rules. It includes fields for protocol, port ranges, IP ranges (IPv4 and IPv6), prefix lists, and user-group pairs, along with functions to construct, serialize, and parse these permissions. It is used to configure and manage network access rules for EC2 instances programmatically.",
      "description_length": 373,
      "index": 1863,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance parameters, including optional instance ID and a flag to exclude the boot volume. It provides functions to construct, serialize, and deserialize these specifications for use in API requests. Commonly used when configuring instance-based operations like termination or snapshot creation.",
      "description_length": 351,
      "index": 1864,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedRole",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 instance roles and related configuration, including ARN, S3 bucket and object key for certificates, and KMS key ID for encryption. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when configuring or retrieving role and certificate information for EC2 instances in AWS.",
      "description_length": 396,
      "index": 1865,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InferenceDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for inference device information with optional count, name, and manufacturer fields. It provides functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used to describe inference devices in EC2 instance type configurations.",
      "description_length": 322,
      "index": 1866,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceFamilyCreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying credit configurations for EC2 instance families, including optional fields for the instance family and CPU credit type. It provides functions to construct, serialize, and convert these specifications to and from JSON and query formats. It is used when configuring burstable performance instances with specific credit settings in AWS EC2.",
      "description_length": 389,
      "index": 1867,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayMulticastDomainsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 transit gateway multicast domains, supporting filtering, pagination, and dry-run options. It operates on types such as string lists, filters, integers, and strings to configure API requests. Concrete use cases include retrieving specific multicast domain configurations, listing domains matching criteria, and paginating through large result sets.",
      "description_length": 408,
      "index": 1868,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MulticastSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Enable` and `Disable`, representing multicast support settings. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and query parameters. It is used to configure multicast support in EC2 network settings when interacting with AWS APIs.",
      "description_length": 375,
      "index": 1869,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociationList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of transit gateway multicast domain associations. Works with XML nodes, JSON values, and query parameters to convert between these formats and an internal list of association records. Useful for processing API responses and preparing requests involving multicast domain associations in transit gateways.",
      "description_length": 352,
      "index": 1870,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVpcAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway route table VPC associations, supporting filtering, pagination, and dry-run capabilities. It operates on data types including string sets, filter lists, integers, and optional string tokens. Concrete use cases include listing associations matching specific criteria, retrieving paginated results, and simulating requests without execution.",
      "description_length": 406,
      "index": 1871,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a placement group in Amazon EC2, with fields for group name, state, strategy, partition count, group ID, and tags. It provides functions to construct, parse, and convert placement group data to and from JSON and query formats. Concrete use cases include managing EC2 instance placement strategies and handling placement group metadata in API requests and responses.",
      "description_length": 415,
      "index": 1872,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of Phase 2 DH group numbers used in EC2 VPN tunnel options. It provides functions to convert between XML, JSON, and internal data representations, ensuring compatibility with AWS API requests. Use this module when configuring or parsing EC2 VPN connections that require specifying Diffie-Hellman groups.",
      "description_length": 386,
      "index": 1873,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreAddressToClassicResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of restoring an Elastic IP address to EC2-Classic, with optional fields for the public IP and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when migrating or managing Elastic IP addresses in hybrid EC2 environments.",
      "description_length": 412,
      "index": 1874,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of deleting an FPGA image, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters, JSON, or XML. Use this module when handling responses from EC2's FPGA image deletion API calls, particularly to interpret or generate the return value indicating deletion success.",
      "description_length": 413,
      "index": 1875,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a VPC attachment to a transit gateway in AWS EC2. It includes fields for transit gateway ID, VPC ID, subnet IDs, optional configuration settings, tag specifications, and a dry-run flag. The module provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters.",
      "description_length": 373,
      "index": 1876,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring VPN connections with options like IP version, CIDR ranges, and tunnel settings. It provides functions to create, parse, and serialize these configurations to JSON, query parameters, or XML. Use this module when setting up or modifying EC2 VPN connections via the AWS API.",
      "description_length": 324,
      "index": 1877,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAssociationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association state of a transit gateway, with specific values like `Associating`, `Associated`, `Disassociating`, and `Disassociated`. It provides bidirectional conversion between strings and the enumerated type, along with serialization and deserialization functions for JSON and XML formats. The module is used to manage and interpret the state of transit gateway associations in AWS EC2 operations.",
      "description_length": 456,
      "index": 1878,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTaskList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of EC2 conversion tasks. Works with XML nodes, JSON values, and AWS query parameters to convert between them and a list of conversion task records. Useful for interacting with the EC2 API when managing instance conversion tasks, such as importing or exporting instances.",
      "description_length": 319,
      "index": 1879,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionNotificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint connection notifications, including a set of connection notifications and an optional pagination token. It provides operations to create, parse, and serialize the result to query parameters or JSON format. Use this module when managing VPC endpoint connections in AWS EC2, particularly for retrieving and processing notification configurations.",
      "description_length": 402,
      "index": 1880,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPairList",
      "library": "aws-ec2",
      "description": "This module handles lists of user ID and security group pairs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML data. It is used when managing security group rules that reference other accounts or groups.",
      "description_length": 285,
      "index": 1881,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoints in AWS EC2, including a set of VPC endpoints and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing VPC endpoint responses, particularly for listing or paginating through endpoint configurations.",
      "description_length": 372,
      "index": 1882,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllowsMultipleInstanceTypes",
      "library": "aws-ec2",
      "description": "This module defines a binary type `t` representing whether multiple instance types are allowed in EC2 configurations. It provides conversions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. It is used to configure and interpret EC2 Auto Scaling or Launch Template settings where instance type flexibility is specified.",
      "description_length": 374,
      "index": 1883,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of enabling EBS encryption by default, containing an optional boolean indicating the encryption state. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used to handle responses from enabling EBS encryption in EC2, allowing inspection of the resulting encryption status.",
      "description_length": 395,
      "index": 1884,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the operational status of an Elastic GPU, with values `OK` and `IMPAIRED`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include handling API responses and requests involving Elastic GPU status in AWS EC2 operations.",
      "description_length": 403,
      "index": 1885,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneOptInStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the opt-in status of an availability zone, with variants for \"opt-in not required,\" \"opted in,\" and \"not opted in.\" It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and query formats. The module is used to handle availability zone state in API requests and responses, particularly when interacting with AWS EC2 services that require or return opt-in status information.",
      "description_length": 520,
      "index": 1886,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting attributes of an EC2 network interface, specifically supporting the `source_dest_check` attribute. It provides operations to construct, parse, and serialize the request in various formats including JSON, XML, and query parameters. Concrete use cases include modifying network interface settings in AWS EC2, such as disabling source/destination checking for custom routing scenarios.",
      "description_length": 436,
      "index": 1887,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 fleet launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize these configurations to support interactions with AWS EC2 APIs. Use this module when setting up or modifying EC2 fleets with customized instance launch parameters.",
      "description_length": 378,
      "index": 1888,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a VPN connection, containing an optional `VpnConnection` object. It provides functions to construct, parse, and serialize the result in various formats including XML, JSON, and query parameters. Use this module when handling responses from the EC2 API after initiating a VPN connection to programmatically access and manipulate the resulting connection data.",
      "description_length": 431,
      "index": 1889,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusEventList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance status events, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON values to facilitate event data handling in AWS EC2 APIs. Use this module when processing instance status event responses or constructing requests that include event data.",
      "description_length": 348,
      "index": 1890,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateVpcCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for constructing, parsing, and converting VPC CIDR block association requests. It handles data types like strings and booleans, with optional fields, and is used to format and interpret API requests when associating CIDR blocks to VPCs in AWS EC2. Functions support converting requests to query parameters or JSON and parsing responses from XML or JSON input.",
      "description_length": 408,
      "index": 1891,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateErrorCode",
      "library": "aws-ec2",
      "description": "This module defines a set of error codes related to EC2 launch templates, including malformed or missing IDs, names, and versions. It provides bidirectional conversions between string representations and the enumerated type, along with serialization and deserialization functions for JSON and XML. These capabilities support error handling and logging when interacting with EC2 launch templates via AWS SDK calls.",
      "description_length": 413,
      "index": 1892,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting queued EC2 reserved instance purchases by structuring responses with successful and failed deletion sets. It provides operations to create, parse, and serialize these results into query parameters or JSON format, typically used in AWS API interactions. Concrete use cases include processing batch deletion responses from EC2 to identify which reserved instances were successfully canceled and which failed.",
      "description_length": 449,
      "index": 1893,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteTableVpcAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a local gateway route table with a VPC, including optional tagging and dry run functionality. It provides operations to construct, parse, and serialize the request for use with AWS EC2 API calls. Concrete use cases include setting up network routing configurations in AWS environments and managing resource associations programmatically.",
      "description_length": 393,
      "index": 1894,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating a transit gateway route table, primarily working with the `t` type that contains an optional `TransitGatewayAssociation`. It provides functions to construct, parse, and convert the result to and from JSON, query format, and XML. Use this module when managing transit gateway route table associations in AWS EC2, particularly for serializing and deserializing responses.",
      "description_length": 415,
      "index": 1895,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ZoneIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 zone IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return zone ID lists in XML, JSON, or query string form.",
      "description_length": 310,
      "index": 1896,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 subnet data structures, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes into subnet lists, JSON serialization and deserialization, and query parameter construction. Concrete use cases include processing AWS EC2 API responses and building requests involving multiple subnets.",
      "description_length": 365,
      "index": 1897,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CurrencyCodeValues",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing currency codes, specifically USD. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. Useful for handling currency inputs and outputs in API interactions that require strict currency code validation and formatting.",
      "description_length": 363,
      "index": 1898,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a local gateway route in EC2, including transitions like activation, deletion, and routing behavior. It provides direct conversions between string representations and the enumerated values, along with serialization to and from JSON and query formats. This module is used to interpret and manipulate route state data when managing EC2 local gateways, particularly in scenarios involving route creation, monitoring, and cleanup.",
      "description_length": 501,
      "index": 1899,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based fleet identifiers for EC2 operations. It provides functions to convert the list into query parameters, JSON format, and back, as well as parsing from XML nodes. Use this when working with EC2 fleet APIs that require batch handling of fleet IDs in different data formats.",
      "description_length": 313,
      "index": 1900,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an IPv6 address associated with a network interface. It includes operations to construct, parse, and convert the address to and from JSON and query formats. It is used to manage IPv6 configuration details in EC2 network interfaces.",
      "description_length": 283,
      "index": 1901,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VirtualizationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing virtualization types with two variants: `Hvm` and `Paravirtual`. It provides functions to convert between strings and the enumerated type, including `to_string`, `of_string`, and lookup tables `str_to_t` and `t_to_str`. It also includes functions for parsing from XML, serializing to query parameters, and converting to and from JSON, making it suitable for use in AWS EC2 API requests and responses.",
      "description_length": 444,
      "index": 1902,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a multicast group in a transit gateway, with fields for IP address, attachment and subnet identifiers, resource details, network interface, and membership types. It provides operations to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing multicast group configurations and serializing them for API requests or responses in network management workflows.",
      "description_length": 474,
      "index": 1903,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMonitoringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance monitoring configurations. It provides functions to convert, parse, and serialize instance monitoring data to and from XML, JSON, and query formats. Use this module when managing monitoring settings for EC2 instances, such as enabling or retrieving detailed monitoring for a group of instances.",
      "description_length": 336,
      "index": 1904,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RecurringChargeFrequency",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the frequency of recurring charges, specifically `Hourly`. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML nodes. It is used to specify billing intervals for resources in AWS EC2 operations.",
      "description_length": 314,
      "index": 1905,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating capacity reservations in EC2, including fields like instance type, platform, availability zone, and count. It provides functions to construct, parse, and serialize reservation requests in various formats, including JSON and query strings. Use this module when programmatically reserving EC2 capacity with specific attributes like tenancy, storage, and tagging.",
      "description_length": 410,
      "index": 1906,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostList",
      "library": "aws-ec2",
      "description": "This module defines a list of EC2 host types and provides functions to convert between XML, JSON, and query string representations. It includes parsing from XML nodes and JSON values, as well as serialization to JSON arrays and AWS query parameters. Use this module when handling batch responses or requests involving multiple EC2 hosts, such as listing or modifying host reservations.",
      "description_length": 385,
      "index": 1907,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 capacity reservation, including properties like instance count, availability zone, and state. It provides functions to construct, parse, and convert capacity reservation data for use with AWS API requests and responses. Concrete use cases include managing reserved capacity in EC2, tracking availability, and handling lifecycle events via AWS SDK integrations.",
      "description_length": 417,
      "index": 1908,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 volumes, providing operations to create, parse, and serialize volume data. It works with volume lists and optional pagination tokens. Use it to process responses from EC2 volume queries, including paginated results.",
      "description_length": 264,
      "index": 1909,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying a Client VPN endpoint in EC2, primarily holding an optional boolean indicating success or failure. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include handling responses from the `ModifyClientVpnEndpoint` API call, particularly for inspecting whether the modification was successfully applied.",
      "description_length": 456,
      "index": 1910,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeKeyPairsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 key pairs by providing functions to create, parse, and convert key pair data. It works with key pair lists and supports serialization to and from JSON and query formats. Use this module when retrieving and processing EC2 key pair information from AWS API responses.",
      "description_length": 314,
      "index": 1911,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot instance requests in AWS EC2, including fields like availability zone group, spot price, instance count, and launch specifications. It provides functions to construct, serialize, and parse these requests, enabling precise control over spot instance provisioning. Use this module to create and manage spot instance requests programmatically, such as setting interruption behavior or specifying tags and launch parameters.",
      "description_length": 478,
      "index": 1912,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a traffic mirror filter in EC2, including optional description, tag specifications, dry run flag, and client token. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring network traffic monitoring and applying tags during filter creation.",
      "description_length": 375,
      "index": 1913,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFleets",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe fleets by converting input requests to HTTP format and parsing responses. It works with `DescribeFleetsRequest` and `DescribeFleetsResult` types to manage fleet metadata retrieval, such as fleet status, target capacity, and instance details. Use this module to query EC2 fleet configurations and monitor fleet state changes directly from OCaml applications.",
      "description_length": 406,
      "index": 1914,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 capacity reservations by providing functions to construct HTTP requests and parse responses according to the AWS API. It works with input and output types specific to capacity reservation modifications, along with error handling tailored to this operation. Use this module when adjusting the end time or instance count of a capacity reservation in EC2.",
      "description_length": 386,
      "index": 1915,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetCoipPoolUsage",
      "library": "aws-ec2",
      "description": "This module handles the retrieval and processing of IP pool usage data in Amazon EC2. It sends a query request to the EC2 service, encodes input parameters into an HTTP request, and decodes the response into structured output or error types. It is used to monitor the allocation and utilization of customer-owned IP pools within a VPC environment.",
      "description_length": 347,
      "index": 1916,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachClassicLinkVpc",
      "library": "aws-ec2",
      "description": "This module handles detaching a VPC from a classic link in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works with input type `DetachClassicLinkVpcRequest.t`, output type `DetachClassicLinkVpcResult.t`, and error type `Errors_internal.t`. Use this module when managing VPC associations in EC2 to programmatically unlink a VPC from a classic account.",
      "description_length": 433,
      "index": 1917,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles resetting the default KMS key ID for EBS encryption in AWS EC2. It works with EC2 API requests and responses, specifically `ResetEbsDefaultKmsKeyIdRequest` and `ResetEbsDefaultKmsKeyIdResult`. Use this module to interact with the EC2 API endpoint, send reset requests, and parse responses or errors from AWS.",
      "description_length": 328,
      "index": 1918,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SearchLocalGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API operation to search for local gateway routes by converting native request types into properly signed HTTP queries and parsing responses. It handles requests of type `SearchLocalGatewayRoutesRequest`, returning results as `SearchLocalGatewayRoutesResult` or errors defined in `Errors_internal`. It is used to interact directly with EC2's local gateway routing functionality, such as retrieving route entries for a specific local gateway route table.",
      "description_length": 487,
      "index": 1919,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module handles querying and parsing DNS support status for VPCs connected to a ClassicLink in AWS EC2. It works with input and output types specific to the `DescribeVpcClassicLinkDnsSupport` API call, including encoded HTTP requests and decoded responses. It is used to determine whether DNS resolution is enabled for ClassicLink connections between EC2-VPC and EC2-Classic.",
      "description_length": 379,
      "index": 1920,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeRouteTables",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe route tables, converting input requests to HTTP format and parsing responses or errors from the server. It works with route table request and result types defined in the Aws_ec2.Types module, along with internal error types. Use this module when querying AWS EC2 for route table configurations, particularly when integrating with custom HTTP clients or handling low-level request/response cycles.",
      "description_length": 445,
      "index": 1921,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCapacityReservations",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 capacity reservations, converting input parameters into an HTTP request and parsing the response or errors from AWS. It works with `DescribeCapacityReservationsRequest` and `DescribeCapacityReservationsResult` types to manage querying and decoding capacity reservation details. Use this module when retrieving information about specific capacity reservations or filtering them based on attributes like availability zone or instance platform.",
      "description_length": 490,
      "index": 1922,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ReplaceNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module replaces a network ACL entry in Amazon EC2 by sending a properly signed HTTP request to the EC2 service. It handles the conversion of a native input type to an HTTP request and parsing of HTTP responses into unit output or error types. It is used when modifying inbound or outbound rules of a network ACL associated with a subnet in a VPC.",
      "description_length": 351,
      "index": 1923,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ImportSnapshot",
      "library": "aws-ec2",
      "description": "This module handles the EC2 operation to import snapshots from Amazon S3 into Amazon EC2. It provides functions to convert native input types into properly signed HTTP requests and to decode responses or errors from the service. It works directly with EC2 snapshot import requests and results, handling errors specific to snapshot import operations, such as invalid snapshot formats or missing S3 object permissions.",
      "description_length": 416,
      "index": 1924,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module handles retrieving launch template data from EC2 by converting input requests to properly signed HTTP queries and parsing the responses. It works with EC2 launch template request and result types, specifically handling errors returned from the service. It is used when programmatically fetching launch template configurations for instance creation or auditing.",
      "description_length": 372,
      "index": 1925,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module modifies a transit gateway VPC attachment in AWS EC2 by updating its options, such as subnet mappings and DNS support. It works with transit gateway VPC attachment request and result types, handling HTTP serialization and deserialization. Use this module to programmatically adjust VPC connectivity settings for transit gateways, such as enabling or disabling IPv6 or modifying associated subnets.",
      "description_length": 409,
      "index": 1926,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of a new virtual private gateway in AWS EC2 by defining the request and response types for the operation. It provides functions to convert native input into a properly signed HTTP request and to decode the resulting HTTP response into either a success result or an error. It is used when setting up a new VPC-based site-to-site VPN connection, where a virtual gateway is required to establish connectivity between the VPC and an on-premises network.",
      "description_length": 482,
      "index": 1927,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a virtual private gateway in Amazon EC2 by converting native inputs into properly signed HTTP requests and parsing responses. It works directly with the `DeleteVpnGatewayRequest` type for input and returns no output on success, using a custom error type for failure cases. Concrete use cases include removing a VPC's connection to a remote network by deleting the associated virtual private gateway.",
      "description_length": 435,
      "index": 1928,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeSpotDatafeedSubscription` API call in EC2, allowing users to retrieve information about a Spot Instance data feed subscription. It works with `input`, `output`, and `error` types specific to this operation, encoding inputs into HTTP requests and decoding responses or errors from the service. Use this module when querying the status or configuration of a Spot data feed subscription directly from AWS.",
      "description_length": 435,
      "index": 1929,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAddresses",
      "library": "aws-ec2",
      "description": "This module handles the EC2 operation to retrieve information about one or more Elastic IP addresses. It works with `DescribeAddressesRequest` and `DescribeAddressesResult` types to send requests and receive responses in HTTP format. It is used to list details such as allocation IDs, public IPs, and associated instances for Elastic IPs in AWS EC2.",
      "description_length": 349,
      "index": 1930,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Transit Gateway route tables by providing functions to construct and interpret HTTP requests and responses for the corresponding AWS API call. It works with input and output types specific to the DeleteTransitGatewayRouteTable operation, along with error handling tailored to this action. Use this module when managing Transit Gateway route tables in an AWS environment, such as removing unused or misconfigured route tables.",
      "description_length": 465,
      "index": 1931,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API call to create a traffic mirror target, handling request signing, HTTP conversion, and response parsing. It works with EC2-specific input and output types, including traffic mirror target configurations and error responses. Use this module to programmatically set up traffic mirroring targets in AWS EC2, capturing network traffic for monitoring or analysis.",
      "description_length": 397,
      "index": 1932,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableTransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module enables propagating routes from a transit gateway attachment to a route table. It handles the specific operation of activating route propagation by converting input parameters into an HTTP request and parsing the response or errors from AWS. The module works directly with transit gateway route table propagation requests and responses, targeting use cases where route tables need dynamic updates from attached gateways.",
      "description_length": 432,
      "index": 1933,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a Spot Datafeed subscription in AWS EC2. It provides functions to construct and deconstruct HTTP requests and responses for this specific operation, using the DeleteSpotDatafeedSubscriptionRequest type as input and returning no output on success. It is used when managing Spot Instance data collection, specifically to stop the delivery of usage data to an S3 bucket.",
      "description_length": 403,
      "index": 1934,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UnmonitorInstances",
      "library": "aws-ec2",
      "description": "This module handles the process of disabling detailed monitoring for EC2 instances. It provides functions to construct HTTP requests from input parameters and parse responses or errors from AWS, specifically for the UnmonitorInstances API call. It works with EC2 instance IDs to stop sending detailed monitoring data to CloudWatch.",
      "description_length": 331,
      "index": 1935,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfaces",
      "library": "aws-ec2",
      "description": "This module handles describing network interfaces in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the DescribeNetworkInterfaces operation, along with error handling tailored to the service. Use this module to query details about network interfaces, such as their attachment status, security groups, and associated IP addresses.",
      "description_length": 402,
      "index": 1936,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ProvisionByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the provisioning of Bring Your Own IP (BYOIP) CIDR blocks in AWS EC2. It works with `ProvisionByoipCidrRequest` and `ProvisionByoipCidrResult` types, enabling direct interaction with the EC2 API to allocate and manage custom IP ranges. Concrete use cases include submitting BYOIP provisioning requests and parsing their responses or errors.",
      "description_length": 360,
      "index": 1937,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetCapacityReservationUsage",
      "library": "aws-ec2",
      "description": "This module handles retrieving usage details for EC2 capacity reservations by converting input requests to properly signed HTTP queries and parsing responses. It works with `GetCapacityReservationUsageRequest` and `GetCapacityReservationUsageResult` types to interact with AWS EC2 APIs. Use this module to programmatically check the current utilization of a specific capacity reservation within an AWS account.",
      "description_length": 410,
      "index": 1938,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeEgressOnlyInternetGateways",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe egress-only internet gateways in EC2. It encodes input requests into properly formatted HTTP queries and decodes responses or errors from the server. It works directly with EC2-specific request and result types, handling serialization, deserialization, and error parsing for this specific AWS API operation.",
      "description_length": 352,
      "index": 1939,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeletePlacementGroup",
      "library": "aws-ec2",
      "description": "This module deletes a placement group from an EC2 instance. It handles the request lifecycle for the DeletePlacementGroup API call, including signing, encoding, and parsing responses. It works with EC2 placement group identifiers and processes raw HTTP responses into success or error states.",
      "description_length": 292,
      "index": 1940,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module handles the creation of managed prefix lists in EC2 by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with EC2-specific request and result types, including proper error handling for failed responses. Use this module when programmatically setting up network access controls in AWS EC2 environments.",
      "description_length": 413,
      "index": 1941,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayRouteTablePropagations",
      "library": "aws-ec2",
      "description": "This module handles retrieving route table propagations for AWS EC2 transit gateways. It works with `GetTransitGatewayRouteTablePropagationsRequest` and `GetTransitGatewayRouteTablePropagationsResult` types, encoding requests into HTTP format and decoding responses. Use this module to query which route tables are propagating routes to a specific transit gateway route table.",
      "description_length": 376,
      "index": 1942,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles the rejection of VPC endpoint connections in AWS EC2 by providing functions to construct and interpret HTTP requests and responses for the corresponding API call. It works with input and output types specific to the `RejectVpcEndpointConnections` operation, along with error handling tailored to the possible failure modes of that call. It is used when managing VPC endpoint connection permissions, allowing programmatic rejection of connection requests from service consumers.",
      "description_length": 497,
      "index": 1943,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreatePlacementGroup",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 placement groups by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with EC2-specific input and output structures, including placement group configuration and error responses. Concrete use cases include initiating placement group creation requests and processing their outcomes in an AWS EC2 context.",
      "description_length": 466,
      "index": 1944,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a transit gateway route table from a transit gateway attachment in AWS EC2. It provides functions to convert input and output types to and from HTTP requests, sign and route those requests to the appropriate service endpoint, and parse any errors returned by the service. Concrete use cases include managing network routing configurations in EC2 by detaching route tables from specific transit gateway attachments.",
      "description_length": 456,
      "index": 1945,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterTransitGatewayMulticastGroupMembers",
      "library": "aws-ec2",
      "description": "This module handles the registration of multicast group members in a transit gateway, specifically encoding requests and decoding responses for the corresponding AWS EC2 API call. It works with input and output types defined in the `Aws_ec2.Types` module, along with internal error types for handling failures. Use this module when managing multicast group membership in AWS EC2 transit gateways, such as when adding or removing network interfaces from multicast groups.",
      "description_length": 470,
      "index": 1946,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeTags",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 tag description requests to HTTP queries and responses back to structured outputs or errors. It works with `DescribeTagsRequest` and `DescribeTagsResult` types to encode and decode AWS EC2 tag data. It is used to query metadata tags associated with EC2 resources, such as instances or volumes, and process the resulting tag information or handle specific AWS service errors.",
      "description_length": 416,
      "index": 1947,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstances",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve instance information by converting input requests to HTTP format and parsing responses. It works with `DescribeInstancesRequest` and `DescribeInstancesResult` types to manage query parameters and decode results or errors from the AWS EC2 service. It is used to programmatically inspect running EC2 instances, including filtering by instance IDs or tags, and handling service-specific errors based on HTTP status codes.",
      "description_length": 467,
      "index": 1948,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceEventStartTime",
      "library": "aws-ec2",
      "description": "This module modifies the start time of a scheduled EC2 instance event. It handles requests to adjust event timing using AWS EC2's API, working with structured input and output types specific to instance event management. Use this module to reschedule planned maintenance or reboot events for EC2 instances programmatically.",
      "description_length": 323,
      "index": 1949,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the deletion of DHCP options sets in Amazon EC2 by converting native inputs into properly signed HTTP requests and parsing responses. It works with the `DeleteDhcpOptionsRequest` type for input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include removing custom DHCP configurations from EC2 networks and managing network settings programmatically.",
      "description_length": 426,
      "index": 1950,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyImageAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 image, such as launch permissions, by sending a signed HTTP request to the EC2 service. It works with the `ModifyImageAttributeRequest` type to specify the image ID and attribute changes, and returns no output on success. A concrete use case is restricting or granting specific AWS accounts access to launch an AMI by modifying its launch permission attribute.",
      "description_length": 402,
      "index": 1951,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.StopInstances",
      "library": "aws-ec2",
      "description": "This module handles stopping EC2 instances by defining the request and response types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2 instance identifiers and stop options, supporting precise control over instance shutdown behavior. Use this module to programmatically stop running instances in AWS EC2, specifying whether to force stop them or allow graceful shutdown.",
      "description_length": 450,
      "index": 1952,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateAddress",
      "library": "aws-ec2",
      "description": "This module handles associating an Elastic IP address with an EC2 instance. It provides functions to convert native input types to HTTP requests and parse HTTP responses into results or errors. It works directly with EC2 instance IDs and Elastic IP addresses, used when managing network configurations in AWS EC2 environments.",
      "description_length": 326,
      "index": 1953,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module handles associating an IAM instance profile with an EC2 instance by defining the request and response types for the operation. It provides functions to convert requests to HTTP format and parse responses or errors from AWS, ensuring correct encoding and decoding of the API call. It is used when programmatically linking IAM roles to running EC2 instances for permissions management.",
      "description_length": 395,
      "index": 1954,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles describing scheduled EC2 instances by converting input requests into properly signed HTTP queries and decoding responses. It works with structured request and response types specific to EC2 scheduled instances, along with error types defined in the EC2 API. It is used to retrieve details about scheduled instances, such as their availability and configuration, by making direct calls to the EC2 service.",
      "description_length": 424,
      "index": 1955,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RestoreAddressToClassic",
      "library": "aws-ec2",
      "description": "This module handles the restoration of an Elastic IP address from VPC to EC2-Classic. It provides functions to convert input and output types to and from HTTP requests, sign requests, and parse errors specific to this operation. The module works with EC2-Classic restore address requests and responses, targeting use cases where IP addresses need to be migrated between networking environments.",
      "description_length": 394,
      "index": 1956,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 transit gateway peering attachments by converting native requests to HTTP format and parsing responses. It works with input and output types specific to transit gateway peering attachment deletion, including encoded query parameters and XML error responses. Concrete use cases include initiating a deletion request and decoding the result or error from AWS.",
      "description_length": 397,
      "index": 1957,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetPasswordData",
      "library": "aws-ec2",
      "description": "This module handles retrieving password data for EC2 instances by converting native input into HTTP requests and parsing responses. It works with `GetPasswordDataRequest` and `GetPasswordDataResult` types, along with internal error types for handling failures. It is used to retrieve initial passwords for Windows instances or other systems requiring secure password retrieval through the EC2 API.",
      "description_length": 397,
      "index": 1958,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorSessions",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 traffic mirror sessions by converting input requests into properly signed HTTP queries and parsing the corresponding responses. It works with `DescribeTrafficMirrorSessionsRequest` and `DescribeTrafficMirrorSessionsResult` types to manage configuration and retrieval of session data. Concrete use cases include querying session details for monitoring and managing mirrored network traffic within EC2 environments.",
      "description_length": 452,
      "index": 1959,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module implements the necessary conversions and metadata for making an EC2 CreateTrafficMirrorSession API call. It handles encoding input requests into properly signed HTTP queries and decoding responses or errors into structured results. It is used specifically for creating traffic mirror sessions in AWS EC2, translating between native OCaml types and the HTTP protocol.",
      "description_length": 378,
      "index": 1960,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeVpcClassicLink` API call in AWS EC2, converting native input types to properly signed HTTP requests and parsing responses or errors from the service. It works directly with `DescribeVpcClassicLinkRequest` and `DescribeVpcClassicLinkResult` types, along with internal EC2 error types. It is used to query whether a VPC is enabled for ClassicLink and retrieve associated tags and VPC IDs.",
      "description_length": 419,
      "index": 1961,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyFleet",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 fleets by encoding requests into HTTP queries and decoding responses. It works with `ModifyFleetRequest` and `ModifyFleetResult` types, along with internal EC2 errors. It is used to send signed HTTP requests to the EC2 service and handle the resulting output or errors.",
      "description_length": 303,
      "index": 1962,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVolumesModifications",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 volume modification descriptions between native OCaml types and HTTP requests/responses. It works with `DescribeVolumesModificationsRequest` and `DescribeVolumesModificationsResult` types, encoding requests into properly formatted HTTP queries and decoding responses or errors from AWS. It is used to programmatically retrieve the status of volume modifications in EC2, such as tracking progress or completion of volume size or type changes.",
      "description_length": 483,
      "index": 1963,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcPeeringConnectionOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying VPC peering connection options in AWS EC2 by encoding and sending the appropriate API request. It works with VPC peering connection identifiers and request/response structures defined in the EC2 types module. It is used to update inbound or outbound communication settings for a VPC peering connection, such as allowing DNS resolution or traffic forwarding.",
      "description_length": 387,
      "index": 1964,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssignIpv6Addresses",
      "library": "aws-ec2",
      "description": "This module handles assigning IPv6 addresses to EC2 instances by encoding requests into HTTP queries and decoding responses. It works with EC2-specific input and output types, including error responses. Concrete use cases include managing IPv6 address assignments for EC2 network interfaces via the AWS API.",
      "description_length": 307,
      "index": 1965,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateAddress",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of an Elastic IP address from an EC2 instance. It provides functions to construct the corresponding HTTP request, parse responses, and handle errors specific to the disassociation operation. The module works directly with EC2 instance identifiers and Elastic IP addresses through the `DisassociateAddressRequest` type.",
      "description_length": 357,
      "index": 1966,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.TerminateClientVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles terminating client VPN connections in AWS EC2 by sending properly signed HTTP requests. It works with EC2-specific input and output types for the terminate client VPN connection operation, along with error types returned by AWS. Concrete use cases include disconnecting active client sessions from a server-side EC2-managed VPN and managing cleanup of stale or unauthorized client connections.",
      "description_length": 413,
      "index": 1967,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles the modification of EC2 reserved instances by encoding requests into HTTP queries and decoding responses. It works with input and output types defined in `Aws_ec2.Types` for the ModifyReservedInstances operation, along with internal EC2 errors. It is used to send signed HTTP requests to the EC2 service endpoint and handle the corresponding success or error responses.",
      "description_length": 389,
      "index": 1968,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstancePlacement",
      "library": "aws-ec2",
      "description": "This module handles modifying the placement attributes of EC2 instances, specifically through the `to_http` function which encodes a `ModifyInstancePlacementRequest.t` into an HTTP request, and the `of_http` function which decodes the response into either a `ModifyInstancePlacementResult.t` or an error. It works directly with EC2 instance placement request and result types, along with internal AWS error types for handling failures. A concrete use case is changing the affinity or host ID of a running EC2 instance to control its placement on a specific host or within a host resource group.",
      "description_length": 594,
      "index": 1969,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RebootInstances",
      "library": "aws-ec2",
      "description": "This module handles the rebooting of EC2 instances by defining the request structure, encoding it into an HTTP query, and specifying how to process the response. It works with the `RebootInstancesRequest` type to send a reboot command to specific instances and returns no output on success. It is used when programmatically restarting instances in an AWS environment, ensuring correct request signing and endpoint routing.",
      "description_length": 422,
      "index": 1970,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportKeyPair",
      "library": "aws-ec2",
      "description": "This module handles importing an SSH key pair into Amazon EC2 by converting native requests into properly signed HTTP queries and parsing responses. It works with EC2-specific input and output types defined in `Aws_ec2.Types`, along with internal error types for precise error handling. Concrete use cases include programmatically adding new key pairs for instance access and integrating EC2 key management into deployment workflows.",
      "description_length": 433,
      "index": 1971,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayMulticastDomains",
      "library": "aws-ec2",
      "description": "This module handles the HTTP serialization and deserialization logic for the DescribeTransitGatewayMulticastDomains API call. It works with the input type `DescribeTransitGatewayMulticastDomainsRequest.t`, output type `DescribeTransitGatewayMulticastDomainsResult.t`, and error type `Errors_internal.t`. It is used to send requests to and receive structured responses from the EC2 service, specifically for querying transit gateway multicast domain configurations.",
      "description_length": 464,
      "index": 1972,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe ID format settings for resources like instances or volumes. It encodes input requests into properly formatted HTTP queries and decodes responses, handling both success and error cases. It is used when inspecting or debugging ID format configurations in an EC2 environment.",
      "description_length": 321,
      "index": 1973,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 launch templates by converting native input into HTTP requests and parsing responses into outputs or errors. It works with `ModifyLaunchTemplateRequest`, `ModifyLaunchTemplateResult`, and internal EC2 error types. Concrete use cases include updating a launch template's version settings and handling the corresponding API responses and errors.",
      "description_length": 377,
      "index": 1974,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribePlacementGroups",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 placement groups, converting input parameters into an HTTP request and parsing the response or errors from AWS. It works with `DescribePlacementGroupsRequest` and `DescribePlacementGroupsResult` types to manage query parameters and decode results. Concrete use cases include retrieving metadata about existing placement groups and handling AWS-specific errors during the request.",
      "description_length": 428,
      "index": 1975,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UpdateSecurityGroupRuleDescriptionsEgress",
      "library": "aws-ec2",
      "description": "This module updates descriptions for egress rules of a security group in EC2. It handles requests via HTTP conversion, error parsing, and response decoding, working with security group rule data in the EC2 API. Use it to modify egress rule metadata directly through AWS SDK calls.",
      "description_length": 280,
      "index": 1976,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateCustomerGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of customer gateways in EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with EC2-specific input and output types, such as `CreateCustomerGatewayRequest` and `CreateCustomerGatewayResult`, and handles error decoding from AWS XML responses. Concrete use cases include initiating a customer gateway creation request, signing it with the correct AWS service and version, and parsing the resulting API response or error.",
      "description_length": 558,
      "index": 1977,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module handles modifying an EC2 Client VPN endpoint by providing functions to construct and parse HTTP requests and responses for the `ModifyClientVpnEndpoint` API call. It works with input and output types defined in `Aws_ec2.Types`, specifically `ModifyClientVpnEndpointRequest` and `ModifyClientVpnEndpointResult`, along with internal error types. Concrete use cases include updating the configuration of an existing Client VPN endpoint, such as changing its authentication options or network settings, and handling the corresponding API responses and errors.",
      "description_length": 567,
      "index": 1978,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of an internet gateway in AWS EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with the `CreateInternetGatewayRequest` and `CreateInternetGatewayResult` types, and handles errors specific to the EC2 service. Concrete use cases include initiating an internet gateway creation request and processing the resulting HTTP response or error from the AWS API.",
      "description_length": 485,
      "index": 1979,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the creation of an EC2 Transit Gateway Multicast Domain by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with the `CreateTransitGatewayMulticastDomainRequest` and `CreateTransitGatewayMulticastDomainResult` types, and handles errors specific to the EC2 service. It is used when configuring multicast networking in a transit gateway, enabling IP multicast traffic to be managed across VPCs.",
      "description_length": 505,
      "index": 1980,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ConfirmProductInstance",
      "library": "aws-ec2",
      "description": "This module confirms product instance ownership in EC2 by sending a signed HTTP request with an instance and product code. It handles request signing, HTTP conversion, and response parsing for the EC2 API. Use it to verify that a specific product code is associated with a running instance.",
      "description_length": 290,
      "index": 1981,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RequestSpotFleet",
      "library": "aws-ec2",
      "description": "This module handles the creation and processing of spot fleet requests in EC2. It translates native request data into properly formatted HTTP queries and decodes HTTP responses into either successful outputs or specific EC2 spot fleet errors. It is used when interacting with AWS EC2 to request spot fleets, handling both the request signing and response parsing specific to that operation.",
      "description_length": 390,
      "index": 1982,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVolumes",
      "library": "aws-ec2",
      "description": "This module handles the EC2 `DescribeVolumes` API call, converting input parameters into an HTTP request and parsing responses or errors from AWS. It works with `DescribeVolumesRequest` and `DescribeVolumesResult` types to query information about EBS volumes. Concrete use cases include retrieving volume metadata such as status, size, and attachment details for monitoring or resource management.",
      "description_length": 397,
      "index": 1983,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module creates a VPC peering connection between two virtual private clouds. It handles request signing, HTTP conversion, and error parsing for the EC2 service. Use it to establish network connectivity between isolated VPCs in AWS.",
      "description_length": 235,
      "index": 1984,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module handles the creation of associations between local gateway route tables and VPCs in AWS EC2. It works with EC2-specific request and response types, including VPC IDs and route table identifiers. Concrete use cases include configuring routing for VPCs connected to on-premises networks through AWS Direct Connect or Site-to-Site VPN.",
      "description_length": 344,
      "index": 1985,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribePrefixLists",
      "library": "aws-ec2",
      "description": "This module handles the `DescribePrefixLists` API call in AWS EC2, converting input requests to properly signed HTTP queries and parsing responses or errors from the service. It works with input and output types specific to prefix list descriptions, including filters and prefix list metadata. Use this module to retrieve information about managed prefix lists in EC2, such as their IDs, names, and available CIDR blocks.",
      "description_length": 421,
      "index": 1986,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetReservedInstancesExchangeQuote",
      "library": "aws-ec2",
      "description": "Handles requests to retrieve Reserved Instances exchange quotes in AWS EC2 by converting native input types to properly signed HTTP requests and parsing responses into structured results or errors. Works directly with `GetReservedInstancesExchangeQuoteRequest` and `GetReservedInstancesExchangeQuoteResult` types, along with internal EC2 error types. Used to programmatically evaluate the cost and configuration of exchanging existing Reserved Instances for new ones.",
      "description_length": 467,
      "index": 1987,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting specific attributes of an EC2 image, such as launch permissions, by making the corresponding AWS API call. It works with the `ResetImageAttributeRequest` type to specify the image and attribute to reset, and returns no output on success. It is used when modifying shared image permissions or other resettable image properties directly through the EC2 API.",
      "description_length": 385,
      "index": 1988,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of describing attributes of an EC2 network interface, working with input and output types defined in the `Aws_ec2.Types` module. It provides functions to convert native input to an HTTP request and parse HTTP responses into results or errors, using AWS-specific error parsing based on status codes and response data. Concrete use cases include querying the status or configuration of EC2 network interfaces within an AWS environment.",
      "description_length": 476,
      "index": 1989,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint connections in EC2 by sending and processing AWS API requests. It works with input and output types specific to the `DescribeVpcEndpointConnections` operation, along with internal EC2 error types. It is used to retrieve information about VPC endpoint connections in a structured format, suitable for integration with AWS SDK tooling and automation workflows.",
      "description_length": 402,
      "index": 1990,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnTunnelOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying options for a specific AWS EC2 VPN tunnel by converting native input into an HTTP request and parsing responses or errors from AWS. It works directly with `ModifyVpnTunnelOptionsRequest` and `ModifyVpnTunnelOptionsResult` types, along with internal EC2 error types. Concrete use cases include updating tunnel-specific settings such as pre-shared keys, tunnel options, or routing type for an existing AWS EC2 VPN connection.",
      "description_length": 453,
      "index": 1991,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcPeeringConnections",
      "library": "aws-ec2",
      "description": "This module handles describing VPC peering connections in AWS EC2 by converting input requests to HTTP format and parsing HTTP responses into outputs or errors. It works with input and output types specific to the DescribeVpcPeeringConnections operation, along with error types defined in the EC2 service. Use this module to query details about existing VPC peering connections, including their status, peer VPC IDs, and associated metadata.",
      "description_length": 441,
      "index": 1992,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 launch templates by converting input requests into properly signed HTTP queries and processing responses. It works with `DeleteLaunchTemplateRequest` and `DeleteLaunchTemplateResult` types, along with internal error types for failure handling. Concrete use cases include issuing delete commands for unused launch templates and integrating with automation tools that manage EC2 infrastructure lifecycle.",
      "description_length": 442,
      "index": 1993,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateSnapshots",
      "library": "aws-ec2",
      "description": "This module handles creating snapshots of EC2 volumes by defining the request structure, response decoding, and error parsing for the AWS EC2 API. It works with input and output types specific to the CreateSnapshots operation, including encoded HTTP requests and XML-parsed errors. Concrete use cases include initiating multi-volume snapshots and handling API responses with precise error codes and statuses.",
      "description_length": 408,
      "index": 1994,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVpcAttribute",
      "library": "aws-ec2",
      "description": "This module modifies VPC attributes in AWS EC2 by sending a query-formatted HTTP request with the required action and version parameters. It encodes a `ModifyVpcAttributeRequest` into an HTTP request and decodes the response, returning `unit` on success or an EC2-specific error if decoding fails. It is used to programmatically enable or disable VPC features like DNS support or hostnames through direct API calls.",
      "description_length": 415,
      "index": 1995,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateEnclaveCertificateIamRole",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of an IAM role from an enclave certificate in EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, along with error parsing specific to this operation. The module works directly with EC2-specific request and response types, targeting use cases such as managing secure enclave configurations and IAM role permissions.",
      "description_length": 396,
      "index": 1996,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetManagedPrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles retrieving entries from an EC2 managed prefix list by converting input requests into properly signed HTTP queries and parsing the responses. It works with structured input and output types defined in the `Aws_ec2.Types` module, along with internal error types for handling failures. Concrete use cases include querying CIDR block entries from a managed prefix list and handling pagination or errors specific to the AWS EC2 API.",
      "description_length": 447,
      "index": 1997,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeSecurityGroups",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 security groups by converting input requests into signed HTTP queries and parsing responses. It works with security group request and result types, along with internal EC2 error types. Use it to retrieve detailed information about specific security groups or filter them based on criteria like VPC or owner ID.",
      "description_length": 345,
      "index": 1998,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpointConnectionNotifications",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoint connection notifications in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DeleteVpcEndpointConnectionNotificationsRequest` and `DeleteVpcEndpointConnectionNotificationsResult`, along with internal error types for handling failures. It provides functions to construct HTTP requests from input, parse responses into results or errors, and decode AWS service errors into specific notification deletion failure types.",
      "description_length": 515,
      "index": 1999,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CopyImage",
      "library": "aws-ec2",
      "description": "This module handles the copying of Amazon Machine Images (AMIs) across regions by encoding requests into HTTP queries and decoding responses. It works with `CopyImageRequest` and `CopyImageResult` types to specify source and destination details, and processes errors returned from the EC2 service. Concrete use cases include replicating AMIs for disaster recovery, regional deployment, or centralized image management.",
      "description_length": 418,
      "index": 2000,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyDefaultCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles modifying default credit specifications for EC2 instances using the AWS SDK. It provides functions to construct HTTP requests from native types, parse responses into result types, and decode errors specific to this operation. The module works directly with EC2 credit specification requests and responses, targeting use cases like adjusting default CPU credit behavior for supported instance types.",
      "description_length": 418,
      "index": 2001,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.StartInstances",
      "library": "aws-ec2",
      "description": "This module handles starting EC2 instances by defining the request and response types for the operation. It provides functions to convert start instance requests to HTTP format and parse the corresponding responses or errors. Concrete use cases include initiating instance startup actions and processing the results from AWS EC2.",
      "description_length": 329,
      "index": 2002,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelExportTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an EC2 export task by defining the request structure, error types, and HTTP conversion logic. It works with EC2 export task identifiers and AWS error responses, providing functions to serialize requests into HTTP queries and deserialize HTTP responses into unit or error results. Concrete use cases include programmatically stopping in-progress export tasks and handling task cancellation errors in EC2 management workflows.",
      "description_length": 464,
      "index": 2003,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SendDiagnosticInterrupt",
      "library": "aws-ec2",
      "description": "This module sends a diagnostic interrupt to an EC2 instance to trigger a crash dump or other diagnostic action. It handles the conversion of a native request type into a signed HTTP query request and decodes responses into unit or error results. The module works directly with EC2 instance identifiers and AWS error responses, making it suitable for systems monitoring or automated diagnostics in EC2 environments.",
      "description_length": 414,
      "index": 2004,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles creating capacity reservations in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with EC2-specific input and output structures, including encoded query parameters and XML-parsed results. Use this module when programmatically reserving EC2 capacity, handling the full lifecycle of request signing, submission, and response decoding.",
      "description_length": 448,
      "index": 2005,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UnassignIpv6Addresses",
      "library": "aws-ec2",
      "description": "This module handles the unassignment of IPv6 addresses from EC2 instances by defining the request and response types, along with functions to serialize and deserialize the data for HTTP communication. It works directly with EC2-specific types such as `UnassignIpv6AddressesRequest` and `UnassignIpv6AddressesResult`, and handles errors defined in the EC2 API. Concrete use cases include programmatically removing IPv6 addresses from running instances and managing network configurations in automated deployment pipelines.",
      "description_length": 521,
      "index": 2006,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 traffic mirror filter rules by defining the request and response types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `ModifyTrafficMirrorFilterRuleRequest` and `ModifyTrafficMirrorFilterRuleResult` types, encoding them into query parameters and parsing responses. It is used when adjusting rules that control traffic mirroring behavior in AWS EC2, such as updating rule descriptions or traffic direction.",
      "description_length": 517,
      "index": 2007,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SearchTransitGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module handles querying AWS EC2 for transit gateway routes by converting input requests into properly signed HTTP queries and decoding responses into structured results or errors. It works directly with `SearchTransitGatewayRoutesRequest` and `SearchTransitGatewayRoutesResult` types, interacting with AWS's EC2 API endpoint. It is used to retrieve route information from a specified transit gateway, typically for network diagnostics or infrastructure automation tasks.",
      "description_length": 475,
      "index": 2008,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the attachment of a virtual private gateway to a VPC in AWS EC2. It provides functions to construct HTTP requests from native types, parse responses into result types, and decode error information specific to the attachment operation. It works directly with EC2's AttachVpnGatewayRequest, AttachVpnGatewayResult, and internal error types during API interactions.",
      "description_length": 382,
      "index": 2009,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AcceptVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of accepting VPC endpoint connections in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, including `AcceptVpcEndpointConnectionsRequest` and `AcceptVpcEndpointConnectionsResult`. Concrete use cases include programmatically managing VPC endpoint connection approvals and integrating EC2 endpoint acceptance logic into larger infrastructure automation workflows.",
      "description_length": 440,
      "index": 2010,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCarrierGateways",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe carrier gateways in EC2, converting input parameters into a properly signed HTTP request and parsing the response into structured output or error types. It works directly with `DescribeCarrierGatewaysRequest` and `DescribeCarrierGatewaysResult` from the EC2 types module. Use this module when querying AWS EC2 for information about carrier gateways associated with your account, such as their state or attachment status.",
      "description_length": 465,
      "index": 2011,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module handles creating EC2 launch templates by defining the request structure, response parsing, and error handling for the AWS API call. It works with input and output types specific to the `CreateLaunchTemplate` operation, including encoded HTTP requests and XML-parsed errors. Concrete use cases include submitting launch template configurations to AWS EC2 and processing the resulting API responses or errors.",
      "description_length": 419,
      "index": 2012,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayVpcAttachments",
      "library": "aws-ec2",
      "description": "This module handles the querying and parsing of transit gateway VPC attachment details from AWS EC2. It converts input requests into properly signed HTTP queries and decodes responses into structured results or specific AWS errors. It is used to retrieve information about how VPCs are attached to transit gateways, including filtering by attachment IDs or transit gateway IDs.",
      "description_length": 377,
      "index": 2013,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVgwRoutePropagation",
      "library": "aws-ec2",
      "description": "This module enables route propagation for a virtual private gateway in Amazon EC2. It handles the low-level request and response conversion, error parsing, and HTTP communication required to propagate routes from a virtual private gateway to a route table. The module works directly with EC2 route tables and virtual private gateways, using AWS-specific request signing and service endpoints.",
      "description_length": 392,
      "index": 2014,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpointServiceConfigurations",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoint service configurations by converting input requests into properly signed HTTP queries and processing responses. It works with EC2-specific input and output types, including error responses, to manage the lifecycle of VPC endpoint services. Concrete use cases include removing outdated or unused VPC endpoint service configurations and handling the associated API interactions with AWS EC2.",
      "description_length": 438,
      "index": 2015,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RequestSpotInstances",
      "library": "aws-ec2",
      "description": "This module handles the creation and processing of spot instance requests in EC2. It translates native request data into properly formatted HTTP queries and decodes HTTP responses into result or error types specific to spot instance operations. Use this module to programmatically request spot instances and handle their responses or errors in an EC2 environment.",
      "description_length": 363,
      "index": 2016,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayVirtualInterfaces",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 local gateway virtual interface descriptions between native OCaml types and HTTP requests/responses. It works with input requests and output results specific to describing local gateway virtual interfaces, along with internal EC2 errors. It is used to construct signed HTTP requests for querying EC2 about local gateway virtual interface details and to decode the corresponding responses or handle errors from the service.",
      "description_length": 464,
      "index": 2017,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayVirtualInterfaceGroups",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 local gateway virtual interface group descriptions between native OCaml types and HTTP requests/responses. It works with input requests, output results, and error types specific to the EC2 API. It is used to send queries to AWS EC2 for retrieving local gateway virtual interface group data and to decode the corresponding responses or errors.",
      "description_length": 384,
      "index": 2018,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a transit gateway prefix list reference in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DeleteTransitGatewayPrefixListReferenceRequest` and `DeleteTransitGatewayPrefixListReferenceResult`, along with internal error types for handling failures. It provides functions to construct and parse HTTP requests and responses, and to interpret AWS service errors related to this operation.",
      "description_length": 470,
      "index": 2019,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.PurchaseHostReservation",
      "library": "aws-ec2",
      "description": "This module handles the purchase of host reservations in EC2 by defining the request and response types specific to that operation. It provides functions to convert native request types to HTTP requests and parse HTTP responses into results or errors. It works directly with EC2 host reservation requests, responses, and internal error types, enabling precise interaction with EC2's host reservation API endpoints.",
      "description_length": 414,
      "index": 2020,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the creation of DHCP options sets in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with DHCP configuration data, including domain names, DNS servers, and other network settings. It is used when setting up custom network configurations for EC2 instances in a VPC.",
      "description_length": 385,
      "index": 2021,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting specific attributes of an EC2 instance, such as the kernel or RAM disk. It works directly with EC2 instance attribute reset requests, converting them to and from HTTP requests and responses. Concrete use cases include modifying instance boot settings or correcting misconfigured instance metadata.",
      "description_length": 327,
      "index": 2022,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of EBS encryption settings for EC2 instances by converting native inputs into signed HTTP requests and parsing responses. It works with EC2-specific request and response types, including error structures defined in AWS specifications. Use this module to query whether EBS encryption is enabled by default in a given AWS region.",
      "description_length": 361,
      "index": 2023,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorFilterNetworkServices",
      "library": "aws-ec2",
      "description": "This module handles modifying traffic mirror filter network services in EC2 by encoding requests into HTTP queries and decoding responses. It works with input and output types specific to traffic mirror filter modifications, along with error types defined in the EC2 API. It is used when updating which network services are monitored by a traffic mirror filter, handling the low-level request signing, encoding, and response parsing required for the EC2 API call.",
      "description_length": 463,
      "index": 2024,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module enables DNS support for ClassicLink in a VPC by providing functions to construct and handle the corresponding EC2 API request. It works with VPC identifiers and converts them into HTTP requests compatible with AWS query format, returning success or error responses. Concrete use cases include configuring network settings to allow DNS resolution between EC2-Classic instances and a VPC.",
      "description_length": 398,
      "index": 2025,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateDefaultVpc",
      "library": "aws-ec2",
      "description": "This module handles the creation of a default VPC in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateDefaultVpcRequest` and `CreateDefaultVpcResult` types, and handles errors via `Errors_internal`. It is used when interacting with the EC2 API to create a default VPC, ensuring correct request formatting and response parsing.",
      "description_length": 438,
      "index": 2026,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles modifying AWS EC2 transit gateways by converting native input into HTTP requests and parsing responses or errors. It works with `ModifyTransitGatewayRequest` and `ModifyTransitGatewayResult` types, along with internal error types for failure handling. It is used to send API calls that update transit gateway configurations, such as changing description or options, and processes the resulting output or error from the server.",
      "description_length": 446,
      "index": 2027,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RestoreManagedPrefixListVersion",
      "library": "aws-ec2",
      "description": "This module handles restoring a specific version of an EC2 managed prefix list by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with EC2 prefix list identifiers and version numbers, encoding and decoding them for API transmission. Use this module when rolling back a managed prefix list to a prior version in AWS EC2 networking management workflows.",
      "description_length": 450,
      "index": 2028,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeprovisionByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the deprovisioning of Bring Your Own IP (BYOIP) CIDR blocks in AWS EC2. It provides functions to construct HTTP requests from input types, decode responses into result types, and parse AWS errors specific to this operation. The module works directly with EC2's BYOIP CIDR request and response structures, enabling users to release custom IP ranges from their EC2 environment.",
      "description_length": 395,
      "index": 2029,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Transit Gateway VPC attachments by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with Transit Gateway VPC attachment identifiers, encoding delete operations into properly signed HTTP queries and decoding results or errors from the service response. It is used to programmatically remove VPC connections from a Transit Gateway in AWS EC2 environments.",
      "description_length": 491,
      "index": 2030,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateVpcCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of CIDR blocks from VPCs in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, along with error parsing specific to the API call. It works directly with EC2 VPC CIDR block request and result types, enabling programmatic management of VPC IP ranges.",
      "description_length": 334,
      "index": 2031,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSecurityGroup",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 security groups by converting native input into HTTP requests and parsing responses. It works with `DeleteSecurityGroupRequest` to construct signed HTTP requests and processes responses into unit outputs or specific AWS errors. Concrete use cases include removing unused security groups and ensuring cleanup of network access rules in EC2 environments.",
      "description_length": 392,
      "index": 2032,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module modifies an existing Traffic Mirror session in EC2 by updating its properties such as target, filter, or packet length. It works directly with Traffic Mirror session request and result types, enabling precise configuration changes. Concrete use cases include adjusting traffic monitoring settings dynamically without recreating the session.",
      "description_length": 352,
      "index": 2033,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve specific attributes of an instance, such as its state, block device mappings, or user data. It works with input and output types defined in `Aws_ec2.Types`, converting native OCaml values to and from HTTP requests and responses. Concrete use cases include querying instance metadata or configuration details directly from an OCaml application interacting with AWS EC2.",
      "description_length": 417,
      "index": 2034,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVolume",
      "library": "aws-ec2",
      "description": "This module handles the creation of EBS volumes in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2's CreateVolumeRequest and Volume types, encoding to AWS query format and decoding XML responses. It is used to make CreateVolume API calls to AWS EC2, handling success and error responses specific to volume creation.",
      "description_length": 425,
      "index": 2035,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the rejection of EC2 transit gateway peering attachments by converting input requests into properly signed HTTP queries and decoding responses into results or errors. It works directly with transit gateway peering attachment request and result types, along with internal EC2 error types. Use this module to programmatically reject peering connections between transit gateways in AWS EC2 environments.",
      "description_length": 420,
      "index": 2036,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayRouteTableAssociations",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of associations for EC2 transit gateway route tables by converting input requests into properly signed HTTP queries and parsing responses. It works with input requests and output results specific to transit gateway route table associations, along with internal error types for failure handling. Concrete use cases include querying the status and properties of route table associations attached to a transit gateway, such as checking attachment IDs or route propagation settings.",
      "description_length": 512,
      "index": 2037,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceRouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing a route table association in EC2 by converting native requests to HTTP format and parsing responses. It works with route table association request and result types, along with internal EC2 error types. It is used to update which route table is associated with a specific subnet or VPC in AWS EC2 configurations.",
      "description_length": 341,
      "index": 2038,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeMovingAddresses",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe moving addresses, converting input parameters to an HTTP request and parsing responses or errors from the server. It works with `DescribeMovingAddressesRequest` and `DescribeMovingAddressesResult` types, along with internal error types for failure handling. Use this module to query information about elastic IP addresses that are being moved between AWS accounts or VPCs.",
      "description_length": 421,
      "index": 2039,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetRequestHistory",
      "library": "aws-ec2",
      "description": "This module handles the conversion and parsing of requests and responses for querying the history of EC2 spot fleet requests. It works with input and output types specific to the DescribeSpotFleetRequestHistory operation, along with error types from the EC2 API. It is used to send HTTP requests to the EC2 service and handle the corresponding responses or errors.",
      "description_length": 364,
      "index": 2040,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CancelSpotInstanceRequests",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of EC2 spot instance requests by converting native inputs into properly signed HTTP requests and decoding responses into results or errors. It works directly with spot instance request IDs and AWS EC2 API responses, using query string encoding for request construction. Concrete use cases include programmatically terminating spot instance requests and handling cancellation responses or errors from AWS.",
      "description_length": 441,
      "index": 2041,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAvailabilityZones",
      "library": "aws-ec2",
      "description": "This module handles describing availability zones in EC2 by sending and processing HTTP requests. It works with input and output types specific to the DescribeAvailabilityZones API call, along with internal error types. It encodes requests into HTTP format, decodes responses, and maps AWS errors to typed errors based on the API specification.",
      "description_length": 344,
      "index": 2042,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CancelReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of Reserved Instances listings in EC2 by providing functions to construct and interpret HTTP requests and responses according to the AWS API. It works with specific input and output types defined in the `Aws_ec2.Types` module, along with error handling tailored to the cancellation operation. Use cases include submitting cancellation requests and processing their outcomes, including decoding errors specific to this action.",
      "description_length": 462,
      "index": 2043,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the creation of route tables in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific types like `CreateRouteTableRequest` and `CreateRouteTableResult`, and handles error decoding from AWS XML responses. It is used when interacting with the EC2 API to programmatically set up route tables as part of network configuration workflows.",
      "description_length": 465,
      "index": 2044,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC peering connections in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with the `DeleteVpcPeeringConnectionRequest` and `DeleteVpcPeeringConnectionResult` types, along with internal error types for handling failures. It is used to send a deletion request to EC2 and process the result, including decoding errors specific to the delete VPC peering connection operation.",
      "description_length": 456,
      "index": 2045,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointConnectionNotifications",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint connection notifications in AWS EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the EC2 service, including request parameters and result data structures. Concrete use cases include querying the status and configuration of VPC endpoint connections and handling response errors specific to EC2.",
      "description_length": 408,
      "index": 2046,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSnapshots",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve snapshot information by converting input parameters into an HTTP request and parsing the response. It works with `DescribeSnapshotsRequest` and `DescribeSnapshotsResult` types to manage query parameters and decode results or errors. Concrete use cases include querying metadata about EBS snapshots, such as status, owner, and volume information, and handling paginated results from AWS.",
      "description_length": 435,
      "index": 2047,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetInstances",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication for querying instances in an EC2 Spot Fleet. It translates input requests to properly signed HTTP queries and decodes responses or errors from the server. It is used to retrieve information about the instances that are part of a specific Spot Fleet request.",
      "description_length": 300,
      "index": 2048,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfacePermissions",
      "library": "aws-ec2",
      "description": "This module handles describing network interface permissions in EC2 by converting input requests to HTTP format and parsing responses. It works with EC2-specific request and response types, including network interface permission filters and AWS errors. Use this module to query which principals have been granted permission to attach or manage specific network interfaces.",
      "description_length": 372,
      "index": 2049,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of local gateway routes in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateLocalGatewayRouteRequest` and `CreateLocalGatewayRouteResult` types, encoding and decoding them for API communication. Concrete use cases include configuring routing for local gateways within a VPC by specifying destination CIDR blocks and target local gateway route table IDs.",
      "description_length": 498,
      "index": 2050,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetGroupsForCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles retrieving resource groups associated with EC2 capacity reservations. It provides functions to convert input requests to HTTP format and parse HTTP responses into outputs or errors, working directly with EC2-specific request and result types. Use this module when querying which resource groups are linked to a specific capacity reservation in EC2.",
      "description_length": 368,
      "index": 2051,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of EC2 capacity reservations by providing functions to construct and process HTTP requests and responses. It works with input and output types specific to the `CancelCapacityReservation` operation, along with error handling tailored to this call. Concrete use cases include sending cancellation requests to AWS EC2 and parsing the results or errors returned by the service.",
      "description_length": 410,
      "index": 2052,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNatGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of NAT gateways in AWS EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including error types defined in the AWS EC2 API. Concrete use cases include initiating a NAT gateway creation request, handling response data, and parsing API-specific errors based on HTTP status codes.",
      "description_length": 455,
      "index": 2053,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Errors_internal",
      "library": "aws-ec2",
      "description": "This module defines a comprehensive set of error types specific to EC2 operations, such as invalid instance states, resource limits, and malformed inputs. It includes functions to convert errors to HTTP status codes and strings, and to parse error strings back into typed values. These capabilities are used to handle and propagate EC2 API error conditions programmatically.",
      "description_length": 374,
      "index": 2054,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGateways",
      "library": "aws-ec2",
      "description": "This module handles the low-level HTTP communication for querying AWS EC2 transit gateways. It translates input requests into properly signed HTTP queries and decodes responses into structured results or specific error types. It is used to retrieve information about existing transit gateways by making direct API calls to the EC2 service.",
      "description_length": 339,
      "index": 2055,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTags",
      "library": "aws-ec2",
      "description": "This module handles the deletion of tags from Amazon EC2 resources by defining the request structure, encoding it into an HTTP query, and processing the response. It works with the `DeleteTagsRequest` type to specify which tags to remove and communicates with the EC2 service endpoint. Concrete use cases include removing metadata tags from instances, volumes, or snapshots for resource management and cost tracking purposes.",
      "description_length": 425,
      "index": 2056,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles modifying a transit gateway prefix list reference in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically for modifying prefix list references. It works with transit gateway prefix list reference requests and responses, handling errors specific to this operation.",
      "description_length": 370,
      "index": 2057,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeExportImageTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe export image tasks in EC2. It converts input requests to HTTP format and parses responses or errors from the server. It works with EC2 export image task request and result types, and handles task status queries for image exports.",
      "description_length": 274,
      "index": 2058,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceNetworkAclAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing network ACL associations in EC2 by converting native requests into properly signed HTTP queries and decoding responses. It works directly with `ReplaceNetworkAclAssociationRequest` and `ReplaceNetworkAclAssociationResult` types, along with internal EC2 errors. It is used to issue and process EC2 API calls for modifying network ACL associations on subnets.",
      "description_length": 387,
      "index": 2059,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing attributes of a VPC in AWS EC2, specifically by constructing and interpreting HTTP requests and responses. It works with VPC attribute request and result types, along with internal error types for handling failures. Use this when querying whether a VPC has certain attributes, such as DNS support or hostname resolution enabled.",
      "description_length": 359,
      "index": 2060,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceMetadataOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 instance metadata options by defining the request and response types for the operation. It provides functions to convert native input to HTTP requests and parse HTTP responses into results or errors. Use this when enabling or disabling instance metadata options like HTTP tokens or instance metadata tags.",
      "description_length": 339,
      "index": 2061,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the modification of ID formatting in EC2 by sending a specific request to AWS, encoding input data into an HTTP query and processing the response. It works directly with the `ModifyIdFormatRequest` type for input and returns no output on success, using custom error types for failure cases. Concrete use cases include ensuring resource IDs follow a specific format, such as enabling longer IDs for better uniqueness guarantees.",
      "description_length": 447,
      "index": 2062,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpoints",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoints in AWS EC2 by converting input requests into properly signed HTTP queries and processing the responses. It works directly with `DeleteVpcEndpointsRequest` and `DeleteVpcEndpointsResult` types, along with internal error types for handling failures. It is used when removing VPC endpoints programmatically, ensuring correct request formatting, signing, and error handling during the deletion process.",
      "description_length": 448,
      "index": 2063,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RevokeClientVpnIngress",
      "library": "aws-ec2",
      "description": "This module handles revoking ingress access for a client VPN endpoint in EC2 by sending a signed HTTP request to AWS. It works with input and output types specific to the RevokeClientVpnIngress operation, including request parameters and result data. Use this module when managing client access to a VPN by removing specific authorization rules based on CIDR ranges or active directory groups.",
      "description_length": 393,
      "index": 2064,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportClientVpnClientConfiguration",
      "library": "aws-ec2",
      "description": "This module handles exporting client configuration for a Client VPN endpoint in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically for the `ExportClientVpnClientConfiguration` API call. It works with input and output types defined in `Aws_ec2.Types` and handles errors defined in `Aws_ec2.Errors_internal`.",
      "description_length": 395,
      "index": 2065,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateKeyPair",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 key pairs by defining the request and response types for the AWS API. It provides functions to convert key pair creation requests to HTTP format and parse responses, ensuring proper encoding and error handling. It works directly with EC2-specific types like `CreateKeyPairRequest` and `KeyPair`, and is used when provisioning new key pairs for secure instance access.",
      "description_length": 407,
      "index": 2066,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeregisterTransitGatewayMulticastGroupSources",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of multicast group sources from a transit gateway in EC2. It works with EC2-specific request and response types, including transit gateway multicast group source identifiers. Use this module to remove specific multicast sources from a transit gateway multicast domain, targeting scenarios where multicast traffic control is required for network segmentation or resource isolation.",
      "description_length": 419,
      "index": 2067,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RevokeSecurityGroupEgress",
      "library": "aws-ec2",
      "description": "This module handles revoking egress rules from EC2 security groups by defining the request and response types for the operation. It works with structured data types representing security group egress revocation requests and AWS EC2 service responses. Concrete use cases include updating network access policies by removing outbound rules from security groups in AWS infrastructure automation workflows.",
      "description_length": 402,
      "index": 2068,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateDhcpOptions",
      "library": "aws-ec2",
      "description": "This module associates a set of DHCP options with a specific VPC in Amazon EC2. It handles the low-level request and response conversion for the `AssociateDhcpOptions` API call, including HTTP serialization and error parsing. The module works directly with the `AssociateDhcpOptionsRequest` type as input and returns no output on success, using internal EC2 error types for failure handling.",
      "description_length": 391,
      "index": 2069,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeElasticGpus",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe elastic GPUs in EC2, converting input parameters into an HTTP request and parsing the HTTP response into either a result or an error. It works with the `DescribeElasticGpusRequest` and `DescribeElasticGpusResult` types for input and output, and uses `Errors_internal` for error handling. A concrete use case is querying information about provisioned elastic GPU resources in an EC2 environment, such as their status, type, and associated instances.",
      "description_length": 493,
      "index": 2070,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetManagedPrefixListAssociations",
      "library": "aws-ec2",
      "description": "This module handles retrieving associations for managed prefix lists in AWS EC2 by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with EC2 prefix list association data, enabling interactions with AWS's API to query and decode association results or errors. Use this module when programmatically managing or inspecting VPC routing configurations tied to managed prefix lists.",
      "description_length": 474,
      "index": 2071,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.EnableVolumeIO",
      "library": "aws-ec2",
      "description": "This module handles the low-level operations for enabling I/O on an EC2 volume by defining the request structure, error responses, and HTTP serialization. It works directly with EC2 volume identifiers and AWS error formats, converting native requests to signed HTTP queries and parsing service responses. It is used when implementing or integrating with EC2 APIs that require explicit volume I/O activation, such as after importing a volume.",
      "description_length": 441,
      "index": 2072,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateVpnConnectionRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of routes for a specified EC2 VPN connection by defining the input structure and conversion functions to and from HTTP requests. It works directly with the `CreateVpnConnectionRouteRequest` type for input and returns no output on success, using standard AWS error handling for failures. It is used when managing routing for site-to-site VPN connections in AWS EC2, specifically to add or modify routes associated with a virtual private gateway.",
      "description_length": 477,
      "index": 2073,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeByoipCidrs",
      "library": "aws-ec2",
      "description": "This module handles the conversion of input and output types for the EC2 DescribeByoipCidrs API call, including HTTP serialization and deserialization. It works with the DescribeByoipCidrsRequest and DescribeByoipCidrsResult types, along with internal EC2 error types. It is used to construct properly signed HTTP requests and parse responses, specifically for managing Bring Your Own IP CIDR blocks in EC2.",
      "description_length": 407,
      "index": 2074,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesModifications",
      "library": "aws-ec2",
      "description": "Handles the conversion and parsing of requests and responses for querying modifications to reserved EC2 instances. Works with input and output types specific to reserved instance modification descriptions, along with error types defined in the EC2 API. Used when retrieving details about changes made to reserved instance configurations in AWS EC2.",
      "description_length": 348,
      "index": 2075,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceTypeOfferings",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeInstanceTypeOfferings` API call in AWS EC2, allowing users to query available instance types across regions and availability zones. It works with input and output types defined in `Aws_ec2.Types`, specifically `DescribeInstanceTypeOfferingsRequest` and `DescribeInstanceTypeOfferingsResult`, and handles errors via `Errors_internal`. Use this module to retrieve instance type availability filtered by location or other criteria directly from EC2.",
      "description_length": 479,
      "index": 2076,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.DescribeVpcs",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 VPC description requests to HTTP queries and parses responses or errors from AWS. It works with `DescribeVpcsRequest` and `DescribeVpcsResult` types for input and output, and uses `Errors_internal` for error handling. It is used to send DescribeVpcs API calls to AWS EC2 and process the results or errors returned.",
      "description_length": 356,
      "index": 2077,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeKeyPairs",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe key pairs, converting input requests to HTTP format and parsing responses or errors from the server. It works with key pair metadata including names and fingerprints, used to manage SSH access to EC2 instances. Concrete use cases include listing existing key pairs, verifying key pair existence, and retrieving key pair details for automation or infrastructure validation.",
      "description_length": 421,
      "index": 2078,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of a route in an EC2 route table by defining the request and response types for the AWS API call. It provides functions to convert route creation requests to HTTP format and parse responses or errors from the server. Use this module when programmatically adding routes to VPC route tables, such as configuring network traffic rules for subnets.",
      "description_length": 377,
      "index": 2079,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of IAM instance profiles from EC2 instances by defining the request and response types specific to this operation. It provides functions to convert native input types to HTTP requests and parse HTTP responses into output or error types, ensuring correct encoding and decoding of API calls. Concrete use cases include managing IAM role detachment from running EC2 instances and handling the resulting API responses or errors.",
      "description_length": 463,
      "index": 2080,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AdvertiseByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the advertisement of Bring Your Own IP (BYOIP) CIDR blocks in AWS EC2. It provides functions to construct HTTP requests from input types, parse responses into result types, and decode specific AWS errors related to BYOIP CIDR advertisement. The module works directly with CIDR request and result types, along with internal EC2 error types, enabling precise control over IP block management operations.",
      "description_length": 421,
      "index": 2081,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeregisterImage",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of an Amazon EC2 image (AMI) by converting native requests into properly signed HTTP queries and processing responses. It works directly with the `DeregisterImageRequest` type, sending requests to the EC2 service endpoint and parsing results or errors from XML responses. Concrete use cases include removing outdated or unused AMIs from an AWS account to manage image lifecycle and reduce storage costs.",
      "description_length": 442,
      "index": 2082,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module resets specific attributes of an EC2 network interface, such as source/destination checking. It works directly with EC2 network interface attribute requests and responses, handling the low-level AWS API interaction. Use this module to disable source/destination checks on a network interface to allow traffic forwarding in custom routing scenarios.",
      "description_length": 360,
      "index": 2083,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeHostReservationOfferings",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 host reservation offerings requests to HTTP format and parses responses, working with input and output types defined in `Aws_ec2.Types`. It encodes request data into query parameters, decodes response bodies, and maps AWS errors to specific result types. Use this module to interact with EC2's host reservation offerings API by sending properly signed HTTP requests and handling the returned data or errors.",
      "description_length": 449,
      "index": 2084,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayPeeringAttachments",
      "library": "aws-ec2",
      "description": "This module handles describing transit gateway peering attachments in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to transit gateway peering attachment queries, along with internal EC2 errors. It is used to send DescribeTransitGatewayPeeringAttachments API requests and process their results or errors.",
      "description_length": 375,
      "index": 2085,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteKeyPair",
      "library": "aws-ec2",
      "description": "This module deletes an EC2 key pair by sending a signed HTTP request to the AWS EC2 service. It handles request construction, signing, and response parsing, specifically for the DeleteKeyPair operation. Use it to programmatically remove an unused key pair by its name or ID.",
      "description_length": 274,
      "index": 2086,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateDefaultSubnet",
      "library": "aws-ec2",
      "description": "This module handles creating a default subnet in EC2 by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with EC2-specific request and result types, encoding them into AWS query format and decoding responses into structured results or errors. It is used when programmatically setting up network infrastructure in AWS EC2, specifically for initializing default subnets in a VPC.",
      "description_length": 479,
      "index": 2087,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateSubnetCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of IPv6 CIDR blocks from EC2 subnets by converting input requests into properly signed HTTP queries and parsing responses or errors from the AWS API. It works directly with EC2-specific request and result types, including structured error handling for failed disassociation attempts. It is used when managing VPC subnet CIDR ranges programmatically, particularly during infrastructure automation or network reconfiguration tasks.",
      "description_length": 468,
      "index": 2088,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeImportSnapshotTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe import snapshot tasks in EC2. It converts input parameters into an HTTP request and decodes responses or errors from the server. It works with EC2-specific request and response types, including error responses encoded in XML.",
      "description_length": 270,
      "index": 2089,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeDhcpOptions` API call in AWS EC2, converting input requests to HTTP format and parsing responses or errors from the service. It works with `DescribeDhcpOptionsRequest` and `DescribeDhcpOptionsResult` types to query and retrieve DHCP options set configurations. It is used to inspect existing DHCP options in an EC2 environment, such as retrieving domain name or DNS server settings for a VPC.",
      "description_length": 425,
      "index": 2090,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSnapshot",
      "library": "aws-ec2",
      "description": "This module implements the deletion of an EC2 snapshot by converting a snapshot ID into a signed HTTP request and handling the response. It works directly with the `DeleteSnapshotRequest` type, which includes the snapshot ID, and communicates with the EC2 service endpoint. It is used to issue the DeleteSnapshot API call to AWS, handling request signing, encoding, and error parsing specific to snapshot deletion.",
      "description_length": 414,
      "index": 2091,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AllocateAddress",
      "library": "aws-ec2",
      "description": "This module handles the allocation of Elastic IP addresses in Amazon EC2 by defining the request and response types for the AllocateAddress API call. It provides functions to convert native request types to HTTP requests and parse HTTP responses into results or errors specific to address allocation. Use this module when programmatically managing IP address assignments for EC2 instances.",
      "description_length": 389,
      "index": 2092,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.PurchaseScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles the purchase of scheduled EC2 instances by providing functions to construct HTTP requests and parse responses according to the AWS EC2 API. It works with input and output types specific to purchasing scheduled instances, including encoded query parameters and error responses. Concrete use cases include submitting a purchase request with specified instance details and handling the resulting API response or error.",
      "description_length": 435,
      "index": 2093,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTables",
      "library": "aws-ec2",
      "description": "This module handles describing local gateway route tables in EC2 by converting input requests to HTTP calls and parsing responses. It works with EC2-specific request and response types, including error handling for AWS API interactions. Use this module to query metadata about local gateway route tables, such as their IDs, associations, and routes, as part of network management workflows.",
      "description_length": 390,
      "index": 2094,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the rejection of VPC peering connections in AWS EC2 by providing functions to construct and process the associated API requests and responses. It works with input and output types specific to the `RejectVpcPeeringConnection` operation, along with error handling tailored to this call. Use this module when programmatically declining pending VPC peering connections between virtual private clouds.",
      "description_length": 416,
      "index": 2095,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFleetInstances",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 fleet instance requests to HTTP format and parses responses, specifically working with `DescribeFleetInstancesRequest` and `DescribeFleetInstancesResult` types. It encodes input data into signed HTTP queries for the EC2 service and decodes XML responses into structured results or errors. It is used to retrieve information about instances in an EC2 fleet by sending properly formatted API requests and handling the resulting output or errors.",
      "description_length": 485,
      "index": 2096,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeManagedPrefixLists",
      "library": "aws-ec2",
      "description": "This module handles describing managed prefix lists in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeManagedPrefixLists` operation, along with error types defined in the EC2 API. It is used when querying AWS EC2 for information about managed prefix lists, such as retrieving their IDs, names, or associated metadata.",
      "description_length": 403,
      "index": 2097,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles attaching a network interface to an EC2 instance by defining the request and response types specific to that operation. It provides functions to convert requests to HTTP format and parse responses or errors from AWS, ensuring correct encoding and decoding of API calls. Concrete use cases include programmatically connecting network interfaces to instances and handling the resulting API responses or errors directly.",
      "description_length": 437,
      "index": 2098,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetAssociatedEnclaveCertificateIamRoles",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of IAM roles associated with an EC2 instance's enclave certificate. It provides functions to convert input data into a properly signed HTTP request and to parse the corresponding HTTP response into a structured result or error. The module works directly with EC2-specific request and response types, handling query parameter encoding and XML-based error parsing tied to this specific API operation.",
      "description_length": 432,
      "index": 2099,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceRoute",
      "library": "aws-ec2",
      "description": "This module handles the replacement of a route in an EC2 route table by converting a native request into an HTTP request, sending it to the appropriate AWS endpoint, and parsing the response or any errors returned. It works with the `ReplaceRouteRequest` type for input and returns a unit output upon success, while errors are decoded into specific AWS EC2 error types. It is used when modifying routing behavior in a VPC by replacing an existing route with a new target.",
      "description_length": 471,
      "index": 2100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpoint",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing VPC endpoint in AWS EC2 by converting native requests into properly signed HTTP queries and parsing responses or errors from the service. It works directly with `ModifyVpcEndpointRequest` and `ModifyVpcEndpointResult` types, along with internal EC2 error types for failure handling. Concrete use cases include enabling or disabling private DNS, updating policy documents, or modifying route tables associated with a VPC endpoint.",
      "description_length": 471,
      "index": 2101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateSnapshot",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 snapshots by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into snapshot data or specific errors. It works directly with EC2 snapshot creation requests, responses, and AWS internal error types. Concrete use cases include initiating a snapshot of an EBS volume and processing the resulting snapshot metadata or handling snapshot creation failures with precise error decoding.",
      "description_length": 500,
      "index": 2102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles modifying the default KMS key ID for EBS encryption in EC2. It provides functions to convert input data into an HTTP request and parse HTTP responses into output or errors, specifically for this operation. The module works with EC2-specific request and response types, including error handling tailored to the ModifyEbsDefaultKmsKeyId API call.",
      "description_length": 364,
      "index": 2103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifySubnetAttribute",
      "library": "aws-ec2",
      "description": "This module modifies subnet attributes in AWS EC2, such as enabling public IP assignment or changing route tables. It handles requests to update subnet configuration and processes responses or errors from the EC2 API. Use this module to programmatically adjust subnet behavior within an EC2 network setup.",
      "description_length": 305,
      "index": 2104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeExportTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 export tasks by converting input requests to HTTP format and parsing responses. It works with `DescribeExportTasksRequest` and `DescribeExportTasksResult` types to manage task status and metadata retrieval. Concrete use cases include querying the state of ongoing disk image exports and handling export task errors programmatically.",
      "description_length": 381,
      "index": 2105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateFleet",
      "library": "aws-ec2",
      "description": "This module handles creating EC2 fleets by defining the request and response types for the operation. It provides functions to convert fleet creation requests to HTTP requests and parse corresponding responses or errors. It works directly with EC2-specific types like `CreateFleetRequest.t` and `CreateFleetResult.t`, and is used when provisioning capacity with specific fleet configurations in EC2.",
      "description_length": 399,
      "index": 2106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing AWS EC2 VPN connection by defining the request structure, response decoding, and error handling specific to the `ModifyVpnConnection` API call. It works with input and output types defined in `Aws_ec2.Types`, including `ModifyVpnConnectionRequest` and `ModifyVpnConnectionResult`, and processes HTTP requests and responses using AWS query format. Concrete use cases include updating the customer gateway or virtual private gateway associated with a VPN connection, and adjusting tunnel options or static routes for an existing VPN connection.",
      "description_length": 584,
      "index": 2107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AttachInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles attaching an internet gateway to a VPC in AWS EC2. It provides functions to convert native requests to HTTP format and parse responses or errors from the service. The module works with `AttachInternetGatewayRequest` input and returns no output on success, using standard EC2 error types for failure cases.",
      "description_length": 325,
      "index": 2108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSubnets",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve subnet details by converting input requests to HTTP format and parsing responses. It works with subnet descriptions, handling input as query parameters and output as XML responses. Concrete use cases include querying subnet configurations for monitoring or managing network resources in AWS environments.",
      "description_length": 353,
      "index": 2109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelBundleTask",
      "library": "aws-ec2",
      "description": "This module handles cancellation of bundle tasks in EC2 by converting native requests into properly signed HTTP queries and decoding responses. It works with `CancelBundleTaskRequest` and `CancelBundleTaskResult` types, along with internal error types for failure handling. Use this when you need to programmatically cancel an ongoing bundle task for an EC2 instance, such as stopping the creation of an Amazon Machine Image from a running instance.",
      "description_length": 449,
      "index": 2110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayMulticastDomainAssociations",
      "library": "aws-ec2",
      "description": "Handles retrieving associations for an EC2 Transit Gateway Multicast Domain by converting input requests to HTTP format and parsing responses. Works with Transit Gateway Multicast Domain association request and result types, handling errors specific to the EC2 service. Used when querying AWS for multicast domain associations tied to a specific transit gateway.",
      "description_length": 362,
      "index": 2111,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.BundleInstance",
      "library": "aws-ec2",
      "description": "This module handles the bundling of an instance in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2 instance identifiers and storage configurations, enabling operations like initiating instance bundling tasks and retrieving their results. Concrete use cases include preparing EC2 instances for storage as S3 objects and managing the lifecycle of bundled instance images.",
      "description_length": 479,
      "index": 2112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the creation of transit gateway VPC attachments in AWS EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with VPC attachment request data, including parameters like transit gateway ID, VPC ID, and subnet IDs. Use this module when programmatically linking a VPC to a transit gateway, particularly for managing complex network topologies across multiple AWS regions.",
      "description_length": 483,
      "index": 2113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC flow logs in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with EC2 flow log configurations, including parameters like log destination, format, and traffic type. Concrete use cases include enabling flow logs for network monitoring, capturing IP traffic data for security analysis, and integrating with logging services like CloudWatch.",
      "description_length": 514,
      "index": 2114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpnGateways",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 VPN gateway description requests to HTTP queries and parses responses or errors from AWS. It works with `DescribeVpnGatewaysRequest` and `DescribeVpnGatewaysResult` types for input and output, and uses `Errors_internal` for error handling. It is used to send DescribeVpnGateways API calls to AWS EC2 and decode the results or handle failures.",
      "description_length": 384,
      "index": 2115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC flow logs in Amazon EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `DeleteFlowLogsRequest` and `DeleteFlowLogsResult` structures, encoding and decoding them for EC2 API compatibility. It is used when programmatically removing flow log records to stop traffic logging for specific network interfaces or subnets.",
      "description_length": 452,
      "index": 2116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateSubnetCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles associating a CIDR block with a subnet in AWS EC2. It provides functions to convert native input types to HTTP requests and parse responses or errors from the service. Use this module when programmatically managing IPv4 or IPv6 CIDR ranges for subnets in EC2.",
      "description_length": 279,
      "index": 2117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnAuthorizationRules",
      "library": "aws-ec2",
      "description": "This module handles describing client VPN authorization rules in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeClientVpnAuthorizationRules` API call, along with associated error types. It is used when retrieving information about authorization rules for a client VPN endpoint, such as when managing access control or auditing permissions.",
      "description_length": 425,
      "index": 2118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles associating a transit gateway multicast domain with a transit gateway attachment in AWS EC2. It provides functions to convert input and output types to and from HTTP requests, sign and route requests to the correct service endpoint, and parse errors specific to this operation. It works directly with EC2 transit gateway multicast domain association requests and responses, enabling precise control over multicast traffic in virtual private clouds.",
      "description_length": 468,
      "index": 2119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServices",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint services in EC2 by converting input requests to HTTP calls and parsing responses. It works with input and output types specific to the `DescribeVpcEndpointServices` operation, along with error types defined in the EC2 API. It is used to list available VPC endpoint services and handle their query encoding, response decoding, and error handling directly.",
      "description_length": 398,
      "index": 2120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeSpotPriceHistory",
      "library": "aws-ec2",
      "description": "This module handles querying and parsing spot price history data from EC2. It converts input requests into properly signed HTTP queries and decodes responses into structured results or specific AWS errors. It is used to retrieve historical pricing information for EC2 spot instances, enabling cost analysis and bidding decisions based on past market prices.",
      "description_length": 357,
      "index": 2121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeIamInstanceProfileAssociations",
      "library": "aws-ec2",
      "description": "This module handles describing IAM instance profile associations in EC2 by converting input requests to HTTP format and parsing responses. It works with EC2-specific request and result types, along with internal error structures. Concrete use cases include querying the status of IAM role associations for EC2 instances and handling the resulting metadata or errors from AWS.",
      "description_length": 375,
      "index": 2122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteRoute",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a route from a route table in EC2 by converting native inputs into properly signed HTTP requests and parsing responses. It works directly with `DeleteRouteRequest` to construct requests and processes responses into unit output or specific EC2 errors. Concrete use cases include removing outdated or incorrect routes from virtual private cloud (VPC) route tables as part of network management automation.",
      "description_length": 439,
      "index": 2123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachClassicLinkVpc",
      "library": "aws-ec2",
      "description": "This module handles attaching a classic link to a VPC in AWS EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with EC2-specific input and output structures, including encoded query parameters and XML-parsed errors. Concrete use cases include initiating the attachment operation via HTTP and decoding the result or error response.",
      "description_length": 424,
      "index": 2124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module implements the necessary operations to delete an EC2 managed prefix list by handling request construction, response parsing, and error decoding. It works directly with `DeleteManagedPrefixListRequest` and `DeleteManagedPrefixListResult` types, along with internal EC2 error types for failure handling. Concrete use cases include sending properly signed HTTP requests to delete a specific managed prefix list and interpreting the resulting success or error responses.",
      "description_length": 478,
      "index": 2125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteCarrierGateway",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 DeleteCarrierGateway API operation. It handles request signing, HTTP conversion, and response parsing for deleting a carrier gateway, working with the DeleteCarrierGatewayRequest and DeleteCarrierGatewayResult types. It is used to remove a carrier gateway from a VPC when managing AWS infrastructure programmatically.",
      "description_length": 352,
      "index": 2126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles the creation of transit gateway prefix list references in AWS EC2. It sends requests to associate a prefix list with a transit gateway route table and receives responses confirming the association or indicating failure. The module works directly with transit gateway IDs, prefix list IDs, and route table IDs, targeting use cases like managing route propagation and traffic filtering in hybrid cloud networks.",
      "description_length": 429,
      "index": 2127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceCapacityReservationAttributes",
      "library": "aws-ec2",
      "description": "This module modifies capacity reservation attributes for EC2 instances using specific API requests. It handles input and output types defined in the `Aws_ec2.Types` module, along with error types from `Aws_ec2.Errors_internal`. Use this module when adjusting capacity reservations for running instances, such as changing target capacity or instance match criteria.",
      "description_length": 364,
      "index": 2128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateVpcCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles associating a CIDR block with a VPC in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, including proper query encoding and error parsing. It works directly with EC2-specific request and result types, enabling precise control over VPC CIDR block management operations.",
      "description_length": 337,
      "index": 2129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module handles the deletion of AWS EC2 traffic mirror filters by defining the request and response types, along with functions to serialize requests into HTTP calls and deserialize HTTP responses into results or errors. It works directly with `DeleteTrafficMirrorFilterRequest` and `DeleteTrafficMirrorFilterResult` types, and handles specific AWS EC2 errors. It is used to issue and process API calls to delete a traffic mirror filter in EC2, ensuring correct request formatting and response parsing.",
      "description_length": 506,
      "index": 2130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnTargetNetworks",
      "library": "aws-ec2",
      "description": "This module handles describing target networks for Client VPN endpoints in EC2. It provides functions to convert input data into properly signed HTTP requests and parse responses or errors from the service. It works directly with EC2's Client VPN target network request and result types, enabling programmatic access to query and manage network associations for Client VPN.",
      "description_length": 373,
      "index": 2131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateCarrierGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of carrier gateways in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including error types defined in the AWS EC2 API. Concrete use cases include initiating carrier gateway creation and handling the resulting API responses or errors.",
      "description_length": 416,
      "index": 2132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableTransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module handles disabling route table propagation for AWS EC2 transit gateways. It works with input and output types defined in the Aws_ec2.Types module, specifically DisableTransitGatewayRouteTablePropagationRequest and DisableTransitGatewayRouteTablePropagationResult. Use this module to send a direct API call to disable propagation between a transit gateway attachment and a route table, typically after creating or modifying network configurations.",
      "description_length": 457,
      "index": 2133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteNatGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of NAT gateways in EC2 by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with `DeleteNatGatewayRequest` and `DeleteNatGatewayResult` structures, encoding requests into query format and decoding responses into structured outputs or errors. Concrete use cases include initiating a NAT gateway deletion and processing the result or error from the EC2 API.",
      "description_length": 485,
      "index": 2134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types",
      "library": "aws-ec2",
      "description": "OCaml module Types: This module provides structured data types for configuring EC2 instances, network interfaces, storage devices, and metadata, with a focus on modeling AWS API interactions. It includes enumerations, lists, and nested records to represent resources like IP ranges, block device mappings, security groups, and placement strategies, enabling precise handling of collections and configurations. Specific use cases include defining EBS volume properties, managing IPv6 addressing, specifying network interface associations, and tracking instance lifecycle states through typed representations of API request/response payloads. Also contains: This module represents the status summary of an EC2 instance, including its overall status and detailed status information. It provides functions to construct, parse, and convert the summary to and from XML, JSON, and query formats. Use this module when retrieving or processing instance status checks from AWS EC2, particularly for monitoring health and troubleshooting instances.; This module handles lists of EC2 instance state changes. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction of empty lists. Use it when processing responses or building requests involving multiple instance state transitions in AWS EC2.",
      "description_length": 1317,
      "index": 2135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeSecurityGroupReferences",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 security group reference requests to HTTP queries and parses responses or errors from AWS. It works with `DescribeSecurityGroupReferencesRequest` and `DescribeSecurityGroupReferencesResult` types, along with internal EC2 error types. It is used to query AWS for security group references and decode the resulting XML responses into structured data or handle specific API errors.",
      "description_length": 420,
      "index": 2136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ReportInstanceStatus",
      "library": "aws-ec2",
      "description": "This module handles reporting instance status in EC2 by sending HTTP requests to AWS. It works with `ReportInstanceStatusRequest` input to submit system status reports for EC2 instances, and processes responses into unit output or specific EC2 errors. It is used to notify AWS of instance health or scheduled events, such as maintenance or failure.",
      "description_length": 348,
      "index": 2137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointServicePermissions",
      "library": "aws-ec2",
      "description": "This module modifies permissions for a VPC endpoint service by adding or removing allowed principals. It works with VPC endpoint service identifiers and principal ARNs, enabling fine-grained access control for services accessed through VPC endpoints. Use this module to programmatically manage which AWS accounts or organizations can connect to a specific VPC endpoint service.",
      "description_length": 377,
      "index": 2138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribePublicIpv4Pools",
      "library": "aws-ec2",
      "description": "This module handles the AWS EC2 API call to describe public IPv4 pools, providing functions to convert input and output to and from HTTP requests. It works with the `DescribePublicIpv4PoolsRequest` and `DescribePublicIpv4PoolsResult` types, along with internal EC2 error types for handling failures. It is used to retrieve information about public IPv4 address pools configured in an EC2 environment, such as their tags, description, and allocated CIDR blocks.",
      "description_length": 460,
      "index": 2139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeImages",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe images, converting input parameters into an HTTP request and parsing the response or errors. It works with `DescribeImagesRequest` and `DescribeImagesResult` types, along with internal error types for failure handling. It is used to retrieve metadata about EC2 images, such as AMI details, filtering by owner or tags.",
      "description_length": 366,
      "index": 2140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RunScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles running scheduled EC2 instances by defining input and output types for the operation, along with functions to convert between HTTP requests and native types. It works directly with EC2-specific request and response structures, including error handling tailored to the RunScheduledInstances API call. Use this module to programmatically launch instances that are tied to a scheduled event, such as launching test environments at specific times.",
      "description_length": 463,
      "index": 2141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module creates a route in a Client VPN endpoint. It handles the conversion between native OCaml types and HTTP requests/responses for the specific operation of adding routes. It works directly with CreateClientVpnRouteRequest and CreateClientVpnRouteResult types, encoding requests into signed HTTP queries and decoding responses or errors from the EC2 service.",
      "description_length": 366,
      "index": 2142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeHosts",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve details about dedicated hosts, including filtering by host IDs or availability zones. It works with input requests and output responses structured according to the EC2 API specification. Use this module when querying host capacity and allocation status in an AWS account.",
      "description_length": 320,
      "index": 2143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe fast snapshot restores in EC2. It works with input and output types specific to the `DescribeFastSnapshotRestores` operation, along with internal error types. It is used to query the status of fast snapshot restores for EBS snapshots in an AWS account.",
      "description_length": 297,
      "index": 2144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLaunchTemplates",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication for describing EC2 launch templates. It converts input requests into properly signed HTTP queries and decodes responses into structured results or errors. It works directly with EC2 launch template request and response types, handling error parsing based on AWS specifications.",
      "description_length": 320,
      "index": 2145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 network interface, such as attaching or detaching security groups or changing the source/destination check flag. It works directly with network interface IDs and attribute configurations defined in the EC2 API. Concrete use cases include updating security group associations for an interface or enabling/disabling source/destination checks for NAT instances.",
      "description_length": 400,
      "index": 2146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module enables fast snapshot restores for EC2 instances by handling the request and response lifecycle. It works with EC2-specific input and output types, including snapshot restore configurations and error responses. Use this module to programmatically configure snapshot restore settings for EC2 instances in AWS environments.",
      "description_length": 333,
      "index": 2147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ImportClientVpnClientCertificateRevocationList",
      "library": "aws-ec2",
      "description": "This module handles importing client certificate revocation lists for Client VPN endpoints in EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically working with Client VPN certificate revocation data. Use this module when managing certificate revocation for secure Client VPN access control.",
      "description_length": 373,
      "index": 2148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelConversionTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an EC2 conversion task by defining the input structure, error types, and HTTP serialization for the API call. It works directly with EC2 conversion task identifiers and AWS internal error types. Concrete use cases include sending a cancellation request for a specific conversion task and handling the response or error from the AWS API.",
      "description_length": 376,
      "index": 2149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLaunchTemplateVersion",
      "library": "aws-ec2",
      "description": "This module handles creating a new version of an EC2 launch template by defining the request structure, response parsing, and error handling specific to that operation. It works with input data structured as `CreateLaunchTemplateVersionRequest.t` and processes responses into `CreateLaunchTemplateVersionResult.t` or error types on failure. Concrete use cases include versioning launch templates for EC2 instance configuration updates and managing template revisions programmatically.",
      "description_length": 484,
      "index": 2150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribePrincipalIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 principal ID format requests to HTTP queries and parses responses or errors from AWS. It works with `DescribePrincipalIdFormatRequest` and `DescribePrincipalIdFormatResult` types, along with internal error types for failure handling. It is used when querying AWS EC2 to determine the ID format settings for resources like instances or volumes, ensuring proper request signing and endpoint routing.",
      "description_length": 439,
      "index": 2151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeregisterInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module handles deregistering instance event notification attributes in EC2 by converting input requests to HTTP format and parsing responses or errors. It works with specific EC2 types for input, output, and errors, and is used to manage event notification settings for instances. Concrete use cases include disabling notifications for instance state changes or scheduled events directly through EC2's API.",
      "description_length": 411,
      "index": 2152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.MonitorInstances",
      "library": "aws-ec2",
      "description": "This module enables monitoring of EC2 instances by converting instance IDs into HTTP requests for the AWS API. It handles request signing, encoding, and decoding responses into structured results or errors. Use it to programmatically enable detailed monitoring for specific EC2 instances.",
      "description_length": 288,
      "index": 2153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTags",
      "library": "aws-ec2",
      "description": "This module handles creating tags for EC2 resources by defining the request structure, HTTP conversion logic, and error parsing specific to the CreateTags API call. It works with EC2 resource identifiers and tag lists, encoding them into HTTP requests signed with the appropriate AWS version. It is used when tagging instances, volumes, or other EC2 resources directly via the AWS API.",
      "description_length": 385,
      "index": 2154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles describing VPC flow logs in AWS EC2, providing functions to construct HTTP requests and parse responses for retrieving flow log configurations. It works with input and output types specific to the `DescribeFlowLogs` API call, along with internal error types for handling failures. Concrete use cases include querying flow log metadata, such as filter criteria and destination information, for network monitoring and diagnostics.",
      "description_length": 448,
      "index": 2155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the deletion of route tables in EC2 by converting native inputs into properly signed HTTP requests and decoding responses. It works directly with `DeleteRouteTableRequest` to construct requests and processes responses into unit outputs or specific EC2 errors. Concrete use cases include removing unused route tables and automating VPC cleanup tasks.",
      "description_length": 369,
      "index": 2156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module enables interaction with the EC2 API to link a VPC with a ClassicLink connection. It handles converting native input types to properly signed HTTP requests and parsing responses into either success results or specific EC2 errors. It works directly with EC2's VPC and ClassicLink request/response types, targeting use cases like enabling network connectivity between VPCs and EC2-Classic instances.",
      "description_length": 409,
      "index": 2157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportImage",
      "library": "aws-ec2",
      "description": "This module handles the conversion and parsing of requests and responses for importing images in EC2. It works with `ImportImageRequest.t` as input and produces `ImportImageResult.t` as output, while managing errors through `Errors_internal.t`. It is used to construct signed HTTP requests, decode responses, and interpret AWS service errors specific to image import operations.",
      "description_length": 378,
      "index": 2158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLaunchTemplateVersions",
      "library": "aws-ec2",
      "description": "This module handles describing versions of an EC2 launch template by converting input requests into properly signed HTTP queries and parsing the responses. It works with launch template version request and result types, along with internal EC2 error types. Use this module to retrieve specific versions of a launch template by ID or name, including details like instance configuration and metadata.",
      "description_length": 398,
      "index": 2159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles modifying credit specifications for EC2 instances by converting native input into HTTP requests and parsing responses or errors. It works with input and output types defined in `Aws_ec2.Types` for modifying instance credit settings, along with internal error types. Use this module to programmatically adjust CPU credit behavior for burstable performance instances via the AWS EC2 API.",
      "description_length": 405,
      "index": 2160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteFleets",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 fleets by converting native input into HTTP requests and parsing responses into outputs or errors. It works with `DeleteFleetsRequest` and `DeleteFleetsResult` types, along with internal error types for handling failure cases. It is used to send properly signed EC2 API requests to delete fleets and decode the results or errors returned by the service.",
      "description_length": 393,
      "index": 2161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSubnet",
      "library": "aws-ec2",
      "description": "This module handles creating subnets in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `CreateSubnetRequest` and `CreateSubnetResult` structures, encoding them into HTTP queries and decoding responses. Concrete use cases include initiating subnet creation with specific VPC and availability zone settings, and handling the resulting subnet metadata or errors.",
      "description_length": 461,
      "index": 2162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation to retrieve specific attributes of an Amazon Machine Image (AMI), such as launch permissions or block device mappings. It works with the `DescribeImageAttributeRequest` input type, returns an `ImageAttribute` output, and processes errors defined in `Errors_internal`. Use this module to programmatically inspect AMI metadata, for example, to verify which AWS accounts have launch permissions on a shared AMI.",
      "description_length": 450,
      "index": 2163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAccountAttributes",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve account attributes, converting inputs to HTTP requests and parsing responses or errors. It works with input requests, output results, and internal EC2 errors, using AWS-specific serialization and deserialization. Concrete use cases include querying account limits, supported platforms, and region-specific configurations directly from EC2.",
      "description_length": 388,
      "index": 2164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetRequests",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication for querying AWS EC2 spot fleet requests. It encodes input parameters into signed HTTP requests and decodes responses into structured output or error types. It works directly with EC2 spot fleet request and response types, enabling interaction with the EC2 service to retrieve spot fleet configuration and status.",
      "description_length": 356,
      "index": 2165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCoipPools",
      "library": "aws-ec2",
      "description": "This module handles the DescribeCoipPools API call in EC2, converting input requests to HTTP format and parsing responses or errors from the service. It works with CoIP pool request and result types, specifically handling input as `DescribeCoipPoolsRequest.t` and output as `DescribeCoipPoolsResult.t`. It is used to retrieve information about customer-owned IP pools in EC2, such as their allocation and associated tags.",
      "description_length": 421,
      "index": 2166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFpgaImages",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe FPGA images, converting input parameters into an HTTP request and parsing the response or errors. It works with EC2-specific request and response types, including FPGA image filters and metadata. Use this module to query details about available FPGA images in EC2, such as their properties and status, using custom filters.",
      "description_length": 372,
      "index": 2167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 network interfaces by defining the request and response types for the AWS API call. It provides functions to convert native input into an HTTP request, parse HTTP responses into results or errors, and map AWS errors to specific failure conditions. Concrete use cases include provisioning network interfaces with specific configurations like subnet, security groups, and IP addresses.",
      "description_length": 423,
      "index": 2168,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorTargets",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication lifecycle for querying AWS EC2 traffic mirror targets. It translates native input types into properly signed HTTP requests and decodes responses into structured output or error types. It is used to retrieve information about configured traffic mirror targets in an EC2 environment.",
      "description_length": 324,
      "index": 2169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayAttachmentPropagations",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of transit gateway attachment propagations in AWS EC2. It sends a query-formatted HTTP request to the EC2 service and decodes the response into structured output or an error. It works directly with transit gateway attachment propagation requests and responses, handling error parsing based on AWS EC2 API specifications.",
      "description_length": 354,
      "index": 2170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module implements the client-side logic for deleting an EC2 Traffic Mirror session via the AWS API. It handles request construction, signing, and response parsing for the specific input and output types defined in the `Aws_ec2.Types` module. Concrete use cases include removing a configured Traffic Mirror session by its ID and handling the resulting API response or error.",
      "description_length": 378,
      "index": 2171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of a VPC peering connection in AWS EC2 by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with VPC peering connection identifiers and AWS error responses. Use this module when programmatically confirming a VPC peering connection request between two VPCs in EC2.",
      "description_length": 395,
      "index": 2172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module handles the creation of Client VPN endpoints in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with `CreateClientVpnEndpointRequest` and `CreateClientVpnEndpointResult` types, and handles error responses specific to the EC2 service. Concrete use cases include initiating a Client VPN endpoint creation request, signing and sending it to the EC2 API endpoint, and processing the resulting response or error.",
      "description_length": 556,
      "index": 2173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the rejection of a Transit Gateway VPC attachment in AWS EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically working with Transit Gateway VPC attachment request and result types. It is used to programmatically decline pending VPC attachments to a transit gateway, returning the updated attachment state or an error if the operation fails.",
      "description_length": 436,
      "index": 2174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles modifying attributes of an FPGA image in EC2, specifically by constructing and parsing HTTP requests and responses for the `ModifyFpgaImageAttribute` API call. It works with input and output types defined in `Aws_ec2.Types`, including `ModifyFpgaImageAttributeRequest` and `ModifyFpgaImageAttributeResult`, and uses `Aws_ec2.Errors_internal` for error handling. It is used to send properly signed EC2 API requests to update FPGA image permissions or descriptions, and to decode the resulting responses or errors.",
      "description_length": 532,
      "index": 2175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFleetHistory",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 fleet history requests to HTTP queries and parses responses, working with input and output types defined in `Aws_ec2.Types`. It encodes `DescribeFleetHistoryRequest.t` into signed HTTP requests and decodes responses into `DescribeFleetHistoryResult.t` or appropriate errors. It is used to retrieve and process historical event data for EC2 fleets, including launch and termination events.",
      "description_length": 430,
      "index": 2176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module handles disabling fast snapshot restores for EC2 snapshots by converting native input into HTTP requests and parsing responses into outputs or errors. It works with input and output types defined in `Aws_ec2.Types` and errors from `Aws_ec2.Errors_internal`. It is used to interact directly with the EC2 API to manage snapshot restore settings.",
      "description_length": 355,
      "index": 2177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyIdentityIdFormat",
      "library": "aws-ec2",
      "description": "This module modifies the ID format settings for resources in EC2, specifically handling requests to enable or disable longer ID formats for specified resource types. It operates on a request structure that includes the principal ARN and resource type, converting it to and from HTTP requests for communication with the EC2 service. It is used when migrating resources to ensure compatibility with the 17-character ID format.",
      "description_length": 424,
      "index": 2178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module deletes a network ACL entry by constructing and parsing HTTP requests and responses specific to the EC2 service. It handles the conversion of native types to HTTP requests and decodes responses or errors, working directly with `DeleteNetworkAclEntryRequest` and `error_response` types. It is used when managing network access control lists in AWS EC2, specifically to remove rules from a network ACL.",
      "description_length": 412,
      "index": 2179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCustomerGateways",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe customer gateways, converting input parameters into a signed HTTP request and parsing the response into structured output or error types. It works with input requests, output results, and internal error types defined in the Aws_ec2.Types module. Concrete use cases include querying the status and configuration of existing customer gateways in an AWS account as part of network management or monitoring workflows.",
      "description_length": 462,
      "index": 2180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssignPrivateIpAddresses",
      "library": "aws-ec2",
      "description": "This module handles assigning private IP addresses to EC2 network interfaces by defining the request and response types specific to that operation. It works with EC2 network interface identifiers and private IP address configurations, supporting both assigning and unassigning operations. It is used when programmatically managing IP address allocations in EC2 instances, particularly in scenarios requiring custom networking setups or failover configurations.",
      "description_length": 460,
      "index": 2181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AllocateHosts",
      "library": "aws-ec2",
      "description": "This module handles the allocation of dedicated hosts in EC2 by defining the request and response types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with EC2-specific types like `AllocateHostsRequest` and `AllocateHostsResult`, and handles AWS internal errors. Concrete use cases include making low-level API calls to provision dedicated hosts and processing the outcomes of those calls.",
      "description_length": 485,
      "index": 2182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcTenancy",
      "library": "aws-ec2",
      "description": "This module handles modifying the tenancy of a VPC in AWS EC2 by converting native input into an HTTP request and parsing the response into a result or error. It works directly with `ModifyVpcTenancyRequest` and `ModifyVpcTenancyResult` types, along with internal EC2 errors. It is used to send a properly signed EC2 API request to change a VPC's tenancy setting and decode the outcome.",
      "description_length": 386,
      "index": 2183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterTransitGatewayMulticastGroupSources",
      "library": "aws-ec2",
      "description": "This module handles registering multicast group sources for a transit gateway in AWS EC2. It works with EC2-specific request and response types, including transit gateway multicast group source identifiers and network interface references. It is used when managing multicast traffic in virtual private clouds connected via transit gateways.",
      "description_length": 340,
      "index": 2184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles retrieving the default KMS key ID for EBS encryption in AWS EC2. It works with EC2-specific request and response types, translating between native OCaml structures and HTTP requests/responses. It is used when querying the current default KMS key configuration for EBS volumes in an EC2 environment.",
      "description_length": 318,
      "index": 2185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachVolume",
      "library": "aws-ec2",
      "description": "This module handles attaching an EBS volume to an EC2 instance by converting a native request into an HTTP query request, sending it to the correct EC2 endpoint, and parsing the response into either a volume attachment result or an EC2-specific error. It works directly with `AttachVolumeRequest` and `VolumeAttachment` types, along with internal EC2 error types for failure handling. A concrete use case is programmatically mounting storage volumes to running instances in cloud infrastructure automation workflows.",
      "description_length": 516,
      "index": 2186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnEndpoints",
      "library": "aws-ec2",
      "description": "This module handles describing Client VPN endpoints in EC2 by converting input requests to HTTP format, sending them to the correct service endpoint, and parsing the responses. It works with input and output types specific to the `DescribeClientVpnEndpoints` operation, along with internal error types for handling failures. It is used when querying AWS EC2 for information about configured Client VPN endpoints, including their configuration and status.",
      "description_length": 454,
      "index": 2187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module deletes a route from an AWS EC2 Client VPN endpoint by sending a signed HTTP request. It encodes a route deletion request into an HTTP query and decodes the response, handling success or error states. It works with Client VPN route request and result types, targeting specific use cases like removing unwanted or outdated routes from a Client VPN configuration.",
      "description_length": 373,
      "index": 2188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles associating a route table with a subnet or gateway in EC2. It directly works with `AssociateRouteTableRequest` and `AssociateRouteTableResult` types, translating between native OCaml structures and HTTP requests/responses. It is used to configure routing by linking route tables to network interfaces in AWS deployments.",
      "description_length": 340,
      "index": 2189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 Transit Gateway Multicast Domain by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with Transit Gateway Multicast Domain identifiers in the input type and returns confirmation data in the output type. It is used when tearing down multicast domain resources in an AWS EC2 environment.",
      "description_length": 421,
      "index": 2190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetDefaultCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles retrieving the default credit specification for EC2 instances. It works with EC2 credit specification requests and responses, translating them to and from HTTP format for API communication. Use this module when querying the default CPU credit behavior for burstable performance instances in EC2.",
      "description_length": 315,
      "index": 2191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpoint",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoints in AWS EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateVpcEndpointRequest` and `CreateVpcEndpointResult` types, and handles errors via the `error` type derived from AWS internal error specifications. Concrete use cases include configuring interface or gateway endpoints for services like S3 or DynamoDB within a VPC, and managing endpoint policies and routing.",
      "description_length": 523,
      "index": 2192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteFpgaImage",
      "library": "aws-ec2",
      "description": "This module implements the deletion of FPGA images in EC2 by converting native requests into properly signed HTTP queries and parsing responses into structured results or errors. It handles input requests and output responses specific to the DeleteFpgaImage API, including error decoding based on HTTP status codes. It is used to delete a specified FPGA image by its ID, returning success or failure information directly from the EC2 service.",
      "description_length": 442,
      "index": 2193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeRegions",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 region description requests to HTTP queries and parses responses or errors from AWS. It works with input and output types specific to the EC2 service, including encoded query parameters and XML-parsed results. Concrete use cases include querying available AWS regions and handling region-related response data or errors in EC2 operations.",
      "description_length": 380,
      "index": 2194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 instance event notification attributes requests to HTTP and responses back to native types. It works with input and output types specific to describing event notification attributes, along with error handling for AWS EC2 responses. It is used when querying the current event notification settings for EC2 instances, such as determining whether notifications are delivered to SNS topics or CloudWatch.",
      "description_length": 442,
      "index": 2195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInternetGateways",
      "library": "aws-ec2",
      "description": "This module handles describing Internet Gateways in EC2 by converting input requests to HTTP queries and parsing responses. It works with `DescribeInternetGatewaysRequest` and `DescribeInternetGatewaysResult` types, along with internal EC2 error types. It is used to send `DescribeInternetGateways` API calls, encode them into properly formatted HTTP requests, and decode or handle corresponding responses and errors.",
      "description_length": 417,
      "index": 2196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelSpotFleetRequests",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of spot fleet requests in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to spot fleet cancellation, including request parameters and response statuses, along with error types returned by the EC2 API. Concrete use cases include programmatically terminating spot fleet requests and handling the success or error responses from the EC2 service.",
      "description_length": 465,
      "index": 2197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module handles the deletion of AWS EC2 Traffic Mirror Targets by defining the request and response types, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with `DeleteTrafficMirrorTargetRequest` and `DeleteTrafficMirrorTargetResult` types, and handles error responses specific to the EC2 service. Concrete use cases include sending properly signed HTTP requests to delete a Traffic Mirror Target and parsing the resulting responses or errors.",
      "description_length": 504,
      "index": 2198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkInterface",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API operation to delete a network interface. It handles the request lifecycle including signing, service endpoint determination, and HTTP serialization/deserialization. It works directly with `DeleteNetworkInterfaceRequest` inputs, returns no output on success, and processes errors specific to the EC2 service. A concrete use case is programmatically removing unused or orphaned network interfaces in an EC2 environment to manage resources and reduce costs.",
      "description_length": 493,
      "index": 2199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyAvailabilityZoneGroup",
      "library": "aws-ec2",
      "description": "This module handles modifying an Availability Zone group in EC2 by sending a signed HTTP request to the EC2 service. It works with the `ModifyAvailabilityZoneGroupRequest` and `ModifyAvailabilityZoneGroupResult` types, translating between them and HTTP requests/responses. It is used to enable or disable partition placement for an Availability Zone group, specifically targeting EC2's placement group functionality.",
      "description_length": 416,
      "index": 2200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeHostReservations",
      "library": "aws-ec2",
      "description": "This module handles the DescribeHostReservations API call in EC2, interacting with input and output types specific to host reservation descriptions. It encodes requests into HTTP format and decodes HTTP responses into structured results or errors. It is used to retrieve details about Dedicated Host reservations available in an AWS account.",
      "description_length": 341,
      "index": 2201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeBundleTasks",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 bundle task descriptions between native OCaml types and HTTP requests/responses. It works with input type `DescribeBundleTasksRequest.t`, output type `DescribeBundleTasksResult.t`, and error type `Errors_internal.t`. It is used to send requests to the EC2 service to retrieve information about instance bundle tasks, handling request signing, query encoding, and response parsing.",
      "description_length": 422,
      "index": 2202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptReservedInstancesExchangeQuote",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of Reserved Instances exchange quotes in AWS EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically working with exchange quote requests and results. It is used to programmatically accept a quote for exchanging Reserved Instances, handling request signing and response decoding.",
      "description_length": 388,
      "index": 2203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ApplySecurityGroupsToClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module applies security groups to a Client VPN target network in AWS EC2. It handles the conversion between native OCaml types and HTTP requests/responses, including proper query parameter encoding and response parsing. It works directly with EC2's Client VPN target network requests and responses, enabling precise configuration of network security policies.",
      "description_length": 364,
      "index": 2204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a client VPN target network in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DisassociateClientVpnTargetNetworkRequest` and `DisassociateClientVpnTargetNetworkResult`, along with internal error types for handling failures. It provides functions to convert requests to HTTP format, parse HTTP responses, and decode AWS errors specific to this operation, enabling direct interaction with the EC2 API for managing client VPN configurations.",
      "description_length": 532,
      "index": 2205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an association between a local gateway route table and a VPC in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DeleteLocalGatewayRouteTableVpcAssociationRequest` and `DeleteLocalGatewayRouteTableVpcAssociationResult`. Use this module when managing VPC connectivity configurations by removing route table associations for local gateways.",
      "description_length": 424,
      "index": 2206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnConnectionRoute",
      "library": "aws-ec2",
      "description": "This module deletes a static route associated with a virtual private gateway in a specified VPN connection. It handles requests via HTTP conversion, using EC2 service signing, and processes responses into unit output or specific errors. Concrete use cases include managing route tables for secure hybrid cloud connectivity and cleaning up obsolete routes after network reconfiguration.",
      "description_length": 385,
      "index": 2207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayAttachments",
      "library": "aws-ec2",
      "description": "This module handles the querying and parsing of transit gateway attachment data in AWS EC2. It converts input requests into properly signed HTTP queries and decodes responses into structured results or specific AWS errors. It is used to retrieve and process details about transit gateway attachments, such as their state and associated VPCs.",
      "description_length": 341,
      "index": 2208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles creating routes in an EC2 Transit Gateway by defining the request structure, response parsing, and error handling for the corresponding AWS API call. It works directly with Transit Gateway route requests and responses, including parameters like destination CIDR blocks and attachment IDs. It is used when configuring network traffic routing between VPCs or on-premises networks via a Transit Gateway.",
      "description_length": 420,
      "index": 2209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceTypes",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeInstanceTypes` API call in AWS EC2, allowing retrieval of metadata about available instance types. It works with input and output types defined in `Aws_ec2.Types`, specifically `DescribeInstanceTypesRequest` and `DescribeInstanceTypesResult`, and processes errors using `Aws_ec2.Errors_internal`. It converts requests to HTTP format, parses responses, and maps AWS errors to typed errors based on the API specification.",
      "description_length": 452,
      "index": 2210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayRouteTables",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeTransitGatewayRouteTables` API call in EC2, allowing retrieval of transit gateway route table metadata. It works with `DescribeTransitGatewayRouteTablesRequest` and `DescribeTransitGatewayRouteTablesResult` types, encoding requests to HTTP and decoding responses. Use this module to query AWS for details about existing transit gateway route tables, including filtering by tags or IDs.",
      "description_length": 418,
      "index": 2211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AcceptTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of transit gateway peering attachments in AWS EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically working with transit gateway peering attachment request and result types. It is used to programmatically accept peering connections between transit gateways in distributed VPC environments.",
      "description_length": 400,
      "index": 2212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module handles disabling EBS encryption by default in EC2 by converting native inputs to HTTP requests and parsing responses into outputs or errors. It works with EC2-specific request and response types, including `DisableEbsEncryptionByDefaultRequest`, `DisableEbsEncryptionByDefaultResult`, and internal EC2 errors. It is used to interact with the EC2 API endpoint, sign requests using the appropriate signature version, and handle the lifecycle of disabling EBS encryption at the infrastructure level.",
      "description_length": 509,
      "index": 2213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RunInstances",
      "library": "aws-ec2",
      "description": "This module handles launching EC2 instances by defining the request structure, encoding it into an HTTP query, and decoding the response. It works with input data structured as `RunInstancesRequest.t` and returns a `Reservation.t` on success, while handling errors via `Errors_internal.t`. It is used to programmatically start instances with specific configurations, such as instance type, AMI, and network settings, and to retrieve the resulting reservation information.",
      "description_length": 471,
      "index": 2214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelImportTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an import task in EC2 by defining the request and response types, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with EC2 import task identifiers and AWS error types, ensuring proper encoding and decoding of API calls. Use this module to programmatically cancel an ongoing import task and handle the result or any associated errors.",
      "description_length": 431,
      "index": 2215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AuthorizeSecurityGroupIngress",
      "library": "aws-ec2",
      "description": "This module handles the authorization of ingress rules for EC2 security groups by converting native input into signed HTTP requests and parsing responses. It works with `AuthorizeSecurityGroupIngressRequest` to configure access rules, returning unit on success or decoding specific AWS errors. It is used to programmatically allow inbound traffic to EC2 instances based on IP ranges, protocols, and ports.",
      "description_length": 405,
      "index": 2216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteQueuedReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles the deletion of queued Reserved Instances in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with specific input and output types defined in the `Aws_ec2.Types` module, along with error handling tailored to the delete operation. Concrete use cases include canceling pending Reserved Instance purchases and managing EC2 capacity reservations programmatically.",
      "description_length": 426,
      "index": 2217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CopySnapshot",
      "library": "aws-ec2",
      "description": "This module handles the copying of Amazon EC2 snapshots across regions by defining the request and response data structures, along with functions to serialize requests into HTTP calls and deserialize HTTP responses into results or errors. It works directly with `CopySnapshotRequest` and `CopySnapshotResult` types, which encapsulate source and destination snapshot metadata, including region, snapshot ID, and encryption settings. Concrete use cases include cross-region disaster recovery setups and centralized snapshot management workflows.",
      "description_length": 543,
      "index": 2218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ExportClientVpnClientCertificateRevocationList",
      "library": "aws-ec2",
      "description": "This module exports functions to generate and handle HTTP requests for retrieving a Client VPN client certificate revocation list from EC2. It works with input and output types specific to the `ExportClientVpnClientCertificateRevocationList` API call, along with error handling tailored to this operation. Use this module when programmatically accessing the revocation list for a Client VPN endpoint to enforce certificate-based access control.",
      "description_length": 444,
      "index": 2219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetSnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting attributes of an EC2 snapshot, specifically working with the `ResetSnapshotAttributeRequest` type. It provides functions to construct HTTP requests for the EC2 service, parse responses, and decode errors related to snapshot attribute resets. Concrete use cases include modifying snapshot permissions or launch permissions in AWS EC2 by removing specific attributes.",
      "description_length": 395,
      "index": 2220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeImportImageTasks",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 import image task requests to HTTP format and parses responses, working with `DescribeImportImageTasksRequest` and `DescribeImportImageTasksResult` types. It encodes input data into signed HTTP requests for the EC2 service and decodes responses into either results or specific AWS errors. Use this module to query the status of image import tasks in EC2, handling both successful responses and error conditions programmatically.",
      "description_length": 470,
      "index": 2221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSecurityGroup",
      "library": "aws-ec2",
      "description": "This module handles creating EC2 security groups by defining the request and response types for the AWS API call. It provides functions to convert native input into an HTTP request and parse HTTP responses into results or errors specific to the security group creation operation. Use this module when programmatically setting up network access rules for EC2 instances in AWS.",
      "description_length": 375,
      "index": 2222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteVpc",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a VPC in AWS EC2 by converting a native request into an HTTP call, sending it, and parsing the response. It works directly with the `DeleteVpcRequest` type for input and returns no output on success, using `Errors_internal` for failure cases. It is used when programmatically removing a VPC, ensuring proper request signing and endpoint routing.",
      "description_length": 381,
      "index": 2223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpc",
      "library": "aws-ec2",
      "description": "This module handles the creation of a Virtual Private Cloud (VPC) in AWS EC2 by defining the request and response types, along with functions to serialize the request into an HTTP call and deserialize the response or error. It works directly with the `CreateVpcRequest` and `CreateVpcResult` types, and processes errors specific to VPC creation. Concrete use cases include initiating a VPC creation request with a specified CIDR block and handling the resulting AWS response or error.",
      "description_length": 484,
      "index": 2224,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.StartVpcEndpointServicePrivateDnsVerification",
      "library": "aws-ec2",
      "description": "This module handles the initiation of private DNS verification for a VPC endpoint service in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, specifically encoding input into a query-formatted HTTP request and decoding responses into success or error states. It works directly with EC2 VPC endpoint service private DNS verification requests and responses, targeting use cases such as automating endpoint service validation workflows or integrating DNS verification into provisioning pipelines.",
      "description_length": 542,
      "index": 2225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module implements the deletion of EC2 Traffic Mirror filter rules by defining the request and response types, error handling, and HTTP serialization logic. It operates on `DeleteTrafficMirrorFilterRuleRequest` and `DeleteTrafficMirrorFilterRuleResult` data structures, interacting with AWS EC2 service endpoints. It is used to send signed HTTP requests to delete specific Traffic Mirror filter rules and handle the resulting responses or errors.",
      "description_length": 450,
      "index": 2226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteCustomerGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a customer gateway in AWS EC2 by defining the request structure, error responses, and HTTP serialization. It provides functions to convert native requests to HTTP format and parse HTTP responses into results or errors. Use this module to remove existing customer gateways by their ID or name in an EC2 environment.",
      "description_length": 350,
      "index": 2227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteEgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of egress-only internet gateways in EC2 by converting native requests into properly signed HTTP queries and parsing responses. It works with EC2-specific request and response types, including encoded query parameters and XML error handling. Use this module to programmatically remove egress-only internet gateways while ensuring correct request signing and response decoding.",
      "description_length": 408,
      "index": 2228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of describing FPGA image attributes in EC2, converting native input to HTTP requests and parsing responses into structured outputs or errors. It works with input and output types defined in `Aws_ec2.Types` for FPGA image attribute descriptions, along with internal EC2 error types. Concrete use cases include querying metadata such as permissions or visibility of a specific FPGA image by ID.",
      "description_length": 435,
      "index": 2229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the creation of AWS EC2 transit gateway route tables by defining the request and response types specific to this operation. It provides functions to convert native input into an HTTP request and parse HTTP responses into either a result or an error, ensuring correct encoding and decoding of API calls. Concrete use cases include initiating a transit gateway route table creation request and handling the resulting API response or errors such as invalid parameters or duplicate entries.",
      "description_length": 506,
      "index": 2230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetConsoleOutput",
      "library": "aws-ec2",
      "description": "This module handles retrieving console output from EC2 instances by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2 console output requests and results, encoded as query parameters and XML responses. Concrete use cases include fetching boot logs or diagnostic output from virtual machines in an AWS EC2 environment.",
      "description_length": 432,
      "index": 2231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.MoveAddressToVpc",
      "library": "aws-ec2",
      "description": "This module handles moving an Elastic IP address from EC2-Classic to a VPC. It provides functions to convert input and output types to and from HTTP requests, specifically encoding the MoveAddressToVpc request into query format and decoding the response. It works with the MoveAddressToVpcRequest and MoveAddressToVpcResult types, along with internal EC2 error types for handling failures.",
      "description_length": 389,
      "index": 2232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVolume",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 volume attributes by sending HTTP requests to AWS. It works with `ModifyVolumeRequest` and `ModifyVolumeResult` types to adjust volume properties like size or type. Use it to programmatically resize EBS volumes or change their performance characteristics in response to application demands.",
      "description_length": 324,
      "index": 2233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteVolume",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 volume by defining the request structure, converting it to an HTTP request, and parsing responses or errors. It works with the `DeleteVolumeRequest` type for input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include initiating volume deletion in EC2 and handling the resulting HTTP response or error conditions programmatically.",
      "description_length": 430,
      "index": 2234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkAcl",
      "library": "aws-ec2",
      "description": "This module implements the deletion of EC2 network ACLs by converting native requests into signed HTTP queries and handling responses. It works with `DeleteNetworkAclRequest.t` input to construct requests targeting the EC2 service, returning no output on success or decoding specific AWS errors. It is used to issue DELETE requests for network ACLs, handling the low-level HTTP conversion and error parsing specific to the EC2 API.",
      "description_length": 431,
      "index": 2235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 instance, such as instance type, security groups, or termination protection, using the `ModifyInstanceAttribute` API. It works with the `ModifyInstanceAttributeRequest` type to construct requests and handles responses without returning data on success. Concrete use cases include updating an instance's IAM role, changing its instance type, or adjusting its network settings programmatically.",
      "description_length": 434,
      "index": 2236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 VPN connections by defining the request and response types specific to the `CreateVpnConnection` API call. It provides functions to convert native request data into properly formatted HTTP requests and to decode HTTP responses into result or error types. It is used when establishing site-to-site VPN connections in AWS EC2 by translating OCaml values into AWS query format and vice versa.",
      "description_length": 429,
      "index": 2237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UnassignPrivateIpAddresses",
      "library": "aws-ec2",
      "description": "This module handles the unassignment of private IP addresses from EC2 network interfaces by defining the request structure, error responses, and HTTP serialization. It works directly with EC2-specific types like network interface IDs and private IP address lists. Concrete use cases include removing secondary private IPs from instances during network reconfiguration or cleanup tasks.",
      "description_length": 385,
      "index": 2238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 traffic mirror filters by defining the input and output types specific to the operation, along with error handling tailored to the AWS EC2 API. It provides functions to convert native input into an HTTP request and parse HTTP responses into either a result or an error, ensuring correct encoding and decoding of API calls. Concrete use cases include setting up traffic mirroring configurations for network monitoring and security analysis within AWS EC2 environments.",
      "description_length": 507,
      "index": 2239,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.SearchTransitGatewayMulticastGroups",
      "library": "aws-ec2",
      "description": "This module handles searching for multicast groups in a transit gateway within AWS EC2. It works with input and output types specific to the `SearchTransitGatewayMulticastGroups` API call, along with internal EC2 error types. It provides functions to construct and sign HTTP requests, parse responses, and decode errors specific to this operation, enabling direct interaction with the EC2 API for multicast group discovery.",
      "description_length": 423,
      "index": 2240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterImage",
      "library": "aws-ec2",
      "description": "This module handles the registration of Amazon Machine Images (AMIs) in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2 image registration requests, results, and internal error types. Concrete use cases include creating custom AMIs from snapshots and handling the low-level HTTP interaction during image registration.",
      "description_length": 427,
      "index": 2241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotInstanceRequests",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 spot instance requests by converting input parameters into signed HTTP requests and parsing responses into structured results or errors. It works directly with EC2 spot instance request types, including input filters and output metadata like request IDs, states, and launch specifications. Use this module to query the status and configuration of existing spot instance requests in AWS EC2, particularly to monitor or manage spot fleet provisioning.",
      "description_length": 484,
      "index": 2242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportImage",
      "library": "aws-ec2",
      "description": "This module handles the initiation and processing of EC2 image export requests to S3, converting native request types to properly signed HTTP queries and parsing responses into results or errors. It works with `ExportImageRequest.t` for input configuration, `ExportImageResult.t` for output, and `Errors_internal.t` for error handling. Concrete use cases include exporting AMIs to S3 buckets in a specific format, tracking export progress via returned task IDs, and handling S3 access or EC2 validation errors during export.",
      "description_length": 524,
      "index": 2243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClassicLinkInstances",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe ClassicLink instances in EC2. It encodes input requests into properly formatted HTTP queries and decodes responses or errors from the server. It works directly with EC2 ClassicLink instance request and result types, enabling users to retrieve information about linked VPCs and associated instance details.",
      "description_length": 350,
      "index": 2244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReleaseAddress",
      "library": "aws-ec2",
      "description": "This module handles the release of an Elastic IP address in AWS EC2 by defining the request structure, encoding it into an HTTP query, and sending it to the appropriate endpoint. It works with the `ReleaseAddressRequest` type to specify which IP address to release, and returns no output on success. It is used when deallocating a public IP address from an EC2 instance, ensuring proper cleanup of network resources.",
      "description_length": 416,
      "index": 2245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module handles the creation of reserved EC2 instance listings by converting input requests into properly signed HTTP queries and processing responses. It works with EC2-specific input and output types, including reserved instance configurations and result metadata. Concrete use cases include submitting new reserved instance listings to AWS EC2 and parsing the resulting status or errors.",
      "description_length": 394,
      "index": 2246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting attributes of an FPGA image in EC2. It provides functions to construct HTTP requests from input parameters and parse responses or errors from the server. It works directly with EC2 FPGA image attribute reset requests and responses, targeting use cases like restoring image permissions or launch permissions to their default state.",
      "description_length": 360,
      "index": 2247,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the creation of transit gateway peering attachments in AWS EC2. It processes input requests into properly signed HTTP queries and decodes responses or errors from the EC2 service. It works directly with EC2 transit gateway peering attachment request and result types, enabling programmatic setup of inter-VPC connectivity through transit gateways.",
      "description_length": 367,
      "index": 2248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateFpgaImage",
      "library": "aws-ec2",
      "description": "This module handles the creation of FPGA images in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2's CreateFpgaImageRequest and CreateFpgaImageResult types, and maps errors based on AWS XML responses and HTTP status codes. It is used to initiate FPGA image creation and process the resulting metadata or errors from the EC2 API.",
      "description_length": 438,
      "index": 2249,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ImportVolume",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation for importing volumes, converting input requests to properly signed HTTP queries and parsing responses into results or errors. It works with `ImportVolumeRequest` and `ImportVolumeResult` types, along with internal error types specific to EC2. Use this module to programmatically import disk images into EC2, handling request signing, response decoding, and error parsing specific to the import volume API.",
      "description_length": 448,
      "index": 2250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AuthorizeSecurityGroupEgress",
      "library": "aws-ec2",
      "description": "This module handles the authorization of egress traffic for EC2 security groups by providing functions to construct and send the corresponding AWS API request. It works with the `AuthorizeSecurityGroupEgressRequest` type as input and produces no output on success, using a custom error type for failure handling. It is used to directly modify security group rules that control outbound network traffic from EC2 instances.",
      "description_length": 421,
      "index": 2251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module deletes a Client VPN endpoint in Amazon EC2. It handles the conversion between native OCaml types and HTTP requests/responses, including signing and endpoint configuration. Use it to programmatically terminate a Client VPN endpoint and interpret the result or any errors returned by AWS.",
      "description_length": 299,
      "index": 2252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnTunnelCertificate",
      "library": "aws-ec2",
      "description": "This module modifies the certificate for a specified VPN tunnel in an AWS EC2 environment. It handles requests to update tunnel certificates using EC2 API actions, encoding input data into HTTP queries and decoding responses into structured results or errors. The module works directly with EC2-specific request and result types, targeting use cases such as rotating certificates on active VPN connections without requiring tunnel recreation.",
      "description_length": 442,
      "index": 2253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachVolume",
      "library": "aws-ec2",
      "description": "This module handles detaching EBS volumes from EC2 instances by converting native requests into properly signed HTTP queries and parsing responses into structured volume attachment data or errors. It works directly with `DetachVolumeRequest` inputs, producing `VolumeAttachment` outputs or decoding specific EC2 errors from XML responses. Use this module when programmatically managing volume detachment in AWS EC2, such as during instance shutdown or storage reconfiguration.",
      "description_length": 476,
      "index": 2254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVolumeStatus",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve volume status information. It provides functions to construct HTTP requests from input parameters, decode responses into structured data, and parse potential errors. It works with volume status request and result types, enabling direct interaction with EC2 to check the health and state of EBS volumes.",
      "description_length": 351,
      "index": 2255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeScheduledInstanceAvailability",
      "library": "aws-ec2",
      "description": "This module handles the low-level details of making and parsing AWS EC2 API requests to describe scheduled instance availability. It works with input and output types specific to the EC2 service, converting between native OCaml types and HTTP requests/responses. Concrete use cases include querying for available scheduled EC2 instances and handling the corresponding API responses and errors.",
      "description_length": 393,
      "index": 2256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles describing active client VPN connections in EC2 by encoding requests into HTTP queries and decoding responses. It works with input and output types specific to the `DescribeClientVpnConnections` API, including structured error handling for failed responses. Use this module to retrieve detailed information about client connections to a specified Client VPN endpoint, including connection status, user identity, and session duration.",
      "description_length": 453,
      "index": 2257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAggregateIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 aggregate ID format requests to HTTP queries and parses responses or errors from AWS. It works with EC2-specific request and result types defined in `Aws_ec2.Types`. Use this module to query AWS EC2 about ID format consistency across resources and handle the service's responses directly.",
      "description_length": 330,
      "index": 2258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesListings",
      "library": "aws-ec2",
      "description": "Handles the conversion of EC2 reserved instances listing requests to HTTP queries and parses responses or errors from AWS. Works with EC2-specific request and result types, including encoded query parameters and XML error responses. Used to retrieve and decode information about reserved instance listings directly from AWS API endpoints.",
      "description_length": 338,
      "index": 2259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module handles creating network interface permissions in EC2 by converting input requests to HTTP calls and parsing responses. It works with EC2-specific input and output types, along with AWS errors, to manage permission assignments for network interfaces. Use this module to programmatically grant or deny access to network interfaces in EC2 instances.",
      "description_length": 359,
      "index": 2260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 VPN connection by defining the request structure, converting it to an HTTP request, and parsing responses or errors. It works directly with `DeleteVpnConnectionRequest` as input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include tearing down site-to-site VPN connections programmatically and integrating with automation tools for network resource management.",
      "description_length": 461,
      "index": 2261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 VPN connection descriptions between native OCaml types and HTTP requests/responses. It works with input requests and output results specific to querying AWS EC2 for information about virtual private networks (VPNs). It is used to send properly formatted DescribeVpnConnections requests to AWS, parse the XML responses, and handle any errors returned by the service.",
      "description_length": 407,
      "index": 2262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an internet gateway in AWS EC2. It provides functions to construct HTTP requests from a `DeleteInternetGatewayRequest`, parse responses or errors, and defines the service name and API version used for signing. It works directly with EC2 internet gateway identifiers, targeting use cases such as removing unused or orphaned internet gateways from a VPC.",
      "description_length": 388,
      "index": 2263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 local gateway route table virtual interface group association requests to HTTP format and parses responses, working with input and output types defined in the Aws_ec2.Types module. It supports querying AWS for associations between local gateway route tables and virtual interface groups, including error handling specific to this operation. Use this module to retrieve details about these associations directly from AWS EC2.",
      "description_length": 466,
      "index": 2264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyHosts",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 host reservations by encoding requests into HTTP format and decoding responses. It works with `ModifyHostsRequest` and `ModifyHostsResult` types, along with internal EC2 errors. Use it to programmatically adjust host allocation settings in AWS EC2, such as auto-placement and instance family constraints.",
      "description_length": 338,
      "index": 2265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifySpotFleetRequest",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing Spot Fleet request in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the ModifySpotFleetRequest operation, along with error types defined in the EC2 service. It is used when adjusting the target capacity or other parameters of a running Spot Fleet.",
      "description_length": 379,
      "index": 2266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateEgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of egress-only internet gateways in AWS EC2. It works with EC2-specific request and response types, including input parameters like VPC ID and output containing the created gateway details. It is used when setting up IPv6-only outbound connectivity for a VPC without allowing inbound traffic.",
      "description_length": 325,
      "index": 2267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeConversionTasks",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 conversion task descriptions between native OCaml types and HTTP requests/responses. It works with input requests and output results specific to EC2 conversion tasks, along with internal error types for failure handling. It is used to send queries to AWS EC2 for retrieving information about ongoing or completed conversion tasks, such as importing virtual machine images.",
      "description_length": 414,
      "index": 2268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 reserved instances description requests to HTTP requests and parses responses, working with input and output types defined in the `Aws_ec2.Types` module. It encodes query parameters, signs requests using the specified signature version, and routes to the correct AWS service endpoint. It is used to retrieve details about EC2 reserved instances, such as instance count, type, and pricing, directly from AWS.",
      "description_length": 449,
      "index": 2269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of route tables from subnets in AWS EC2. It provides functions to construct HTTP requests and parse responses or errors for this specific operation. The module works directly with route table and subnet identifiers to manage routing configurations in virtual private clouds.",
      "description_length": 313,
      "index": 2270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceStatus",
      "library": "aws-ec2",
      "description": "This module handles describing the status of EC2 instances by sending HTTP requests to AWS and parsing the responses. It works with input and output types specific to the EC2 instance status query, including request parameters, response data, and error codes. Use this module to retrieve health and status information for EC2 instances, such as system status checks, instance reachability, and scheduled maintenance events.",
      "description_length": 423,
      "index": 2271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateInstanceExportTask",
      "library": "aws-ec2",
      "description": "This module creates an export task for an EC2 instance, converting input parameters into an HTTP request and handling responses. It works with EC2 instance export task requests and results, along with internal EC2 errors. Use this module to initiate and manage instance export tasks, such as exporting an instance to a VM format like OVA or VMDK.",
      "description_length": 346,
      "index": 2272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGateways",
      "library": "aws-ec2",
      "description": "This module handles the conversion of inputs and outputs for the EC2 DescribeLocalGateways API call, encoding requests into HTTP queries and decoding responses. It works directly with `DescribeLocalGatewaysRequest.t` and `DescribeLocalGatewaysResult.t` types, along with internal error types for failure handling. It is used to interact with AWS EC2's local gateway management, specifically for querying local gateway configurations and metadata.",
      "description_length": 446,
      "index": 2273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.WithdrawByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the withdrawal of Bring Your Own IP (BYOIP) CIDR blocks from AWS EC2. It provides functions to construct and send HTTP requests for withdrawing a BYOIP CIDR, as well as parsing the corresponding responses and errors. The module works directly with CIDR request and result types defined in the EC2 types module, along with handling specific AWS EC2 internal errors.",
      "description_length": 384,
      "index": 2274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ReplaceIamInstanceProfileAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing an IAM instance profile association for EC2 instances. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically working with EC2 instance profile association requests and results. It is used when updating the IAM role associated with a running EC2 instance.",
      "description_length": 361,
      "index": 2275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeIpv6Pools",
      "library": "aws-ec2",
      "description": "This module handles the conversion of IPv6 pool description requests to HTTP queries and parses responses or errors from AWS EC2. It works with `DescribeIpv6PoolsRequest` and `DescribeIpv6PoolsResult` types, along with internal error types for failure handling. It is used to send requests to the EC2 service, encode them into HTTP format, and decode the responses or handle specific AWS errors based on the HTTP status and content.",
      "description_length": 432,
      "index": 2276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles creating and managing spot datafeed subscriptions in EC2. It provides functions to convert native input types to HTTP requests and parse responses or errors from the service. It works directly with EC2 spot datafeed subscription requests and results, handling request signing, encoding, and decoding.",
      "description_length": 320,
      "index": 2277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVolumeAttribute",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve volume attribute information, specifically supporting the `DescribeVolumeAttribute` operation. It works with input and output types defined in `Aws_ec2.Types`, including `DescribeVolumeAttributeRequest` and `DescribeVolumeAttributeResult`. Use this module when querying attributes such as whether a volume is auto-enabled for I/O or its product codes.",
      "description_length": 400,
      "index": 2278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the association of a transit gateway route table with a transit gateway attachment in AWS EC2. It provides functions to construct HTTP requests from input types, decode responses into result types, and parse API-specific errors. The module works directly with transit gateway route table association requests and responses, enabling programmatic management of route table associations for network traffic control.",
      "description_length": 433,
      "index": 2279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorFilters",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 Traffic Mirror filters, converting native input types into properly formatted HTTP requests and parsing responses or errors from AWS. It works directly with `DescribeTrafficMirrorFiltersRequest` and `DescribeTrafficMirrorFiltersResult` types, along with internal error types for failure handling. Use this module when querying AWS EC2 for details about configured Traffic Mirror filters, such as retrieving filter IDs, rules, or metadata for network traffic analysis.",
      "description_length": 516,
      "index": 2280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles replacing routes in an AWS EC2 Transit Gateway by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with Transit Gateway route tables using input and output types specific to route replacement, such as `ReplaceTransitGatewayRouteRequest` and `ReplaceTransitGatewayRouteResult`. Concrete use cases include updating route targets for specific CIDR blocks within a Transit Gateway, and handling success or error responses from the EC2 API during route updates.",
      "description_length": 569,
      "index": 2281,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateEnclaveCertificateIamRole",
      "library": "aws-ec2",
      "description": "This module handles the association of an IAM role with an enclave certificate in EC2. It provides functions to convert input and output types to and from HTTP requests, parse errors, and defines the service name and API signing method. Use this module when managing enclave certificate IAM role associations programmatically.",
      "description_length": 326,
      "index": 2282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a transit gateway multicast domain in AWS EC2. It provides functions to convert input and output types to and from HTTP requests, following the specific query format required by the EC2 API. The module works directly with transit gateway multicast domain request and response types, enabling precise interaction with EC2's multicast networking features.",
      "description_length": 395,
      "index": 2283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module handles the conversion of native inputs to HTTP requests and responses to outputs or errors for disabling VPC ClassicLink DNS support. It works with input and output types specific to the DisableVpcClassicLinkDnsSupport operation, along with error handling tailored to this AWS EC2 API call. It is used when interacting with AWS EC2 to disable DNS support for ClassicLink in a VPC, ensuring proper request signing, encoding, and response decoding.",
      "description_length": 459,
      "index": 2284,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetAssociatedIpv6PoolCidrs",
      "library": "aws-ec2",
      "description": "This module handles the conversion of IPv6 pool CIDR requests and responses for EC2, encoding input data into HTTP requests and decoding HTTP responses into structured outputs or errors. It works with `GetAssociatedIpv6PoolCidrsRequest` and `GetAssociatedIpv6PoolCidrsResult` types, along with internal EC2 error types. It is used to interact with EC2's IPv6 pool association API, specifically for retrieving CIDR blocks associated with a pool.",
      "description_length": 444,
      "index": 2285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportInstance",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation for importing instances by defining the input and output types specific to the import task. It provides functions to convert native request data into properly signed HTTP queries and decode responses into structured results or errors. It is used to initiate and manage instance imports with precise error parsing based on HTTP status and XML response data.",
      "description_length": 398,
      "index": 2286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module configures notification settings for EC2 instance events, specifically handling the registration of event notification attributes. It works with EC2 instance event notification request and response types, enabling precise control over which events trigger notifications. Concrete use cases include setting up monitoring for instance state changes or scheduled events in cloud infrastructure automation.",
      "description_length": 414,
      "index": 2287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLaunchTemplateVersions",
      "library": "aws-ec2",
      "description": "This module handles the deletion of specific versions of an EC2 launch template by converting native OCaml types to HTTP requests and parsing responses. It works with input requests and output results defined in the `Aws_ec2.Types` module, along with internal error types for failure handling. Concrete use cases include removing outdated or unused launch template versions to manage EC2 instance configurations efficiently.",
      "description_length": 424,
      "index": 2288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of AWS EC2 transit gateways by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with `DeleteTransitGatewayRequest` and `DeleteTransitGatewayResult` types, and handles errors specific to the EC2 service. Concrete use cases include sending a delete request for a transit gateway and processing the result or error response from the AWS API.",
      "description_length": 473,
      "index": 2289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module handles associating a target network with a Client VPN endpoint in EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically for this operation. It works with input and output types defined in `Aws_ec2.Types` and handles errors specific to the EC2 service.",
      "description_length": 340,
      "index": 2290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportTransitGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module handles exporting routes from an AWS EC2 Transit Gateway by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with Transit Gateway route table identifiers and S3 bucket output locations. Use this module when automating route table exports for network auditing or disaster recovery workflows.",
      "description_length": 427,
      "index": 2291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module enables EBS encryption by default in EC2 by sending a request to activate encryption for all new EBS volumes. It handles the conversion of input parameters to an HTTP request and parsing of responses or errors from AWS, specifically working with `EnableEbsEncryptionByDefaultRequest` and `EnableEbsEncryptionByDefaultResult` types. It is used when configuring EC2 to enforce encryption on newly created EBS volumes without manually specifying it per volume.",
      "description_length": 469,
      "index": 2292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing attributes of EC2 snapshots by converting requests to HTTP format and parsing responses. It works with snapshot attribute requests and results, along with internal EC2 errors. Use this module to retrieve details like create volume permissions or product codes for a specific snapshot in Amazon EC2.",
      "description_length": 329,
      "index": 2293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.PurchaseReservedInstancesOffering",
      "library": "aws-ec2",
      "description": "This module handles purchasing reserved instances offerings in AWS EC2 by converting native input into signed HTTP requests and decoding responses into structured results or errors. It works directly with `PurchaseReservedInstancesOfferingRequest` and `PurchaseReservedInstancesOfferingResult` types, along with internal EC2 error types. It is used to make authenticated API calls to EC2, send purchase requests in the correct query format, and parse the corresponding responses or error conditions based on the AWS EC2 API specification.",
      "description_length": 538,
      "index": 2294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module handles the deletion of network interface permissions in AWS EC2 by converting native input types into properly signed HTTP requests and parsing responses into output or error types. It works directly with `DeleteNetworkInterfacePermissionRequest` and `DeleteNetworkInterfacePermissionResult` from the `Aws_ec2.Types` module, along with internal EC2 errors. It is used to send DELETE requests for network interface permissions and decode the results or errors returned by the EC2 service.",
      "description_length": 500,
      "index": 2295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServiceConfigurations",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint service configurations in AWS EC2 by converting input requests to HTTP format and parsing HTTP responses into outputs or errors. It works with input and output types specific to the `DescribeVpcEndpointServiceConfigurations` operation, along with EC2 internal error types. Concrete use cases include querying the status and details of VPC endpoint services that have been configured for private connectivity within a VPC.",
      "description_length": 465,
      "index": 2296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateImage",
      "library": "aws-ec2",
      "description": "This module handles creating Amazon Machine Images (AMIs) from EC2 instances. It provides functions to construct HTTP requests for image creation, parse responses into structured results or errors, and decode AWS-specific error codes into typed exceptions. It works directly with EC2 instance configurations and image metadata to enable programmatic snapshot-based image management.",
      "description_length": 382,
      "index": 2297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeStaleSecurityGroups",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeStaleSecurityGroups` API call in AWS EC2, converting input requests to properly signed HTTP queries and parsing responses or errors from the service. It works with `DescribeStaleSecurityGroupsRequest.t` for input, `DescribeStaleSecurityGroupsResult.t` for output, and `Errors_internal.t` for errors, using standard AWS signing and service routing. It is used to retrieve information about security groups that reference non-existent VPCs or other stale configurations in EC2 environments.",
      "description_length": 521,
      "index": 2298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeregisterTransitGatewayMulticastGroupMembers",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of members from a transit gateway multicast group by converting input requests into properly signed HTTP queries and parsing responses or errors from the EC2 service. It works directly with EC2-specific input and output types, including multicast group member identifiers and error responses. Use this module when managing multicast group membership in a transit gateway, particularly when removing network interfaces or sources from multicast traffic distribution.",
      "description_length": 504,
      "index": 2299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReleaseHosts",
      "library": "aws-ec2",
      "description": "This module handles the release of dedicated hosts in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with `ReleaseHostsRequest` and `ReleaseHostsResult` structures, translating between native OCaml types and HTTP requests. Concrete use cases include releasing specific host instances back to AWS and handling the success or error responses from the EC2 API.",
      "description_length": 495,
      "index": 2300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module modifies managed prefix lists in EC2 by sending requests to update entries, set descriptions, or adjust maximum entry limits. It operates on prefix list IDs and entry specifications, handling changes through encoded HTTP queries. Use it to programmatically manage IP address ranges for VPC route tables and security policies.",
      "description_length": 337,
      "index": 2301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.TerminateInstances",
      "library": "aws-ec2",
      "description": "This module handles the termination of EC2 instances by defining the request and response types for the operation, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with `TerminateInstancesRequest` and `TerminateInstancesResult` from the `Aws_ec2.Types` module, and uses `Errors_internal` for error handling. Concrete use cases include sending properly signed HTTP requests to the EC2 service to terminate specific instances and parsing the resulting responses or AWS errors.",
      "description_length": 531,
      "index": 2302,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayPrefixListReferences",
      "library": "aws-ec2",
      "description": "This module handles retrieving prefix list references for a transit gateway in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `GetTransitGatewayPrefixListReferencesRequest` and `GetTransitGatewayPrefixListReferencesResult`. It is used to make API calls to EC2, converting requests to HTTP format and parsing responses or errors from the service.",
      "description_length": 396,
      "index": 2303,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableVgwRoutePropagation",
      "library": "aws-ec2",
      "description": "This module handles the disabling of route propagation from a virtual private gateway (VGW) to a route table in Amazon EC2. It works with EC2 route tables and VGW route propagation configurations, using HTTP requests to interface with the AWS API. Concrete use cases include managing route propagation state in hybrid cloud networks and automating network configuration changes in response to infrastructure events.",
      "description_length": 415,
      "index": 2304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeIdentityIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 identity ID format requests to HTTP queries and parses responses or errors from AWS. It works with input and output types specific to describing identity ID formats, along with internal error types. Use this module to send requests to AWS EC2 to check ID formatting settings and handle the resulting HTTP responses or errors.",
      "description_length": 367,
      "index": 2305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of AWS EC2 transit gateways by defining the request and response types specific to the operation. It provides functions to serialize a transit gateway creation request into an HTTP request and deserialize the response back into a result or error. It works directly with AWS EC2's transit gateway request and result types, targeting use cases like provisioning new transit gateways with custom configurations.",
      "description_length": 441,
      "index": 2306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnConnectionOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying options for an existing EC2 VpnConnection by defining the request and response types required for the operation. It works directly with EC2-specific types such as `ModifyVpnConnectionOptionsRequest` and `ModifyVpnConnectionOptionsResult`. The module is used to construct HTTP requests to update VpnConnection settings like tunnel options and IP addresses, and to decode the corresponding AWS responses or errors.",
      "description_length": 442,
      "index": 2307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnRoutes",
      "library": "aws-ec2",
      "description": "This module handles describing routes for an EC2 Client VPN endpoint by converting input requests into properly signed HTTP queries and parsing the responses. It works with input and output types specific to the `DescribeClientVpnRoutes` API call, including encoded query parameters and XML error responses. Concrete use cases include retrieving route information for monitoring or managing Client VPN configurations in AWS.",
      "description_length": 424,
      "index": 2308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 Traffic Mirror filter rules by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with AWS EC2 Traffic Mirror filter rule request and result types, enabling precise configuration of traffic mirroring rules. Concrete use cases include setting up network monitoring by defining source and destination traffic rules for mirrored packets.",
      "description_length": 474,
      "index": 2309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceCreditSpecifications",
      "library": "aws-ec2",
      "description": "This module handles describing credit specifications for EC2 instances, specifically converting input and output types to and from HTTP requests. It works with input type `DescribeInstanceCreditSpecificationsRequest.t`, output type `DescribeInstanceCreditSpecificationsResult.t`, and error type `Errors_internal.t`. Concrete use cases include querying credit settings for specific instances and handling responses or errors from the EC2 service.",
      "description_length": 445,
      "index": 2310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSubnet",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 subnet by defining the request structure, error responses, and HTTP serialization for the DeleteSubnet API call. It works with the DeleteSubnetRequest type for input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include sending a properly signed HTTP request to delete a subnet and parsing the response or error from the AWS API.",
      "description_length": 429,
      "index": 2311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles detaching an internet gateway from a VPC in AWS EC2. It works with `DetachInternetGatewayRequest` input and returns no output on success, using EC2-specific error types for failure. It converts requests to HTTP format for sending and parses HTTP responses into results or errors, following AWS EC2 API specifications.",
      "description_length": 337,
      "index": 2312,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesOfferings",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 reserved instances offerings requests to HTTP format and parses responses or errors from AWS. It works with input and output types specific to describing reserved instances offerings, along with internal error types for precise error handling. Use this module to query AWS EC2 for available reserved instance offerings, encode the request for transmission, and decode or handle the result.",
      "description_length": 431,
      "index": 2313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpoints",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoints in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the DescribeVpcEndpoints operation, along with error handling tailored to the AWS EC2 API. It is used when querying information about existing VPC endpoints, including filtering by IDs or tags.",
      "description_length": 361,
      "index": 2314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpointServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoint service configurations by defining the request and response types for the AWS EC2 API. It provides functions to serialize a configuration request into an HTTP request and deserialize the service response or error into typed OCaml values. It is used when setting up VPC endpoint services, specifically for encoding input parameters and decoding result or error responses from the EC2 service.",
      "description_length": 440,
      "index": 2315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the deletion of transit gateway routes in AWS EC2 by converting input requests into properly signed HTTP queries and parsing responses or errors from the service. It works directly with `DeleteTransitGatewayRouteRequest` and `DeleteTransitGatewayRouteResult` types, along with internal error types for handling failure cases. Concrete use cases include removing specific routes from a transit gateway route table, particularly when managing dynamic or static routing in complex VPC network setups.",
      "description_length": 517,
      "index": 2316,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module configures VPC endpoint services by modifying their settings, such as acceptance requirements and associated load balancers. It works with VPC endpoint service configuration requests and responses, handling updates through EC2's API. Use it to programmatically adjust endpoint service properties in AWS environments.",
      "description_length": 328,
      "index": 2317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RevokeSecurityGroupIngress",
      "library": "aws-ec2",
      "description": "This module handles revoking ingress rules from EC2 security groups by converting native input into signed HTTP requests and parsing responses. It works with EC2-specific request and response types, including encoded query parameters and XML error handling. Use this module to programmatically remove inbound access rules from AWS EC2 security groups.",
      "description_length": 351,
      "index": 2318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTableVpcAssociations",
      "library": "aws-ec2",
      "description": "This module handles the conversion of input and output data for the `DescribeLocalGatewayRouteTableVpcAssociations` API call in AWS EC2. It encodes requests into properly formatted HTTP queries and decodes responses, handling both successful results and error conditions. It works directly with EC2-specific input and output types, including VPC association request parameters and result data.",
      "description_length": 393,
      "index": 2319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles detaching a virtual private gateway from a VPC in AWS EC2. It provides functions to convert native input to HTTP requests and parse responses or errors from the server. It works directly with `DetachVpnGatewayRequest` and returns no output on success or a specific EC2 error on failure.",
      "description_length": 306,
      "index": 2320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetHostReservationPurchasePreview",
      "library": "aws-ec2",
      "description": "This module handles previewing host reservation purchases in EC2 by converting input requests to HTTP calls and parsing the responses. It works with EC2-specific input and output types, along with internal error structures. Use this module to generate and evaluate host reservation purchase previews before committing to a purchase.",
      "description_length": 332,
      "index": 2321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifySnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 snapshot, such as adding or removing create volume permissions for specific AWS accounts. It works with snapshot IDs and attribute modifications encoded in the `ModifySnapshotAttributeRequest` type. A concrete use case is updating snapshot visibility to allow cross-account volume creation.",
      "description_length": 332,
      "index": 2322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateNetworkAcl",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 network ACLs by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateNetworkAclRequest` and `CreateNetworkAclResult` types, encoding and decoding them according to the EC2 API specification. Concrete use cases include making signed HTTP requests to create network ACLs and handling success or error responses from the AWS EC2 service.",
      "description_length": 475,
      "index": 2323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpointConnectionNotification",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoint connection notifications in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `CreateVpcEndpointConnectionNotificationRequest` and `CreateVpcEndpointConnectionNotificationResult`. It is used to send and receive properly formatted HTTP requests and responses for this specific EC2 API operation.",
      "description_length": 391,
      "index": 2324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNatGateways",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe NAT gateways, converting input parameters into an HTTP request and parsing the response or errors. It works with structured types for requests, results, and errors defined in the Aws_ec2.Types module. Use this module to query AWS EC2 for information about existing NAT gateways, such as their status, network configuration, and associated subnets.",
      "description_length": 396,
      "index": 2325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteLocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API operation for deleting a route from a local gateway route table. It handles request signing, HTTP serialization, and response parsing specific to the DeleteLocalGatewayRoute API call. The module works directly with EC2-specific request and response types, including structured error handling for failed deletions due to invalid routes or permissions.",
      "description_length": 389,
      "index": 2326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointConnectionNotification",
      "library": "aws-ec2",
      "description": "This module handles modifying VPC endpoint connection notifications in AWS EC2. It provides functions to construct HTTP requests from input types and parse responses or errors from HTTP replies. It works with VPC endpoint connection notification requests and responses, specifically targeting notification configuration updates.",
      "description_length": 328,
      "index": 2327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CopyFpgaImage",
      "library": "aws-ec2",
      "description": "This module handles copying FPGA images in EC2 by converting native requests to HTTP queries and parsing responses. It works with `CopyFpgaImageRequest` and `CopyFpgaImageResult` types, along with internal error types for handling failures. It is used to make signed HTTP requests to the EC2 service and decode the results or errors from XML responses.",
      "description_length": 352,
      "index": 2328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module disables VPC ClassicLink for a specified VPC in Amazon EC2. It handles the conversion between native OCaml types and HTTP requests/responses, including proper query parameter encoding and error parsing specific to the DisableVpcClassicLink API call. The module works directly with VPC identifiers and interacts with the EC2 service endpoint to perform the operation.",
      "description_length": 378,
      "index": 2329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetConsoleScreenshot",
      "library": "aws-ec2",
      "description": "This module handles retrieving console screenshots from EC2 instances by defining the request and response types specific to that operation. It works with EC2 instance identifiers and base64-encoded screenshot data, enabling direct interaction with the EC2 API to capture and retrieve instance console output. It is used in scenarios where low-level access to instance boot diagnostics or system logs via the EC2 console is required.",
      "description_length": 433,
      "index": 2330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of a Transit Gateway VPC attachment in AWS EC2. It provides functions to convert native input to an HTTP request and parse HTTP responses into output or errors, specifically working with Transit Gateway VPC attachment request and result types. It is used to programmatically accept a VPC attachment to a Transit Gateway, enabling network connectivity between VPCs and the Transit Gateway.",
      "description_length": 423,
      "index": 2331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module creates a network ACL entry in Amazon EC2 by sending a properly signed HTTP request. It handles the conversion of a native input type to an HTTP request and parses the response into either a success value or an error. It works directly with EC2 network ACL entry configurations, allowing precise control over rule number, protocol, and allow/deny actions.",
      "description_length": 367,
      "index": 2332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DetachNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles detaching network interfaces in EC2 by converting native input into HTTP requests and parsing responses. It works with `DetachNetworkInterfaceRequest` to send API calls and processes responses into unit outputs or specific EC2 errors. Use this module to programmatically detach network interfaces from EC2 instances, handling success or failure based on the AWS API response.",
      "description_length": 395,
      "index": 2333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AuthorizeClientVpnIngress",
      "library": "aws-ec2",
      "description": "This module handles authorization of client VPN ingress rules in EC2 by sending and processing AWS API requests. It works with EC2's client VPN ingress authorization requests and responses, encoding inputs into HTTP queries and decoding outputs or errors from HTTP responses. It is used to programmatically allow access to a client VPN endpoint by adding ingress authorization rules.",
      "description_length": 383,
      "index": 2334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UpdateSecurityGroupRuleDescriptionsIngress",
      "library": "aws-ec2",
      "description": "This module updates ingress rule descriptions for security groups in EC2 by sending an HTTP request with the specified rule details. It works with security group rule descriptions, handling input requests and output responses specific to modifying ingress rules. Use this module to programmatically adjust documentation for incoming traffic rules in EC2 security groups.",
      "description_length": 370,
      "index": 2335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVolumeAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 volume, such as the auto-enable I/O flag or the volume's permissions. It works with EC2 volume identifiers and attribute settings, handling requests via HTTP calls to the EC2 service. Concrete use cases include enabling I/O operations automatically on volume attachment or adjusting volume ownership permissions in automated infrastructure setups.",
      "description_length": 389,
      "index": 2336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServicePermissions",
      "library": "aws-ec2",
      "description": "This module handles the conversion of VPC endpoint service permission requests to HTTP format and parses responses or errors from AWS EC2. It works with input and output types specific to describing VPC endpoint service permissions, along with internal error types. It is used to make API calls to retrieve information about allowed principals for a VPC endpoint service and to handle the corresponding HTTP interactions and error decoding.",
      "description_length": 440,
      "index": 2337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkAcls",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe network ACLs, converting input requests to HTTP format and parsing responses or errors from the server. It works with EC2-specific request and result types, including network ACL filters and identifiers. Use this module to retrieve network ACL details for VPCs, such as rules and associated subnets, directly from AWS.",
      "description_length": 367,
      "index": 2338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2",
      "library": "aws-ec2",
      "description": "The modules provide direct access to AWS EC2 API operations, enabling programmatic management of compute, network, and storage resources. Key data types include request and result structures for operations like `DescribeInstancesRequest`, `CreateVpcRequest`, and `ModifyVolumeRequest`, with corresponding response and error types. Operations allow querying instance metadata, managing VPCs and route tables, modifying network interfaces, controlling instance state, and handling EBS volumes and snapshots. Examples include launching instances with `RunInstancesRequest`, configuring VPC peering with `CreateVpcPeeringConnectionRequest`, and retrieving volume status with `DescribeVolumesRequest`.",
      "description_length": 696,
      "index": 2339,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2340,
    "meaningful_modules": 2340,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 1317,
    "min_description_length": 214,
    "avg_description_length": 386.7517094017094,
    "embedding_file_size_mb": 8.500686645507812
  }
}