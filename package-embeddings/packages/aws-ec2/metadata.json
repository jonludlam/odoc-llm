{
  "package": "aws-ec2",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2340,
  "creation_timestamp": "2025-08-19T11:43:13.506868",
  "modules": [
    {
      "module_path": "Aws_ec2.Types.DeleteVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a specific virtual private network (VPN) connection in Amazon EC2. It includes operations to construct, serialize, and parse the request data, handling fields such as the connection ID and an optional dry-run flag. It is used when issuing deletion commands to the EC2 API, ensuring correct formatting for transmission.",
      "description_length": 371,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteTableVpcAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a local gateway route table with a VPC, including optional tagging and dry run functionality. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring local gateway route table associations in AWS infrastructure management workflows.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the response data when deleting specific versions of an EC2 launch template. It provides functions to parse XML input into a list of success items, convert the list to query parameters or JSON, and extract the list from JSON input. It is used to process and structure the outcome of batch deletions of launch template versions in AWS EC2.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 import image task, with fields for metadata like architecture, encryption status, platform, and progress, along with nested structures for snapshots, tags, and license specifications. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and AWS query formats. Concrete use cases include managing VM image imports into EC2, tracking task status, and handling associated metadata during cloud infrastructure automation.",
      "description_length": 513,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU credit configurations, primarily used in managing burstable performance instances. It includes operations to create, serialize, and convert credit specifications to and from JSON and query formats. Common use cases involve configuring and retrieving CPU credit settings for EC2 instances.",
      "description_length": 344,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableTransitGatewayRouteTablePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling route table propagation in a transit gateway. It includes fields for the route table ID, attachment ID, and an optional dry-run flag. Operations support creating, parsing, and serializing the request for use with AWS EC2 APIs.",
      "description_length": 280,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of customer gateway IDs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML responses. It works directly with lists of string types representing customer gateway IDs.",
      "description_length": 278,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLinkList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC ClassicLink objects, providing direct conversions to and from XML, JSON, and query formats. It supports parsing from XML nodes and constructing empty lists, while enabling serialization for API interactions. Use it when managing EC2 VPC ClassicLink configurations via AWS SDK operations.",
      "description_length": 320,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance network interface attachment, with fields for attachment metadata like time, ID, device index, and status. It provides functions to construct, parse, and serialize these attachments to and from XML, JSON, and query formats. Use this module when managing network interface configurations for EC2 instances, particularly during instance setup or network changes.",
      "description_length": 426,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating an EC2 image from an instance, including settings like block device mappings, image name, description, and reboot behavior. It provides functions to construct, serialize, and parse image creation requests, supporting operations like validation, query conversion, and JSON serialization. Concrete use cases include automating AMI creation workflows and integrating EC2 image management into deployment pipelines.",
      "description_length": 461,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetIdSet",
      "library": "aws-ec2",
      "description": "This module represents a list of EC2 fleet IDs as a list of base string types. It provides functions to convert the list into query parameters, parse it from XML nodes, and serialize or deserialize it to and from JSON. It is used when managing EC2 fleet resources, such as when retrieving or filtering fleets by ID in API requests.",
      "description_length": 331,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 conversion tasks, containing optional conversion task IDs and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when querying AWS EC2 to retrieve information about ongoing or completed conversion tasks, such as importing instances or volumes.",
      "description_length": 380,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteTableVpcAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a local gateway route table VPC association in AWS EC2. It includes a parsed response type, JSON and query serialization, and XML parsing for the associated local gateway route table VPC association data. It is used when managing VPC connectivity via local gateways, allowing deletion tracking through AWS's API response formats.",
      "description_length": 372,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionField",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing fields of a Traffic Mirror session in AWS EC2, including packet length, description, and virtual network ID. It provides conversions to and from strings, JSON, and query formats, along with parsing from XML nodes. It is used to specify and manipulate Traffic Mirror session attributes in API requests and responses.",
      "description_length": 367,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfigSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of Spot Fleet request configurations. Works with XML nodes, JSON values, and query parameters to manage lists of Spot Fleet request configurations. Used when interacting with AWS EC2 APIs to submit, retrieve, or modify Spot Fleet requests using different data formats.",
      "description_length": 315,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 addresses, primarily working with a list of address data. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this when processing responses from EC2's DescribeAddresses API call, particularly for handling public IP address metadata.",
      "description_length": 342,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCoipPoolUsageResult",
      "library": "aws-ec2",
      "description": "This module represents the result of a COIP pool usage request, containing identifiers for the COIP pool and local gateway route table, along with a set of COIP address usage records. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query strings. It is used when retrieving and processing usage data for COIP pools in EC2 networking.",
      "description_length": 389,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateOverrides",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying overrides in a launch template, including fields like instance type, spot price, subnet ID, and priority. It provides functions to construct, parse, and serialize these overrides to and from XML, JSON, and query formats. Concrete use cases include configuring EC2 Auto Scaling group instances with specific hardware or pricing options.",
      "description_length": 387,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPair",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a user ID and security group pair with optional fields for description, group ID, group name, peering status, user ID, VPC ID, and VPC peering connection ID. It provides functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used to manage and exchange security group membership information in EC2 operations such as authorizing or revoking access between VPCs.",
      "description_length": 473,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting specific versions of a launch template in AWS EC2, including optional parameters like dry run, launch template ID or name, and a required list of versions to delete. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when programmatically managing EC2 launch template versions, particularly when removing outdated or unused versions.",
      "description_length": 448,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStrategyList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 placement group strategies, providing conversions to and from XML, JSON, and query formats. It supports parsing from XML nodes, constructing JSON and query representations, and creating empty lists. Use this module when working with AWS EC2 APIs that require serialization or deserialization of placement group strategy lists.",
      "description_length": 359,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceAvailability",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the availability of scheduled EC2 instances, including details like availability zone, instance count, pricing, and scheduling parameters. It provides functions to construct, parse, and serialize these availability records for use in querying or processing EC2 scheduling data. Concrete use cases include retrieving available scheduled instance slots and preparing them for API requests or JSON responses.",
      "description_length": 455,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetSnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting attributes of an EC2 snapshot, specifically handling the attribute type, snapshot ID, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when configuring or modifying snapshot permissions or other attributes programmatically.",
      "description_length": 362,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RootDeviceType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Ebs` and `Instance_store`, representing root device types in EC2. It includes functions to convert between strings and the `t` type, as well as serialization to and from JSON, query parameters, and XML. These operations are used when interacting with EC2 instance metadata or API requests that require specifying root device types.",
      "description_length": 406,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying reserved EC2 instances by providing a data structure to store the modification ID. It includes functions to construct, serialize, and parse this result from XML, JSON, and query formats. It is used to process responses from the EC2 API after initiating reserved instance modifications.",
      "description_length": 329,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EventCode",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing specific event codes for EC2 instances, such as reboots, maintenance, and retirement. It includes functions to convert between strings and the variant type, as well as serialization and deserialization routines for JSON, XML, and query parameters. This module is used to handle event code values when interacting with EC2 instance metadata or API responses.",
      "description_length": 417,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAccountAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 account attributes, including a list of attribute names and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying account limits, supported platforms, and default VPC settings before performing resource operations.",
      "description_length": 380,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelReservedInstancesListingRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to cancel a Reserved Instances listing in EC2. It includes operations to construct the request, convert it to query format, serialize to JSON, and parse from XML or JSON. It is used when interacting with EC2's Reserved Instances management APIs to handle cancellation requests programmatically.",
      "description_length": 356,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of import task IDs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when managing bulk import tasks, such as tracking or referencing multiple import operations by their IDs.",
      "description_length": 309,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAvailabilityZonesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying availability zones in AWS EC2, supporting filtering by zone names, zone IDs, and optional flags like `all_availability_zones` and `dry_run`. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include retrieving zone information for resource placement or checking zone status before launching instances.",
      "description_length": 435,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupSourcesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering multicast group sources for a transit gateway in EC2. It provides constructors, parsers, and serializers for a structure that may contain transit gateway multicast group source information. It is used to interpret and generate responses when managing multicast group sources in AWS EC2 networking operations.",
      "description_length": 354,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway route, with values like `Pending`, `Active`, and `Blackhole`. It provides conversions to and from strings, JSON, and query formats, along with parsing from XML. Use this module when handling transit gateway route state transitions or serializing state data for API interactions.",
      "description_length": 361,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecificationSecurityGroupList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of security group names used in EC2 spot instance launch specifications. It provides functions to convert between XML, JSON, and query string representations of security group lists. Use this module when configuring or parsing security groups for spot instance requests in AWS EC2.",
      "description_length": 349,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteOrigin",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the origin of a route in an EC2 route table, with specific constructors for route creation and propagation. It includes functions to convert between strings and the variant type, as well as serialization and deserialization routines for JSON, XML, and query parameters. This module is used when interacting with AWS EC2 route tables to specify or interpret the source of route information in API requests and responses.",
      "description_length": 479,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC ClassicLink configurations in EC2. It provides functions to create, parse, and serialize results containing a list of VPCs with ClassicLink attributes. Use this module when interacting with EC2 ClassicLink APIs to manage VPC connectivity to EC2-Classic instances.",
      "description_length": 312,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ApplySecurityGroupsToClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for applying security groups to a Client VPN target network. It includes operations to create, parse, and serialize the request for use with AWS EC2 APIs. The module works with string identifiers for VPN endpoints and VPCs, a set of security group IDs, and an optional dry-run flag.",
      "description_length": 322,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of capacity reservation data as lists of `CapacityReservation.t` values. It provides functions to convert between XML, JSON, and query string representations, specifically for working with EC2 capacity reservation sets in AWS API requests and responses. Use this module when processing EC2 API output or constructing input for capacity reservation operations.",
      "description_length": 432,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneOptInStatus",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` with two variants representing availability zone opt-in states. It provides bidirectional conversions between strings and the type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to handle availability zone opt-in status values when interacting with EC2 APIs, such as modifying or querying subnet configurations.",
      "description_length": 406,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportImageTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 export image tasks, providing structured access to a list of export tasks and a pagination token. It works with `ExportImageTaskList.t` for task data and an optional string token for pagination. Use this module to process responses from AWS EC2 when listing export image tasks, particularly for handling paginated results.",
      "description_length": 371,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a specification for launching instances during an import task, including settings like architecture, instance type, security groups, and shutdown behavior. It provides functions to construct, serialize, and parse these specifications using JSON, query parameters, or XML. Concrete use cases include configuring EC2 instance imports with custom networking, monitoring, and placement constraints.",
      "description_length": 414,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation preferences and targets in EC2 instance configurations. It includes functions to construct, serialize, and deserialize these specifications using JSON, query parameters, or XML input. Concrete use cases include configuring EC2 instances to use specific capacity reservations or express preferences when launching instances in AWS.",
      "description_length": 403,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseHostsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of releasing EC2 dedicated hosts, providing structured access to lists of successfully released hosts and any that failed. It includes operations for creating, parsing, and serializing the result in XML, JSON, and query formats. Use this module when processing responses from host release operations to inspect which hosts were successfully released or encountered errors.",
      "description_length": 403,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the configuration data for an EC2 launch template response, including fields like instance type, image ID, network interfaces, and storage mappings. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when retrieving or processing EC2 launch template configurations in API responses.",
      "description_length": 408,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 bundle task, capturing details like task state, progress, instance ID, and storage configuration. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing instance image bundling operations and tracking their status in AWS EC2 workflows.",
      "description_length": 384,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for creating a VPC VPN gateway in AWS EC2. It includes functions to construct, parse, and serialize the request data, supporting XML, JSON, and query string formats. It works directly with EC2-specific types such as GatewayType, TagSpecificationList, and AWS base types like String, Long, and Boolean.",
      "description_length": 369,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a VPN connection in AWS EC2. It includes functions to construct, serialize, and parse requests containing fields like the connection ID, gateway IDs, and a dry-run flag. It is used to prepare and send modification requests to the EC2 API, particularly when updating VPN connection endpoints or testing changes without applying them.",
      "description_length": 383,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceIdSet",
      "library": "aws-ec2",
      "description": "Works with lists of string identifiers for local gateway virtual interfaces. Provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Useful when managing EC2 local gateway configurations that require virtual interface IDs in specific AWS API requests.",
      "description_length": 301,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of capacity reservation group sets in EC2. It provides functions to convert between XML, JSON, and query string representations and a list-based structure of `CapacityReservationGroup.t`. Use this module when working with EC2 API requests and responses that involve capacity reservation groups.",
      "description_length": 367,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 integrity algorithms for EC2, containing an optional string. It provides functions to construct, parse, and serialize the value to query parameters, JSON, and XML formats. It is used when configuring or retrieving IPsec VPN tunnel options in EC2 Virtual Private Gateways.",
      "description_length": 357,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRegionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 regions, primarily working with a list of regions. It provides functions to construct, parse, and serialize region data to and from XML, JSON, and query formats. Use this when retrieving and processing region information from EC2, such as listing available regions or extracting region-specific metadata.",
      "description_length": 353,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for replacing a route in a transit gateway route table. It includes fields for specifying the destination CIDR block, route table ID, optional attachment ID, blackhole flag, and dry-run mode. The module provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations.",
      "description_length": 345,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for detaching a virtual private gateway from a VPC. It includes fields for the VPC ID, virtual private gateway ID, and an optional dry-run flag. Operations allow creating the request, converting it to query parameters or JSON, and parsing from XML or JSON input.",
      "description_length": 302,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTableAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving associations for a transit gateway route table, including a list of associations and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats such as JSON and query parameters. Concrete use cases include processing and transmitting transit gateway route table association data in AWS EC2 interactions.",
      "description_length": 407,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the default KMS key ID used by EBS in an AWS EC2 context. It includes operations to construct, serialize, and parse the request, working with string and boolean types wrapped in AWS-specific base types. It is used when configuring encryption settings for new EBS volumes in an EC2 environment.",
      "description_length": 347,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteTableVpcAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an association between a local gateway route table and a VPC in AWS EC2. It includes operations to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. The module is used when managing routing configurations for VPCs connected to local gateways, allowing safe deletion of route table associations with optional dry-run validation.",
      "description_length": 434,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ActiveInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an active EC2 instance with optional fields for instance ID, type, spot request ID, and health status. It provides functions to construct, parse, and convert instances to and from JSON and query formats. It is used to manage and exchange information about running EC2 instances in AWS integrations.",
      "description_length": 348,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceLimitPrice",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying limit prices in EC2 reserved instance configurations, with optional amount and currency code fields. It provides functions to construct, serialize, and deserialize these limit price values for use in API requests and responses. Concrete use cases include setting budget constraints for reserved instance purchases and parsing pricing responses from EC2 API calls.",
      "description_length": 415,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsInstancesSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and querying of EC2 fleet instance data. It operates on lists of `DescribeFleetsInstances.t` records, providing functions to convert to and from XML, JSON, and AWS query formats. Use this module when processing responses or building requests for EC2 fleet instance descriptions in AWS integrations.",
      "description_length": 354,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OperationType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Add` and `Remove`, representing operation types in EC2. It provides bidirectional conversions between strings and the type, along with serialization to and from JSON, XML, and query parameters. It is used to specify actions like attaching or detaching resources in EC2 API requests.",
      "description_length": 333,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 fleet request, including fields like dry run flag, excess capacity termination policy, launch template configurations, fleet ID, and target capacity specification. It provides functions to construct, parse, and serialize the structure to query or JSON formats, and to deserialize from JSON. Concrete use cases include configuring and submitting changes to an EC2 Auto Scaling fleet, particularly when adjusting capacity or launch templates.",
      "description_length": 498,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGatewayList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of egress-only internet gateway resources. It provides functions to convert between XML, JSON, and internal OCaml representations, specifically working with lists of `EgressOnlyInternetGateway.t`. Use this module when processing AWS EC2 API responses or constructing requests involving multiple egress-only internet gateways.",
      "description_length": 407,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopySnapshotResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of copying an EC2 snapshot, including the new snapshot ID and associated tags. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. Use this module when managing snapshot copies in AWS EC2 to track the resulting metadata and tags.",
      "description_length": 360,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 volume attributes, including the attribute name, volume ID, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying volume auto-enable IO or encryption settings before modifying volumes.",
      "description_length": 349,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 architecture types, providing operations to convert between XML, JSON, and query string representations. It supports parsing architecture type lists from XML nodes and converting them to AWS query format or JSON lists. Use this module when working with EC2 API requests or responses that involve multiple architecture types.",
      "description_length": 357,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConversionTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 conversion task with fields for task ID, expiration time, import details, state, status message, and tags. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing import tasks for instances or volumes in EC2, tracking their state and metadata.",
      "description_length": 391,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Region",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing AWS EC2 regions, including their endpoint, region name, and opt-in status. It provides functions to construct, parse, and convert region data to and from JSON and query formats. Use this module when retrieving or configuring EC2 region information, such as when listing available regions or setting up regional endpoints in an AWS management tool.",
      "description_length": 401,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConversionTaskState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of an EC2 conversion task, with variants like `Active`, `Cancelling`, `Cancelled`, and `Completed`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used to interpret and format conversion task states when interacting with AWS EC2 APIs or processing task status updates.",
      "description_length": 444,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionLogOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring connection logging options, with fields to enable logging, specify a CloudWatch log group, and set a log stream. It provides functions to construct instances, convert to and from JSON and query parameters, and parse from XML data. Use this module when setting up or managing EC2 connection logging configurations that integrate with CloudWatch Logs.",
      "description_length": 402,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypeOfferingsResult",
      "library": "aws-ec2",
      "description": "Handles the result of describing EC2 instance type offerings, including a list of offerings and an optional pagination token. Works with `InstanceTypeOfferingsList` and string types for structured data retrieval. Used to process and serialize EC2 instance type offerings responses from AWS API calls.",
      "description_length": 300,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ValidationWarning",
      "library": "aws-ec2",
      "description": "This module handles validation warnings by providing a structured type to store error sets, along with functions to construct, parse, and convert these warnings into query parameters, JSON, or XML. It works primarily with error sets and is used when processing EC2 API responses that include validation issues, such as malformed input or configuration mismatches. A concrete use case includes handling and propagating validation errors during EC2 instance launch or configuration updates.",
      "description_length": 488,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a service in EC2, including states like `Pending`, `Available`, and `Failed`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization to JSON and query formats. It is used to interpret and generate service state data in API responses and requests.",
      "description_length": 392,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.OccurrenceDaySet",
      "library": "aws-ec2",
      "description": "This module represents a list of days of the month for scheduling recurring events, specifically working with integer lists. It provides functions to convert these lists to and from JSON and query formats, along with parsing from XML. It is used when specifying monthly recurrence patterns for scheduled EC2 events.",
      "description_length": 315,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing ID format settings for EC2 resources. It provides operations to create, parse, and serialize a result containing a list of ID format statuses. Use this module when interacting with EC2's ID format configuration via AWS API calls, particularly for converting responses to and from JSON or query formats.",
      "description_length": 347,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an internet gateway attachment, with fields for the attachment state and associated VPC ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 internet gateway attachments during infrastructure provisioning or status checks.",
      "description_length": 376,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultVpcResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a default VPC in EC2, primarily by parsing and serializing the resulting VPC data. It works with XML, JSON, and query parameter representations, converting them to and from a structured type that may contain a VPC object. It is used when interacting with AWS EC2's default VPC creation API to extract and format the returned VPC information.",
      "description_length": 384,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeviceType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Ebs` and `Instance_store`, representing storage device types in EC2. It provides bidirectional conversions between these variants and strings, JSON, and query parameters, along with parsing from XML. These functions are used when handling EC2 instance block device configurations, such as attaching or describing storage devices.",
      "description_length": 380,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZone",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 availability zone with fields for state, region, zone identifiers, and metadata. It provides functions to construct, parse, and serialize availability zone data to and from XML, JSON, and query formats. Concrete use cases include retrieving availability zone information from AWS EC2 responses and preparing zone data for API requests.",
      "description_length": 392,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransportProtocol",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing transport protocols with variants `Tcp` and `Udp`. It provides bidirectional conversion between strings and the `t` type, along with functions to serialize and deserialize values to and from JSON, XML, and query parameters. It is used when configuring or interpreting network-related settings in AWS EC2, such as security group rules or load balancer listeners.",
      "description_length": 405,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDetailList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshot details, providing operations to convert them to and from XML, JSON, and query formats. It supports parsing snapshot data from XML nodes and serializing snapshot lists into structured JSON or AWS query parameters. Use this module when working with AWS EC2 snapshot responses, particularly for API interactions involving snapshot metadata retrieval or batch processing.",
      "description_length": 410,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for GPU device information with optional fields such as name, manufacturer, count, and memory details. It provides functions to construct, parse, and convert GPU device data to and from XML, JSON, and query formats. Use this module when handling GPU device metadata in EC2 instance configurations or device reporting workflows.",
      "description_length": 364,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoint connections, including optional parameters like dry-run, filters, and pagination controls. It supports constructing, parsing, and serializing requests to interact with EC2's VPC endpoint connection API. Use this module to filter and retrieve endpoint connection details, such as status and associated VPCs, with support for paginated results.",
      "description_length": 408,
      "index": 80,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.IpRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IP address ranges in the form of CIDR blocks, along with an optional description. It provides functions to construct, serialize, and convert these ranges to and from JSON and query formats. It is used when configuring security group rules that specify allowed or denied IP ranges.",
      "description_length": 334,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and serializing lists of fast snapshot restore state errors. It works with XML nodes and JSON values to transform error data into query parameters or structured lists. It is used when managing EC2 snapshot restore operations that return error details in XML or JSON format.",
      "description_length": 314,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCapacityReservationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 instance's capacity reservation attributes. It provides functions to create, parse, and serialize a result that includes an optional boolean indicating success. The module works with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 300,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetReservedInstancesExchangeQuoteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exchanging reserved instances, including optional dry run flags, reserved instance IDs, and target configurations. It provides functions to construct, parse, and serialize the request for use with EC2 APIs. Use this module when preparing or processing reserved instance exchange quotes in AWS EC2.",
      "description_length": 341,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RemovePrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for removing CIDR entries from prefix lists in AWS EC2. It includes operations to construct, serialize, and parse these entries using JSON and XML formats. Use this module when managing virtual private cloud (VPC) routing by modifying prefix lists with specific CIDR blocks.",
      "description_length": 311,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeOfferingsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance type offerings, providing functions to parse XML input into typed lists, convert lists to query parameters, and serialize or deserialize data to and from JSON. It works directly with lists of `InstanceTypeOffering.t` values. Use this module when retrieving or processing available instance types across AWS regions and zones, particularly when interacting with the EC2 API's `DescribeInstanceTypeOfferings` operation.",
      "description_length": 459,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationResultList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and converting lists of reserved instances modification results. It works with XML nodes, JSON values, and query parameters to facilitate interactions with AWS EC2 APIs. Use it when processing responses or building requests related to modifying reserved instances in AWS.",
      "description_length": 310,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing static routes in a virtual private network, with fields for the destination CIDR block, route source, and route state. It provides functions to construct, parse, and serialize route data to and from XML, JSON, and query formats. It is used to configure and manage static routing in EC2 virtual private gateways.",
      "description_length": 365,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureValues",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing CPU architectures supported by EC2 instances, including 32-bit x86, 64-bit x86, and 64-bit ARM. It provides bidirectional conversions between the type and strings, JSON, and query parameters, enabling easy integration with AWS APIs. Use cases include parsing architecture values from XML responses, serializing them for API requests, and converting between string representations and the enumerated type.",
      "description_length": 448,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway attachment and a route table, with optional fields for the route table ID and association state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing and serializing transit gateway attachment associations in AWS EC2 API interactions.",
      "description_length": 419,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServicePermissionsResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying VPC endpoint service permissions, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. Use this module when handling responses from AWS EC2 API calls that modify VPC endpoint service permissions.",
      "description_length": 377,
      "index": 91,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item in a fleet deletion operation, containing an optional error and a fleet ID. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, specifically for handling errors in EC2 fleet deletion responses. Use this module when processing batch deletion errors from AWS EC2 to extract individual error details per fleet.",
      "description_length": 419,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for updating ingress security group rule descriptions. It includes fields for dry run, group ID, group name, and IP permissions, and provides operations to construct, parse, and serialize the request in various formats. It is used when modifying security group rules in EC2 by specifying new descriptions for ingress rules.",
      "description_length": 363,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 availability zone data. It provides functions to parse XML input into availability zone records, convert them to query parameters or JSON format, and construct lists from JSON data. It is used when retrieving or configuring availability zones in AWS EC2, such as listing available zones or filtering resources by zone.",
      "description_length": 351,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 host instances with optional instance ID, instance type, and owner ID. It includes functions to construct instances, parse them from XML, convert to query parameters, and serialize to and from JSON. It is used when managing EC2 host resources, such as associating or describing dedicated hosts in AWS.",
      "description_length": 359,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EventInformation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling event information with optional fields such as event description, sub-type, and instance ID. It provides functions to construct, parse, and convert event data to and from XML, JSON, and query formats. It is used to manage and serialize event metadata returned by EC2 API operations.",
      "description_length": 332,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UsageClassTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 usage class types, providing conversions to and from JSON, query parameters, and XML. It supports parsing usage class type lists from XML nodes and serializing them for API requests. Use this module when working with AWS EC2 APIs that require or return lists of usage class types, such as describing or modifying instance reservations.",
      "description_length": 368,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateEnclaveCertificateIamRoleResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating an enclave certificate IAM role in EC2. It includes fields for an S3 bucket name, S3 object key, and KMS key ID, all optional. Operations include creating instances, parsing XML, converting to query format, and serializing to and from JSON.",
      "description_length": 316,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` with an optional boolean field `dry_run`, representing parameters for querying instance event notification attributes. It includes functions to construct, parse, and serialize the data structure in various formats, including JSON and AWS query format. This module is used to configure and handle requests to describe EC2 instance event notification settings, primarily for debugging or dry-run validation purposes.",
      "description_length": 457,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Route",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a route in a virtual private cloud, with fields for various route targets like gateways, instances, and peering connections. It includes functions to construct routes, convert them to and from JSON and query formats, and parse them from XML. It is used to manage and manipulate individual route entries in EC2 route tables.",
      "description_length": 373,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in an EC2 launch template, including optional fields for device name, virtual name, EBS configuration, and no-device indicator. It provides functions to construct, parse, and serialize these mappings to and from JSON and query formats. Use this module when configuring storage for EC2 instances launched from a template, particularly when setting up EBS volumes or overriding device mappings.",
      "description_length": 466,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway route table and a resource, such as a VPC or VPN attachment. It includes functions to construct, parse, and serialize the association data for use in API requests or responses. Concrete use cases include managing route propagation, querying association states, and configuring transit gateway attachments in AWS EC2.",
      "description_length": 407,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating snapshots in EC2, primarily working with the `t` type that contains a `SnapshotSet`. It provides functions to construct, parse, and convert snapshot results to and from XML, JSON, and query formats. Use this when processing responses from EC2 snapshot creation requests, especially for extracting and serializing snapshot data.",
      "description_length": 370,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of deleting EC2 fleets, containing sets of successful and unsuccessful deletions. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS EC2 API calls when managing fleet deletion operations.",
      "description_length": 362,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IdFormat",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying ID format settings in EC2, including deadline, resource type, and whether to use long IDs. It provides functions to construct, parse, and serialize these settings for use in API requests. Concrete use cases include configuring instance or volume ID formats when interacting with EC2 operations that require explicit ID handling.",
      "description_length": 380,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in AWS EC2, including HTTP token requirement, hop limit for PUT responses, and endpoint state. It provides functions to construct, serialize, and convert these options to and from JSON and query formats. Concrete use cases include setting up secure metadata access for EC2 instances and modifying metadata behavior via API calls.",
      "description_length": 408,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientCertificateRevocationListStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Pending` and `Active`, representing the status of a client certificate revocation list. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization capabilities for query parameters, JSON, and XML. These operations support handling status values in API requests and responses, particularly when managing certificate revocation list updates in a networking or authentication context.",
      "description_length": 510,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an EC2 network interface, with fields to specify properties like subnet, security groups, IP addresses, and tags. It provides functions to construct, serialize, and parse these requests, supporting operations like query parameter conversion, JSON encoding/decoding, and XML parsing. It is used when programmatically provisioning network interfaces in AWS EC2 with precise configuration options.",
      "description_length": 447,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing ID format settings in EC2, specifically supporting operations to create, serialize, and parse requests that include an optional resource type string. It works with XML, JSON, and query string formats for compatibility with AWS API endpoints. Concrete use cases include configuring and retrieving ID format preferences for EC2 resources like instances or volumes via AWS SDK calls.",
      "description_length": 435,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 route table associations, including fields like association ID, route table ID, subnet ID, and association state. It provides functions to construct, parse, and serialize these associations for use in API requests and responses. Concrete use cases include managing route table associations in AWS EC2, such as creating or updating associations between route tables and subnets or gateways.",
      "description_length": 447,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsList",
      "library": "aws-ec2",
      "description": "This module handles lists of IKE versions for EC2 operations, providing functions to parse, convert to query format, and serialize to and from JSON. It works with a list of IKEVersionsListValue.t types, which represent specific IKE protocol versions. Use this module when configuring or retrieving IKE settings for EC2 virtual private gateways or customer gateways.",
      "description_length": 365,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and serializing lists of unsuccessful instance credit specification items. It provides operations to convert such lists to AWS query format, JSON, and back, as well as constructing and parsing them from XML. It is used when managing credit specifications for EC2 instances, particularly for handling errors in batch operations.",
      "description_length": 368,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 Traffic Mirror session, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include preparing deletion requests for Traffic Mirror sessions before sending them via the EC2 API.",
      "description_length": 341,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateways in EC2, providing access to a set of local gateway data and an optional next token for pagination. It supports operations to construct, parse, and convert results to and from JSON and query formats. It is used when processing responses from AWS EC2's DescribeLocalGateways API call, enabling structured access to gateway information and pagination control.",
      "description_length": 416,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseReservedInstancesOfferingRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when purchasing a reserved EC2 instance offering. It includes fields for instance count, offering ID, optional dry run flag, limit price, and purchase time, supporting precise control over reservation purchases. The module provides functions to construct, parse, and serialize these requests to interact with AWS EC2 APIs for cost-optimized resource provisioning.",
      "description_length": 426,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroupIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of local gateway virtual interface group IDs in AWS EC2. Provides parsing from XML, conversion to query parameters and JSON, and extraction from JSON. Used when managing EC2 local gateway configurations that involve virtual interface groups.",
      "description_length": 254,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fast snapshot restore operations in EC2. It includes fields for a snapshot ID and a set of state errors, along with functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to process and communicate detailed error information when enabling fast snapshot restore fails.",
      "description_length": 392,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastGroupList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of transit gateway multicast group lists. It provides functions to convert between XML, JSON, and query string formats and works with lists of transit gateway multicast group records. It is used when managing multicast traffic in AWS EC2 transit gateways, particularly when retrieving or configuring group membership information via API calls.",
      "description_length": 404,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateName",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 instance, such as `Running`, `Stopped`, or `Terminated`. It includes functions to convert between string representations and the enumerated values, supporting parsing from XML, JSON serialization, and query parameter encoding. These operations are used when interpreting or sending instance state data in interactions with the AWS EC2 API.",
      "description_length": 421,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InterfacePermissionType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing interface permission types in EC2, with specific values `INSTANCE_ATTACH` and `EIP_ASSOCIATE`. It provides bidirectional conversion functions between strings and the enumerated type, along with serialization and deserialization to JSON, query parameters, and XML. These operations support handling interface permissions in API requests and responses, particularly when managing network interface attachments and elastic IP associations.",
      "description_length": 488,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a range of public IPv4 addresses within an EC2 public IPv4 pool, including the first and last address in the range, the total number of addresses, and the count of available addresses. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing and querying address pool ranges when configuring or inspecting EC2 network resources.",
      "description_length": 468,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing images into EC2, including fields like architecture, disk containers, encryption settings, and metadata. It provides functions to construct, parse, and serialize image import requests in various formats such as JSON and query strings. Use this module when initiating custom image imports, specifying disk sources, or configuring encryption and licensing for imported images.",
      "description_length": 425,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying private IP addresses with an optional primary flag and IP address string. It provides functions to construct, serialize, and parse these specifications, primarily used when configuring EC2 instance network interfaces. The module directly supports operations involving private IP address configuration in AWS EC2 APIs.",
      "description_length": 369,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "Handles license configuration requests for importing images in EC2. It provides functions to convert lists of license configurations to and from JSON and query formats, and to parse XML input into license configuration lists. This module is used when importing images with specific licensing requirements, such as bringing your own license (BYOL).",
      "description_length": 347,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupList",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 security group lists. Works with XML, JSON, and query string formats, specifically for lists of security group records. Used when managing EC2 instance networking policies, such as during instance launch or security group updates.",
      "description_length": 279,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing different principal types in AWS EC2, such as Account, Role, User, and Service. It provides bidirectional conversions between strings and the sum type, along with serialization to and from JSON and query parameters. It is used when working with EC2 resource policies or permissions that require specifying the type of AWS principal involved.",
      "description_length": 385,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of launch permissions for EC2 instances, providing operations to convert, parse, and serialize them. It works with XML nodes, JSON values, and AWS query parameters. Use it to manage access controls when sharing or restricting instance launches in AWS EC2.",
      "description_length": 281,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetReservedInstancesExchangeQuoteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a reserved instances exchange quote in EC2, including fields like currency code, payment due, and validity status. It provides operations to construct, serialize, and parse this structure to and from JSON and XML formats. Use this module when handling EC2 reserved instance exchange quotes programmatically, such as processing responses from the AWS API or building custom reporting tools.",
      "description_length": 453,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring transit gateway options in AWS EC2, including fields like ASN, route table behavior, DNS support, and multicast settings. It provides functions to construct, serialize, and parse these options for use in API requests. Concrete use cases include setting up custom routing and network sharing configurations when creating or modifying transit gateways.",
      "description_length": 403,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a Client VPN route, containing an optional status field. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Concrete use cases include handling responses from AWS EC2 API calls when managing Client VPN routes, enabling integration with AWS services and tooling.",
      "description_length": 405,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway route table sets in AWS EC2. It provides functions to convert between XML, JSON, and query string representations of a list of local gateway route tables. Use this module when working with AWS EC2 API requests and responses that involve retrieving or configuring sets of local gateway route tables.",
      "description_length": 388,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance types, providing constructors, parsing, and serialization functions. It works with instance type information lists and an optional next token for pagination. Use it to process responses from EC2's `DescribeInstanceTypes` API call, including handling paginated results and converting to and from JSON or query formats.",
      "description_length": 375,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 Traffic Mirror filter rules, including fields like rule action, protocol, port ranges, and CIDR blocks. It provides functions to construct, parse, and serialize these rules for use in API requests or configuration management. Concrete use cases include defining network traffic monitoring rules and configuring mirror filters in AWS EC2 environments.",
      "description_length": 408,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupInfo",
      "library": "aws-ec2",
      "description": "This module handles placement group configuration data in EC2, primarily working with lists of placement group strategies. It provides functions to construct, parse, and serialize placement group information to and from XML, JSON, and query formats. Use this module when retrieving or configuring placement group options in EC2 instances, particularly for high-performance computing scenarios.",
      "description_length": 393,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreatePlacementGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a placement group in EC2, containing an optional placement group object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle the output of EC2 placement group creation operations, enabling integration with AWS API requests and responses.",
      "description_length": 409,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseHostIdSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of a list of host IDs returned in EC2 responses. It provides functions to convert between XML, JSON, and query string formats, specifically for string lists. Use this module when processing EC2 API responses that include sets of host identifiers, such as describing or managing dedicated hosts.",
      "description_length": 359,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNatGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a NAT gateway, including a dry-run flag and the NAT gateway ID. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when issuing deletion commands to AWS EC2 to manage NAT gateway resources programmatically.",
      "description_length": 339,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing network interface association details for an EC2 instance, including optional fields like carrier IP, IP owner ID, public DNS name, and public IP. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling EC2 instance metadata or responses that include network interface association information.",
      "description_length": 428,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceUsageSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 instance usage data represented as lists of `InstanceUsage.t`. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 billing or usage reports. Use this module when processing instance usage data retrieved from AWS APIs or when preparing such data for API requests.",
      "description_length": 406,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting VPC endpoint connections, primarily by managing a set of unsuccessful connection attempts. It provides operations to construct, parse, and serialize the result, including converting to JSON and query formats. Use this module when processing responses from accepting VPC endpoint connections in AWS EC2.",
      "description_length": 346,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchLocalGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching local gateway routes, including parameters like route table ID, filters, and pagination options. It provides functions to construct, serialize, and parse these requests in different formats such as JSON and query strings. It is used when interacting with EC2's local gateway route tables, particularly for filtering and retrieving route information in a paginated manner.",
      "description_length": 425,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 Traffic Mirror filter, including optional description, tag specifications, dry run flag, and client token. It provides functions to construct, serialize to JSON or query format, and parse from XML or JSON. Concrete use cases include configuring network traffic monitoring rules and managing filter metadata in AWS EC2 environments.",
      "description_length": 393,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 account attribute names, providing conversions to and from JSON, query parameters, and XML. It works with the `AccountAttributeName.t` type, representing AWS EC2 account attributes as strings. Use this module when interacting with AWS EC2 APIs that require or return account attribute name lists in different formats.",
      "description_length": 350,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an EBS encryption by default check, including a boolean indicating the encryption state. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module to handle responses from EC2 API calls that retrieve EBS encryption settings.",
      "description_length": 354,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateVersionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a launch template version in AWS EC2. It includes operations to construct, parse, and serialize the result, which consists of an optional launch template version and a validation warning. It works with XML, JSON, and AWS query formats, enabling integration with AWS SDK workflows for template management and validation.",
      "description_length": 362,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecifications",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 elastic GPU specifications. Works with lists of elastic GPU specification records, converting between XML, JSON, and query parameter formats. Used when configuring or retrieving GPU resources for EC2 instances using AWS SDK.",
      "description_length": 273,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway prefix list reference in AWS EC2. It includes a parsed response type, JSON and query serialization, and construction helpers. It is used to interpret and build API responses when managing route propagation between transit gateways and prefix lists.",
      "description_length": 309,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing an EC2 target group with an optional ARN field. It provides functions to construct, serialize, and deserialize target group instances using JSON, query parameters, and XML. Use this module when managing load balancer target groups in AWS EC2, such as when registering or deregistering targets.",
      "description_length": 347,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying price schedules with optional currency code, price, and term. It provides functions to create instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used to configure pricing details for EC2 reserved instances or spot fleets.",
      "description_length": 316,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceIdRequestSet",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 scheduled instance IDs as strings. It provides operations to convert the list into query parameters or JSON, and to parse it from XML or JSON. Use this when working with AWS EC2 APIs that require submitting or retrieving scheduled instance IDs in different data formats.",
      "description_length": 304,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when launching EC2 spot instances, including networking, storage, and instance configuration. It provides functions to construct, parse, and serialize these specifications to support interactions with the EC2 API. Use cases include setting up spot instance requests with custom block devices, network interfaces, and IAM roles.",
      "description_length": 390,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorTargetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a traffic mirror target, containing an optional traffic mirror target ID. It provides functions to construct, parse, and convert the result to various formats including JSON and query parameters. Use this module when handling responses from EC2 traffic mirror target deletion operations.",
      "description_length": 360,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAccelerator",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying elastic inference accelerators, including their type and optional count. It provides functions to create, parse, and serialize these accelerators to and from XML, JSON, and query formats. Use this module when configuring EC2 instances with inference acceleration resources for machine learning workloads.",
      "description_length": 356,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to delete DHCP options, consisting of a required `dhcp_options_id` and an optional `dry_run` flag. It provides functions to construct, parse, and serialize this request type to and from JSON, query parameters, and XML. Concrete use cases include preparing and sending deletion requests for DHCP options in EC2, with support for dry-run validation.",
      "description_length": 413,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a set of named attributes for FPGA images, including operations to convert between string representations and enumerated values. It supports parsing from XML nodes, serialization to query parameters and JSON, and provides a mapping between string names and the corresponding attribute types. Concrete use cases include handling FPGA image metadata in API requests and responses, such as setting descriptions, names, load permissions, and product codes.",
      "description_length": 472,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServiceConfigurationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoint service configurations, including optional parameters like dry-run mode, service IDs, filters, and pagination. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. Concrete use cases include configuring and retrieving AWS VPC endpoint service details programmatically, especially when filtering or paginating through large result sets.",
      "description_length": 471,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror target IDs in AWS EC2. It provides functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works specifically with lists of string-based traffic mirror target identifiers.",
      "description_length": 253,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 fleet launch template overrides. It works with XML nodes, JSON values, and query parameters to convert between these formats and an internal list of override records. Use this module when managing EC2 fleet configurations that involve multiple launch templates with varying parameters like instance types or availability zones.",
      "description_length": 395,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StaleSecurityGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of stale security group records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2's stale security group data structures. Use this module when processing responses or building requests involving stale security groups in AWS EC2 APIs.",
      "description_length": 379,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying resource tags in EC2 operations, including the resource type and a list of tags. It provides functions to construct, serialize, and parse tag specifications in various formats such as JSON and query parameters. It is used when creating or modifying EC2 resources that support tagging, such as instances or volumes.",
      "description_length": 366,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunInstancesMonitoringEnabled",
      "library": "aws-ec2",
      "description": "This module defines a type `t` that represents monitoring configuration for EC2 instances, specifically whether monitoring is enabled. It provides functions to construct, parse, and convert the type to and from query parameters, JSON, and XML, enabling direct interaction with AWS EC2 APIs for configuring instance monitoring.",
      "description_length": 326,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for releasing host resources by host ID list. It provides operations to create, parse, and serialize the request in various formats including JSON, query parameters, and XML. It is used when interacting with EC2 APIs to release dedicated hosts.",
      "description_length": 284,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway virtual interface with optional fields for identifiers, network configuration, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing virtual interface configurations in EC2, particularly for AWS Direct Connect and VPC connectivity setups.",
      "description_length": 409,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 images, providing direct conversions to and from JSON and query formats. It includes parsing from XML nodes and constructing empty image lists. Use this module when retrieving or processing multiple EC2 image descriptions from AWS responses.",
      "description_length": 274,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProductDescriptionList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of lists of product descriptions in AWS EC2 responses. Works directly with string lists, XML nodes, JSON values, and query parameters. Used to convert between EC2 API XML outputs and internal OCaml string list representations for further processing or request construction.",
      "description_length": 322,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceConfigurationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of EC2 service configurations. It works with lists of service configuration records, converting them to and from XML, JSON, and query formats. Use this module when interacting with AWS EC2 APIs that require or return service configuration data in these formats.",
      "description_length": 319,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TelemetryStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `UP` and `DOWN`, representing the operational status of telemetry systems. It includes functions to convert between strings and the variant type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and format telemetry status values when interacting with EC2 APIs, particularly in handling instance monitoring state responses.",
      "description_length": 453,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering instance event notification attributes, including optional dry-run and instance tag attribute settings. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Use this module when configuring or removing event notifications for EC2 instances using tag-based filters.",
      "description_length": 371,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceCreationType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing network interface creation types in EC2, currently only including `Efa`. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless integration with AWS API requests and responses. Use this module when configuring or parsing EC2 network interfaces that require specialized creation types like EFA (Elastic Fabric Adapter).",
      "description_length": 410,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationErrorCode",
      "library": "aws-ec2",
      "description": "This module defines error codes for unsuccessful instance credit specification operations in EC2, including malformed or missing instance IDs, unsupported configurations, and invalid states. It provides conversions between error codes and strings, JSON and XML parsing, and query parameter serialization. These functions are used to handle and interpret errors when modifying instance credit specifications in AWS API interactions.",
      "description_length": 431,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthorizationRuleStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN authorization rule, with optional `code` and `message` fields indicating the outcome or error state. It provides functions to construct, serialize, and convert the status from and to JSON, query parameters, and XML. This is used when managing Client VPN endpoint authorization rules in AWS EC2, allowing precise handling of rule status responses from API calls.",
      "description_length": 438,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for reserved EC2 instances, with optional fields including availability zone, instance count, instance type, platform, and scope. It provides functions to construct, parse, and convert configurations to and from JSON and query formats. It is used to specify and manage reserved instance parameters in AWS EC2 operations.",
      "description_length": 366,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of launch template deletion error items. It provides functions to convert between XML, JSON, and query string representations of these error lists. It is used when processing responses from EC2 API calls that delete multiple launch template versions, allowing structured access to individual deletion errors.",
      "description_length": 386,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a VPC, including the VPC ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. It is used when issuing deletion commands to EC2 to ensure correct request formatting and validation before submission.",
      "description_length": 353,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetReplacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing strategies for replacing EC2 fleet instances, specifically supporting the `Launch` strategy. It provides bidirectional conversions between the enumerated type and strings, along with serialization to and from JSON, query parameters, and XML. These operations are used when configuring or interpreting EC2 fleet replacement policies in API requests and responses.",
      "description_length": 420,
      "index": 175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 instance attributes, including security groups, block device mappings, and various configuration flags. It provides functions to construct, parse, and serialize instance attributes for use in API requests and responses. Concrete use cases include configuring instance shutdown behavior, enabling ENA support, and specifying EBS optimization settings.",
      "description_length": 404,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating flow logs in EC2, including parameters like resource IDs, log destination, and traffic type. It provides functions to construct, parse, and serialize flow log requests for API interactions. Use this module when configuring VPC flow logging to CloudWatch or S3 with specific aggregation intervals and permissions.",
      "description_length": 365,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportSnapshotTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 import snapshot tasks, providing structured access to task lists and pagination tokens. It includes functions to construct, parse, and serialize results in various formats like JSON and query strings. Use this module when processing responses from EC2's `DescribeImportSnapshotTasks` API to retrieve and manage snapshot import status and metadata.",
      "description_length": 396,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseReservedInstancesOfferingResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of purchasing a Reserved Instances offering in EC2, containing an optional reserved instances ID. It provides functions to construct, parse, and convert the structure to and from query parameters, XML nodes, and JSON format. It is used to handle responses from the EC2 API when purchasing reserved capacity.",
      "description_length": 368,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for DNS support, IPv6 support, and appliance mode support, used when configuring transit gateway VPC attachments. It provides functions to construct, serialize, and parse these options, specifically for use in AWS EC2 API requests. Use cases include enabling DNS resolution, IPv6 connectivity, or appliance mode in transit gateway attachments via the AWS SDK for OCaml.",
      "description_length": 424,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EventType",
      "library": "aws-ec2",
      "description": "This module defines a sum type `t` representing event types in EC2, including `InstanceChange`, `FleetRequestChange`, `Error`, and `Information`. It provides bidirectional conversions between these types and strings, JSON, and XML, along with functions to integrate event types into AWS queries. It is used to handle event type serialization and deserialization in EC2 API interactions.",
      "description_length": 386,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeMovingAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing moving Elastic IP addresses in EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. It works with moving address status sets and optional pagination tokens.",
      "description_length": 253,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRouteList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN static routes, providing direct conversions to and from XML, JSON, and query formats. It supports parsing route data from AWS XML responses and serializing route lists for API requests. Concrete use cases include configuring and retrieving static routes for EC2 virtual private gateways.",
      "description_length": 324,
      "index": 183,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCapacityReservationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 capacity reservations, providing access to a list of reservations and an optional pagination token. It works with XML, JSON, and query string formats for input and output operations. Use this module to process responses from EC2 when listing capacity reservations, especially when handling paginated results.",
      "description_length": 357,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module handles the result of replacing a route in a transit gateway. It provides constructors, parsing, and serialization functions for a type that contains an optional transit gateway route. It is used to process responses from the EC2 API when modifying routes in a transit gateway.",
      "description_length": 289,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationOptions",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` that represents capacity reservation options for EC2, specifically supporting a usage strategy. It provides functions to construct, parse, and serialize these options to and from XML, JSON, and query formats. Use this module when configuring EC2 capacity reservations that require specifying how reserved capacity is utilized.",
      "description_length": 369,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 route table lists. It provides functions to convert route table lists to and from XML, JSON, and query formats, specifically working with `Aws_ec2.Types.RouteTable.t` lists. Use this module when processing EC2 route table data retrieved from or sent to the AWS API, such as when listing or configuring route tables in a VPC.",
      "description_length": 404,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying load permissions in EC2, supporting operations to create, serialize, and convert permission requests. It works with XML, JSON, and query string formats, enabling integration with AWS API calls. Concrete use cases include setting up image launch permissions by user ID or predefined group.",
      "description_length": 340,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetType",
      "library": "aws-ec2",
      "description": "This module defines and manipulates fleet types for EC2, supporting conversions between string representations and the enumerated type `t`, which includes `Request`, `Maintain`, and `Instant`. It provides serialization to and from JSON and query formats, along with XML parsing for use in API requests and responses. Direct use cases include handling EC2 fleet configuration inputs and outputs in AWS SDK integrations.",
      "description_length": 418,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesModificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying volume modifications in EC2, supporting filtering by volume IDs and custom filters, with pagination via next_token and max_results. It includes functions to construct, parse, and serialize the request in JSON and query formats. Concrete use cases include retrieving volume modification history for specific volumes, applying filters for targeted results, and paginating through large result sets.",
      "description_length": 449,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelCertificateResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPN tunnel certificate in EC2. It provides constructors, parsing, and serialization functions for a type that wraps an optional `VpnConnection`. It is used to process and return updated VPN connection information after a certificate modification operation.",
      "description_length": 302,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a network ACL entry in EC2, including fields for dry run, egress flag, network ACL ID, and rule number. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when configuring network access rules in AWS VPC environments programmatically.",
      "description_length": 357,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing a request to create a default VPC, with an optional `dry_run` flag to simulate the operation. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. It is used when interacting with the EC2 API to configure network settings programmatically.",
      "description_length": 362,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 NAT gateway, including timestamps, state, network configuration, and associated tags. It provides functions to construct, parse, and serialize NAT gateway data for use in API requests and responses. Concrete use cases include managing NAT gateway lifecycle operations and querying gateway status in AWS infrastructure automation.",
      "description_length": 386,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting tags from EC2 resources, including optional dry run flag, resource IDs, and tag list. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when forming API calls to remove metadata tags from instances, volumes, or other EC2 resources.",
      "description_length": 356,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfigurationList",
      "library": "aws-ec2",
      "description": "This module represents a list of DHCP configurations for EC2 instances, providing functions to convert the list to and from JSON and query formats, and to parse XML data into the list structure. It operates on a list of `DhcpConfiguration.t` records, handling serialization and deserialization for API interactions. Use cases include processing EC2 DHCP options set responses and preparing configuration data for AWS API requests.",
      "description_length": 430,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the association details of a network interface in AWS EC2, including optional fields like public IP, public DNS name, and allocation IDs. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing network interface metadata during instance provisioning or inspecting public connectivity information for EC2 instances.",
      "description_length": 455,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCapacityReservationsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 capacity reservations, including fields to specify reservation IDs, pagination, result limits, filters, and dry run mode. It provides functions to construct, parse, and serialize these requests in various formats such as JSON and query strings. Concrete use cases include querying AWS EC2 for capacity reservation details using specific filters or retrieving paginated results.",
      "description_length": 438,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListEntriesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for retrieving entries from an EC2 managed prefix list, including parameters like prefix list ID, target version, and pagination controls. It provides functions to construct, parse, and serialize these requests for use with AWS API calls. Use this module when querying prefix list entries in EC2, especially when handling versioned or paginated results.",
      "description_length": 395,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 transit gateway multicast domain, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing network configurations in AWS EC2 by allowing safe deletion of multicast domains through structured input handling.",
      "description_length": 380,
      "index": 200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a VPC peering connection, with optional boolean and string fields. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used to format and handle input data when interacting with EC2's VPC peering connection acceptance API.",
      "description_length": 329,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnAuthorizationRulesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying Client VPN authorization rules, including parameters like endpoint ID, filters, and pagination options. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include configuring and retrieving access rules for AWS Client VPN endpoints programmatically.",
      "description_length": 382,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional network and cryptographic parameters for configuring VPN tunnels. It includes functions to construct, serialize, and parse these configurations, supporting operations like setting encryption algorithms, lifetime values, and pre-shared keys. It is used to modify tunnel options in EC2 VPN connections with specific CIDR ranges, IKE versions, and security settings.",
      "description_length": 411,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MonitoringState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of EC2 instance monitoring, with variants like `Enabled`, `Disabled`, and transitional states. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. It is used to interpret and format monitoring state values when interacting with EC2 APIs, such as when retrieving or setting monitoring status for instances.",
      "description_length": 456,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC attachment for a transit gateway in AWS EC2, including identifiers, state, subnets, and options. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing transit gateway attachments programmatically, such as creating, updating, or inspecting VPC connectivity configurations.",
      "description_length": 422,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding information about EC2 snapshots, including metadata like state, encryption status, and volume details. It provides functions to construct, parse, and serialize snapshot data for use in API requests and responses. Common use cases include retrieving snapshot details from AWS, filtering snapshots by attributes, and building requests to create or modify snapshots.",
      "description_length": 412,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetActivityStatus",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the possible activity statuses of an EC2 fleet, including `Error`, `Pending_fulfillment`, `Pending_termination`, and `Fulfilled`. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless integration with AWS API requests and responses. It is used when managing EC2 fleet lifecycle events and status tracking.",
      "description_length": 391,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIpv6PoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying IPv6 address pools, including fields like pool IDs, pagination tokens, result limits, and filters. It provides functions to construct, parse, and serialize these requests into formats like JSON and AWS query strings. It is used to interact with EC2's IPv6 pool management API, enabling precise retrieval of pool information with optional filtering and pagination.",
      "description_length": 416,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing network configuration details for EC2 instances, including fields like network performance, IP address limits, and support for features like ENA and EFA. It provides functions to construct, parse, and serialize network info data to and from XML, JSON, and query formats. Concrete use cases include handling network configuration responses from EC2 API calls and building requests with specific network requirements.",
      "description_length": 465,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying credit specifications for EC2 instances, capturing both successful and unsuccessful updates. It works with structured sets of instance credit specification results, enabling precise tracking of changes in environments using burstable performance instances. Use this module to process and serialize responses when adjusting credit configurations in AWS EC2.",
      "description_length": 400,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockStateCode",
      "library": "aws-ec2",
      "description": "This module defines a variant type representing the state codes of a VPC CIDR block in AWS EC2, including transitions like associating, associated, and failed. It provides bidirectional conversions between the variant type and strings, JSON, and XML, along with helper functions for parsing and query construction. It is used to manage and interpret the status of IPv4 or IPv6 CIDR blocks associated with a VPC.",
      "description_length": 411,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway route table virtual interface group associations, including fields for filtering, pagination, and dry run options. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when retrieving information about specific associations between local gateway route tables and virtual interface groups in EC2.",
      "description_length": 440,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentPropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the propagation of a transit gateway attachment to a route table, including its state and associated route table ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing route propagation settings for transit gateway attachments in AWS EC2.",
      "description_length": 384,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestHostIdList",
      "library": "aws-ec2",
      "description": "Handles lists of host IDs in EC2 requests, providing serialization to query parameters and JSON, and parsing from XML. Works with string lists representing host identifiers. Used for interacting with EC2 APIs that require or return host ID lists, such as describing or modifying host reservations.",
      "description_length": 297,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePlacementGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 placement groups by providing functions to construct, parse, and serialize the result data. It works with placement group lists and supports operations for converting to and from XML, JSON, and AWS query formats. Use this module when retrieving and processing placement group information from EC2, particularly for handling API responses in different data formats.",
      "description_length": 413,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the propagation details of a transit gateway route table, including the associated attachment ID, resource ID, resource type, route table ID, and propagation state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing route table propagations in AWS EC2 transit gateways, particularly when configuring or inspecting network routing behavior.",
      "description_length": 485,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImage",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an FPGA image with fields for identifiers, metadata, state, timestamps, ownership, product codes, tags, and boolean flags. It provides functions to construct instances with optional fields, parse XML data, and convert to and from JSON and query formats. Concrete use cases include managing FPGA image data retrieved from or sent to AWS EC2 APIs, enabling configuration and metadata handling for FPGA-based instances.",
      "description_length": 466,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateVpcCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters when associating a VPC with a CIDR block in AWS EC2. It includes fields for IPv4 and IPv6 CIDR blocks, VPC identifier, and optional network border group and pool settings. Operations include constructing the request, parsing XML input, and converting to query or JSON formats for API interaction.",
      "description_length": 359,
      "index": 218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance launch configurations, including fields like image ID, instance type, security groups, and network interfaces. It provides functions to construct, serialize, and parse launch specifications for use in API requests. Concrete use cases include configuring spot instance launches and customizing instance provisioning with block device mappings or IAM roles.",
      "description_length": 420,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of Phase 1 integrity algorithm values used in EC2 VPN connection configurations. It operates on a list of `Phase1IntegrityAlgorithmsListValue.t` elements, representing cryptographic integrity algorithms. It supports operations like converting to and from XML, JSON, and query parameters, specifically for interacting with AWS EC2 APIs related to VPN tunnel settings.",
      "description_length": 441,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a prefix list in EC2, with specific tags for lifecycle stages like creation, modification, restoration, and deletion in both successful and failed states. It provides bidirectional conversion functions between the variant type and strings, along with serialization and deserialization for JSON, XML, and query parameters. It is used to interpret and construct prefix list states when interacting with AWS EC2 APIs, particularly during operations like creating or modifying prefix lists.",
      "description_length": 559,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcPeeringConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC peering connection options, including settings for both the accepter and requester sides of the connection, a dry run flag, and the VPC peering connection ID. It provides functions to construct, serialize, and parse these requests, specifically handling conversions to and from JSON, query parameters, and XML. It is used when updating peering options between two VPCs in AWS EC2, allowing configuration changes without re-creating the peering connection.",
      "description_length": 513,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PoolCidrBlocksSet",
      "library": "aws-ec2",
      "description": "Handles the manipulation of CIDR block lists for IP address pools, providing functions to parse, convert to query parameters, and serialize to and from JSON. Works with lists of `PoolCidrBlock.t` records, which represent allocated CIDR ranges. Useful when managing IP address pool configurations in AWS EC2, such as during VPC subnet creation or IPAM operations.",
      "description_length": 362,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a local gateway route in EC2, including fields for the destination CIDR block, route table ID, virtual interface group ID, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when configuring routing between a local gateway and a virtual interface group in a VPC.",
      "description_length": 410,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a group of local gateway virtual interfaces, including identifiers, associated virtual interface IDs, owner information, and tags. It provides functions to construct, serialize, and deserialize this structure for use in API interactions. Typical use cases include managing virtual interface group configurations in EC2 and processing related AWS API responses.",
      "description_length": 410,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based key pair IDs for EC2 operations. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. It is used when managing EC2 instance key pairs in API requests and responses.",
      "description_length": 263,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAcl",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL in AWS EC2, including its associations, entries, metadata, and tags. It provides functions to construct, parse, and serialize network ACL data for use in API requests and responses. Concrete use cases include managing network access rules, processing EC2 API responses, and persisting network configuration state.",
      "description_length": 377,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of a canceled Spot Instance request in AWS EC2. It includes functions to convert between string representations and enumerated values, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and construct Spot Instance request state values when interacting with EC2 APIs, particularly during request cancellation or status checks.",
      "description_length": 466,
      "index": 228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BatchState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a batch operation, including values like `Submitted`, `Active`, `Cancelled`, and `Failed`. It provides functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON and XML. These capabilities are used when interacting with AWS EC2 APIs to interpret and construct batch state responses and requests.",
      "description_length": 442,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetCapacitySpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying target capacities in EC2, including total, on-demand, and spot capacities, along with a default capacity type. It provides functions to construct, serialize, and deserialize these specifications for use in API requests. Concrete use cases include configuring auto-scaling groups and managing capacity requirements for EC2 instances.",
      "description_length": 384,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpoint",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC endpoint with fields for identifiers, state, associated resources, and metadata. It provides functions to construct, parse, and serialize VPC endpoint data for use in API requests and responses. Concrete use cases include managing VPC endpoint configurations, querying endpoint states, and handling endpoint-related events in AWS EC2.",
      "description_length": 390,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsInstances",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing EC2 fleet instances, including optional fields for launch templates, lifecycle, instance IDs, instance type, and platform. It provides functions to construct, parse, and serialize these descriptions for use in API requests and responses. Concrete use cases include querying fleet instance details and formatting instance data for AWS API interactions.",
      "description_length": 403,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an IPv6 address request for an EC2 instance, with optional IPv6 address string. It provides functions to construct, parse, and convert the data structure to query parameters, JSON, and XML formats. Use this module when configuring IPv6 settings for EC2 instances in AWS API requests.",
      "description_length": 335,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInstanceExportTaskResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for an EC2 instance export task, containing an optional export task. It provides functions to construct, parse, and serialize the result to query parameters or JSON, specifically handling XML input for AWS API responses. It is used when managing EC2 instance exports, where the result needs to be converted between different data formats for API communication.",
      "description_length": 394,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotPriceHistoryResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 spot price history, providing functions to construct, parse, and serialize the response data. It works with a custom type containing an optional next token and a list of spot price history entries. Concrete use cases include retrieving paginated spot price data from AWS EC2 and converting between XML, JSON, and internal OCaml representations for further processing or display.",
      "description_length": 427,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportInstanceReasonCodes",
      "library": "aws-ec2",
      "description": "This module defines a set of reason codes for reporting issues with EC2 instances, such as `Unresponsive`, `Not_accepting_credentials`, and `Performance_network`. It includes conversions between the enumerated type and strings, JSON, and XML, enabling integration with AWS APIs. These functions are used when submitting instance status reports or interpreting automated health checks from EC2.",
      "description_length": 393,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a type for handling IPv6 CIDR blocks as optional string values. It includes functions to construct, parse, and convert these values to query parameters, JSON, or XML. It is used when working with EC2 operations that require IPv6 network configurations, such as subnet creation or VPC management.",
      "description_length": 315,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and operations for creating an EC2 snapshot request. It includes functions to construct, parse, and serialize the request, which contains parameters like volume ID, optional description, tag specifications, and dry run flag. It works directly with XML, JSON, and query string formats for request transmission and processing.",
      "description_length": 358,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesOfferingsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Reserved Instances offerings, containing a list of offerings and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include processing AWS EC2 API responses and building paginated requests for retrieving Reserved Instances offerings.",
      "description_length": 387,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceType",
      "library": "aws-ec2",
      "description": "This module defines a comprehensive enumeration of EC2 instance types, including general-purpose, compute-optimized, memory-optimized, and specialized hardware instances. It provides bidirectional conversion between string representations and enumerated values, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when working with EC2 instance provisioning, configuration, or querying to ensure correct type handling and interoperability with AWS APIs.",
      "description_length": 509,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteList",
      "library": "aws-ec2",
      "description": "This module defines a list of route definitions with operations to construct, parse, and serialize them. It works with XML nodes, JSON values, and query parameters to facilitate route list handling in API requests and responses. Concrete use cases include converting route data to and from JSON for AWS API interactions and parsing route lists from XML responses.",
      "description_length": 363,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoipPool",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a CoIP pool, with fields for pool ID, CIDR blocks, local gateway route table ID, tags, and ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing CoIP pools in EC2, particularly for allocating or associating IP addresses with local gateways.",
      "description_length": 382,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnTargetNetworksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying details of client VPN target networks, supporting operations to filter, paginate, and configure dry-run behavior. It works with string identifiers, integer limits, optional tokens, and filter lists to shape API requests. Concrete use cases include retrieving associated VPCs for a client VPN endpoint and applying filters to narrow down results.",
      "description_length": 398,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequestIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot instance request IDs. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Use it when managing spot instance requests, such as retrieving or filtering active requests by ID.",
      "description_length": 269,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a virtual private network (VPN) gateway in Amazon EC2. It includes fields for gateway state, type, availability zone, VPC attachments, and metadata like tags and identifiers. Operations include constructing instances, parsing XML responses, converting to query parameters, and serializing to and from JSON for API interactions.",
      "description_length": 377,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelImportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling an import task, including optional fields for the cancellation reason, dry run flag, and import task ID. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include sending cancellation requests to EC2 with specific task identifiers or checking cancellation effects without applying changes.",
      "description_length": 403,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RecurringCharge",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing recurring charges in AWS EC2, with optional amount and frequency fields. It provides functions to construct, parse, and convert recurring charge data to and from XML, JSON, and query formats. Use this module when handling billing information for EC2 resources that incur regular charges, such as reserved instances.",
      "description_length": 369,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseHostReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for purchasing host reservations in EC2, including fields like client token, currency code, host IDs, limit price, offering ID, and tag specifications. It provides functions to construct, parse, and serialize the structure to and from JSON, query parameters, and XML. Concrete use cases include submitting reservation purchase requests and handling responses in EC2 automation workflows.",
      "description_length": 424,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEnclaveOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring enclave options in a launch template, specifically supporting the `enabled` flag as an optional boolean. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this when managing EC2 instance launch templates with enclave configurations, such as enabling or disabling enclave support during instance creation.",
      "description_length": 422,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImagesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing FPGA images in EC2, providing constructors, parsing, and serialization functions. It works with FPGA image lists and optional pagination tokens. Use it to process responses from FPGA image queries, including paginated results and converting to or from JSON and query formats.",
      "description_length": 320,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a Reserved Instance in EC2, containing an optional ID of the modified instance and its new configuration. It provides functions to construct, parse, and serialize the structure to query parameters or JSON. Concrete use cases include handling responses from EC2 API calls that modify Reserved Instance configurations, such as changing instance count or availability zone.",
      "description_length": 444,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing disk images, including their checksum, format, import manifest URL, and size. It provides functions to construct, parse, and convert these descriptions to and from JSON and query formats. It is used when handling disk image metadata in EC2 import workflows, such as validating imported virtual machine images.",
      "description_length": 361,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway attachment data. It provides operations to convert between XML, JSON, and query string formats for use in API requests and responses. The module works specifically with lists of `TransitGatewayAttachment.t` values, enabling straightforward data transformation across different data formats.",
      "description_length": 370,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcPeeringConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing VPC peering connections, including filters, dry run flag, connection IDs, and pagination parameters. It provides functions to construct, parse, and serialize requests for querying AWS EC2 VPC peering connections. Use this module when configuring and sending describe requests to retrieve specific VPC peering connection details from AWS.",
      "description_length": 394,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `One_time` and `Persistent`, representing the behavior of spot instances in EC2. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. These operations support handling spot instance lifecycle configurations in API requests and responses.",
      "description_length": 364,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 volumes, including filters, volume IDs, and pagination options. It provides functions to construct, parse, and serialize requests for querying volume data. Use this module when building API calls to retrieve volume information from EC2, especially when applying filters or handling paginated results.",
      "description_length": 361,
      "index": 256,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptReservedInstancesExchangeQuoteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a Reserved Instances exchange quote, including optional dry-run validation. It works with reserved instance IDs and target configuration sets to facilitate EC2 instance exchanges. Use this when programmatically confirming a Reserved Instances trade using AWS EC2 APIs.",
      "description_length": 322,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupIds",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group IDs, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with `Aws.BaseTypes.String.t` lists and integrates directly with AWS API request and response handling. Use this module when constructing or interpreting EC2 API calls that require or return security group IDs.",
      "description_length": 372,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreManagedPrefixListVersionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for restoring a managed prefix list to a previous version in AWS EC2. It includes fields for dry run flag, prefix list ID, and version numbers, with operations to construct, parse, and serialize the request for API calls. It is used when rolling back a prefix list to a specific version while ensuring compatibility with existing rules and associations.",
      "description_length": 393,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying DNS support status of VPCs connected via ClassicLink. It includes fields for pagination (`max_results`, `next_token`) and a list of VPC IDs to check. The module provides functions to construct, serialize, and parse the request in various formats, including JSON and XML.",
      "description_length": 323,
      "index": 260,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 encryption algorithm request values for EC2. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of `Phase1EncryptionAlgorithmsRequestListValue.t`. It is used when configuring or modifying EC2 VPN connection options that require specifying encryption algorithms.",
      "description_length": 418,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client authentication methods in a VPN service, supporting options like Active Directory, mutual TLS certificates, federated identity, and authentication type selection. It provides constructors, serialization to JSON and query formats, and deserialization from XML and JSON for use in API requests and responses. Concrete use cases include building and parsing authentication configurations when managing AWS Client VPN endpoints via infrastructure-as-code tools or API clients.",
      "description_length": 532,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of launch template network interface specifications for EC2 instances. It provides functions to parse XML input into a list of network interface request objects, convert them to query parameters or JSON format, and construct such lists from JSON data. It is used when configuring network interfaces for EC2 instances via launch templates, particularly during instance creation or template updates.",
      "description_length": 423,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSubnetResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a subnet in EC2, primarily by encapsulating an optional `Subnet.t` value. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when processing responses from EC2 subnet creation operations, especially for interacting with AWS APIs or handling subnet metadata.",
      "description_length": 395,
      "index": 264,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSpotDatafeedSubscriptionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a Spot Datafeed subscription in EC2. It includes operations to construct, parse, and serialize the result, which contains an optional SpotDatafeedSubscription record. Use this module when managing Spot instance usage data subscriptions programmatically.",
      "description_length": 296,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachmentOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring VPC attachment options in a transit gateway, with fields to enable or disable DNS support, IPv6 support, and appliance mode. It provides functions to construct, serialize, and deserialize these options, enabling integration with AWS EC2 APIs through query parameters or JSON payloads. Concrete use cases include setting up transit gateway attachments with customized networking behaviors for VPCs.",
      "description_length": 450,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusEventList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance status events, providing operations to convert them to and from XML, JSON, and query formats. It works with the `InstanceStatusEvent.t` type, representing events associated with instance status changes. Use this module when processing or constructing event data for EC2 instance status responses in AWS API integrations.",
      "description_length": 362,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationInstancePlatform",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing different instance platforms for capacity reservations in EC2, including various Linux and Windows configurations with and without SQL Server editions. It provides functions to convert between string representations and type values, along with serialization and deserialization to JSON, query parameters, and XML. Use this module when specifying or interpreting capacity reservation platform types in API requests or responses.",
      "description_length": 471,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshot IDs represented as strings. It provides functions to convert, parse, and serialize these lists to and from JSON, XML, and query parameters. Use this module when working with AWS EC2 APIs that require multiple snapshot IDs in requests or responses.",
      "description_length": 289,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoints in AWS EC2, specifically capturing any unsuccessful deletions. It works with the `UnsuccessfulItemSet` type to represent endpoints that failed to delete. Concrete use cases include inspecting deletion results to identify and handle failed endpoint removals during batch operations.",
      "description_length": 338,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single integer value within a list of Phase 2 Diffie-Hellman group numbers. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. It is used when configuring or retrieving IPsec tunnel settings in EC2 Virtual Private Gateways.",
      "description_length": 346,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateIamInstanceProfileResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating an IAM instance profile from an EC2 instance. It includes operations to construct, parse, and serialize the result, which contains an optional IAM instance profile association. It is used when managing EC2 instance profiles through AWS API calls, specifically to represent the response data after disassociation.",
      "description_length": 361,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OfferingTypeValues",
      "library": "aws-ec2",
      "description": "This module defines a set of predefined offering type values for EC2 instances, including Heavy_Utilization, No_Upfront, and All_Upfront. It provides bidirectional conversion between these types and strings, JSON, and XML, enabling seamless integration with AWS API requests and responses. These functions are used when managing EC2 reserved instances, particularly in serialization and deserialization during API calls.",
      "description_length": 420,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `LowestPrice` and `Prioritized`, representing strategies for allocating on-demand instances. It includes functions to convert between strings and the variant type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to specify and manipulate allocation strategies in EC2 instance configurations and API requests.",
      "description_length": 442,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CidrBlockSet",
      "library": "aws-ec2",
      "description": "This module handles CIDR block sets for network configurations, providing functions to parse, convert, and serialize CIDR block lists. It works with lists of CIDR block values, supporting operations to transform them into query parameters, JSON, or XML. Use this module when managing EC2 network interfaces or VPC configurations that require CIDR block sets in API requests or responses.",
      "description_length": 387,
      "index": 275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing sets of local gateway route table virtual interface group associations. It operates on lists of `LocalGatewayRouteTableVirtualInterfaceGroupAssociation.t` values through functions like `parse`, `to_query`, `to_json`, and `of_json`. It is used when managing EC2 local gateway route table associations in AWS, particularly for interacting with the EC2 API and processing responses involving virtual interface groups.",
      "description_length": 469,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteTableResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a route table in EC2, encapsulating an optional route table. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when managing route tables in EC2 to handle creation responses and interact with AWS APIs.",
      "description_length": 364,
      "index": 277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnEcmpSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Enable` and `Disable`, representing ECMP support settings for a VPN connection. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization to JSON, query parameters, and XML. It is used to configure and interpret ECMP support status in AWS EC2 VPN connection APIs.",
      "description_length": 373,
      "index": 278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of resetting an FPGA image attribute, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result for use in API responses, specifically handling XML, JSON, and query parameter formats. It is used when processing the outcome of EC2 FPGA image attribute reset operations.",
      "description_length": 390,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing flow logs in EC2, supporting filtering by log IDs and custom query parameters like pagination and result limits. It includes functions to construct, parse, and serialize requests in JSON, query string, and XML formats. Concrete use cases include querying flow log data for network traffic analysis and integrating with AWS API calls for log management.",
      "description_length": 407,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchasedScheduledInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of scheduled EC2 instances. It provides functions to convert between XML, JSON, and query string formats, specifically for working with sets of scheduled instances. Use this module when interacting with AWS EC2 APIs that require or return scheduled instance data in different wire formats.",
      "description_length": 372,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MovingAddressStatusSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of moving address status entries. It provides functions to convert between XML, JSON, and query string representations of these lists, specifically working with `MovingAddressStatus.t` elements. It is used when managing IP address movements in EC2, such as tracking the status of elastic IP addresses across instances.",
      "description_length": 401,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeStaleSecurityGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing stale security groups in a VPC. It includes fields to specify the VPC ID, limit results, and control pagination, along with operations to construct, parse, and serialize the request to JSON or query parameters. It is used when querying AWS EC2 to identify security groups that are no longer in use within a specific VPC.",
      "description_length": 377,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering instance event notification attributes in EC2. It works with XML, JSON, and query parameter formats, providing functions to construct, parse, and convert the result data. Use it when configuring event notifications for EC2 instances using tags.",
      "description_length": 290,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGatewayList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of customer gateway lists in EC2. Works with XML nodes, JSON values, and query parameters. Used to process customer gateway data from AWS API responses and format requests.",
      "description_length": 219,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetPasswordDataResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of retrieving password data from an EC2 instance. It includes functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Concrete use cases include retrieving and managing Windows instance passwords in AWS EC2 workflows.",
      "description_length": 350,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 Reserved Instances modifications. It works with XML nodes, JSON values, and query parameters to convert between internal structures and AWS-compatible formats. Use it to process responses from or prepare requests to the EC2 API related to Reserved Instances modifications.",
      "description_length": 340,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusDetailsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of volume status details. It provides functions to convert between XML, JSON, and query string representations of this list. Use this module when processing EC2 volume status responses or building requests that include volume status information.",
      "description_length": 328,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to deleting queued Reserved Instances in EC2. It includes functions to create, parse, and serialize error objects, supporting operations like converting to and from JSON and query formats. It is used when managing Reserved Instance cancellations that fail, providing structured error details like code and message.",
      "description_length": 379,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EndpointSet",
      "library": "aws-ec2",
      "description": "This module handles the creation, parsing, and serialization of lists of ClientVpnEndpoint values. It provides functions to convert endpoint lists to and from XML, JSON, and query formats. Use this module when working with AWS EC2 Client VPN endpoints in API requests and responses.",
      "description_length": 282,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of traffic mirror filter objects. It provides functions to convert between XML, JSON, and query string representations of traffic mirror filters, as well as a `make` function for constructing filter lists. It is used when configuring or retrieving traffic mirror filters in EC2, particularly when working with VPC traffic mirroring rules.",
      "description_length": 421,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a route table with a subnet or gateway in EC2. It includes fields for the route table ID, optional subnet ID, optional gateway ID, and a dry-run flag. Operations allow constructing, parsing, and converting the request to query or JSON formats for API interaction.",
      "description_length": 319,
      "index": 292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceEventStartTimeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the start time of an EC2 instance event. It includes fields for dry run flag, instance ID, event ID, and new start time, along with functions to construct, parse, and serialize the request for API calls. It is used when rescheduling planned maintenance or reboot events for EC2 instances.",
      "description_length": 342,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignIpv6AddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of assigning IPv6 addresses to an EC2 network interface. It provides operations to create, parse, and serialize results containing assigned IPv6 addresses and the associated network interface ID. Use cases include processing responses from AWS EC2 API calls that modify IPv6 address assignments on network interfaces.",
      "description_length": 348,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneMessage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling availability zone messages in AWS EC2, with operations to create, parse, and serialize the structure to query parameters, JSON, and XML. It works with optional string messages embedded in an availability zone context. Concrete use cases include processing and transmitting availability zone metadata in API requests and responses.",
      "description_length": 380,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeprovisionByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deprovisioning a BYOIP CIDR block, including the CIDR string and an optional dry-run flag. It provides functions to create, parse, and convert the request to query parameters or JSON format, as well as to construct a request from JSON. It is used when interacting with EC2 APIs to release custom IP ranges, typically during resource cleanup or network reconfiguration.",
      "description_length": 412,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of delete fleet error items. It provides operations to convert between XML, JSON, and query string representations of these error lists. It is used when processing batch deletion errors from EC2 fleets, allowing structured access to individual error items.",
      "description_length": 339,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an image import operation in EC2, containing fields like image ID, import task ID, status, and associated snapshot details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from EC2 image import tasks, particularly for tracking progress, retrieving generated image IDs, or inspecting task status and encryption settings.",
      "description_length": 486,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a virtual private gateway in AWS EC2, including the gateway ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. Use this module when interacting with the EC2 API to delete a VpnGateway, particularly for preparing and validating API requests before execution.",
      "description_length": 415,
      "index": 299,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in EC2 launch templates. It includes fields for controlling the state, HTTP tokens requirement, HTTP PUT response hop limit, and HTTP endpoint availability. These configurations are used when setting up or modifying EC2 instances to enforce metadata security and access policies.",
      "description_length": 358,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayVpcAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 transit gateway VPC attachments, including optional filters, result limits, and pagination tokens. It supports operations to serialize and deserialize the request to and from JSON, query parameters, and XML input. Use this module when making API calls to describe transit gateway VPC attachments with customizable filtering and pagination.",
      "description_length": 400,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing disk image details, including its size in bytes, format, and import manifest URL. It provides functions to construct, parse, and serialize disk image details to and from XML, JSON, and query formats. It is used when importing disk images into EC2, such as handling virtual machine image metadata during instance setup.",
      "description_length": 370,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentResourceType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing resource types for transit gateway attachments in AWS EC2, including VPCs, VPNs, Direct Connect gateways, peering connections, and TGW peering. It provides bidirectional conversions between the type and strings, JSON, and query parameters, ensuring consistent serialization and deserialization. These functions are used when configuring or querying transit gateway attachments using the AWS SDK for OCaml.",
      "description_length": 449,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PoolCidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing CIDR blocks within a pool, primarily used for handling IP address ranges in network configurations. It includes functions to construct, parse, and convert CIDR block data to and from query parameters, JSON, and XML formats. Concrete use cases include managing subnet allocations and IP range definitions in cloud networking services.",
      "description_length": 383,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcIpv6CidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of IPv6 CIDR block associations for VPCs. It operates on lists of VpcIpv6CidrBlockAssociation.t values, supporting conversion to and from XML, JSON, and query formats. It is used when managing or inspecting IPv6 address ranges associated with virtual private clouds in AWS EC2.",
      "description_length": 338,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEbsBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS block device configuration for EC2 instances, with optional fields for encryption, deletion behavior, IOPS, KMS key, snapshot, volume size, and volume type. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring EBS volumes for EC2 instance launches, particularly when setting up persistent storage with specific performance and security settings.",
      "description_length": 493,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrincipalIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying principal ID format settings in EC2, supporting operations to configure pagination and resource filtering. It works with boolean, integer, string, and resource list types to specify API call parameters. Use this module to construct and manipulate requests when retrieving identity format information for specific resources like instances or volumes.",
      "description_length": 402,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnassignIpv6AddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for unassigning IPv6 addresses from a network interface. It includes operations to create, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with IPv6 address lists and string identifiers, specifically targeting EC2 network interface management tasks.",
      "description_length": 346,
      "index": 308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 traffic mirror filter rules, including fields like rule action, port ranges, CIDR blocks, and metadata. It provides functions to construct, parse, and serialize these requests for use with AWS API calls. Use this module when configuring or updating traffic mirroring rules in EC2 environments.",
      "description_length": 348,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RuleAction",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 rule actions with two variants: `Allow` and `Deny`. It provides bidirectional conversions between strings and the `t` type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include processing and validating EC2 security group rules in AWS API requests and responses.",
      "description_length": 367,
      "index": 310,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network ACL IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when working with AWS EC2 operations that require multiple network ACL IDs, such as batch deletions or associations.",
      "description_length": 325,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancers",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of Classic Load Balancer data structures in EC2. Works with lists of ClassicLoadBalancer records, converting between XML, JSON, and query formats. Used when managing load balancer configurations via AWS SDK calls or parsing API responses.",
      "description_length": 280,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportClientVpnClientCertificateRevocationListRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing a client certificate revocation list into a Client VPN endpoint. It includes fields for the endpoint ID, the revocation list, and an optional dry-run flag. Operations allow creating, parsing, and converting the structure to query or JSON formats for API requests.",
      "description_length": 314,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedTargetNetworkSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 associated target network data. Works with lists of `AssociatedTargetNetwork.t` values, converting them to and from XML, JSON, and query formats. Useful for processing responses and requests in EC2 API interactions involving target network associations.",
      "description_length": 302,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC endpoints with fields to control policies, routing, subnets, security groups, and DNS settings. It provides functions to construct, parse, and serialize these requests for use in API calls to AWS EC2. Operations include setting optional boolean flags, string identifiers, and lists of associated resources.",
      "description_length": 364,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of security group strings in AWS EC2 operations. It provides functions to convert, parse, and serialize string lists to and from XML, JSON, and query formats. Use it when working with security group identifiers in EC2 requests and responses.",
      "description_length": 267,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving associations of a managed prefix list in AWS EC2. It includes fields for optional dry run, prefix list ID, pagination controls, and provides functions to construct, parse, and serialize the request to query or JSON formats. It is used when querying for subnet or resource associations linked to a specific managed prefix list.",
      "description_length": 381,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for attaching an internet gateway to a VPC in AWS EC2. It includes fields for a dry run flag, internet gateway ID, and VPC ID, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring network connectivity by associating an internet gateway with a specific VPC.",
      "description_length": 354,
      "index": 318,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 network interfaces, supporting operations to filter by interface IDs or criteria, with optional pagination and dry-run functionality. It works with AWS-specific types including filter lists, network interface ID lists, and standard AWS primitives like boolean, string, and integer. Concrete use cases include querying network interface details for monitoring, managing VPC configurations, or auditing security group associations.",
      "description_length": 490,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating network ACL entries in AWS EC2, including fields such as CIDR block, protocol, and rule action. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this module when configuring network access rules for EC2 subnets, such as allowing or denying specific traffic based on IP, port, or protocol.",
      "description_length": 399,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a Traffic Mirror filter rule, including the rule ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring or managing Traffic Mirror sessions in virtual networking environments.",
      "description_length": 335,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceMemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for FPGA device memory information, specifically capturing the size in MiB as an optional integer. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling FPGA memory details in EC2 instance configurations or device reports.",
      "description_length": 346,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateAddressResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of allocating an Elastic IP address in EC2, including fields like public IP, allocation ID, and domain type. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling IP allocation responses from AWS and converting them to and from JSON or query formats for further processing.",
      "description_length": 423,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Traffic Mirror filter rule in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional updated Traffic Mirror filter rule. Use this module when processing responses from EC2 API calls that modify Traffic Mirror rules, particularly for integrating with XML or JSON APIs.",
      "description_length": 363,
      "index": 324,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcPeeringConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC peering connections, including a list of connections and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API requests and responses. Use this module when working with AWS EC2 VPC peering connection listings that require pagination support.",
      "description_length": 350,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SelfServicePortal",
      "library": "aws-ec2",
      "description": "This module defines a simple enumeration with two states, `Enabled` and `Disabled`, representing the self-service portal setting for an EC2 resource. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON and query formats. This module is used when configuring or querying EC2 instance settings that involve enabling or disabling the self-service portal feature.",
      "description_length": 449,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of load permissions for EC2 images. It provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON values. It works specifically with lists of `LoadPermission.t` structures, enabling management of image sharing permissions in AWS EC2.",
      "description_length": 306,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 capacity reservations, including fields like reservation ID, instance count, end date, and dry run flag. It provides functions to construct, parse, and serialize these requests in various formats such as JSON and query strings. Concrete use cases include updating the number of instances in a reservation or changing its end date configuration.",
      "description_length": 399,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when managing AWS EC2 transit gateway connections, particularly for validating and submitting peering attachment acceptance.",
      "description_length": 384,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateIamInstanceProfileRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to disassociate an IAM instance profile from an EC2 instance. It includes operations to construct the request, parse it from XML, convert it to query parameters or JSON, and construct it from JSON. It is used when managing IAM instance profile associations in EC2 instances programmatically.",
      "description_length": 353,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing network interface permissions, including optional fields for permission IDs, filters, pagination token, and result limit. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when querying network interface permissions with specific filters or pagination controls.",
      "description_length": 388,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PriceSchedule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing price schedules with optional boolean, currency code, double, and long values. It provides functions to construct, parse, and convert price schedule data to and from XML, JSON, and query formats. It is used to manage pricing information for EC2 resources, such as reserved instances, in AWS operations.",
      "description_length": 356,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSubnetsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 subnets, including a list of subnets and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing subnet responses in AWS EC2, especially for paginated results.",
      "description_length": 320,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating a transit gateway route table, containing an optional transit gateway association. It provides constructors, JSON and XML parsers, and query builders for working with the association data. Use this module when managing transit gateway route table associations in AWS EC2, particularly for serializing and deserializing API responses.",
      "description_length": 379,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostRecovery",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `On` and `Off`, representing host recovery settings. It includes functions to convert between strings and the variant type, serialize to and from JSON and query formats, and parse from XML nodes. This module is used to configure host recovery behavior for EC2 instances, such as enabling or disabling automatic recovery actions.",
      "description_length": 392,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetReservationValueSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of target reservation value types. It provides functions to convert between XML, JSON, and query formats, specifically for working with EC2 target reservation values. Use this module when processing AWS EC2 reservation responses or building requests that involve target reservation values.",
      "description_length": 372,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeClientVpnIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking client VPN ingress in EC2, including fields like client endpoint ID, target CIDR, and optional access group or global revocation flags. It provides functions to construct, serialize, and parse these requests in formats like JSON and query strings. Concrete use cases include managing access control for client VPNs by removing specific CIDR-based permissions or revoking access for all groups.",
      "description_length": 446,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RootDeviceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 root device types, providing operations to convert, parse, and serialize them for use in queries and JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interactions with the EC2 API. Use cases include processing API responses containing root device type lists and constructing requests with those values.",
      "description_length": 369,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing ClassicLink DNS support settings in EC2, with fields indicating whether DNS support is enabled and the associated VPC ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include configuring and retrieving ClassicLink DNS settings for EC2 instances linked to a VPC.",
      "description_length": 396,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachNetworkInterfaceResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of attaching a network interface, containing optional identifiers for the attachment and network card index. It provides functions to construct, parse, and convert the structure to query parameters, JSON, or XML. Use this module when handling EC2 network interface attachment responses to manage metadata about the attachment process.",
      "description_length": 395,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProcessorInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for processor information, including supported architectures and optional sustained clock speed. It provides functions to create, parse, and convert processor data to query parameters or JSON format. Use this module when handling EC2 instance metadata or configuring instance types with specific processor requirements.",
      "description_length": 356,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayMulticastDomainAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving associations of a transit gateway multicast domain, including optional filters, pagination, and dry run parameters. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include querying multicast domain associations with specific filters or pagination settings.",
      "description_length": 388,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptionsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 DHCP options by providing operations to convert them to and from XML, JSON, and query formats. It works with lists of `DhcpOptions.t` structures, enabling serialization and deserialization for API interactions. Use this module when processing EC2 DHCP options responses or preparing requests to configure VPC DHCP options.",
      "description_length": 355,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDhcpOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure to represent the result of creating DHCP options in EC2, containing an optional DHCP options object. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used when interacting with AWS EC2 to create and manage network configuration options for VPCs.",
      "description_length": 363,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing the attachment status of an EC2 resource, with variants for attaching, attached, detaching, and detached states. It includes functions to convert between string representations and the type, as well as serialization to and from JSON, query parameters, and XML. These operations support handling attachment state in API requests and responses, such as when managing network interfaces or volumes in AWS EC2.",
      "description_length": 450,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoints, including an optional dry-run flag and a list of VPC endpoint IDs. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when issuing deletion commands for VPC endpoints in EC2, particularly when integrating with AWS SDK workflows.",
      "description_length": 352,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeEgressOnlyInternetGatewaysResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing egress-only internet gateways in AWS EC2, containing a list of gateways and an optional pagination token. It provides functions to construct, serialize, and convert the result to and from JSON and XML formats. It is used when handling responses from the EC2 API for listing egress-only internet gateways with support for paginated results.",
      "description_length": 387,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an instance import request in EC2, including fields like description, disk images, platform, and optional launch specifications. It provides functions to construct, serialize, and parse these requests, specifically working with types like `DiskImageList`, `PlatformValues`, and `ImportInstanceLaunchSpecification`. Concrete use cases include preparing and submitting virtual machine imports to AWS EC2 with specified configurations and disk mappings.",
      "description_length": 502,
      "index": 348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConversionIdStringList",
      "library": "aws-ec2",
      "description": "This module handles conversion of string lists to and from various data formats used in AWS EC2 operations. It provides functions to parse XML nodes into a list of strings, serialize string lists to query parameters or JSON, and extract string lists from JSON values. It is used when handling repeated string fields in EC2 API requests and responses, such as lists of IDs or tags.",
      "description_length": 380,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserGroupStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing user groups in EC2 configurations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. It is used when working with EC2 API operations that require specifying user groups, such as security group rules or IAM role associations.",
      "description_length": 355,
      "index": 350,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a transit gateway multicast domain, primarily working with the `t` type that contains optional multicast domain associations. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Concrete use cases include handling AWS EC2 API output when managing multicast domain associations in transit gateways.",
      "description_length": 410,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VirtualizationTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 virtualization types, providing operations to convert them to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing from JSON values. Use this module when working with EC2 API requests and responses that involve multiple virtualization type values.",
      "description_length": 321,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway prefix list reference, including fields like route table ID, prefix list ID, state, and attachment details. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this module when managing EC2 transit gateway route propagation or prefix list associations in AWS.",
      "description_length": 385,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointServiceConfigurationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC endpoint service configuration, containing the service configuration and an optional client token. It provides functions to construct, parse, and serialize the result for use in queries or JSON responses. Use this module when managing VPC endpoint service configurations in AWS EC2, particularly for handling API responses and ensuring idempotency with client tokens.",
      "description_length": 416,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with one variant `LoadPermission`, representing attributes that can be reset for an EC2 FPGA image. It includes functions to convert between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used specifically when modifying permissions associated with FPGA images in AWS EC2.",
      "description_length": 405,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointRouteTableIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of route table IDs for VPC endpoints in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing route table associations for VPC endpoints, such as when creating or modifying VPC endpoint configurations.",
      "description_length": 321,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the address information of a NAT gateway, with optional fields for allocation ID, network interface ID, private IP, and public IP. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and from JSON. Concrete use cases include managing NAT gateway configurations in AWS EC2 and serializing/deserializing address data for API requests and responses.",
      "description_length": 440,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 connection notifications. It provides functions to convert between XML, JSON, and query formats, specifically working with lists of connection notification records. Use this module when processing AWS EC2 events related to VPC endpoints or NAT gateways, such as handling notifications from SNS topics.",
      "description_length": 381,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceCreditSpecificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying credit specifications of EC2 instances, supporting filtering by instance IDs and custom result limits. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving credit usage details for specific instances or paginating through large result sets using `max_results` and `next_token`.",
      "description_length": 422,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FilterList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 filters, providing operations to convert them to and from JSON and query parameters. It supports parsing filter lists from XML nodes and constructing them from JSON values. Use this module when working with AWS EC2 API requests that require filtering resources like instances or volumes based on specific criteria.",
      "description_length": 347,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6Pool",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing IPv6 address pools, including their identifiers, descriptions, CIDR blocks, and associated tags. It provides functions to construct, serialize, and parse these structures in various formats such as JSON, query parameters, and XML. Use cases include handling IPv6 pool configurations in EC2 when creating or modifying VPC resources.",
      "description_length": 381,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkAclsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing network ACLs in EC2, providing constructors, JSON and XML conversions, and query parameter serialization. It works with network ACL lists and optional pagination tokens. Use it to process and serialize responses when retrieving network ACL configurations from AWS EC2.",
      "description_length": 313,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionedBandwidth",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking bandwidth provisioning details, including timestamps and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance bandwidth provisioning information, such as handling API responses or configuring network resources.",
      "description_length": 369,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleOutputResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 console output retrieval, including the instance ID, output content, and timestamp. It provides functions to construct, parse, and convert the data to and from JSON and query formats. It is used to process and transmit EC2 console output responses in AWS interactions.",
      "description_length": 339,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAccelerator",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying elastic inference accelerators in an EC2 launch template, including their type and optional count. It provides functions to construct, serialize, and parse these accelerators to and from JSON, query parameters, and XML. Use this module when configuring EC2 instances with attached inference accelerators for machine learning workloads.",
      "description_length": 387,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportToS3TaskSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 disk image export tasks to S3, including container format, disk image format, and S3 bucket and prefix. It provides functions to construct, parse, and serialize these specifications for use in API requests. Concrete use cases include configuring and submitting disk export tasks to AWS EC2 via the S3 storage interface.",
      "description_length": 375,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EbsBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS block device configuration for EC2 instances, with optional fields like volume size, type, encryption, and snapshot ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query parameters. Concrete use cases include configuring EC2 instance storage during instance launch or modifying EBS volumes in API requests.",
      "description_length": 417,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseSpecificationListResponse",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of import image license configurations in AWS EC2. Works with XML nodes and JSON values to convert between internal OCaml types and external data formats. Useful for managing license configurations when importing images in EC2 environments.",
      "description_length": 289,
      "index": 368,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the successful output of disabling fast snapshot restore in EC2. It provides functions to parse, convert to query format, and serialize to and from JSON a list of success items. The primary data type is a list of `DisableFastSnapshotRestoreSuccessItem.t`, representing individual results from the operation. It is used when processing responses from AWS EC2 after disabling fast snapshot restore on specific snapshots.",
      "description_length": 438,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DatafeedSubscriptionState",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the state of a datafeed subscription, with values `Active` or `Inactive`. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. It is used to manage state transitions and serializations for datafeed configurations in EC2.",
      "description_length": 320,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCoipPoolUsageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving usage information about a specific CoIP pool in AWS EC2. It includes fields such as `pool_id`, `filters`, `max_results`, and `next_token` to customize and paginate the query. The module provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters, enabling direct interaction with the EC2 API to fetch usage data for monitoring or reporting purposes.",
      "description_length": 465,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 reserved instances, including their IDs, optional client token, and target configurations. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when adjusting the configuration of existing reserved instances in EC2, such as changing instance type or availability zone.",
      "description_length": 389,
      "index": 372,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseRequestSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of EC2 purchase requests. It works with lists of purchase request records, supporting conversion to and from XML, JSON, and query parameters. Use it when processing spot instance purchase requests in AWS EC2 APIs.",
      "description_length": 271,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LastError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling error information with optional message and code fields. It provides functions to create, parse, and convert error data to and from XML, JSON, and query formats. It is used to represent and process errors returned by EC2 API operations, such as failed instance launches or configuration issues.",
      "description_length": 344,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceStatusResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 instance statuses, containing a list of instance statuses and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when handling responses from the EC2 `DescribeInstanceStatus` API call, particularly for processing and paginating through instance health information.",
      "description_length": 435,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fast snapshot restore state operations in EC2. It provides functions to create, parse, and serialize error objects that contain an optional error code and message. These operations are used when interacting with EC2 snapshot restore APIs to manage and respond to error conditions programmatically.",
      "description_length": 365,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in EC2 scheduled instances, with optional ARN and name fields. It provides functions to construct, serialize, and parse these profiles to and from JSON, query parameters, and XML. Concrete use cases include configuring IAM roles for scheduled EC2 instances and handling AWS API requests and responses involving instance profiles.",
      "description_length": 403,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTargetResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling capacity reservation targets in EC2 responses, with optional fields for capacity reservation ID and resource group ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include processing EC2 API responses and building requests that reference capacity reservations or their associated resource groups.",
      "description_length": 432,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing disk information with optional fields for size in gigabytes, count, and disk type. It provides functions to construct instances, parse from XML nodes, convert to query parameters, and serialize to and from JSON. It is used to configure or describe disk specifications in EC2 instance types or block device mappings.",
      "description_length": 367,
      "index": 379,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 export task lists. It provides functions to convert between XML, JSON, and query string formats, specifically for lists of export tasks. Use this module when processing responses or constructing requests involving multiple EC2 export tasks.",
      "description_length": 308,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableVolumeIORequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling I/O operations on an EC2 volume, containing a volume ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this when preparing or handling EC2 volume I/O enablement operations, particularly for interacting with AWS's API directly.",
      "description_length": 357,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of public IP addresses as strings. It provides functions to convert, parse, and serialize these lists to and from JSON, XML, and query parameters. Use it when working with EC2 instance public IPs in API requests or responses.",
      "description_length": 251,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 volume, primarily working with the `t` record that contains an optional `VolumeModification` object. It provides functions to construct, parse, and serialize this result into formats like JSON and query strings. Use this module when processing responses from volume modification operations in AWS EC2, such as tracking volume size or performance changes.",
      "description_length": 405,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling fast snapshot restores in EC2, including availability zones, source snapshot IDs, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring snapshot restore settings for specific regions and testing configurations without applying changes.",
      "description_length": 400,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing attributes of an EC2 network interface, such as `Description`, `GroupSet`, `SourceDestCheck`, and `Attachment`. It includes functions to convert between string representations and the variant type, as well as serialization and deserialization to JSON and query formats. It is used when configuring or querying specific network interface properties in EC2 operations like modifying or describing network interfaces.",
      "description_length": 474,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ApplySecurityGroupsToClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module handles the result of applying security groups to a Client VPN target network, primarily working with a set of security group IDs. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Concrete use cases include processing AWS API responses and building requests to update security group associations for Client VPN endpoints.",
      "description_length": 409,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DefaultRouteTablePropagationValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing route table propagation states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to configure route table propagation behavior in EC2 VPC route tables.",
      "description_length": 381,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceIamInstanceProfileAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of replacing an IAM instance profile association in EC2. It includes a single optional IAM instance profile association field, along with functions to construct, parse, and serialize the result to query parameters or JSON. It is used when modifying instance profile associations on EC2 instances via the AWS SDK.",
      "description_length": 343,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagDescriptionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tag descriptions, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and AWS query parameters. Use this module when managing EC2 resource tags in AWS API requests and responses.",
      "description_length": 284,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModificationList",
      "library": "aws-ec2",
      "description": "This module represents a list of volume modification records from EC2. It provides functions to convert the list to and from XML, JSON, and query formats, enabling interaction with AWS APIs. It is used when tracking or responding to volume modification events in EC2.",
      "description_length": 267,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying market options when launching EC2 instances, supporting both spot instances and optional market types. It includes functions to construct, serialize, and parse these options, enabling precise control over instance purchasing models in AWS EC2 launch templates. Use cases include configuring cost-optimized spot instance requests and handling market-specific instance launch parameters.",
      "description_length": 437,
      "index": 391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume status items, providing operations to convert them to and from XML, JSON, and query formats. It works with lists of `VolumeStatusItem.t` values, supporting serialization, deserialization, and API request/response handling. Use this module when processing EC2 volume status data from AWS API calls or when constructing requests that require volume status information.",
      "description_length": 406,
      "index": 392,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPairList",
      "library": "aws-ec2",
      "description": "This module handles lists of user ID group pairs for EC2 security group rules. It provides operations to convert these lists to and from JSON and query formats, and includes a placeholder `make` function that returns its input unchanged. It is used to manage associations between user IDs and security groups when configuring or querying EC2 instance permissions.",
      "description_length": 363,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceDetailSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of EC2 service detail lists. Works with XML nodes, JSON values, and query parameters to transform service detail data. Used when retrieving and processing VPC endpoint service configurations from AWS EC2 responses.",
      "description_length": 261,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptReservedInstancesExchangeQuoteResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of accepting a Reserved Instances exchange quote, containing an optional exchange ID. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from EC2 when finalizing Reserved Instance exchanges.",
      "description_length": 378,
      "index": 395,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BillingProductList",
      "library": "aws-ec2",
      "description": "This module handles lists of billing product codes in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with billing product information in API requests or responses.",
      "description_length": 283,
      "index": 396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolRangeSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of public IPv4 pool ranges in AWS EC2. It works with lists of `PublicIpv4PoolRange.t` structures, providing functions to convert to and from XML, JSON, and query parameters. Use this module when managing IP address ranges for EC2 public IPv4 pools in AWS.",
      "description_length": 328,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing FPGA image attributes, including fields for dry-run checks, FPGA image ID, and attribute name. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when querying specific attributes of FPGA images, such as permissions or descriptions, in AWS environments.",
      "description_length": 379,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an IAM instance profile association, including fields like association ID, instance ID, IAM profile, state, and timestamp. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance associations with IAM roles, such as during instance launch or profile reconfiguration.",
      "description_length": 414,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AttributeBooleanValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling optional boolean values, primarily used in EC2 attribute operations. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include representing and serializing optional boolean attributes in EC2 API requests and responses, such as instance or volume properties.",
      "description_length": 387,
      "index": 400,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 reserved instances, containing a list of `ReservedInstances` data. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when handling responses from the EC2 API related to reserved instance descriptions, such as processing or inspecting reservation details returned by AWS.",
      "description_length": 412,
      "index": 401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway route table with fields for identifiers, state, association and propagation flags, creation time, and tags. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing route table configurations in AWS EC2, particularly when creating, updating, or inspecting transit gateways and their associated routing behavior.",
      "description_length": 469,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status details in EC2, including optional name and status fields. It provides functions to construct, parse, and convert these details to and from JSON and query formats. It is used to handle volume status information returned by EC2 API calls, such as volume status checks.",
      "description_length": 335,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting queued Reserved Instances in EC2, including a dry run flag and a list of Reserved Instance IDs. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include managing Reserved Instance cancellations before they take effect.",
      "description_length": 338,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InternetGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Internet Gateway in AWS EC2, including its attachments, ID, owner ID, and tags. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing Internet Gateway configurations and serializing them for API requests or responses.",
      "description_length": 363,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to check the default EBS encryption state, with an optional `dry_run` boolean field. It provides functions to construct, parse, and serialize the request in various formats including JSON, query parameters, and XML. Use this module when interacting with AWS EC2 to retrieve the current default encryption setting for EBS volumes in a region.",
      "description_length": 407,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostOfferingSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of EC2 host offerings. It works with lists of `HostOffering.t` values, supporting operations like XML parsing, JSON and query parameter conversion. It is used when interacting with AWS EC2 APIs to retrieve and process host offering data.",
      "description_length": 302,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a specification for launching EC2 scheduled instances, including configuration details like block device mappings, network interfaces, and instance metadata. It provides functions to construct, serialize, and deserialize these specifications for use in API requests or configuration management. Concrete use cases include defining instance templates for scheduled scaling or batch processing jobs in AWS EC2.",
      "description_length": 428,
      "index": 408,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdSet",
      "library": "aws-ec2",
      "description": "This module represents a list of EC2 instance IDs as a string list. It provides functions to convert instance IDs to and from JSON and query parameters, and to parse them from XML. Use this module when handling batch operations on EC2 instances, such as starting, stopping, or describing multiple instances.",
      "description_length": 307,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceSpecificationList",
      "library": "aws-ec2",
      "description": "Handles the creation, parsing, and conversion of lists of EC2 instance network interface specifications. Works with XML nodes, JSON values, and query parameters to facilitate the configuration of network interfaces in Amazon EC2 instances. Useful when launching or modifying EC2 instances with custom network interface settings.",
      "description_length": 328,
      "index": 410,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RIProductDescription",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing product descriptions for EC2 reserved instances, including variants for Linux/UNIX and Windows systems, with and without Amazon VPC. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. The module is used to specify and handle product descriptions when managing EC2 reserved instance configurations and API requests.",
      "description_length": 450,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an AWS Client VPN endpoint, including configuration details like network settings, authentication options, and connection logs. It provides functions to construct, parse, and serialize endpoint data for use in API requests and responses. Concrete use cases include managing Client VPN endpoint creation, retrieving endpoint status, and configuring network associations in AWS EC2.",
      "description_length": 430,
      "index": 412,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template tag specifications. It works with lists of `LaunchTemplateTagSpecification.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving tags for EC2 instances at launch time, particularly in AWS SDK interactions.",
      "description_length": 364,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for the result of registering an EC2 image, containing an optional image ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from the EC2 API after registering a custom machine image.",
      "description_length": 323,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReferenceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway prefix list reference, with values like `Pending`, `Available`, `Modifying`, and `Deleting`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON, query parameters, and XML. These operations support handling state values when interacting with AWS EC2 APIs, particularly for managing transit gateway route tables.",
      "description_length": 484,
      "index": 415,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a managed prefix list with fields for identifiers, state, version, and metadata. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing AWS EC2 prefix lists, particularly for serialization, deserialization, or programmatic manipulation of prefix list configurations.",
      "description_length": 402,
      "index": 416,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifier",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 security group identifiers, with optional `group_name` and `group_id` fields. It provides functions to construct, parse, and serialize group identifiers to and from XML, JSON, and query formats. Use this module when working with EC2 API operations that require specifying security groups by name or ID, such as launching instances or configuring network interfaces.",
      "description_length": 423,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnSecurityGroupIdSet",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of a list of security group IDs for use in AWS EC2 client VPN operations. It provides functions to parse, serialize, and convert string lists to query parameters or JSON representations. Concrete use cases include preparing security group ID lists for API requests and parsing responses from AWS services.",
      "description_length": 357,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume data by providing functions to convert, parse, and query volume information. It works with XML nodes, JSON values, and query parameters to facilitate interactions with AWS EC2 volume data. Use cases include processing API responses, building requests, and transforming volume lists between different data formats.",
      "description_length": 353,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostList",
      "library": "aws-ec2",
      "description": "This module defines a list of EC2 host types and provides functions to convert between XML, JSON, and query string representations. It supports parsing host data from XML nodes and serializing host lists into query parameters or JSON arrays. Concrete use cases include handling responses from EC2 API calls that return multiple hosts, such as listing dedicated hosts or managing host reservations.",
      "description_length": 397,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewaySet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of local gateway data structures. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 local gateway information. Use this module when processing API responses or constructing requests involving local gateways in AWS EC2.",
      "description_length": 366,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestHistoryResponse",
      "library": "aws-ec2",
      "description": "This module handles responses from describing the history of a Spot Fleet request in AWS EC2. It includes operations to construct, parse, and serialize response data containing historical records, timestamps, and pagination tokens. Use this module when retrieving and processing event history for Spot Fleet requests, such as tracking instance launch failures or capacity changes over time.",
      "description_length": 390,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupSourcesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering multicast group sources in a transit gateway, supporting operations to configure and serialize parameters like multicast domain ID, group IP address, and network interface IDs. It works with string, boolean, and list types, specifically tailored for EC2 transit gateway multicast management. Use this module to construct and process API requests when removing multicast sources from a transit gateway domain.",
      "description_length": 466,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StatusName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with a constructor `Reachability`, representing status names in a system. It includes conversions to and from strings, JSON, and query formats, as well as parsing from XML. It is used to standardize and serialize status values, particularly for handling reachability status in a structured format.",
      "description_length": 346,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure describing EC2 instance type attributes and capabilities, including processor, memory, storage, and networking details. It provides functions to construct, parse, and serialize instance type information for use in querying or configuring EC2 instances. Concrete use cases include retrieving metadata about available instance types and building custom instance selection logic based on hardware or feature requirements.",
      "description_length": 455,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from a local gateway route table in EC2. It includes operations to construct, serialize, and parse route deletion requests using CIDR blocks and route table identifiers. It is used when managing virtual private cloud (VPC) routing configurations through AWS API interactions.",
      "description_length": 336,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnclaveOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for enclave options with a single optional boolean field indicating whether enclaves are enabled. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. Use this module when configuring EC2 instance enclave settings, such as enabling secure enclaves for confidential computing workloads.",
      "description_length": 374,
      "index": 427,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ThreadsPerCoreList",
      "library": "aws-ec2",
      "description": "This module handles lists of integers representing threads per core configurations. It provides functions to parse, convert to query format, and serialize to and from JSON. Use this module when working with EC2 instance threading settings in API requests or responses.",
      "description_length": 268,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachClassicLinkVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for detaching a VPC from a classic-linked EC2 instance, including fields for dry-run checks, instance ID, and VPC ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when managing VPC associations for EC2 instances in AWS environments.",
      "description_length": 352,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstancePlacementRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 instance placement, supporting fields like affinity, host ID, and tenancy. It provides functions to construct, parse, and serialize placement modification requests, targeting EC2 instance management workflows. Use cases include adjusting instance placement settings when migrating workloads or optimizing resource allocation in AWS environments.",
      "description_length": 403,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EbsInstanceBlockDeviceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EBS block device configurations, including whether to delete the volume on instance termination and the volume ID. It provides functions to construct, serialize, and parse these specifications in various formats such as JSON and query strings. It is used when configuring EC2 instance block devices, particularly for managing EBS volumes during instance lifecycle events.",
      "description_length": 423,
      "index": 431,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FederatedAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for federated authentication settings in EC2, with optional SAML provider ARNs. It provides functions to construct, serialize, and parse these settings to and from JSON, query parameters, and XML. Use this module when configuring or retrieving federated identity options for EC2 instances programmatically.",
      "description_length": 343,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ZoneNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based zone names in AWS EC2 operations. It provides functions to convert between XML, JSON, and query string representations of these lists. Use this module when working with AWS EC2 API calls that require or return lists of availability zones.",
      "description_length": 280,
      "index": 433,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplateVersionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 launch template versions, supporting fields like template ID, version range, pagination, and filters. It provides functions to construct, parse, and serialize requests in various formats including JSON and query strings. Concrete use cases include retrieving specific versions of a launch template for auditing, debugging, or version management in AWS infrastructure automation.",
      "description_length": 435,
      "index": 434,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableAssociationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway route table associations. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of association records. It is used when managing route table associations in transit gateways, such as listing or updating attached VPCs or VPNs.",
      "description_length": 346,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a set of image attribute names used in EC2 operations, such as Description, Kernel, and BlockDeviceMapping. It provides bidirectional conversions between these attributes and strings, JSON, and query parameters, enabling seamless integration with AWS API requests. These functions are used when modifying or retrieving specific EC2 image properties.",
      "description_length": 369,
      "index": 436,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4Pool",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a public IPv4 address pool in AWS EC2, including its metadata and address ranges. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing IP allocations, tracking available addresses, and integrating with EC2 APIs for network resource configuration.",
      "description_length": 392,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnTargetNetworksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing AWS EC2 Client VPN target networks, providing constructors, parsers, and serializers for its data structure. It works with `TargetNetworkSet.t` and an optional `String.t` for pagination. Use this module to process responses from `describe_client_vpn_target_networks` API calls, including parsing XML input and converting to JSON or query formats.",
      "description_length": 391,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a client VPN connection, including transitions like termination and failure states. It provides direct conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON and XML formats. Concrete use cases include handling AWS EC2 API responses for client VPN connections and converting status codes for logging or conditional logic.",
      "description_length": 472,
      "index": 439,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AllocateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for allocating an Elastic IP address in EC2, supporting fields like domain, IP address, and pool identifiers. It provides functions to construct, parse, and serialize allocation requests in multiple formats including JSON and query strings. Concrete use cases include configuring network resources and managing IP address assignments programmatically.",
      "description_length": 393,
      "index": 440,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NewDhcpConfigurationList",
      "library": "aws-ec2",
      "description": "This module handles DHCP configuration lists for EC2 instances, providing operations to convert, parse, and serialize configurations between XML, JSON, and query formats. It works with lists of DHCP configuration objects, each representing a key-value pair for network settings. Use this module when setting up or modifying VPC DHCP options in AWS EC2.",
      "description_length": 352,
      "index": 441,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing block device mappings for EC2 instances. Works with lists of `InstanceBlockDeviceMapping.t` structures, converting between XML, JSON, and query formats. Used when managing instance storage configurations during instance launch or modification.",
      "description_length": 286,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotMaintenanceStrategiesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot fleet maintenance strategies, specifically supporting capacity rebalance settings. It provides functions to create, serialize, and parse these configurations, enabling integration with AWS EC2 spot fleet requests. Use this module when setting up or modifying spot fleets to handle instance rebalancing during maintenance events.",
      "description_length": 386,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidr",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing Bring Your Own IP (BYOIP) CIDR blocks, including fields for the CIDR range, description, status message, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling BYOIP CIDR configurations in AWS EC2 API requests and responses, such as importing or advertising IP ranges.",
      "description_length": 421,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostTenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Dedicated` and `Host`, representing EC2 host tenancy options. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions support handling EC2 instance placement configurations in API requests and responses.",
      "description_length": 362,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadBalancersConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for load balancers with optional classic load balancers and target groups. It provides functions to construct, parse, and convert the configuration to query parameters or JSON format. It is used when configuring auto scaling groups with load balancing support in AWS EC2.",
      "description_length": 317,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 connection notifications, including fields like notification ID, service ID, VPC endpoint ID, notification type, ARN, events, and state. It provides operations to construct, parse, and serialize connection notification data for interacting with AWS EC2 APIs. Use this module when configuring or retrieving connection notifications for VPC endpoints in AWS.",
      "description_length": 410,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermissionModifications",
      "library": "aws-ec2",
      "description": "This module manages modifications to volume permissions in EC2 by allowing the addition or removal of permissions via the `add` and `remove` fields. It works with `CreateVolumePermissionList.t` to represent sets of permissions, and provides functions to construct, parse, and serialize these modifications in various formats including JSON and query strings. It is used when updating volume access settings for EC2 instances, particularly when sharing volumes across accounts or adjusting access controls programmatically.",
      "description_length": 522,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeSecurityGroupEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for authorizing egress traffic on an EC2 security group. It includes fields for specifying IP permissions, CIDR ranges, port ranges, and source security groups, along with optional dry-run support. The module provides functions to construct, parse, and serialize these requests to JSON or query parameters for API calls.",
      "description_length": 362,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationItemError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to instance credit specifications in EC2. It includes functions to create, parse, and serialize error objects containing an error code and message, specifically for handling failed credit specification updates. The module is used when managing burstable performance instances to capture and communicate detailed error information during API interactions.",
      "description_length": 419,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkDnsSupportList",
      "library": "aws-ec2",
      "description": "This module handles lists of ClassicLink DNS support configurations, providing operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. It works with ClassicLink DNS support data structures representing DNS settings for EC2 instances linked to a VPC. Concrete use cases include processing responses from AWS EC2 API calls that manage DNS support settings for ClassicLink-enabled instances.",
      "description_length": 430,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetHistoryResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 fleet history, containing records of past fleet events, pagination tokens, and timestamps. It provides constructors, JSON and XML parsers, and query builders to handle responses from AWS EC2 API calls. Use this module when retrieving and processing historical data about EC2 fleet state changes.",
      "description_length": 347,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PricingDetailsList",
      "library": "aws-ec2",
      "description": "This module handles lists of pricing details for EC2 instances, providing operations to convert to and from JSON, query format, and XML. It works with lists of `PricingDetail.t` records, which represent individual pricing components. Use this module when processing EC2 pricing data from AWS API responses or when constructing requests that require pricing information.",
      "description_length": 369,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a transit gateway route table, including `Pending`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and XML formats. Use cases include handling state transitions and persisting state information in AWS EC2 management workflows.",
      "description_length": 437,
      "index": 454,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of successfully canceling a Spot Fleet request, capturing the current and previous states of the request along with its ID. It provides functions to construct, parse, and serialize this structure for use in API responses and queries. Concrete use cases include handling EC2 Spot Fleet cancellation responses and converting them to and from JSON or query formats for further processing or logging.",
      "description_length": 457,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for creating a transit gateway multicast domain, containing an optional `TransitGatewayMulticastDomain` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from AWS EC2 API calls that create multicast domains, allowing easy integration with AWS SDK workflows.",
      "description_length": 415,
      "index": 456,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationListRequest",
      "library": "aws-ec2",
      "description": "Handles instance credit specification requests for EC2 instances. It provides functions to convert lists of credit specifications to and from JSON and query formats, and to parse them from XML. This module is used when managing burstable performance instances that use credit-based CPU billing.",
      "description_length": 294,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNatGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a NAT gateway in AWS EC2, including required and optional parameters such as allocation ID, subnet ID, client token, dry run flag, and tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring and submitting NAT gateway creation requests programmatically.",
      "description_length": 408,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreAddressToClassicRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to restore an Elastic IP address to the EC2-Classic platform. It includes operations to construct the request with optional dry-run functionality, convert it to query parameters or JSON, and parse it from XML or JSON input. Concrete use cases include integrating with AWS SDK workflows to manage IP address migration between VPC and EC2-Classic environments.",
      "description_length": 420,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 key pair, supporting operations to create, parse, and serialize the request in various formats. It works with string and boolean types to represent key names, key pair IDs, and dry-run flags. Concrete use cases include constructing API requests to delete key pairs by name or ID, and converting between XML, JSON, and query string representations of those requests.",
      "description_length": 425,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for starting EC2 instances, including instance IDs, optional additional information, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when initiating EC2 instance start operations, particularly for building and validating request payloads before sending them to AWS.",
      "description_length": 390,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of an EC2 instance, including fields like availability zone, instance ID, state, and system status. It provides functions to construct, parse, and convert instance status data to and from XML, JSON, and query formats. Use this module when retrieving or reporting the health and state of EC2 instances in AWS management tools or monitoring systems.",
      "description_length": 408,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostInstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 host instances, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with lists of `HostInstance.t` values, representing EC2 instances associated with dedicated hosts. Use this module when managing host instance associations in AWS EC2, particularly when serializing or deserializing data for API requests and responses.",
      "description_length": 409,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing location types in AWS EC2, with variants for region, availability zone, and availability zone ID. It provides conversions to and from strings, JSON, and query formats, along with parsing from XML. Use this module when handling EC2 location-based APIs that require strict type representation and serialization.",
      "description_length": 353,
      "index": 464,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImagesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 images, supporting filtering by executable users, image IDs, owners, and custom filters. It provides operations to construct, parse, and serialize requests in JSON, XML, and query string formats. Concrete use cases include building API requests to retrieve specific AMI details or list images matching criteria like ownership or tag filters.",
      "description_length": 398,
      "index": 465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePublicIpv4PoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying public IPv4 pools in EC2, supporting filtering, pagination, and selection by pool IDs. It includes functions to construct, parse, and serialize requests in various formats including JSON and query strings. Concrete use cases include retrieving metadata about public IPv4 address ranges and managing pool information in AWS infrastructure automation.",
      "description_length": 402,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigRequest",
      "library": "aws-ec2",
      "description": "This module defines a configuration request for EC2 fleet launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize the configuration for use in API requests. The module is used when setting up EC2 Auto Scaling fleets with customized instance launch parameters.",
      "description_length": 355,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 Spot Fleet options, including fields like allocation strategy, interruption behavior, and instance pool limits. It provides constructors, JSON and XML parsers, and query parameter conversion for managing Spot Instance requests. Concrete use cases include setting up cost-controlled, interruptible compute resources for batch processing or scalable web services.",
      "description_length": 415,
      "index": 468,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclList",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 network ACL lists. Works with XML, JSON, and query string formats, converting between them and a list of network ACL records. Used when managing VPC network access control policies via AWS SDK calls.",
      "description_length": 248,
      "index": 469,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 snapshots, containing a list of snapshots and an optional token for pagination. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used when handling responses from AWS EC2's snapshot description API calls, enabling structured access to snapshot data and continuation tokens.",
      "description_length": 404,
      "index": 470,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationIdsList",
      "library": "aws-ec2",
      "description": "This module handles lists of connection notification IDs for EC2 operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML. It is used when managing VPC endpoint connection notifications, allowing users to specify and retrieve notification targets by ID.",
      "description_length": 320,
      "index": 471,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Instance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance with detailed metadata such as instance ID, type, state, network interfaces, and block device mappings. It includes functions to construct instances, parse XML data into instance records, and convert instance data to query parameters, JSON, or back from JSON. Concrete use cases include managing instance lifecycle information, serializing instance data for API requests, and parsing responses from EC2 operations.",
      "description_length": 480,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 Spot Instance datafeed subscriptions, including fields like bucket, owner ID, and state. It provides functions to construct, parse, and serialize subscription data for interacting with AWS EC2 APIs. Use this module to configure and retrieve datafeed subscriptions for monitoring Spot Instance events and billing.",
      "description_length": 366,
      "index": 473,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfigData",
      "library": "aws-ec2",
      "description": "This module defines the configuration data for an EC2 Spot Fleet request, including parameters like allocation strategies, instance interruption behavior, and target capacity. It provides functions to construct, parse, and serialize the configuration for use in API requests. Concrete use cases include setting up spot fleet requests with specific launch templates, managing termination policies, and configuring load balancer integration.",
      "description_length": 439,
      "index": 474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreatePlacementGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 placement group, including fields like group name, placement strategy, and partition count. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring placement groups for low-latency networking or fault-tolerant workloads in distributed systems.",
      "description_length": 385,
      "index": 475,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing detailed status information of an EC2 instance, including the time it became impaired, the status name, and the status type. It provides functions to construct, parse, and serialize this data for use in querying AWS services and processing JSON responses. Concrete use cases include monitoring instance health and diagnosing issues through status details retrieved from AWS EC2 APIs.",
      "description_length": 437,
      "index": 476,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to disable DNS support for a VPC in EC2, containing an optional VPC ID. It provides functions to construct, parse, and convert the request to various formats including JSON and query parameters. It is used specifically when configuring VPC settings related to ClassicLink DNS support in AWS EC2.",
      "description_length": 361,
      "index": 477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizationRuleSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and JSON conversion for a list of EC2 authorization rules. Works with `AuthorizationRule.t` lists, converting between XML, query parameters, and JSON formats. Used when managing VPC security group rules or network access configurations in AWS EC2.",
      "description_length": 279,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedRolesList",
      "library": "aws-ec2",
      "description": "This module handles lists of associated IAM roles for EC2 instances, providing operations to convert, parse, and serialize role data. It works with lists of `AssociatedRole.t` type, supporting XML, JSON, and query parameter formats. Use this module when managing instance profiles or role attachments in EC2 configurations.",
      "description_length": 323,
      "index": 479,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UnmonitorInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of unmonitoring EC2 instances, primarily providing a data structure to hold a list of instance monitoring states. It includes functions to construct, parse, and serialize the result in various formats such as JSON and query strings. It is used when processing responses from the EC2 API after disabling detailed monitoring on instances.",
      "description_length": 367,
      "index": 480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of retrieving the default KMS key ID for EBS encryption. It includes functions to construct, parse, and serialize the result in various formats, such as JSON and query parameters. It is used when interacting with AWS EC2 to manage or inspect the default encryption settings for EBS volumes.",
      "description_length": 351,
      "index": 481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Purchase",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a purchase configuration for EC2 hosts, with optional fields for pricing, duration, and identifiers. It provides functions to construct, serialize, and parse purchase records, supporting operations like converting to JSON or query parameters for API requests. Concrete use cases include creating and managing host reservations with specific billing and configuration options in EC2.",
      "description_length": 432,
      "index": 482,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 prefix list IDs, providing operations to convert between XML, JSON, and query string formats. It works with string lists and integrates with AWS SDK serialization libraries. Use this module when managing prefix list associations in EC2 security group rules or VPC route tables.",
      "description_length": 311,
      "index": 483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandOptions",
      "library": "aws-ec2",
      "description": "This module defines configuration options for on-demand instances within an EC2 fleet request. It includes fields to control allocation strategy, capacity reservations, instance type and zone constraints, target capacity, and spending limits. These settings are used when creating or managing EC2 fleets to specify how on-demand instances should be provisioned.",
      "description_length": 361,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VCpuInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing virtual CPU configurations, including core and thread counts. It provides constructors, JSON and XML parsers, and query parameter conversion for handling instance type CPU details in AWS EC2. Use this module when retrieving or specifying CPU configuration details for EC2 instances, such as when launching or describing instance types.",
      "description_length": 387,
      "index": 485,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for resetting an image attribute in EC2, including fields for the attribute name, image ID, and optional dry-run flag. It provides functions to construct, parse, and convert the structure to query or JSON formats for API requests. Concrete use cases include preparing and sending EC2 image attribute reset commands to AWS.",
      "description_length": 359,
      "index": 486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusSummary",
      "library": "aws-ec2",
      "description": "This module handles instance status summaries in AWS EC2, providing constructors, JSON and XML conversions, and query parameter serialization. It works with structured instance status data, including status details and summary states. Use this module to process and format EC2 instance health and status information for API requests or monitoring workflows.",
      "description_length": 357,
      "index": 487,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.PrivateDnsNameConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring private DNS names in EC2, with fields representing the DNS name's state, type, value, and name. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing DNS settings for EC2 instances and interfacing with AWS API operations that require DNS configuration details.",
      "description_length": 406,
      "index": 488,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelImportTaskResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of canceling an import task, with fields for the import task ID, previous state, and current state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when canceling virtual machine import tasks.",
      "description_length": 379,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FailedQueuedPurchaseDeletionSet",
      "library": "aws-ec2",
      "description": "This module handles a list of failed queued purchase deletions, providing operations to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON data structures to facilitate API interactions. Use this module when managing batch deletion failures in EC2 reserved instances.",
      "description_length": 313,
      "index": 490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for constructing, serializing, and parsing requests to create a Client VPN endpoint in AWS EC2. It includes fields for network configuration, authentication, logging, and metadata, supporting precise setup of client VPN services. Use cases include programmatically configuring secure remote access to VPC resources with custom DNS, authentication methods, and logging options.",
      "description_length": 425,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for modifying a Client VPN endpoint in AWS EC2, including fields such as the endpoint ID, server certificate ARN, DNS servers, and connection logging options. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. Use cases include updating the configuration of an existing Client VPN endpoint, such as changing the associated VPC or adjusting client connection settings.",
      "description_length": 475,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a local gateway route table and a virtual interface group in AWS EC2. It includes functions to construct, parse, and convert the structure to and from JSON and query formats. It is used to manage and retrieve association metadata such as IDs, state, and tags in EC2 networking operations.",
      "description_length": 361,
      "index": 493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ValidationError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling validation errors in AWS EC2 operations, including fields for error codes and messages. It provides functions to construct, parse, and convert validation error instances to and from XML, JSON, and query formats. Use this module when processing EC2 API responses that include validation errors, such as malformed input or constraint violations.",
      "description_length": 393,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of describing a VPC attribute, including the VPC ID and boolean flags for DNS settings. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and configuring DNS hostname and support settings for a VPC in AWS EC2.",
      "description_length": 369,
      "index": 495,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 route table associations, providing direct conversions to and from XML, JSON, and query formats. It supports operations for parsing AWS XML responses into typed route table association lists and serializing them for API requests. Concrete use cases include processing responses from DescribeRouteTables calls and constructing requests that reference route table associations.",
      "description_length": 408,
      "index": 496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeByoipCidrsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying BYOIP CIDR blocks, including optional dry-run flag, max results limit, and pagination token. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include configuring and retrieving Bring-Your-Own-IP address ranges in EC2.",
      "description_length": 352,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway prefix list reference. It provides constructors, JSON and XML parsers, and query conversion for a type that optionally contains a `TransitGatewayPrefixListReference`. It is used to process responses from EC2 when removing prefix list references from transit gateways.",
      "description_length": 328,
      "index": 498,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceStateFault",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling spot instance state faults in AWS EC2, with fields for error code and message. It provides functions to construct, parse, and convert fault data to and from XML, JSON, and query formats. Use this module when managing spot instance lifecycle events that involve fault reporting or error handling.",
      "description_length": 345,
      "index": 499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a transit gateway prefix list reference, including required fields like transit gateway route table ID and prefix list ID, along with optional parameters such as attachment ID and blackhole flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include configuring route propagation in AWS EC2 transit gateways and managing prefix list references programmatically.",
      "description_length": 518,
      "index": 500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotMaintenanceStrategies",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot instance maintenance strategies, specifically supporting capacity rebalance settings. It provides functions to create, parse, and serialize these configurations to and from XML, JSON, and query formats. It is used when managing EC2 spot fleet or instance requests to control behavior during instance rebalancing events.",
      "description_length": 377,
      "index": 501,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIpv6CidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of IPv6 CIDR block associations for subnets. It operates on lists of `SubnetIpv6CidrBlockAssociation.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing subnet configurations involving IPv6 ranges in AWS EC2.",
      "description_length": 317,
      "index": 502,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoints in AWS EC2, including a set of VPC endpoints and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats such as JSON and query parameters. Concrete use cases include processing responses from AWS API calls and preparing data for subsequent requests or client consumption.",
      "description_length": 393,
      "index": 503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing CIDR blocks and their descriptions in the context of EC2 prefix lists. It provides functions to construct, parse, and serialize entries to and from XML, JSON, and query formats. Use this module when managing AWS EC2 prefix lists, particularly for handling individual CIDR entries with optional descriptions.",
      "description_length": 361,
      "index": 504,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 fleet instances, providing constructors, serialization, and parsing for a structure containing active instances, a next token for pagination, and an optional fleet ID. It works with AWS EC2 active instance sets, string values, and JSON or XML data formats. It is used to process and serialize responses from the EC2 API when querying the status and composition of instance fleets.",
      "description_length": 429,
      "index": 505,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting attributes of an FPGA image in EC2. It includes functions to construct, parse, and serialize the request, supporting operations like specifying the FPGA image ID and selecting which attribute to reset. It is used when interacting with AWS EC2 APIs to modify FPGA image permissions or other supported attributes.",
      "description_length": 365,
      "index": 506,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU credit behavior in EC2 instances, with a single field representing the credit option. It provides functions to construct, serialize, and deserialize this structure for use in API requests. Concrete use cases include configuring burstable performance instances with specific CPU credit settings during instance launch or modification.",
      "description_length": 389,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeStaleSecurityGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing stale security groups in EC2, providing structured access to a list of stale security groups and an optional pagination token. It works with XML, JSON, and query string representations of the result data. Use this module when processing responses from the EC2 API to identify security groups that are no longer in use.",
      "description_length": 363,
      "index": 508,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePlacementGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 placement groups, supporting filtering by name, ID, or custom criteria. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving placement group metadata for monitoring, resource organization, or automated scaling workflows.",
      "description_length": 369,
      "index": 509,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationResponseList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for lists of elastic GPU specification responses. It works with XML nodes, JSON values, and query parameters, transforming them to and from a list of `ElasticGpuSpecificationResponse.t` values. It is used when processing AWS EC2 API responses that include elastic GPU configurations, such as describing or modifying instance GPU settings.",
      "description_length": 405,
      "index": 510,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Client VPN endpoint IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing Client VPN endpoint associations or filtering related API requests.",
      "description_length": 289,
      "index": 511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateIamInstanceProfileRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating an IAM instance profile with an EC2 instance. It includes functions to construct the request, convert it to query format or JSON, and parse it from XML or JSON. It is used when making API calls to link IAM roles to running EC2 instances for temporary credential management.",
      "description_length": 329,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 export image tasks, providing direct conversions to and from JSON and query formats. It includes parsing from XML nodes and constructing empty or initialized lists. Use this when managing bulk responses or requests involving export image tasks in EC2, particularly for serialization or API interactions.",
      "description_length": 336,
      "index": 513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of scheduled EC2 instances. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 scheduled instance data. Use this module when interacting with AWS APIs that require or return scheduled instance information in different structured formats.",
      "description_length": 384,
      "index": 514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetCidrBlockState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a subnet CIDR block, including its current status and any associated message. It provides functions to construct, parse, and serialize instances for use in API requests and responses. Commonly used when managing subnet CIDR blocks in EC2, such as tracking association or disassociation states.",
      "description_length": 356,
      "index": 515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableVgwRoutePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling route propagation from a virtual private gateway to a route table. It includes operations to construct, parse, and serialize the request, supporting interactions with EC2's routing APIs. Use this module when configuring route table updates in AWS EC2 environments.",
      "description_length": 317,
      "index": 516,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a VPC peering connection, including a dry-run flag and the connection ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when issuing deletion commands to ensure correct parameter formatting in API requests.",
      "description_length": 338,
      "index": 517,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservationValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 reservation pricing details, including hourly price, remaining total value, and remaining upfront value. It provides functions to construct, parse, and convert reservation values to and from XML, JSON, and query formats. Concrete use cases include handling AWS EC2 reservation pricing data in API requests and responses.",
      "description_length": 378,
      "index": 518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancer",
      "library": "aws-ec2",
      "description": "This module defines a data structure for working with Classic Load Balancer information in AWS EC2, primarily handling the optional name field of a load balancer. It provides functions to construct, serialize, and convert load balancer data to and from XML, JSON, and query formats. Concrete use cases include processing load balancer responses from AWS APIs and building requests that reference existing load balancers by name.",
      "description_length": 428,
      "index": 519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 product codes, providing operations to convert between XML, JSON, and query formats. It supports parsing product code lists from XML nodes and converting them to AWS query parameters or JSON structures. Use this module when working with EC2 API responses that include product code lists, especially during request and response processing.",
      "description_length": 371,
      "index": 520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting specific versions of a launch template in EC2. It includes fields for the launch template ID, name, and version number, along with functions to construct, parse, and serialize the data for use in API requests and responses. It is used when handling the output of batch deletion operations on launch template versions.",
      "description_length": 390,
      "index": 521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesModificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Reserved Instances modifications, providing structured access to a list of modifications and an optional pagination token. It works with XML, JSON, and query string formats for input and output operations. Use this module to process responses from the AWS EC2 API when retrieving information about Reserved Instances modifications.",
      "description_length": 380,
      "index": 522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentPropagationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of transit gateway attachment propagation entries. It works with XML nodes, JSON values, and query parameters, transforming them into and from a list of `TransitGatewayAttachmentPropagation.t` values. It is used when managing route propagation in EC2 transit gateways, particularly when interacting with AWS APIs to enable or disable route propagation between attachments.",
      "description_length": 447,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing errors returned when creating an EC2 fleet, including optional fields for launch template details, instance lifecycle, error code, and error message. It provides functions to construct, parse, and convert the error data to and from XML, JSON, and query formats. Use this module to handle and inspect detailed error information from EC2 fleet creation responses.",
      "description_length": 411,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeManagedPrefixListsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing managed prefix lists in EC2, providing access to the list of prefix lists and an optional pagination token. It includes functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Use this module when processing responses from EC2's `DescribeManagedPrefixLists` API call, especially for handling paginated results and integrating with AWS SDK components.",
      "description_length": 452,
      "index": 525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclEntryList",
      "library": "aws-ec2",
      "description": "This module represents a list of network ACL entries and provides functions to convert between XML, JSON, and query formats. It supports parsing EC2 network ACL entry lists from XML nodes and JSON values, and serializing them into query parameters or JSON representations. Concrete use cases include handling AWS EC2 API responses and requests involving network ACL configurations.",
      "description_length": 381,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and serializing lists of fast snapshot restore error items. It provides operations to convert error item lists to JSON and query formats, and to parse them from XML or JSON input. It is used when managing EC2 snapshot restore errors, particularly in handling responses from AWS API calls related to snapshot restoration failures.",
      "description_length": 370,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with values `OK` and `IMPAIRED`, representing the operational status of an Elastic GPU. It provides functions to convert between strings and the enumerated type, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and format Elastic GPU status values when interacting with EC2 APIs or processing resource health information.",
      "description_length": 431,
      "index": 528,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnTunnelOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying configuration options for a single VPN tunnel in AWS EC2, including CIDR ranges, pre-shared keys, lifetime settings, encryption and integrity algorithms, and IKE versions. It provides functions to construct, parse, and serialize these configurations to support creating or modifying VPN connections with specific tunnel parameters. Use cases include setting up secure site-to-site VPNs with custom cryptographic settings and managing tunnel failover and rekeying behavior.",
      "description_length": 521,
      "index": 529,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a VPN connection, containing an optional `VpnConnection` object. It provides functions to construct, parse, and serialize the result in various formats, including XML, JSON, and query parameters. Concrete use cases include handling responses from AWS EC2 API calls to create VPN connections and converting those responses into usable data structures for further processing or debugging.",
      "description_length": 459,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway route tables, including identifiers, filters, and pagination parameters. It provides functions to construct, parse, and serialize requests for use with AWS EC2's local gateway route table API. Use this module to build and process requests when retrieving route table information in a virtual private cloud environment.",
      "description_length": 385,
      "index": 531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 peering connection options, with fields to enable DNS resolution and cross-VPC/classic link traffic. It provides functions to construct, serialize, and parse these options for use in API requests. Concrete use cases include setting up VPC peering connections with custom routing and DNS behaviors.",
      "description_length": 354,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 snapshot attributes, including create volume permissions, product codes, and snapshot ID. It provides functions to construct, parse, and serialize the result for use in queries or JSON responses. Use this module when retrieving or modifying snapshot permissions or metadata in AWS EC2 workflows.",
      "description_length": 344,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a Client VPN route, containing an optional status field. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Concrete use cases include handling responses from AWS EC2 API calls when managing Client VPN configurations.",
      "description_length": 361,
      "index": 534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the state of an availability zone, with variants for available, information, impaired, and unavailable states. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to interpret and format availability zone status information when interacting with EC2 APIs.",
      "description_length": 436,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing monitoring configuration for scheduled EC2 instances, with an optional boolean flag indicating whether monitoring is enabled. It provides functions to construct, parse, and serialize monitoring configurations in various formats including JSON, query strings, and XML. Use cases include configuring detailed monitoring for EC2 instances in scheduled instance requests and converting monitoring settings between different data representations during API interactions.",
      "description_length": 509,
      "index": 536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing service types in EC2, with variants for Interface, Gateway, and GatewayLoadBalancer. It includes functions to convert between string representations and type values, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to handle service type values when interacting with EC2 APIs, such as when describing or configuring VPC endpoints or load balancers.",
      "description_length": 454,
      "index": 537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeBundleTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 bundle tasks, primarily working with the `t` type that contains a list of bundle tasks. It provides functions to construct, parse, and serialize the result in various formats including XML, JSON, and query parameters. Use this module when processing responses from EC2 API calls that return bundle task information, such as monitoring instance store-backed AMI creation tasks.",
      "description_length": 425,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLinkIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing VPC classic link IDs in AWS EC2. It provides operations to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when managing VPC connections to classic link instances using string identifier lists in API requests or responses.",
      "description_length": 339,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of license configuration requests for EC2 instances. It provides functions to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when specifying or processing license configurations during instance launch or modification.",
      "description_length": 296,
      "index": 540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags in an EC2 launch template, including the resource type and a list of tags. It provides functions to construct, serialize, and parse these specifications to and from XML, JSON, and query formats. Use this module when configuring or modifying EC2 launch templates with tagged resources like instances or volumes.",
      "description_length": 367,
      "index": 541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GatewayType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the type of a gateway in EC2, currently only `Ipsec_1`. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. Use this module when working with EC2 virtual private gateways to ensure correct type handling during API requests and responses.",
      "description_length": 338,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceReservationValue",
      "library": "aws-ec2",
      "description": "This module handles the representation and conversion of reserved instance reservation values in EC2. It provides functions to construct, parse, and serialize reservation value data, which includes an optional reservation value and a reserved instance ID. Use this module when managing reserved instance exchanges, particularly for querying or updating reservation values in AWS.",
      "description_length": 379,
      "index": 543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 launch permissions, supporting operations to create, parse, and serialize permission entries. It works with XML, JSON, and query string formats, enabling integration with AWS API requests. Concrete use cases include configuring image launch permissions by user ID or group, and converting between API input/output formats.",
      "description_length": 378,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling response errors in EC2 operations, including fields for error codes and messages. It provides functions to construct, parse, and convert error responses to various formats like JSON and query parameters. Use this module when processing failed EC2 API calls to extract and handle specific error details.",
      "description_length": 352,
      "index": 545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a prefix list reference from a transit gateway route table. It includes operations to construct, serialize, and parse the request, handling fields like route table ID, prefix list ID, and an optional dry-run flag. It is used when managing route propagation in AWS EC2 transit gateways.",
      "description_length": 338,
      "index": 546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a VpnGateway in AWS EC2, containing an optional VpnGateway record. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when interacting with AWS EC2's VpnGateway creation API to manage virtual private network resources programmatically.",
      "description_length": 381,
      "index": 547,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AdvertiseByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of advertising a Bring Your Own IP (BYOIP) CIDR block in AWS EC2. It includes functions to construct, parse, and serialize the result, specifically handling optional `ByoipCidr` data. It is used when managing custom IP ranges in EC2, such as after initiating the advertisement of a BYOIP CIDR to make it routable within AWS.",
      "description_length": 385,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying license configurations in EC2 launch templates, primarily working with string and XML data types. It includes functions for constructing, serializing, and deserializing license configuration objects, specifically handling optional license ARNs. It is used when configuring EC2 instances with specific licensing requirements, such as when launching instances that must comply with software licensing agreements.",
      "description_length": 462,
      "index": 549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 network interfaces, including a list of network interfaces and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when processing responses from the EC2 API's `DescribeNetworkInterfaces` operation, particularly for handling paginated results or integrating with AWS SDK components.",
      "description_length": 433,
      "index": 550,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying route creation parameters in EC2, including fields like destination CIDR blocks, gateway IDs, and route table ID. It provides functions to construct, parse, and serialize route requests for use with AWS API calls. Use this module when configuring routes in virtual private cloud environments, particularly when associating routes with gateways, instances, or VPC endpoints.",
      "description_length": 422,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCpuOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in a launch template, including core count and threads per core. It provides functions to create, parse, and serialize these options for use in API requests or configuration management. Use cases include configuring EC2 instance CPU settings during template creation or updates.",
      "description_length": 342,
      "index": 552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsErrorSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of EC2 fleet error data. It works with lists of `DescribeFleetError.t` values, providing functions to convert these lists to and from XML, JSON, and query parameters. Use it when processing responses or building requests involving EC2 fleet errors in AWS interactions.",
      "description_length": 326,
      "index": 553,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disabling EBS encryption by default, containing an optional boolean indicating the current state. It provides functions to construct, parse, and serialize the result for use in API responses and XML/JSON transformations. Concrete use cases include handling AWS EC2 API output and converting it to query parameters or JSON for further processing.",
      "description_length": 409,
      "index": 554,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorNetworkService",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing network services that can be used with EC2 traffic mirroring, currently only including `Amazon_dns`. It provides bidirectional conversions between string representations and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used when configuring traffic mirroring rules to specify which network service traffic should be monitored.",
      "description_length": 467,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network interface private IP addresses. It provides parsing from XML nodes, conversion to query parameters, and serialization to and from JSON. It is used when managing network interface configurations in AWS EC2, particularly when handling multiple private IP addresses in API requests and responses.",
      "description_length": 334,
      "index": 556,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying instance metadata options in EC2, including fields like instance ID, HTTP tokens state, hop limit, and endpoint state. It provides functions to construct, parse, and serialize these options for use in API requests. Concrete use cases include configuring instance metadata security settings and adjusting HTTP PUT response hop limits for EC2 instances.",
      "description_length": 402,
      "index": 557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying overrides in an EC2 fleet launch template, including fields like instance type, max price, subnet ID, and priority. It provides functions to construct, parse, and serialize these override records to and from JSON and query formats. Concrete use cases include configuring spot fleet requests with varying instance types and pricing constraints.",
      "description_length": 392,
      "index": 558,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6SupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Enable` and `Disable`, representing IPv6 support settings. It provides functions to convert between strings and the `t` type, including `of_string`, `to_string`, and lookup lists `str_to_t` and `t_to_str`. Additionally, it includes functions for serialization and deserialization to and from JSON, query parameters, and XML, making it suitable for use in AWS EC2 API interactions involving IPv6 configuration.",
      "description_length": 460,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying network interface configurations in EC2 launch templates, including fields like subnet, security groups, IP addresses, and device settings. It provides functions to construct, serialize, and parse these specifications for use in API requests and responses. Concrete use cases include configuring network interfaces when launching EC2 instances and processing network interface data from EC2 events.",
      "description_length": 450,
      "index": 560,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnTunnelOptionsSpecificationsList",
      "library": "aws-ec2",
      "description": "This module handles parsing, formatting, and conversion operations for a list of VPN tunnel options specifications. It works with XML nodes, JSON values, and query parameters, transforming them into and from a list of `VpnTunnelOptionsSpecification.t` values. It is used when configuring or retrieving VPN tunnel settings in EC2, particularly when interfacing with the AWS API using JSON or query string formats.",
      "description_length": 412,
      "index": 561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of EC2 local gateway route table IDs, encoded as strings. It provides operations to convert these lists to and from JSON and query formats, and includes functions to parse XML responses into string lists. Use this module when working with AWS EC2 operations that require passing or receiving sets of local gateway route table IDs, such as describing or modifying route tables.",
      "description_length": 403,
      "index": 562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing placement groups in EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with EC2 operations that require multiple placement group names, such as describing or listing placement groups.",
      "description_length": 333,
      "index": 563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Transit Gateway Multicast Domain, including its ID, associated transit gateway ID, state, creation time, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query parameters. Concrete use cases include managing multicast domain configurations in AWS EC2 and integrating with AWS API requests and responses.",
      "description_length": 419,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying FPGA image attributes in EC2. It provides functions to create, parse, and serialize the result, which includes an optional FPGA image attribute. Use this module when working with FPGA image updates in AWS EC2 to process responses from the API.",
      "description_length": 287,
      "index": 565,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CidrBlock",
      "library": "aws-ec2",
      "description": "This module defines a CIDR block type with an optional string field and provides functions to construct, parse, and serialize CIDR block data. It supports operations for converting CIDR blocks to and from XML, JSON, and query parameters. Use this module when handling CIDR block information in EC2 configurations, such as when creating or modifying VPCs or subnets.",
      "description_length": 365,
      "index": 566,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway, including states like `Pending`, `Available`, and `Deleting`. It provides functions to convert between string representations and the enumerated values, along with serialization to and from JSON and query formats. It is used to manage and interpret the operational state of transit gateways in AWS EC2.",
      "description_length": 386,
      "index": 567,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcState",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two states, `Pending` and `Available`, representing the lifecycle state of a VPC in AWS EC2. It provides bidirectional conversions between strings and the type, JSON and query parameter serialization, and XML parsing. Use this module when handling VPC state transitions or querying VPC status from AWS APIs.",
      "description_length": 343,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayVpcAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Transit Gateway VPC attachments, including a list of attachments and an optional pagination token. It provides operations to construct, serialize, and parse these results in various formats such as JSON and XML. It is used when processing responses from AWS EC2 API calls that list Transit Gateway VPC attachments.",
      "description_length": 363,
      "index": 569,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCoipPoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 COIP (Customer-Owned IP) pools, providing operations to create, parse, and serialize the response data. It works with `CoipPoolSet.t` for managing sets of COIP pools and an optional `next_token` for pagination. Concrete use cases include processing AWS API responses to retrieve COIP pool information, converting results to JSON for further processing, and building queries for subsequent API requests.",
      "description_length": 451,
      "index": 570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorPortRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a range of ports in network traffic mirroring configurations. It includes functions to create, serialize, and parse port ranges using JSON, query parameters, or XML. Concrete use cases include configuring AWS EC2 traffic mirroring rules to capture traffic within specific port ranges for monitoring or analysis.",
      "description_length": 363,
      "index": 571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 transit gateway, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when interacting with AWS EC2 to safely delete a transit gateway by converting between JSON, query parameters, and internal OCaml representations.",
      "description_length": 380,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Spot Fleet request IDs, providing operations to convert them to and from JSON and query formats. It supports parsing from XML nodes and constructing empty lists. Use this module when managing Spot Fleet requests in AWS EC2, particularly for serializing and deserializing request ID lists during API interactions.",
      "description_length": 345,
      "index": 573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAcceleratorAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between an EC2 instance and an Elastic Inference accelerator, including fields for the accelerator's ARN, association ID, state, and creation time. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing inference-accelerated EC2 instances, particularly for tracking and configuring associated inference devices.",
      "description_length": 457,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC peering connection data by providing parsing, serialization, and conversion operations. It works with XML nodes, JSON values, and query parameters, translating between these formats and a list of VPC peering connection records. It is used when retrieving or sending batches of VPC peering connections to AWS EC2, such as listing or creating connections across virtual networks.",
      "description_length": 410,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupIngressResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of revoking ingress rules from a security group. It includes operations to construct, parse, and serialize the result, which contains an optional boolean indicating success and a list of IP permissions that were not found. It is used to handle responses when removing specific inbound rules from EC2 security groups.",
      "description_length": 377,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServicePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC endpoint service permissions, supporting operations to add or remove allowed AWS principals. It works with boolean flags, string identifiers, and lists of string values to specify permission changes. Concrete use cases include updating which accounts or organizations can access a specific VPC endpoint service.",
      "description_length": 369,
      "index": 577,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleFieldList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of traffic mirror filter rule fields as a list. It provides operations to convert between XML, JSON, and query formats and the internal list representation of traffic mirror filter rule fields. Use this module when working with AWS EC2 traffic mirror filters to process rule field data during API requests or responses.",
      "description_length": 392,
      "index": 578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupSourcesResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for deregistering multicast group sources in a transit gateway, containing an optional record of deregistered sources. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used when handling responses from AWS EC2 API calls that deregister multicast group sources.",
      "description_length": 381,
      "index": 579,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 dedicated hosts, including a list of host records and an optional pagination token. It provides constructors, parsers, and serializers for working with XML, JSON, and query string formats. Use this module when processing responses from EC2's `DescribeHosts` API to extract host data or prepare it for further transmission.",
      "description_length": 371,
      "index": 580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of EC2 fleet launch template configurations. It works with lists of `FleetLaunchTemplateConfig.t` values, supporting operations to convert to and from XML, JSON, and query parameters. It is used when configuring or retrieving EC2 fleet instances with specific launch templates.",
      "description_length": 336,
      "index": 581,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorFiltersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying traffic mirror filters in AWS EC2, supporting filtering by IDs, custom filters, and pagination. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving traffic mirror filter configurations with optional constraints and handling paginated results in API calls.",
      "description_length": 401,
      "index": 582,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotMaintenanceStrategies",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing maintenance strategies for EC2 spot fleets, specifically supporting capacity rebalance configuration. It provides functions to construct, serialize, and deserialize this structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving spot fleet maintenance options in AWS EC2.",
      "description_length": 361,
      "index": 583,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfacePermissionsResult",
      "library": "aws-ec2",
      "description": "This module handles the response data from an EC2 network interface permissions describe operation. It includes a list of network interface permissions and an optional pagination token. Use this module to parse, serialize, and work with results returned from querying network interface permissions in AWS EC2.",
      "description_length": 309,
      "index": 584,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocationState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type representing the allocation states of EC2 resources, such as `Available`, `Released`, and `Pending`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with EC2 APIs to interpret and send allocation state information.",
      "description_length": 397,
      "index": 585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 export tasks, including their state, associated S3 export details, and instance export information. It provides functions for constructing, parsing, and converting export task data to and from JSON and query formats. This module is used when managing the export of EC2 instances to S3, particularly for tracking task metadata and status.",
      "description_length": 395,
      "index": 586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying volume creation permissions in AWS EC2, with optional fields for user IDs and permission groups. It includes functions to construct, parse, and convert these permissions to and from JSON and query formats. It is used when managing EBS volume access control in API requests.",
      "description_length": 325,
      "index": 587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing IAM instance profile associations in EC2. It operates on lists of `IamInstanceProfileAssociation.t` values, providing direct conversions to and from XML, JSON, and AWS query formats. It is used when managing EC2 instance profiles, such as retrieving or configuring associated IAM roles during instance setup or modification.",
      "description_length": 379,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientConfigurationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting a Client VPN client configuration. It provides a data structure with an optional string field for the client configuration, along with functions to construct, parse, and serialize the result in various formats. It is used to retrieve and process client configuration data from EC2 Client VPN endpoints, typically for deployment or distribution to clients.",
      "description_length": 399,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayMulticastGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching for transit gateway multicast groups, including a list of multicast groups and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include retrieving and processing multicast group information from AWS EC2 transit gateways, particularly when handling paginated results.",
      "description_length": 417,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeValueList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 account attribute values, providing operations to convert, parse, and serialize the data. It supports transformations to AWS query format, JSON, and parsing from XML and JSON. Use this module when working with EC2 account attributes in different data formats, such as handling API requests or responses.",
      "description_length": 336,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IdFormatList",
      "library": "aws-ec2",
      "description": "This module handles lists of ID format descriptions in AWS EC2. It provides functions to convert these lists to and from XML, JSON, and query parameters, enabling easy serialization and deserialization during API interactions. Use this module when managing resource ID formats in EC2, such as when working with instance or volume IDs.",
      "description_length": 334,
      "index": 592,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a Traffic Mirror filter rule in EC2, providing constructors, JSON and XML parsing, and query conversion. It works with the `TrafficMirrorFilterRule.t` and `String.t` types, encapsulating optional results from API operations. Concrete use cases include processing responses from EC2's Traffic Mirror API when setting up network monitoring rules.",
      "description_length": 387,
      "index": 593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling elastic GPU specifications in EC2, primarily working with string-typed fields. It provides functions to construct, serialize, and parse these specifications to and from XML, JSON, and AWS query formats. Use this module when configuring or retrieving GPU resources for EC2 instances, particularly when interfacing with AWS APIs directly.",
      "description_length": 386,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Elastic GPU association with optional fields for GPU ID, association ID, state, and time. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML. Use this module when managing GPU resources in EC2 instances, such as tracking GPU attachment states or serializing GPU metadata for API requests.",
      "description_length": 394,
      "index": 595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 volume and provides bidirectional conversions between these states and strings, JSON, and XML. It supports operations for serializing and deserializing volume state values, enabling use in API requests and responses. Concrete use cases include interpreting volume status from AWS API responses and formatting state values for API calls.",
      "description_length": 418,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOfferingIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based reserved instances offering IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing reserved instance offerings, such as listing or purchasing specific offerings.",
      "description_length": 305,
      "index": 597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an existing Traffic Mirror session in AWS EC2, allowing updates to fields such as target ID, filter ID, packet length, session number, virtual network ID, and description. It supports operations to construct, parse, and serialize the request in various formats including JSON and query parameters. It is used when reconfiguring Traffic Mirror sessions to change traffic monitoring behavior without recreating the session.",
      "description_length": 472,
      "index": 598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSet",
      "library": "aws-ec2",
      "description": "This module handles the creation, parsing, and conversion of EC2 fleet data structures. It provides operations to convert fleet data to and from XML, JSON, and query formats, facilitating interaction with AWS EC2 APIs. Use cases include processing responses from DescribeFleets calls and preparing fleet data for API requests.",
      "description_length": 326,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTablePropagationsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of retrieving transit gateway route table propagations, including a list of propagation entries and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when handling responses from EC2 API calls that list transit gateway route table propagations.",
      "description_length": 388,
      "index": 600,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ArchitectureType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing CPU architectures supported by EC2 instances, including 32-bit x86, 64-bit x86, and 64-bit ARM. It provides bidirectional conversions between string representations and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with EC2 instance metadata or configuration APIs that require architecture specification.",
      "description_length": 435,
      "index": 601,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCapacity",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking instance capacity information, including available and total capacity counts for specific instance types. It provides functions to construct, serialize, and deserialize this data structure using JSON, query parameters, and XML. Concrete use cases include reporting available EC2 instance slots in a particular placement group or managing capacity constraints during instance launches.",
      "description_length": 434,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSubnetsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 subnets, supporting operations to filter by subnet IDs, apply filters, and control result pagination. It works with AWS EC2 subnet identifiers, filter lists, and standard AWS request parameters like dry-run and pagination tokens. It is used to construct and manipulate API requests when querying subnet information in EC2, particularly for paginated or filtered subnet listings.",
      "description_length": 439,
      "index": 603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 export tasks by providing functions to create, parse, and convert export task data. It works with XML, JSON, and query formats to facilitate communication with AWS services. Use it when managing virtual machine exports to process responses containing lists of export tasks.",
      "description_length": 322,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplatesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 launch templates, supporting filtering by IDs, names, and custom filters, along with pagination via `next_token` and `max_results`. It provides functions to construct, parse, and serialize requests in JSON and query formats. Concrete use cases include retrieving specific launch templates by identifier or filter criteria, and paginating through large result sets in AWS EC2.",
      "description_length": 432,
      "index": 605,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewaySet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of carrier gateway sets in EC2. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of carrier gateway records. Use this module when processing API responses or constructing requests involving multiple carrier gateways.",
      "description_length": 359,
      "index": 606,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 tags, including optional parameters like dry run, filters, pagination controls. It supports constructing, parsing, and serializing requests to interact with EC2 tag data using query strings or JSON. Concrete use cases include filtering tags by resource type, limiting result size, and handling paginated responses from AWS EC2.",
      "description_length": 388,
      "index": 607,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying market options when launching EC2 instances, including optional spot instance configurations. It provides functions to construct, serialize, and parse these options for use in API requests. Use this module when configuring instance purchasing options for AWS EC2 launches, particularly when using spot instances.",
      "description_length": 364,
      "index": 608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoreCountList",
      "library": "aws-ec2",
      "description": "This module handles lists of integers representing core counts in EC2 configurations. It provides functions to parse, serialize, and convert these lists to and from XML, JSON, and query parameters. Use this module when working with EC2 instance types that require specifying core counts in API requests or responses.",
      "description_length": 316,
      "index": 609,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for EC2 image attributes, including block device mappings, launch permissions, product codes, and metadata like image description or kernel ID. It provides functions to construct, serialize, and parse these attributes for use in API requests and responses. Concrete use cases include configuring EC2 image properties and processing AWS API XML or JSON responses.",
      "description_length": 399,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a target network with a Client VPN endpoint, containing an optional association ID and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when managing Client VPN network associations.",
      "description_length": 391,
      "index": 611,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a type and conversion functions for making a spot fleet request in EC2. It includes operations to create, parse, and serialize the request configuration, supporting interactions with AWS's spot fleet API. It works with XML, JSON, and query string formats for request configuration data.",
      "description_length": 306,
      "index": 612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Subnet",
      "library": "aws-ec2",
      "description": "This module defines a subnet record with fields representing subnet properties such as availability zone, CIDR block, state, and associated tags. It provides functions to construct, parse, and serialize subnet data for use in EC2 operations. These operations are used when managing virtual networks, such as launching instances or configuring VPCs.",
      "description_length": 348,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a VPC creation operation, containing an optional Vpc object. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling responses from EC2's CreateVpc API call, enabling easy integration with AWS SDK workflows.",
      "description_length": 351,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway multicast domain IDs, represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return collections of multicast domain IDs.",
      "description_length": 317,
      "index": 615,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 2 encryption algorithms for EC2, specifically encoding and decoding these lists to and from JSON, query parameters, and XML. It operates on a list of `Phase2EncryptionAlgorithmsListValue.t` values. Use this module when configuring or parsing IPsec tunnel encryption settings in EC2 Virtual Private Gateway connections.",
      "description_length": 353,
      "index": 616,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching transit gateway routes, including parameters like route table ID, filters, and optional settings such as max results and dry run. It provides functions to construct, serialize, and parse these requests in different formats, including JSON and XML. Concrete use cases include building and processing API requests to query or filter transit gateway routes in AWS EC2.",
      "description_length": 419,
      "index": 617,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of product codes in AWS EC2 operations. It provides functions to convert product code lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of base string types, specifically `Aws.BaseTypes.String.t list`.",
      "description_length": 276,
      "index": 618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNatGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a NAT gateway in AWS EC2, including an optional client token and the created NAT gateway object. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include managing NAT gateway creation responses and integrating with AWS SDK workflows.",
      "description_length": 383,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignedPrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of assigned private IP addresses in AWS EC2 responses. It provides functions to parse XML input into IP address lists, convert them to query parameters or JSON format, and construct empty lists. It is used when managing EC2 instance network interfaces that have multiple private IP addresses assigned.",
      "description_length": 327,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 DH group numbers used in EC2 VPN connections. It operates on a list of `Phase1DHGroupNumbersListValue.t` values, converting between XML, JSON, and query formats. Concrete use cases include processing AWS EC2 API responses and constructing requests for VPN tunnel options that require specifying DH groups.",
      "description_length": 394,
      "index": 621,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting a Client VPN client configuration, including the endpoint ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with API calls. The module is used when generating client configuration files for AWS Client VPN endpoints programmatically.",
      "description_length": 346,
      "index": 622,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesNetworkInterfaceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of scheduled EC2 instance network interface sets. It provides functions to convert between XML, JSON, and query string representations of a list of scheduled instances network interfaces. Use this module when configuring or retrieving network interface settings for scheduled EC2 instances, particularly when interacting with AWS APIs that require specific format conversions.",
      "description_length": 449,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type representing the possible states of a bundle task in EC2, including transitions like `Pending`, `Bundling`, and `Failed`. It provides direct conversions between string representations and the enumerated type, along with serialization and deserialization functions for JSON and XML. These capabilities are used when processing EC2 instance bundle task responses or constructing API requests with specific task states.",
      "description_length": 456,
      "index": 624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreAddressToClassicResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of restoring an Elastic IP address to the EC2-Classic platform. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include processing API responses when migrating or managing Elastic IP addresses in AWS EC2 environments.",
      "description_length": 360,
      "index": 625,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceAvailabilitySet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, conversion, and serialization of scheduled instance availability data in AWS EC2. It operates on lists of `ScheduledInstanceAvailability.t` values, providing functions to convert to and from XML, JSON, and query formats. It is used when managing scheduled EC2 instances, particularly for processing availability responses from AWS APIs.",
      "description_length": 369,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 NAT gateway IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple NAT gateway IDs as input, such as batch deletion or filtering operations.",
      "description_length": 333,
      "index": 627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorResponseList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 launch template elastic inference accelerator responses. It works with lists of `LaunchTemplateElasticInferenceAcceleratorResponse.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when managing EC2 instance configurations that include elastic inference accelerators, enabling proper request/response handling in AWS SDK workflows.",
      "description_length": 435,
      "index": 628,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReasonCodesList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of instance status reason codes. It works with XML nodes, JSON values, and AWS query parameters to facilitate instance status reporting. Use this module when interacting with EC2 instance status APIs that require handling of structured reason code lists.",
      "description_length": 329,
      "index": 629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 instance details, supporting filtering by instance IDs and custom filters. It includes operations to construct, parse, and serialize requests in JSON, XML, and query string formats. Concrete use cases include building paginated instance queries with optional constraints and preparing API requests for AWS EC2's DescribeInstances operation.",
      "description_length": 397,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientConnectOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client connect options in an EC2 client VPN, specifically enabling or disabling the feature and specifying a Lambda function ARN for connection handling. It provides functions to construct, parse, and serialize these options for use in API requests, supporting both JSON and query string formats. Concrete use cases include setting up or modifying client VPN endpoints with custom connection processing logic.",
      "description_length": 462,
      "index": 631,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering an EC2 image, containing the image ID and an optional dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats. Use this when preparing API calls to deregister an AMI, either in dry-run mode or for actual deletion.",
      "description_length": 321,
      "index": 632,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 fleet creation request. It includes fields for the fleet ID, any errors encountered, and the instances created. Operations include constructing the structure, parsing from XML, converting to query format, and serializing to and from JSON.",
      "description_length": 309,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of rejecting VPC endpoint connections, primarily by managing a set of unsuccessful items. It provides functions to construct, parse, and serialize the result, supporting operations like query parameter conversion, JSON serialization, and XML parsing. Concrete use cases include handling batch rejections of VPC endpoint connections and tracking which items failed during the rejection process.",
      "description_length": 424,
      "index": 634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedEnclaveCertificateIamRolesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving IAM roles associated with an EC2 enclave certificate. It provides constructors, parsing, and serialization functions for a structure containing a list of associated roles. It is used when interacting with EC2 enclave certificates to obtain and process the IAM roles linked to them.",
      "description_length": 326,
      "index": 635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesNetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network interface configuration for EC2 scheduled instances, including properties like IP addressing, security groups, and device indexing. It provides functions to construct, parse, and serialize these configurations for use in API requests or responses. Use this module when configuring or retrieving network interfaces for EC2 instances with scheduled events.",
      "description_length": 414,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying specific attributes of an EC2 instance, including the attribute name, instance ID, and an optional dry-run flag. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. It is used when retrieving configuration details like instance type, block device mappings, or network settings for a specific EC2 instance.",
      "description_length": 429,
      "index": 637,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeEgressOnlyInternetGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying egress-only internet gateways, supporting operations to filter, limit, and paginate results. It works with identifiers, integer limits, string tokens, and filter criteria. Use it to construct and manage API requests when retrieving egress-only internet gateway information from EC2.",
      "description_length": 335,
      "index": 638,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrefixListsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying prefix lists in EC2, supporting filtering by IDs, result limits, and pagination via a next-token. It includes operations to construct, parse, and serialize the request in JSON, XML, or query string formats. Concrete use cases include retrieving prefix list information with custom filters and handling paginated responses in AWS EC2.",
      "description_length": 386,
      "index": 639,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a transit gateway multicast domain, with values like `Pending`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. Use this module when handling state transitions or API interactions involving multicast domains in EC2 transit gateways.",
      "description_length": 437,
      "index": 640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayPrefixListReferencesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving transit gateway prefix list references, including a set of references and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses or further processing. Use this module when working with AWS EC2 transit gateway route tables to manage prefix list associations across paginated results.",
      "description_length": 397,
      "index": 641,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorTargetRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring a traffic mirror target request in AWS EC2, supporting optional network interface IDs, load balancer ARNs, descriptions, tag specifications, dry run flags, and client tokens. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include setting up traffic mirroring for network monitoring or analysis by specifying target destinations and metadata.",
      "description_length": 497,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing sets of local gateway route table VPC associations. It operates on lists of `LocalGatewayRouteTableVpcAssociation.t` values, supporting operations like XML parsing, JSON serialization, and query construction. It is used when managing EC2 local gateway route table associations in AWS, particularly for interacting with API responses and requests.",
      "description_length": 401,
      "index": 643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Address",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 address with fields for IP addresses, instance and network interface associations, domain, tags, and ownership details. It provides functions to construct, parse, and serialize address data to and from XML, JSON, and query formats. Concrete use cases include managing Elastic IP address metadata and handling IP association events in EC2.",
      "description_length": 395,
      "index": 644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestHostIdSet",
      "library": "aws-ec2",
      "description": "This module handles sets of host IDs in EC2 requests. It provides operations to convert host ID lists to query parameters or JSON, and to parse them from XML or JSON. It works directly with lists of base string types, supporting request serialization and deserialization.",
      "description_length": 271,
      "index": 645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IcmpTypeCode",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing ICMP type and code values, each as optional integers. It provides functions to construct, parse, and convert these values to and from XML, JSON, and query formats. Use this module when working with EC2 security group rules that require specifying ICMP types and codes.",
      "description_length": 312,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Affinity",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two values, `Default` and `Host`, representing EC2 instance affinity settings. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. It is used to specify host placement affinity policies when configuring EC2 instances.",
      "description_length": 331,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying elastic GPU configurations in EC2, centered around a record type with a single string field indicating the GPU type. It includes functions for constructing instances, parsing XML input, converting to query parameters, and serializing to and from JSON. This module is used when configuring or modifying EC2 instances to include elastic GPU resources, particularly during instance launch or update operations.",
      "description_length": 459,
      "index": 648,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoipAddressUsageSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of COIP address usage data as lists. It provides functions to convert between XML, JSON, and query formats, specifically working with lists of CoipAddressUsage.t records. It is used when processing responses or requests involving multiple COIP address usage entries in AWS EC2 operations.",
      "description_length": 361,
      "index": 649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a VPN connection in AWS EC2, including required fields like customer gateway ID and connection type, along with optional parameters such as dry run and tag specifications. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring and submitting new VPN connections using either JSON or XML input formats.",
      "description_length": 429,
      "index": 650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupSourcesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering multicast group sources in a transit gateway, including fields like multicast domain ID, group IP address, and network interface IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring multicast traffic forwarding in a transit gateway environment.",
      "description_length": 381,
      "index": 651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags in a launch template, including optional resource type and tag list. It provides functions to construct, serialize, and parse these specifications in JSON and XML formats. Concrete use cases include configuring EC2 instance tags during launch template creation or updates.",
      "description_length": 329,
      "index": 652,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastRegisteredGroupMembers",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing multicast group members in a transit gateway, including the multicast domain ID, associated network interface IDs, and the group IP address. It provides functions to construct, serialize, and parse this structure for use in API requests and responses. Concrete use cases include registering or querying multicast group members in EC2 transit gateway configurations.",
      "description_length": 415,
      "index": 653,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VgwTelemetry",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing telemetry information for a virtual private gateway in AWS EC2. It includes fields such as route count, status, IP address, and certificate ARN, along with functions to construct, serialize, and deserialize the structure. Use this module to process and manage telemetry data returned by EC2 API operations related to virtual private gateways.",
      "description_length": 392,
      "index": 654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC peering connection, including metadata like requester and accepter VPC information, connection status, expiration time, and tags. It provides functions to construct, parse, and serialize VPC peering connection data for use in API requests and responses. Specific use cases include managing cross-VPC connectivity configurations and tracking peering connection states in AWS EC2 environments.",
      "description_length": 447,
      "index": 655,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating an internet gateway in AWS EC2, containing an optional `InternetGateway` object. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling API responses from creating internet gateways, particularly for interacting with AWS EC2 services programmatically.",
      "description_length": 410,
      "index": 656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportStatusType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two possible values, `Ok` and `Impaired`, representing status reports for EC2 instances. It includes functions to convert between strings and the `t` type, serialize to JSON and query formats, and parse from XML and JSON. Concrete use cases include handling instance status reporting in EC2 API requests and responses, such as interpreting health check results or sending status updates.",
      "description_length": 443,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 2 encryption algorithm requests for EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of `Phase2EncryptionAlgorithmsRequestListValue.t` values, supporting operations needed when configuring or retrieving EC2 tunnel options.",
      "description_length": 351,
      "index": 658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyIdentityIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying identity ID formats in EC2, with fields for principal ARN, resource type, and whether to use long IDs. It provides functions to construct, parse, and serialize these requests to query parameters or JSON. Concrete use cases include configuring ID format settings for EC2 resources like instances or volumes via the AWS SDK.",
      "description_length": 376,
      "index": 659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this when working with AWS EC2 APIs that require multiple launch template IDs in requests or responses.",
      "description_length": 300,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportClientVpnClientCertificateRevocationListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of importing a client certificate revocation list for a Client VPN endpoint. It provides operations to create, parse, and serialize a result containing an optional boolean indicating success or failure. Use cases include managing certificate revocation list updates and checking import status in Client VPN configurations.",
      "description_length": 353,
      "index": 661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlatformValues",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing platform values supported by EC2, currently including only `Windows`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for XML, JSON, and query parameters. This module is used to handle platform-specific metadata in EC2 instance configurations and API requests.",
      "description_length": 404,
      "index": 662,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 security groups, containing a list of security groups and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Concrete use cases include handling output from EC2's `DescribeSecurityGroups` API call and managing paginated results.",
      "description_length": 375,
      "index": 663,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding information about an EC2 key pair, including its ID, fingerprint, name, and associated tags. It provides functions to construct, parse, and serialize key pair data for use in API requests and responses. Concrete use cases include managing SSH key access to EC2 instances and handling key metadata in AWS automation workflows.",
      "description_length": 374,
      "index": 664,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying resource ID format modifications in EC2, containing a resource type and a boolean flag for enabling long IDs. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling API requests to modify ID formats for specific resources like instances or volumes. Use cases include configuring EC2 resource identifiers to use longer, more unique formats for compatibility or organizational needs.",
      "description_length": 487,
      "index": 665,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfaceGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway virtual interface groups, supporting operations to filter, limit, and paginate results. It works with identifiers, filters, and standard AWS request parameters. Use this module to construct and manipulate EC2 describe requests for virtual interface group data in AWS deployments.",
      "description_length": 346,
      "index": 666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMonitoringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance monitoring configurations. It provides parsing from XML nodes, conversion to query parameters, and serialization to and from JSON. It is used when managing monitoring settings for multiple EC2 instances, such as enabling or retrieving detailed monitoring for a group of instances.",
      "description_length": 322,
      "index": 667,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDeregisteredGroupMembers",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking multicast group members that have been deregistered in a transit gateway. It includes fields for the multicast domain ID, a list of network interface IDs that were deregistered, and the group IP address. Operations include creating instances, parsing from XML, converting to query or JSON formats, and deserializing from JSON, specifically supporting the management and synchronization of multicast group membership state in EC2 transit gateways.",
      "description_length": 496,
      "index": 668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of spot fleet request cancellation results. It works with XML, JSON, and query parameter formats to support API interactions for managing EC2 spot fleets. Concrete use cases include parsing API responses, constructing requests for cancellation confirmation, and converting data for further processing or display.",
      "description_length": 395,
      "index": 669,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverrides",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying overrides in a fleet launch template, including fields like instance type, max price, subnet ID, and priority. It provides functions to construct, parse, and serialize these overrides for use in API requests or configuration management. Concrete use cases include configuring EC2 fleet instances with specific placement or pricing constraints.",
      "description_length": 395,
      "index": 670,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 security groups, supporting filtering by group IDs, names, or custom filters. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving security group details for network configuration audits or automating security compliance checks.",
      "description_length": 379,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a transit gateway route, including CIDR block, route table ID, optional attachment ID, blackhole flag, and dry-run setting. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include configuring routing rules in a transit gateway for network traffic management.",
      "description_length": 388,
      "index": 672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance purchase requests, with fields for the number of instances and a purchase token. It provides functions to create, serialize to JSON or query parameters, and parse from XML or JSON. Use this module when programmatically initiating instance purchases in EC2, such as in automation scripts or provisioning tools.",
      "description_length": 374,
      "index": 673,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting EC2 fleets, including options to specify whether to terminate associated instances and whether to perform a dry run. It works with fleet ID sets and boolean flags to control deletion behavior. Concrete use cases include constructing and serializing API requests to delete multiple EC2 fleets with specific termination policies.",
      "description_length": 380,
      "index": 674,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotLaunchSpecificationSecurityGroupIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of security group IDs for EC2 spot launch specifications. It provides operations to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when configuring or processing EC2 spot instance requests that require multiple security groups.",
      "description_length": 309,
      "index": 675,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of purchasing scheduled EC2 instances by providing functions to construct, parse, and serialize the response data. It works with the `t` type that contains a set of purchased scheduled instances. Concrete use cases include processing API responses after buying reserved instance slots and converting the results to query parameters or JSON for further processing.",
      "description_length": 394,
      "index": 676,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PropagatingVgwList",
      "library": "aws-ec2",
      "description": "This module handles lists of propagating virtual gateway configurations in AWS EC2. It provides functions to parse XML input into a list of propagating VGWs, convert the list to query parameters or JSON, and construct an empty list. Use this module when working with EC2 route propagation data in XML, query, or JSON formats.",
      "description_length": 325,
      "index": 677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 bundle tasks, providing direct conversions to and from XML, JSON, and query formats. It supports parsing task lists from XML nodes and serializing them for API requests or JSON output. Use this module when managing instance store-backed AMI bundling operations in EC2.",
      "description_length": 301,
      "index": 678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PropagatingVgw",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a propagating virtual gateway in EC2, primarily used for handling gateway identifiers in route propagation scenarios. It provides functions to construct, parse, and serialize the structure to various formats including JSON and query parameters. Concrete use cases include managing route propagation configurations in EC2 route tables and interacting with AWS API requests and responses.",
      "description_length": 436,
      "index": 679,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCarrierGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a carrier gateway, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to JSON or query parameters. Use this when interacting with EC2 APIs to safely delete carrier gateways by validating input and formatting requests correctly.",
      "description_length": 345,
      "index": 680,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of provisioning a Bring Your Own IP (BYOIP) CIDR block in EC2. It provides constructors, parsers, and serializers for a result type that optionally includes a `ByoipCidr` record. It is used to process responses from AWS API calls that provision or manage BYOIP CIDR ranges.",
      "description_length": 304,
      "index": 681,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcClassicLink",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC with classic link properties, including whether classic linking is enabled, associated tags, and the VPC ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 VPC configurations that support classic link connectivity and handling related API requests and responses.",
      "description_length": 424,
      "index": 682,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance IDs represented as strings. It provides operations to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when making API requests that require multiple instance IDs, such as stopping or describing multiple instances.",
      "description_length": 312,
      "index": 683,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLog",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling EC2 flow logs, including fields like creation time, log destination, traffic type, and tags. It provides functions to construct, parse, and serialize flow log data for use in AWS API requests and responses. Use cases include configuring flow log settings, analyzing network traffic, and managing log delivery to CloudWatch.",
      "description_length": 373,
      "index": 684,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating flow logs in EC2, including identifiers for created logs and any errors encountered. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used to process responses from EC2 API calls that create flow logs, enabling inspection of created log IDs and failure details.",
      "description_length": 413,
      "index": 685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing DHCP options in AWS EC2, including fields for DHCP configurations, options ID, owner ID, and tags. It provides functions to construct, parse, and serialize DHCP options data to and from XML, JSON, and query formats. Concrete use cases include handling DHCP options responses from EC2 APIs and preparing DHCP options data for API requests.",
      "description_length": 388,
      "index": 686,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixList",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing prefix lists in AWS EC2, including CIDR blocks and optional identifiers and names. It provides functions to construct, serialize, and convert prefix list data to and from XML, JSON, and query formats. Concrete use cases include handling VPC endpoint configurations and network access control policies that reference prefix lists.",
      "description_length": 379,
      "index": 687,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying credit configurations of EC2 instances, with optional fields for instance ID and CPU credit allocation. It provides functions to construct, serialize, and convert these specifications to and from JSON and query formats. Use this module when configuring or retrieving CPU credit settings for EC2 instances in AWS environments.",
      "description_length": 377,
      "index": 688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway peering attachment in AWS EC2. It provides operations to create, parse, and serialize the result, which includes an optional transit gateway peering attachment. Use this module when managing peering attachments in EC2 to process deletion responses in JSON, query, or XML formats.",
      "description_length": 340,
      "index": 689,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a VPC peering connection, containing an optional dry-run flag and a required VPC peering connection ID. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when initiating a rejection of a VPC peering connection in AWS EC2, particularly to test or execute the action with specific identifiers.",
      "description_length": 402,
      "index": 690,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedRole",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 instance roles with optional fields including role ARN, S3 bucket and object key for certificates, and a KMS key ID. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. It is used when configuring EC2 instances with associated IAM roles and encryption settings for secure resource access.",
      "description_length": 395,
      "index": 691,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of canceling a capacity reservation in EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this module when handling responses from the EC2 API after attempting to cancel a capacity reservation.",
      "description_length": 360,
      "index": 692,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTaskList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 conversion tasks. It provides functions to convert between XML, JSON, and query string formats for task lists. Use this module when managing VM import/export tasks in EC2, particularly for handling bulk operations or status checks across multiple conversion tasks.",
      "description_length": 332,
      "index": 693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationOfferingsResult",
      "library": "aws-ec2",
      "description": "Handles the result of describing EC2 host reservation offerings by providing constructors, parsers, and serializers for the result structure. It works with pagination tokens and sets of host offerings, enabling retrieval and processing of available offerings from EC2. Use this module when querying EC2 for host reservation options, particularly when handling paginated responses or integrating with APIs that require structured output.",
      "description_length": 436,
      "index": 694,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNatGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a NAT gateway, including an optional NAT gateway ID. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query strings. Concrete use cases include handling responses from AWS EC2 API calls when deleting NAT gateways in network management workflows.",
      "description_length": 373,
      "index": 695,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceExportDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying details when exporting an EC2 instance, including the instance ID and target environment. It provides functions to construct, serialize, and deserialize these details for use in API requests. Common use cases include preparing export parameters for AWS EC2 API calls and processing export responses in JSON or XML formats.",
      "description_length": 374,
      "index": 696,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling a capacity reservation, including the reservation ID and an optional dry-run flag. It provides functions to create, parse, and serialize the request for use with AWS EC2 operations. The module is used when interacting with EC2's capacity management API to safely release reserved capacity.",
      "description_length": 343,
      "index": 697,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCoipPoolsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 CoIP pools, including fields like pool IDs, filters, pagination parameters, and dry-run options. It provides functions to construct, parse, and serialize these requests into query or JSON formats. Concrete use cases include querying AWS EC2 for CoIP pool information with custom filters and handling paginated results.",
      "description_length": 377,
      "index": 698,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SlotDateTimeRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a date-time range with `earliest_time` and `latest_time` fields. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML. It is used when requesting time slots for EC2 resources, such as scheduled events or availability windows.",
      "description_length": 328,
      "index": 699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseConfigurationResponse",
      "library": "aws-ec2",
      "description": "This module handles the response from an image import license configuration in EC2. It includes a single optional ARN field for the license configuration and provides functions to construct, serialize, and parse this response in various formats including JSON, XML, and query strings. It is used when importing images into EC2 where license configurations are involved, such as bringing your own license (BYOL) scenarios.",
      "description_length": 421,
      "index": 700,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing VPCs in EC2, containing a list of VPCs and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used when handling responses from EC2's `DescribeVpcs` API call, enabling iteration through paginated results.",
      "description_length": 346,
      "index": 701,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StorageLocation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying storage locations in Amazon S3, consisting of optional bucket and key fields. It provides functions to construct, parse, and convert storage locations to and from query parameters and JSON format. It is used when configuring EC2 instance storage settings that reference S3 buckets, such as AMI export tasks or snapshot exports.",
      "description_length": 379,
      "index": 702,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListEntrySet",
      "library": "aws-ec2",
      "description": "This module represents a list of prefix list entries, providing functions to convert the list to and from JSON and query formats, as well as parsing from XML nodes. It works with lists of `PrefixListEntry.t` values. It is used when managing EC2 prefix lists, particularly for serializing and deserializing entry sets during API requests and responses.",
      "description_length": 351,
      "index": 703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway route table in AWS EC2. It includes a parsed response type containing an optional transit gateway route table, along with functions to construct, serialize, and convert the result to and from JSON and query formats. It is used to process and manipulate the output from EC2 API calls that create transit gateway route tables.",
      "description_length": 385,
      "index": 704,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidrState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a BYOIP CIDR block in EC2, with specific values like `Advertised`, `Deprovisioned`, and `Pending_provision`. It provides bidirectional conversion between string representations and the enumerated type, along with serialization to and from JSON, XML, and query parameters. Use cases include handling API responses and requests involving BYOIP CIDR state transitions and status checks.",
      "description_length": 448,
      "index": 705,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 address association requests, with optional fields like allocation ID, instance ID, public IP, and flags for reassociation and dry runs. It provides functions to construct, parse, and convert the structure to query parameters or JSON for API requests. Concrete use cases include associating an Elastic IP with an EC2 instance or network interface programmatically.",
      "description_length": 421,
      "index": 706,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAction",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status actions in EC2, with fields for code, description, event ID, and event type. It provides functions to construct instances, parse XML data, convert to query parameters, and serialize to and from JSON. It is used to handle volume status event details when monitoring or troubleshooting EBS volumes in AWS.",
      "description_length": 371,
      "index": 707,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 addresses as strings, providing operations to convert between XML, query parameters, and JSON formats. It includes functions to parse IPv6 address lists from XML nodes and JSON values, and to serialize them into query strings or JSON lists. Use this module when working with EC2 APIs that require or return multiple IPv6 addresses in different data formats.",
      "description_length": 391,
      "index": 708,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAttachmentStatusList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of volume status attachment statuses. It works with XML nodes, JSON values, and query parameters, converting between them and the internal list type. Use it when interacting with AWS EC2 APIs to process or construct volume status data in different formats.",
      "description_length": 317,
      "index": 709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCustomerGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure to represent the result of creating a customer gateway in EC2, containing an optional customer gateway object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from the EC2 API when managing customer gateways in AWS.",
      "description_length": 365,
      "index": 710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusEventsList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 volume status events. It provides functions to convert between XML, JSON, and query string formats for lists of volume status events. Use this module when processing AWS EC2 volume status responses or constructing requests involving volume status event data.",
      "description_length": 326,
      "index": 711,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorTargetsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 Traffic Mirror targets, including optional identifiers, filters, and pagination parameters. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include querying specific Traffic Mirror targets by ID or filter, simulating requests with dry-run, and handling paginated results.",
      "description_length": 415,
      "index": 712,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeClientVpnIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for authorizing ingress access to a Client VPN endpoint. It includes fields for specifying the endpoint ID, target network CIDR, access group, and optional parameters like description and dry run. Operations include creating, parsing, and serializing the request for use with AWS API calls.",
      "description_length": 330,
      "index": 713,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of phase 2 integrity algorithm requests, containing an optional string. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML formats. This is used when configuring IPsec VPN tunnel options in EC2, specifically for specifying allowed integrity algorithms during phase 2 negotiation.",
      "description_length": 407,
      "index": 714,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateOverridesList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template overrides by providing functions to parse XML input into typed lists, convert lists to query parameters, and serialize or deserialize lists to and from JSON. It operates specifically on lists of `LaunchTemplateOverrides.t` values. Use this module when configuring or modifying EC2 Auto Scaling group launch templates through AWS API calls.",
      "description_length": 388,
      "index": 715,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 instance status, supporting filtering by instance IDs, result limits, and pagination. It includes functions to construct, parse, and serialize requests in JSON, query string, and XML formats. Concrete use cases include retrieving health status for specific instances, paginating through large result sets, and dry-running status checks without modifying state.",
      "description_length": 417,
      "index": 716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring spot instance options in EC2, including fields like allocation strategy, interruption behavior, and instance pool limits. It provides constructors, JSON and query serialization, and XML parsing for these configurations. Concrete use cases include setting up spot fleet requests with specific capacity and pricing constraints.",
      "description_length": 375,
      "index": 717,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror filter IDs in string format. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 traffic mirror configurations that require handling multiple filter IDs.",
      "description_length": 299,
      "index": 718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestoreManagedPrefixListVersionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of restoring a managed prefix list to a specific version in AWS EC2. It includes a single data type `t` that wraps an optional `ManagedPrefixList.t`. The module provides functions to construct, parse, and serialize this result to and from XML, JSON, and query formats.",
      "description_length": 299,
      "index": 719,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleScreenshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for capturing an EC2 instance's console screenshot, including optional dry-run and wake-up flags. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include initiating console screenshot retrieval and configuring request parameters before dispatching to the EC2 service.",
      "description_length": 375,
      "index": 720,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExcessCapacityTerminationPolicy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `NoTermination` and `Default`, representing policies for handling excess capacity termination in EC2. It provides functions to convert between string representations and the `t` type, along with serialization and deserialization functions for query parameters, JSON, and XML. These operations support configuring and interpreting termination policies in EC2 API requests and responses.",
      "description_length": 435,
      "index": 721,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotPrice",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 spot price data, including fields like availability zone, instance type, product description, spot price, and timestamp. It provides functions to construct, parse, and serialize spot price records in various formats including JSON, query parameters, and XML. It is used to retrieve and process historical spot price data from EC2.",
      "description_length": 388,
      "index": 722,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of network interface permission IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this when managing network interface permissions, such as granting or revoking access to specific network interfaces.",
      "description_length": 304,
      "index": 723,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters to replace a route in an EC2 route table, including fields like destination CIDR blocks, gateway IDs, and route table identifiers. It provides functions to construct, serialize, and parse route replacement requests in JSON, query string, and XML formats. Concrete use cases include modifying routing rules in AWS VPCs, such as redirecting traffic through a new NAT gateway or updating IPv6 routes.",
      "description_length": 460,
      "index": 724,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 network ACL associations, providing operations to convert between XML, JSON, and query formats. It works with lists of `NetworkAclAssociation.t` values, supporting serialization and deserialization for API interactions. Use this module when processing EC2 network ACL association data from AWS SDK responses or when preparing requests.",
      "description_length": 368,
      "index": 725,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of an FPGA image, with optional fields for a state code and a descriptive message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling FPGA image state responses from AWS EC2 API calls and serializing or deserializing state data for storage or transmission.",
      "description_length": 412,
      "index": 726,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Transit Gateway VPC attachment in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional Transit Gateway VpcAttachment object. Use this module when updating VPC attachments to a Transit Gateway and processing the response in JSON, XML, or query format.",
      "description_length": 348,
      "index": 727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway attachment IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS EC2 APIs that require or return collections of transit gateway attachment IDs.",
      "description_length": 320,
      "index": 728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a traffic mirror filter in AWS EC2, containing an optional traffic mirror filter ID. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2 API calls that delete traffic mirror filters, to extract and manipulate the returned filter ID.",
      "description_length": 432,
      "index": 729,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when interacting with AWS EC2 transit gateways to programmatically reject peering connections.",
      "description_length": 351,
      "index": 730,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulInstanceCreditSpecificationSet",
      "library": "aws-ec2",
      "description": "This module handles a list of successful instance credit specification items. It provides functions to parse XML input into a list of these items, convert them to query parameters or JSON format, and construct a list from JSON data. Use this module when managing credit specifications for EC2 instances, such as retrieving or updating credit settings in API responses or requests.",
      "description_length": 380,
      "index": 731,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneMessageList",
      "library": "aws-ec2",
      "description": "This module handles lists of availability zone messages in AWS EC2. It provides functions to parse, convert to query format, and serialize/deserialize to and from JSON. It works with lists of `AvailabilityZoneMessage.t` type, used for retrieving and processing messages related to availability zones.",
      "description_length": 300,
      "index": 732,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MoveAddressToVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of moving an Elastic IP address to a VPC, containing an optional allocation ID and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling EC2 API responses when migrating Elastic IPs between EC2-Classic and VPC environments.",
      "description_length": 385,
      "index": 733,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 image IDs represented as strings. Provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML nodes. Useful when working with AWS EC2 APIs that require multiple image IDs as input, such as batch deletion or retrieval operations.",
      "description_length": 297,
      "index": 734,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsEntrySet",
      "library": "aws-ec2",
      "description": "Handles DNS entry data as a list structure, providing serialization and deserialization for XML, JSON, and query parameters. Works with DNS entry lists containing name and type fields. Used when managing DNS records in EC2, such as retrieving or configuring hosted zone entries via API calls.",
      "description_length": 292,
      "index": 735,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ShutdownBehavior",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two values, `Stop` and `Terminate`, representing EC2 instance shutdown behaviors. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. It is used to specify or interpret the behavior of instance shutdown actions in AWS EC2 operations.",
      "description_length": 363,
      "index": 736,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 fleet launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize these configurations to support interactions with AWS EC2 APIs. Use cases include defining varied instance configurations for EC2 Auto Scaling fleets and handling template-based instance provisioning.",
      "description_length": 415,
      "index": 737,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IKE versions in EC2, specifically as an optional string value. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when working with EC2 virtual private gateway or customer gateway configurations that require specifying IKE versions.",
      "description_length": 362,
      "index": 738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsErrorSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, conversion, and serialization of a list of spot fleet request cancellation errors. It works with XML, JSON, and query parameter formats to support error reporting in EC2 spot fleet operations. It is used when managing responses from AWS EC2 API calls that involve canceling spot fleet requests.",
      "description_length": 327,
      "index": 739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesId",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling Reserved Instances IDs in EC2, with functions to create, parse, and serialize the ID to query parameters or JSON. It works with XML input for parsing and converts to and from JSON and query string formats. Concrete use cases include managing EC2 Reserved Instance identifiers during API requests and responses.",
      "description_length": 360,
      "index": 740,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of public IPv4 pool lists in XML, JSON, and query formats. It operates specifically on lists of `PublicIpv4Pool.t` structures, providing direct conversions between these formats and OCaml values. It is used when interacting with EC2 APIs that require or return public IPv4 pool data, such as retrieving or configuring IP pool information.",
      "description_length": 411,
      "index": 741,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DefaultRouteTableAssociationValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing route table association states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to configure whether a subnet automatically associates with the default route table in EC2 operations.",
      "description_length": 413,
      "index": 742,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 NAT gateway resources. It provides functions to convert NAT gateway lists to and from XML, JSON, and query parameters, enabling integration with AWS API requests and responses. Use this module when managing NAT gateway configurations programmatically, such as during VPC setup or network monitoring workflows.",
      "description_length": 342,
      "index": 743,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBundleTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling a bundle task in EC2, including the bundle ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when interacting with EC2 bundle task cancellation operations, particularly when preparing requests for the AWS SDK.",
      "description_length": 353,
      "index": 744,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeType",
      "library": "aws-ec2",
      "description": "This module defines a variant type representing the different volume types available in EC2, such as `Standard`, `Io1`, `Gp2`, and others. It provides direct conversions between these types and strings, JSON, and XML, enabling straightforward serialization and deserialization. These functions are used when configuring or interpreting EC2 volume resources in API requests and responses.",
      "description_length": 387,
      "index": 745,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCount",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking instance counts in EC2 listings, with optional numeric count and state fields. It provides operations to construct, serialize, and convert instances of this structure to and from JSON, query parameters, and XML. Use this when managing EC2 instance listings with state transitions, such as tracking available or pending instances.",
      "description_length": 379,
      "index": 746,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful fleet deletion in EC2, including the current and previous fleet states along with the fleet ID. It provides functions to construct, parse, and serialize this data for use in API requests and responses. Use this module when handling responses from deleting EC2 fleets to track fleet state transitions and identifiers.",
      "description_length": 393,
      "index": 747,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UsageClassType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Spot` and `On_demand`, representing EC2 instance usage classes. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. It is used to specify and handle instance purchasing options in EC2 API operations.",
      "description_length": 347,
      "index": 748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayAddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of NAT gateway address data structures, providing direct conversions to and from XML, JSON, and query formats. It supports parsing from XML nodes, constructing empty lists, and serializing to AWS-specific query and JSON representations. Concrete use cases include processing EC2 NAT gateway address responses from AWS APIs and preparing them for further consumption or storage.",
      "description_length": 403,
      "index": 749,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTagsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for tagging EC2 resources, including fields for dry-run mode, resource IDs, and tags. It provides functions to construct, parse, and serialize tag requests in formats suitable for API queries or JSON payloads. Use this module when programmatically adding metadata tags to EC2 instances or other resources via the AWS SDK.",
      "description_length": 361,
      "index": 750,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating a VPC endpoint, including parameters like VPC ID, service name, route tables, and security groups. It provides functions to construct, serialize, and parse endpoint requests in JSON and XML formats. Use this module when programmatically setting up VPC endpoints for AWS services like S3 or DynamoDB.",
      "description_length": 350,
      "index": 751,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorSessionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror sessions, including the session set and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include processing and transmitting lists of traffic mirror sessions with support for paginated results.",
      "description_length": 364,
      "index": 752,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnEndpointRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a Client VPN endpoint in AWS EC2, including the endpoint ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include preparing deletion requests before sending them via the EC2 API client.",
      "description_length": 332,
      "index": 753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing disk images in EC2, including optional description, image details, and volume details. It provides functions to construct, parse, and serialize disk image data to and from XML, JSON, and query formats. Use this module when working with EC2 disk image configurations, such as importing or exporting disk images.",
      "description_length": 364,
      "index": 754,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointConnectionNotificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoint connection notifications, including a dry-run flag and a list of notification IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring deletion of specific VPC endpoint connection notifications in AWS infrastructure management workflows.",
      "description_length": 390,
      "index": 755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC attributes, including the VPC ID, attribute name, and optional dry-run flag. It provides functions to construct, parse, and serialize requests in various formats, such as JSON and query strings. Concrete use cases include retrieving VPC attribute details like DNS support or instance tenancy when interacting with the EC2 API.",
      "description_length": 383,
      "index": 756,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN endpoint, with optional `code` and `message` fields indicating state or errors. It provides functions to construct, serialize, and convert the structure to and from JSON, query parameters, and XML. Concrete use cases include handling API responses and status updates when managing Client VPN endpoints in AWS EC2.",
      "description_length": 390,
      "index": 757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing network interface permissions in AWS EC2, including fields such as permission ID, network interface ID, AWS account ID, service, and permission state. It provides functions to construct, serialize, and deserialize these permissions for use in API requests and responses. Use cases include granting or revoking access to network interfaces and tracking the state of those permissions.",
      "description_length": 433,
      "index": 758,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceState",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the state of an EC2 instance, with operations to construct, parse, and serialize the state to and from XML, JSON, and query formats. It works with integer codes and state names to model specific instance conditions like running, stopped, or terminated. Concrete use cases include tracking instance lifecycle states in AWS management tools and converting state data for API requests and responses.",
      "description_length": 450,
      "index": 759,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkDnsSupportRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to enable VPC classic link DNS support, containing an optional VPC ID. It provides functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON. Concrete use cases include configuring VPC settings in AWS EC2 via API calls that require VPC ID identification.",
      "description_length": 364,
      "index": 760,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AdvertiseByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for advertising a BYOIP CIDR block in EC2, including the CIDR string and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when preparing to advertise a custom IP range to AWS EC2, either in dry-run mode or for actual execution.",
      "description_length": 351,
      "index": 761,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateVersion",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 launch template version, including fields like template ID, version number, creation time, and associated launch template data. It provides functions to construct, serialize, and deserialize instances for use in API requests and responses. Concrete use cases include managing EC2 instance configurations and tracking versioned launch templates in AWS infrastructure code.",
      "description_length": 428,
      "index": 762,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing specific EC2 account attribute names, such as `Supported_platforms` and `Default_vpc`. It provides conversions to and from strings, JSON, and query formats, enabling direct use in API requests and responses. These operations are essential for interacting with AWS EC2 account attributes in a type-safe manner.",
      "description_length": 353,
      "index": 763,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailableInstanceCapacityList",
      "library": "aws-ec2",
      "description": "This module handles lists of instance capacity information, providing functions to convert to and from JSON and query formats, as well as parsing from XML. It works with instance capacity records, which describe the remaining capacity of an EC2 instance type in a specific availability zone. Use this module when managing EC2 capacity data for auto-scaling or instance placement decisions.",
      "description_length": 389,
      "index": 764,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 Client VPN endpoint. It includes fields for the endpoint ID, optional subnet ID, destination CIDR block, and dry run flag, along with functions to construct, parse, and serialize the request for API calls. It is used when managing Client VPN routing configurations in AWS.",
      "description_length": 345,
      "index": 765,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring and managing Traffic Mirror targets in AWS EC2, including fields such as target ID, network interface ID, load balancer ARN, target type, and tags. It provides functions to construct, serialize, and deserialize these target configurations, supporting operations needed to integrate with AWS services. Use cases include setting up network monitoring by associating mirror targets with VPC resources.",
      "description_length": 451,
      "index": 766,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of placement group IDs in AWS EC2 operations. It provides functions to convert, parse, and serialize string lists to and from XML, JSON, and query formats. It is used when managing placement groups in requests like describing or terminating multiple groups.",
      "description_length": 283,
      "index": 767,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTagsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 tags, providing constructors, parsers, and serializers for the result structure. It works with optional pagination tokens and lists of tag descriptions, primarily used when retrieving metadata tags for EC2 resources. Concrete use cases include processing responses from EC2's DescribeTags API, handling paginated results, and converting between XML, JSON, and internal data representations.",
      "description_length": 439,
      "index": 768,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageDiskContainer",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying disk container information when importing or exporting EC2 images. It includes fields for disk description, device name, format, snapshot ID, source URL, and user bucket configuration. Operations include constructing instances, parsing XML input, converting to query parameters or JSON, and creating instances from JSON data. Use cases include handling disk container details during EC2 image import/export workflows.",
      "description_length": 469,
      "index": 769,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 launch template, supporting operations to construct, serialize, and parse the request data. It works with string and boolean types to represent optional parameters like template ID, template name, and dry-run flag. Concrete use cases include building API requests to delete a specific launch template by ID or name, and converting between JSON or query string formats for HTTP requests.",
      "description_length": 446,
      "index": 770,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListResourceIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based prefix list resource IDs for AWS EC2 operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It is used when managing EC2 prefix list associations or referencing multiple prefix lists in API requests.",
      "description_length": 316,
      "index": 771,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicePermissionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying permissions of a VPC endpoint service, including fields like service ID, filters, and pagination options. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when managing access control for VPC endpoint services in AWS EC2, allowing precise filtering and retrieval of permission details.",
      "description_length": 420,
      "index": 772,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpnConnectionRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 VPN connection. It includes operations to create, parse, and serialize the request data, specifically handling CIDR blocks and VPN connection IDs. It is used when managing routing configurations for AWS EC2 virtual private networks.",
      "description_length": 305,
      "index": 773,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointConnectionNotificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC endpoint connection notifications, including fields like dry-run flag, notification ID, ARN, and event list. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring or updating connection event notifications for VPC endpoints in AWS.",
      "description_length": 374,
      "index": 774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetPasswordDataRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for making password data retrieval requests to EC2 instances. It includes operations to construct, serialize, and parse requests in various formats, including JSON and query strings. It works with instance identifiers and optional dry-run flags to simulate request behavior.",
      "description_length": 311,
      "index": 775,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the target types for traffic mirroring, specifically network interfaces and network load balancers. It provides bidirectional conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON and query formats. It is used when configuring or interpreting traffic mirroring targets in EC2, particularly when specifying where mirrored traffic should be sent.",
      "description_length": 476,
      "index": 776,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeTaskDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking details of an import volume task, including availability zone, bytes converted, description, image, and volume information. It provides functions to construct, parse, and serialize these details for use in API requests and responses. Concrete use cases include managing EC2 volume imports from disk images and handling task metadata in workflows involving virtual machine migrations.",
      "description_length": 433,
      "index": 777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for making requests to purchase scheduled EC2 instances, including optional client tokens and dry-run flags. It provides functions to construct, parse, and serialize these requests in various formats such as JSON and query strings. Concrete use cases include submitting batched purchase requests to AWS EC2 and validating request configurations before execution.",
      "description_length": 399,
      "index": 778,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdentityIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying identity ID formats in EC2, with fields for a principal ARN and an optional resource. It provides functions to construct, parse, and serialize the request to query parameters or JSON. Use this when configuring or retrieving ID format settings for resources tied to a specific IAM principal.",
      "description_length": 343,
      "index": 779,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIamInstanceProfileSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profile requests in EC2 launch templates, with optional ARN and name fields. It provides functions to construct, serialize, and parse these specifications to and from JSON, query parameters, and XML. Use this when configuring IAM roles for EC2 instances at launch time, particularly when working with AWS SDK bindings in OCaml.",
      "description_length": 392,
      "index": 780,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 fleets, containing a token for pagination and a set of fleet data. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when handling responses from AWS EC2 API calls that list fleet information.",
      "description_length": 324,
      "index": 781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for FPGA image attributes, including optional fields for identifiers, metadata, and permissions. It provides functions to construct, serialize, and deserialize these attributes using JSON, query parameters, and XML. Use this module when managing FPGA image configurations in EC2, particularly for handling access permissions and product codes during instance setup or image distribution.",
      "description_length": 424,
      "index": 782,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateHostsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of allocating dedicated hosts in EC2, primarily storing a list of allocated host IDs. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when managing host allocation responses from the EC2 API, particularly for retrieving and processing assigned host identifiers.",
      "description_length": 390,
      "index": 783,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchPermissionModifications",
      "library": "aws-ec2",
      "description": "This module handles modifications to EC2 image launch permissions by allowing the addition or removal of permission entries. It works with structured data types representing lists of launch permissions, enabling precise updates to shared image access settings. Use this module when adjusting which AWS accounts or organizations can launch a specific EC2 image.",
      "description_length": 360,
      "index": 784,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringConnectionOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 peering connection options, including DNS resolution and traffic egress settings between VPCs and ClassicLink. It provides functions to construct, serialize, and convert these options to and from JSON and query formats. Use this module when setting up or modifying VPC peering connections with specific network access rules.",
      "description_length": 381,
      "index": 785,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 local gateway, with fields for identifiers, state, and associated tags. It provides functions to construct, parse, and serialize local gateway data for use in API requests and responses. These operations support managing local gateways within AWS EC2, including retrieving and tagging resources.",
      "description_length": 352,
      "index": 786,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStorageInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing instance storage details of an EC2 instance, including total storage size, disk configurations, and NVMe support. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when retrieving or configuring instance storage properties in AWS EC2 instance metadata or API requests.",
      "description_length": 394,
      "index": 787,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesListingList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances Listing data. It provides operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when managing reserved instance listings in AWS EC2, particularly for API interactions requiring structured list input or output.",
      "description_length": 321,
      "index": 788,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAggregateIdFormatRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing ID format settings in EC2, containing an optional dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats, as well as to create an instance from JSON input. Use this when configuring or querying resource ID formatting behavior in EC2 operations.",
      "description_length": 350,
      "index": 789,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateSubnetCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a subnet CIDR block in AWS EC2, specifically tracking the IPv6 CIDR block association and subnet ID involved. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when handling EC2 subnet CIDR block disassociation events, particularly when managing IPv6 network configurations.",
      "description_length": 405,
      "index": 790,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Traffic Mirror filter, including its ID, ingress and egress rules, associated network services, description, and tags. It provides functions to construct, serialize, and parse this structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving Traffic Mirror filters in AWS EC2 for network traffic analysis.",
      "description_length": 395,
      "index": 791,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ApplianceModeSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a simple enumeration type with two values, `Enable` and `Disable`, representing appliance mode support settings. It provides bidirectional conversion between strings and the enumerated type, along with standard serialization and deserialization functions for JSON, XML, and query parameters. This module is used when configuring EC2 resources that require explicit appliance mode support settings, such as virtual private gateways or transit gateways.",
      "description_length": 471,
      "index": 792,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachmentState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a volume attachment in EC2, including attaching, attached, detaching, detached, and busy. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to interpret and manipulate volume attachment state data when interacting with EC2 APIs, such as when monitoring volume attachment progress or handling API responses.",
      "description_length": 522,
      "index": 793,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseSpecificationListRequest",
      "library": "aws-ec2",
      "description": "This module handles lists of license configuration requests for EC2 launch templates. It provides operations to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when configuring or modifying EC2 instances that require license management through launch templates.",
      "description_length": 316,
      "index": 794,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 instance launch templates, including fields like instance type, storage mappings, networking, and security settings. It provides functions to construct, serialize, and parse these templates, supporting operations like converting to HTTP queries or JSON for API requests. Use cases include creating customized EC2 instance configurations and interfacing with AWS EC2 APIs for automated deployments.",
      "description_length": 454,
      "index": 795,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring transit gateway settings, such as ASN, route table associations, and support options. It provides functions to construct, parse, and serialize these configurations to and from JSON, query strings, and XML. Use this module when creating or managing AWS EC2 transit gateways with custom routing and connectivity options.",
      "description_length": 389,
      "index": 796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentRequestOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for DNS support, IPv6 support, and appliance mode support, used to configure transit gateway VPC attachments. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. It is used when modifying the options of a transit gateway VPC attachment in AWS EC2.",
      "description_length": 366,
      "index": 797,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for updating egress rule descriptions on a security group. It includes fields for dry run flag, group ID, group name, and a list of IP permissions. Operations allow constructing, parsing, converting to query format, and serializing to and from JSON. Use this when modifying outbound security group rules in EC2 with specific descriptions.",
      "description_length": 378,
      "index": 798,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuAssociationList",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of elastic GPU associations in XML and JSON formats. Works with lists of `ElasticGpuAssociation.t` values. Used when retrieving or sending batches of elastic GPU association data to and from AWS EC2 APIs.",
      "description_length": 253,
      "index": 799,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecordEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling EC2 fleet history records, including event details, timestamps, and event types. It provides functions to construct, serialize, and convert history record entries to and from JSON, query parameters, and XML. It is used to process and persist EC2 fleet event data in different formats for logging, monitoring, or auditing purposes.",
      "description_length": 380,
      "index": 800,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TunnelOption",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing tunnel options for configuring virtual private gateways, with fields for IP addresses, encryption settings, and protocol parameters. It provides functions to construct, parse, and serialize tunnel configurations for use in API requests or responses. Concrete use cases include setting up secure tunnels with specific cryptographic algorithms and timeouts for AWS EC2 virtual private cloud connections.",
      "description_length": 451,
      "index": 801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResponseHostIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based host IDs in AWS EC2 responses. It provides functions to parse, convert to query format, and serialize to and from JSON. It is used when working with host ID lists in EC2 API operations like describing hosts or managing host reservations.",
      "description_length": 279,
      "index": 802,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module handles the result of enabling fast snapshot restores in EC2, containing sets of successful and unsuccessful operations. It provides functions to construct, parse, and convert the result to various formats like JSON and query parameters. Use this module when processing responses from EC2's fast snapshot restore API calls.",
      "description_length": 335,
      "index": 803,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing route table propagation details for a transit gateway, including attachment ID, resource ID, resource type, and propagation state. It provides functions to construct, parse, and serialize these details into query parameters or JSON format. Concrete use cases include managing route propagation configurations in AWS EC2 transit gateways and processing responses from related API calls.",
      "description_length": 435,
      "index": 804,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationPreference",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Open` and `None`, representing capacity reservation preferences. It provides functions to convert between strings and the enumerated type, including case-insensitive parsing and string formatting. Additionally, it supports serialization to and from JSON, query parameters, and XML, making it suitable for use in AWS EC2 API requests and responses.",
      "description_length": 398,
      "index": 805,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a transit gateway route table in AWS EC2. It includes operations to create, parse, and serialize the result, which contains an optional transit gateway association. Use this module when managing transit gateway route table disassociations and processing the resulting association state.",
      "description_length": 335,
      "index": 806,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 price schedules, providing functions to parse XML input into price schedule objects, convert them to query parameters or JSON format, and construct price schedule lists from JSON data. It works directly with EC2 price schedule records, typically used when managing reserved instances and pricing details. Concrete use cases include processing AWS EC2 pricing responses, building requests for reserved instance purchases, and integrating price schedule data into larger configuration workflows.",
      "description_length": 526,
      "index": 807,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN connection IDs represented as strings. It provides operations to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when managing multiple VPN connections, such as in batch deletion or status checks.",
      "description_length": 290,
      "index": 808,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeMovingAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying moving Elastic IP addresses in EC2, supporting filtering by criteria such as public IPs, and includes options for dry-run validation, pagination, and result limits. It provides functions to construct, serialize, and convert the request to and from JSON and XML formats. Concrete use cases include listing moving addresses with specific filters, paginating through large result sets, and validating request parameters without execution.",
      "description_length": 488,
      "index": 809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 host reservations, supporting filtering by attributes, specifying reservation IDs, and controlling result pagination. It includes functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving filtered lists of host reservations and handling paginated results in EC2 management tools.",
      "description_length": 410,
      "index": 810,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 snapshot attributes, including fields like snapshot ID, user permissions, and group names. It provides functions to construct, parse, and serialize these requests for use with AWS API calls. Use this module when adjusting access controls or permissions for EC2 snapshots programmatically.",
      "description_length": 343,
      "index": 811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeHypervisor",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Nitro` and `Xen`, representing hypervisor types for EC2 instance types. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. These operations support parsing and formatting hypervisor information when interacting with AWS EC2 APIs and responses.",
      "description_length": 385,
      "index": 812,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleScreenshotResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving an EC2 instance's console screenshot. It provides constructors, JSON and XML parsers, and query builders for a type containing optional image data and instance ID strings. It is used to process and serialize responses from EC2 screenshot operations.",
      "description_length": 294,
      "index": 813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a transit gateway multicast domain, including fields for the multicast domain ID, transit gateway attachment ID, subnet IDs, and a dry run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring or modifying transit gateway multicast associations in AWS infrastructure code.",
      "description_length": 422,
      "index": 814,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetNetwork",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a target network in EC2, with optional fields for association, VPC, and endpoint identifiers, along with security groups and association status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing Client VPN endpoint associations and tracking network configuration state in EC2.",
      "description_length": 423,
      "index": 815,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResourceIdList",
      "library": "aws-ec2",
      "description": "Handles lists of string-based resource IDs in AWS EC2 operations. Provides functions to convert resource ID lists to and from XML, JSON, and query parameters. Used when managing groups of EC2 resources like instances or volumes via their string identifiers.",
      "description_length": 257,
      "index": 816,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for running scheduled EC2 instances, including parameters like client token, dry run flag, instance count, launch specification, and scheduled instance ID. It provides functions to construct, parse, and serialize the request for use with AWS API calls, specifically handling XML and JSON formats. Use cases include initiating scheduled instance runs with custom configurations and integrating with AWS SDK workflows.",
      "description_length": 456,
      "index": 817,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway route in EC2, with optional fields for CIDR block, virtual interface group ID, route type, state, route table identifiers, and owner information. It provides functions to construct, parse, and convert route data to and from XML, JSON, and query formats. Use this module when managing local gateway routes in AWS EC2, such as when creating or inspecting route tables for virtual interfaces.",
      "description_length": 455,
      "index": 818,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FastSnapshotRestoreStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state codes for fast snapshot restores in EC2, including enabling, optimizing, enabled, disabling, and disabled states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to manage and interpret the state of fast snapshot restores when interacting with EC2 APIs.",
      "description_length": 458,
      "index": 819,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 integrity algorithm requests, containing an optional string value. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. It is used when configuring or retrieving IPsec VPN tunnel options in EC2, specifically for specifying allowed integrity algorithms during Phase 1 negotiation.",
      "description_length": 434,
      "index": 820,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCpuOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in a launch template, with optional core count and threads per core settings. It provides functions to construct, serialize, and parse these options for use in API requests. Concrete use cases include configuring EC2 instance CPU settings when creating or modifying launch templates via the AWS SDK.",
      "description_length": 363,
      "index": 821,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of Phase 1 DH group numbers used in EC2 VPN connection requests. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of `Phase1DHGroupNumbersRequestListValue.t`. It is used when configuring or modifying EC2 VPN tunnel options that require specifying Diffie-Hellman groups.",
      "description_length": 422,
      "index": 822,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPN connection in AWS EC2. It provides functions to create, parse, and serialize a result containing an optional updated VpnConnection object. Use this module when processing responses from modifying a VPN connection in AWS, particularly for handling XML, JSON, or query string formats.",
      "description_length": 332,
      "index": 823,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ActivityStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible activity statuses in EC2, such as fulfillment or termination states. It provides direct conversions between strings and the enumerated type, along with serialization to and from JSON and query formats. It is used to interpret and generate EC2 activity status values during API interactions or state tracking.",
      "description_length": 378,
      "index": 824,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CertificateAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying certificate authentication requests in EC2, primarily used when configuring client VPN endpoints. It includes operations to create, serialize, and parse certificate authentication data, focusing on the ARN of the client root certificate chain. The module works with XML, JSON, and query string formats for integration with AWS API requests.",
      "description_length": 392,
      "index": 825,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deregistering instance event notification attributes in EC2. It includes a single optional field for instance tag attributes and provides functions to construct, parse, and convert the result to query parameters or JSON. It is used when managing event notifications for EC2 instances, specifically when updating or removing tag-based event filters.",
      "description_length": 382,
      "index": 826,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HttpTokensState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with values `Optional` and `Required`, representing the state of HTTP tokens for EC2 instance metadata. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support configuring and interpreting EC2 instance metadata settings in API requests and responses.",
      "description_length": 412,
      "index": 827,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Tag",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing AWS EC2 tags, consisting of key-value pairs. It provides functions to construct tags, convert them to and from JSON and query formats, and parse them from XML nodes. Use cases include managing metadata for EC2 resources such as instances, volumes, and snapshots.",
      "description_length": 316,
      "index": 828,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientCertificateRevocationListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting a client certificate revocation list for a Client VPN endpoint. It provides functions to construct, parse, and serialize the result, which includes the revocation list and its status. Use this module when managing Client VPN certificate revocation workflows, such as exporting and processing revocation lists in JSON or query formats.",
      "description_length": 378,
      "index": 829,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding detailed information about an EC2 snapshot, including fields like snapshot ID, status, progress, and associated user bucket details. It provides functions to construct, parse, and serialize snapshot details to and from JSON, query parameters, and XML. Use this module when managing snapshot metadata in AWS EC2 workflows, such as tracking snapshot creation status or exporting snapshot data.",
      "description_length": 440,
      "index": 830,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllowedPrincipal",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying allowed principals in EC2 security configurations, with optional fields for principal type and identifier. It includes functions to construct, serialize, and deserialize these structures using JSON, query parameters, or XML input. Concrete use cases include managing VPC endpoint policies and configuring cross-account access in EC2 resources.",
      "description_length": 395,
      "index": 831,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservationState",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing the state of an EC2 reservation, with variants for payment pending, payment failed, active, and retired states. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. It is used to interpret and format reservation state data when interacting with AWS EC2 APIs, particularly during resource status checks and provisioning workflows.",
      "description_length": 469,
      "index": 832,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing carrier gateways in AWS EC2, including fields such as gateway ID, VPC ID, state, owner ID, and tags. It provides functions to construct, parse, and serialize carrier gateway data for use in API requests and responses. Specific use cases include managing carrier gateway configurations and handling gateway state transitions in network setups.",
      "description_length": 396,
      "index": 833,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling account attribute values in AWS EC2, specifically containing an optional string attribute. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when retrieving or setting account-level attributes such as maximum instance limits or VPC quotas via the EC2 API.",
      "description_length": 382,
      "index": 834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVpnGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for attaching a virtual private gateway to a VPC, including fields for VPC ID, VPN gateway ID, and an optional dry-run flag. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. It is used specifically in EC2 operations to manage VPC connectivity through VPN gateways.",
      "description_length": 393,
      "index": 835,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of VPC CIDR block association sets in AWS EC2. It provides functions to convert between XML, JSON, and internal OCaml representations of a list of VPC CIDR block associations. It is used when managing VPC network configurations, such as retrieving or updating associated CIDR blocks from AWS API responses.",
      "description_length": 371,
      "index": 836,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for attaching an EBS volume to an EC2 instance, including fields for the device name, instance ID, volume ID, and an optional dry-run flag. It provides functions to construct, serialize, and parse this structure for use in API requests. Concrete use cases include preparing volume attachment requests, validating parameters before execution, and integrating with AWS SDK workflows.",
      "description_length": 418,
      "index": 837,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a capacity reservation in EC2, containing an optional `CapacityReservation` object. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this when handling responses from the EC2 API after creating a capacity reservation to extract and work with the reservation details.",
      "description_length": 402,
      "index": 838,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeKeyPairsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 key pairs, primarily by parsing and serializing key pair data. It works with XML, JSON, and query formats to facilitate interactions with AWS EC2 APIs. Concrete use cases include converting key pair responses to JSON for client-side processing or parsing XML responses from AWS.",
      "description_length": 327,
      "index": 839,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTablePropagationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving transit gateway route table propagations, including fields like route table ID, filters, pagination, and dry-run options. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when interacting with AWS EC2 APIs to manage and query route table propagation settings.",
      "description_length": 396,
      "index": 840,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling EBS encryption by default, containing an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when configuring EC2 EBS encryption settings programmatically, particularly to test or apply encryption defaults across volumes.",
      "description_length": 359,
      "index": 841,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 instance network interfaces. It provides functions to convert between XML, JSON, and query string formats for network interface data. Use this when working with AWS EC2 API responses or requests involving network interface lists.",
      "description_length": 297,
      "index": 842,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 volume attributes, including fields like volume ID, size, type, and IOPS. It provides functions to construct, parse, and serialize volume modification requests to JSON or query parameters. Use this module when adjusting volume configurations programmatically, such as resizing a volume or changing its performance characteristics.",
      "description_length": 385,
      "index": 843,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpotMarketOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring spot market options in EC2 launch templates, including max price, spot instance type, block duration, validity period, and interruption behavior. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. Use this module when setting up or modifying EC2 spot instance requests with specific market options.",
      "description_length": 430,
      "index": 844,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthorizationRuleStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of client VPN authorization rules, with specific values like `Authorizing`, `Active`, `Failed`, and `Revoking`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. These operations support handling status updates and responses in API interactions related to client VPN configurations.",
      "description_length": 472,
      "index": 845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot market options in EC2, including fields like maximum price, spot instance type, block duration, validity period, and interruption behavior. It provides functions to construct, parse, and convert these options to and from JSON and query formats. Use this module when setting up or modifying spot instances with specific bidding and runtime constraints.",
      "description_length": 409,
      "index": 846,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceUsage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking EC2 instance usage, including the account ID and the number of used instances. It provides functions to create, serialize, and convert instance usage data to and from JSON and query formats. This module is used to process and manage instance usage information returned by AWS EC2 API operations like `DescribeInstanceUsage`.",
      "description_length": 374,
      "index": 847,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume details in EC2, primarily handling the size of a volume as a long integer. It provides functions to construct, parse, and convert volume details to and from XML, JSON, and query formats. Use this module when working with EC2 volume information in API requests or responses, particularly for handling storage size metadata.",
      "description_length": 383,
      "index": 848,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImagesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying FPGA images in EC2, supporting filtering by image IDs, owners, and custom filters, along with pagination via `next_token` and `max_results`. It provides functions to construct, parse, and serialize the request in JSON or query string formats. Concrete use cases include listing FPGA images owned by specific accounts or matching metadata tags, and paginating through large result sets.",
      "description_length": 438,
      "index": 849,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 route tables, including a list of route tables and an optional pagination token. It provides functions to construct, parse, and convert results to and from JSON and query formats. It is used when processing responses from AWS EC2's DescribeRouteTables API call.",
      "description_length": 310,
      "index": 850,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a VPC peering connection in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional VPC peering connection object. Use cases include processing API responses when establishing peering connections between virtual private clouds.",
      "description_length": 319,
      "index": 851,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 launch template block device mappings. It provides operations to convert between XML, JSON, and internal OCaml representations of block device mappings. Use this module when working with EC2 instance storage configurations, such as defining EBS volumes or ephemeral disks in launch templates.",
      "description_length": 360,
      "index": 852,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelExportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling an export task, containing a single field for the export task ID. It provides functions to create, parse, and convert the request to query or JSON formats, as well as to construct it from JSON input. This module is used specifically when interacting with EC2 export task cancellation APIs, where precise serialization and deserialization of the task identifier is required.",
      "description_length": 427,
      "index": 853,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a transit gateway route, containing an optional `TransitGatewayRoute` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from AWS EC2 API calls that create transit gateway routes, enabling integration with AWS tooling and infrastructure management workflows.",
      "description_length": 449,
      "index": 854,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 volumes, including a list of volumes and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used when processing responses from the EC2 API's `DescribeVolumes` operation, particularly for handling paginated results.",
      "description_length": 357,
      "index": 855,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing an IPv6 address associated with a scheduled EC2 instance. It provides functions to construct, parse, and serialize the IPv6 address to and from XML, JSON, and query string formats. Use this module when configuring or retrieving IPv6 settings for scheduled EC2 instances in AWS.",
      "description_length": 329,
      "index": 856,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateEnclaveCertificateIamRoleResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of disassociating an IAM role from an enclave certificate in EC2. It includes functions to construct, parse, and serialize the result, primarily working with boolean values wrapped in an option type. It is used to handle responses from the EC2 API when managing enclave certificate IAM role disassociations.",
      "description_length": 370,
      "index": 857,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network interface's private IP address configuration, including optional association metadata, primary status, private DNS name, and private IP address. It provides functions to construct, serialize, and parse this structure for use in EC2 network interface management tasks such as querying or configuring IP addresses in AWS environments. The module supports conversion to and from JSON and query formats for integration with AWS API requests and responses.",
      "description_length": 511,
      "index": 858,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.WithdrawByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of withdrawing a Bring Your Own IP (BYOIP) CIDR block in EC2. It provides constructors, parsing, and serialization functions for a type that optionally contains a `ByoipCidr` record. Use this module when managing IP address ranges imported into EC2 to track the outcome of withdrawal operations.",
      "description_length": 326,
      "index": 859,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModification",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying reserved EC2 instances, including fields like modification ID, status, timestamps, and associated instance IDs. It provides functions to construct, parse, and serialize these records to and from JSON, query parameters, and XML. Concrete use cases include handling responses from AWS EC2 API calls that modify reserved instance configurations, such as updating instance counts or terms.",
      "description_length": 459,
      "index": 860,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfigurationValueList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP configuration values in AWS EC2 by providing functions to parse, convert to query format, and serialize to and from JSON. It operates specifically on lists of `AttributeValue.t` type, which represent individual DHCP options. Use cases include processing DHCP options when configuring or retrieving EC2 instance network settings.",
      "description_length": 362,
      "index": 861,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelledSpotInstanceRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of cancelled EC2 spot instance requests. It provides functions to convert, parse, and serialize these lists to and from XML, JSON, and query formats. It is used when managing responses or requests involving multiple cancelled spot instance entries in EC2 APIs.",
      "description_length": 286,
      "index": 862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying DHCP options in EC2, supporting filtering by IDs and custom filters. It includes operations to construct, parse, and serialize requests in various formats, including JSON and query strings. Concrete use cases include retrieving DHCP configurations for network management and inspecting option sets before applying them to VPCs.",
      "description_length": 380,
      "index": 863,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateSecurityGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a security group in AWS EC2, containing the group ID and associated tags. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from EC2's CreateSecurityGroup API calls, particularly for extracting and working with the returned group ID and tags.",
      "description_length": 435,
      "index": 864,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCustomerGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing customer gateways in EC2, including optional identifiers, filters, and a dry-run flag. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. It is used when querying AWS EC2 for customer gateway configurations, allowing filtering and simulation without actual modification.",
      "description_length": 397,
      "index": 865,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PricingDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding pricing details with optional count and price fields. It provides functions to construct, parse, and convert pricing data to and from XML, JSON, and query formats. It is used to represent and manipulate pricing information in EC2 service interactions, such as retrieving or sending pricing data in API requests and responses.",
      "description_length": 374,
      "index": 866,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying instance credit specifications in EC2, supporting operations to set burstable performance credits. It works with boolean and string types for configuration, along with a list of instance credit specifications. It is used to adjust credit settings for EC2 instances programmatically, typically when managing cost and performance trade-offs for burstable instances.",
      "description_length": 417,
      "index": 867,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignIpv6AddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for assigning IPv6 addresses to a network interface in EC2. It includes operations to construct, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with string, integer, and list types to manage network interface identifiers and IPv6 address assignments.",
      "description_length": 348,
      "index": 868,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters to describe scheduled EC2 instances, including filters, result limits, and time ranges. It provides functions to construct, parse, and serialize these parameters for use in API requests. Concrete use cases include querying scheduled instance details with specific constraints, paginating through results, and filtering by instance IDs or start times.",
      "description_length": 413,
      "index": 869,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatesMonitoringRequest",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing monitoring configuration for EC2 launch templates, with an optional boolean flag indicating whether monitoring is enabled. It provides functions to construct, parse, and serialize this configuration to and from JSON, query parameters, and XML. Use this when configuring or modifying EC2 instance monitoring settings programmatically.",
      "description_length": 377,
      "index": 870,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DetachVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying parameters to detach an EC2 volume, including the volume ID, instance ID, device name, force flag, and dry run option. It provides functions to construct, parse, and serialize these parameters into query strings, JSON, and XML formats. Concrete use cases include preparing API requests to detach EBS volumes from EC2 instances, validating input parameters, and integrating with AWS SDK workflows.",
      "description_length": 448,
      "index": 871,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRuleResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a Traffic Mirror filter rule, containing an optional ID of the deleted rule. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from EC2 API calls that delete Traffic Mirror filter rules, enabling downstream processing or logging of the deleted rule's identifier.",
      "description_length": 461,
      "index": 872,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionLogResponseOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling connection logging options in AWS EC2, specifically capturing settings for CloudWatch logs. It provides constructors, JSON and XML parsers, and query conversion functions to manage log configuration responses. Use this module when configuring or retrieving VPC flow log settings that target CloudWatch as the destination.",
      "description_length": 371,
      "index": 873,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeByoipCidrsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing BYOIP CIDR blocks in EC2, containing a set of BYOIP CIDR entries and an optional pagination token. It provides operations to construct, serialize, and parse these results in various formats including JSON, query parameters, and XML. It is used when managing Bring-Your-Own-IP address ranges in AWS EC2.",
      "description_length": 350,
      "index": 874,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignPrivateIpAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for assigning private IP addresses to an EC2 network interface. It includes operations to create, parse, and serialize the request in various formats such as JSON and query strings. It works directly with network interface identifiers, lists of private IP addresses, and boolean or integer options to control assignment behavior.",
      "description_length": 369,
      "index": 875,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPC IDs represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require multiple VPC IDs in requests or responses.",
      "description_length": 292,
      "index": 876,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for describing VPC endpoint services in AWS EC2. It includes functions to construct, parse, and serialize requests using query parameters, JSON, or XML, supporting filtering, pagination, and dry-run options. Concrete use cases include querying available VPC endpoint services, applying filters to narrow results, and handling paginated responses when listing services.",
      "description_length": 436,
      "index": 877,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of GPU device information in AWS EC2. It provides functions to convert GPU device lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with GPU instance metadata or configuring GPU-based EC2 instances.",
      "description_length": 282,
      "index": 878,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulQueuedPurchaseDeletion",
      "library": "aws-ec2",
      "description": "This module handles the deletion of queued Reserved Instance purchases in EC2. It provides constructors, JSON and XML parsers, and query builders for a type containing an optional Reserved Instance ID. It is used to process responses from the EC2 API when canceling pending Reserved Instance purchases.",
      "description_length": 302,
      "index": 879,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsOptimizedSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing EBS optimization support states (`Unsupported`, `Supported`, `Default`) and provides bidirectional conversions between strings and the type. It includes functions for parsing and serializing values to and from XML, JSON, and query parameters. This module is used when configuring EC2 instance types with EBS optimization settings in AWS deployments.",
      "description_length": 401,
      "index": 880,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating DHCP options in EC2, including configurations, optional tags, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include setting up custom DNS servers, domain names, and other network configurations for EC2 instances.",
      "description_length": 355,
      "index": 881,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusActionsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of volume status actions. It provides functions to convert between XML, JSON, and query string representations of this list, specifically working with `VolumeStatusAction.t`. It is used when processing and formatting volume status action data retrieved from or sent to the EC2 API.",
      "description_length": 364,
      "index": 882,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding the result of creating an FPGA image, including optional identifiers for the image and its global ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This module is used to handle responses from FPGA image creation operations in EC2, enabling easy extraction and serialization of resulting image identifiers.",
      "description_length": 420,
      "index": 883,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeSecurityGroupIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for authorizing ingress traffic to a security group, with fields like CIDR IP ranges, port ranges, and IP protocols. It provides functions to construct, parse, and serialize requests for modifying security group rules. Concrete use cases include configuring firewall rules for EC2 instances by specifying allowed network traffic sources and protocols.",
      "description_length": 388,
      "index": 884,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an EC2 image export task, with fields for metadata like task ID, image ID, export format, S3 location, status, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query parameters. Concrete use cases include handling responses from AWS EC2 export image API calls and managing export task details in automation scripts.",
      "description_length": 438,
      "index": 885,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoints, including fields like dry-run mode, endpoint IDs, filters, and pagination. It provides functions to construct, parse, and serialize these requests into query parameters or JSON format. Concrete use cases include retrieving specific VPC endpoint configurations, applying filters for custom network policies, and handling paginated results in large-scale infrastructure queries.",
      "description_length": 444,
      "index": 886,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CertificateAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for certificate authentication in EC2, specifically handling an optional client root certificate chain. It provides functions to construct, serialize, and deserialize this structure to and from JSON, query parameters, and XML. Use this module when configuring or retrieving certificate-based authentication settings for EC2 resources like client VPN endpoints.",
      "description_length": 397,
      "index": 887,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModification",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of an EC2 volume modification, including fields like volume ID, modification state, target and original sizes, IOPS, volume types, progress percentage, and timestamps. It provides functions to construct, parse, and serialize these records for use in API requests and responses. Concrete use cases include tracking ongoing volume modifications, reporting status messages, and converting between XML/JSON representations and internal data models.",
      "description_length": 504,
      "index": 888,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for a traffic mirror session creation operation, containing an optional traffic mirror session and a client token. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. Concrete use cases include handling and transmitting the output of an EC2 traffic mirror session creation request in AWS SDK workflows.",
      "description_length": 393,
      "index": 889,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a transit gateway multicast domain, containing an optional set of associations. It provides functions to construct, parse, and serialize the structure in various formats including JSON, XML, and query parameters. It is used when managing multicast domain associations in EC2 transit gateways, particularly for network configuration and resource tracking.",
      "description_length": 430,
      "index": 890,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementResponse",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the placement response from an EC2 operation, primarily containing an optional `group_name` string. It provides functions to construct, parse, and serialize this data structure to and from XML, JSON, and query formats. Use this module when handling EC2 placement responses in API requests or responses, particularly for working with placement group information.",
      "description_length": 417,
      "index": 891,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotsRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 snapshot description requests, supporting filtering, pagination, ownership, and visibility controls. It includes functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include querying specific snapshots by ID, filtering by owner or attributes, and paginating through large result sets.",
      "description_length": 409,
      "index": 892,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateEnclaveCertificateIamRoleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating an enclave certificate with an IAM role in EC2. It includes fields for certificate ARN, role ARN, and a dry-run flag, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring secure enclave instances that require temporary credentials from AWS Certificate Manager.",
      "description_length": 374,
      "index": 893,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelConversionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for canceling a conversion task in EC2, including the task ID, optional dry-run flag, and an optional reason message. It provides functions to construct, parse, and serialize the structure to query parameters or JSON. It is used when issuing a cancellation request for a specific conversion task in EC2.",
      "description_length": 340,
      "index": 894,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelledSpotInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling canceled EC2 spot instance requests, including their IDs and cancellation states. It provides functions to construct, parse, and convert these structures to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS EC2 API calls related to spot instance cancellations.",
      "description_length": 356,
      "index": 895,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving routes associated with a Client VPN endpoint in AWS EC2. It includes operations to construct, serialize, and parse the request data, supporting filtering, pagination, and dry-run options. It works directly with EC2's FilterList, string identifiers, integers, and boolean flags, integrating with AWS query and JSON formats for API communication.",
      "description_length": 399,
      "index": 896,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ManagedPrefixListSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of managed prefix list objects. It provides functions to convert between XML, JSON, and query formats, specifically for working with AWS EC2 managed prefix list data in API requests and responses. Common use cases include processing AWS EC2 API responses containing prefix list information and preparing prefix list data for AWS API requests.",
      "description_length": 424,
      "index": 897,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceEventStartTimeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying an EC2 instance event start time. It provides constructors, JSON and XML parsers, and query conversion for a structure containing an optional instance status event. It is used to process and serialize responses from the EC2 API when adjusting scheduled maintenance events.",
      "description_length": 316,
      "index": 898,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 addresses associated with network interfaces. It provides functions to create, parse, and serialize IPv6 address data to and from XML, JSON, and query formats. Use this module when managing EC2 network interface configurations that involve IPv6 addressing.",
      "description_length": 311,
      "index": 899,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageList",
      "library": "aws-ec2",
      "description": "This module represents a list of disk images in the EC2 API, providing functions to convert the list to and from JSON, query format, and XML. It supports operations for serializing and deserializing disk image data when interacting with AWS services. Use this module when handling batch disk image responses or requests in EC2 operations.",
      "description_length": 338,
      "index": 900,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.UserBucket",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and key information, with operations to create, parse, and serialize the structure to query parameters or JSON. It works with optional string values representing S3 bucket names and object keys. It is used when configuring EC2 instances to reference external resources stored in Amazon S3, such as boot scripts or configuration files.",
      "description_length": 396,
      "index": 901,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceEventNotificationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance event notification attributes in EC2. It includes fields for enabling dry-run mode and specifying instance tag attributes, with operations to construct, parse, and serialize the structure to query or JSON formats. It is used when registering event notifications for EC2 instances, particularly for specifying which instance tags should trigger events.",
      "description_length": 413,
      "index": 902,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 network interface, including optional dry-run validation. It provides functions to construct, serialize, and parse the request using JSON or query parameters. Concrete use cases include safely testing deletion configurations and programmatically removing network interfaces in AWS EC2.",
      "description_length": 345,
      "index": 903,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskS3LocationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and prefix information when configuring an EC2 export task. It includes functions to create, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include setting up S3 output locations for EC2 instance exports and handling related API requests.",
      "description_length": 347,
      "index": 904,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionListRequest",
      "library": "aws-ec2",
      "description": "This module defines a list of load permission requests and provides functions to convert between XML, JSON, and query string formats. It works with lists of `LoadPermissionRequest.t` values, enabling serialization and deserialization for API interactions. Concrete use cases include preparing batch load permission updates for EC2 images and parsing responses from AWS API calls.",
      "description_length": 379,
      "index": 905,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesModificationIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based reserved instances modification IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing reserved instance modifications, such as applying or tracking multiple modification requests.",
      "description_length": 324,
      "index": 906,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateway attachments, including a list of attachments and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving and handling transit gateway attachment data from AWS EC2, especially when managing pagination.",
      "description_length": 387,
      "index": 907,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a transit gateway route table and a resource, such as a VPC or VPN attachment. It includes functions to construct, serialize, and deserialize the association using JSON, query parameters, or XML input. Concrete use cases include managing route table associations in AWS EC2 transit gateways when configuring network routing.",
      "description_length": 397,
      "index": 908,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesSecurityGroupIdSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of lists of EC2 security group IDs for scheduled instances. Works with string lists representing security group identifiers. Used to convert security group IDs to and from XML, JSON, and query string formats when configuring or retrieving scheduled EC2 instances.",
      "description_length": 312,
      "index": 909,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateClientVpnTargetNetworkResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disassociating a client VPN target network in AWS EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. The module works with a result type that contains an optional association ID and an optional association status.",
      "description_length": 301,
      "index": 910,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeElasticGpusResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing elastic GPUs in EC2, providing constructors, parsers, and serializers for the result structure. It works with a record type containing sets of elastic GPUs, optional max results, and a next token for pagination. Concrete use cases include processing and serializing responses from EC2's `DescribeElasticGpus` API call for further processing or API testing.",
      "description_length": 401,
      "index": 911,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying fast snapshot restore settings in EC2, supporting filtering, pagination, and dry-run options. It works with AWS-specific types such as filters, integers, strings, and booleans, and integrates with XML, JSON, and query parameter serialization. It is used to construct and deconstruct API requests when managing snapshot restore configurations in AWS EC2.",
      "description_length": 406,
      "index": 912,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IAM instance profiles in EC2, with optional ARN and ID fields. It provides functions to construct, parse, and convert instance profiles to and from JSON and query formats. Use this module when configuring or retrieving EC2 instances that require IAM roles.",
      "description_length": 310,
      "index": 913,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Reservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 reservation, containing associated security groups, instances, owner and reservation identifiers. It provides functions to construct, parse, and convert reservation data to and from XML, JSON, and query formats. Concrete use cases include handling EC2 instance reservation responses from AWS API calls and serializing them for further processing or storage.",
      "description_length": 414,
      "index": 914,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHttpTokensState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Optional` and `Required`, representing the state of HTTP tokens for an EC2 launch template. It includes functions to convert between string representations and the enumerated values, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to configure and manage IMDS (Instance Metadata Service) HTTP token settings when working with EC2 instance launch templates.",
      "description_length": 463,
      "index": 915,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Placement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement configurations of EC2 instances, including fields like availability zone, tenancy, and host ID. It provides functions to construct, serialize, and deserialize placement data for use in API requests and responses. Concrete use cases include configuring instance placement when launching EC2 instances or parsing placement details from existing instances.",
      "description_length": 415,
      "index": 916,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance data by providing functions to parse, convert, and manipulate instance collections. It works with XML nodes, JSON values, and query parameters, enabling direct transformations between these formats and a list of instance records. Use this module when processing batch responses from EC2 APIs, such as listing running instances or handling auto-scaling group data.",
      "description_length": 405,
      "index": 917,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulInstanceCreditSpecificationItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an unsuccessful credit specification update for an EC2 instance, containing an optional instance ID and an error. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling responses from batch operations that modify credit specifications for multiple instances, capturing per-instance errors.",
      "description_length": 420,
      "index": 918,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroupsConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for target groups, including serialization and deserialization functions. It works with XML, JSON, and query parameter formats to enable interaction with AWS EC2 APIs. Use this module when configuring or retrieving target group settings in load balancing scenarios.",
      "description_length": 311,
      "index": 919,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointConnectionNotificationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a VPC endpoint connection notification, including optional fields for the connection notification and client token. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Concrete use cases include handling AWS API responses when setting up notifications for VPC endpoint connections, ensuring proper formatting and extraction of response data.",
      "description_length": 469,
      "index": 920,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportSnapshotTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying import snapshot tasks in EC2, supporting filtering by task IDs and custom filters, and controlling result pagination. It provides functions to construct, parse, and serialize the request in various formats including JSON and query strings. Concrete use cases include retrieving the status of specific import tasks, listing tasks with custom filters, and handling paginated results from the EC2 API.",
      "description_length": 451,
      "index": 921,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointConnectionSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of VPC endpoint connection lists. It provides functions to convert between XML, JSON, and query string representations of these connections. Use this module when working with AWS EC2 VPC endpoint connection data in different formats, such as when processing API responses or constructing requests.",
      "description_length": 370,
      "index": 922,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of an EC2 snapshot: `Pending`, `Completed`, or `Error`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization to JSON and query formats. These operations are used when handling snapshot state data in API requests and responses, such as interpreting server replies or constructing input parameters for AWS EC2 operations.",
      "description_length": 479,
      "index": 923,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayPeeringAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying transit gateway peering attachments in AWS EC2. It includes operations to construct, serialize, and parse requests with support for filtering, pagination, and dry-run options. The module works directly with EC2-specific types such as transit gateway attachment IDs, filters, and standard AWS primitives like integers and strings.",
      "description_length": 382,
      "index": 924,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a spot instance request, including open, active, closed, cancelled, and failed. It provides functions to convert between string representations and the enumerated type, as well as serialization to and from JSON and query formats. The module is used to interpret and manipulate spot instance state data when interacting with EC2 APIs, particularly during request lifecycle tracking and response parsing.",
      "description_length": 477,
      "index": 925,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachmentState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a transit gateway attachment in AWS EC2. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when interacting with EC2 APIs to manage and track the lifecycle of transit gateway attachments.",
      "description_length": 420,
      "index": 926,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllowsMultipleInstanceTypes",
      "library": "aws-ec2",
      "description": "This module defines a binary type `t` representing whether multiple instance types are allowed in EC2 configurations. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. It is used to configure Auto Scaling group options that control instance type diversity.",
      "description_length": 308,
      "index": 927,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of import snapshot task IDs in AWS EC2. It provides functions to parse, convert to query format, and serialize to and from JSON. It works directly with lists of base string types, specifically for managing task identifiers in snapshot import workflows.",
      "description_length": 278,
      "index": 928,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetGroupsForCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving capacity reservation groups in EC2. It provides operations to create, parse, and serialize results containing a token for pagination and a set of capacity reservation groups. It is used when processing responses from AWS EC2 API calls that list capacity reservation groups, supporting both JSON and XML formats.",
      "description_length": 356,
      "index": 929,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 subnet objects, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, along with structured output generation for subnets. Use this module when processing batch subnet data from AWS API responses or preparing subnet lists for API requests.",
      "description_length": 340,
      "index": 930,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddPrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of prefix list entries for EC2 operations. It works with lists of `AddPrefixListEntry` records, converting them to and from XML, JSON, and query formats. It is used when modifying prefix lists in EC2 by adding or updating CIDR entries.",
      "description_length": 293,
      "index": 931,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstancePlacementResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying an EC2 instance's placement. It includes functions to construct, parse, and serialize the result, primarily working with boolean and JSON data types. It is used to handle responses from AWS EC2 API calls that modify instance placement settings.",
      "description_length": 318,
      "index": 932,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing an EC2 import snapshot task, including its description, task ID, snapshot details, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to manage snapshot import tasks in AWS EC2, such as tracking task status or organizing tasks using tags.",
      "description_length": 375,
      "index": 933,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetImageAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with one variant `LaunchPermission`, representing attributes that can be reset on an EC2 image. It provides bidirectional conversions between strings and the enumerated type, along with standard serialization and parsing functions for XML, JSON, and query parameters. This module is used when modifying image launch permissions via the EC2 API, specifically for resetting attribute values.",
      "description_length": 438,
      "index": 934,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SearchLocalGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching local gateway routes in EC2, providing structured access to route data and pagination. It works with `LocalGatewayRouteList.t` for route entries and an optional string token for pagination. Use this module to process and serialize route search responses from EC2, particularly when handling paginated results.",
      "description_length": 353,
      "index": 935,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ByoipCidrSet",
      "library": "aws-ec2",
      "description": "This module handles a list of BYOIP CIDR blocks, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with `Aws_ec2.Types.ByoipCidr.t` lists and is used when managing Bring Your Own IP address ranges in EC2 operations. Concrete use cases include handling API requests and responses involving BYOIP CIDR allocations.",
      "description_length": 372,
      "index": 936,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying route tables in EC2, supporting filtering by attributes, specifying route table IDs, and controlling result pagination. It includes operations to construct, serialize, and parse route table queries in JSON, XML, and AWS query formats. Concrete use cases include retrieving route table details for network configuration auditing and automating VPC routing management.",
      "description_length": 419,
      "index": 937,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImageState",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the state of an EC2 image, with variants like `Pending`, `Available`, and `Failed`. It provides conversions to and from strings, JSON, and query parameters, enabling integration with AWS APIs. Use this module when handling image state transitions or status checks in EC2 management workflows.",
      "description_length": 336,
      "index": 938,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupReferences",
      "library": "aws-ec2",
      "description": "Handles parsing and serialization of EC2 security group reference data. Works with lists of `SecurityGroupReference.t` structures, converting between XML, JSON, and query formats. Useful for interacting with AWS EC2 APIs that require security group reference information in specific wire formats.",
      "description_length": 296,
      "index": 939,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines and manipulates placement strategy types used in EC2 instance configurations. It provides direct conversions between string representations and the enumerated type values (Cluster, Spread, Partition), supporting serialization to and from JSON, XML, and query parameters. Concrete use cases include handling placement strategy input/output in API requests and responses for EC2 services.",
      "description_length": 406,
      "index": 940,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SendDiagnosticInterruptRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for sending diagnostic interrupts to EC2 instances, containing an instance ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when initiating diagnostic actions on EC2 instances, such as triggering a kernel panic for debugging.",
      "description_length": 362,
      "index": 941,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnEndpointsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing Client VPN endpoints in AWS EC2. It includes fields to specify endpoint IDs, result limits, pagination tokens, filters, and a dry-run flag. Operations allow constructing, parsing, and converting the request to query or JSON formats for API calls.",
      "description_length": 303,
      "index": 942,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVgwRoutePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling route propagation from a virtual private gateway to a route table. It includes operations to create, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with EC2 route tables and virtual gateways, used when managing route propagation behavior in AWS networking configurations.",
      "description_length": 383,
      "index": 943,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of deleting EC2 launch template versions, containing sets of successfully and unsuccessfully deleted version responses. It provides operations to construct, parse, and serialize the result for use in API responses and queries. Use this module when handling the outcome of batch deletion requests for launch template versions in EC2.",
      "description_length": 366,
      "index": 944,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetGroupsForCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving resource groups associated with a capacity reservation in AWS EC2. It includes functions to construct, serialize, and parse the request data, supporting operations like query parameter conversion, JSON serialization, and XML parsing. Concrete use cases include interacting with EC2's API to manage capacity reservations and handle paginated results using `next_token` and `max_results`.",
      "description_length": 441,
      "index": 945,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting a Transit Gateway VPC attachment in AWS EC2. It provides operations to create, parse, and serialize the result, which includes an optional Transit Gateway VpcAttachment object. Use this module when processing responses from accepting VPC attachments to a Transit Gateway in AWS.",
      "description_length": 322,
      "index": 946,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based capacity reservation IDs for EC2 operations. It provides functions to convert the list into query parameters or JSON, and to parse reservation IDs from XML or JSON input. Use this module when working with EC2 API requests that require specifying capacity reservations, such as launching instances or managing reservations.",
      "description_length": 365,
      "index": 947,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying options of a specific EC2 VPN connection. It includes fields for specifying IPv4 and IPv6 CIDR ranges for local and remote networks, as well as a dry-run flag. The module provides functions to construct, parse, and serialize the structure to different formats like JSON and query parameters.",
      "description_length": 342,
      "index": 948,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetExcessCapacityTerminationPolicy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `No_termination` and `Termination`, representing policies for handling excess capacity in EC2 fleets. It provides functions to convert between string representations and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used when configuring EC2 fleet options that determine whether excess instances should be terminated or left running.",
      "description_length": 456,
      "index": 949,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointConnectionNotificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoint connection notifications in AWS EC2. It includes a list of any items that could not be processed, using the `UnsuccessfulItemSet` type. It provides functions to construct, parse, and serialize the result for use in queries and JSON responses.",
      "description_length": 298,
      "index": 950,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 import image tasks, providing direct conversions to and from XML, JSON, and query formats. It supports parsing task lists from XML nodes and constructing JSON or query representations for API interactions. Use this when managing bulk responses or requests involving image import tasks in EC2.",
      "description_length": 325,
      "index": 951,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnassignIpv6AddressesResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of unassigning IPv6 addresses from a network interface. It includes operations to create, parse, and serialize the result in various formats such as JSON and query parameters. It works with string and IPv6 address list types to represent the network interface and its associated IPv6 addresses.",
      "description_length": 355,
      "index": 952,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetInstancesResponse",
      "library": "aws-ec2",
      "description": "This module handles responses from describing EC2 Spot Fleet instances, providing access to active instance sets, pagination tokens, and fleet request IDs. It includes operations for constructing, parsing, and serializing response data to and from XML, JSON, and query formats. Concrete use cases include processing results from AWS EC2 API calls to manage and monitor Spot Fleet instance populations.",
      "description_length": 401,
      "index": 953,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociations",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing associations for EC2 transit gateway multicast domains, including identifiers for multicast domains, attachments, resources, and subnets. It provides functions to construct, parse, and serialize these associations to and from XML, JSON, and query formats. Concrete use cases include managing multicast domain configurations in AWS EC2 by associating subnets and tracking resource relationships.",
      "description_length": 444,
      "index": 954,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VersionStringList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and querying of string lists in AWS EC2 API operations. Works with `Aws.BaseTypes.String.t list` for handling version strings in API requests and responses. Used to convert version string lists to and from JSON and query parameters when interacting with EC2 endpoints.",
      "description_length": 300,
      "index": 955,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Internet Gateway attachment objects. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing VPC internet gateway associations in AWS EC2 responses or requests.",
      "description_length": 278,
      "index": 956,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 instance block device mapping specifications. It works with XML nodes, JSON values, and AWS query parameters to convert between these formats and the internal list structure. Use it when configuring or inspecting block device mappings for EC2 instances, such as modifying root volume settings or attaching additional storage.",
      "description_length": 393,
      "index": 957,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceGroupSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway virtual interface group sets in EC2. It provides functions to convert between XML, JSON, and query string formats and a list-based structure of virtual interface groups. Use this module when working with AWS EC2 responses or requests that involve local gateway configurations, particularly for parsing and constructing group sets in API calls or event data.",
      "description_length": 447,
      "index": 958,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 instance metadata options, including state, HTTP token requirements, hop limit, and endpoint status. It provides functions to construct, parse, and serialize this structure for use in API requests and responses. Concrete use cases include configuring instance metadata settings when launching or modifying EC2 instances via the AWS SDK.",
      "description_length": 390,
      "index": 959,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HypervisorType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing hypervisor types with two variants: `Ovm` and `Xen`. It provides functions to convert between strings and the enumerated type, including bidirectional mappings, JSON and XML parsing, and query parameter serialization. It is used to handle hypervisor type values in AWS EC2 API requests and responses, ensuring correct serialization and deserialization across different formats.",
      "description_length": 421,
      "index": 960,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and operations for creating an EC2 launch template request. It includes fields like `launch_template_name`, `launch_template_data`, and optional parameters such as `dry_run`, `client_token`, and `tag_specifications`. It supports serialization to and from JSON and query formats, enabling direct interaction with AWS EC2 APIs for template creation and configuration.",
      "description_length": 399,
      "index": 961,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 route table, with fields for associations, routes, tags, and identifiers like route_table_id and vpc_id. It provides functions to construct, parse, and serialize route tables to formats like JSON and AWS query format. Use this module when managing or querying route tables in EC2, such as when listing or modifying routing rules for VPCs.",
      "description_length": 395,
      "index": 962,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 snapshot, containing the snapshot ID and an optional dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats. Use this when issuing deletion commands to AWS EC2 to ensure correct parameter formatting and validation.",
      "description_length": 325,
      "index": 963,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnmonitorInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling detailed monitoring on EC2 instances, containing a list of instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing and sending unmonitor requests to EC2, validating input before submission, and integrating with JSON-based configuration or response handling.",
      "description_length": 432,
      "index": 964,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedIntancesIds",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of reserved instance IDs in AWS EC2. It provides functions to convert these lists to and from XML, JSON, and query parameters, ensuring correct formatting for API interactions. Use cases include processing responses from AWS EC2's API and constructing requests involving multiple reserved instance IDs.",
      "description_length": 384,
      "index": 965,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuInfo",
      "library": "aws-ec2",
      "description": "This module handles GPU information for EC2 instances, including lists of GPU devices and optional total GPU memory in MiB. It provides functions to construct, parse, and convert GPU data to and from XML, query parameters, and JSON. Use this module when retrieving or configuring GPU specifications for EC2 instance types.",
      "description_length": 322,
      "index": 966,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BlobAttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling optional binary large object (Blob) values in the context of EC2 service interactions. It provides functions to create, parse, and convert BlobAttributeValue instances to and from query parameters, JSON, and XML formats. Concrete use cases include managing binary metadata attributes in EC2 instance configurations or snapshot data.",
      "description_length": 382,
      "index": 967,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 transit gateway route table, including the route table ID, destination CIDR block, and an optional dry-run flag. It provides functions to construct, serialize, and parse this request in various formats such as JSON, XML, and query parameters. It is used when managing transit gateway routing in AWS EC2, specifically for removing specific CIDR-based routes.",
      "description_length": 430,
      "index": 968,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating a Client VPN route in AWS EC2, including required fields like endpoint ID, destination CIDR block, and target subnet ID. It provides functions to construct, parse, and serialize route requests in various formats such as JSON and query parameters. Use this module when configuring or automating Client VPN routing within an AWS environment.",
      "description_length": 389,
      "index": 969,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for EC2 instance monitoring configurations, including an instance ID and monitoring settings. It provides functions to create, serialize, and convert monitoring data to and from JSON and XML formats. Use this module to configure or retrieve monitoring information for EC2 instances, such as enabling detailed monitoring or parsing monitoring status from API responses.",
      "description_length": 405,
      "index": 970,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CpuOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options with optional core count and threads per core. It provides functions to create, parse, and convert CPU options to and from JSON and query formats. Use this module when configuring EC2 instance CPU settings programmatically.",
      "description_length": 287,
      "index": 971,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DetachInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for detaching an internet gateway from a VPC, including fields for dry-run checks, internet gateway ID, and VPC ID. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when managing network connectivity in EC2 by programmatically detaching internet gateways from virtual private clouds.",
      "description_length": 405,
      "index": 972,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTarget",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation targets in EC2, with optional fields for capacity reservation ID and resource group ARN. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Use this module when configuring EC2 instances to target specific capacity reservations or resource groups during launch.",
      "description_length": 397,
      "index": 973,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetHostReservationPurchasePreviewRequest",
      "library": "aws-ec2",
      "description": "This module constructs and manipulates requests for previewing host reservation purchases by combining a set of host IDs and a specific offering ID. It supports parsing XML input into request structures, converting requests to query parameters or JSON format, and reconstructing requests from JSON data. Concrete use cases include preparing and validating EC2 host reservation purchases using AWS API interactions.",
      "description_length": 414,
      "index": 974,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a scheduled EC2 instance with fields for scheduling metadata, instance configuration, and time-related properties. It provides functions to construct instances, convert to and from JSON and query formats, and parse XML data into structured values. Concrete use cases include managing scheduled instance data returned from AWS API calls, serializing instance configurations for storage or transmission, and deserializing responses from EC2 scheduling operations.",
      "description_length": 511,
      "index": 975,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 route table, including a dry run flag and route table ID. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring or tearing down network routing in EC2 environments.",
      "description_length": 300,
      "index": 976,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying EC2 instance attributes, supporting operations like updating block device mappings, security groups, and instance behavior settings. It works with data types such as strings, boolean values, and lists, specifically tied to EC2 instance configurations. Use cases include adjusting instance termination protection, changing shutdown behavior, and updating network or storage configurations programmatically.",
      "description_length": 459,
      "index": 977,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetInstancesSet",
      "library": "aws-ec2",
      "description": "This module handles the creation and manipulation of EC2 fleet instance sets. It provides functions to convert instance lists to query parameters, parse XML responses, and serialize to and from JSON. It works with lists of `CreateFleetInstance.t` values, supporting operations needed to interact with AWS EC2 fleet APIs.",
      "description_length": 320,
      "index": 978,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring VPN connections with optional fields for IP version settings, network CIDRs, and tunnel options. It provides functions to construct, parse, and serialize these configurations to and from JSON, query strings, and XML. Concrete use cases include setting up AWS EC2 VPN connections with custom tunnel parameters and CIDR ranges for IPv4 and IPv6 networks.",
      "description_length": 402,
      "index": 979,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of private IP addresses represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with EC2 instance configurations that involve specifying or retrieving multiple private IP addresses.",
      "description_length": 315,
      "index": 980,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of resetting the default KMS key ID for EBS volumes, containing an optional KMS key identifier. It provides functions to construct, serialize, and convert the structure to and from JSON and XML formats. It is used specifically in handling responses from AWS EC2 API calls related to EBS encryption settings.",
      "description_length": 368,
      "index": 981,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying Phase 1 encryption algorithms in EC2 requests, containing an optional string value. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include configuring IPsec settings for EC2 instances and serializing encryption algorithm preferences for API requests.",
      "description_length": 388,
      "index": 982,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot instance requests in AWS EC2, including fields like availability zone group, spot price, instance count, and launch specifications. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query parameters. Use this module when programmatically requesting spot instances with custom configurations like interruption behavior, tagging, and time-based validity windows.",
      "description_length": 476,
      "index": 983,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InferenceAcceleratorInfo",
      "library": "aws-ec2",
      "description": "This module handles inference accelerator information for EC2 instances, primarily working with a list of inference device info structures. It provides functions to construct, parse, and convert accelerator data to query parameters or JSON format. Use this module when configuring or retrieving details about inference accelerators attached to EC2 instances, such as when launching or describing instance configurations.",
      "description_length": 420,
      "index": 984,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayMulticastDomainResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for deleting an EC2 transit gateway multicast domain, containing an optional `TransitGatewayMulticastDomain` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used specifically to handle responses from the EC2 API when deleting multicast domains associated with transit gateways.",
      "description_length": 412,
      "index": 985,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInternetGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 internet gateways, including filters, gateway IDs, and pagination parameters. It provides functions to construct, parse, and serialize requests for querying internet gateway information. Use this module when retrieving details about internet gateways in an AWS EC2 environment, particularly for filtering or paginating through gateway resources.",
      "description_length": 406,
      "index": 986,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines a set of strategies for allocating spot instances in EC2, including lowest price, diversified, and capacity-optimized. It provides conversions between string representations and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. These functions are used when configuring spot instance requests with specific allocation behaviors.",
      "description_length": 411,
      "index": 987,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of successfully disabling fast snapshot restore for an EC2 snapshot. It includes fields for the snapshot ID, availability zone, state transitions, timestamps, and owner information. Operations include creating instances, parsing XML responses, converting to query parameters or JSON, and constructing from JSON.",
      "description_length": 372,
      "index": 988,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcTenancyResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPC's tenancy in AWS EC2, specifically capturing whether the operation succeeded. It works with a single data type `t` that contains an optional boolean indicating the result. Use this module to interpret and serialize responses from EC2 when changing VPC tenancy settings.",
      "description_length": 319,
      "index": 989,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceInterruptionBehavior",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible behaviors for spot instance interruption in EC2, including Hibernate, Stop, and Terminate. It provides functions to convert between string representations and the enumerated values, as well as serialization and deserialization to and from JSON, XML, and query parameters. Use this module when configuring spot instance interruption handling in EC2 instance launch templates or managing spot fleet requests.",
      "description_length": 471,
      "index": 990,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcPeeringConnectionOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying VPC peering connection options, containing optional updated configurations for both the accepter and requester sides. It provides functions to construct, parse, and serialize this result to and from XML, JSON, and query formats. It is used when updating peering connection settings in AWS EC2 to capture and handle the returned response.",
      "description_length": 411,
      "index": 991,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointServiceConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration request structure for creating a VPC endpoint service. It includes fields for specifying load balancers, DNS settings, tagging, and client tokens, along with functions to construct, serialize, and parse the request in various formats. It is used when setting up VPC endpoint services that integrate with network or gateway load balancers.",
      "description_length": 376,
      "index": 992,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an Elastic GPU with optional fields such as ID, availability zone, type, health, state, instance ID, and tags. It provides functions to construct, parse, and convert Elastic GPU data to and from JSON, query format, and XML. Use this module when managing GPU resources in EC2, particularly for operations like describing or tagging Elastic GPUs.",
      "description_length": 394,
      "index": 993,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateErrorCode",
      "library": "aws-ec2",
      "description": "This module defines a set of error codes related to EC2 launch templates, including malformed or missing IDs, names, and versions. It provides bidirectional conversions between these error codes and strings, along with serialization and deserialization functions for JSON, XML, and query parameters. These operations are used to handle and communicate specific error conditions during launch template operations in AWS EC2.",
      "description_length": 423,
      "index": 994,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsResponse",
      "library": "aws-ec2",
      "description": "This module handles responses from canceling EC2 spot fleet requests by structuring the result into successful and unsuccessful request sets. It provides functions to construct, parse, and serialize the response data for use in API interactions. Concrete use cases include processing AWS API XML responses and formatting them for further handling or logging.",
      "description_length": 358,
      "index": 995,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateIamInstanceProfileResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating an IAM instance profile with an EC2 instance. It provides functions to construct, parse, and convert the result to common formats like JSON and query strings. The primary data type is a record containing an optional IAM instance profile association.",
      "description_length": 295,
      "index": 996,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplate",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 launch template with optional fields for ID, name, timestamps, version numbers, creator, and tags. It provides functions to construct, parse, and convert launch templates to and from JSON, query parameters, and XML. Concrete use cases include managing EC2 instance configurations, retrieving template metadata, and handling versioned templates in AWS deployments.",
      "description_length": 420,
      "index": 997,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetLaunchTemplateDataRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving launch template data associated with an EC2 instance. It includes operations to construct, parse, and serialize the request, supporting interactions with the EC2 API. The module works with XML, JSON, and query string formats for request transmission.",
      "description_length": 305,
      "index": 998,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSecurityGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 security group, supporting operations to create, parse, and serialize the request. It works with string and boolean types to represent group identifiers and dry-run flags. Concrete use cases include constructing API requests to delete security groups by ID or name, and converting between XML, JSON, and query string formats for AWS API interactions.",
      "description_length": 410,
      "index": 999,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing volume attribute names in EC2, with variants `AutoEnableIO` and `ProductCodes`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support handling volume attribute data in API requests and responses.",
      "description_length": 359,
      "index": 1000,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSnapshotsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating EC2 snapshots, including optional description, instance specification, tagging options, dry run flag, and tag copying behavior. It provides functions to construct, parse, and serialize snapshot requests in various formats such as JSON and query parameters. It is used when initiating snapshot operations for EC2 instances, particularly for backup or image creation workflows.",
      "description_length": 430,
      "index": 1001,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecords",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 history records. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `HistoryRecord.t` structures. Use this module when processing EC2 event history data from AWS APIs, especially when integrating with tools that require JSON or XML input.",
      "description_length": 368,
      "index": 1002,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableEbsEncryptionByDefaultRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling EBS encryption by default in AWS EC2. It includes operations to construct, serialize, and parse the request, primarily working with boolean and XML/JSON data formats. It is used when configuring EC2 instance storage settings to disable encryption on EBS volumes at creation time.",
      "description_length": 333,
      "index": 1003,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportClientVpnClientCertificateRevocationListRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting a Client VPN client certificate revocation list, containing the endpoint ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when interacting with AWS EC2's Client VPN service to manage certificate revocation programmatically.",
      "description_length": 375,
      "index": 1004,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing Client VPN connections in EC2, providing access to the list of connections and an optional pagination token. It works with `ClientVpnConnectionSet.t` for the connections and a String option for the next token. Use this module when retrieving and processing active Client VPN sessions, especially when handling paginated responses from the EC2 API.",
      "description_length": 392,
      "index": 1005,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedEnclaveCertificateIamRolesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving IAM roles associated with an EC2 enclave certificate. It includes operations to construct, serialize, and parse the request, supporting both JSON and XML formats. It is used when managing permissions for enclave certificates in AWS EC2.",
      "description_length": 291,
      "index": 1006,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrincipalIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing principal ID format preferences in EC2. It includes operations to create, parse, and convert result data to and from JSON and query formats. It works with lists of principal ID format descriptions and optional pagination tokens, used when managing resource ID formatting settings for AWS principals.",
      "description_length": 344,
      "index": 1007,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a local gateway route table in AWS EC2, with optional fields for identifiers, state, and metadata. It provides functions to construct, parse, and serialize route table data to and from XML, JSON, and query formats. Concrete use cases include managing route table configurations in EC2, such as retrieving route table details from API responses or building requests for route table creation or modification.",
      "description_length": 456,
      "index": 1008,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnassignPrivateIpAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for unassigning private IP addresses from a network interface, including the network interface ID and a list of private IP addresses. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. Use this module when managing EC2 network interfaces and their associated IP addresses in AWS.",
      "description_length": 388,
      "index": 1009,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportToS3Task",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring and handling EC2 image export tasks to S3. It includes functions to create, parse, and serialize export task configurations, supporting operations like converting to HTTP queries and JSON for API interactions. It is used when exporting EC2 instances or images to S3, particularly for capturing container and disk image formats along with S3 bucket and key details.",
      "description_length": 417,
      "index": 1010,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 capacity reservations, including metadata like instance count, availability zone, and state. It provides functions to construct, parse, and convert capacity reservation data to and from JSON, query parameters, and XML. Use this module when managing reserved capacity in EC2, such as when creating or inspecting capacity reservations via the AWS API.",
      "description_length": 407,
      "index": 1011,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedTargetNetwork",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an associated target network with optional network ID and type. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML. Use this module when managing VPC associations in EC2, particularly for working with network targets in AWS Direct Connect or similar services.",
      "description_length": 362,
      "index": 1012,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in EC2 instances, including device names, virtual names, EBS configurations, and device exclusion. It provides functions to construct, serialize, and parse these mappings to and from XML, JSON, and query formats. Use this module when configuring storage for EC2 instances, particularly when setting up EBS volumes or mapping ephemeral disks.",
      "description_length": 415,
      "index": 1013,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of modifying a VPC endpoint, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling the output of VPC endpoint modification operations in AWS EC2.",
      "description_length": 348,
      "index": 1014,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostReservationIdSet",
      "library": "aws-ec2",
      "description": "This module represents a list of host reservation IDs as strings. It provides functions to convert the list to and from JSON and query formats, as well as parsing from XML nodes. It is used when interacting with EC2 host reservations, particularly for batch operations involving multiple reservation IDs.",
      "description_length": 304,
      "index": 1015,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewaySubnetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Transit Gateway subnet IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, and includes functions to parse and construct them. Use this module when working with AWS EC2 Transit Gateway APIs that require handling multiple subnet IDs in different data formats.",
      "description_length": 349,
      "index": 1016,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a Client VPN route, including states like `Creating`, `Active`, `Failed`, and `Deleting`. It provides bidirectional conversions between the type and strings, along with serialization and deserialization functions for JSON and query parameters. These features support handling route status in API requests and responses, particularly when integrating with AWS EC2 services.",
      "description_length": 444,
      "index": 1017,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceCreditSpecificationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance credit specifications, including a list of credit specifications and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving or handling burstable performance instance credit settings in AWS EC2.",
      "description_length": 376,
      "index": 1018,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 host reservations, providing constructors, parsers, and serializers for the result structure. It works with host reservation sets and optional pagination tokens. Use this module to process responses from EC2 when listing host reservations, including handling pagination and converting results to and from JSON or query formats.",
      "description_length": 376,
      "index": 1019,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of a spot instance request in AWS EC2, specifically managing a list of spot instance requests. It provides functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. Use this module when processing responses from the EC2 API after initiating spot instance requests.",
      "description_length": 335,
      "index": 1020,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a placement group in EC2, including `Pending`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversions between strings and the enumerated type, as well as serialization and deserialization functions for JSON, XML, and query parameters. These operations are used when interacting with EC2 APIs to interpret and transmit placement group state information.",
      "description_length": 450,
      "index": 1021,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes for associations in EC2, such as `Associating`, `Associated`, and `Disassociated`. It provides bidirectional conversions between these status codes and strings, JSON, and XML, along with utilities to parse and serialize them. These functions are used when handling EC2 API responses that include association status, such as network interface or route table associations.",
      "description_length": 439,
      "index": 1022,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceCapacityReservationAttributesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying an EC2 instance's capacity reservation attributes. It includes operations to create, parse, and serialize the request for use with AWS API calls, specifically handling instance IDs, capacity reservation specifications, and optional dry-run flags. The module works with XML, JSON, and query string formats for integration with AWS SDK components.",
      "description_length": 399,
      "index": 1023,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServiceConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for configuring VPC endpoint services. It supports modifying service settings including DNS configuration, acceptance requirements, and load balancer associations. The type works with strings, boolean flags, and lists of ARNs for network and gateway load balancers.",
      "description_length": 314,
      "index": 1024,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 flow log IDs, represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when managing flow logs, such as when retrieving or filtering logs by ID in EC2 operations.",
      "description_length": 292,
      "index": 1025,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for bundling an EC2 instance, including the instance ID, storage configuration, and an optional dry-run flag. It provides functions to construct, serialize, and parse bundle instance requests in various formats such as JSON and query parameters. Concrete use cases include preparing and submitting requests to bundle EC2 instances into images for backup or distribution.",
      "description_length": 407,
      "index": 1026,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotPriceHistoryList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot price history entries. It provides functions to convert the list to and from XML, JSON, and query string formats. Use this when processing responses or requests involving multiple spot price records from EC2 APIs.",
      "description_length": 251,
      "index": 1027,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for enabling VPC ClassicLink DNS support, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. It is used when interacting with AWS EC2 APIs to manage VPC DNS settings programmatically.",
      "description_length": 314,
      "index": 1028,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a multicast group in a transit gateway, with fields for IP address, attachment and subnet identifiers, resource details, and membership types. It provides constructors, parsers, and serializers to convert between XML, JSON, and internal representations. Concrete use cases include managing multicast group configurations in AWS EC2 transit gateways and processing API responses containing multicast group data.",
      "description_length": 460,
      "index": 1029,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaInfo",
      "library": "aws-ec2",
      "description": "This module handles FPGA device information, including a list of FPGA devices and optional total memory size in MiB. It provides functions to construct, parse, and convert FPGA data to query parameters, JSON, or from JSON. Use this module when managing FPGA configurations in EC2 instances, particularly for retrieving or specifying FPGA device details and memory capacity.",
      "description_length": 373,
      "index": 1030,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 Reserved Instances lists. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `ReservedInstances.t`. It is used when processing responses or requests involving multiple reserved instances in AWS EC2 APIs.",
      "description_length": 345,
      "index": 1031,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.MovingAddressStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a moving Elastic IP address, with fields for the move status and associated public IP. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include tracking the state of IP address migrations in EC2 instances and integrating with AWS API operations that report moving address statuses.",
      "description_length": 428,
      "index": 1032,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCustomerGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a customer gateway in AWS EC2, including the gateway ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this module when interacting with EC2's API to delete customer gateways, particularly in networking setups involving site-to-site VPNs.",
      "description_length": 383,
      "index": 1033,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkInstanceList",
      "library": "aws-ec2",
      "description": "This module handles lists of ClassicLinkInstance values, offering direct conversions to and from XML, JSON, and query formats. It provides parsing from XML nodes, JSON serialization and deserialization, and query parameter construction for EC2 ClassicLinkInstance data. Useful when interacting with AWS EC2 APIs to manage or retrieve ClassicLink instance information in different data formats.",
      "description_length": 393,
      "index": 1034,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance credit configurations, including instance ID and CPU credit settings. It provides functions to create, parse, and serialize these specifications for use in API requests. Concrete use cases include configuring burstable performance instances and managing credit allocation for cost optimization.",
      "description_length": 359,
      "index": 1035,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC ClassicLink configurations, supporting operations to filter results, specify VPC IDs, and perform dry runs. It works with VPC IDs and filter lists to customize query parameters for AWS EC2 ClassicLink services. Use this module to construct and process API requests when retrieving ClassicLink status for VPCs in AWS environments.",
      "description_length": 386,
      "index": 1036,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetHostReservationPurchasePreviewResult",
      "library": "aws-ec2",
      "description": "This module handles the result of previewing host reservation purchases in EC2, providing access to pricing details and purchase options. It works with structured data types including currency codes, purchase sets, and string-based price representations. Concrete use cases include displaying reservation cost estimates and processing purchase configurations in AWS EC2 host management workflows.",
      "description_length": 396,
      "index": 1037,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatePlacementRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement configurations when launching EC2 instances using a launch template. It includes fields like availability zone, tenancy, host ID, and partition number, enabling precise control over instance placement. Operations include creating, parsing, and serializing placement requests to JSON, query parameters, or XML.",
      "description_length": 371,
      "index": 1038,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportKeyPairResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of importing an EC2 key pair, including fields like key fingerprint, name, and ID, along with associated tags. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. It is used when working with AWS EC2 key pair imports to manage and exchange key metadata and tags programmatically.",
      "description_length": 410,
      "index": 1039,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of replacing a network ACL association in AWS EC2. It includes a single optional string field for the new association ID, with functions to construct, parse, and convert the result to and from JSON and query formats. It is used when managing network ACLs in EC2 to track the updated association after a replacement operation.",
      "description_length": 356,
      "index": 1040,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting attributes of an EC2 network interface, specifically supporting the `source_dest_check` attribute. It provides operations to create, parse, and serialize the request in various formats including JSON, query parameters, and XML. Concrete use cases include modifying network interface settings in AWS EC2, such as disabling source/destination checks for traffic forwarding.",
      "description_length": 425,
      "index": 1041,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMappingSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings for EC2 instances, including optional fields for device name, EBS configuration, no-device indicators, and virtual device names. It provides functions to construct, parse, and serialize these specifications to support configuring storage when launching or modifying EC2 instances. Use cases include defining root volume settings, attaching EBS volumes, or excluding devices during instance setup.",
      "description_length": 470,
      "index": 1042,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a managed prefix list in EC2. It provides functions to create, parse, and convert the result to various formats like JSON and query parameters. The primary data type is a record containing an optional managed prefix list.",
      "description_length": 265,
      "index": 1043,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListReferenceSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway prefix list references. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `TransitGatewayPrefixListReference.t` values. It is used when managing route propagation and prefix list associations in transit gateways via the EC2 API.",
      "description_length": 356,
      "index": 1044,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an EC2 image copy request, including fields like image name, source ID, region, encryption settings, and optional client token or KMS key. It provides functions to construct, serialize, and parse these requests in formats like JSON and query strings. It is used when copying Amazon Machine Images (AMIs) across regions or accounts, supporting both dry runs and encrypted copies.",
      "description_length": 430,
      "index": 1045,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling VPC ClassicLink in EC2, including a VPC ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring VPC connectivity options or managing EC2 network settings programmatically.",
      "description_length": 332,
      "index": 1046,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ValueStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values for EC2 operations, providing functions to convert these lists to and from JSON and query parameters. It supports parsing string lists from XML nodes and converting them into structured JSON or query string formats. Use this module when working with EC2 API requests that require handling multiple string values, such as tag lists or configuration parameters.",
      "description_length": 402,
      "index": 1047,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TerminateInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of terminating EC2 instances, specifically tracking the state changes of terminating instances. It provides constructors, parsers, and serializers for working with instance termination responses in XML, JSON, and query formats. Use this module when processing the output of instance termination requests to AWS EC2.",
      "description_length": 346,
      "index": 1048,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance status objects. It provides functions to convert instance status lists to and from XML, JSON, and query formats. Use this module when processing batch results of instance status checks from AWS EC2 APIs.",
      "description_length": 245,
      "index": 1049,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating a virtual private cloud (VPC) in AWS EC2, including IPv4 and IPv6 addressing options, tenancy settings, and tagging. It supports operations to construct, serialize, and parse VPC creation requests in JSON, query string, and XML formats. Use this module when programmatically provisioning VPCs with custom network configurations in AWS.",
      "description_length": 386,
      "index": 1050,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorTargetResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for creating a traffic mirror target, containing an optional traffic mirror target and a client token. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Concrete use cases include handling responses from creating traffic mirror targets in AWS EC2, where client tokens ensure idempotency and the target object represents the mirrored traffic destination.",
      "description_length": 467,
      "index": 1051,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GpuDeviceMemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for GPU device memory information, specifically capturing the size in MiB as an optional integer. It provides functions to construct, serialize, and deserialize this data structure to and from JSON, query parameters, and XML. It is used when working with EC2 instance types that include GPU devices, where memory specifications need to be communicated in API requests or responses.",
      "description_length": 418,
      "index": 1052,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConfirmProductInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for confirming product instance ownership in EC2, including instance ID, product code, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when integrating with EC2 to verify product codes associated with running instances.",
      "description_length": 357,
      "index": 1053,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC attachment with optional state and VPC ID fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling VPC attachment information when interacting with EC2 APIs, such as describing or modifying VPC attachments.",
      "description_length": 360,
      "index": 1054,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of traffic mirror session records. It provides functions to convert between XML, JSON, and query string representations of these sessions. It is used when managing traffic mirroring configurations in AWS EC2, such as listing or modifying active mirror sessions.",
      "description_length": 344,
      "index": 1055,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMappingRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of block device mapping requests for EC2 launch templates. It provides functions to parse XML input into block device mappings, convert mappings to query parameters or JSON format, and construct mappings from JSON data. It is used when configuring or modifying EC2 instance storage settings via AWS SDK calls.",
      "description_length": 335,
      "index": 1056,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MoveAddressToVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure and conversion functions for moving an EC2 address to a VPC. It works with XML, JSON, and query string formats, handling data types like Boolean and String. Concrete use cases include serializing and deserializing move address requests for API interactions with AWS EC2.",
      "description_length": 310,
      "index": 1057,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInstanceExportTaskRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for initiating an EC2 instance export task to S3. It includes fields for specifying the instance ID, export destination, optional description, target environment, and tags. Operations allow constructing, parsing, and serializing the request for use with AWS API calls.",
      "description_length": 306,
      "index": 1058,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayVpcAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of transit gateway VPC attachment lists. It works with lists of `TransitGatewayVpcAttachment.t` values, supporting operations to convert to and from XML, JSON, and query formats. It is used when managing AWS EC2 transit gateway attachments, particularly for batch processing in API requests and responses.",
      "description_length": 364,
      "index": 1059,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationTenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Default` and `Dedicated`, representing tenancy options for capacity reservations. It includes functions to convert between strings and the enumerated type, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used to specify and handle tenancy configurations when interacting with EC2 capacity reservation APIs.",
      "description_length": 406,
      "index": 1060,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying client VPN connections, including parameters to filter results, paginate, and specify the target endpoint. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Concrete use cases include retrieving active client connections to a specific VPN endpoint and managing result pagination in AWS EC2 environments.",
      "description_length": 403,
      "index": 1061,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorTargetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 Traffic Mirror target, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when configuring or removing Traffic Mirror targets in AWS EC2 environments.",
      "description_length": 313,
      "index": 1062,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteTableResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway route table, containing an optional `TransitGatewayRouteTable` record. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. A concrete use case is processing responses after deleting a route table in an EC2 transit gateway setup.",
      "description_length": 356,
      "index": 1063,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupReferencesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing security group references in EC2. It provides constructors, parsers, and serializers for a structure containing a set of security group references. It is used to process and manipulate responses from the EC2 API when querying security group dependencies.",
      "description_length": 299,
      "index": 1064,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of network interface permissions in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing EC2 network interface permissions programmatically, such as when granting or revoking access to network interfaces.",
      "description_length": 325,
      "index": 1065,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateway route table virtual interface group associations in AWS EC2. It includes operations to construct, parse, and serialize the result, which contains a set of association data and an optional pagination token. It is used when retrieving and processing association information from EC2, particularly for paginated responses.",
      "description_length": 378,
      "index": 1066,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleTaskError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 bundle tasks, with fields for error code and message. It provides functions to construct, parse, and convert error data to and from XML, JSON, and query formats. Concrete use cases include error handling during EC2 instance bundle operations and integration with AWS API responses.",
      "description_length": 353,
      "index": 1067,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuState",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing the state of an elastic GPU, with operations to convert between string representations and the enumerated values. It supports parsing from XML, serialization to query parameters and JSON, and provides a constant value for the attached state. Concrete use cases include handling elastic GPU state in API requests and responses, such as attaching or querying GPU resources in EC2 instances.",
      "description_length": 446,
      "index": 1068,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeRegionsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 regions, supporting operations to filter results, specify region names, and control request execution with options like dry run or all regions. It works with custom types for filters, region names, and boolean flags, providing functions to construct, parse, and serialize requests in multiple formats. Concrete use cases include building API requests to list EC2 regions with specific criteria, testing configurations without applying changes, and retrieving region data for automation workflows.",
      "description_length": 555,
      "index": 1069,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayMulticastDomainsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing EC2 transit gateway multicast domains, containing a list of multicast domains and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API requests and responses. Use this module when handling output from the `DescribeTransitGatewayMulticastDomains` API call, particularly for processing or forwarding the returned domain data and pagination information.",
      "description_length": 459,
      "index": 1070,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to disabling fast snapshot restore on EC2 snapshots. It includes operations for creating, parsing, and serializing error items, which contain an optional snapshot ID and a set of state-related errors. It is used to process and manage error responses when attempting to disable fast snapshot restore across multiple snapshots in AWS EC2.",
      "description_length": 401,
      "index": 1071,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing monitoring configuration for EC2 spot fleet requests, primarily used to enable or disable monitoring. It includes functions to construct, parse, and serialize the monitoring configuration to and from XML, JSON, and query parameters. Concrete use cases include configuring detailed monitoring for spot instances within a fleet request when interacting with the EC2 API.",
      "description_length": 424,
      "index": 1072,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 launch templates, including an optional launch template specification and a list of overrides. It provides functions to construct, parse, and serialize these configurations to JSON, query parameters, or XML nodes. Use this module when setting up EC2 Auto Scaling or Fleet configurations that require template-based instance provisioning.",
      "description_length": 394,
      "index": 1073,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of client VPN authentication requests. It provides functions to convert between XML, JSON, and query string representations of these lists, specifically working with `ClientVpnAuthenticationRequest.t` values. It is used when configuring or modifying client VPN endpoints in AWS EC2, where multiple authentication methods are specified as a list.",
      "description_length": 427,
      "index": 1074,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayPrefixListReferenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for modifying a transit gateway prefix list reference, including required fields like route table ID and prefix list ID, along with optional parameters such as attachment ID and blackhole flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query strings, and XML. Concrete use cases include updating routing configurations in AWS EC2 by modifying prefix list references within a transit gateway route table.",
      "description_length": 499,
      "index": 1075,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcTenancyRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying the instance tenancy of a VPC. It includes operations to create a request, convert it to query parameters or JSON, and parse it from XML or JSON. It works with string, boolean, and VpcTenancy types, specifically targeting VPC configuration changes in AWS EC2.",
      "description_length": 313,
      "index": 1076,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a carrier gateway in EC2, with values like Pending, Available, Deleting, and Deleted. It provides bidirectional conversions between these states and strings, JSON, and XML, enabling seamless serialization and parsing. Use this module when handling carrier gateway state transitions or integrating with AWS APIs that require state-based logic.",
      "description_length": 407,
      "index": 1077,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesListingsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 Reserved Instances listings. It provides functions to create, parse, and serialize the result, which contains a list of reserved instances listings. Use this module when retrieving and processing Reserved Instances listing details from AWS EC2, particularly for querying and converting response data to JSON or query format.",
      "description_length": 373,
      "index": 1078,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCapacityReservationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating capacity reservations in EC2, including parameters like instance type, platform, availability zone, and count. It provides functions to construct, serialize, and parse reservation requests, supporting operations like query conversion and JSON encoding/decoding. Use this module when programmatically reserving EC2 capacity with specific attributes such as tenancy, storage options, and tagging.",
      "description_length": 444,
      "index": 1079,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA images in the context of EC2 operations. It provides functions to convert FPGA image lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with FPGA image data returned by EC2 API calls, such as listing available FPGA images or sending requests that require FPGA image configurations.",
      "description_length": 370,
      "index": 1080,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataOptionsState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Pending` and `Applied`, representing the state of instance metadata options in EC2. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support handling EC2 instance metadata state in API requests and responses.",
      "description_length": 377,
      "index": 1081,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Internet Gateway resources, providing direct parsing from XML, conversion to AWS query format, and serialization to and from JSON. It works specifically with lists of `InternetGateway.t` records, enabling structured manipulation of gateway data in API requests and responses. Concrete use cases include processing AWS EC2 API responses containing multiple internet gateways and preparing gateway lists for API submissions.",
      "description_length": 455,
      "index": 1082,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when programmatically managing AWS EC2 transit gateway attachments, particularly during acceptance operations.",
      "description_length": 366,
      "index": 1083,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for querying the history of a spot fleet request in AWS EC2, including optional filters like event type, maximum results, and pagination token. It provides functions to construct, serialize, and parse these queries, specifically handling boolean, integer, string, and datetime fields. Concrete use cases include retrieving historical events for a specific spot fleet request starting from a given timestamp, with support for paginated results.",
      "description_length": 480,
      "index": 1084,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetCapacityReservationUsageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying the usage of an EC2 capacity reservation. It includes operations to construct, parse, and serialize the request for use with AWS API calls. The structure contains fields for the capacity reservation ID, pagination token, maximum results limit, and a dry-run flag.",
      "description_length": 316,
      "index": 1085,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegionNameStringList",
      "library": "aws-ec2",
      "description": "Handles parsing, formatting, and conversion of lists of EC2 region names for use in AWS API requests and responses. Works with lists of strings representing region names, encoded in XML, JSON, or query parameters. Used when interacting with EC2 operations that require or return multiple region names, such as describing regions or filtering resources across regions.",
      "description_length": 367,
      "index": 1086,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateTagSpecificationRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of launch template tag specification requests for EC2. It provides functions to parse XML input into tag specification lists, convert them to query parameters or JSON format, and construct empty tag specification lists. It is used when configuring EC2 instance tags during launch template creation or modification.",
      "description_length": 340,
      "index": 1087,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6Range",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IPv6 CIDR ranges with an optional description. It provides functions to construct, serialize, and deserialize these ranges for use in network configuration and security group rules. The module works directly with IPv6 CIDR strings and integrates with AWS query and JSON formats for API interactions.",
      "description_length": 353,
      "index": 1088,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetCapacityReservationUsageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a capacity reservation usage query, including fields like instance counts, state, and associated instance usages. It provides functions to construct, parse, and serialize the structure to and from JSON, query format, and XML. Concrete use cases include retrieving and processing EC2 capacity reservation usage data from AWS API responses.",
      "description_length": 402,
      "index": 1089,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 host configurations, supporting fields like auto-placement, host recovery, and instance type. It provides functions to construct, parse, and serialize host modification requests in various formats, including JSON and query strings. Concrete use cases include updating host properties in AWS EC2 environments, such as enabling host recovery or changing instance capacity.",
      "description_length": 425,
      "index": 1090,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateEgressOnlyInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for creating an egress-only internet gateway, containing an optional client token and the created gateway. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. It is used to handle responses from EC2 API calls that create egress-only internet gateways, enabling retrieval and manipulation of the resulting gateway data.",
      "description_length": 429,
      "index": 1091,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for handling the outcome of deleting flow logs, containing a set of unsuccessful items. It provides operations to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to process responses from EC2 API calls that delete flow logs, allowing inspection of any items that failed deletion.",
      "description_length": 381,
      "index": 1092,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Client VPN route with fields for endpoint ID, destination CIDR, target subnet, route type, origin, status, and description. It provides functions to construct, parse, and convert route data to and from JSON and query formats. It is used to manage and serialize Client VPN routing information when interacting with AWS EC2 APIs.",
      "description_length": 379,
      "index": 1093,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating an EC2 volume, including parameters like availability zone, encryption, size, and tags. It provides functions to construct, serialize, and parse volume creation requests in JSON, query string, and XML formats. Concrete use cases include setting up new EBS volumes with specific properties for EC2 instances or automating volume provisioning workflows.",
      "description_length": 402,
      "index": 1094,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Vpc",
      "library": "aws-ec2",
      "description": "This module defines a VPC record with fields for CIDR blocks, state, instance tenancy, tags, and associations. It provides functions to construct, parse, and serialize VPC data to and from XML, JSON, and query formats. Use this module when managing EC2 VPC configurations, such as creating or inspecting virtual private clouds in AWS.",
      "description_length": 334,
      "index": 1095,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotSet",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of EC2 snapshot data. It provides functions to parse XML input into a list of snapshot records, convert snapshot lists to query parameters or JSON format, and reconstruct snapshot data from JSON. It works directly with lists of `SnapshotInfo.t` structures, enabling operations like serializing snapshots for API requests or deserializing responses for further processing.",
      "description_length": 423,
      "index": 1096,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLinkInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 ClassicLinkInstance, containing fields for security groups, instance ID, tags, and VPC ID. It provides functions to construct, parse, and serialize instances of this structure for use in API requests and responses. Concrete use cases include linking EC2 instances to VPCs and managing associated tags and security groups via AWS API operations.",
      "description_length": 401,
      "index": 1097,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting VPC endpoint connections, including fields for dry-run mode, service ID, and a list of VPC endpoint IDs. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. The module is used when managing VPC endpoint connection rejections programmatically, particularly in AWS infrastructure automation workflows.",
      "description_length": 403,
      "index": 1098,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribePrefixListsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing prefix lists in EC2, providing constructors, JSON and XML conversions, and query parameter serialization. It works with pagination tokens and sets of prefix list data structures. Use this module to process responses when listing prefix lists, including handling pagination and serializing results for further API interactions.",
      "description_length": 371,
      "index": 1099,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceLifecycle",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the lifecycle type of an EC2 instance, with variants `Spot` and `On_demand`. It provides bidirectional conversions between strings and the `t` type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with AWS EC2 APIs to ensure correct encoding and decoding of instance lifecycle information.",
      "description_length": 397,
      "index": 1100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a transit gateway route table from a transit gateway attachment. It includes operations to create, parse, and serialize the request in various formats such as JSON and query strings. It is used when managing AWS EC2 transit gateway configurations, specifically for route table disassociation actions.",
      "description_length": 359,
      "index": 1101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttributeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 account attributes by providing operations to parse, serialize, and convert them to and from JSON and query formats. It works with XML nodes, JSON values, and AWS query parameters to facilitate attribute list manipulation during API interactions. Concrete use cases include processing responses from EC2 API calls that return account attribute lists and preparing these attributes for further request serialization.",
      "description_length": 448,
      "index": 1102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstancePrivateIpAddressList",
      "library": "aws-ec2",
      "description": "This module handles the conversion and manipulation of lists of EC2 instance private IP addresses. It provides functions to parse XML input into private IP address lists, convert these lists to query parameters or JSON format, and construct them from JSON data. It works directly with private IP address data structures to support AWS EC2 API interactions such as instance configuration and network interface management.",
      "description_length": 420,
      "index": 1103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of enabling fast snapshot restore for an EC2 snapshot in a specific availability zone. It includes fields to track the state, timestamps for state transitions, owner information, and identifiers for the snapshot and zone. The module provides functions to construct, parse, and serialize this structure to support interactions with AWS EC2 APIs.",
      "description_length": 405,
      "index": 1104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnState",
      "library": "aws-ec2",
      "description": "This module defines a set of operations for converting and working with the `t` enumerated type representing the state of a Vpn connection. It supports conversions between strings and the enumerated values, serialization to JSON and query parameters, and parsing from XML nodes. Concrete use cases include translating Vpn state values when interacting with AWS EC2 APIs, such as handling responses or constructing requests.",
      "description_length": 423,
      "index": 1105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC attachment objects, providing direct conversions to and from XML, JSON, and query formats. It supports parsing VPC attachment data from XML nodes and serializing them for API requests or JSON storage. Use this module when working with AWS EC2 API responses that include multiple VPC attachments, especially during resource listing or state synchronization tasks.",
      "description_length": 395,
      "index": 1106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstances",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 reserved instances with fields for configuration and metadata, including availability zone, duration, pricing, and tags. It provides functions to construct, parse, and serialize reserved instance data for use in API requests and responses. Concrete use cases include managing reserved instance configurations, generating query parameters for AWS API calls, and converting between JSON and internal representations for storage or transmission.",
      "description_length": 496,
      "index": 1107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySubnetAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying subnet attributes in EC2, supporting operations to set IPv6 assignment, public IP mapping, and customer-owned IP configurations. It works with boolean attribute values, string identifiers, and optional fields to handle partial updates. Concrete use cases include configuring subnet behavior during instance launch, such as enabling public IP assignment or specifying a customer-owned IPv4 pool.",
      "description_length": 448,
      "index": 1108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateSubnetCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a request to disassociate a subnet CIDR block by association ID. It provides functions to construct the request, convert it to query format, serialize to JSON, parse from XML, and deserialize from JSON. It is used specifically for handling subnet CIDR block disassociation operations in EC2, working directly with string identifiers and structured input/output formats.",
      "description_length": 421,
      "index": 1109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of accepting a VPC peering connection in AWS EC2. It provides functions to create, parse, and serialize the result, which includes an optional VPC peering connection record. Use this module when processing responses from AWS after initiating a VPC peering acceptance operation.",
      "description_length": 308,
      "index": 1110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DomainType",
      "library": "aws-ec2",
      "description": "This module defines a domain type enumeration with two values, `Vpc` and `Standard`, and provides bidirectional conversion between these values and strings. It includes functions for parsing, serialization to JSON and query formats, and XML node conversion, making it suitable for use in API request handling and configuration parsing. Concrete use cases include translating EC2 domain types in AWS SDK interactions and validating string inputs against known domain type values.",
      "description_length": 478,
      "index": 1111,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EphemeralNvmeSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with three values representing support levels for ephemeral NVMe devices. It provides bidirectional conversion between strings and the enumerated type, along with standard serialization and deserialization functions for JSON, XML, and query parameters. The module is used to specify and process NVMe support configurations in EC2 instance types.",
      "description_length": 384,
      "index": 1112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for EC2 launch template creation, containing optional launch template and validation warning fields. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this module when handling responses from creating launch templates in AWS EC2, particularly for inspecting returned templates or validation issues.",
      "description_length": 383,
      "index": 1113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceIdSet",
      "library": "aws-ec2",
      "description": "Handles the representation and conversion of reserved instance ID sets for EC2 operations. Works with lists of base string types, enabling their serialization to and from JSON and query formats. Useful when managing batch operations involving multiple reserved instance IDs in EC2.",
      "description_length": 281,
      "index": 1114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotDiskContainer",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying disk container information for EC2 snapshots, including optional fields like description, format, URL, and user bucket. It provides functions to construct, parse, and serialize the structure to and from JSON, query parameters, and XML. Concrete use cases include configuring snapshot imports or exports with specific disk formats and source locations.",
      "description_length": 403,
      "index": 1115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateAndOverridesResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the response for a launch template and its overrides in an EC2 fleet request. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing EC2 instance fleet configurations that require specifying both a launch template and per-instance overrides.",
      "description_length": 372,
      "index": 1116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying attributes of an EC2 network interface, including fields like attachment, description, security groups, and source/destination check settings. It provides functions to construct, parse, and serialize these modification requests in various formats such as JSON and query parameters. Concrete use cases include updating security group associations or enabling/disabling source/destination checks on a network interface via the EC2 API.",
      "description_length": 484,
      "index": 1117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of searching for transit gateway routes, including a list of matching routes and a flag indicating if more routes are available. It provides operations to construct, parse, and serialize route results in XML, JSON, and query formats. Use this module when processing responses from EC2's transit gateway route search API calls.",
      "description_length": 357,
      "index": 1118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HibernationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EC2 instance hibernation options. It includes functions to create, parse, and serialize hibernation settings, specifically handling whether hibernation is enabled. Use cases include setting up EC2 instance launch configurations with hibernation support or modifying existing instance options via API requests.",
      "description_length": 362,
      "index": 1119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of an EC2 image creation operation, primarily storing an optional image ID. It includes functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Concrete use cases include managing responses from AWS EC2 image creation requests and serializing results for further processing or API interactions.",
      "description_length": 427,
      "index": 1120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 volume, including the volume ID and an optional dry-run flag. It provides functions to construct, parse, and convert the request to query or JSON formats. Use this module when interacting with the EC2 API to delete storage volumes programmatically.",
      "description_length": 308,
      "index": 1121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 export tasks, containing optional lists of export task IDs and filters. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when querying specific export tasks by ID or applying filters to narrow down results in an EC2 environment.",
      "description_length": 351,
      "index": 1122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 fleet information, supporting optional parameters like pagination, filtering, and dry-run mode. It works with EC2 fleet IDs, filters, and standard AWS request types like Boolean, Integer, and String. Concrete use cases include constructing and serializing requests to describe EC2 fleets with specific constraints or retrieving paginated results.",
      "description_length": 403,
      "index": 1123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExecutableByStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of strings representing executable entities in EC2, such as user IDs or group names. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML responses. Use this module when working with EC2 API calls that require specifying executable permissions, such as describing images or managing launch permissions.",
      "description_length": 384,
      "index": 1124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateChangeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance state changes. It provides parsing from XML nodes, conversion to query parameters, JSON serialization, and deserialization. It is used when processing responses or building requests involving multiple instance state transitions in AWS EC2.",
      "description_length": 281,
      "index": 1125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddPrefixListEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing prefix list entries in AWS EC2, consisting of a CIDR block and an optional description. It provides functions to construct, parse, and convert these entries to and from query parameters and JSON format. It is used when managing VPC prefix lists, such as when adding or updating entries in a prefix list for network access control.",
      "description_length": 384,
      "index": 1126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeAttributeResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing an EC2 volume's attribute, specifically handling boolean auto-enable I/O status, product codes, and volume ID. It provides constructors, JSON and XML parsers, and query builders for working with volume metadata in AWS EC2. Use this module when retrieving and processing volume attributes such as auto-enable I/O settings and associated product codes from EC2 volumes.",
      "description_length": 415,
      "index": 1127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogsResourceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing resource types for flow logs in AWS EC2, including VPC, Subnet, and NetworkInterface. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when configuring or parsing flow log resources in EC2 API interactions.",
      "description_length": 396,
      "index": 1128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseHostReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of purchasing a host reservation in EC2, including fields like client token, currency code, purchase details, and pricing. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include processing EC2 host reservation purchase responses and integrating with billing systems.",
      "description_length": 406,
      "index": 1129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetDefaultCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving default credit specifications for EC2 instance families. It provides functions to construct, parse, and serialize the result, which includes an optional instance family credit specification. Use cases include querying and configuring credit settings for T-series EC2 instances via AWS SDK calls.",
      "description_length": 340,
      "index": 1130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteEgressOnlyInternetGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting an egress-only internet gateway, containing an optional boolean return code. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from EC2 API calls that confirm the deletion status of egress-only internet gateways.",
      "description_length": 411,
      "index": 1131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying network interface configurations when launching EC2 instances using a launch template. It includes fields for controlling IP addressing, security groups, device indexing, and interface lifecycle, enabling precise setup of virtual networking hardware. Operations include creating, serializing, and parsing these specifications to and from JSON and XML formats for API interactions.",
      "description_length": 432,
      "index": 1132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway route attachments. It works with XML nodes, JSON values, and query parameters to convert between these formats and an internal list of attachment records. It is used when managing route propagation in AWS EC2 transit gateways, particularly for handling responses from and requests to the EC2 API.",
      "description_length": 376,
      "index": 1133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateways in EC2, supporting filtering by IDs and criteria, result pagination, and dry-run simulation. It operates on sets of local gateway IDs, filter lists, and standard AWS query parameters. Concrete use cases include retrieving gateway information with specific attributes, limiting result sizes, and generating API requests from JSON or XML inputs.",
      "description_length": 411,
      "index": 1134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MulticastSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Enable` and `Disable`, representing multicast support settings. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, query parameters, and XML. It is used to configure multicast support in EC2 network interfaces via AWS API calls.",
      "description_length": 370,
      "index": 1135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HibernationOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 instance hibernation options, specifically whether hibernation is configured. It provides functions to create, parse, and serialize hibernation settings to and from XML, JSON, and query formats. Use this module when configuring or retrieving hibernation state for EC2 instances in AWS.",
      "description_length": 339,
      "index": 1136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIamInstanceProfileAssociationsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing IAM instance profile associations, containing a set of associations and an optional pagination token. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from EC2's IAM instance profile association API calls, particularly for listing and paginating through associations.",
      "description_length": 414,
      "index": 1137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association between a local gateway route table and a VPC in AWS EC2. It provides functions to construct, parse, and serialize the association data, including handling optional fields like IDs, ARN, state, and tags. Use cases include managing routing configurations for VPCs attached to local gateways and tracking association states in infrastructure automation workflows.",
      "description_length": 426,
      "index": 1138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupEgressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking egress rules from an EC2 security group. It supports operations to construct, serialize, and parse requests containing parameters like group ID, IP permissions, port ranges, and source security group details. It is used when modifying security group egress policies by providing structured input for AWS API calls.",
      "description_length": 367,
      "index": 1139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelCertificateRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying an AWS EC2 VPN tunnel certificate, including fields for the connection ID, tunnel IP address, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include updating certificate configurations for existing VPN tunnels without re-creating them.",
      "description_length": 385,
      "index": 1140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OwnerStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string values representing owners in EC2 operations. It provides functions to convert, parse, and serialize these lists to and from XML, JSON, and query parameters. Use this module when working with EC2 API calls that require or return owner information, such as describing images or managing permissions.",
      "description_length": 334,
      "index": 1141,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CidrAuthorizationContext",
      "library": "aws-ec2",
      "description": "This module defines a CIDR authorization context with `message` and `signature` fields. It provides functions to construct, parse, and serialize the context for use in API requests and responses. It is used when authorizing CIDR blocks in EC2 operations, particularly for importing IP address ranges.",
      "description_length": 300,
      "index": 1142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetData",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 fleet configuration and state, including fields for capacity, lifecycle policies, and instance management. It provides constructors, parsers, and serializers for converting between XML, JSON, and internal representations. Use this module to inspect or construct EC2 fleet data returned by AWS API calls like `DescribeFleets`.",
      "description_length": 379,
      "index": 1143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing a Spot Datafeed subscription, containing an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. It is used specifically for interacting with the EC2 API to retrieve information about Spot Instance datafeeds.",
      "description_length": 364,
      "index": 1144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserData",
      "library": "aws-ec2",
      "description": "This module handles user data configuration for EC2 instances, primarily through serialization and deserialization. It works with a custom type `t` that wraps an optional string, representing user data scripts. Functions support converting user data to and from JSON, query parameters, and XML, enabling integration with AWS API requests and responses.",
      "description_length": 352,
      "index": 1145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 fleet launch templates, with optional fields for template ID, name, and version. It provides functions to construct instances, convert to query parameters, serialize to JSON, and parse from XML or JSON input. It is used when configuring EC2 Auto Scaling fleets using launch templates.",
      "description_length": 340,
      "index": 1146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 traffic mirror filter rules, providing operations to convert, parse, and serialize the list to and from XML, JSON, and query formats. It works directly with lists of `TrafficMirrorFilterRule.t` values. Use this module when managing traffic mirror configurations in AWS EC2, particularly for capturing and analyzing network traffic.",
      "description_length": 364,
      "index": 1147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetConsoleOutputRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving console output from an EC2 instance. It includes operations to construct, parse, and serialize the request in various formats such as JSON and query parameters. It works directly with instance identifiers and boolean flags to control request behavior.",
      "description_length": 306,
      "index": 1148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizeClientVpnIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of authorizing ingress access to a Client VPN endpoint. It provides functions to create, parse, and serialize a result containing an optional authorization rule status. Use this module when managing Client VPN ingress rules programmatically, such as after submitting an authorization request and processing the response.",
      "description_length": 351,
      "index": 1149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a VPC CIDR block, including its current state code and an optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This module is used to manage and track changes to CIDR blocks associated with Amazon Virtual Private Clouds during configuration updates or status checks.",
      "description_length": 412,
      "index": 1150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of cancelling spot instance requests in EC2. It provides constructors, parsing, and serialization functions for a structure containing a list of cancelled spot instance requests. It is used to process responses from the EC2 API when managing spot instances programmatically.",
      "description_length": 305,
      "index": 1151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PublicIpv4PoolIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of public IPv4 pool IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It works directly with lists of base string types, specifically for managing public IPv4 pool identifiers in API requests and responses.",
      "description_length": 316,
      "index": 1152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying transit gateways, supporting operations to filter, limit, and paginate results. It works with transit gateway IDs, filters, and standard AWS request parameters like `max_results` and `next_token`. It is used to construct and serialize API requests when retrieving transit gateway information from EC2.",
      "description_length": 354,
      "index": 1153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientConnectResponseOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling client connect response options in AWS EC2, including fields for enabling the feature, specifying a Lambda function ARN, and tracking status. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. This module is used when configuring client VPN endpoints that integrate with Lambda for custom authentication or authorization workflows.",
      "description_length": 443,
      "index": 1154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing capacity reservation groups in AWS EC2, with optional ARN and owner ID fields. It provides functions to construct, parse, and convert these structures to and from JSON and query formats. It is used when managing capacity reservations, particularly for associating reservations with instances or retrieving reservation group metadata from API responses.",
      "description_length": 406,
      "index": 1155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFpgaImageAttributeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing FPGA image attributes, primarily working with the `FpgaImageAttribute.t` type. It provides functions to construct, parse, and serialize the result to query parameters or JSON, specifically used when retrieving FPGA image details from EC2. Concrete use cases include processing responses from the EC2 API when querying FPGA image permissions or metadata.",
      "description_length": 398,
      "index": 1156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LicenseConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for license configurations in AWS EC2, specifically handling an optional ARN string. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing EC2 instance license configurations, particularly when integrating with AWS APIs that require serialization or deserialization of license configuration data.",
      "description_length": 420,
      "index": 1157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in AWS EC2, with optional ARN and name fields. It provides functions to construct, parse, and convert these specifications to and from JSON and query formats. Use this module when configuring EC2 instances with IAM roles, either during instance launch or updates.",
      "description_length": 337,
      "index": 1158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetOnDemandAllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Lowest_price` and `Prioritized`, representing allocation strategies for EC2 fleets. It provides functions to convert between strings and the `t` type, along with serialization and deserialization to JSON, query parameters, and XML. These operations support configuring and interpreting EC2 fleet launch configurations based on pricing strategy preferences.",
      "description_length": 407,
      "index": 1159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClassicLoadBalancersConfig",
      "library": "aws-ec2",
      "description": "This module defines a configuration structure for classic load balancers, primarily used in AWS EC2 service interactions. It includes functions to construct, parse, and serialize configurations, supporting operations like converting to and from JSON, query parameters, and XML parsing. It is used when setting up or modifying EC2 resources that require load balancer associations, such as instance launch configurations or auto scaling groups.",
      "description_length": 443,
      "index": 1160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.BundleIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based bundle IDs for EC2 operations. It provides functions to convert, parse, and serialize these lists to and from JSON and query formats. Use this module when working with EC2 bundle ID lists in API requests or responses.",
      "description_length": 259,
      "index": 1161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayIdSet",
      "library": "aws-ec2",
      "description": "This module handles sets of EC2 local gateway IDs represented as lists of strings. It provides functions to convert these sets to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 operations that require specifying multiple local gateways, such as describing or filtering gateway resources.",
      "description_length": 348,
      "index": 1162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeKeyPairsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 key pairs by filters, names, or IDs, with an optional dry-run flag. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. It is used to interact with AWS EC2 APIs for managing and retrieving key pair information.",
      "description_length": 340,
      "index": 1163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PciId",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing PCI ID information with optional device, vendor, subsystem, and subsystem vendor IDs. It provides functions to construct, parse, and convert PCI ID values to and from JSON and query formats. It is used to handle PCI device metadata in EC2 instance configurations and responses.",
      "description_length": 321,
      "index": 1164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an elastic inference accelerator response in an EC2 launch template. It includes fields for the accelerator type and count, both optional. The module provides functions to construct, parse, and serialize the structure to query parameters or JSON, specifically handling XML input and JSON output formats.",
      "description_length": 353,
      "index": 1165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneGroupResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying an Availability Zone group, specifically containing an optional boolean indicating the success of the operation. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. This is used when handling responses from AWS EC2 API calls that modify Availability Zone group settings, such as enabling or disabling partition placement.",
      "description_length": 447,
      "index": 1166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupIdentifier",
      "library": "aws-ec2",
      "description": "This module defines a data structure for identifying EC2 security groups using either a group ID or group name. It provides functions to construct, parse, and convert security group identifiers to and from JSON and query formats. Use this module when managing EC2 instance security configurations, such as associating or retrieving security groups during instance setup or network configuration.",
      "description_length": 395,
      "index": 1167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceList",
      "library": "aws-ec2",
      "description": "This module defines a list of network interfaces with operations to convert to and from XML, JSON, and query formats. It works with EC2 network interface data structures, enabling serialization and deserialization for API interactions. Use this module when handling network interface lists in AWS EC2 requests or responses, such as launching instances with multiple interfaces or parsing subnet configurations.",
      "description_length": 410,
      "index": 1168,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorFiltersResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror filters, providing constructors, parsing, and serialization functions. It works with `traffic_mirror_filters` sets and an optional `next_token` for pagination. Use this module to process responses from AWS EC2 when listing traffic mirror filters, particularly when handling paginated results.",
      "description_length": 356,
      "index": 1169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfacePermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for granting permissions on an EC2 network interface. It includes fields for specifying the network interface ID, target AWS account or service, permission type, and optional dry run flag. The module provides functions to construct, parse, and serialize these requests in various formats including JSON, query parameters, and XML.",
      "description_length": 370,
      "index": 1170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying options of a specific VPN tunnel in an EC2 environment. It includes fields to identify the VPN connection, target tunnel IP, and new tunnel settings, along with an optional dry-run flag. Operations include creating the request, parsing XML input, and converting to query or JSON formats for API interaction.",
      "description_length": 361,
      "index": 1171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionVpcInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing VPC peering connection details, including CIDR blocks, owner information, and peering options. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when managing or inspecting VPC peering relationships in AWS EC2, particularly for handling connection metadata during API interactions.",
      "description_length": 410,
      "index": 1172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClassicLinkInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing ClassicLink instances in EC2, supporting filtering by instance IDs and other criteria. It provides functions to construct, parse, and serialize requests in various formats including JSON and query parameters. Use this module when querying AWS EC2 to retrieve information about linked VPC instances.",
      "description_length": 355,
      "index": 1173,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupIngressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for revoking ingress rules in a security group, supporting field-based configuration of IP ranges, ports, protocols, and source groups. It provides functions to construct, serialize, and parse these requests in various formats including JSON and query parameters. Concrete use cases include modifying EC2 security group permissions programmatically and integrating with AWS API tooling for network access control.",
      "description_length": 453,
      "index": 1174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for replacing a network ACL association in EC2, including the association ID, optional dry run flag, and new network ACL ID. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Concrete use cases include modifying network ACL associations during infrastructure automation or network reconfiguration tasks.",
      "description_length": 412,
      "index": 1175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecordSet",
      "library": "aws-ec2",
      "description": "This module represents a list of EC2 history record entries and provides direct conversions between XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, along with serialization to JSON and AWS query parameters. Use this module when handling EC2 event history data in different formats, particularly for API interactions or log processing.",
      "description_length": 367,
      "index": 1176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayAttachmentPropagationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving propagation details of a transit gateway attachment in AWS EC2. It includes operations to construct, serialize, and parse the request, supporting filtering, pagination, and dry-run functionality. It works directly with EC2 transit gateway attachment IDs, filter lists, and pagination tokens.",
      "description_length": 346,
      "index": 1177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing fast snapshot restores in EC2, providing constructors, parsing, and serialization functions. It works with the `DescribeFastSnapshotRestoreSuccessSet` type and an optional string token for pagination. It is used to process and format responses from the EC2 API when managing snapshot restore operations.",
      "description_length": 348,
      "index": 1178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TunnelOptionsList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tunnel options, providing direct conversions to and from XML, JSON, and query parameters. It supports parsing AWS XML responses into typed tunnel option lists and serializing them for API requests. Concrete use cases include configuring and retrieving EC2 instance tunnel options in AWS SDK workflows.",
      "description_length": 334,
      "index": 1179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteList",
      "library": "aws-ec2",
      "description": "This module defines a list of local gateway routes with operations to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and AWS query parameters to handle route data. It is used to manage route entries in a local gateway route table when interacting with EC2 networking APIs.",
      "description_length": 327,
      "index": 1180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceInterruptionBehavior",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with three constructors\u2014`Hibernate`, `Stop`, and `Terminate`\u2014representing possible behaviors for EC2 instance interruption. It includes functions to convert between strings and the type, serialize to JSON or query parameters, and parse from XML or JSON. These operations are used when configuring EC2 instance lifecycle policies or handling spot instance termination settings.",
      "description_length": 423,
      "index": 1181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnAuthorizationRulesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing client VPN authorization rules, including a set of authorization rules and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing client VPN access configurations in AWS EC2, particularly for retrieving and processing authorization rule sets.",
      "description_length": 401,
      "index": 1182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateVpcCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to disassociate a VPC CIDR block, containing an `association_id`. It provides functions to construct the type, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This is used specifically for handling VPC CIDR block disassociation requests in AWS EC2 API interactions.",
      "description_length": 373,
      "index": 1183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving managed prefix list associations in AWS EC2. It includes operations to construct, parse, and serialize the result, which contains a set of prefix list associations and an optional pagination token. It is used when working with VPC prefix lists to manage and track their associations with resources like VPCs or accounts.",
      "description_length": 365,
      "index": 1184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for disabling VPC ClassicLink DNS support, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. It is used when handling responses from AWS EC2 API calls that disable DNS support for linked VPCs.",
      "description_length": 324,
      "index": 1185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVpcAssociationsResult",
      "library": "aws-ec2",
      "description": "This module handles results from describing local gateway route table VPC associations in AWS EC2. It includes operations for creating, parsing, and serializing result data containing association sets and pagination tokens. It is used to process responses when querying VPC associations for local gateway route tables, supporting both XML and JSON formats.",
      "description_length": 356,
      "index": 1186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StatusType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the status of an EC2 instance monitoring check, with four possible states: `Passed`, `Failed`, `Insufficient_data`, and `Initializing`. It provides bidirectional conversions between these states and strings, JSON, and XML, enabling seamless serialization and deserialization for API interactions. These functions are used when interpreting or sending EC2 instance status data to and from AWS services.",
      "description_length": 461,
      "index": 1187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StateReason",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling state reasons in EC2, with optional code and message fields. It provides functions to construct, parse, and convert state reason data to and from JSON, query parameters, and XML. Use this module when working with EC2 instance state changes that include diagnostic information.",
      "description_length": 326,
      "index": 1188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of copying an FPGA image, containing an optional FPGA image ID. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used to handle responses from the EC2 CopyFpgaImage API call, enabling easy integration with AWS SDK workflows.",
      "description_length": 350,
      "index": 1189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of Phase 2 DH group numbers used in EC2 VPN connection requests. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `Phase2DHGroupNumbersRequestListValue.t`. Concrete use cases include preparing and parsing API requests and responses for EC2's VPN configuration operations.",
      "description_length": 418,
      "index": 1190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceFamilyCreditSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying credit configurations for EC2 instance families, including optional fields for the instance family and CPU credit type. It provides functions to construct, serialize, and deserialize these specifications to and from JSON, query parameters, and XML. Concrete use cases include configuring burstable performance instances and managing credit allocation in EC2 auto-scaling groups.",
      "description_length": 430,
      "index": 1191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachClassicLinkVpcRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for attaching a classic link to a VPC in EC2. It includes fields for dry run flag, security groups, instance ID, and VPC ID, along with functions to construct, parse, and serialize the request for API calls. It is used when configuring network connectivity between EC2 instances and VPCs in AWS environments.",
      "description_length": 350,
      "index": 1192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value within a list of Phase 1 Diffie-Hellman group numbers for EC2 VPN connections. It includes operations to construct, parse, and serialize the value to various formats such as JSON and AWS query parameters. It is used when configuring or retrieving VPN tunnel options that specify allowed DH groups.",
      "description_length": 362,
      "index": 1193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribePublicIpv4PoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing public IPv4 pools in EC2, including the list of pools and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when processing responses from the EC2 API's `DescribePublicIpv4Pools` operation.",
      "description_length": 339,
      "index": 1194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceTypeDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing service type details in EC2, primarily used for handling service-specific configurations. It includes functions to construct, parse, and serialize service type data to and from XML, JSON, and query formats. Concrete use cases include processing responses from EC2 API calls related to service types and building requests that specify service configurations.",
      "description_length": 407,
      "index": 1195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AcceptTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of accepting a transit gateway peering attachment, containing an optional transit gateway peering attachment object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML nodes. It is used when handling responses from AWS EC2 API calls that accept peering attachments between transit gateways.",
      "description_length": 429,
      "index": 1196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionNotificationsResult",
      "library": "aws-ec2",
      "description": "Handles the result of describing VPC endpoint connection notifications, including a set of connection notifications and an optional pagination token. Works with `ConnectionNotificationSet` and string data types. Used to retrieve and manage VPC endpoint connection notification details from AWS EC2 responses.",
      "description_length": 308,
      "index": 1197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a managed prefix list, including a dry run flag and prefix list ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 operations. Use this module when configuring or managing network access controls in AWS environments.",
      "description_length": 312,
      "index": 1198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInternetGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing internet gateways in EC2, providing access to the list of gateways and an optional next token for pagination. It works with XML, JSON, and query string representations of the result data. Use this module when processing responses from EC2's `DescribeInternetGateways` API call, especially for handling pagination and serializing/deserializing data.",
      "description_length": 393,
      "index": 1199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocateHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for allocating dedicated hosts in EC2, including parameters like availability zone, instance type, quantity, and tagging. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Use this module when programmatically provisioning dedicated hosts with specific configurations and metadata.",
      "description_length": 373,
      "index": 1200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLocalGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a local gateway route in EC2, containing an optional `LocalGatewayRoute.t`. It provides functions to construct, parse, and serialize the result for use in API requests and responses, specifically handling XML, JSON, and query parameter formats. It is used when interacting with AWS EC2's local gateway routing APIs to manage virtual private cloud (VPC) network configurations.",
      "description_length": 449,
      "index": 1201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeModificationState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the state of a volume modification in EC2, with specific values like `Modifying`, `Optimizing`, `Completed`, and `Failed`. It includes functions to convert between strings and the variant type, serialize to and from JSON and query formats, and parse from XML nodes. It is used to track and manage the lifecycle of EBS volume modifications in AWS EC2 APIs.",
      "description_length": 415,
      "index": 1202,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 2 tunnel configuration requests. It supports parsing from XML, conversion to query parameters and JSON, and construction with an optional string value. Concrete use cases include specifying allowed encryption algorithms when configuring or modifying EC2 virtual private gateways or transit gateways.",
      "description_length": 405,
      "index": 1203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type for disk types, supporting conversions to and from strings, JSON, and query parameters. It includes functions for parsing disk type values from XML, JSON, and string inputs, as well as serializing them for API requests. Concrete use cases include handling disk type input in EC2 instance configuration and responding to disk type queries in AWS API integrations.",
      "description_length": 409,
      "index": 1204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAddressesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 address information, supporting filtering by public IPs, allocation IDs, and custom filters. It includes operations to construct, parse, and serialize requests in various formats, including JSON and query strings. Concrete use cases include retrieving metadata about allocated Elastic IPs or checking address assignments before instance termination.",
      "description_length": 406,
      "index": 1205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetErrorCode",
      "library": "aws-ec2",
      "description": "This module defines a set of error codes related to fleet deletion operations in EC2, including malformed IDs, invalid states, and unexpected errors. It provides bidirectional conversions between error codes and strings, JSON and XML parsing, and query parameter serialization. These functions are used to handle and interpret errors returned when attempting to delete EC2 fleets.",
      "description_length": 380,
      "index": 1206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DefaultTargetCapacityType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing capacity types for EC2 Auto Scaling groups, with variants `Spot` and `On_demand`. It includes functions to convert between strings and the enumerated type, serialize to JSON and query formats, and parse from XML and JSON. Use this when configuring or interpreting EC2 Auto Scaling group capacity settings in AWS integrations.",
      "description_length": 369,
      "index": 1207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6PoolSet",
      "library": "aws-ec2",
      "description": "This module handles the manipulation of IPv6 pool data structures, primarily through parsing, conversion to query format, and JSON serialization. It works with lists of IPv6 pool records, enabling operations like extracting data from XML responses, constructing JSON payloads, and preparing request parameters. Concrete use cases include processing EC2 API responses containing IPv6 pool information and formatting such data for API requests.",
      "description_length": 442,
      "index": 1208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplateVersionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 launch template versions, including a set of versions and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when retrieving or handling versioned EC2 launch templates, especially with paginated results.",
      "description_length": 363,
      "index": 1209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IKE versions in EC2 requests, primarily used when configuring virtual private gateways or customer gateways. It includes operations for creating, parsing, and serializing the structure to query parameters or JSON format. The module works with a record type that holds an optional string value representing the IKE version.",
      "description_length": 374,
      "index": 1210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HistoryRecord",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing historical events related to EC2 resources, including event details, type, and timestamp. It provides functions to construct, serialize, and convert these records to and from JSON and query formats. It is used to process and store event history data retrieved from EC2 API calls, such as instance state changes or scheduled events.",
      "description_length": 382,
      "index": 1211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VgwTelemetryList",
      "library": "aws-ec2",
      "description": "This module represents a list of virtual gateway telemetry entries, providing functions to convert the list to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing from JSON values. Use this module when handling EC2 virtual private gateway telemetry data in different serialization formats.",
      "description_length": 331,
      "index": 1212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AcceptVpcEndpointConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for accepting VPC endpoint connections, including fields for dry-run mode, service ID, and a list of VPC endpoint IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when managing VPC endpoint connectivity in AWS infrastructure automation workflows.",
      "description_length": 367,
      "index": 1213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupMembersResult",
      "library": "aws-ec2",
      "description": "This module represents the result of deregistering multicast group members in a transit gateway, containing an optional record of deregistered members. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used when handling responses from AWS EC2 API calls that deregister multicast group members from a transit gateway.",
      "description_length": 403,
      "index": 1214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StaleIpPermission",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing stale IP permissions in EC2 security group rules, including optional port ranges, IP protocol, IP ranges, prefix list IDs, and user/group pairs. It provides functions to construct, parse, and serialize these permissions to and from XML, JSON, and AWS query format. Use this module when managing or inspecting outdated or pending security group rule changes in EC2.",
      "description_length": 408,
      "index": 1215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateSubnetCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a subnet CIDR block, containing an optional IPv6 CIDR block association and a subnet ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling responses from AWS EC2 API calls that associate CIDR blocks with subnets.",
      "description_length": 374,
      "index": 1216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for importing a volume in EC2, including parameters like availability zone, image details, and volume configuration. It provides functions to construct, serialize, and parse these requests, specifically working with XML, JSON, and query string formats. It is used when initiating volume imports from disk images in AWS EC2.",
      "description_length": 363,
      "index": 1217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 tags, providing operations to convert between XML, JSON, and query parameter representations. It supports parsing tag lists from XML nodes, serializing to HTTP query format, and converting to and from JSON structures. Use this module when working with AWS EC2 resources that require tagging, such as instances or volumes, to manage metadata in different API formats.",
      "description_length": 399,
      "index": 1218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringTgwInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing peering transit gateway information with optional fields for transit gateway ID, owner ID, and region. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. Concrete use cases include handling EC2 peering connection responses and managing transit gateway associations in AWS infrastructure code.",
      "description_length": 415,
      "index": 1219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotInstanceRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling spot instance requests, including an optional dry-run flag and a list of spot instance request IDs. It provides functions to construct, parse, and serialize the request for use with EC2 API operations. Concrete use cases include programmatically canceling EC2 spot instance requests and testing cancellation actions without applying changes.",
      "description_length": 395,
      "index": 1220,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.MoveStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` with two values representing the status of moving EC2 instances between VPC and Classic networking. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling EC2 instance migration status in API requests or responses.",
      "description_length": 404,
      "index": 1221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotDatafeedSubscriptionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing a Spot Instance data feed subscription. It provides operations to create, parse, and serialize the result, which includes an optional Spot data feed subscription record. The module works with XML, JSON, and query parameter representations, making it suitable for use in AWS API clients that need to process or send Spot data feed subscription responses.",
      "description_length": 398,
      "index": 1222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteTableAssociationResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of replacing a route table association, including an optional new association ID and an optional association state. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include handling EC2 route table replacement operations and integrating with AWS SDK workflows.",
      "description_length": 397,
      "index": 1223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointConnectionNotificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating VPC endpoint connection notifications in AWS EC2. It includes fields for specifying the notification ARN, connection events, and optional identifiers like service ID or VPC endpoint ID. The module provides functions to construct, serialize, and parse these requests, primarily working with string and boolean types alongside EC2-specific lists and JSON or query representations. Use cases include configuring event-based monitoring for VPC endpoint connections using AWS's API.",
      "description_length": 530,
      "index": 1224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateVersionSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, conversion, and serialization of launch template version data in AWS EC2. It works with lists of launch template version records, supporting operations to convert to and from XML, JSON, and query formats. It is used when retrieving or specifying multiple launch template versions in API requests and responses.",
      "description_length": 343,
      "index": 1225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpotMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot market options in EC2 launch templates, with fields like maximum price, spot instance type, block duration, validity period, and interruption behavior. It provides functions to construct, serialize, and parse these options to and from JSON, query parameters, and XML. Use this module when setting up or modifying EC2 spot instance configurations programmatically.",
      "description_length": 421,
      "index": 1226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a transit gateway in AWS EC2, primarily working with the `TransitGateway` type. It provides functions to construct, parse, and serialize the result data, including conversion to JSON and query formats. Concrete use cases include processing responses from EC2 API calls that modify transit gateway configurations.",
      "description_length": 356,
      "index": 1227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a traffic mirror session, including an optional session ID. It provides functions to construct, parse, and serialize the result in various formats such as JSON and query parameters. Concrete use cases include handling responses from EC2 API calls that delete traffic mirror sessions, allowing for easy extraction and manipulation of the returned session ID.",
      "description_length": 430,
      "index": 1228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateRouteTableResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of associating a route table with a subnet or gateway in EC2. It includes functions to construct, parse, and serialize the result, which contains an optional association ID and association state. Use this module when managing route table associations programmatically, such as after creating or modifying VPC routing.",
      "description_length": 378,
      "index": 1229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySpotFleetRequestResponse",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the response from modifying a Spot Fleet request, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the response in various formats including JSON, query parameters, and XML. This module is used to handle the output of Spot Fleet modification operations in EC2, enabling programmatic response validation and integration with AWS APIs.",
      "description_length": 443,
      "index": 1230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway attachment in AWS EC2, with fields for identifiers, state, resource type, and tags. It provides functions to construct, parse, and serialize the structure to and from JSON, query format, and XML. Use this module when managing transit gateway attachments programmatically, such as when creating, listing, or modifying attachments in an AWS environment.",
      "description_length": 419,
      "index": 1231,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of an EC2 export task, including `Active`, `Cancelling`, `Cancelled`, and `Completed`. It provides bidirectional conversions between the type and strings, along with serialization and deserialization functions for JSON and query parameters. These operations are used when interacting with AWS EC2 export tasks, such as interpreting API responses or constructing requests.",
      "description_length": 448,
      "index": 1232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a default subnet in a specified availability zone, with an optional dry-run flag. It includes functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Concrete use cases include configuring EC2 networking resources programmatically before deployment or validating subnet creation requests without applying changes.",
      "description_length": 436,
      "index": 1233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 key pair names as strings. It provides functions to convert these lists to and from JSON and query parameters, and to parse them from XML. Use this when working with EC2 API operations that require multiple key names, such as describing or deleting key pairs.",
      "description_length": 292,
      "index": 1234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCarrierGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing carrier gateways in EC2, including optional identifiers, filters, pagination, and dry run settings. It provides functions to construct, parse, and serialize these requests to JSON, query parameters, or XML. Use this module when configuring API calls to retrieve carrier gateway information with specific constraints or filters.",
      "description_length": 384,
      "index": 1235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a managed prefix list in EC2. It provides constructors, parsing, and serialization functions for a type that may contain a `ManagedPrefixList`. It is used to interpret and generate responses from EC2 API calls involving prefix list deletions.",
      "description_length": 285,
      "index": 1236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RequestSpotFleetResponse",
      "library": "aws-ec2",
      "description": "This module defines a response type for spot fleet requests, containing an optional spot fleet request ID. It provides functions to construct, parse, and convert the response to query parameters, JSON, or XML. Use this module when handling responses from spot fleet request operations in EC2, particularly to retrieve the ID of a created spot fleet request.",
      "description_length": 357,
      "index": 1237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageDiskContainerList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 image disk containers, providing direct conversions to and from XML, JSON, and query formats. It supports parsing from XML nodes, constructing empty lists, and serializing to AWS-compatible JSON and query structures. Use this module when working with EC2 image import/export operations that require disk container metadata in specific wire formats.",
      "description_length": 381,
      "index": 1238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 VPN connections, supporting filtering by criteria and specifying connection IDs. It includes operations to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include retrieving specific VPN connection details, applying filters to narrow results, and dry-run validation of requests.",
      "description_length": 391,
      "index": 1239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 2 DH group numbers for EC2 requests, containing an optional integer. It provides functions to construct, parse, and serialize the value to query parameters or JSON, as well as parsing from JSON. This is used when configuring or modifying EC2 VPN tunnel options that require specifying Diffie-Hellman groups.",
      "description_length": 391,
      "index": 1240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a Client VPN connection with fields for metadata like connection IDs, timestamps, IP addresses, and traffic statistics. It provides functions to construct, parse, and convert the structure to and from JSON, query parameters, and XML. Use this module to manage and serialize Client VPN connection data retrieved from or sent to the EC2 API.",
      "description_length": 389,
      "index": 1241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceVolumeDetailItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the volume details of an instance import task, including fields like availability zone, bytes converted, image description, and volume status. It provides constructors, parsing from XML, and serialization to JSON and query formats. Concrete use cases include handling EC2 instance import responses and managing disk image metadata during VM migration workflows.",
      "description_length": 411,
      "index": 1242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnaSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumeration with three values representing ENA support states and provides bidirectional conversion between these values and strings. It includes functions to serialize and deserialize the enumeration to and from JSON, query parameters, and XML, as well as helper functions for parsing and constructing the values. Concrete use cases include handling ENA support settings when interacting with EC2 instance types and configurations.",
      "description_length": 455,
      "index": 1243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InternetGatewayIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 internet gateway IDs, represented as strings. It provides functions to convert these lists to and from XML, JSON, and query string formats. Use this when working with AWS EC2 API operations that require or return multiple internet gateway IDs.",
      "description_length": 276,
      "index": 1244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a transit gateway, containing an optional `TransitGateway` object. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Use this module when handling responses from EC2 API calls that delete transit gateways, particularly for inspecting or passing along the resulting gateway data.",
      "description_length": 426,
      "index": 1245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportEnvironment",
      "library": "aws-ec2",
      "description": "This module defines an enumeration of export environments (`Citrix`, `Vmware`, `Microsoft`) and provides bidirectional conversion functions between these values and strings, JSON, and XML. It supports parsing and serialization for use in API requests and responses, particularly when interacting with AWS EC2 export tasks. The module is used to specify the target virtualization environment when exporting EC2 instances.",
      "description_length": 420,
      "index": 1246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IpRangeList",
      "library": "aws-ec2",
      "description": "This module represents a list of IP ranges, providing operations to convert between XML, JSON, and query string formats. It works with lists of `IpRange.t` values, enabling serialization and deserialization for use in API requests and responses. Concrete use cases include processing EC2 security group rules and handling IP range data in AWS API integrations.",
      "description_length": 360,
      "index": 1247,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RebootInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rebooting EC2 instances, containing a list of instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include preparing instance reboot operations and validating requests without execution via the dry-run option.",
      "description_length": 359,
      "index": 1248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoipPoolIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string-based COIP pool IDs, providing operations to convert them to and from JSON and query formats. It includes parsing from XML nodes and constructing empty or initialized sets. Concrete use cases include managing COIP pool ID lists when interacting with EC2 APIs, particularly for batch operations or filtering resources.",
      "description_length": 354,
      "index": 1249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PurchaseSet",
      "library": "aws-ec2",
      "description": "This module handles a list of purchase records, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with lists of `Purchase.t` values, focusing on serialization and deserialization for API interactions. Use this module when processing EC2 purchase responses or building requests involving multiple purchases.",
      "description_length": 365,
      "index": 1250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateSubnetCidrBlockRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for associating an IPv6 CIDR block with a subnet in EC2. It includes operations to construct, parse, and serialize the request in various formats such as JSON and query parameters. It is used when configuring IPv6 networking for subnets in AWS EC2 environments.",
      "description_length": 298,
      "index": 1251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAccountAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing account attributes in EC2, primarily parsing and serializing the `account_attributes` field. It works with XML, JSON, and query parameter representations of account attribute data. Use this module when interacting with AWS EC2's `DescribeAccountAttributes` API to process responses in different formats.",
      "description_length": 348,
      "index": 1252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of phase 2 integrity algorithm values used in EC2 VPN tunnel configurations. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `Phase2IntegrityAlgorithmsListValue.t` type. It is used when configuring or retrieving EC2 VPN connection options that require specifying allowed integrity algorithms for phase 2 of the IKE negotiation.",
      "description_length": 455,
      "index": 1253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.State",
      "library": "aws-ec2",
      "description": "This module defines an enumeration of states representing the lifecycle status of resources, such as network interfaces or VPC peering connections. It provides functions to convert between string representations and enumerated values, along with serialization and deserialization for JSON, XML, and query parameters. These operations are used when interpreting or sending state information to AWS EC2 APIs, such as determining whether a resource is available, pending, or deleted.",
      "description_length": 480,
      "index": 1254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing an EBS snapshot into EC2, including optional metadata like encryption settings, KMS key IDs, and disk container details. It provides functions to construct, serialize, and parse snapshot import requests, primarily working with XML, JSON, and query string formats. Concrete use cases include initiating snapshot imports with custom encryption settings and tagging strategies.",
      "description_length": 425,
      "index": 1255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 1 IPsec settings. It includes functions for constructing, serializing, and parsing this structure to and from JSON, query parameters, and XML. It is used when configuring or retrieving VPN connection options in AWS EC2.",
      "description_length": 325,
      "index": 1256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling capacity reservation specifications in EC2, including optional preference and target settings. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving EC2 instance capacity reservations with specific targeting or preference policies.",
      "description_length": 385,
      "index": 1257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailableCapacity",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the available capacity of an EC2 instance, including instance capacity and optional vCPU count. It provides functions to construct, parse, and serialize this data for use in querying or configuring EC2 resources. Use cases include checking resource availability and provisioning instances based on capacity requirements.",
      "description_length": 370,
      "index": 1258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTableVpcAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway route table VPC associations, supporting filtering, pagination, and dry-run options. It operates on EC2-specific types such as association ID sets, filter lists, and standard AWS primitives like integers and strings. Concrete use cases include retrieving and inspecting route table associations in EC2 for network management or auditing purposes.",
      "description_length": 413,
      "index": 1259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a placement group in Amazon EC2, with optional fields for the group name, state, strategy, partition count, group ID, and tags. It provides functions to construct, parse, and convert placement group data to and from XML, JSON, and query formats. Use this module when managing EC2 placement groups, such as when creating, describing, or tagging placement groups in an AWS environment.",
      "description_length": 433,
      "index": 1260,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for creating an EC2 Transit Gateway, including optional description, request options, tag specifications, and dry-run flag. It provides functions to construct, serialize, and parse transit gateway creation requests in various formats such as JSON, query parameters, and XML. It is used when setting up a new transit gateway in AWS EC2, allowing precise control over networking and tagging behavior during creation.",
      "description_length": 452,
      "index": 1261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTagKeySet",
      "library": "aws-ec2",
      "description": "This module handles a list of string values representing instance tag keys in EC2. It provides operations to convert these lists to and from query parameters, XML nodes, and JSON values. Use this module when working with EC2 instance tags in API requests and responses.",
      "description_length": 269,
      "index": 1262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotTaskDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the details of an EC2 snapshot task, including fields like status, encryption, and disk image size. It provides functions to construct, parse, and convert snapshot task details to and from JSON and query formats. It is used to manage metadata and state information for importing or exporting snapshots in EC2.",
      "description_length": 359,
      "index": 1263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a Client VPN endpoint in AWS EC2, including the endpoint ID, status, and DNS name. It provides functions to construct, parse, and serialize this result for use in API responses or further processing. Concrete use cases include handling the output of a Client VPN creation request and converting it to JSON or query parameters for downstream services.",
      "description_length": 423,
      "index": 1264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ContainerFormat",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing container formats supported by EC2, with conversions to and from strings, JSON, and query parameters. It provides operations for parsing container formats from XML, converting to string representations, and serializing to AWS-compatible formats. Concrete use cases include handling container format values when importing or exporting EC2 images.",
      "description_length": 403,
      "index": 1265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 prefix list IDs, providing functions to parse, convert to query parameters, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query strings to facilitate interactions with AWS EC2 APIs. Use this module when constructing or processing API requests and responses that involve multiple prefix list IDs.",
      "description_length": 374,
      "index": 1266,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusDetailsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of EC2 instance status details. It provides functions to convert between XML, JSON, and query string representations of the data, specifically for working with AWS EC2 instance status responses. Use this module when processing EC2 health check results or monitoring events from AWS.",
      "description_length": 365,
      "index": 1267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCapacityReservationSpecificationResponse",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the capacity reservation settings for an EC2 launch template, with optional fields for preference and target configuration. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving capacity reservation details for EC2 instances launched from a template.",
      "description_length": 404,
      "index": 1268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMappingList",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of block device mappings in AWS EC2. It provides functions to convert between XML, JSON, and query string formats for lists of block device mappings. Use this module when configuring or retrieving EC2 instance storage settings via AWS SDK calls.",
      "description_length": 303,
      "index": 1269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoresResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disabling fast snapshot restores in EC2. It provides constructors, parsing, and serialization functions for a result type containing sets of successful and unsuccessful snapshot restore entries. It is used to process and manage responses from EC2 API calls that disable fast snapshot restores on specific snapshots.",
      "description_length": 349,
      "index": 1270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPairList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 key pair information, providing direct conversions to and from XML, JSON, and query formats. It supports parsing key pair data from AWS responses and constructing requests with key pair details. Use this when managing SSH key pairs for EC2 instances, such as listing or importing keys.",
      "description_length": 318,
      "index": 1271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AutoPlacement",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `On` and `Off`, representing auto-placement settings for EC2 instances. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to configure whether EC2 instances are automatically placed onto dedicated hosts.",
      "description_length": 370,
      "index": 1272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayAssociationState",
      "library": "aws-ec2",
      "description": "This module defines a set of string conversion utilities and serialization functions for a sum type representing the association state of a transit gateway. It supports operations like converting between string values and the enumerated type, parsing from XML nodes, and serializing to JSON or query parameters. Concrete use cases include handling API responses and request parameters in AWS EC2 transit gateway management workflows.",
      "description_length": 433,
      "index": 1273,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 transit gateway route table IDs represented as strings. Provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Useful when managing route table associations in transit gateways, where multiple route tables need to be referenced by ID.",
      "description_length": 306,
      "index": 1274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of transit gateway multicast domain associations in AWS EC2. It provides functions to parse XML input into association lists, convert association lists to query parameters or JSON format, and construct association lists from JSON data. Use this module when managing multicast domain associations in AWS EC2, particularly when interacting with the API via XML or JSON.",
      "description_length": 393,
      "index": 1275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2DHGroupNumbersList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 2 DH group numbers used in EC2 VPN tunnel options. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of Phase2DHGroupNumbersListValue.t values. It is used when configuring or retrieving EC2 VPN connection settings that require specifying Diffie-Hellman groups for phase 2 of the IKE negotiation.",
      "description_length": 427,
      "index": 1276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a VPC peering connection, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to query parameters or JSON. This is used when handling responses from AWS EC2 API calls that delete VPC peering connections.",
      "description_length": 343,
      "index": 1277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 security group, including its configuration such as ingress and egress rules, tags, and associated VPC. It provides functions to construct, serialize, and parse security group data for use in API requests and responses. Concrete use cases include managing firewall rules for instances, organizing resources with tags, and integrating with VPC networking.",
      "description_length": 411,
      "index": 1278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnGatewayList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VpnGateway objects, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, and constructs gateway lists used in AWS EC2 API requests. Concrete use cases include processing responses from `DescribeVpnGateways` and building requests that involve multiple VpnGateways.",
      "description_length": 365,
      "index": 1279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsServersOptionsModifyStructure",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying DNS server options in EC2, supporting operations to create, parse, and serialize instances. It works with custom DNS server lists and an optional boolean flag to enable or disable DNS support. Concrete use cases include configuring VPC DNS settings via the AWS SDK, such as setting custom DNS servers or toggling DNS resolution for a VPC.",
      "description_length": 389,
      "index": 1280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeletePlacementGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a placement group in EC2, including optional dry-run functionality and the group name. It provides operations to construct, parse, and serialize the request to query parameters or JSON format. Use this module when interacting with EC2's placement group deletion API, particularly for building or processing deletion requests programmatically.",
      "description_length": 395,
      "index": 1281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PeeringAttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of a VPC peering attachment, consisting of an optional status code and message. It provides functions to construct, parse, and convert the status to and from XML, JSON, and query formats. This module is used to handle status information returned by EC2 API operations related to VPC peering connections.",
      "description_length": 368,
      "index": 1282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatePlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying the placement configuration of an EC2 instance within a launch template. It includes fields like availability zone, tenancy, host ID, and partition number, enabling precise control over instance placement. Operations include creating, parsing, and serializing placement configurations to and from JSON, query strings, and XML.",
      "description_length": 378,
      "index": 1283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a route table in a VPC, including optional dry-run flag, VPC identifier, and resource tagging specifications. It provides functions to construct, serialize, and parse route table creation requests in JSON, query string, and XML formats. Concrete use cases include configuring network routing rules programmatically and managing route tables as part of automated infrastructure deployment workflows.",
      "description_length": 453,
      "index": 1284,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of ElasticGpus.t values. It provides functions to convert between XML, JSON, and query string representations of this data. It is used when working with AWS EC2 API requests and responses that involve collections of elastic GPUs.",
      "description_length": 297,
      "index": 1285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing client VPN authentication methods in AWS EC2, including certificate-based, directory service, and federated authentication. It provides bidirectional conversion functions between strings and the variant type, along with serialization and deserialization for JSON, XML, and query parameters. This module is used to configure and interpret authentication types when managing client VPN endpoints in AWS.",
      "description_length": 461,
      "index": 1286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifySpotFleetRequestRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 Spot Fleet requests, including fields like termination policy, launch template configurations, and capacity targets. It provides functions to construct, parse, and serialize the structure for use in API requests. Concrete use cases include adjusting fleet capacity or updating launch configurations in AWS EC2 Spot Fleet management workflows.",
      "description_length": 397,
      "index": 1287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateConfigList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template configurations, providing direct conversions to and from XML, JSON, and query formats. It supports parsing AWS XML responses into typed launch template configurations and serializing them for API requests. Use this when working with AWS EC2 APIs that require or return launch template configuration lists, such as DescribeInstances or RunInstances.",
      "description_length": 397,
      "index": 1288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteCarrierGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a carrier gateway, containing an optional `CarrierGateway` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from AWS EC2 API calls that delete carrier gateways, enabling downstream processing or logging of the deleted gateway's details.",
      "description_length": 444,
      "index": 1289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignedPrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling an assigned private IP address, consisting of an optional string field. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Use this module when managing EC2 instance network configurations that involve private IP address assignments.",
      "description_length": 346,
      "index": 1290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPrefixListAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway prefix list attachment, with fields for the attachment ID, resource type, and resource ID. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing network configurations in AWS EC2 by associating prefix lists with transit gateway attachments.",
      "description_length": 403,
      "index": 1291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplacementStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing replacement strategies, specifically supporting conversion between string representations and the enumerated values. It provides functions for parsing, serializing, and converting values to and from JSON, query parameters, and XML. This module is used when configuring EC2 auto-scaling or instance replacement policies, where precise strategy values are required for API requests or response handling.",
      "description_length": 459,
      "index": 1292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTransitGatewayRoutesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for exporting transit gateway routes to an S3 bucket. It includes fields for specifying the route table ID, filters, S3 bucket name, and an optional dry-run flag. The module provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML.",
      "description_length": 341,
      "index": 1293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1IntegrityAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles a list of Phase 1 integrity algorithm requests for EC2 VPN connections. It provides operations to convert the list to and from JSON and query formats, and to parse it from XML. Use this when configuring or retrieving VPN tunnel options in AWS EC2.",
      "description_length": 267,
      "index": 1294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayRouteTablesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying transit gateway route tables, including identifiers, filters, pagination, and dry-run options. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. It is used when retrieving information about specific transit gateway route tables in AWS EC2.",
      "description_length": 359,
      "index": 1295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnclaveOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing enclave options for an EC2 instance, with an optional boolean field indicating whether enclaves are enabled. It provides functions to construct, parse, and convert the data structure to and from JSON, query parameters, and XML. Concrete use cases include configuring enclave settings when launching or modifying EC2 instances via the AWS SDK.",
      "description_length": 398,
      "index": 1296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetInstance",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 fleet instance with fields for launch templates, lifecycle status, instance IDs, instance type, and platform. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to manage and track individual instances within an EC2 fleet, particularly during fleet creation or status checks.",
      "description_length": 405,
      "index": 1297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SlotStartTimeRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a time range with optional earliest and latest times, primarily used when requesting slot start times. It provides functions to create, parse, and convert instances to query parameters or JSON format, facilitating interactions with AWS EC2 APIs that require time range constraints. Use cases include filtering available slot times based on specific scheduling requirements.",
      "description_length": 425,
      "index": 1298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplatesMonitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for monitoring settings in EC2 launch templates, specifically supporting optional boolean configuration for monitoring. It provides functions to construct, parse, and serialize monitoring configurations to query parameters or JSON format. Use this module when configuring or retrieving monitoring options for EC2 instances launched from templates.",
      "description_length": 384,
      "index": 1299,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VirtualizationType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing virtualization types with two variants: `Hvm` and `Paravirtual`. It provides functions to convert between strings and the enumerated type, including bidirectional mappings and JSON/XML serialization. It is used to specify and parse virtualization type values in EC2 instance configurations and API requests.",
      "description_length": 351,
      "index": 1300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetCidrBlockStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a subnet CIDR block in AWS EC2, including transitions like association and disassociation. It provides direct conversions between string representations and the enumerated values, along with serialization to and from JSON and query formats. It is used to interpret and manipulate subnet CIDR block states in API responses and requests.",
      "description_length": 400,
      "index": 1301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ActiveInstanceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of active EC2 instances. It provides functions to convert between XML, JSON, and query string representations of instance data. Use this module when processing responses from EC2 API calls that return multiple active instances, such as describing or monitoring instance sets.",
      "description_length": 358,
      "index": 1302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayAttachmentsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 transit gateway attachments, including fields for attachment IDs, filters, pagination, and dry run options. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying specific transit gateway attachments by ID or filter, paginating through large result sets, and testing configurations without applying changes.",
      "description_length": 446,
      "index": 1303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifierList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group identifiers, providing functions to convert them to and from XML, JSON, and query parameters. It supports operations for parsing group identifier lists from XML nodes, serializing them to JSON or query strings, and constructing or extracting group identifier lists from JSON values. Concrete use cases include handling security group associations in EC2 instance configurations and processing batch responses involving multiple security groups.",
      "description_length": 492,
      "index": 1304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsEgressResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for updating security group egress rule descriptions, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used specifically when modifying egress rules in EC2 security groups to reflect description changes in AWS.",
      "description_length": 382,
      "index": 1305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of enabling VPC classic link in AWS EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling API responses for VPC classic link enablement operations.",
      "description_length": 348,
      "index": 1306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorSessionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an EC2 Traffic Mirror session, including required fields like network interface, target, and filter IDs, along with optional parameters such as packet length, description, and tags. It provides functions to construct, serialize, and parse the request in different formats (query, JSON, XML). Use this module when configuring traffic mirroring for network monitoring or analysis in AWS EC2 environments.",
      "description_length": 455,
      "index": 1307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DhcpConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing DHCP configuration settings, specifically handling key-value pairs used in EC2 instance networking. It provides functions to create, serialize, and parse configurations to and from XML, JSON, and query formats. Concrete use cases include configuring custom DHCP options for EC2 instances, such as setting domain names or DNS servers.",
      "description_length": 383,
      "index": 1308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MonitorInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for monitoring EC2 instances, including instance IDs and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include enabling detailed monitoring for specific instances or testing request configurations without applying changes.",
      "description_length": 358,
      "index": 1309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateDhcpOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating DHCP options with a VPC, including fields for DHCP options ID, VPC ID, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. The module is used when configuring network settings in EC2 by linking custom DHCP options to a specific VPC.",
      "description_length": 357,
      "index": 1310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting queued Reserved Instances in EC2, capturing both successful and failed deletions. It works with structured sets of deletion results, specifically `SuccessfulQueuedPurchaseDeletionSet` and `FailedQueuedPurchaseDeletionSet`. Use this module to process and serialize deletion outcomes when managing Reserved Instance capacity in AWS.",
      "description_length": 373,
      "index": 1311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskS3Location",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying S3 bucket and prefix information, primarily used when configuring EC2 export tasks. It includes functions to construct, parse, and serialize the structure to various formats like JSON and query parameters. Concrete use cases include setting up export task destinations in AWS EC2 and processing related API responses.",
      "description_length": 369,
      "index": 1312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MemoryInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for memory information with an optional size in MiB. It provides functions to create, parse, and convert memory info to and from query parameters, JSON, and XML. Use this module when handling EC2 instance memory details in API requests or responses.",
      "description_length": 286,
      "index": 1313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeBundleTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing bundle tasks in EC2, including optional bundle IDs, filters, and a dry run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying the status of instance bundling tasks and applying filters to narrow down results.",
      "description_length": 351,
      "index": 1314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Static` and `Propagated`, representing route types for AWS EC2 transit gateways. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization functions for JSON, XML, and query parameters. This module is used when configuring or interpreting route propagation behavior in AWS EC2 transit gateway route tables.",
      "description_length": 435,
      "index": 1315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteState",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `Active` and `Blackhole`, representing the state of a route in a routing table. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML or JSON. It is used to determine whether a route is actively routing traffic or dropping it (blackholed) in EC2 network configurations.",
      "description_length": 406,
      "index": 1316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesBlockDeviceMappingSet",
      "library": "aws-ec2",
      "description": "Handles block device mappings for scheduled EC2 instances by converting between XML, JSON, and query formats. It processes lists of block device mappings, enabling serialization and deserialization during API requests and responses. Used when configuring or retrieving block device settings for scheduled instance launches.",
      "description_length": 323,
      "index": 1317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL entry in Amazon EC2, with fields for CIDR blocks, IPv6 CIDR blocks, port ranges, ICMP type codes, and rule actions. It provides functions to construct, serialize, and parse these entries in various formats including JSON, query parameters, and XML. Use this module when managing network access control lists in EC2 to define ingress or egress rules with specific protocols, ports, and IP ranges.",
      "description_length": 459,
      "index": 1318,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a route from an EC2 route table, supporting optional fields like destination CIDR, IPv6 CIDR, or prefix list ID, along with a dry run flag. It provides operations to construct, serialize, and parse route deletion requests in JSON, query string, and XML formats. Concrete use cases include programmatically removing specific routes based on network criteria before modifying route tables in AWS infrastructure automation scripts.",
      "description_length": 481,
      "index": 1319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCarrierGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a carrier gateway in EC2, including required VPC ID and optional parameters like tag specifications, dry run flag, and client token. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring and sending carrier gateway creation requests programmatically.",
      "description_length": 381,
      "index": 1320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an association in a transit gateway multicast domain, including optional fields for attachment ID, resource ID, resource type, and subnet. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing multicast domain associations in AWS EC2 by serializing and deserializing API requests and responses.",
      "description_length": 437,
      "index": 1321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumesModificationsResult",
      "library": "aws-ec2",
      "description": "This module handles results from describing volume modifications in EC2, providing constructors, JSON and XML parsers, and query conversion. It works with volume modification lists and optional pagination tokens. Use it to process and serialize responses when querying the status of EBS volume modifications.",
      "description_length": 308,
      "index": 1322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PaymentOption",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing payment options for EC2 instances: `AllUpfront`, `PartialUpfront`, and `NoUpfront`. It provides bidirectional conversions between strings and the enumerated type, including functions to serialize and deserialize values to and from JSON, query parameters, and XML. These operations support handling payment option fields when interacting with EC2 APIs, such as launching or describing reserved instances.",
      "description_length": 460,
      "index": 1323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstanceAvailabilityRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying scheduled instance availability in EC2. It includes fields for filtering results, specifying time ranges, controlling result size, and defining recurrence patterns. Operations include creating requests, parsing XML responses, and converting to query parameters or JSON for API communication.",
      "description_length": 344,
      "index": 1324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateEnclaveCertificateIamRoleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating an IAM role from an enclave certificate, containing optional fields for certificate ARN, role ARN, and a dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls, specifically handling conversions to query parameters and JSON format. Use cases include configuring AWS EC2 enclave certificate permissions and simulating role disassociation without applying changes.",
      "description_length": 470,
      "index": 1325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostReservationOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying host reservation offerings, including filters, duration constraints, pagination, and specific offering identifiers. It provides functions to construct, parse, and serialize these requests to JSON or query parameters for API interactions. Use this module when retrieving available host reservations with specific criteria from AWS EC2.",
      "description_length": 387,
      "index": 1326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesErrorCode",
      "library": "aws-ec2",
      "description": "This module defines error codes for handling failures when deleting queued Reserved Instances in EC2. It includes operations to convert between string representations and enumerated error types, and supports serialization to and from JSON and query formats. It is used to interpret and respond to specific failure conditions during Reserved Instance management operations.",
      "description_length": 372,
      "index": 1327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkCardInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for network card information with optional fields including index, performance, and maximum interfaces. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include handling EC2 instance metadata and configuring network resources in AWS deployments.",
      "description_length": 365,
      "index": 1328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateIamInstanceProfileSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying IAM instance profiles in EC2 launch templates, with optional ARN and name fields. It provides functions to construct, parse, and convert these specifications to and from JSON and query formats. Use this module when configuring EC2 instances to associate IAM roles during launch, either through direct ARN references or named profiles.",
      "description_length": 386,
      "index": 1329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway VPC attachment in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional transit gateway VPC attachment object. Use this module when managing VPC connectivity through transit gateways, particularly for processing API responses or building requests in JSON or query format.",
      "description_length": 383,
      "index": 1330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 image export requests, including fields like image ID, disk format, S3 export location, and optional settings such as dry run or role name. It provides functions to construct, serialize, and parse these requests in JSON and query formats. Concrete use cases include initiating image exports to S3, specifying export parameters programmatically, and integrating with AWS SDK operations that require image export configurations.",
      "description_length": 480,
      "index": 1331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImagesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 images, primarily storing a list of images. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when retrieving and processing image metadata from EC2, such as listing available AMIs or filtering images by attributes.",
      "description_length": 338,
      "index": 1332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIpv6CidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an IPv6 CIDR block association for a subnet, including its association ID, CIDR block, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing IPv6 subnets in EC2, particularly when associating or describing IPv6 CIDR blocks attached to subnets.",
      "description_length": 386,
      "index": 1333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LogDestinationType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing log destination types for EC2, specifically `Cloud_watch_logs` and `S3`. It includes functions to convert between strings and the `t` type, serialize to and from JSON and query formats, and parse from XML nodes. It is used to specify and handle log destination configurations in EC2 API interactions.",
      "description_length": 364,
      "index": 1334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIamInstanceProfileAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying IAM instance profile associations in EC2. It includes fields for filtering by association IDs, custom filters, pagination controls, and provides functions to construct, serialize, and parse these requests. It is used when retrieving information about IAM instance profile associations from AWS, particularly in paginated responses.",
      "description_length": 384,
      "index": 1335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AccountAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing account attributes in EC2, including their name and associated values. It provides functions to construct, serialize, and parse these attributes to and from XML, JSON, and query formats. Concrete use cases include handling responses from EC2 API calls that describe account limits or resource quotas.",
      "description_length": 354,
      "index": 1336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceNetworkAclEntryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for replacing a network ACL entry in EC2, including fields like CIDR block, protocol, rule action, and more. It provides functions to construct, parse, and serialize the request for use with AWS API calls. The module is used when programmatically updating network access control lists in an EC2 environment.",
      "description_length": 347,
      "index": 1337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association state of a route table in AWS EC2, with specific values like `Associating`, `Associated`, and others. It provides direct conversions between string representations and the enumerated type, along with serialization and deserialization functions for JSON and XML. Use cases include tracking and transmitting route table association states in EC2 networking operations.",
      "description_length": 434,
      "index": 1338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPCs by providing operations to parse, convert, and construct them. It includes functions to transform VPC lists into query parameters, JSON representations, and back from JSON or XML input. Use this module when working with AWS EC2 VPC responses or when building requests that require VPC data in different formats.",
      "description_length": 349,
      "index": 1339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceReservationValueSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of `ReservedInstanceReservationValue` records. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 reserved instance reservation values. Use this module when processing AWS EC2 API responses or preparing requests involving reserved instance values.",
      "description_length": 391,
      "index": 1340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceNetworkInterfaceSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of EC2 launch template network interface specifications. It provides functions to convert between XML, JSON, and query string representations of these lists, and includes a constructor for creating empty instances. It is used when configuring or retrieving network interfaces for EC2 instances via launch templates.",
      "description_length": 397,
      "index": 1341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsOptimizedInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing EBS optimization metrics of EC2 instances, including baseline and maximum bandwidth, throughput, and IOPS. It provides functions to construct, parse, and serialize these metrics for use in API requests and responses. Concrete use cases include configuring EC2 instance types with EBS performance characteristics and processing AWS API responses containing EBS optimization data.",
      "description_length": 429,
      "index": 1342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStateChange",
      "library": "aws-ec2",
      "description": "This module represents changes in the state of EC2 instances, capturing the previous and current states along with the instance ID. It provides functions to construct, parse, and serialize state change data for use in API requests and responses. Use this module when handling instance lifecycle events or monitoring state transitions in EC2 instances.",
      "description_length": 351,
      "index": 1343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnStaticRouteSource",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with the value `Static`, representing the source of a static route in a virtual private network configuration. It provides functions to convert between strings and the enumerated type, including bidirectional mappings and JSON/XML serialization. These operations are used when processing and transmitting static route source information in AWS EC2 API requests and responses.",
      "description_length": 424,
      "index": 1344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachClassicLinkVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of attaching a VPC to a ClassicLink instance, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used specifically for handling responses from the EC2 ClassicLink VPC attachment API operations.",
      "description_length": 392,
      "index": 1345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying a Transit Gateway VPC attachment, including fields to specify subnets to add or remove and optional configuration settings. It provides functions to construct, serialize, and parse this structure, enabling precise updates to network attachments in AWS EC2. Use cases include adjusting VPC connectivity by modifying associated subnets and applying configuration changes without re-creating the attachment.",
      "description_length": 455,
      "index": 1346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetRequestConfig",
      "library": "aws-ec2",
      "description": "This module defines a record type for configuring EC2 Spot Fleet requests, including fields like creation time, request state, and tags. It provides functions to construct, parse, and serialize configurations to and from JSON and query formats. Concrete use cases include managing spot fleet lifecycle states, tagging resources, and handling request metadata in AWS deployments.",
      "description_length": 378,
      "index": 1347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayNetworkInterfaceIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway network interface IDs, represented as base string types. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use this when working with AWS EC2 APIs that require or return collections of transit gateway network interface IDs.",
      "description_length": 339,
      "index": 1348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Status",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the status of an EC2 instance, with specific values for move progress, VPC, and classic network states. It includes functions to convert between strings and the variant type, along with serialization and deserialization routines for JSON, XML, and query parameters. It is used to handle instance status values in API requests and responses, such as when retrieving or updating instance network configurations.",
      "description_length": 469,
      "index": 1349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionStateReasonCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a VPC peering connection in AWS EC2, such as `Active`, `Pending_acceptance`, and `Failed`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization capabilities for JSON, XML, and query parameters. These operations support handling VPC peering connection state responses from AWS APIs and constructing requests based on known state codes.",
      "description_length": 492,
      "index": 1350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstanceAvailabilityResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing scheduled instance availability in EC2. It includes operations to create, parse, and convert the result to and from JSON and query formats. It works with scheduled instance availability sets and optional next tokens for pagination.",
      "description_length": 276,
      "index": 1351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfacesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying local gateway virtual interfaces, supporting filtering, pagination, and dry-run options. It works with EC2-specific types such as virtual interface ID sets, filter lists, and standard AWS pagination and boolean types. It is used to construct and serialize API requests when retrieving information about local gateway virtual interfaces from AWS EC2.",
      "description_length": 402,
      "index": 1352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEbsBlockDeviceRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type representing EBS block device configuration for EC2 launch templates, with optional fields for encryption, deletion behavior, IOPS, KMS key, snapshot, volume size, and volume type. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. It is used to specify EBS volumes when creating EC2 instances via launch templates.",
      "description_length": 410,
      "index": 1353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserBucketDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding optional S3 bucket and key information, along with functions to construct, parse, and serialize these details. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with EC2-related APIs that require S3 references. Concrete use cases include handling instance metadata configurations and image export tasks where S3 storage details are required.",
      "description_length": 429,
      "index": 1354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcTenancy",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the tenancy options for a VPC in AWS EC2, specifically the `Default` value. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. It is used when configuring VPCs to specify whether instances run on shared or dedicated hardware.",
      "description_length": 327,
      "index": 1355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceIamInstanceProfileAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for replacing an IAM instance profile association in EC2, containing an IAM instance profile specification and an association ID. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling direct interaction with AWS EC2's API for managing instance profile associations. Use cases include updating the IAM role attached to a running EC2 instance by specifying a new profile and the existing association ID.",
      "description_length": 493,
      "index": 1356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateDefaultSubnetResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a default subnet in EC2, primarily by parsing and serializing a subnet response. It works with XML, JSON, and query string formats, supporting interaction with AWS EC2's API. Concrete use cases include processing the output of a subnet creation request and converting it into a structured format for further handling or transmission.",
      "description_length": 376,
      "index": 1357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFlowLogsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting flow logs, including a dry run flag and a list of flow log IDs. It provides functions to construct, parse, and serialize the request for use with query parameters or JSON APIs. Concrete use cases include preparing deletion requests for AWS EC2 flow logs before sending them via an API client.",
      "description_length": 345,
      "index": 1358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionFieldList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror session fields in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when configuring or retrieving traffic mirror session settings in AWS.",
      "description_length": 275,
      "index": 1359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceLifecycleType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` with constructors `Spot` and `Scheduled`, representing EC2 instance lifecycle types. It provides bidirectional conversions between strings and `t`, including list mappings, direct conversion functions, and JSON and XML parsing and serialization. Use this module when handling EC2 instance lifecycle values in API requests, responses, or configuration data.",
      "description_length": 407,
      "index": 1360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotCapacityRebalance",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot capacity rebalance strategies in EC2 fleets, including an optional replacement strategy. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for API interactions. Use this module when setting up or modifying EC2 fleet configurations that require spot instance rebalancing logic.",
      "description_length": 383,
      "index": 1361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesPrivateIpAddressConfig",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring private IP addresses in scheduled EC2 instances, with optional boolean and string fields. It provides functions to construct, serialize, and convert instances of this configuration type to and from JSON, query parameters, and XML. Use this module when setting up or modifying scheduled instances with custom private IP configurations in AWS EC2.",
      "description_length": 398,
      "index": 1362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTablePropagationList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of lists of transit gateway route table propagation entries. It provides functions to convert between XML, JSON, and query string formats, specifically for lists of `TransitGatewayRouteTablePropagation.t` values. Use this module when working with AWS EC2 transit gateway route table propagation data in different wire formats.",
      "description_length": 387,
      "index": 1363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ResetEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for resetting the default KMS key ID for EBS volumes in AWS EC2. It works with a single type `t` that holds an optional `dry_run` boolean, and provides functions to construct, parse, and convert the request to query or JSON formats. It is used when making API calls to modify EBS encryption settings programmatically.",
      "description_length": 387,
      "index": 1364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterfaceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying network interface configurations when launching or modifying EC2 instances. It includes fields for controlling IP addressing, security groups, device indexing, and interface lifecycle behavior. Operations include constructing specifications, converting to and from JSON and query formats, and parsing from XML data.",
      "description_length": 367,
      "index": 1365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 fleet launch templates, with optional fields for template ID, name, and version. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include configuring EC2 Auto Scaling fleets using launch templates and serializing template specifications for API requests.",
      "description_length": 396,
      "index": 1366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsEntry",
      "library": "aws-ec2",
      "description": "This module defines a data structure for DNS entries with optional DNS name and hosted zone ID fields. It provides functions to construct, parse, and convert DNS entry data to and from XML, JSON, and query formats. It is used when managing DNS information for resources like EC2 instances or load balancers.",
      "description_length": 307,
      "index": 1367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstancesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of an EC2 instance description call, containing a list of reservations and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. Concrete use cases include handling responses from AWS EC2's `DescribeInstances` API to retrieve and process instance information across multiple reservations.",
      "description_length": 423,
      "index": 1368,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EbsEncryptionSupport",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Unsupported` and `Supported`, representing EBS encryption support status. It provides functions to convert between strings and the `t` type, along with serialization to and from JSON and query formats. It is used to handle EBS encryption support values when interacting with EC2 instance types or configuration data.",
      "description_length": 367,
      "index": 1369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Scope",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Availability_Zone` and `Region`, representing scope types in EC2. It provides functions to convert between strings and the type, including bidirectional mappings, JSON and XML parsing, and query parameter serialization. Use cases include handling EC2 API requests and responses where scope values must be serialized or deserialized.",
      "description_length": 383,
      "index": 1370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteTableList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway route tables. It provides operations to convert between XML, JSON, and query string representations of these lists. Use it when working with AWS EC2 transit gateway route table collections in API requests or responses.",
      "description_length": 298,
      "index": 1371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCountList",
      "library": "aws-ec2",
      "description": "This module handles lists of instance counts in AWS EC2 operations. It provides functions to convert instance count lists to and from JSON and query formats, and includes a parser for XML input. Use this module when managing instance count data during EC2 instance configuration or status reporting.",
      "description_length": 299,
      "index": 1372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateway route tables, including a list of route tables and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when retrieving and processing route table information from AWS EC2 transit gateways, particularly in paginated responses.",
      "description_length": 398,
      "index": 1373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateCustomerGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating a customer gateway in AWS EC2, including fields such as BGP ASN, public IP, and gateway type. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. Use this module when configuring a customer gateway for a Site-to-Site VPN connection in AWS.",
      "description_length": 362,
      "index": 1374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UpdateSecurityGroupRuleDescriptionsIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of updating ingress security group rule descriptions in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional boolean indicating success. The primary data type is a record with a `return` field of type `Aws.BaseTypes.Boolean.t option`, and it supports conversion to and from JSON and query formats.",
      "description_length": 380,
      "index": 1375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of a spot instance, including optional code, message, and update time fields. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include handling spot instance status responses from AWS EC2 and serializing them for logging or further processing.",
      "description_length": 392,
      "index": 1376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FederatedAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring federated authentication in EC2 by specifying optional SAML provider ARNs. It provides functions to construct, serialize, and parse these configurations from XML, JSON, or query parameters. Use this module when setting up or modifying EC2 instances that integrate with SAML-based identity providers for user authentication.",
      "description_length": 376,
      "index": 1377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a peering attachment between two transit gateways. It includes fields for transit gateway IDs, peer account ID, region, tag specifications, and a dry-run flag. Operations include constructing the request, parsing XML input, and converting to query or JSON formats for API interaction.",
      "description_length": 337,
      "index": 1378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InferenceDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for inference device information with optional count, name, and manufacturer fields. It provides functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used to describe inference devices in EC2 instance types, such as those used for machine learning workloads.",
      "description_length": 359,
      "index": 1379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OccurrenceDayRequestSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of integers representing occurrence days. It provides functions to convert between XML nodes, query parameters, and JSON values. Use this module when working with EC2 scheduled instance requests that require specifying days of the month or week.",
      "description_length": 313,
      "index": 1380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssignPrivateIpAddressesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of assigning private IP addresses to an EC2 network interface. It provides functions to create, parse, and serialize the result, which includes the network interface ID and a list of assigned private IP addresses. Use this module when managing IP address assignments in EC2 networking operations.",
      "description_length": 327,
      "index": 1381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a local gateway route in EC2, including transitions like activation, deletion, and routing behavior. It provides direct conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON and XML formats. This module is used to interpret and manipulate route state data when interacting with EC2's local gateway APIs, particularly when handling route table updates or monitoring route status changes.",
      "description_length": 541,
      "index": 1382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionOptionsSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying options when creating or modifying a VPN connection in AWS EC2. It includes fields for enabling acceleration, setting IP versions, defining tunnel options and network CIDRs, along with conversions to and from JSON and query formats. It is used to configure detailed settings for VPN connections programmatically.",
      "description_length": 364,
      "index": 1383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeStatusResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 volume status, providing functions to create, parse, and serialize the response. It works with a custom type containing an optional next token and a list of volume statuses. Use it to process and transform volume status data returned from AWS EC2 API calls.",
      "description_length": 306,
      "index": 1384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResourceList",
      "library": "aws-ec2",
      "description": "This module represents a list of string-based resources, primarily used for handling collections of identifiers or tags in EC2 operations. It provides functions to convert resource lists to and from XML, JSON, and query parameters, enabling seamless integration with AWS API requests and responses. Use cases include parsing EC2 instance tags from API responses, constructing lists of resource IDs for batch operations, and serializing resource data for logging or debugging.",
      "description_length": 475,
      "index": 1385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a managed prefix list in EC2, including parameters like name, address family, entry list, and maximum entries. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Use this module when configuring and submitting prefix list creation operations in EC2.",
      "description_length": 350,
      "index": 1386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyManagedPrefixListRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying AWS EC2 prefix lists, including fields to specify changes such as adding or removing entries, setting the prefix list name, and handling versioning. It provides functions to construct, serialize, and parse these modification requests, supporting both JSON and XML formats. Concrete use cases include updating a managed prefix list's entries in AWS EC2, ensuring correct versioning and dry-run checks during the update process.",
      "description_length": 477,
      "index": 1387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to EC2 fleet descriptions, including fields for launch templates, instance lifecycle, error codes, and messages. It provides functions to construct, parse, and serialize these error records to and from XML, JSON, and query formats. Use this module when processing failed EC2 fleet requests to extract detailed error information.",
      "description_length": 393,
      "index": 1388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImageTypeValues",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing image types in EC2, including machine, kernel, and ramdisk. It provides bidirectional conversion between strings and the enumerated values, along with serialization to and from JSON, query parameters, and XML. These operations support handling image type data in API requests and responses when interacting with EC2 services.",
      "description_length": 377,
      "index": 1389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ZoneIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 zone ID strings, providing conversions to and from JSON and query parameters. It supports parsing from XML nodes and includes a placeholder `make` function that returns a unit value. Use this module when working with AWS EC2 operations that require handling multiple zone IDs, such as describing or filtering resources across availability zones.",
      "description_length": 378,
      "index": 1390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing IP permissions in EC2 security group rules, including ports, protocols, and various range types. It provides functions to construct, parse, and serialize these permissions to and from XML, JSON, and AWS query formats. Concrete use cases include configuring security group ingress and egress rules with specific IP ranges, port ranges, and user group pairs.",
      "description_length": 410,
      "index": 1391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayPrefixListReferenceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a transit gateway prefix list reference in AWS EC2. It provides constructors, parsers, and serializers for working with the optional `TransitGatewayPrefixListReference` type, specifically used when updating route table associations with prefix lists. Use this module when interacting with EC2's transit gateway APIs to manage prefix list references and process their responses in query or JSON formats.",
      "description_length": 446,
      "index": 1392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 VPC attributes, specifically `EnableDnsSupport` and `EnableDnsHostnames`. It provides bidirectional conversions between strings and the variant type, along with functions to serialize and deserialize values to and from JSON, XML, and query parameters. These operations are used when configuring or querying VPC attribute settings in AWS EC2 APIs.",
      "description_length": 414,
      "index": 1393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportImageTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 import image tasks, providing structured access to a list of import tasks and an optional pagination token. It supports parsing from XML, converting to query format, and serializing to and from JSON. Concrete use cases include processing responses from AWS EC2's `DescribeImportImageTasks` API call and managing paginated results.",
      "description_length": 379,
      "index": 1394,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointServiceConfigurationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying a VPC endpoint service configuration, with an optional boolean indicating success. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used specifically for handling responses from the EC2 API when updating VPC endpoint service settings.",
      "description_length": 379,
      "index": 1395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for attaching a network interface to an EC2 instance, with fields including device index, instance ID, and network interface ID. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query strings. It is used when programmatically managing network interfaces in AWS EC2, such as during instance configuration or network reconfiguration tasks.",
      "description_length": 430,
      "index": 1396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for importing an EC2 key pair, including fields like key name, public key material, and optional tags. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this when programmatically importing SSH keys into AWS EC2 to launch instances with secure access.",
      "description_length": 348,
      "index": 1397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for FPGA device information with optional fields such as name, manufacturer, count, and memory details. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. It is used to represent and manipulate FPGA device metadata in EC2 instance configurations.",
      "description_length": 356,
      "index": 1398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupMembersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering multicast group members in a transit gateway, including optional identifiers for the multicast domain, group IP address, and network interfaces. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring multicast traffic management in a virtual private cloud environment.",
      "description_length": 398,
      "index": 1399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CustomerGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a customer gateway in AWS EC2, with fields for BGP ASN, IP address, gateway state, type, and optional certificate or device name. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing customer gateway configurations and serializing them for API requests or storage.",
      "description_length": 408,
      "index": 1400,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotCapacityRebalance",
      "library": "aws-ec2",
      "description": "This module defines a type `t` that represents spot capacity rebalance configuration with an optional replacement strategy. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. It is used when configuring EC2 spot fleet or auto scaling group rebalance behavior in AWS.",
      "description_length": 321,
      "index": 1401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an EC2 transit gateway multicast domain, including required fields like transit gateway ID and optional parameters such as tag specifications and dry run flag. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include configuring multicast domain creation requests within AWS EC2 infrastructure automation workflows.",
      "description_length": 471,
      "index": 1402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RegisterInstanceTagAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for registering instance tag attributes in EC2, including whether to include all instance tags and a set of specific tag keys. It provides functions to construct, parse, and serialize the request for use with API calls, specifically handling XML and JSON formats. It is used when configuring instance tag propagation in EC2 fleet or launch template settings.",
      "description_length": 398,
      "index": 1403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalIdFormatList",
      "library": "aws-ec2",
      "description": "This module handles lists of principal ID formats in AWS EC2, providing operations to convert between XML, JSON, and query string representations. It includes functions to parse XML nodes into a list of principal ID format values, serialize the list to a query or JSON format, and construct empty instances. It is used when managing resource ID formatting preferences for AWS principals in EC2 API requests.",
      "description_length": 407,
      "index": 1404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Image",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 image with detailed metadata such as architecture, state, block device mappings, and platform details. It includes functions to construct, serialize, and deserialize image data for use in API requests and responses. Concrete use cases include managing custom machine images, querying image properties for instance launch configurations, and processing image data returned by EC2 API calls.",
      "description_length": 446,
      "index": 1405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSnapshotAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 snapshot attributes, including the attribute name, snapshot ID, and optional dry-run flag. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Concrete use cases include querying permissions or metadata of an EC2 snapshot before modifying or sharing it.",
      "description_length": 361,
      "index": 1406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceRecurrence",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying recurring schedules in EC2 instances, with fields for frequency, interval, day sets, and relative occurrence units. It includes functions to construct, parse, and serialize these schedules to and from XML, JSON, and query formats. It is used to configure scheduled instance launch patterns with precise recurrence rules.",
      "description_length": 372,
      "index": 1407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorRuleAction",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with two values, `Accept` and `Reject`, representing actions for traffic mirror rules. It includes functions to convert between strings and the enumerated type, as well as serialization and deserialization to JSON, query parameters, and XML. These operations are used when configuring and managing traffic mirroring rules in AWS EC2.",
      "description_length": 372,
      "index": 1408,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientCertificateRevocationListStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a client certificate revocation list, with fields for a status code and a descriptive message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This module is used to handle status information when managing client certificate revocation lists in EC2 operations.",
      "description_length": 387,
      "index": 1409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA device information in AWS EC2. It provides operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when working with FPGA device data in EC2 instance responses or when configuring FPGA-based instances programmatically.",
      "description_length": 310,
      "index": 1410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageVolumeDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a disk image volume with optional identifier and size. It provides functions to construct, parse, and convert the structure to query parameters, JSON, or XML. Use this module when handling EC2 disk image metadata, such as during instance import or snapshot management workflows.",
      "description_length": 328,
      "index": 1411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group names, encoded as strings. It provides functions to convert these lists to and from JSON and query parameters, and to parse them from XML. Use this when working with EC2 APIs that require multiple security group names in requests or responses.",
      "description_length": 291,
      "index": 1412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnectionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN connection records, providing direct conversions to and from XML, JSON, and query formats. It supports parsing XML node sequences into typed VPN connection lists and serializing those lists for API requests or JSON responses. Concrete use cases include processing AWS EC2 API responses containing multiple VPN connections and preparing batch VPN connection data for API submissions.",
      "description_length": 419,
      "index": 1413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorNetworkServiceList",
      "library": "aws-ec2",
      "description": "This module defines a list of traffic mirror network service types and provides functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON values to handle AWS EC2 traffic mirror service lists in API requests and responses. Concrete use cases include processing traffic mirror configuration data during virtual network setup or monitoring.",
      "description_length": 390,
      "index": 1414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for disassociating a client VPN target network, including fields for the client VPN endpoint ID, association ID, and an optional dry-run flag. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML formats. It is used when making API requests to disassociate a target network from an AWS Client VPN endpoint, ensuring proper configuration management and validation before execution.",
      "description_length": 468,
      "index": 1415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesIpv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 addresses for scheduled EC2 instances. It provides functions to parse XML input into IPv6 address lists, convert them to query parameters or JSON format, and construct them from JSON data. It works directly with lists of `ScheduledInstancesIpv6Address.t` values, supporting serialization, deserialization, and query construction for AWS EC2 API interactions.",
      "description_length": 392,
      "index": 1416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of prefix list data as a list of `PrefixList.t` values. It provides functions to convert between XML, JSON, and query string representations, specifically for working with EC2 prefix list sets in AWS API requests and responses. Use this module when interacting with AWS EC2 operations that require or return prefix list information, such as describing or modifying VPC prefix lists.",
      "description_length": 455,
      "index": 1417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EndDateType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `Unlimited` and `Limited`, representing end date options in EC2 configurations. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML nodes or JSON. Concrete use cases include handling EC2 spot instance request termination policies and managing lifecycle event configurations.",
      "description_length": 413,
      "index": 1418,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateConfigListRequest",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and transformation of EC2 fleet launch template configurations. It works with lists of `FleetLaunchTemplateConfigRequest.t` values, supporting conversion to and from XML, JSON, and query parameters. It is used when configuring EC2 fleets by specifying multiple launch templates and their overrides.",
      "description_length": 354,
      "index": 1419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, converting, and serializing lists of fast snapshot restore error items. It provides operations to convert error sets to JSON, query format, and back, as well as parsing from XML. It is used when managing EC2 snapshot restore errors, particularly in scenarios involving batch operations and error reporting.",
      "description_length": 335,
      "index": 1420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and conversion of EC2 validation error lists. It provides operations to convert error lists to and from XML, JSON, and query parameters. Use this module when processing EC2 API responses that include validation errors, particularly for handling input validation feedback from AWS services.",
      "description_length": 333,
      "index": 1421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.HostReservation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a host reservation in AWS EC2, including fields such as count, duration, pricing, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use cases include managing reserved host instances, tracking billing options, and handling reservation lifecycle events in EC2.",
      "description_length": 381,
      "index": 1422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListId",
      "library": "aws-ec2",
      "description": "This module defines a data structure with optional `description` and `prefix_list_id` fields, both as strings. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and from JSON. It is used when working with EC2 prefix list identifiers in API requests and responses.",
      "description_length": 309,
      "index": 1423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayOptions",
      "library": "aws-ec2",
      "description": "This module defines a record type with optional fields for configuring transit gateway settings, such as DNS support, route table associations, and propagation. It provides functions to construct, serialize, and parse these configuration options, primarily used when modifying AWS EC2 transit gateways. The module supports operations for converting configurations to and from JSON and query formats, enabling integration with AWS API requests.",
      "description_length": 443,
      "index": 1424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CpuOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying CPU options in EC2 instance configurations, with optional fields for core count and threads per core. It provides functions to construct, serialize, and parse these options in various formats including JSON, query parameters, and XML. Concrete use cases include configuring instance CPU settings when launching or modifying EC2 instances via the AWS SDK.",
      "description_length": 406,
      "index": 1425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnEndpointsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing AWS EC2 Client VPN endpoints, providing operations to create, parse, and serialize the response data. It works with `EndpointSet.t` for managing sets of endpoints and an optional `String.t` for pagination tokens. Concrete use cases include processing API responses when listing Client VPN endpoints and preparing data for subsequent API requests or client-side processing.",
      "description_length": 417,
      "index": 1426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BlockDeviceMappingRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of block device mappings for EC2 instances. It provides operations to convert mappings to and from XML, JSON, and query parameters, supporting instance configuration during launch or modification. Use cases include serializing block device settings for API requests or parsing responses containing device configurations.",
      "description_length": 346,
      "index": 1427,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateReservedInstancesListingResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a reserved instances listing in EC2. It provides functions to construct, parse, and serialize the result, which includes a list of reserved instances listings. Use this module when managing EC2 reserved instance listings via AWS SDK operations.",
      "description_length": 287,
      "index": 1428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfacesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 local gateway virtual interfaces, providing constructors, JSON serialization/deserialization, and query conversion. It works with the `LocalGatewayVirtualInterfaceSet` and optional string `next_token` for pagination. Concrete use cases include processing responses from AWS EC2 API calls to list and paginate through local gateway virtual interfaces.",
      "description_length": 399,
      "index": 1429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSubnetIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of subnet IDs used in VPC endpoint configurations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML. It is used when configuring or retrieving VPC endpoints that are associated with specific subnets.",
      "description_length": 291,
      "index": 1430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance block device mapping, with optional fields for the device name and EBS volume details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when configuring or describing EC2 instance storage devices, particularly for specifying EBS volumes attached to instances.",
      "description_length": 398,
      "index": 1431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorPortRangeRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a range of ports in network traffic mirroring configurations. It includes functions to create, serialize, and parse port ranges using JSON, query parameters, or XML. Use this module when configuring AWS EC2 traffic mirroring rules that require filtering by source or destination port ranges.",
      "description_length": 343,
      "index": 1432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 CIDR block associations in EC2, with optional fields for the CIDR and associated resource. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing IPv6 network configurations for EC2 resources, such as VPCs or subnets.",
      "description_length": 358,
      "index": 1433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHibernationOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing hibernation options for an EC2 launch template, with a single field indicating whether hibernation is configured. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when configuring or retrieving EC2 instance hibernation settings in launch templates.",
      "description_length": 378,
      "index": 1434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of rejecting a Transit Gateway VPC attachment in AWS EC2. It provides constructors, JSON and XML parsers, and query builders for working with the optional `TransitGatewayVpcAttachment` data structure. Use this module when managing VPC attachment rejection responses from AWS API calls.",
      "description_length": 316,
      "index": 1435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Static` and `Propagated`, representing local gateway route types in EC2. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to handle route type values when interacting with AWS EC2 APIs, particularly for managing local gateway route tables.",
      "description_length": 423,
      "index": 1436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1DHGroupNumbersRequestListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 1 DH group numbers for EC2 requests, containing an optional integer. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. This module is used when configuring or retrieving VPN connection options that require specifying Diffie-Hellman groups.",
      "description_length": 395,
      "index": 1437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsInstanceBlockDevice",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EBS instance block device attachment, with fields for attachment time, deletion policy, status, and volume ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing EC2 instance storage configurations, particularly for serializing and deserializing EBS device attachment details during API interactions.",
      "description_length": 438,
      "index": 1438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6Address",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling IPv6 addresses associated with EC2 instances, including optional IPv6 address fields. It provides functions to construct, parse, and convert these addresses to and from JSON and query formats. It is used when managing instance metadata or configuring network interfaces with IPv6 support in AWS EC2.",
      "description_length": 349,
      "index": 1439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DnsNameState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the verification state of a DNS name, with values `PendingVerification`, `Verified`, and `Failed`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used to handle DNS name validation states when interacting with EC2 APIs, such as when managing SSL certificates or domain configurations.",
      "description_length": 480,
      "index": 1440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionNotificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying VPC endpoint connection notifications, including optional parameters like dry-run flag, notification ID, filters, and pagination. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include listing connection notifications for monitoring VPC endpoint connectivity events and managing notification configurations.",
      "description_length": 438,
      "index": 1441,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 route table IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 API requests and responses that involve multiple route table IDs.",
      "description_length": 292,
      "index": 1442,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 launch templates, with optional fields for template ID, name, and version. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include configuring EC2 instance launches using predefined templates in AWS deployments.",
      "description_length": 354,
      "index": 1443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of `DeleteFleetSuccessItem` values. It provides functions to convert between XML, JSON, and query string representations, specifically for processing results from EC2 fleet deletion operations. Use this module when working with responses from the EC2 API related to fleet termination, particularly for extracting and formatting success item data.",
      "description_length": 429,
      "index": 1444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RouteTableAssociationState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the association state of a route table in EC2, including its state code and optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing route table associations in AWS EC2, particularly for handling state transitions and status reporting.",
      "description_length": 394,
      "index": 1445,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulitcastDomainAssociationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association states of a transit gateway multicast domain. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization operations for JSON, XML, and query parameters. These capabilities are used when handling transit gateway multicast domain associations in AWS EC2 API requests and responses.",
      "description_length": 424,
      "index": 1446,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAcceleratorAssociationList",
      "library": "aws-ec2",
      "description": "This module handles lists of elastic inference accelerator associations in EC2. It provides functions to parse XML data into association lists, convert them to query parameters or JSON format, and construct empty lists. It is used when managing EC2 instance accelerators, particularly for serializing and deserializing data during API interactions.",
      "description_length": 348,
      "index": 1447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume attachment records. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization and deserialization for volume attachment lists. It is used when managing EBS volume attachments in EC2 instances, particularly during API requests and responses.",
      "description_length": 313,
      "index": 1448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a launch template in AWS EC2, containing an optional `LaunchTemplate` record. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Use this module when handling EC2 launch template deletions to capture and process the returned data in a structured format.",
      "description_length": 381,
      "index": 1449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeExportImageTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying export image tasks, including optional parameters like dry run, filters, task IDs, and pagination. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Concrete use cases include initiating and managing EC2 image export operations with customizable filters and pagination controls.",
      "description_length": 398,
      "index": 1450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IKEVersionsRequestList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of IKE versions request lists in AWS EC2. It operates on a list of `IKEVersionsRequestListValue.t` values, supporting conversions to and from XML, JSON, and query parameters. It is used when configuring or retrieving IKE version settings for EC2 virtual private gateways or customer gateways.",
      "description_length": 360,
      "index": 1451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationType",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing the kinds of connection notifications supported by EC2, currently only `Topic`. It includes functions to convert between string representations and the enumerated type, along with serialization and deserialization functions for JSON, query parameters, and XML. Use this module when configuring or handling EC2 connection notifications that target SNS topics.",
      "description_length": 416,
      "index": 1452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Snapshot",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 snapshot with fields for metadata like snapshot ID, volume ID, encryption settings, and state. It includes functions to construct, parse, and convert snapshot data to and from JSON and query formats. Concrete use cases include managing snapshot creation, tracking encryption status, and handling state transitions during volume backups.",
      "description_length": 393,
      "index": 1453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotInstanceRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying spot instance requests, including filters, request IDs, and pagination parameters. It provides functions to construct, parse, and serialize requests in various formats like JSON and query strings. Concrete use cases include listing active spot instance requests with custom filters or retrieving paginated results from the EC2 API.",
      "description_length": 384,
      "index": 1454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Volume",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 volume with fields for metadata like availability zone, size, encryption, and attachment state. It provides functions to construct, parse, and serialize volume data for use in API requests and responses. Concrete use cases include managing EBS volume creation, querying volume state, and handling volume attachments in AWS infrastructure automation.",
      "description_length": 406,
      "index": 1455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.KeyPair",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 key pairs, including their metadata such as fingerprint, material, name, optional ID, and associated tags. It provides functions to construct, serialize, and parse key pair data in various formats including JSON, XML, and query parameters. Concrete use cases include handling key pair responses from AWS EC2 API calls and preparing key pair inputs for API requests.",
      "description_length": 423,
      "index": 1456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateCapacityReservationSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying capacity reservation preferences and targets when launching EC2 instances. It includes functions to create, parse, and convert the structure to and from XML, JSON, and query formats. It is used to configure capacity reservations in EC2 launch templates.",
      "description_length": 305,
      "index": 1457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkAclAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a network ACL association with optional string fields for association ID, network ACL ID, and subnet ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 network ACL associations in AWS API requests and responses.",
      "description_length": 365,
      "index": 1458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance type information by providing functions to parse XML input into instance type data, convert instance type lists to query parameters or JSON format, and construct instance type lists from JSON. It operates specifically on lists of `InstanceTypeInfo.t` records, which describe attributes of EC2 instance types. Use cases include retrieving and processing instance type metadata from AWS EC2 responses and preparing instance type selections for API requests.",
      "description_length": 497,
      "index": 1459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StopInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for stopping EC2 instances, including options to hibernate, perform a dry run, or force stop. It works with instance ID lists and boolean flags, providing functions to construct, serialize, and parse the request in various formats. Concrete use cases include preparing API calls to stop instances with specific configurations in an AWS EC2 environment.",
      "description_length": 392,
      "index": 1460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopySnapshotRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for initiating an EC2 snapshot copy operation, including fields like source and destination regions, encryption settings, and tagging. It provides constructors, JSON and XML parsers, and query builders to facilitate API requests. Concrete use cases include copying encrypted snapshots across regions and applying tags during the copy process.",
      "description_length": 379,
      "index": 1461,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterInstanceTagAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering instance tag attributes in EC2, containing an optional boolean flag to include all instance tags and a set of specific tag keys to deregister. It provides functions to construct, parse, and serialize the request for use in API calls, particularly when modifying instance tag visibility settings. Use cases include updating which tags are exposed to instances in EC2 metadata or user data scripts.",
      "description_length": 454,
      "index": 1462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotTaskList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 import snapshot tasks. It provides operations to convert task lists to and from XML, JSON, and query formats. Use it when managing snapshot import workflows in AWS EC2, particularly for serializing or deserializing task data during API interactions.",
      "description_length": 282,
      "index": 1463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetErrorsSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of CreateFleetError values. It provides functions to convert error lists to and from XML, JSON, and query formats, enabling integration with AWS EC2 fleet creation workflows. Use this module when processing batch errors from EC2 fleet requests, particularly for parsing responses or constructing error payloads for API calls.",
      "description_length": 408,
      "index": 1464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSessionIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of traffic mirror session IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It works directly with lists of base string types, supporting configuration and retrieval of traffic mirror sessions.",
      "description_length": 303,
      "index": 1465,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LicenseList",
      "library": "aws-ec2",
      "description": "This module handles lists of license configurations for EC2 instances. It provides operations to convert license lists to and from XML, JSON, and query parameters, enabling integration with AWS APIs. Use this module when managing EC2 instance licensing through AWS SDK calls.",
      "description_length": 275,
      "index": 1466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status information of an EC2 volume, including its current status and associated details. It provides functions to construct, parse, and serialize volume status data for use in API requests and responses. Concrete use cases include checking the health of EBS volumes and handling status updates in cloud infrastructure monitoring tools.",
      "description_length": 390,
      "index": 1467,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TunnelInsideIpVersion",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Ipv4` and `Ipv6`, representing tunnel inside IP versions. It provides functions to convert between strings and the `t` type, including `to_string`, `of_string`, `str_to_t`, and `t_to_str`. Additionally, it supports serialization to JSON and query formats, parsing from XML, and a `make` function for constructing values.",
      "description_length": 371,
      "index": 1468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorSessionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying AWS EC2 traffic mirror sessions, including optional filters, result limits, and pagination. It supports operations to construct, serialize, and parse requests using JSON, XML, or query parameters. Concrete use cases include listing specific traffic mirror sessions by ID, applying filters to narrow results, and handling paginated responses from the EC2 API.",
      "description_length": 411,
      "index": 1469,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying information about virtual private gateways in AWS EC2. It includes fields to filter results, specify gateway IDs, and perform dry runs, with operations to construct, parse, and serialize the request in various formats. It is used when retrieving details about specific or filtered sets of virtual private gateways.",
      "description_length": 367,
      "index": 1470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2EncryptionAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single encryption algorithm value used in EC2's Phase 2 IPsec settings. It includes functions to construct, serialize, and deserialize the value, primarily working with string-based representations. It is used when configuring or parsing VPN tunnel encryption settings in AWS EC2.",
      "description_length": 332,
      "index": 1471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionState",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state of a network interface permission, including its current state and an optional status message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing EC2 network interface permissions and handling API responses with permission state details.",
      "description_length": 393,
      "index": 1472,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyLaunchTemplateResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a launch template in AWS EC2, containing an optional updated launch template. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from the EC2 API when updating launch templates, enabling inspection or further processing of modified template data.",
      "description_length": 430,
      "index": 1473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC endpoint IDs in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use cases include serializing and deserializing VPC endpoint ID lists when interacting with AWS API requests and responses.",
      "description_length": 299,
      "index": 1474,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorSessionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a Traffic Mirror session in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional updated Traffic Mirror session object. Use this module when working with Traffic Mirror session modifications, particularly for processing API responses or building requests involving Traffic Mirror sessions.",
      "description_length": 385,
      "index": 1475,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing different network interface types in AWS EC2, including `Interface`, `NatGateway`, and `Efa`. It provides bidirectional conversions between these variants and strings, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling network interface type values in API requests or responses, such as parsing returned XML nodes or constructing query strings for EC2 operations.",
      "description_length": 498,
      "index": 1476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Tenancy",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing EC2 instance tenancy options (`Default`, `Dedicated`, `Host`) and provides bidirectional conversions between strings and this type. It includes functions for serializing to and parsing from JSON, XML, and query parameters, ensuring correct string representations for API interactions. Use cases include handling EC2 launch configurations and describing instance attributes where tenancy must be specified or retrieved in various formats.",
      "description_length": 481,
      "index": 1477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AutoAcceptSharedAttachmentsValue",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Enable` and `Disable`, representing whether shared VPC attachments are automatically accepted. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used when configuring VPC sharing options in AWS EC2 to specify automatic acceptance behavior for shared attachments.",
      "description_length": 441,
      "index": 1478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DirectoryServiceAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying directory service authentication requests, primarily used when configuring EC2 instances to join a directory. It includes operations to create, serialize, and parse directory authentication requests, supporting both JSON and XML formats for integration with AWS APIs. A typical use case involves providing a directory ID when enabling Active Directory authentication for EC2 instances.",
      "description_length": 437,
      "index": 1479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataEndpointState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Disabled` and `Enabled`, representing the state of an instance metadata endpoint. It provides functions to convert between strings and the enumerated type, along with serialization and deserialization capabilities for query parameters, JSON, and XML. Use this module when configuring or parsing EC2 launch templates that require specifying metadata endpoint state.",
      "description_length": 416,
      "index": 1480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteEgressOnlyInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an egress-only internet gateway, including optional dry-run support and required gateway ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when preparing or handling deletion requests for egress-only internet gateways in AWS infrastructure management workflows.",
      "description_length": 390,
      "index": 1481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectVpcPeeringConnectionResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of rejecting a VPC peering connection, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize the result to various formats including JSON and query parameters. It is used when handling responses from AWS EC2 API calls that reject VPC peering connections.",
      "description_length": 369,
      "index": 1482,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of an FPGA image in EC2, with specific values like `Pending`, `Failed`, `Available`, and `Unavailable`. It provides direct conversions between these states and strings, JSON, and query parameters, enabling straightforward integration with AWS APIs. Use this module when handling FPGA image lifecycle status in EC2 operations, such as interpreting responses or constructing requests.",
      "description_length": 444,
      "index": 1483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceStatusEvent",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing events related to EC2 instance status, including fields like event ID, code, description, and timestamps. It provides functions to construct, parse, and convert these events to and from JSON and query formats. Concrete use cases include handling scheduled maintenance events or instance reboot notifications in EC2 instance status checks.",
      "description_length": 388,
      "index": 1484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIdsSet",
      "library": "aws-ec2",
      "description": "Handles the parsing, serialization, and manipulation of a list of EC2 instance IDs. Works with string lists representing instance identifiers, converting them to and from XML, JSON, and query parameters. Used when making batch API requests that require multiple instance IDs, such as stopping or describing instances.",
      "description_length": 317,
      "index": 1485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in EC2 scheduled instances, including optional fields for device names, EBS volumes, and virtual devices. It provides functions to construct, serialize, and deserialize these mappings to and from JSON and XML formats. Use this module when configuring EC2 instance storage settings programmatically, particularly for scheduled instances with custom block device configurations.",
      "description_length": 450,
      "index": 1486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkAclRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a network ACL in AWS EC2, including optional dry-run support and required network ACL ID. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include building and processing API requests to delete network ACLs in EC2 networking management workflows.",
      "description_length": 400,
      "index": 1487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointServiceConfigurationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting VPC endpoint service configurations, primarily by managing a set of unsuccessful deletion items. It provides functions to construct, parse, and serialize the result, supporting operations like converting to JSON or query format for API interactions. It works directly with XML nodes, JSON values, and AWS query parameters, and is used in scenarios where VPC endpoint services are removed and partial failures need to be reported.",
      "description_length": 472,
      "index": 1488,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 Reserved Instances offerings, with fields for attributes like availability zone, duration, pricing, and instance type. It provides functions to construct, parse, and serialize these offerings for use in querying AWS APIs or processing responses. Concrete use cases include retrieving available offerings from AWS, filtering them based on criteria like instance type or pricing, and preparing reservation purchase requests.",
      "description_length": 476,
      "index": 1489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to disabling fast snapshot restore in EC2. It includes operations to create, parse, and serialize error objects with optional code and message fields. Use cases include error reporting and handling during EC2 snapshot management operations.",
      "description_length": 305,
      "index": 1490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticInferenceAccelerators",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of elastic inference accelerators. It provides functions to convert between XML, query parameters, and JSON formats, specifically working with lists of `ElasticInferenceAccelerator.t`. It is used when managing EC2 instance configurations that include elastic inference accelerators, enabling communication with AWS APIs using different data formats.",
      "description_length": 424,
      "index": 1491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an egress-only internet gateway, including its attachments, ID, and tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing outbound internet access for IPv6 traffic in EC2 VPC configurations.",
      "description_length": 341,
      "index": 1492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of disk information, providing functions to convert to and from JSON and query formats, as well as parsing from XML. It works with disk info structures, enabling serialization and deserialization for use in API requests and responses. Concrete use cases include processing EC2 disk data returned from AWS APIs and constructing requests that include disk configurations.",
      "description_length": 395,
      "index": 1493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EbsNvmeSupport",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing NVMe support states for EBS volumes and provides bidirectional conversions between strings and the enumerated values. It includes functions for serializing and deserializing these values to and from JSON, XML, and query parameters. This module is used when configuring or querying EBS volume properties in EC2 instances that require specific NVMe support settings.",
      "description_length": 416,
      "index": 1494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 snapshot attribute names, with two specific values: `ProductCodes` and `CreateVolumePermission`. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization functions for JSON, query parameters, and XML. This module is used when managing EC2 snapshot permissions and metadata through AWS API operations like describing or modifying snapshot attributes.",
      "description_length": 472,
      "index": 1495,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfaceAttributeResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding results from querying EC2 network interface attributes, including optional fields like attachment status, description, security groups, network interface ID, and source/destination check settings. It provides functions to construct, parse, and serialize these results to and from XML, JSON, and query formats. It is used when retrieving detailed configuration information about EC2 network interfaces, such as during API calls to describe specific interface attributes.",
      "description_length": 518,
      "index": 1496,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedIpv6PoolCidrsResult",
      "library": "aws-ec2",
      "description": "Handles the result of retrieving associated IPv6 CIDR blocks from an EC2 pool, including the list of associations and pagination token. Works with IPv6 CIDR association sets and string-based next tokens. Used when querying AWS EC2 for IPv6 CIDR allocations, enabling iteration through results using a next token.",
      "description_length": 312,
      "index": 1497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of fast snapshot restore success items. It provides functions to convert between XML, JSON, and query string formats, specifically for processing results from EC2 snapshot restore operations. Use this module when working with AWS EC2 snapshot restore responses that require structured parsing or format conversion.",
      "description_length": 397,
      "index": 1498,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotPlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement parameters of EC2 spot instances, including optional availability zone, group name, and tenancy settings. It provides functions to construct, serialize, and convert placement configurations to and from JSON, query format, and XML. Concrete use cases include configuring spot instance requests with specific placement constraints and parsing placement responses from AWS API calls.",
      "description_length": 442,
      "index": 1499,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ProductCode",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing product codes in Amazon EC2, including optional fields for product code ID and type. It provides functions to construct, parse, and convert product code values to and from JSON and query formats. It is used when working with EC2 instance metadata or billing information that involves product codes.",
      "description_length": 352,
      "index": 1500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypeOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 instance type offerings, including optional parameters like dry run, location type, filters, and pagination controls. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Concrete use cases include filtering instance types by region or availability zone and paginating through large result sets.",
      "description_length": 398,
      "index": 1501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnConnectionOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VpnConnection's options in the EC2 API. It provides functions to create, parse, and serialize a result containing an optional VpnConnection. Use it when processing responses from modifying a VpnConnection's settings, such as updating its tunnel options or logging.",
      "description_length": 310,
      "index": 1502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProvisionByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for provisioning a Bring Your Own IP (BYOIP) CIDR block in AWS EC2. It includes fields for specifying the CIDR range, authorization context, advertisability, description, dry run flag, and tag specifications. The module provides functions to construct, parse, and serialize the request for use with EC2 API operations.",
      "description_length": 358,
      "index": 1503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 spot instance requests, providing operations to convert between XML, JSON, and query formats. It supports parsing spot instance request data from XML nodes and converting them to structured lists, as well as serializing those lists into JSON or AWS query parameters. Use this module when managing spot instance requests programmatically, such as when launching or monitoring spot instances in AWS.",
      "description_length": 430,
      "index": 1504,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsRequestList",
      "library": "aws-ec2",
      "description": "This module handles lists of Phase 2 integrity algorithm requests in AWS EC2. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of `Phase2IntegrityAlgorithmsRequestListValue.t` values, supporting serialization, deserialization, and transformation for use in API requests and responses.",
      "description_length": 373,
      "index": 1505,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetEbsDefaultKmsKeyIdRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for retrieving the default KMS key ID for EBS encryption. It works with a single type `t` that holds an optional `dry_run` boolean. Use this module when making, parsing, or converting API requests to and from JSON or query format for the GetEbsDefaultKmsKeyId operation.",
      "description_length": 340,
      "index": 1506,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesConfigurationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances configurations, providing functions to parse XML input into typed lists, convert configurations to query parameters or JSON, and construct empty instances. It operates on a list of `ReservedInstancesConfiguration.t` records, each representing a specific reservation setup. Use this module when managing batched EC2 reservation responses or preparing bulk reservation requests in AWS tooling.",
      "description_length": 443,
      "index": 1507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MarketType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing EC2 market types, currently only `Spot`. It includes functions to convert between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations support handling market type values when interacting with EC2 APIs, such as launching spot instances or parsing responses.",
      "description_length": 375,
      "index": 1508,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCustomerGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing customer gateways in EC2, providing constructors, JSON and XML parsers, and query builders. It works with customer gateway lists and is used to process and serialize API responses containing gateway data. Concrete use cases include parsing AWS API XML responses and converting gateway information to JSON for further processing or output.",
      "description_length": 383,
      "index": 1509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesEbs",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring EBS volumes in EC2 scheduled instances, with fields like `delete_on_termination`, `volume_size`, and `snapshot_id`. It provides functions to construct, parse, and serialize these configurations to and from JSON and query formats. Use this module when setting up or modifying EBS-backed EC2 instances with specific storage requirements.",
      "description_length": 388,
      "index": 1510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableEbsEncryptionByDefaultResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of enabling EBS encryption by default in EC2. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used to handle responses from the EC2 API when modifying EBS encryption settings.",
      "description_length": 302,
      "index": 1511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableVpcClassicLinkResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disabling VPC classic link functionality, containing an optional boolean indicating success or failure. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. Use this module when handling responses from AWS EC2 API calls that disable VPC classic link access.",
      "description_length": 372,
      "index": 1512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring instance metadata options in EC2 launch templates, with fields to set HTTP tokens, hop limit for PUT responses, and HTTP endpoint state. It provides constructors, JSON and XML parsers, and query builders to facilitate creating and serializing these configurations. Concrete use cases include setting up secure instance metadata access and tuning metadata service behavior for EC2 instances.",
      "description_length": 443,
      "index": 1513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVpcAssociationIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of local gateway route table VPC association IDs as string lists. Provides serialization to JSON and query formats, along with parsing from XML. Useful for managing associations in EC2 operations involving local gateways.",
      "description_length": 234,
      "index": 1514,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance types, providing operations to convert them to and from JSON, query parameters, and XML. It includes parsing from XML nodes and constructing from JSON values. Use this module when working with AWS EC2 instance type lists in API requests or responses.",
      "description_length": 292,
      "index": 1515,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SearchTransitGatewayMulticastGroupsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for searching EC2 transit gateway multicast groups, including optional filters, pagination, and dry-run settings. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include querying multicast group information for a specific transit gateway domain or filtering results by network interface or subnet.",
      "description_length": 405,
      "index": 1516,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstanceState",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the possible states of a reserved instance in EC2, such as `Active`, `Payment_pending`, and `Retired`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization to JSON, query parameters, and XML. These operations support handling reserved instance state transitions and status checks in EC2 management tools and automation scripts.",
      "description_length": 467,
      "index": 1517,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfacePermissionResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a network interface permission in EC2. It includes operations to construct, parse, and serialize the result, which contains an optional network interface permission. It is used when managing access to network interfaces by converting responses to and from XML, JSON, and query formats.",
      "description_length": 328,
      "index": 1518,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusAttachmentStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the attachment status of an EC2 volume, including optional fields for I/O performance and instance ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling volume status checks or attachment metadata in AWS EC2 operations.",
      "description_length": 360,
      "index": 1519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and operations for creating an EC2 subnet request. It includes functions to construct, parse, and serialize the request, which contains parameters like CIDR block, VPC ID, availability zone, and optional settings such as dry run or IPv6 CIDR block. It works directly with XML, JSON, and query string formats for request transmission and parsing.",
      "description_length": 379,
      "index": 1520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTrafficMirrorFilterRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a traffic mirror filter, including the filter ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring or cleaning up traffic mirroring sessions in virtual networks.",
      "description_length": 323,
      "index": 1521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartVpcEndpointServicePrivateDnsVerificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of initiating a private DNS verification for a VPC endpoint service. It provides functions to construct, serialize, and parse a result containing an optional boolean return value. Use this module when managing VPC endpoint service DNS settings in AWS EC2 workflows.",
      "description_length": 296,
      "index": 1522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserIdStringList",
      "library": "aws-ec2",
      "description": "Handles lists of user ID strings in AWS EC2 operations. Provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON input. Used for managing user identifiers in EC2 instance metadata or access control scenarios.",
      "description_length": 257,
      "index": 1523,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupReference",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a security group reference with optional fields for group ID, referencing VPC ID, and VPC peering connection ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling cross-VPC security group references in EC2 API operations and serializing them for network transmission or storage.",
      "description_length": 425,
      "index": 1524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a route creation operation in a cloud networking API. It includes functions to construct, serialize, and deserialize the result, primarily working with boolean values to indicate success or failure. Use it to handle responses from route creation requests in EC2-compatible APIs.",
      "description_length": 342,
      "index": 1525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for querying VPCs in EC2. It supports filtering by VPC IDs and other criteria, with optional pagination and dry-run functionality. It is used to construct and serialize API requests when retrieving VPC information from AWS.",
      "description_length": 291,
      "index": 1526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ConfirmProductInstanceResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure with optional string and boolean fields, along with functions to construct, parse, and serialize the structure to query parameters, JSON, or XML. It is used to represent the result of confirming a product instance in EC2, typically handling responses from the corresponding API call. The module supports direct manipulation of API response data for further processing or integration with other systems.",
      "description_length": 439,
      "index": 1527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoresRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disabling fast snapshot restores in EC2, including availability zones, source snapshot IDs, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include configuring snapshot restore settings and validating restore operations without applying changes.",
      "description_length": 387,
      "index": 1528,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPC peering connection IDs, represented as base string types. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing or querying multiple VPC peering connections in AWS EC2, such as listing or filtering active connections.",
      "description_length": 342,
      "index": 1529,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint services, including service names, service details, and pagination tokens. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use cases include retrieving and formatting VPC endpoint service information from AWS EC2 for display or downstream API interactions.",
      "description_length": 382,
      "index": 1530,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetGroups",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 target group lists. Works with `TargetGroup.t` lists, converting between XML, JSON, and query parameter formats. Used when managing load balancer target groups in AWS EC2 API requests and responses.",
      "description_length": 247,
      "index": 1531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a subnet association with optional subnet ID and state fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing subnet associations in AWS EC2 transit gateway multicast domain configurations.",
      "description_length": 339,
      "index": 1532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateElasticInferenceAcceleratorList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of launch template elastic inference accelerators. It works with XML nodes, JSON values, and query parameters to facilitate AWS EC2 API interactions. Use this module when configuring or retrieving elastic inference accelerators in EC2 launch templates via AWS SDK calls.",
      "description_length": 345,
      "index": 1533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemList",
      "library": "aws-ec2",
      "description": "This module handles lists of unsuccessful items in EC2 responses. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization and deserialization for these lists. Use this module when processing batch operation results that include failure details in EC2.",
      "description_length": 286,
      "index": 1534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyAvailabilityZoneGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying an availability zone group, including the group name, opt-in status, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when configuring availability zone groups in EC2, particularly for enabling or disabling multi-zone placement groups.",
      "description_length": 389,
      "index": 1535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 fleet instances, including parameters like `fleet_id`, `max_results`, and `filters`. It provides functions to construct, parse, and serialize requests in various formats such as JSON and query strings. Use this module when interacting with the EC2 API to retrieve information about instances in a specific fleet, especially when paginating results or applying filters.",
      "description_length": 429,
      "index": 1536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusName",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing specific volume status names in EC2, with variants `Io_enabled` and `Io_performance`. It provides conversions to and from strings, JSON, and query formats, along with parsing from XML nodes. This module is used when handling volume status checks in EC2, particularly for serializing and deserializing status values during API requests and responses.",
      "description_length": 393,
      "index": 1537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 regions, providing operations to convert them to and from XML, JSON, and query parameters. It includes parsing from XML nodes, constructing query strings, and serializing to and from JSON structures. Use this module when working with AWS EC2 region lists in different data formats, such as handling API responses or building requests.",
      "description_length": 367,
      "index": 1538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayMulticastDomainAssociationsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of retrieving associations for an EC2 transit gateway multicast domain. It includes a list of multicast domain associations and an optional pagination token. It is used to process and serialize responses from the AWS EC2 API when querying multicast domain associations.",
      "description_length": 303,
      "index": 1539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetSpotCapacityRebalanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring spot capacity rebalance requests in EC2 fleets, including an optional replacement strategy. It provides functions to construct, parse, and serialize these configurations to JSON, query parameters, or XML. Use this module when setting up or modifying EC2 fleet behavior in response to spot capacity changes.",
      "description_length": 359,
      "index": 1540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointAttributeStatus",
      "library": "aws-ec2",
      "description": "This module handles the status attributes of a Client VPN endpoint in AWS EC2, specifically managing status codes and associated messages. It provides operations to construct, serialize, and convert status data to and from JSON, query parameters, and XML. Use this module when retrieving or setting the operational status of a Client VPN endpoint, such as checking connectivity or configuration issues.",
      "description_length": 402,
      "index": 1541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfigurationRequestSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 target configuration request lists. Works with XML nodes, JSON values, and AWS query parameters. Used to convert between these formats and internal OCaml structures when interacting with EC2 APIs.",
      "description_length": 245,
      "index": 1542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableTransitGatewayRouteTablePropagationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling route table propagation in a transit gateway, containing identifiers for the route table and attachment, and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when configuring route propagation between a transit gateway and a connected VPC or VPN.",
      "description_length": 388,
      "index": 1543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceTypesRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 instance types, including optional parameters like dry run, filters, and pagination. It supports constructing, parsing, and serializing requests to interact with AWS EC2's instance type API. Use this module to configure and send `DescribeInstanceTypes` requests, handle responses, or integrate with AWS SDK tooling.",
      "description_length": 374,
      "index": 1544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelReservedInstancesListingResult",
      "library": "aws-ec2",
      "description": "This module handles the result of canceling a Reserved Instances listing in AWS EC2. It provides constructors, parsing, and serialization functions for working with the `t` type, which contains a list of `ReservedInstancesListing` entries. Use this module when processing responses from the EC2 API after attempting to cancel a Reserved Instances listing.",
      "description_length": 355,
      "index": 1545,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CarrierGatewayIdSet",
      "library": "aws-ec2",
      "description": "This module handles a list of string identifiers representing carrier gateways. It provides operations to convert these identifiers to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing carrier gateway associations in EC2 networking operations.",
      "description_length": 286,
      "index": 1546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkAclsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing EC2 network ACLs, supporting operations to filter by ACL IDs, apply filters, and control result pagination. It works with types like `FilterList`, `NetworkAclIdStringList`, and standard AWS primitives such as Boolean and Integer. Concrete use cases include querying specific network ACLs by ID, applying tag-based filters, and handling paginated responses from the EC2 API.",
      "description_length": 430,
      "index": 1547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyHostsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of modifying EC2 hosts, containing lists of successfully modified host IDs and any unsuccessful modifications. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. Concrete use cases include processing responses from EC2 API calls that update host configurations, tracking which hosts were updated successfully, and handling errors for individual hosts.",
      "description_length": 491,
      "index": 1548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetState",
      "library": "aws-ec2",
      "description": "This module defines a custom enumerated type representing the operational states of a subnet, specifically `Pending` and `Available`. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query string formats. It is used to interpret and emit subnet state values when interacting with AWS EC2 APIs or processing related infrastructure data.",
      "description_length": 439,
      "index": 1549,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Monitoring",
      "library": "aws-ec2",
      "description": "This module defines a data structure for monitoring state in EC2 instances, with functions to create, parse, and serialize monitoring configurations. It works with XML, JSON, and query string formats for integration with AWS APIs. Use this module when configuring or retrieving monitoring settings for EC2 instances, such as enabling or disabling detailed monitoring.",
      "description_length": 367,
      "index": 1550,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermission",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying load permissions in EC2, with optional user ID and group fields. It provides functions to construct, parse, and convert load permission data to and from query parameters and JSON. Use this module when managing AMI or snapshot permissions, such as granting or describing load access for specific users or groups.",
      "description_length": 363,
      "index": 1551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorFilterRuleField",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing fields of an EC2 Traffic Mirror filter rule, such as port ranges, protocol, and description. It includes functions to convert between string representations and the variant type, supporting serialization to and from JSON, query parameters, and XML. These operations facilitate handling Traffic Mirror filter rule configurations in API requests and responses.",
      "description_length": 418,
      "index": 1552,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficType",
      "library": "aws-ec2",
      "description": "This module defines a sum type with three variants (`ACCEPT`, `REJECT`, `ALL`) representing traffic filtering policies. It provides bidirectional conversions between strings and the type, along with serialization to and from JSON and query parameters. It is used to specify traffic handling behavior in network access control rules and firewall configurations.",
      "description_length": 360,
      "index": 1553,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSubnetRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for deleting an EC2 subnet. It includes functions to construct, parse, and serialize subnet deletion requests, working with XML, JSON, and query string formats. It is used when interacting with the EC2 API to specify which subnet to delete and whether to perform a dry run.",
      "description_length": 341,
      "index": 1554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 network interface attachment with fields like attachment ID, instance ID, and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing network interface attachments in AWS EC2, such as when creating or inspecting VPC configurations.",
      "description_length": 381,
      "index": 1555,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterNetworkServicesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying network services for a traffic mirror filter in EC2. It provides constructors, parsers, and serializers for a structure containing an optional `TrafficMirrorFilter`. Use this module when processing responses from EC2 API calls that update traffic mirror filter configurations.",
      "description_length": 320,
      "index": 1556,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAvailabilityZonesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing availability zones in EC2, primarily working with `AvailabilityZoneList.t`. It provides operations to construct, parse, and serialize results to query parameters, JSON, and XML. Use this when processing responses from EC2's `DescribeAvailabilityZones` API call, especially for inspecting zone metadata and status.",
      "description_length": 358,
      "index": 1557,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateBlockDeviceMapping",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying block device mappings in an EC2 launch template, including optional fields for device name, virtual name, EBS configuration, and no-device indicators. It provides functions to construct, parse, and serialize these mappings to and from XML, JSON, and query formats. Use this module when configuring storage for EC2 instances launched from a template, particularly to define EBS volumes or override default device settings.",
      "description_length": 473,
      "index": 1558,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIpv6PoolsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing IPv6 address pools in AWS EC2, including the set of IPv6 pools and an optional pagination token. It provides functions to construct, parse, and convert the result to and from JSON and query formats. Use this module when managing IPv6 pool data returned from the EC2 API, particularly for listing or paginating through available IPv6 address ranges.",
      "description_length": 393,
      "index": 1559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableFastSnapshotRestoreStateErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item for fast snapshot restore state operations, including availability zone and error details. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Concrete use cases include handling and transmitting error responses from EC2 snapshot restore operations.",
      "description_length": 368,
      "index": 1560,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSecurityGroupRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for creating a security group in EC2. It includes functions to construct, parse, and serialize the request, which contains parameters like description, group name, VPC ID, tag specifications, and dry run flag. It is used when issuing a CreateSecurityGroup API call to AWS, enabling precise configuration of network security policies for instances.",
      "description_length": 415,
      "index": 1561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string-based association IDs, primarily used for managing EC2 resource associations such as VPC or subnet associations. It provides operations to convert these lists to and from JSON and query formats, enabling integration with AWS API requests and responses. Use cases include serializing association IDs for API calls and deserializing them from XML or JSON responses.",
      "description_length": 399,
      "index": 1562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuIdSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of lists of EC2 Elastic GPU IDs. Works with string lists representing GPU identifiers, converting between XML, JSON, and query parameter formats. Used when managing Elastic GPU attachments and querying associated resources in EC2.",
      "description_length": 279,
      "index": 1563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstancePrivateIpAddress",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing private IP address details for EC2 instances, including optional association metadata, primary status, private DNS name, and IP address. It provides functions to construct, parse, and convert these records to and from JSON, query parameters, and XML. Use this module when handling network interface configurations or querying instance metadata in AWS EC2.",
      "description_length": 405,
      "index": 1564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeAggregateIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing aggregated ID format settings in EC2. It provides functions to construct, parse, and serialize the result, which includes whether long IDs are used and a list of ID format statuses. It works with boolean and list data types, specifically for ID format configuration responses.",
      "description_length": 321,
      "index": 1565,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportTaskIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of export task IDs in EC2, providing functions to convert these lists to and from JSON and query parameters. It works with XML nodes, JSON values, and AWS query types. Use this module when interacting with EC2 export tasks, particularly for serializing and deserializing task ID lists during API requests or responses.",
      "description_length": 344,
      "index": 1566,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PortRange",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing port ranges with optional start and end ports, using integer values. It provides functions to construct, parse, and convert port range data to and from XML, JSON, and query formats. Concrete use cases include specifying allowed port ranges in security group rules or network access configurations.",
      "description_length": 351,
      "index": 1567,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfacePermissionResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of deleting a network interface permission, with an optional boolean indicating success. It includes functions to construct the result, parse it from XML, and convert it to query or JSON formats. It is used specifically when handling responses from EC2 API calls that delete network interface permissions.",
      "description_length": 368,
      "index": 1568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateVpcCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of disassociating a VPC CIDR block, containing optional IPv6 and IPv4 CIDR block associations and a VPC ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle responses from disassociating CIDR blocks from VPCs in AWS EC2.",
      "description_length": 364,
      "index": 1569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetLaunchTemplateDataResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving launch template data from EC2. It provides functions to construct, parse, and serialize the result, which includes optional launch template data. It works with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 271,
      "index": 1570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTypeOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing EC2 instance type offerings, including instance type, location type, and location. It provides functions to construct, parse, and serialize these offerings for use in API requests and responses. Use cases include querying available instance types across regions and handling EC2 capacity planning data.",
      "description_length": 352,
      "index": 1571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateClientVpnTargetNetworkRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for associating a subnet with a Client VPN endpoint in AWS EC2. It includes functions to construct, serialize, and parse the request, supporting operations like query generation and JSON conversion. It works directly with string and boolean types wrapped in AWS-specific type abstractions, and is used when configuring network connectivity for Client VPN endpoints.",
      "description_length": 402,
      "index": 1572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateReservedInstancesListingRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a Reserved Instances listing in EC2. It includes fields for a client token, instance count, price schedules, and a Reserved Instances ID, along with functions to construct, parse, and serialize the request for use with AWS API calls. It is used when submitting or modifying Reserved Instances listings with specific pricing and quantity configurations.",
      "description_length": 405,
      "index": 1573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnProtocol",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the OpenVPN protocol and provides functions to convert between strings and the type, including parsing and serialization to JSON and query formats. It supports use cases like configuring and managing EC2 virtual private gateways that require protocol specification. The `parse` function enables extracting the protocol from XML responses, while `to_query` and `to_json` support building API requests.",
      "description_length": 451,
      "index": 1574,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ImportImageLicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a license configuration request for importing an image, with an optional ARN field. It provides functions to construct the type, convert it to and from JSON and query formats, and parse it from XML. This module is used to specify license configurations when importing images in EC2 operations.",
      "description_length": 345,
      "index": 1575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTransitGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying an EC2 Transit Gateway, including its ID, description, options, and dry run flag. It provides functions to construct, serialize, and parse modification requests, enabling interaction with AWS EC2 APIs. Use this module when configuring or updating Transit Gateway settings programmatically.",
      "description_length": 340,
      "index": 1576,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNatGatewaysRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying NAT gateways in EC2, supporting filtering, result limits, and pagination. It works with boolean, integer, string, and list types to construct and serialize API requests. Concrete use cases include retrieving NAT gateway information with specific IDs, applying filters, and handling paginated results from the AWS API.",
      "description_length": 370,
      "index": 1577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Elastic GPU specifications, providing operations to convert, parse, and serialize the data. It supports transformations to AWS query format, JSON, and back, as well as XML parsing. Use this module when configuring or retrieving Elastic GPU settings for EC2 instances, particularly during instance launch or modification.",
      "description_length": 353,
      "index": 1578,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TerminateInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the structure and serialization functions for terminating EC2 instances. It handles a list of instance IDs and an optional dry-run flag, enabling safe pre-execution checks. Use it when constructing API requests to terminate instances programmatically.",
      "description_length": 271,
      "index": 1579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointAttributeStatusCode",
      "library": "aws-ec2",
      "description": "This module defines a custom enumerated type with two values, `Applying` and `Applied`, representing the status of a Client VPN endpoint attribute in AWS EC2. It includes functions to convert between strings and the enumerated type, supporting serialization to and from JSON, XML, and query parameters. These operations are used when interacting with AWS API requests and responses that require or return Client VPN endpoint attribute status.",
      "description_length": 442,
      "index": 1580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusEvent",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing volume status events in EC2, including event details like description, type, timing, and associated instance. It provides functions to construct, parse, and convert these events to and from query parameters, JSON, and XML. Use this module when handling volume health events from EC2, such as scheduled maintenance or performance degradation notifications.",
      "description_length": 409,
      "index": 1581,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNetworkInterfaceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying specific attributes of an EC2 network interface, including the attribute type, dry run flag, and network interface ID. It provides functions to construct, parse, and serialize these requests in various formats such as JSON and query strings. It is used when retrieving configuration details like description, security groups, or source/destination checking for a specific network interface in EC2.",
      "description_length": 450,
      "index": 1582,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteNetworkInterfacePermissionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a network interface permission, including the permission ID and optional flags for force deletion and dry run. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when managing network interface permissions programmatically, especially during cleanup or access control adjustments.",
      "description_length": 404,
      "index": 1583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcEndpointConnectionNotificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying a VPC endpoint connection notification in AWS EC2. It provides functions to create, parse, and serialize the result, which includes an optional boolean indicating the success of the operation. Use this module when managing VPC endpoint connection notifications through AWS API calls, particularly for processing responses from the `ModifyVpcEndpointConnectionNotification` action.",
      "description_length": 424,
      "index": 1584,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeregisterTransitGatewayMulticastGroupMembersRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deregistering multicast group members in a transit gateway, including optional identifiers for the multicast domain, group IP address, and network interfaces. It provides functions to construct, parse, and serialize the request for use with AWS EC2 APIs. Use this module when managing multicast group membership in AWS transit gateways, particularly for preparing API requests in JSON or query format.",
      "description_length": 445,
      "index": 1585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMarketOptions",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying instance market options in EC2 launch templates, including optional market type and spot instance settings. It provides functions to construct, parse, and convert these options to and from JSON and query formats. Concrete use cases include configuring spot instances with specific bidding strategies and handling market type variations in EC2 instance launches.",
      "description_length": 413,
      "index": 1586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetTagSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying tags applied to resources in a spot fleet request. It includes functions to create, parse, and serialize tag specifications to and from XML, JSON, and query formats. It is used when configuring spot fleet instances to associate metadata tags with specific resource types like instances or volumes.",
      "description_length": 349,
      "index": 1587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for rejecting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. It is used when initiating a rejection of a VPC attachment to a transit gateway in AWS EC2.",
      "description_length": 366,
      "index": 1588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateManagedPrefixListResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure to represent the result of creating a managed prefix list in AWS EC2, containing an optional `ManagedPrefixList` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from the EC2 API related to managed prefix list creation operations.",
      "description_length": 396,
      "index": 1589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` that represents capacity reservation options for EC2 instances, primarily holding an optional usage strategy. It includes functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. This module is used when configuring capacity reservations for EC2 fleets, allowing control over how reserved capacity is utilized.",
      "description_length": 400,
      "index": 1590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttachVpnGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of attaching a VPC to a virtual private gateway. It includes functions to construct, parse, and serialize the result for use in API requests and responses. The primary type is an optional VPC attachment, used when handling EC2 API operations related to VPN gateway attachments.",
      "description_length": 338,
      "index": 1591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating a route table in EC2, containing an association ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. It is used when modifying route table associations in AWS EC2, specifically to cleanly separate routing configurations during network reorganization or cleanup tasks.",
      "description_length": 411,
      "index": 1592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReplaceRouteTableAssociationRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type for specifying parameters to replace a route table association in EC2, including the association ID, optional dry-run flag, and new route table ID. It provides functions to construct, parse, and serialize these parameters into query or JSON formats. It is used when programmatically updating route table associations in an EC2 VPC configuration.",
      "description_length": 379,
      "index": 1593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayPeeringAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an EC2 transit gateway peering attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when preparing or handling deletion requests for transit gateway peering attachments in AWS EC2.",
      "description_length": 357,
      "index": 1594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NewDhcpConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure for DHCP configuration updates, consisting of an optional key and a list of string values. It provides functions to construct, serialize, and parse these configurations to and from XML, JSON, and query formats. Concrete use cases include setting up or modifying DHCP options when configuring Amazon EC2 virtual private clouds.",
      "description_length": 363,
      "index": 1595,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6RangeList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 ranges in AWS EC2 configurations. It provides functions to parse XML input into IPv6 range lists, convert them to query parameters, and serialize to and from JSON. Use this module when working with AWS EC2 security group rules that involve IPv6 CIDR blocks.",
      "description_length": 291,
      "index": 1596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressConfigSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of private IP address configurations for scheduled EC2 instances. It works with lists of `ScheduledInstancesPrivateIpAddressConfig.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving network settings for scheduled EC2 instances in AWS.",
      "description_length": 365,
      "index": 1597,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceTagNotificationAttribute",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying which instance tags to monitor for changes, including an optional flag to include all tags. It provides functions to construct, serialize, and deserialize this configuration, primarily used when setting up notifications for EC2 instance tags. The module works directly with XML, JSON, and query string formats for integration with AWS APIs.",
      "description_length": 392,
      "index": 1598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RejectTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of rejecting a transit gateway peering attachment, containing an optional transit gateway peering attachment. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from AWS EC2 API calls that reject peering attachments between transit gateways.",
      "description_length": 421,
      "index": 1599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN route, including optional status code and message fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from AWS EC2 API operations related to Client VPN route management, such as describing or monitoring route status changes.",
      "description_length": 414,
      "index": 1600,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CurrencyCodeValues",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing currency codes, specifically USD. It provides bidirectional conversions between strings and the enumerated type, serialization to JSON and query formats, and parsing from XML and JSON inputs. Use this module when handling currency values in AWS EC2 API interactions that require strict type safety and format conversion.",
      "description_length": 378,
      "index": 1601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIdList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 network interface IDs as string-based collections. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Used when managing network interfaces in EC2 operations like instance configuration or network attachment.",
      "description_length": 285,
      "index": 1602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6PoolIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of IPv6 pool IDs in AWS EC2 operations. It provides functions to convert these lists to and from query parameters, JSON, and XML formats. Use this when working with AWS EC2 APIs that require or return IPv6 pool ID lists, such as describing or managing IPv6 address pools.",
      "description_length": 297,
      "index": 1603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetLaunchSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 Spot Fleet launch configurations, including properties like security groups, instance types, block device mappings, and network interfaces. It provides functions to construct, parse, and serialize these specifications for use in API requests. Concrete use cases include configuring spot instance fleets with custom networking, storage, and tagging settings.",
      "description_length": 413,
      "index": 1604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeDhcpOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing DHCP options in EC2, providing constructors, parsing, and serialization functions. It works with DHCP options lists and optional pagination tokens. Use it to process responses from EC2's `DescribeDhcpOptions` API call, including handling pagination and converting results to JSON or query format.",
      "description_length": 341,
      "index": 1605,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayPrefixListReferencesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving transit gateway prefix list references, including fields for filtering, pagination, and dry-run options. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when querying transit gateway route tables to find associated prefix list references, especially when applying filters or handling paginated results.",
      "description_length": 431,
      "index": 1606,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 network interface with fields for metadata like availability zone, MAC address, private and IPv6 addresses, and associated security groups. It provides functions to construct, parse, and serialize network interface data for use in API requests and responses. Concrete use cases include managing network interface configurations during instance provisioning or querying interface details for monitoring and networking tasks.",
      "description_length": 480,
      "index": 1607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the configuration of an AWS EC2 service, including fields like service type, state, availability zones, load balancer ARNs, DNS settings, and tags. It provides functions to construct, parse, and serialize service configurations to and from XML, JSON, and query formats. Concrete use cases include managing VPC endpoint services, configuring private DNS settings, and handling service state transitions in EC2.",
      "description_length": 459,
      "index": 1608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateFleetRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring and creating an EC2 fleet request with fields like launch templates, capacity specifications, and fleet options. It provides functions to construct, serialize, and parse fleet requests, supporting operations like query parameter conversion, JSON serialization, and XML parsing. Concrete use cases include submitting fleet creation requests to AWS EC2, managing spot and on-demand instance configurations, and handling capacity termination policies.",
      "description_length": 501,
      "index": 1609,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointConnectionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint connections, including a set of connections and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when processing responses from AWS EC2's `DescribeVpcEndpointConnections` API call.",
      "description_length": 350,
      "index": 1610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of availability zone strings in AWS EC2 operations. It provides functions to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use it when working with EC2 APIs that require or return availability zone data in these formats.",
      "description_length": 284,
      "index": 1611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LoadPermissionModifications",
      "library": "aws-ec2",
      "description": "This module handles modifications to load permissions for EC2 resources by providing operations to add or remove permissions. It works with `LoadPermissionListRequest` structures, enabling precise updates to permission settings. Use this module when adjusting access controls for EC2 images or resources, such as granting or revoking specific user permissions.",
      "description_length": 360,
      "index": 1612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of an EC2 fleet, including states like `Active`, `Deleted`, and `Failed`. It provides bidirectional conversion functions between the enumerated values and strings, JSON, and query parameters, enabling seamless integration with AWS API requests and responses. Use cases include tracking fleet lifecycle status and serializing or deserializing fleet state data during API interactions.",
      "description_length": 455,
      "index": 1613,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.IpRanges",
      "library": "aws-ec2",
      "description": "This module handles IP range data as lists of strings, providing functions to convert between XML, JSON, and query string formats. It includes parsing from XML nodes, serialization to JSON and query formats, and basic construction operations. Concrete use cases include handling EC2 security group rules and network configuration data in AWS API interactions.",
      "description_length": 359,
      "index": 1614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase2IntegrityAlgorithmsListValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a single value in a list of Phase 2 integrity algorithms for EC2, containing an optional string. It provides functions to construct, parse, and serialize the value to query parameters, JSON, and XML formats. Use this when configuring or retrieving IPsec tunnel integrity algorithms in EC2 Virtual Private Gateways.",
      "description_length": 364,
      "index": 1615,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayVirtualInterfaceSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of local gateway virtual interface sets in EC2. It provides functions to convert between XML, JSON, and query string representations and a list-based structure of `LocalGatewayVirtualInterface.t`. Use this module when working with AWS EC2 responses that include local gateway virtual interface sets, particularly for API interactions or configuration management.",
      "description_length": 435,
      "index": 1616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ListingState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a resource listing, with values like available, sold, or cancelled. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. It is used when handling EC2 resource listing states in API requests and responses.",
      "description_length": 318,
      "index": 1617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CoipAddressUsage",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the usage details of a customer-owned IP address in EC2, with fields for allocation ID, AWS account ID, AWS service, and the customer-owned IP. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include tracking IP address usage for billing or resource management in EC2 networking operations.",
      "description_length": 425,
      "index": 1618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllowedPrincipalSet",
      "library": "aws-ec2",
      "description": "This module handles the manipulation of allowed principal lists in EC2 configurations, providing operations to convert between XML, JSON, and query formats. It works with lists of `AllowedPrincipal.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include processing EC2 policy documents and managing resource access control settings.",
      "description_length": 398,
      "index": 1619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpnTunnelOptionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying a Vpn Tunnel Options operation, containing an optional VpnConnection. It provides functions to construct, parse, and serialize the result for use in querying and JSON handling. Concrete use cases include processing responses from modifying a Vpn Tunnel in AWS EC2, and converting the result to and from JSON for API interactions.",
      "description_length": 403,
      "index": 1620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeConversionTasksResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 conversion tasks by providing constructors, parsers, and serializers for the result structure. It works with XML, JSON, and AWS query formats to facilitate communication with the EC2 API. Concrete use cases include processing and transforming responses from EC2 when managing instance conversion tasks.",
      "description_length": 351,
      "index": 1621,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a Client VPN endpoint, containing an optional status field. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from AWS EC2 API calls when managing Client VPN endpoints.",
      "description_length": 367,
      "index": 1622,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template license configurations. It operates on lists of `LaunchTemplateLicenseConfiguration.t` records, supporting conversion to and from XML, JSON, and query parameters. It is used when managing EC2 instance licensing settings during launch template creation or modification.",
      "description_length": 364,
      "index": 1623,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorTargetSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of traffic mirror target configurations. It provides functions to convert between XML, JSON, and internal OCaml representations, as well as to construct and extract traffic mirror target data. Use cases include processing AWS EC2 API responses and building requests for traffic mirror target sets.",
      "description_length": 380,
      "index": 1624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a license configuration request with an optional ARN field. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. It is used when making API requests that require specifying license configurations, particularly for EC2 instances.",
      "description_length": 351,
      "index": 1625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for the result of copying an EC2 image, containing an optional image ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from the EC2 CopyImage API operation, particularly to extract and manipulate the new image ID.",
      "description_length": 355,
      "index": 1626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSet",
      "library": "aws-ec2",
      "description": "This module handles the creation, parsing, and conversion of VPC endpoint lists. It provides operations to convert VPC endpoint data to and from XML, JSON, and query formats. Use this module when working with AWS EC2 VPC endpoint responses or when preparing VPC endpoint inputs for API requests.",
      "description_length": 295,
      "index": 1627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyTrafficMirrorFilterNetworkServicesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying network services associated with a traffic mirror filter. It supports operations to add or remove specific network services, includes a dry-run flag for simulation, and provides serialization to query parameters and JSON. It works directly with EC2 traffic mirror filters and service lists, used when configuring network traffic monitoring in AWS environments.",
      "description_length": 414,
      "index": 1628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFpgaImageResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting an FPGA image in AWS EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from EC2 API calls that delete FPGA images, to extract and manipulate the result programmatically.",
      "description_length": 396,
      "index": 1629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFleetError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to fleet deletion in EC2, with optional error code and message fields. It provides functions to construct, parse, and convert error data to and from XML, JSON, and query formats. Concrete use cases include processing API responses when deleting EC2 fleets and extracting error details for logging or user feedback.",
      "description_length": 379,
      "index": 1630,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SummaryStatus",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type representing the summary status of an EC2 instance, with specific values like `Ok`, `Impaired`, and `Initializing`. It includes functions to convert between strings and the type, serialize to AWS query or JSON formats, and parse from XML or JSON. It is used to interpret and transmit instance health status in AWS EC2 API interactions.",
      "description_length": 382,
      "index": 1631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeManagedPrefixListsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying managed prefix lists in EC2, supporting filtering, pagination, and optional dry-run parameters. It provides functions to construct, parse, and serialize requests in various formats including JSON, query strings, and XML. Concrete use cases include retrieving prefix list information with specific IDs, applying filters to narrow results, and handling paginated responses from the EC2 API.",
      "description_length": 441,
      "index": 1632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing scheduled EC2 instances, providing access to a set of scheduled instances and an optional pagination token. It works with XML, JSON, and query string formats for data interchange. Use this module to process responses from EC2 when listing scheduled instances, especially when handling paginated results.",
      "description_length": 348,
      "index": 1633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for deleting an internet gateway in AWS EC2. It works with a record type containing an optional dry-run flag and a required internet gateway ID string. It supports converting requests to query parameters or JSON format, and parsing from XML or JSON input, specifically for use with the EC2 API delete-internet-gateway operation.",
      "description_length": 398,
      "index": 1634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteTableVpcAssociationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a local gateway route table VPC association in AWS EC2. It provides functions to construct, parse, and serialize the result, which includes an optional `LocalGatewayRouteTableVpcAssociation` value. Use this module when managing VPC associations for local gateway route tables, particularly when integrating with AWS API calls and response handling.",
      "description_length": 391,
      "index": 1635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EnableTransitGatewayRouteTablePropagationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of enabling a transit gateway route table propagation. It provides constructors, parsing, and serialization functions for a structure containing an optional `TransitGatewayPropagation.t` value. It is used to process responses from AWS EC2 API calls that enable route table propagations, converting between XML, JSON, and internal OCaml representations.",
      "description_length": 383,
      "index": 1636,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrBlockSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, serialization, and manipulation of IPv6 CIDR block sets in XML, JSON, and query formats. It operates on lists of IPv6 CIDR blocks, providing direct conversions between these external representations and internal data structures. Concrete use cases include processing EC2 API responses containing IPv6 ranges and constructing API requests with IPv6 network configurations.",
      "description_length": 404,
      "index": 1637,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateEgressOnlyInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating an egress-only internet gateway in a specific VPC. It includes fields for client token, dry run flag, VPC ID, and tag specifications, supporting operations to convert the request to query parameters, JSON, or parse from XML. It is used when configuring network access in AWS EC2 to enable outbound-only IPv6 traffic.",
      "description_length": 369,
      "index": 1638,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetNetworkSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of target network configurations. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 target networks in AWS. Use this module when interacting with AWS EC2 APIs that require or return target network data in different wire formats.",
      "description_length": 373,
      "index": 1639,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SpotInstanceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 spot instance requests, with fields representing their configuration, state, and metadata. It provides functions to construct, parse, and convert spot instance request data to and from XML, JSON, and AWS query formats. Concrete use cases include creating spot instance requests with custom launch specifications, handling spot instance lifecycle events, and integrating with AWS APIs for dynamic resource provisioning.",
      "description_length": 472,
      "index": 1640,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing AWS EC2 VPN connections, primarily containing a list of `VpnConnection` entries. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML nodes. It is used when retrieving and processing information about existing VPN connections in an AWS environment.",
      "description_length": 372,
      "index": 1641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientData",
      "library": "aws-ec2",
      "description": "This module defines a data structure for capturing client-side data transfer details, including optional comment, upload start and end times, and upload size. It provides functions to construct instances with optional fields, parse from XML nodes, convert to query parameters, and serialize to and from JSON. Concrete use cases include handling metadata for client data uploads in EC2 API interactions, such as tracking upload timing and size for monitoring or logging purposes.",
      "description_length": 478,
      "index": 1642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceAttachmentChanges",
      "library": "aws-ec2",
      "description": "This module defines a data structure for changes to network interface attachments in EC2, with optional fields for attachment ID and delete-on-termination flag. It includes functions to construct, parse, and convert the structure to query parameters or JSON format. Use this module when modifying network interface attachment settings in API requests or processing responses.",
      "description_length": 375,
      "index": 1643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeHostsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 host resources, supporting filtering by criteria, limiting results, and pagination. It includes functions to construct, serialize, and parse requests in JSON, query string, and XML formats. Concrete use cases include listing dedicated hosts matching specific tags, retrieving a subset of hosts, and paginating through large result sets.",
      "description_length": 393,
      "index": 1644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC endpoint connection with fields for service ID, endpoint ID, owner, state, creation timestamp, DNS entries, and load balancer ARNs. It provides operations to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to manage and serialize VPC endpoint connection details in AWS EC2 interactions.",
      "description_length": 391,
      "index": 1645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClientVpnRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing Client VPN routes in AWS EC2, providing constructors, parsers, and serializers for the result structure. It works with `ClientVpnRouteSet.t` for route data and an optional string token for pagination. Concrete use cases include processing and serializing API responses when managing Client VPN configurations in AWS.",
      "description_length": 361,
      "index": 1646,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesOfferingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 reserved instances offerings, including parameters like instance type, duration, and filters. It provides functions to construct, parse, and serialize these requests for use with the EC2 API. Use cases include retrieving available reserved instance offerings and filtering them by attributes like availability zone or product description.",
      "description_length": 395,
      "index": 1647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling errors related to canceling spot fleet requests in EC2. It includes functions to create, parse, and serialize error objects, supporting operations like converting to and from JSON and query formats. It works with optional error codes and messages to represent failed cancellation responses from the EC2 API.",
      "description_length": 357,
      "index": 1648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTrafficMirrorTargetsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 traffic mirror targets, including a set of traffic mirror targets and an optional pagination token. It provides operations to construct, parse, and convert the result to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS EC2 API calls to manage traffic mirroring configurations.",
      "description_length": 372,
      "index": 1649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CapacityReservationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a capacity reservation, with values like `Active`, `Expired`, and `Cancelled`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions support handling capacity reservation state in API requests and responses, particularly when parsing or constructing AWS EC2 service data.",
      "description_length": 447,
      "index": 1650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InferenceDeviceInfoList",
      "library": "aws-ec2",
      "description": "This module handles lists of inference device information by providing serialization, deserialization, and query conversion operations. It works with XML nodes, JSON values, and AWS query parameters to facilitate interactions with EC2 instance metadata and API requests. Use this module when processing or constructing inference device details in EC2 responses or API calls.",
      "description_length": 374,
      "index": 1651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpnGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPN gateways in EC2, specifically containing a list of VPN gateways. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when processing responses from EC2's `DescribeVpnGateways` API call to extract and manipulate gateway data.",
      "description_length": 361,
      "index": 1652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDomainList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of transit gateway multicast domain data. It provides operations to convert between XML, JSON, and internal data representations. Use it when working with AWS EC2 transit gateway multicast domain responses in different formats.",
      "description_length": 288,
      "index": 1653,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLaunchTemplatesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 launch templates, providing access to a set of launch templates and an optional pagination token. It supports parsing from XML, converting to JSON or query format, and constructing results with optional fields. Concrete use cases include processing responses from AWS EC2's `DescribeLaunchTemplates` API call and handling paginated template listings.",
      "description_length": 399,
      "index": 1654,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayPeeringAttachmentsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateway peering attachments, including a list of attachments and an optional pagination token. It provides operations to construct, serialize, and parse these results in formats like JSON, query strings, and XML. Use this module when processing responses from AWS EC2 API calls that list transit gateway peering attachments.",
      "description_length": 381,
      "index": 1655,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceCreditSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance credit specifications, providing functions to convert to and from XML, JSON, and query formats. It works with lists of `InstanceCreditSpecification.t` values. Useful for managing burstable performance instance configurations in AWS EC2 APIs.",
      "description_length": 283,
      "index": 1656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AttributeValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling attribute values in EC2 operations, primarily working with optional string values. It provides functions to construct, parse, and convert attribute values to and from query parameters, JSON, and XML formats. Concrete use cases include managing instance attributes like termination protection or monitoring status when interacting with the EC2 API.",
      "description_length": 397,
      "index": 1657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeElasticGpusRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for describing elastic GPUs in EC2, supporting operations to create, parse, and serialize requests with optional parameters like GPU IDs, filters, and pagination. It works with XML, JSON, and query string formats for integration with AWS APIs. Concrete use cases include querying GPU resource details, filtering by attributes, and handling paginated responses.",
      "description_length": 402,
      "index": 1658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServiceConfigurationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC endpoint service configurations, including a set of service configurations and an optional pagination token. It provides operations to create, parse, and convert the result to and from JSON and query formats. It is used when managing VPC endpoint services, particularly for retrieving and processing configuration details across paginated responses.",
      "description_length": 398,
      "index": 1659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a route within a transit gateway, including its destination CIDR block, prefix list ID, associated attachments, route type, and state. It provides functions to construct, parse, and serialize route data for use with AWS EC2 transit gateways. Use cases include managing route configurations, querying route information, and integrating with AWS API operations for network traffic control.",
      "description_length": 437,
      "index": 1660,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 spot fleet requests, supporting operations to set optional parameters like dry run, maximum results, pagination token, and specific fleet request IDs. It works with boolean, integer, string, and list types to configure API requests. It is used to describe existing spot fleet requests in AWS EC2, enabling targeted queries and paginated result retrieval.",
      "description_length": 411,
      "index": 1661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 reserved instances, supporting filtering by instance IDs, offering class, and type. It includes operations to construct, serialize, and deserialize requests in JSON, query string, and XML formats. Concrete use cases include building API requests to describe or list reserved instances with specific attributes or constraints.",
      "description_length": 382,
      "index": 1662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume IDs represented as strings. It provides operations to convert these lists to and from JSON and query parameters, and includes parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple volume IDs as input.",
      "description_length": 274,
      "index": 1663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of an instance import task in EC2, primarily by encapsulating an optional conversion task. It provides functions to construct, parse, and serialize the result to various formats such as JSON and query parameters. Use this module when managing instance imports to track or retrieve the status of associated conversion tasks.",
      "description_length": 354,
      "index": 1664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 transit gateway IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require or return multiple transit gateway IDs.",
      "description_length": 288,
      "index": 1665,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 placement group descriptions, providing functions to parse XML input into placement group lists, convert them to query parameters or JSON format, and construct placement group lists from JSON data. It operates specifically on lists of `PlacementGroup.t` records, which represent EC2 placement group metadata. Use this module when managing placement group responses from EC2 API calls, such as listing or creating placement groups.",
      "description_length": 463,
      "index": 1666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PlacementGroupStrategy",
      "library": "aws-ec2",
      "description": "This module defines and maps string representations to placement group strategies (`Cluster`, `Partition`, `Spread`) for EC2 instances. It provides conversion functions between strings and the enumerated type, along with serialization and deserialization for JSON, XML, and query parameters. It is used when configuring EC2 placement groups to ensure consistent handling of strategy values across different data formats.",
      "description_length": 420,
      "index": 1667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayRouteTableAssociationsRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and associated operations for retrieving transit gateway route table associations in AWS EC2. It includes functions to construct, parse, and serialize the request, supporting filtering, pagination, and dry-run capabilities. It works directly with transit gateway route table IDs, filter lists, and pagination tokens.",
      "description_length": 358,
      "index": 1668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachNetworkInterfaceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for detaching a network interface from an EC2 instance, including the attachment ID and optional flags for dry run and force detachment. It provides functions to construct, parse, and convert the request into query or JSON formats for API interaction. Use this module when programmatically managing network interface detachments in AWS EC2, ensuring proper configuration and serialization for API calls.",
      "description_length": 440,
      "index": 1669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RestorableByStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of strings representing restorable EC2 resources. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Use it when working with EC2 API operations that require or return lists of restorable resource IDs or tags.",
      "description_length": 294,
      "index": 1670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogResourceIds",
      "library": "aws-ec2",
      "description": "This module handles list operations for string-based resource IDs in AWS EC2 flow logs. It provides functions to convert lists of strings to and from JSON and query formats, and includes parsing from XML nodes. Use this when working with EC2 flow log APIs that require serializing or deserializing resource ID lists.",
      "description_length": 316,
      "index": 1671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 Traffic Mirror session, with optional fields for identifiers, configuration parameters, and tags. It provides functions to construct, parse, and serialize session data for use in API requests and responses. Concrete use cases include configuring traffic mirroring for network monitoring and capturing packet data from specific interfaces.",
      "description_length": 395,
      "index": 1672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ServiceDetail",
      "library": "aws-ec2",
      "description": "This module defines a data structure for holding detailed information about an AWS EC2 service, including its name, ID, type, availability zones, owner, DNS settings, and policy support. It provides functions to construct, serialize, and convert service data to and from JSON and XML formats. It is used when managing VPC endpoints and querying service configurations in AWS EC2.",
      "description_length": 379,
      "index": 1673,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for describing EC2 image attributes, including the attribute name, image ID, and optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Concrete use cases include querying EC2 image permissions or launch permissions before modifying or sharing an AMI.",
      "description_length": 350,
      "index": 1674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DirectoryServiceAuthentication",
      "library": "aws-ec2",
      "description": "This module defines a data structure for directory service authentication, containing an optional directory ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring EC2 instances to authenticate using AWS Directory Service, particularly when integrating with Active Directory.",
      "description_length": 367,
      "index": 1675,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying Spot Fleet instances, including fields like `dry_run`, `max_results`, `next_token`, and `spot_fleet_request_id`. It provides functions to construct, serialize, and parse these requests in JSON and XML formats. Concrete use cases include making API calls to describe Spot Fleet instances and handling paginated results using `next_token` and `max_results`.",
      "description_length": 408,
      "index": 1676,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a record type and operations for constructing, serializing, and parsing requests to modify EC2 image attributes. It supports fields like image ID, description, launch permissions, and user groups, enabling precise modification of image settings in AWS EC2. Use cases include updating launch permissions for an AMI or changing its description programmatically.",
      "description_length": 379,
      "index": 1677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of starting EC2 instances, specifically capturing the list of instance state changes. It provides functions to construct, parse, and serialize the result in various formats including JSON and query parameters. Use this module when processing responses from EC2 instance start operations to extract and manipulate state change information.",
      "description_length": 369,
      "index": 1678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing EC2 Reserved Instances listings, including fields like instance counts, pricing schedules, and listing status. It provides functions to construct, parse, and serialize these listings for use in API requests and responses. Concrete use cases include querying and modifying Reserved Instances listings via the EC2 API, and converting between XML, JSON, and internal representations.",
      "description_length": 430,
      "index": 1679,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VolumeAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the attachment of an EC2 volume to an instance, with fields for attachment time, device name, instance and volume IDs, attachment state, and whether the volume is deleted on termination. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing volume attachment metadata when provisioning or inspecting EC2 instances.",
      "description_length": 457,
      "index": 1680,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TargetCapacitySpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying target capacities in EC2 Auto Scaling, including total, on-demand, and spot capacities, along with a default capacity type. It provides functions to construct, parse, and serialize these specifications to and from JSON, query strings, and XML. Use this module when configuring or modifying EC2 Auto Scaling groups with specific capacity requirements.",
      "description_length": 402,
      "index": 1681,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeImportImageTasksRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying import image tasks in EC2, supporting filtering by task IDs and custom criteria, and includes pagination controls. It provides functions to construct, serialize, and parse these requests in various formats including JSON and XML. Concrete use cases include retrieving status updates for specific image import operations and listing tasks matching custom filters.",
      "description_length": 415,
      "index": 1682,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchSpecsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of spot fleet launch specifications. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of `SpotFleetLaunchSpecification.t`. It is used when managing EC2 spot fleet requests to process and build launch specification data for API calls.",
      "description_length": 386,
      "index": 1683,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyDefaultCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying default credit specifications in EC2, supporting operations to configure CPU credits for unlimited instance families. It includes functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. Concrete use cases include setting baseline performance credits for burstable instance types in AWS EC2 environments.",
      "description_length": 418,
      "index": 1684,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for registering an Amazon EC2 image, including fields like name, description, architecture, and block device mappings. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this module when configuring and submitting custom machine images to EC2, such as after customizing an instance setup or automating AMI creation.",
      "description_length": 411,
      "index": 1685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointSecurityGroupIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of security group IDs for VPC endpoints in AWS EC2. It provides operations to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when managing VPC endpoint configurations that require association with specific security groups.",
      "description_length": 310,
      "index": 1686,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSecurityGroupReferencesRequest",
      "library": "aws-ec2",
      "description": "This module constructs and manipulates requests to describe security group references in EC2. It handles serialization to query parameters and JSON, and parsing from XML and JSON. It works directly with security group IDs and optional dry-run flags, used when querying AWS for security group dependencies.",
      "description_length": 305,
      "index": 1687,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StaleIpPermissionSet",
      "library": "aws-ec2",
      "description": "This module handles lists of stale IP permissions in EC2, providing functions to convert them to and from JSON, query format, and XML. It works with EC2's internal representation of stale IP permissions, supporting serialization, deserialization, and API interaction. Use this module when managing security group rules that reference deleted or invalid resources, such as during cleanup or auditing.",
      "description_length": 399,
      "index": 1688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFleetResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of modifying an EC2 fleet, with an optional boolean indicating success. It includes functions to construct the type, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used to handle responses from fleet modification operations in EC2, such as confirming whether the requested changes were applied.",
      "description_length": 415,
      "index": 1689,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ListingStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status of a listing in EC2, with values like Active, Pending, Cancelled, and Closed. It includes functions to convert between string representations and the enumerated type, as well as serialization to and from JSON and query parameters. It is used when managing EC2 instance listings, enabling status tracking and API interactions that require status-based filtering or updates.",
      "description_length": 435,
      "index": 1690,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLaunchTemplateVersionRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a new version of an EC2 launch template. It includes fields for specifying the template data, source version, and optional metadata like version description or client token. The module provides functions to construct, parse, and serialize the request for use with AWS API calls.",
      "description_length": 331,
      "index": 1691,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AuthorizationRule",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing authorization rules in a client VPN configuration, with fields like client endpoint ID, group ID, CIDR blocks, and access permissions. It provides functions to construct, serialize, and deserialize these rules to and from JSON and XML formats. Concrete use cases include managing access control policies for AWS Client VPN endpoints and integrating with AWS API requests that require authorization rule parameters.",
      "description_length": 468,
      "index": 1692,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoreSuccessSet",
      "library": "aws-ec2",
      "description": "This module handles a list of fast snapshot restore success items, providing functions to parse XML input, convert to query format, and serialize to and from JSON. It works with EC2 snapshot restore status data, specifically for describing successful snapshot restores. Use this module when managing or querying the status of snapshot restores in AWS EC2.",
      "description_length": 355,
      "index": 1693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceHealthStatus",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the health status of an EC2 instance, with values `Healthy` and `Unhealthy`. It provides conversions to and from strings, JSON, XML, and query parameters, enabling seamless integration with AWS APIs. Use cases include interpreting load balancer health checks and serializing instance health for API requests or responses.",
      "description_length": 365,
      "index": 1694,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DnsSupportValue",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two values, `Enable` and `Disable`, representing DNS support states. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, query parameters, and XML. Use this module when configuring DNS support settings in EC2 resources like VPCs or subnets, where DNS enablement must be explicitly set and exchanged with AWS APIs.",
      "description_length": 441,
      "index": 1695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemSet",
      "library": "aws-ec2",
      "description": "This module handles lists of unsuccessful EC2 operation items, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and EC2 query types. It is used when processing batch operation responses that include partial failures, allowing extraction and handling of individual error details.",
      "description_length": 354,
      "index": 1696,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBundleTaskResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of canceling a bundle task, containing an optional `BundleTask` object. It provides functions to create, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when canceling instance bundling operations.",
      "description_length": 348,
      "index": 1697,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkCardInfoList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of network card information. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 network card metadata. Use this module when processing responses or building requests involving multiple network card configurations in AWS EC2.",
      "description_length": 368,
      "index": 1698,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DiskImageFormat",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing disk image formats (VMDK, RAW, VHD) and provides bidirectional conversions between these values and strings, JSON, and query parameters. It includes functions for parsing from XML nodes and JSON, as well as serialization to JSON and query formats. Use cases include handling disk image format values when interacting with EC2 APIs, such as importing or exporting images.",
      "description_length": 414,
      "index": 1699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisassociateAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for disassociating an Elastic IP address from an EC2 instance, supporting operations to create, serialize, and parse the request in different formats. It works with string and boolean types to represent the association ID, public IP address, and dry-run flag. Concrete use cases include preparing API requests to manage EC2 network configurations and handling responses in JSON or XML format.",
      "description_length": 432,
      "index": 1700,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcPeeringConnectionRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a VPC peering connection, including optional fields like dry run, peer owner ID, peer VPC ID, local VPC ID, peer region, and tag specifications. It provides operations to construct, parse, and serialize the request for use with AWS EC2 API calls. Use cases include configuring cross-VPC connectivity in multi-region or multi-account AWS setups.",
      "description_length": 399,
      "index": 1701,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateEnclaveOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing enclave options for an EC2 launch template, with an optional boolean field indicating whether the enclave is enabled. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. This module is used when configuring enclave options for EC2 instances programmatically via the AWS SDK.",
      "description_length": 394,
      "index": 1702,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyCapacityReservationResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing the result of modifying an EC2 capacity reservation, primarily containing an optional boolean indicating success. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. This module is used to handle responses from the AWS EC2 API when adjusting capacity reservations.",
      "description_length": 376,
      "index": 1703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReportInstanceStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for reporting instance status in EC2, including fields like instance IDs, status type, timestamps, and reason codes. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this when submitting instance health reports to AWS EC2 via the API.",
      "description_length": 332,
      "index": 1704,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpcEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for VPC endpoint creation, containing an optional VPC endpoint and a client token. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. It is used to handle responses from EC2 VPC endpoint creation operations.",
      "description_length": 320,
      "index": 1705,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DetachClassicLinkVpcResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of detaching a VPC from a classic link in EC2. It includes functions to construct, parse, and convert the result to various formats such as JSON and query parameters. It works with boolean values to indicate the success or failure of the operation.",
      "description_length": 309,
      "index": 1706,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SecurityGroupIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group IDs as strings. It provides operations to convert these lists to and from JSON and query parameters, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require multiple security group IDs in requests or responses.",
      "description_length": 299,
      "index": 1707,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AllocationIdList",
      "library": "aws-ec2",
      "description": "Handles lists of EC2 allocation IDs, which are string identifiers for resources like Elastic IPs. Provides functions to convert these lists to and from JSON and query parameters, and to parse them from XML. Useful when working with AWS EC2 APIs that require or return groups of allocation IDs, such as releasing or associating Elastic IPs.",
      "description_length": 339,
      "index": 1708,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResourceType",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing various AWS EC2 resource types, such as Instance, Volume, Vpc, and Security_group. It provides bidirectional conversion functions between the enumerated values and their string representations, along with serialization to and from JSON, query parameters, and XML. These operations are used when interacting with AWS EC2 APIs to specify or interpret resource types in requests and responses.",
      "description_length": 442,
      "index": 1709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGateway",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an AWS EC2 Transit Gateway, including its metadata and configuration options. It provides functions to construct, serialize, and parse transit gateway data in various formats such as JSON, query parameters, and XML. Concrete use cases include handling responses from EC2 API calls that manage transit gateways, such as creating, describing, or tagging transit gateways.",
      "description_length": 419,
      "index": 1710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeNatGatewaysResult",
      "library": "aws-ec2",
      "description": "This module represents the result of describing NAT gateways in EC2, containing a list of NAT gateways and an optional pagination token. It provides operations to construct, parse, and serialize the result for use in API responses and requests. Use this module when handling outputs from EC2's `DescribeNatGateways` operation, particularly for processing or forwarding NAT gateway data in JSON or XML formats.",
      "description_length": 409,
      "index": 1711,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayList",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 Transit Gateway lists. It provides functions to convert between XML, JSON, and query string formats, specifically for lists of Transit Gateway objects. Use this module when working with AWS EC2 Transit Gateway APIs to process responses or build requests in supported formats.",
      "description_length": 343,
      "index": 1712,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeprovisionByoipCidrResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deprovisioning a BYOIP CIDR block in EC2. It includes operations to create, parse, and convert the result to and from XML, JSON, and query formats. It works with the `ByoipCidr` type to represent the CIDR block information returned after deprovisioning.",
      "description_length": 287,
      "index": 1713,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CoipPoolSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of CoIP pool objects. It provides functions to convert between XML, JSON, and query string representations of CoIP pool data. Use this module when working with AWS EC2 CoIP pool responses or when preparing CoIP pool inputs for API requests.",
      "description_length": 323,
      "index": 1714,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteLaunchTemplateVersionsResponseErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item in the response when deleting EC2 launch template versions. It includes fields for the launch template ID, name, version number, and associated error details, supporting optional values for each. Operations include constructing instances, parsing XML input, converting to query format or JSON, and deserializing from JSON, enabling integration with AWS API request and response handling workflows.",
      "description_length": 461,
      "index": 1715,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MembershipType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `Static` and `Igmp`, representing membership types in network configurations. It includes functions to convert between strings and the type, serialize to query parameters or JSON, and parse from XML nodes or JSON values. Concrete use cases include handling EC2 networking API requests and responses where membership type values must be marshaled or unmarshaled.",
      "description_length": 431,
      "index": 1716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 resource tags, including the tag's key, associated resource ID, resource type, and value. It provides functions to construct, parse, and convert tag descriptions to and from XML, JSON, and query formats. Use this module when managing metadata for EC2 resources like instances, volumes, or snapshots.",
      "description_length": 357,
      "index": 1717,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.EnableVpcClassicLinkRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for enabling VPC classic link functionality, containing a VPC identifier and an optional dry-run flag. It provides operations to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include preparing API requests to enable classic link support for a VPC in AWS EC2 workflows.",
      "description_length": 387,
      "index": 1718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulQueuedPurchaseDeletionSet",
      "library": "aws-ec2",
      "description": "This module handles a list of successful queued purchase deletions. It provides operations to parse XML input into a list of deletion records, convert the list to query parameters or JSON format, and construct a list from JSON data. It is used when managing batch deletions of queued purchases in EC2, particularly for processing and transmitting sets of deletion results.",
      "description_length": 372,
      "index": 1719,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateVpcCidrBlockResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of associating a VPC CIDR block, including optional IPv6 and IPv4 CIDR block associations and a VPC ID. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling responses from VPC CIDR block association operations in AWS EC2.",
      "description_length": 370,
      "index": 1720,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating a network ACL in a VPC, including optional dry-run flag, VPC identifier, and tag specifications. It provides functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. It is used when configuring network security policies in AWS EC2 environments.",
      "description_length": 357,
      "index": 1721,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPeeringAttachmentList",
      "library": "aws-ec2",
      "description": "This module handles parsing, querying, and serializing lists of EC2 transit gateway peering attachments. It provides operations to convert between XML, JSON, and internal transit gateway peering attachment list representations. Use this module when working with AWS EC2 APIs that return or require lists of transit gateway peering attachments in different formats.",
      "description_length": 364,
      "index": 1722,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyEbsDefaultKmsKeyIdResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of modifying the default KMS key ID for EBS volumes. It includes functions to construct, parse, and serialize the result in various formats such as JSON and query strings. It is used when interacting with AWS EC2 to retrieve or update the default encryption key for new EBS volumes.",
      "description_length": 343,
      "index": 1723,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateAddressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of associating an Elastic IP address with an EC2 instance. It provides functions to create, parse, and serialize the association result, which includes an optional association ID. Use this module when managing IP address associations in EC2, particularly when working with responses from the `AssociateAddress` API call.",
      "description_length": 351,
      "index": 1724,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ResetInstanceAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for resetting specific attributes of an EC2 instance. It includes fields for the attribute name, a dry-run flag, and the instance ID, supporting operations like modifying instance metadata. Functions allow creating, parsing, and serializing the request for use with AWS API calls.",
      "description_length": 320,
      "index": 1725,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateErrorSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of fast snapshot restore state errors. It works with XML nodes, JSON values, and query parameters, specifically processing lists of `DisableFastSnapshotRestoreStateErrorItem` structures. It is used when managing EC2 snapshot restore errors, enabling interaction with AWS APIs through standardized data formats.",
      "description_length": 385,
      "index": 1726,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of an EC2 volume, including its actions, events, and attachment states. It provides functions to construct, parse, and serialize volume status items for use in API requests and responses. Concrete use cases include monitoring volume health, handling volume status checks, and managing volume attachments in EC2 environments.",
      "description_length": 385,
      "index": 1727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVpcAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying VPC attributes, supporting operations to enable or disable DNS hostnames and DNS support. It works with string identifiers for VPCs and boolean attribute values. It is used to construct, parse, and serialize API requests when updating VPC configuration in AWS EC2.",
      "description_length": 318,
      "index": 1728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IamInstanceProfileAssociationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the association state of an IAM instance profile with an EC2 instance, including states like `Associating`, `Associated`, `Disassociating`, and `Disassociated`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization capabilities for JSON, XML, and query parameters. These operations are used when managing IAM profile associations in EC2 instance configurations, particularly during API interactions with AWS services.",
      "description_length": 551,
      "index": 1729,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RegisterTransitGatewayMulticastGroupMembersResult",
      "library": "aws-ec2",
      "description": "This module handles the result of registering multicast group members for a transit gateway in EC2. It provides constructors, parsing, and serialization functions for a structure that may contain transit gateway multicast group member information. It is used when processing responses from the EC2 API after modifying multicast group memberships.",
      "description_length": 346,
      "index": 1730,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkInterfaceResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a network interface in EC2, primarily providing a structure to hold an optional `NetworkInterface` object. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when managing EC2 network interfaces programmatically, especially when you need to process creation responses in different data formats.",
      "description_length": 410,
      "index": 1731,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TagSpecificationList",
      "library": "aws-ec2",
      "description": "Handles the creation, parsing, and conversion of EC2 tag specifications, which associate tags with resources. Works with lists of `TagSpecification` records, supporting operations to convert to and from XML, JSON, and query parameters. Used when creating or modifying EC2 resources that require tagged metadata, such as instances or volumes.",
      "description_length": 341,
      "index": 1732,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceIpv6AddressesList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of EC2 network interface IPv6 addresses. It provides functions to convert between XML, JSON, and query string representations of these lists, specifically working with `NetworkInterfaceIpv6Address.t` values. Use this module when interacting with AWS EC2 APIs that require or return IPv6 address configurations in different data formats.",
      "description_length": 418,
      "index": 1733,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionOptionsDescription",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing VPC peering connection options with optional boolean fields for DNS resolution and egress traffic permissions. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include configuring and serializing VPC peering settings for AWS API requests.",
      "description_length": 369,
      "index": 1734,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure and serialization functions for creating a transit gateway VPC attachment in AWS EC2. It handles data types like strings, boolean flags, subnet ID lists, tag specifications, and optional configuration parameters. It is used to construct and process API requests when attaching a VPC to a transit gateway, including specifying subnets, tagging resources, and performing dry runs.",
      "description_length": 420,
      "index": 1735,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyInstanceMetadataOptionsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying instance metadata options in EC2. It provides functions to construct, parse, and convert the result to and from JSON and query formats. It works with instance metadata response types and string values, specifically for managing EC2 instance metadata settings.",
      "description_length": 303,
      "index": 1736,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayVirtualInterfaceGroupsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateway virtual interface groups in EC2. It provides operations to create, parse, and serialize the result, which includes a set of virtual interface groups and an optional pagination token. It is used when processing responses from the AWS EC2 API to retrieve and manage virtual interface group data.",
      "description_length": 352,
      "index": 1737,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a transit gateway route table with a transit gateway attachment in AWS EC2. It includes operations to construct, serialize, and parse the request data, working primarily with string and boolean types wrapped in AWS-specific type abstractions. It is used when configuring transit gateway route tables in network infrastructure management workflows.",
      "description_length": 403,
      "index": 1738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SnapshotList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 snapshots, providing functions to convert them to and from JSON and query formats. It includes parsing from XML nodes and constructing from JSON values. Use this module when working with AWS EC2 snapshot data in different serialization formats.",
      "description_length": 277,
      "index": 1739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetLaunchTemplateOverridesListRequest",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of fleet launch template overrides for EC2. It provides functions to convert between XML, JSON, and query string formats, specifically working with lists of `FleetLaunchTemplateOverridesRequest.t`. It is used when configuring EC2 fleet instances with varying launch parameters such as instance types or subnets.",
      "description_length": 394,
      "index": 1740,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnlimitedSupportedInstanceFamily",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing specific EC2 instance families that support unlimited CPU credits. It includes functions to convert between string representations and type values, along with serialization and deserialization functions for JSON, XML, and query parameters. It is used to handle instance family values in API requests and responses.",
      "description_length": 358,
      "index": 1741,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyVolumeAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying volume attributes in EC2, supporting operations to set auto-enable I/O and specify volume identifiers. It works with boolean and string types to configure volume settings, primarily used when adjusting volume permissions or behavior in AWS environments. Concrete use cases include enabling I/O access for a volume or simulating changes with a dry run.",
      "description_length": 405,
      "index": 1742,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpnGatewayIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 VPN gateway IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require multiple VPN gateway IDs as input, such as describing or modifying multiple gateways.",
      "description_length": 332,
      "index": 1743,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFastSnapshotRestoreSuccessItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a successful fast snapshot restore operation in EC2, including fields like snapshot ID, availability zone, state, and timestamps. It provides functions to construct, parse, and serialize these records for use in API responses and requests. Commonly used when managing EBS snapshot restoration status within AWS EC2 workflows.",
      "description_length": 389,
      "index": 1744,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpnConnection",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 VPN connection, including its configuration, state, associated gateways, routes, and metadata. It provides functions to construct, parse, and serialize VPN connection data for interacting with AWS EC2 APIs. Use this module when managing VPN connections programmatically, such as creating, updating, or inspecting their status and configuration in AWS.",
      "description_length": 408,
      "index": 1745,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 security group IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML. It is used when working with AWS EC2 APIs that require multiple group IDs as input.",
      "description_length": 269,
      "index": 1746,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.SpotFleetTagSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of spot fleet tag specifications in AWS EC2. It works with lists of `SpotFleetTagSpecification.t` values, supporting conversion to and from XML, JSON, and query formats. It is used when configuring or retrieving tags for spot fleet requests in EC2.",
      "description_length": 321,
      "index": 1747,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesOfferingList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 Reserved Instances Offerings by providing direct conversions to and from XML, JSON, and query parameters. It supports parsing AWS XML responses into typed structures, serializing them for requests, and constructing empty or initialized lists. Concrete use cases include processing AWS EC2 API responses for reserved instance offerings and preparing those offerings for further API requests or storage.",
      "description_length": 434,
      "index": 1748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RecurringChargesList",
      "library": "aws-ec2",
      "description": "This module handles lists of recurring charges in AWS EC2, providing operations to convert, parse, and serialize the data. It works with lists of `RecurringCharge.t` values, supporting query parameters, XML parsing, and JSON serialization. Use this module when managing billing configurations for EC2 instances, such as handling hourly or monthly charges.",
      "description_length": 355,
      "index": 1749,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstanceRecurrenceRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying recurrence patterns for scheduled EC2 instances, including fields like frequency, interval, and occurrence days. It provides functions to construct, parse, and serialize these recurrence requests in various formats, including JSON and query strings. Concrete use cases include configuring recurring schedules for EC2 instance launches and converting between internal representations and AWS API requests.",
      "description_length": 456,
      "index": 1750,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetDefaultCreditSpecificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving default credit specifications for EC2 instances, including optional dry-run validation and instance family selection. It provides functions to construct, serialize, and parse the request in various formats such as JSON and query parameters. It is used when configuring or inspecting credit settings for T-series EC2 instances.",
      "description_length": 381,
      "index": 1751,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.S3Storage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring S3 storage with optional fields such as access key ID, bucket name, prefix, upload policy, and signature. It provides functions to construct, parse, and serialize S3 storage configurations to and from JSON, query parameters, and XML. Use this module when setting up or modifying S3-backed storage options in EC2 instances, particularly for logging or data persistence scenarios.",
      "description_length": 431,
      "index": 1752,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.BundleInstanceResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for EC2 instance bundling operations, containing an optional bundle task. It provides functions to construct, parse, and serialize the result to query parameters or JSON, specifically handling XML input for task extraction. Used when managing instance image creation workflows in AWS EC2.",
      "description_length": 322,
      "index": 1753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateVolumePermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 volume creation permissions. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction of empty lists. Use it when managing shared EBS volume permissions in AWS EC2 workflows.",
      "description_length": 244,
      "index": 1754,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UserIdGroupPairSet",
      "library": "aws-ec2",
      "description": "Handles serialization and deserialization of EC2 user ID/group ID pairs. Works with lists of `UserIdGroupPair.t` records, converting them to and from XML, JSON, and query parameters. Used when managing security group rules that reference other accounts or VPCs.",
      "description_length": 261,
      "index": 1755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcCidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a VPC CIDR block association, including its association ID, CIDR block, and state. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing IPv4 or IPv6 CIDR blocks associated with a VPC in AWS EC2.",
      "description_length": 327,
      "index": 1756,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring client authentication methods in a virtual private network, supporting options like Active Directory, mutual TLS, and federated identity authentication. It provides constructors, serialization to JSON and query formats, and parsing from XML for building and interpreting authentication requests. Concrete use cases include setting up secure client access to AWS EC2 resources through a client VPN.",
      "description_length": 450,
      "index": 1757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeCarrierGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing carrier gateways in EC2, providing access to a set of carrier gateways and an optional next token for pagination. It supports parsing from XML, converting to query format, and serializing to and from JSON. Use this module when processing responses from the EC2 API's `DescribeCarrierGateways` operation, particularly for handling lists of carrier gateways and paginated results.",
      "description_length": 423,
      "index": 1758,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableFastSnapshotRestoreStateErrorItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an error item related to fast snapshot restore state in EC2, containing an availability zone and an error detail. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. It is used when handling responses from AWS EC2 API calls that disable fast snapshot restore, particularly for processing error information per availability zone.",
      "description_length": 431,
      "index": 1759,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ConnectionNotificationState",
      "library": "aws-ec2",
      "description": "This module defines a simple enumeration type `t` with two values, `Enabled` and `Disabled`, representing the state of a connection notification. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. This module is used when interacting with AWS EC2 connection notification APIs to translate between wire formats and internal state representations.",
      "description_length": 465,
      "index": 1760,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of deleting a transit gateway route, containing an optional `TransitGatewayRoute` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used specifically to handle responses from EC2 API calls that delete routes in a transit gateway.",
      "description_length": 384,
      "index": 1761,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateNameStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 launch template names represented as strings. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with AWS EC2 APIs that require handling multiple launch template names in different data formats.",
      "description_length": 330,
      "index": 1762,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateLocalGatewayRouteResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a local gateway route, containing an optional `LocalGatewayRoute` record. It provides functions to construct, parse, and serialize the result for use in API requests and responses. Concrete use cases include handling EC2 API responses when creating routes and converting route data to and from JSON or query formats for transmission.",
      "description_length": 406,
      "index": 1763,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TrafficDirection",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Ingress` and `Egress`, representing traffic direction in network configurations. It provides bidirectional conversion functions between strings and the type, along with JSON and query parameter serialization and parsing capabilities. Use this module when handling EC2 security group rules or network ACLs that require specifying traffic direction.",
      "description_length": 398,
      "index": 1764,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateInternetGatewayRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating an internet gateway in AWS EC2, including optional tag specifications and a dry-run flag. It provides functions to construct, parse, and serialize the request for use with API calls. Use this module when configuring and submitting create internet gateway requests with custom tags or testing configurations without applying changes.",
      "description_length": 387,
      "index": 1765,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceNetworkInterface",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 instance network interface, with fields for metadata like MAC address, private IP addresses, associated security groups, and network interface status. It provides functions to construct, parse, and convert network interface data to and from XML, JSON, and query formats. Use this module when managing EC2 instance networking configurations, such as retrieving interface details or preparing network settings for API requests.",
      "description_length": 482,
      "index": 1766,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a target configuration request with an optional instance count and a required offering ID. It provides functions to construct, parse, and serialize the configuration for use in API requests. The module is used to specify parameters when modifying Reserved Instances in EC2, particularly during RI exchange operations.",
      "description_length": 337,
      "index": 1767,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeInstanceEventNotificationAttributesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 instance event notification attributes. It works with XML, JSON, and query parameter representations, converting between them and parsing responses. Concrete use cases include processing and serializing the `instanceTagAttribute` field in AWS EC2 API calls.",
      "description_length": 306,
      "index": 1768,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateConnectionStatusSet",
      "library": "aws-ec2",
      "description": "This module handles the parsing, conversion, and serialization of a list of terminate connection status values. It provides functions to convert this list into query parameters or JSON format, and to parse XML or JSON input into the list structure. It is used when managing connection termination statuses in EC2, particularly when interacting with load balancers or instance connection management APIs.",
      "description_length": 403,
      "index": 1769,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeClassicLinkInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing ClassicLink instances in EC2, providing constructors, parsing, and serialization functions. It works with a list of ClassicLink instance records and an optional pagination token. Use this module to process responses from EC2's `DescribeClassicLinkInstances` API call, including paginated results.",
      "description_length": 341,
      "index": 1770,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DhcpOptionsIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of DHCP options IDs in AWS EC2 operations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML responses. It works directly with lists of base string types, specifically for representing and manipulating DHCP options identifiers in API requests and responses.",
      "description_length": 348,
      "index": 1771,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListAssociationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization and deserialization of a list of prefix list association data. It provides functions to convert between XML, JSON, and query string formats, specifically for working with EC2 prefix list associations. Use this module when interacting with AWS EC2 APIs that require or return prefix list association sets in different data formats.",
      "description_length": 368,
      "index": 1772,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StopInstancesResult",
      "library": "aws-ec2",
      "description": "This module represents the result of stopping EC2 instances, primarily containing a list of instance state changes. It provides functions to construct, parse, and serialize the result in various formats, including JSON and query parameters. It is used when handling responses from the EC2 API after issuing a stop instances command.",
      "description_length": 332,
      "index": 1773,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReservedInstancesIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 reserved instance IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require or return groups of reserved instance IDs.",
      "description_length": 292,
      "index": 1774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeIdentityIdFormatResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing identity ID format settings in EC2. It provides operations to create, parse, and convert the result structure to and from JSON and query formats. It works with identity format status lists, specifically used when querying EC2 about ID formatting preferences for resources like instances or volumes.",
      "description_length": 343,
      "index": 1775,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateVpnConnectionRouteRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying a CIDR block and a VPN connection ID to create a route in a virtual private network. It includes functions to construct the request, convert it to query parameters or JSON, and parse it from XML or JSON input. It is used to manage routing in EC2 virtual private gateways by associating CIDR ranges with active VPN connections.",
      "description_length": 378,
      "index": 1776,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ModifyDefaultCreditSpecificationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of modifying default credit specifications for EC2 instance families. It provides constructors, parsing, and serialization functions for working with the `t` type, which includes an optional `InstanceFamilyCreditSpecification`. It is used when updating default credit settings for T-series instances in EC2, allowing the response to be converted to and from JSON, query parameters, or XML.",
      "description_length": 420,
      "index": 1777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfacePermissionStateCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the state of a network interface permission, with values like `Pending`, `Granted`, `Revoking`, and `Revoked`. It provides functions to convert between string representations and the enumerated type, along with serialization and deserialization for JSON and XML formats. It is used to manage and interpret permission states when interacting with EC2 network interfaces in AWS.",
      "description_length": 428,
      "index": 1778,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnRouteSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of Client VPN route data in AWS EC2. It provides functions to convert route data to and from XML, JSON, and query formats, specifically working with lists of ClientVpnRoute.t structures. It is used when managing Client VPN endpoints, such as listing or modifying routes associated with a Client VPN connection.",
      "description_length": 383,
      "index": 1779,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewayMulticastDomainsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying transit gateway multicast domains, including identifiers, filters, pagination, and dry-run options. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Concrete use cases include listing multicast domains with custom filters and handling paginated responses.",
      "description_length": 365,
      "index": 1780,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceAttributeName",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type `t` representing EC2 instance attribute names, such as `InstanceType`, `UserData`, and `EbsOptimized`. It includes functions to convert between string representations and type values, along with serialization and deserialization routines for JSON, XML, and query parameters. This module is used when modifying or retrieving specific EC2 instance attributes through AWS API calls.",
      "description_length": 426,
      "index": 1781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotInstanceRequestsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 spot instance requests, including a list of spot instance requests and an optional pagination token. It provides operations to construct, parse, and serialize the result in various formats such as JSON and query parameters. Use this module when processing responses from AWS EC2's DescribeSpotInstanceRequests API to retrieve and manage spot instance request data.",
      "description_length": 413,
      "index": 1782,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateKeyPairRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating an EC2 key pair request, including required fields like key name and optional parameters such as dry run and tag specifications. It provides functions to construct, serialize, and parse the request in various formats including JSON, query parameters, and XML. Concrete use cases include preparing API requests to create new key pairs with custom tags or validating request configurations before submission.",
      "description_length": 456,
      "index": 1783,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance IPv6 addresses, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `InstanceIpv6Address.t` values, supporting data transformation for API interactions. Concrete use cases include preparing IPv6 address lists for EC2 instance configuration requests and parsing responses from AWS API calls.",
      "description_length": 404,
      "index": 1784,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcEndpointServicePermissionsResult",
      "library": "aws-ec2",
      "description": "This module handles the response data from describing VPC endpoint service permissions, primarily managing a set of allowed principals and an optional next token for pagination. It provides operations to construct, parse, and serialize the response in various formats including JSON and query parameters. Use this module when processing results from EC2 VPC endpoint service permission queries, especially when handling IAM principal access configurations.",
      "description_length": 456,
      "index": 1785,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet",
      "library": "aws-ec2",
      "description": "Handles sets of virtual interface group association IDs for local gateway route tables in EC2. Provides parsing from XML, conversion to query parameters and JSON, and extraction from JSON. Used when managing associations between virtual interface groups and local gateway route tables in AWS EC2.",
      "description_length": 296,
      "index": 1786,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.EbsInfo",
      "library": "aws-ec2",
      "description": "This module defines a data structure for describing EBS (Elastic Block Store) configuration details, including support for encryption, EBS optimization, and NVMe. It provides functions to construct, parse, and serialize EBS information for use in AWS EC2 instance configuration and querying. Use cases include retrieving EBS properties from XML or JSON responses and preparing EBS settings for instance launches or attribute updates.",
      "description_length": 433,
      "index": 1787,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTaskIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of export image task IDs in string format. It provides operations to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when managing EC2 image exports, particularly for tracking and referencing multiple export tasks.",
      "description_length": 297,
      "index": 1788,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastRegisteredGroupSources",
      "library": "aws-ec2",
      "description": "This module defines a data structure for managing multicast group sources in a transit gateway, including identifiers for network interfaces and IP addresses. It provides functions to construct, serialize, and deserialize these structures to and from XML, JSON, and query formats. Use this module when configuring or retrieving multicast source registrations in AWS EC2 transit gateways.",
      "description_length": 387,
      "index": 1789,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnAuthenticationList",
      "library": "aws-ec2",
      "description": "This module handles lists of client VPN authentication methods in AWS EC2. It provides functions to parse XML input into authentication lists, convert authentication lists to query parameters or JSON format, and construct authentication lists from JSON input. It works directly with lists of `ClientVpnAuthentication.t` values, enabling configuration and retrieval of client authentication settings for EC2 Client VPN endpoints.",
      "description_length": 428,
      "index": 1790,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing a request to delete an EC2 spot datafeed subscription, with an optional `dry_run` flag. It provides functions to construct, parse, and serialize the request in various formats including JSON, query parameters, and XML. Use this module when interacting with the EC2 API to manage spot instance datafeed subscriptions programmatically.",
      "description_length": 389,
      "index": 1791,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PrivateIpAddressSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of private IP address specifications. It provides functions to convert between XML, JSON, and internal data representations, specifically working with `PrivateIpAddressSpecification.t` values. It is used when configuring EC2 instances with multiple private IP addresses, allowing precise control over IP assignment and association.",
      "description_length": 414,
      "index": 1792,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnEndpointStatusCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status codes of a Client VPN endpoint in AWS EC2, including states like `Pending_associate`, `Available`, `Deleting`, and `Deleted`. It provides bidirectional conversion functions between these status codes and strings, along with serialization and deserialization capabilities for JSON, XML, and query parameters. This module is used to interpret and manipulate endpoint status values returned by or sent to the AWS EC2 API.",
      "description_length": 481,
      "index": 1793,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcIpv6CidrBlockAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the association of an IPv6 CIDR block with a VPC, including optional fields like association ID, CIDR block value, state, network border group, and IPv6 pool. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. Concrete use cases include managing and transmitting VPC IPv6 CIDR block associations within AWS EC2 API interactions.",
      "description_length": 441,
      "index": 1794,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayMulticastDeregisteredGroupSources",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling deregistered multicast group sources in EC2 transit gateways, including their multicast domain ID, network interface IDs, and group IP address. It provides functions to construct, parse, and serialize these records to support API interactions. Use this module when managing multicast traffic by removing specific source interfaces from multicast groups in AWS transit gateways.",
      "description_length": 427,
      "index": 1795,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyLaunchTemplateRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for modifying EC2 launch templates, supporting operations to create, parse, and serialize requests. It works with string and boolean types wrapped in optionals, representing parameters like template IDs, names, and version numbers. Concrete use cases include updating the default version of a launch template or ensuring idempotency with client tokens during modification requests.",
      "description_length": 418,
      "index": 1796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateClientVpnConnectionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for terminating specific Client VPN connections in AWS EC2. It includes functions to construct, serialize, and parse requests targeting a Client VPN endpoint by ID, optionally filtered by connection ID, username, or dry-run flag. It is used to programmatically disconnect active Client VPN sessions with precise control over termination criteria.",
      "description_length": 386,
      "index": 1797,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for creating an FPGA image request, including fields like storage locations, description, name, and tags. It provides functions to construct, parse, and serialize the request for use with EC2 APIs. Use this module when configuring and submitting FPGA image creation operations in AWS.",
      "description_length": 321,
      "index": 1798,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportImageTask",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 image export task, including metadata like task ID, image ID, progress, status, and S3 export location. It provides constructors, JSON and XML parsers, and query conversion utilities for handling export image tasks in AWS EC2. Concrete use cases include tracking the state of image exports, serializing task data for storage or transmission, and integrating with AWS APIs using JSON or query string formats.",
      "description_length": 464,
      "index": 1799,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a transit gateway in AWS EC2, containing an optional `TransitGateway` object. It provides functions to construct, parse, and serialize this result for use in API requests and responses. Concrete use cases include handling the output of EC2 API calls that create transit gateways, enabling further configuration or monitoring of the created gateway.",
      "description_length": 421,
      "index": 1800,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVpcClassicLinkDnsSupportResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing VPC ClassicLink DNS support in AWS EC2. It provides operations to create, parse, and serialize result data, including optional pagination tokens and lists of VPCs with ClassicLink DNS support. Use cases include retrieving and processing DNS support status for VPCs in paginated responses from the EC2 API.",
      "description_length": 350,
      "index": 1801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociationStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing the status of an EC2 association, including an optional status code and message. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from EC2 API calls that return association status information, such as network interface or route table associations.",
      "description_length": 409,
      "index": 1802,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeLocalGatewayRouteTablesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing local gateway route tables in EC2, providing constructors, JSON and XML conversions, and query parameter serialization. It works with `LocalGatewayRouteTableSet.t` and optional string tokens for pagination. Concrete use cases include processing responses from AWS EC2 API calls to retrieve and manage local gateway route table information.",
      "description_length": 384,
      "index": 1803,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.NatGatewayState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the possible states of a NAT gateway in AWS EC2, including transitions like creation, deletion, and failure. It provides direct conversions between string representations and the enumerated values, along with serialization and deserialization functions for JSON and XML formats. Use this module when handling NAT gateway state changes, status checks, or interactions with AWS APIs that require state-based filtering or reporting.",
      "description_length": 481,
      "index": 1804,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyClientVpnEndpointResult",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing the result of modifying a Client VPN endpoint in EC2, containing an optional boolean indicating success. It provides functions to construct, parse, and serialize this result to and from XML, JSON, and query formats. Concrete use cases include handling API responses when updating Client VPN endpoint configurations in AWS EC2.",
      "description_length": 378,
      "index": 1805,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetCapacityReservationUsageStrategy",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type representing strategies for using capacity reservations in EC2 fleets. It provides conversions to and from strings, JSON, and query formats, along with parsing from XML. It is used to specify and serialize the behavior for prioritizing capacity reservations when launching instances.",
      "description_length": 328,
      "index": 1806,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportVolumeResult",
      "library": "aws-ec2",
      "description": "This module handles the result of an EC2 volume import operation. It includes a conversion task object that tracks the status and details of the import. Functions support creating, parsing, and serializing the result to and from XML, JSON, and query formats for API interactions.",
      "description_length": 279,
      "index": 1807,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrincipalIdFormat",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the format of principal IDs in EC2, including an optional ARN and a list of ID formats. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query parameters. Concrete use cases include handling responses from EC2 API calls that describe ID formatting rules for resources like instances or volumes.",
      "description_length": 394,
      "index": 1808,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItemError",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling error information in EC2 operations, specifically capturing error codes and messages. It provides functions to construct, parse, and serialize error data to and from XML, JSON, and query formats. Use this module when processing failed EC2 API requests to extract and transmit error details programmatically.",
      "description_length": 357,
      "index": 1809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteQueuedReservedInstancesIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of string identifiers for queued Reserved Instances in EC2. It provides operations to convert these lists to and from query parameters, JSON, and XML formats. Use this when managing Reserved Instance cancellations through the EC2 API, particularly when working with batched deletion requests.",
      "description_length": 318,
      "index": 1810,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMatchCriteria",
      "library": "aws-ec2",
      "description": "This module defines a type `t` with two variants, `Open` and `Targeted`, representing instance match criteria in EC2 configurations. It includes functions to convert between strings and the `t` type, along with serialization to and from JSON and query formats. It is used to specify and handle matching rules for EC2 instance attributes in API requests and responses.",
      "description_length": 367,
      "index": 1811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteList",
      "library": "aws-ec2",
      "description": "This module defines a list type for transit gateway routes and provides functions to construct, parse, and convert route lists to and from XML, JSON, and query formats. It works with transit gateway route data structures, enabling serialization and deserialization for API interactions. Concrete use cases include processing EC2 transit gateway route table responses and building requests for route propagation in network management workflows.",
      "description_length": 443,
      "index": 1812,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFlowLogsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing flow logs in EC2, providing structured access to a set of flow logs and an optional pagination token. It supports parsing from XML, converting to query format, and serializing to and from JSON. Use it when processing responses from EC2's `DescribeFlowLogs` API to extract and manipulate flow log data and pagination information.",
      "description_length": 373,
      "index": 1813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceIpv6AddressListRequest",
      "library": "aws-ec2",
      "description": "Handles the construction, serialization, and parsing of IPv6 address requests for EC2 instances. Works with lists of `InstanceIpv6AddressRequest.t` values, supporting conversion to and from XML, JSON, and query parameters. Used when configuring or modifying the IPv6 settings of EC2 instances in AWS.",
      "description_length": 300,
      "index": 1814,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DisableTransitGatewayRouteTablePropagationResult",
      "library": "aws-ec2",
      "description": "This module handles the result of disabling a transit gateway route table propagation in AWS EC2. It provides constructors, JSON and XML parsers, and query parameter conversion for a result type that includes an optional propagation object. It is used when managing transit gateway route table associations and propagations in AWS networking configurations.",
      "description_length": 357,
      "index": 1815,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayRouteAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway route attachment with optional fields for resource ID, transit gateway attachment ID, and resource type. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling route attachment data when managing AWS EC2 transit gateways, particularly in API interactions and configuration management.",
      "description_length": 444,
      "index": 1816,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetAssociationList",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of subnet association lists for AWS EC2 operations. Works directly with lists of `SubnetAssociation.t` values, supporting transformations to and from XML, JSON, and query formats. Useful when managing VPC route tables or network configurations that require listing associated subnets.",
      "description_length": 331,
      "index": 1817,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TerminateConnectionStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the termination status of a client VPN connection, including the connection ID and its previous and current status. It provides functions to construct, serialize, and deserialize this structure for use in API requests and responses. Concrete use cases include tracking connection state changes and reporting termination details in AWS client VPN management workflows.",
      "description_length": 417,
      "index": 1818,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostProperties",
      "library": "aws-ec2",
      "description": "This module defines a data structure for host properties with optional fields such as core count, instance type, family, socket count, and total vCPUs. It provides functions to construct, parse, and serialize host property data for use in querying and processing EC2 host resources. Use cases include retrieving and configuring dedicated host attributes via AWS API calls.",
      "description_length": 372,
      "index": 1819,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 launch template sets. It provides functions to convert between XML, JSON, and query string representations of a list of launch templates. Use this module when working with AWS EC2 APIs that require sending or parsing groups of launch templates in different data formats.",
      "description_length": 350,
      "index": 1820,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionStatus",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the status of a Client VPN connection, with fields for a status code and a descriptive message. It provides functions to construct, parse, and convert the status to various formats including JSON, query parameters, and XML. It is used to handle and transmit Client VPN connection status information in AWS EC2 operations.",
      "description_length": 371,
      "index": 1821,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ScheduledInstancesPlacement",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying placement settings of scheduled EC2 instances, including optional availability zone and placement group name. It provides functions to construct, serialize, and deserialize this structure to and from JSON, query parameters, and XML. Use this module when configuring or retrieving placement details for scheduled instances in AWS EC2.",
      "description_length": 385,
      "index": 1822,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.Types.SuccessfulInstanceCreditSpecificationItem",
      "library": "aws-ec2",
      "description": "This module handles instance credit specification items in EC2 responses. It provides functions to create, parse, and convert items to and from JSON and query formats. It works with instance IDs as optional strings, used when processing responses from AWS EC2 credit specification operations.",
      "description_length": 292,
      "index": 1823,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OnDemandOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring on-demand options in EC2 fleet requests, with fields like allocation strategy, capacity reservation options, and pricing constraints. It supports operations to construct, parse, and serialize these configurations to JSON, query parameters, or XML. Concrete use cases include setting up EC2 fleet launch specifications with on-demand pricing and capacity controls.",
      "description_length": 416,
      "index": 1824,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.VpcPeeringConnectionStateReason",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the state reason for a VPC peering connection, including an optional code and message. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. Concrete use cases include handling state changes in VPC peering connections by capturing structured error or status information during AWS API interactions.",
      "description_length": 408,
      "index": 1825,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Storage",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing storage configurations in AWS EC2, specifically supporting S3-based storage through an optional `S3Storage` field. It provides functions to construct, serialize, and parse storage configurations in various formats including XML, JSON, and query parameters. Use this module when configuring or retrieving instance storage details that may involve S3 buckets in AWS EC2 operations.",
      "description_length": 433,
      "index": 1826,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateSpotDatafeedSubscriptionRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring a spot datafeed subscription request, including the required S3 bucket and optional dry-run and prefix settings. It provides functions to construct, serialize, and parse the request in various formats such as JSON, query parameters, and XML. It is used when setting up or modifying spot instance datafeed subscriptions in AWS EC2.",
      "description_length": 383,
      "index": 1827,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ModifyFpgaImageAttributeRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for modifying FPGA image attributes in EC2, supporting operations like updating permissions, descriptions, or names. It works with string identifiers, boolean flags, and lists of user IDs, user groups, and product codes. Concrete use cases include adjusting access controls for FPGA images and updating metadata during image management workflows.",
      "description_length": 386,
      "index": 1828,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateNetworkAclResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of creating a network ACL in AWS EC2, containing an optional `NetworkAcl` object. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when managing network ACL creation responses in AWS EC2 operations.",
      "description_length": 356,
      "index": 1829,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ElasticGpuHealth",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the health status of an Elastic GPU, with operations to create, parse, and serialize instances. It works with XML, JSON, and query string formats for integration with AWS APIs. Use cases include retrieving and transmitting the health status of Elastic GPUs in EC2 environments.",
      "description_length": 327,
      "index": 1830,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociateTransitGatewayMulticastDomainRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for associating a transit gateway multicast domain with a subnet. It includes fields for the multicast domain ID, transit gateway attachment ID, subnet IDs, and a dry-run flag. Operations allow creating, parsing, and serializing the request for use with AWS EC2 API calls.",
      "description_length": 312,
      "index": 1831,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FpgaImageIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of FPGA image IDs in string format, providing operations to convert between XML, JSON, and query string representations. It includes functions for parsing FPGA image ID lists from XML nodes and JSON values, and for serializing them into query parameters or JSON lists. Use this module when working with AWS EC2 FPGA image operations that require list inputs or outputs, such as describing or filtering FPGA images.",
      "description_length": 440,
      "index": 1832,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunScheduledInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of running scheduled EC2 instances, specifically capturing the set of launched instance IDs. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when managing scheduled instance launches and tracking their resulting instance IDs programmatically.",
      "description_length": 371,
      "index": 1833,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.StaleSecurityGroup",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a stale security group in AWS EC2, including its description, group ID, name, VPC ID, and sets of stale ingress and egress IP permissions. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to identify and manage outdated security group rules during EC2 configuration audits or cleanups.",
      "description_length": 408,
      "index": 1834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.OfferingClassType",
      "library": "aws-ec2",
      "description": "This module defines a polymorphic variant type with two constructors, `Standard` and `Convertible`, representing EC2 offering class types. It includes functions to convert between strings and the variant type, as well as serialization and deserialization routines for JSON, XML, and query parameters. This module is used when interacting with AWS EC2 APIs to specify or retrieve offering class types in requests and responses.",
      "description_length": 426,
      "index": 1835,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.InstanceMetadataEndpointState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Disabled` and `Enabled` to represent the state of an instance metadata endpoint. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query parameters. This module is used to configure and interpret the state of instance metadata services in EC2 instance settings.",
      "description_length": 388,
      "index": 1836,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Host",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing an EC2 host with fields for placement, availability, capacity, and instance management. It provides functions to construct, parse, and serialize host data for use in API requests and responses. Concrete use cases include managing dedicated host configurations, querying host availability, and handling host lifecycle events in AWS EC2.",
      "description_length": 385,
      "index": 1837,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.RecurringChargeFrequency",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the frequency of recurring charges, specifically `Hourly`. It includes functions to convert between strings and the enumerated type, serialize to and from JSON and query formats, and parse from XML nodes. It is used to handle billing frequency values in EC2 pricing models, specifically for distinguishing hourly recurring charges.",
      "description_length": 382,
      "index": 1838,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceVolumeDetailSet",
      "library": "aws-ec2",
      "description": "Handles parsing, conversion, and serialization of volume details for EC2 instance imports. Works with XML nodes, JSON values, and query parameters, transforming them into and from a list of import volume detail items. Used when processing responses or constructing requests for EC2 instance import tasks involving volume metadata.",
      "description_length": 330,
      "index": 1839,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateInstanceMetadataOptionsState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type with values `Pending` and `Applied`, representing the state of instance metadata options in an EC2 launch template. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include handling API responses, constructing requests, and converting state values for storage or transmission.",
      "description_length": 447,
      "index": 1840,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AddressList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 address types, providing direct conversions to and from XML, JSON, and query formats. It supports parsing address data from XML nodes, serializing address lists into query parameters or JSON structures, and constructing empty address lists. Concrete use cases include processing responses from EC2 API calls that involve multiple addresses and preparing address data for API requests.",
      "description_length": 417,
      "index": 1841,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ReleaseAddressRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for releasing an Elastic IP address in EC2, supporting operations to construct, serialize, and parse release address requests. It works with string and boolean types to represent optional allocation ID, public IP, network border group, and dry run flag. Concrete use cases include releasing an Elastic IP by allocation ID or public IP, optionally specifying a network border group or performing a dry run.",
      "description_length": 442,
      "index": 1842,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeVolumeStatusRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for querying EC2 volume status, supporting operations to filter results, limit output, and specify volume IDs. It works with AWS-specific types like filters, volume IDs, and pagination tokens. It is used to construct and serialize API requests when checking the status of EC2 volumes.",
      "description_length": 326,
      "index": 1843,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostReservationSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of EC2 host reservation sets. It provides functions to convert between XML, JSON, and query formats and a list-based structure of host reservations. Use this module when processing responses or building requests for EC2 host reservation APIs, particularly when integrating with AWS SDK operations.",
      "description_length": 370,
      "index": 1844,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetManagedPrefixListEntriesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving managed prefix list entries from EC2, providing structured access to the list of entries and pagination token. It works with prefix list entry sets and string-based next tokens for paginated responses. Use this module when processing responses from `describe_managed_prefix_lists` to handle large sets of prefix list entries in batches.",
      "description_length": 381,
      "index": 1845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Filter",
      "library": "aws-ec2",
      "description": "This module defines a filter type with a name and list of string values, used to represent EC2 API filters. It provides functions to construct, parse, and serialize filters to query parameters or JSON, enabling precise querying of EC2 resources like instances or volumes based on attribute values. Common use cases include filtering EC2 instances by tags, instance types, or network configurations during API requests.",
      "description_length": 418,
      "index": 1846,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FlowLogSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and conversion of EC2 flow log data structures. Works with lists of flow log records, supporting XML, JSON, and query parameter formats. Used to process network traffic logs for analysis or storage in AWS services.",
      "description_length": 246,
      "index": 1847,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TerminateClientVpnConnectionsResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling the result of terminating client connections to a Client VPN endpoint. It includes fields for the endpoint ID, username, and a set of termination statuses, along with functions to construct, parse, and serialize the data for use in API responses or further processing. The module supports converting the result to JSON, query parameters, or XML for integration with AWS services.",
      "description_length": 429,
      "index": 1848,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPropagationState",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the propagation state of a transit gateway route table, with values for enabling, enabled, disabling, and disabled states. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization functions for JSON and XML formats. The module is used to manage and interpret the state of route propagation in transit gateway configurations when interacting with AWS EC2 APIs.",
      "description_length": 488,
      "index": 1849,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayVpcAttachmentRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a transit gateway VPC attachment, including the attachment ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use in API calls. Use this module when preparing or handling deletion requests for transit gateway VPC attachments in AWS EC2.",
      "description_length": 344,
      "index": 1850,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateHibernationOptionsRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type `t` representing hibernation options for an EC2 launch template, with an optional boolean field indicating whether hibernation is configured. It includes functions to construct, parse, and convert the data structure to and from XML, JSON, and query string formats. Concrete use cases include configuring and serializing hibernation settings when creating or modifying EC2 launch templates via the AWS API.",
      "description_length": 444,
      "index": 1851,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeFleetHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying the history of an EC2 fleet, including parameters like fleet ID, start time, event type filtering, and pagination controls. It provides functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. Concrete use cases include retrieving fleet event logs for auditing, monitoring, or debugging specific fleet activity within a defined time window.",
      "description_length": 436,
      "index": 1852,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesModificationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying EC2 reserved instances modifications, including filters, modification IDs, and a pagination token. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include retrieving specific modifications based on filters or IDs and paginating through large result sets.",
      "description_length": 375,
      "index": 1853,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetReservationValue",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the target reservation value configuration for EC2, containing optional reservation value and target configuration details. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and from JSON. Concrete use cases include handling EC2 reserved instance exchange options and configuring target capacity settings in AWS API requests.",
      "description_length": 421,
      "index": 1854,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ServiceTypeDetailSet",
      "library": "aws-ec2",
      "description": "This module handles parsing, serialization, and manipulation of EC2 service type details. It works with lists of `ServiceTypeDetail.t` values, supporting operations like XML parsing, JSON and query parameter conversion. It is used when interacting with AWS EC2 APIs to process service-specific configuration and metadata responses.",
      "description_length": 331,
      "index": 1855,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.EgressOnlyInternetGatewayIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of egress-only internet gateway IDs represented as strings. It provides operations to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with AWS EC2 APIs that require handling multiple egress-only internet gateway resources in requests or responses.",
      "description_length": 340,
      "index": 1856,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.PriceScheduleSpecificationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 price schedule specifications, providing functions to convert to and from JSON, query parameters, and XML. It supports operations for serializing and deserializing price schedule data for use in API requests and responses. Concrete use cases include processing spot instance pricing data when interacting with EC2 APIs.",
      "description_length": 352,
      "index": 1857,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotPriceHistoryRequest",
      "library": "aws-ec2",
      "description": "This module defines a data structure for configuring requests to retrieve EC2 spot price history, including parameters like instance types, time ranges, and filters. It provides functions to construct, serialize, and parse these requests, supporting integration with AWS query and JSON APIs. Use this module when querying historical spot prices for specific EC2 instance types in a given region and time window.",
      "description_length": 411,
      "index": 1858,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointType",
      "library": "aws-ec2",
      "description": "This module defines a type `t` representing the three possible VPC endpoint types: `Interface`, `Gateway`, and `GatewayLoadBalancer`. It includes functions to convert between strings and the enumerated type, serialize to query or JSON formats, and parse from XML or JSON input. It is used to handle VPC endpoint type values when interacting with AWS EC2 APIs, such as creating or describing VPC endpoints.",
      "description_length": 405,
      "index": 1859,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeTransitGatewaysResult",
      "library": "aws-ec2",
      "description": "This module handles the result of describing EC2 transit gateways, providing constructors, parsing, and serialization functions. It works with transit gateway lists and optional next tokens for pagination. Use it to process responses from AWS EC2 API calls that list transit gateways, including handling paginated results.",
      "description_length": 322,
      "index": 1860,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure and associated operations for copying an FPGA image in EC2. It includes functions to construct, parse, and serialize the request, handling fields like source image ID, region, and optional metadata. It works directly with EC2 FPGA image data for cross-region replication and management.",
      "description_length": 326,
      "index": 1861,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterRuleRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for creating EC2 traffic mirror filter rules, including fields like traffic direction, rule number, action, CIDR blocks, and optional port ranges or protocol. It provides functions to construct, serialize, and parse these requests, specifically for configuring traffic mirroring in AWS EC2. Use cases include setting up network monitoring rules that capture and forward traffic based on defined criteria.",
      "description_length": 444,
      "index": 1862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VolumeStatusInfoStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing the status of an EC2 volume, with variants `Ok`, `Impaired`, and `Insufficient_data`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when interpreting or constructing volume status information from AWS API responses or requests.",
      "description_length": 444,
      "index": 1863,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines the request structure for creating a transit gateway route table in AWS EC2. It includes fields for the transit gateway ID, tag specifications, and a dry run flag, supporting operations to construct, serialize, and parse the request data. It is used when configuring routing for transit gateways, enabling programmatic management of network traffic policies in cloud infrastructure.",
      "description_length": 402,
      "index": 1864,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AssociatedNetworkType",
      "library": "aws-ec2",
      "description": "This module defines a single type `t` representing the type of an associated network, specifically `Vpc`. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON, query parameters, and XML. These operations are used when interacting with EC2 APIs that require specifying or parsing network association types in responses or requests.",
      "description_length": 419,
      "index": 1865,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.NetworkInterfaceStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the status of a network interface in EC2, with values like `Available`, `Associated`, and `In_use`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These functions are used when interacting with EC2 APIs to interpret or send network interface state information.",
      "description_length": 414,
      "index": 1866,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTrafficMirrorFilterResult",
      "library": "aws-ec2",
      "description": "This module defines a result structure for creating a traffic mirror filter, containing an optional traffic mirror filter and a client token. It provides functions to construct, parse, and serialize the result in various formats, including JSON, query parameters, and XML. Concrete use cases include handling responses from EC2 API calls that create traffic mirror filters for network traffic monitoring.",
      "description_length": 404,
      "index": 1867,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelBatchErrorCode",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing specific error codes for batch cancellation operations in EC2, such as invalid or malformed fleet request IDs and non-cancellable states. It provides bidirectional conversions between the type and strings, JSON, and query parameters, enabling seamless integration with API requests and responses. Use cases include handling and interpreting batch cancellation errors in EC2 fleet operations.",
      "description_length": 443,
      "index": 1868,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CreateCarrierGatewayResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of creating a carrier gateway in AWS EC2, containing an optional carrier gateway object. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when handling responses from the EC2 API related to carrier gateway creation operations.",
      "description_length": 362,
      "index": 1869,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeSecurityGroupEgressResult",
      "library": "aws-ec2",
      "description": "This module defines a result type for revoking egress rules from a security group, containing an optional boolean indicating success and a list of IP permissions that were not revoked. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Concrete use cases include handling responses from AWS EC2 API calls to revoke outbound security group rules and processing the resulting permissions that were unrecognized or not applied.",
      "description_length": 503,
      "index": 1870,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.IpPermissionList",
      "library": "aws-ec2",
      "description": "This module handles lists of IP permissions for EC2 security group rules. It provides operations to convert IP permission lists to and from XML, JSON, and query formats. Use this module when managing security group ingress or egress rules with AWS EC2.",
      "description_length": 252,
      "index": 1871,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetTransitGatewayAttachmentPropagationsResult",
      "library": "aws-ec2",
      "description": "This module handles the result of retrieving transit gateway attachment propagations, including a list of propagations and an optional pagination token. It provides functions to construct, parse, and serialize the result for use in API responses or further processing. Use this module when working with EC2 transit gateway attachments to manage route propagation settings across VPCs or subnets.",
      "description_length": 395,
      "index": 1872,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ClientVpnConnectionSet",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of client VPN connection data. It provides functions to convert between XML, JSON, and query string formats, specifically for working with AWS EC2 client VPN connection sets. Use this module when processing API responses or constructing requests involving client VPN connections.",
      "description_length": 361,
      "index": 1873,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.ReservationList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 reservations by providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with AWS EC2 APIs. Concrete use cases include processing API responses, building requests, and converting between data formats during service communication.",
      "description_length": 381,
      "index": 1874,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.Ipv6CidrAssociationSet",
      "library": "aws-ec2",
      "description": "Handles parsing, serialization, and manipulation of IPv6 CIDR association sets in XML, query, and JSON formats. Works with lists of IPv6 CIDR association records, converting between internal representations and external data formats. Used when managing VPC IPv6 ranges, specifically for associating and describing IPv6 CIDR blocks in EC2.",
      "description_length": 338,
      "index": 1875,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteVpcEndpointServiceConfigurationsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting VPC endpoint service configurations, containing an optional dry-run flag and a list of service IDs. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. Use this module when preparing or processing deletion requests for VPC endpoint services, particularly when integrating with AWS SDK workflows.",
      "description_length": 402,
      "index": 1876,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportSnapshotResult",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of an EC2 snapshot import task, including fields for the task ID, description, snapshot details, and associated tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include handling responses from the EC2 API when importing snapshots and managing metadata for snapshot tasks.",
      "description_length": 421,
      "index": 1877,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CreateTransitGatewayPeeringAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of creating a transit gateway peering attachment in AWS EC2. It provides operations to construct, parse, and serialize the result, which includes an optional transit gateway peering attachment object. Use this module when managing peering connections between transit gateways, particularly for creating and interpreting API responses.",
      "description_length": 365,
      "index": 1878,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GetAssociatedIpv6PoolCidrsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for retrieving associated IPv6 CIDR blocks from a pool, including parameters like pool ID, pagination token, and result limit. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query strings. It is used when interacting with EC2's IPv6 pool management API to list assigned CIDR ranges.",
      "description_length": 383,
      "index": 1879,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ProductCodeValues",
      "library": "aws-ec2",
      "description": "This module defines a sum type with two variants, `Devpay` and `Marketplace`, representing product code values in the EC2 API. It includes functions to convert between strings and the type, as well as serialization and deserialization routines for JSON, query parameters, and XML. These operations support handling product code values when interacting with AWS EC2 services, such as processing API responses or constructing requests.",
      "description_length": 433,
      "index": 1880,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing a transit gateway peering attachment, with fields for identifiers, requester and accepter gateway info, status, state, creation time, and tags. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, and to deserialize from JSON. Use this module when managing EC2 transit gateway peering connections, particularly for creating, inspecting, or transmitting attachment metadata.",
      "description_length": 470,
      "index": 1881,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.VpcEndpointServiceIdList",
      "library": "aws-ec2",
      "description": "This module handles lists of VPC endpoint service IDs in AWS EC2. It provides functions to parse, convert to query format, and serialize to and from JSON. It works specifically with lists of string-based service IDs, supporting operations like extracting from XML nodes and building JSON payloads.",
      "description_length": 297,
      "index": 1882,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for canceling spot fleet requests in AWS EC2, including fields to specify dry run mode, a list of spot fleet request IDs, and whether to terminate associated instances. It provides functions to construct, parse, and serialize the request for use with AWS API calls. Concrete use cases include programmatically managing EC2 spot fleets, such as canceling multiple spot requests and optionally terminating their instances during resource cleanup or cost management workflows.",
      "description_length": 513,
      "index": 1883,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FleetEventType",
      "library": "aws-ec2",
      "description": "This module defines a sum type representing event types for EC2 fleets, including instance changes, fleet changes, and service errors. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, XML, and query parameters. These functions are used to process and transmit fleet event data in AWS integrations.",
      "description_length": 370,
      "index": 1884,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayVpcAttachmentResult",
      "library": "aws-ec2",
      "description": "This module handles the result of deleting a transit gateway VPC attachment. It provides constructors, JSON and XML parsers, and query builders for working with the optional `TransitGatewayVpcAttachment` data structure. Use it when managing AWS EC2 transit gateway detachments and processing their responses in JSON, XML, or query formats.",
      "description_length": 339,
      "index": 1885,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.InstanceSpecification",
      "library": "aws-ec2",
      "description": "This module defines a data structure for specifying EC2 instance parameters, including optional instance ID and a flag to exclude the boot volume. It provides functions to construct, serialize, and deserialize these specifications for use in API requests and responses. Concrete use cases include configuring instance termination or snapshot settings in EC2 operations.",
      "description_length": 369,
      "index": 1886,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.GroupIdentifierSet",
      "library": "aws-ec2",
      "description": "Handles parsing, querying, and serializing lists of security group identifiers. Works with XML nodes, JSON values, and AWS query parameters. Used to convert between EC2 security group data in different formats during API requests and responses.",
      "description_length": 244,
      "index": 1887,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.StartVpcEndpointServicePrivateDnsVerificationRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for initiating private DNS verification for a VPC endpoint service, including fields for dry-run mode and service ID. It provides functions to construct, parse, and serialize the request for use with AWS EC2 API operations. The module is used when configuring or automating VPC endpoint service DNS settings through the AWS SDK for OCaml.",
      "description_length": 378,
      "index": 1888,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PermissionGroup",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with a single value `All`, representing a permission group in AWS EC2. It includes functions to convert between strings and the `t` type, along with standard serialization and parsing functions for XML, JSON, and query parameters. It is used to specify and handle EC2 security group permissions in API requests and responses.",
      "description_length": 374,
      "index": 1889,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.HostOffering",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing EC2 host offerings, including fields like currency code, duration, pricing, and instance family. It provides functions to construct, parse, and convert these offerings to and from JSON and query formats. Concrete use cases include processing EC2 offering data from AWS API responses and building requests for purchasing dedicated hosts.",
      "description_length": 390,
      "index": 1890,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RunInstancesRequest",
      "library": "aws-ec2",
      "description": "This module defines the configuration for launching EC2 instances, including properties like instance type, networking, storage, and security settings. It supports operations to construct, serialize, and parse instance launch requests in JSON, query string, and XML formats. Concrete use cases include programmatically starting EC2 instances with custom configurations from an OCaml application.",
      "description_length": 395,
      "index": 1891,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.CancelSpotFleetRequestsErrorItem",
      "library": "aws-ec2",
      "description": "This module handles individual error items when canceling spot fleet requests in AWS EC2. It provides constructors, JSON and XML parsers, and query builders for working with error responses that include an error code and associated spot fleet request ID. It is used to process and serialize errors returned from the AWS API when managing spot fleet instances.",
      "description_length": 359,
      "index": 1892,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.MonitorInstancesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of monitoring EC2 instances, primarily storing a list of instance monitoring data. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this when processing responses from EC2 monitoring operations, especially when retrieving the monitoring status of multiple instances.",
      "description_length": 360,
      "index": 1893,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.LaunchTemplateLicenseConfigurationRequest",
      "library": "aws-ec2",
      "description": "This module defines a single data type representing a license configuration request for an EC2 launch template, containing an optional ARN for a license configuration. It provides functions to construct, parse, and convert the data structure to and from XML, JSON, and query formats. This module is used when configuring EC2 instances to associate license configurations during instance launch.",
      "description_length": 394,
      "index": 1894,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ImportInstanceTaskDetails",
      "library": "aws-ec2",
      "description": "This module defines a data structure for tracking details of an EC2 import instance task, including optional description, instance ID, platform, and a set of volume details. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, primarily used when managing instance imports from virtual machine images. The module is useful for interacting with AWS EC2 import workflows, particularly when handling task metadata and volume mappings during instance migration processes.",
      "description_length": 514,
      "index": 1895,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeSpotFleetRequestsResponse",
      "library": "aws-ec2",
      "description": "Handles responses from EC2 Spot Fleet request descriptions, providing functions to construct, serialize, and parse results containing fleet configurations and pagination tokens. Works with XML, JSON, and AWS query formats to manage Spot Fleet request data returned by the EC2 API. Used when retrieving and processing the status and configuration of Spot Fleets in AWS environments.",
      "description_length": 381,
      "index": 1896,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.ExportTransitGatewayRoutesResult",
      "library": "aws-ec2",
      "description": "This module handles the result of exporting transit gateway routes, primarily working with an optional S3 location string. It provides functions to construct, parse, and convert the result to various formats like JSON and query parameters. Use this to manage route export outputs in EC2 transit gateways, particularly when retrieving or processing S3-stored route data.",
      "description_length": 369,
      "index": 1897,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.CopyTagsFromSource",
      "library": "aws-ec2",
      "description": "This module defines a single enumerated type `t` with the value `Volume`, representing the source from which tags are copied in EC2 operations. It provides bidirectional conversions between strings and the enumerated type, including functions to parse, serialize, and format values for queries and JSON. This module is used when configuring EC2 volume creation to specify that tags should be copied from the source volume.",
      "description_length": 422,
      "index": 1898,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RemovePrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles the manipulation of prefix list entries for EC2 operations, specifically supporting serialization and deserialization of entry lists. It works with lists of `RemovePrefixListEntry.t` structures, enabling conversion to and from JSON, query parameters, and XML. It is used when modifying or updating prefix lists in EC2 by removing specific entries.",
      "description_length": 367,
      "index": 1899,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.AvailabilityZoneOptInStatus",
      "library": "aws-ec2",
      "description": "This module defines an enumerated type representing the opt-in status of an availability zone, with values for when opt-in is not required, already opted in, or not opted in. It provides bidirectional conversions between strings and the enumerated type, along with serialization and deserialization functions for JSON and XML formats. It is used to handle availability zone opt-in states in API requests and responses, particularly when interacting with AWS EC2 services.",
      "description_length": 471,
      "index": 1900,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.SubnetIdStringList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 subnet IDs represented as strings. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with AWS EC2 operations that require multiple subnet IDs, such as describing or filtering subnets.",
      "description_length": 309,
      "index": 1901,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.UnsuccessfulItem",
      "library": "aws-ec2",
      "description": "This module defines a data structure for handling unsuccessful item responses in EC2 operations, including fields for error details and resource identifiers. It provides functions to construct, parse, and convert these structures to and from XML, JSON, and query formats. Concrete use cases include processing batch operation failures and extracting error information for specific resources in EC2 API responses.",
      "description_length": 412,
      "index": 1902,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DescribeReservedInstancesListingsRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for querying reserved instance listings in EC2, supporting filtering by attributes, reserved instance ID, or listing ID. It includes functions to construct, parse, and serialize the request for use with AWS API operations. The module is used when retrieving information about specific reserved instance offerings or their marketplace listings.",
      "description_length": 383,
      "index": 1903,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.PrefixListAssociation",
      "library": "aws-ec2",
      "description": "This module defines a data structure for representing prefix list associations in AWS EC2, with optional resource ID and owner fields. It provides functions to construct, parse, and convert these associations to and from JSON and query formats. Use this module when managing VPC prefix lists that reference external resources, such as shared prefix lists from other accounts.",
      "description_length": 375,
      "index": 1904,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.FailedQueuedPurchaseDeletion",
      "library": "aws-ec2",
      "description": "This module defines a data structure representing the result of a failed attempt to delete a queued Reserved Instance purchase in EC2. It includes fields for an error description and the ID of the affected Reserved Instance, along with functions to construct, parse, and serialize the data for API interactions. It is used when handling responses from the EC2 API related to Reserved Instance management operations.",
      "description_length": 415,
      "index": 1905,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RevokeClientVpnIngressResult",
      "library": "aws-ec2",
      "description": "This module handles the result of revoking client VPN ingress rules, primarily working with the `t` type that includes an optional authorization rule status. It provides functions to construct, parse, and serialize this result for use in API responses or further processing. Concrete use cases include handling AWS EC2 API responses when managing client VPN access and converting rule status data for logging or monitoring.",
      "description_length": 423,
      "index": 1906,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.DeleteTransitGatewayRouteTableRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting a transit gateway route table, including its ID and an optional dry-run flag. It provides functions to construct, parse, and serialize the request for use with AWS EC2 operations. The module is used when managing virtual networking configurations in AWS environments.",
      "description_length": 320,
      "index": 1907,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.AllocationStrategy",
      "library": "aws-ec2",
      "description": "This module defines an enumeration type `t` representing allocation strategies for EC2 instances, with variants for price-based, diversified, and capacity-optimized selection. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON, XML, and query parameters. It is used when configuring EC2 auto-scaling or spot instance fleets where specific allocation logic is required.",
      "description_length": 459,
      "index": 1908,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.TargetConfiguration",
      "library": "aws-ec2",
      "description": "This module defines a target configuration structure with optional instance count and offering ID fields. It provides functions to construct, parse, and convert configurations to and from XML, JSON, and query formats. It is used to specify parameters for EC2 instance purchasing options in API requests.",
      "description_length": 303,
      "index": 1909,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.Phase1EncryptionAlgorithmsList",
      "library": "aws-ec2",
      "description": "This module handles the serialization, deserialization, and parsing of a list of Phase 1 encryption algorithm values used in EC2 VPN connections. It provides functions to convert between XML, JSON, and internal OCaml representations of these algorithms. Use this module when configuring or retrieving encryption settings for EC2 virtual private gateways or customer gateways.",
      "description_length": 375,
      "index": 1910,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.Types.DeleteFpgaImageRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for deleting an FPGA image, including a dry run flag and the image ID. It provides functions to construct, parse, and convert the request to query or JSON formats. Use this when interacting with EC2 to delete FPGA images programmatically, especially when confirming deletion impact via dry run.",
      "description_length": 334,
      "index": 1911,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.WithdrawByoipCidrRequest",
      "library": "aws-ec2",
      "description": "This module defines a request structure for withdrawing a BYOIP CIDR block, including the CIDR string and an optional dry-run flag. It provides functions to create, parse, and convert the request to query parameters or JSON format, as well as to construct the request from JSON input. It is used when interacting with AWS EC2 to manage IP address withdrawals programmatically.",
      "description_length": 376,
      "index": 1912,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types.RequestInstanceTypeList",
      "library": "aws-ec2",
      "description": "This module handles lists of EC2 instance types, providing operations to convert, parse, and serialize them for API requests. It works with XML nodes, JSON values, and query parameters, enabling direct interaction with AWS EC2 APIs. Use this module when constructing or processing batch instance type data in AWS SDK workflows.",
      "description_length": 327,
      "index": 1913,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReleaseAddress",
      "library": "aws-ec2",
      "description": "This module handles the release of an Elastic IP address in AWS EC2 by defining the request structure, encoding it into an HTTP query, and sending it to the appropriate endpoint. It works with the `ReleaseAddressRequest` type to specify which address to release and returns no output on success. Concrete use cases include deallocating unused public IP addresses and managing EC2 instance networking resources programmatically.",
      "description_length": 427,
      "index": 1914,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles replacing routes in an AWS EC2 transit gateway. It provides functions to convert native input types to HTTP requests and parse HTTP responses into output or error types. It works directly with transit gateway route replacement requests and responses, handling query encoding and decoding. Use this module when modifying existing routes in a transit gateway by specifying destination CIDR blocks and new next-hop attachments.",
      "description_length": 444,
      "index": 1915,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteRoute",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 DeleteRoute API operation, handling the deletion of a route from a route table. It works with the `DeleteRouteRequest` type for input, produces no output on success, and processes errors defined in `Errors_internal`. Concrete use cases include removing specific routes to control network traffic in virtual private clouds or automating route table cleanup during infrastructure teardown.",
      "description_length": 422,
      "index": 1916,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ReleaseHosts",
      "library": "aws-ec2",
      "description": "This module handles the release of dedicated hosts in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `ReleaseHostsRequest` and `ReleaseHostsResult` types, encoding and decoding them according to the EC2 API specification. Concrete use cases include releasing unused dedicated hosts and handling API-specific errors during host release operations.",
      "description_length": 453,
      "index": 1917,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteCarrierGateway",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 DeleteCarrierGateway API operation. It handles request signing, HTTP conversion, and response parsing for deleting a carrier gateway, working with the input, output, and error types defined in the Aws_ec2.Types module. It is used to interact directly with the EC2 service for carrier gateway management tasks.",
      "description_length": 344,
      "index": 1918,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeLaunchTemplates",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication for describing EC2 launch templates. It converts input requests into properly signed HTTP queries and decodes responses into structured results or errors. It works directly with launch template request and response types, enabling retrieval of template details from EC2.",
      "description_length": 313,
      "index": 1919,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RejectVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles the rejection of VPC endpoint connections in AWS EC2 by providing functions to construct and process the associated API requests and responses. It works with input and output types specific to the `RejectVpcEndpointConnections` operation, along with error handling tailored to the EC2 service. Use this module to programmatically decline connection requests to VPC endpoints, such as when managing access to private services within a VPC.",
      "description_length": 458,
      "index": 1920,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ProvisionByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the provisioning of Bring Your Own IP (BYOIP) CIDR blocks in AWS EC2. It works with CIDR request and result types, along with internal EC2 error types, to enable users to allocate and manage public IP address ranges. Concrete use cases include submitting BYOIP provisioning requests and parsing their responses or errors.",
      "description_length": 341,
      "index": 1921,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetAssociatedEnclaveCertificateIamRoles",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of IAM roles associated with an EC2 instance's enclave certificate. It provides functions to convert input parameters to an HTTP request and parse responses or errors from AWS, specifically for the `GetAssociatedEnclaveCertificateIamRoles` API call. It works with EC2 instance identifiers to enable secure role-based access control for enclave operations.",
      "description_length": 389,
      "index": 1922,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesOfferings",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 reserved instances offerings requests to HTTP format and parses responses or errors from the service. It works with input and output types specific to describing reserved instances offerings, along with internal error types. It is used to interact directly with the EC2 API for querying available reserved instance offerings, including encoding requests and decoding results or handling failure responses.",
      "description_length": 447,
      "index": 1923,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module disables default EBS encryption for new volumes in EC2. It sends a query-formatted HTTP request to the EC2 service, using AWS request signing, and handles responses by decoding them into either a result or an error. The module works directly with EC2's DisableEbsEncryptionByDefault request and response types, and is used when managing volume encryption settings at the infrastructure level.",
      "description_length": 404,
      "index": 1924,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Errors_internal",
      "library": "aws-ec2",
      "description": "This module defines a comprehensive set of error codes specific to EC2 service interactions, along with utilities to convert these errors to HTTP status codes, string representations, and parsing from strings. It works directly with string and integer types for error handling and status mapping. Concrete use cases include translating EC2 API error responses into structured values for logging, debugging, or triggering retry logic based on specific error conditions like rate limiting or authentication failures.",
      "description_length": 514,
      "index": 1925,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceNetworkAclAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing network ACL associations in EC2 by converting native input types to properly signed HTTP requests and parsing responses into output or error types. It works directly with EC2-specific request and response structures, including network ACL IDs and association tokens. Concrete use cases include updating which network ACL is associated with a specific subnet during infrastructure automation or network reconfiguration tasks.",
      "description_length": 454,
      "index": 1926,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 Client VPN endpoint by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with the `DeleteClientVpnEndpointRequest` and `DeleteClientVpnEndpointResult` types, and handles errors specific to the EC2 service. It is used to send a properly signed HTTP request to delete a Client VPN endpoint and process the result or any associated errors.",
      "description_length": 471,
      "index": 1927,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AttachVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the attachment of a virtual private gateway to a VPC in AWS EC2. It provides functions to construct HTTP requests from attachment parameters and parse responses or errors from the service. The module works directly with EC2-specific request and response types, such as `AttachVpnGatewayRequest.t` and `AttachVpnGatewayResult.t`, and handles error decoding based on service responses.",
      "description_length": 403,
      "index": 1928,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module handles the deletion of managed prefix lists in EC2 by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with `DeleteManagedPrefixListRequest` and `DeleteManagedPrefixListResult` structures, encoding and decoding them for HTTP transmission. Use this module when programmatically removing managed prefix lists, ensuring proper request signing and response parsing.",
      "description_length": 472,
      "index": 1929,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module configures VPC endpoint services by modifying their settings, such as acceptance requirements and associated load balancers. It works with structured input and output types representing configuration requests and results, along with error types for handling failures. Concrete use cases include enabling private connectivity for services by updating endpoint service policies or load balancer associations.",
      "description_length": 418,
      "index": 1930,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateInstanceExportTask",
      "library": "aws-ec2",
      "description": "This module handles creating and managing EC2 instance export tasks by converting input requests to signed HTTP queries and parsing responses. It works with EC2-specific input and output types, including export task configurations and results. Concrete use cases include initiating instance exports to S3 and handling the corresponding AWS API responses and errors.",
      "description_length": 365,
      "index": 1931,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ResetEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles resetting the default KMS key ID for EBS encryption in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically for the `ResetEbsDefaultKmsKeyId` operation. It works with EC2-specific request, response, and error types defined in `Aws_ec2.Types`.",
      "description_length": 349,
      "index": 1932,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnRoutes",
      "library": "aws-ec2",
      "description": "This module handles describing routes associated with an EC2 Client VPN endpoint by sending a query request and parsing the response. It works with `DescribeClientVpnRoutesRequest` and `DescribeClientVpnRoutesResult` types, along with internal error types for handling failures. It is used to retrieve route information for a specific Client VPN endpoint, including details like target subnets and route status.",
      "description_length": 411,
      "index": 1933,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribePrefixLists",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 prefix list descriptions between native OCaml types and HTTP requests/responses. It works with input type `DescribePrefixListsRequest.t` and output type `DescribePrefixListsResult.t`, encoding and decoding them for AWS API communication. It is used to query AWS EC2 for information about managed prefix lists, typically to retrieve metadata like prefix list IDs, names, or available CIDR blocks.",
      "description_length": 437,
      "index": 1934,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve flow log information, converting input parameters into an HTTP request and parsing the response or errors. It works with structured types for flow log requests and results, along with internal error types for failure handling. Use this when querying AWS EC2 to list existing flow logs for network traffic monitoring.",
      "description_length": 365,
      "index": 1935,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelExportTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an EC2 export task by defining the request structure, converting it to an HTTP request, and parsing responses or errors. It works directly with the `CancelExportTaskRequest` type for input and returns no output on success, using internal EC2 error types for failure cases. It is used to stop an ongoing export task in AWS EC2, ensuring the request is properly signed and sent to the correct service endpoint.",
      "description_length": 448,
      "index": 1936,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnTunnelOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying options for a specific AWS EC2 VPN tunnel by converting native input into an HTTP request and parsing the corresponding response or error. It works directly with `ModifyVpnTunnelOptionsRequest` and `ModifyVpnTunnelOptionsResult` types, along with internal EC2 error types. It is used to update tunnel-specific settings such as pre-shared keys, tunnel options, and logging preferences when managing Site-to-Site VPN connections.",
      "description_length": 457,
      "index": 1937,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesModifications",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 reserved instances modification requests to and from HTTP format, encoding inputs into properly structured HTTP requests with the correct query parameters and decoding responses into outputs or errors. It works directly with EC2-specific request and response types, including `DescribeReservedInstancesModificationsRequest`, `DescribeReservedInstancesModificationsResult`, and internal error types. It is used to interact with the EC2 API for managing reserved instance modifications, such as retrieving the status and details of pending modifications.",
      "description_length": 594,
      "index": 1938,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 traffic mirror filter rules by providing functions to construct HTTP requests and parse responses specific to the `ModifyTrafficMirrorFilterRule` API call. It works with input and output types defined in the `Aws_ec2.Types` module, along with internal error types for handling failures. It is used when adjusting rule properties such as rule number, action, or traffic direction in a traffic mirror filter.",
      "description_length": 440,
      "index": 1939,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyCapacityReservation",
      "library": "aws-ec2",
      "description": "This module modifies an existing EC2 capacity reservation by adjusting its instance count and end time. It works with `ModifyCapacityReservationRequest` and `ModifyCapacityReservationResult` types, encoding requests into HTTP calls and decoding responses. Use it to update capacity reservations programmatically, ensuring resources are reserved for specific instances as needed.",
      "description_length": 378,
      "index": 1940,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module handles disabling VPC classic link functionality by providing functions to construct and process AWS EC2 API requests and responses. It works with VPC identifiers and converts them to and from HTTP requests using query encoding, specifically targeting the DisableVpcClassicLink action. It is used when managing VPC connectivity settings in AWS EC2, particularly when transitioning away from EC2-Classic.",
      "description_length": 415,
      "index": 1941,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteEgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of egress-only internet gateways in EC2 by converting native inputs to HTTP requests and parsing HTTP responses into outputs or errors. It works with EC2-specific request and response types, including structured data for deletion results and internal error handling. Concrete use cases include removing unused egress-only internet gateways and verifying successful deletion through parsed responses.",
      "description_length": 432,
      "index": 1942,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of route tables from subnets in Amazon EC2. It provides functions to construct HTTP requests from native types, decode responses, and parse errors specific to the EC2 API. It works directly with route table and subnet identifiers to perform and interpret the disassociation operation.",
      "description_length": 323,
      "index": 1943,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreatePlacementGroup",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 placement groups by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including placement group configurations and result metadata. Use this module when programmatically setting up placement groups for low-latency network performance or cluster placement requirements in EC2.",
      "description_length": 463,
      "index": 1944,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkAcls",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve network ACL details by converting input parameters into an HTTP request and parsing the response. It works with `DescribeNetworkAclsRequest` for input, `DescribeNetworkAclsResult` for output, and `Errors_internal` for error handling. Use this module to fetch network ACL configurations for monitoring or managing VPC traffic rules programmatically.",
      "description_length": 397,
      "index": 1945,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ResetInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting specific attributes of an EC2 instance, such as the kernel or RAM disk. It works with the `ResetInstanceAttributeRequest` type to construct API calls and processes responses as unit or error types. Concrete use cases include modifying instance boot settings or correcting misconfigured instance attributes.",
      "description_length": 336,
      "index": 1946,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSecurityGroup",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 security groups by defining the request and response types for the AWS API call. It provides functions to convert native input into an HTTP request, parse HTTP responses into results or errors, and map AWS errors to specific failure conditions. Concrete use cases include setting up network isolation rules for EC2 instances and managing access control in cloud infrastructure deployments.",
      "description_length": 429,
      "index": 1947,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpointConnectionNotification",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoint connection notifications in AWS EC2. It provides functions to construct HTTP requests from input types, parse responses into output or error types, and decode AWS-specific errors into structured values. It works directly with EC2-specific request and response types, such as `CreateVpcEndpointConnectionNotificationRequest.t` and `CreateVpcEndpointConnectionNotificationResult.t`, and is used when configuring notifications for VPC endpoint connections.",
      "description_length": 502,
      "index": 1948,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles creating network interfaces in EC2 by defining the request and response types for the operation. It provides functions to convert requests to HTTP format, parse responses from HTTP, and map AWS errors to typed errors based on the status code. It works directly with EC2-specific input and output structures, such as `CreateNetworkInterfaceRequest.t` and `CreateNetworkInterfaceResult.t`. Use this module when provisioning network interfaces programmatically, handling their creation response, or managing error states specific to that operation.",
      "description_length": 565,
      "index": 1949,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSecurityGroupReferences",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 security group reference descriptions between native OCaml types and HTTP requests/responses. It works with `DescribeSecurityGroupReferencesRequest` and `DescribeSecurityGroupReferencesResult` types, enabling interaction with the EC2 service. It is used to send requests to AWS EC2 to retrieve security group reference data and process the corresponding HTTP responses or errors.",
      "description_length": 421,
      "index": 1950,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Traffic Mirror filters by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `DeleteTrafficMirrorFilterRequest` and `DeleteTrafficMirrorFilterResult` data structures, encoding and decoding them according to the EC2 API specification. Concrete use cases include issuing delete commands for Traffic Mirror filters and processing the resulting API responses or errors.",
      "description_length": 501,
      "index": 1951,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeScheduledInstanceAvailability",
      "library": "aws-ec2",
      "description": "This module handles the low-level details of making and parsing AWS EC2 API requests to describe scheduled instance availability. It works directly with input and output types specific to the EC2 service, converting between native OCaml structures and HTTP requests/responses. Concrete use cases include querying available scheduled EC2 instances and handling the corresponding API responses and errors.",
      "description_length": 403,
      "index": 1952,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayMulticastDomainAssociations",
      "library": "aws-ec2",
      "description": "This module handles retrieving associations for an EC2 Transit Gateway Multicast Domain. It provides functions to convert input data into an HTTP request and parse HTTP responses into output or errors. It works directly with Transit Gateway Multicast Domain association requests and responses, handling query encoding and decoding, error parsing, and request signing specific to the EC2 service.",
      "description_length": 395,
      "index": 1953,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module handles the deletion of AWS EC2 Traffic Mirror Targets by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `DeleteTrafficMirrorTargetRequest` and `DeleteTrafficMirrorTargetResult` structures, encoding requests into HTTP format and decoding responses. Concrete use cases include removing Traffic Mirror targets in network monitoring setups and handling associated AWS API errors during deletion.",
      "description_length": 499,
      "index": 1954,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceIamInstanceProfileAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing an IAM instance profile associated with an EC2 instance. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically working with IAM instance profile association requests and results. It is used when changing the IAM role attached to a running EC2 instance.",
      "description_length": 353,
      "index": 1955,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module handles the creation of managed prefix lists in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including prefix list entries and metadata. It is used when programmatically setting up network access controls in AWS VPC environments.",
      "description_length": 392,
      "index": 1956,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module creates a Client VPN endpoint in AWS EC2 by sending a signed HTTP request with the provided configuration. It encodes a `CreateClientVpnEndpointRequest.t` input into a properly formatted query request and sends it to the EC2 service endpoint. The response is decoded into either a `CreateClientVpnEndpointResult.t` or an appropriate error, enabling direct integration with AWS's API for provisioning secure client access to VPC resources.",
      "description_length": 450,
      "index": 1957,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetReservedInstancesExchangeQuote",
      "library": "aws-ec2",
      "description": "This module handles the conversion and parsing of requests and responses for retrieving Reserved Instances exchange quotes in AWS EC2. It works with input and output types specific to the GetReservedInstancesExchangeQuote operation, including encoded query parameters and XML responses. Concrete use cases include submitting exchange quote requests, decoding returned results, and handling service-specific errors during instance exchanges.",
      "description_length": 440,
      "index": 1958,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSecurityGroup",
      "library": "aws-ec2",
      "description": "This module deletes an EC2 security group by sending a properly signed HTTP request to the AWS EC2 service. It handles the conversion of a native `DeleteSecurityGroupRequest` input into an HTTP request and decodes the response into either a success result or an error specific to the delete operation. It also parses AWS service errors into typed responses based on the provided HTTP status code and error message.",
      "description_length": 414,
      "index": 1959,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of EC2 capacity reservations by providing functions to construct and process HTTP requests and responses. It works with input and output types specific to the `CancelCapacityReservation` operation, along with error handling tailored to this call. Concrete use cases include sending cancellation requests to AWS EC2 and parsing the results or errors returned by the service.",
      "description_length": 410,
      "index": 1960,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayRouteTables",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 transit gateway route tables by converting input requests to HTTP format and parsing HTTP responses into output or errors. It works with input and output types defined in `Aws_ec2.Types` for transit gateway route table descriptions, along with internal error types for handling failures. Concrete use cases include querying route table details for a specific transit gateway and handling paginated results from AWS EC2.",
      "description_length": 458,
      "index": 1961,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServicePermissions",
      "library": "aws-ec2",
      "description": "This module handles describing permissions for VPC endpoint services in AWS EC2. It works with input and output types specific to the `DescribeVpcEndpointServicePermissions` operation, including request parameters and result data. Use this module to retrieve information about which principals (such as AWS accounts or organizations) are allowed to use a specific VPC endpoint service.",
      "description_length": 385,
      "index": 1962,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SendDiagnosticInterrupt",
      "library": "aws-ec2",
      "description": "This module sends a diagnostic interrupt to a specified EC2 instance, triggering a crash dump or other diagnostic action defined by the instance's configuration. It works with EC2 instance identifiers and handles low-level request signing, HTTP conversion, and error parsing specific to the EC2 API. Use this module when implementing automated diagnostics or monitoring tools that require direct interaction with EC2 instances during failure scenarios.",
      "description_length": 452,
      "index": 1963,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyIdentityIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the modification of identity ID formats in EC2 by sending a query-formatted HTTP request with an action and version, encoding input parameters for the EC2 API. It works directly with the `ModifyIdentityIdFormatRequest` type to configure identity ID formatting for resources like instances or volumes. It is used when ensuring resource IDs follow a specific format, such as enabling or disabling longer ID formats for improved uniqueness.",
      "description_length": 457,
      "index": 1964,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLaunchTemplateVersion",
      "library": "aws-ec2",
      "description": "This module creates a new version of an EC2 launch template by sending a signed HTTP request to the EC2 service. It encodes input parameters into a query string and handles response parsing, including error decoding based on HTTP status and XML content. It works directly with EC2 launch template version requests and responses, targeting use cases like infrastructure automation and template management.",
      "description_length": 404,
      "index": 1965,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module handles creating and managing client VPN routes in EC2 by converting input requests to signed HTTP queries and parsing responses or errors from the service. It works directly with EC2's `CreateClientVpnRouteRequest` and `CreateClientVpnRouteResult` types, along with internal error types for handling failures. Concrete use cases include submitting route creation requests, decoding their responses, and handling specific AWS service errors like invalid parameters or duplicate routes.",
      "description_length": 497,
      "index": 1966,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLaunchTemplateVersions",
      "library": "aws-ec2",
      "description": "This module handles describing versions of an EC2 launch template by converting input requests into signed HTTP queries and parsing the responses. It works with launch template version data through input and output types that specify version numbers, launch template IDs, and associated metadata. Concrete use cases include retrieving specific launch template configurations for auditing, version comparison, or deployment validation.",
      "description_length": 434,
      "index": 1967,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointConnectionNotifications",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint connection notifications in AWS EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the EC2 service, including encoded query parameters and XML error handling. It is used to query and manage VPC endpoint connection notification configurations programmatically.",
      "description_length": 372,
      "index": 1968,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeMovingAddresses",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation for describing moving addresses, specifically converting input and output between native OCaml types and HTTP requests/responses. It works with `DescribeMovingAddressesRequest` and `DescribeMovingAddressesResult` types, along with internal error types for handling failures. It is used to query information about elastic IP addresses that are being moved between AWS accounts or VPCs.",
      "description_length": 426,
      "index": 1969,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles describing an EC2 Spot Datafeed subscription by converting native inputs to HTTP requests and parsing responses. It works with input and output types specific to the Spot Datafeed subscription description, along with error types for handling failures. It is used to retrieve information about the Spot Instance datafeed, including its state, bucket, and prefix.",
      "description_length": 381,
      "index": 1970,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnTargetNetworks",
      "library": "aws-ec2",
      "description": "This module handles describing target networks associated with a Client VPN endpoint in EC2. It provides functions to convert input data into a properly signed HTTP request and to parse the resulting HTTP response into either a success result or an error. The module works directly with AWS EC2's `DescribeClientVpnTargetNetworksRequest` and `DescribeClientVpnTargetNetworksResult` types, making it suitable for retrieving information about VPC attachments and network configurations tied to a specific Client VPN.",
      "description_length": 514,
      "index": 1971,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles modifying attributes of an FPGA image in EC2, specifically supporting operations to set permissions and descriptions. It works with EC2-specific types for FPGA image attribute modification requests and responses, along with internal error types for handling failures. Concrete use cases include updating user permissions for shared FPGA images and changing metadata associated with an FPGA image.",
      "description_length": 416,
      "index": 1972,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles associating DHCP options with a VPC in AWS EC2. It provides functions to convert native requests to HTTP format and parse responses or errors from the service. It works directly with `AssociateDhcpOptionsRequest` and returns no output on success, using standard EC2 error types for failures.",
      "description_length": 311,
      "index": 1973,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyImageAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 image, such as launch permissions, using a structured request type that specifies the image ID and desired attribute changes. It encodes these requests into signed HTTP queries for the EC2 service and decodes responses, handling both success and error cases. Use this module to programmatically adjust image visibility or permissions in AWS environments.",
      "description_length": 396,
      "index": 1974,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateDefaultVpc",
      "library": "aws-ec2",
      "description": "This module creates a default VPC with a specified CIDR block and tags in a given AWS region. It handles the serialization and deserialization of HTTP requests and responses, specifically encoding input parameters into a query string and decoding XML responses into structured output or error types. It is used when setting up isolated network environments programmatically as part of infrastructure provisioning workflows.",
      "description_length": 423,
      "index": 1975,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles associating a transit gateway route table with a transit gateway attachment in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically for this association operation. The module works with transit gateway route table request and result types, targeting use cases such as managing route propagation and attachment associations in EC2 networking.",
      "description_length": 448,
      "index": 1976,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 VPN connections by converting input requests into HTTP queries and parsing responses. It works with `DescribeVpnConnectionsRequest` and `DescribeVpnConnectionsResult` types to retrieve and decode VPN connection data from EC2. Concrete use cases include querying the status and configuration of existing VPN connections and handling EC2 API responses for monitoring or automation workflows.",
      "description_length": 428,
      "index": 1977,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 network interfaces by converting deletion requests into properly signed HTTP requests and processing responses. It works with `DeleteNetworkInterfaceRequest` input, returns no output on success, and handles EC2-specific errors. Concrete use cases include removing unused network interfaces programmatically and ensuring proper cleanup of network resources in automated infrastructure workflows.",
      "description_length": 434,
      "index": 1978,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module handles the conversion between native OCaml types and HTTP requests/responses for querying EC2 instance event notification attributes. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DescribeInstanceEventNotificationAttributesRequest` and `DescribeInstanceEventNotificationAttributesResult`. It is used to send a query to AWS EC2 to retrieve event notification settings, such as whether notifications are enabled for specific event types and targets like SSM.",
      "description_length": 513,
      "index": 1979,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RequestSpotFleet",
      "library": "aws-ec2",
      "description": "This module handles the creation and processing of spot fleet requests in EC2. It converts native input types to properly signed HTTP requests and decodes responses into either success outputs or specific AWS errors. It is used to programmatically request spot fleets with custom configurations and handle the resulting API responses.",
      "description_length": 334,
      "index": 1980,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles creating a VPC attachment for an EC2 Transit Gateway by defining the request and response data structures, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with VPC and Transit Gateway identifiers, subnet lists, and associated metadata. Use this module when programmatically linking a VPC to a Transit Gateway, including specifying subnets and tagging the attachment.",
      "description_length": 439,
      "index": 1981,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles the low-level HTTP communication for querying AWS EC2 Client VPN connections. It translates input requests into properly signed HTTP queries and decodes responses into structured results or specific error types. It is used to retrieve runtime connection details for Client VPN endpoints, such as active sessions and client IP information.",
      "description_length": 358,
      "index": 1982,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles creating capacity reservations in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including error responses. Concrete use cases include making signed API calls to create capacity reservations and handling the resulting responses or errors.",
      "description_length": 407,
      "index": 1983,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssignPrivateIpAddresses",
      "library": "aws-ec2",
      "description": "This module handles assigning private IP addresses to EC2 network interfaces by encoding requests into properly formatted HTTP queries and decoding responses. It works with EC2-specific request and response types, including private IP assignment parameters and result data. Concrete use cases include programmatically managing IP address allocations for EC2 instances, such as adding secondary private IPs to network interfaces for load balancing or network isolation scenarios.",
      "description_length": 478,
      "index": 1984,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateKeyPair",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 key pairs by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateKeyPairRequest` and `KeyPair` data structures, encoding and decoding them according to the EC2 API specification. It is used when provisioning new EC2 instances with SSH access, ensuring secure authentication via generated key pairs.",
      "description_length": 440,
      "index": 1985,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyAvailabilityZoneGroup",
      "library": "aws-ec2",
      "description": "This module handles modifying an Availability Zone group in EC2 by sending a signed HTTP request to the EC2 service. It works with input and output types specific to the ModifyAvailabilityZoneGroup operation, including request parameters and result data. Use this module to enable or disable partition placement for an Availability Zone group, targeting specific EC2 infrastructure configurations.",
      "description_length": 397,
      "index": 1986,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing attributes of a VPC in EC2 by converting input requests to HTTP format and parsing responses. It works with VPC attribute request and result types, along with internal EC2 error types. It is used to query specific VPC properties like DNS support or hostname resolution settings via the EC2 API.",
      "description_length": 325,
      "index": 1987,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of EBS encryption defaults in EC2 by converting input requests to HTTP format, sending them to the appropriate service endpoint, and parsing the responses into structured output or error types. It works directly with `GetEbsEncryptionByDefaultRequest` and `GetEbsEncryptionByDefaultResult` types, along with internal error types for handling failures. It is used when querying whether EBS encryption is enabled by default in a specific AWS region.",
      "description_length": 481,
      "index": 1988,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeByoipCidrs",
      "library": "aws-ec2",
      "description": "This module handles the conversion of BYOIP CIDR description requests to HTTP requests and responses, specifically encoding inputs into query parameters and decoding outputs or errors from XML. It works with input and output types defined in `Aws_ec2.Types` and internal EC2 errors. It is used to interact with the EC2 API to describe BYOIP CIDR ranges, including handling request signing and endpoint determination.",
      "description_length": 416,
      "index": 1989,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RunScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles running scheduled EC2 instances by providing functions to construct HTTP requests and parse responses for the corresponding AWS API call. It works with input and output types specific to the `RunScheduledInstances` operation, along with error handling tailored to the possible API responses. Concrete use cases include initiating scheduled instance launches and integrating with AWS request signing and endpoint routing.",
      "description_length": 440,
      "index": 1990,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AuthorizeClientVpnIngress",
      "library": "aws-ec2",
      "description": "This module handles authorization of client VPN ingress rules in EC2 by sending and processing HTTP requests to the AWS API. It works with input and output types specific to the `AuthorizeClientVpnIngress` operation, along with internal error types for handling failures. It is used to programmatically allow traffic into a Client VPN endpoint by specifying CIDR ranges and user groups.",
      "description_length": 386,
      "index": 1991,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ResetImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting specific attributes of an EC2 image, such as launch permissions, by making direct AWS API calls. It works with the `ResetImageAttributeRequest` type to specify which image and attribute to modify, and returns no output on success. It is used when managing EC2 image permissions programmatically, such as removing specific user access to a shared AMI.",
      "description_length": 380,
      "index": 1992,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateImage",
      "library": "aws-ec2",
      "description": "This module handles creating Amazon Machine Images (AMIs) from EC2 instances. It provides functions to construct HTTP requests for image creation, parse responses into structured results, and decode potential errors. It works directly with EC2 instance configurations and image metadata to enable snapshot-based image creation workflows.",
      "description_length": 337,
      "index": 1993,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetInstances",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication for querying instances in a Spot Fleet request. It translates between native OCaml types and HTTP requests/responses, specifically encoding input into query parameters and decoding responses or errors from AWS. It is used to retrieve information about the instances launched by a Spot Fleet, such as their instance IDs and current states.",
      "description_length": 381,
      "index": 1994,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetManagedPrefixListAssociations",
      "library": "aws-ec2",
      "description": "This module handles retrieving associations for managed prefix lists in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `GetManagedPrefixListAssociations` API call, along with internal error types. It is used when querying AWS EC2 to find which resources are associated with a specific managed prefix list.",
      "description_length": 382,
      "index": 1995,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTables",
      "library": "aws-ec2",
      "description": "This module handles describing local gateway route tables in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeLocalGatewayRouteTables` operation, along with error types defined in `Aws_ec2.Errors_internal`. Use this module to query metadata about local gateway route tables, such as their IDs and associated VPCs, as part of network management workflows.",
      "description_length": 438,
      "index": 1996,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC peering connections in AWS EC2 by converting native input types into properly signed HTTP requests and parsing responses into result or error types. It works directly with `DeleteVpcPeeringConnectionRequest` and `DeleteVpcPeeringConnectionResult` data structures, along with internal EC2 error types. Use this module to programmatically remove existing VPC peering connections by providing the connection ID and handling the result or error response.",
      "description_length": 490,
      "index": 1997,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpoint",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing VPC endpoint in AWS EC2 by converting native requests into properly signed HTTP queries and parsing responses or errors from the service. It works directly with `ModifyVpcEndpointRequest` and `ModifyVpcEndpointResult` types, along with internal error types for handling failures. Concrete use cases include enabling or disabling private DNS, updating policy documents, or modifying route tables associated with a VPC endpoint.",
      "description_length": 468,
      "index": 1998,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AuthorizeSecurityGroupEgress",
      "library": "aws-ec2",
      "description": "This module handles the authorization of egress rules for EC2 security groups by converting native input into HTTP requests and parsing responses. It works with `AuthorizeSecurityGroupEgressRequest` as input and returns no output on success, using internal EC2 error types for failure. Concrete use cases include modifying security group egress policies to allow outbound traffic based on IP ranges, protocols, and ports.",
      "description_length": 421,
      "index": 1999,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachClassicLinkVpc",
      "library": "aws-ec2",
      "description": "This module handles detaching a VPC from a classic link in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works with input type `DetachClassicLinkVpcRequest`, output type `DetachClassicLinkVpcResult`, and error type `DetachClassicLinkVpcError`. Use this module when managing VPC associations in EC2 to programmatically unlink a VPC from a classic EC2 instance.",
      "description_length": 442,
      "index": 2000,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RejectTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the rejection of transit gateway peering attachments in AWS EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, working with specific EC2 transit gateway types. It is used to manage peering connections between transit gateways by sending the appropriate API commands to AWS.",
      "description_length": 359,
      "index": 2001,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.UpdateSecurityGroupRuleDescriptionsIngress",
      "library": "aws-ec2",
      "description": "This module updates ingress rule descriptions for security groups in EC2 by sending an HTTP request with the specified rule details. It works with security group IDs and rule descriptions, encoding them into a query-formatted HTTP request for the EC2 service. A concrete use case is modifying the description of an inbound rule in a security group to reflect a configuration change, such as updating access policies for a set of instances.",
      "description_length": 439,
      "index": 2002,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module disables fast snapshot restores for specified snapshots in EC2. It handles requests via HTTP conversion, signing, and service endpoint configuration. It works with EC2 snapshot identifiers and processes responses into success or error states specific to the disable operation.",
      "description_length": 288,
      "index": 2003,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpointServiceConfigurations",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoint service configurations by defining the request and response types for the operation. It provides functions to convert native input to HTTP requests and parse HTTP responses into outputs or errors, specifically for removing VPC endpoint services. Use cases include programmatically cleaning up unused VPC endpoint services and automating infrastructure teardown workflows.",
      "description_length": 420,
      "index": 2004,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AdvertiseByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of advertising a BYOIP CIDR block in EC2. It works with input and output types defined in `Aws_ec2.Types`, along with internal error types, and provides functions to construct and parse HTTP requests and responses for this operation. It is used when integrating custom IP ranges into AWS by sending the appropriate API call to EC2.",
      "description_length": 374,
      "index": 2005,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayRouteTablePropagations",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of transit gateway route table propagations in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `GetTransitGatewayRouteTablePropagationsRequest` and `GetTransitGatewayRouteTablePropagationsResult`. Use this module to query route propagation details for a specific transit gateway route table, enabling network configuration validation and management.",
      "description_length": 433,
      "index": 2006,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFleets",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe fleets by converting input requests to HTTP format and parsing responses. It works with `DescribeFleetsRequest` and `DescribeFleetsResult` types to send and decode data from the AWS EC2 service. Use this module to retrieve detailed status and configuration information about EC2 fleets, such as their target capacity and instance launch specifications.",
      "description_length": 401,
      "index": 2007,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module handles creating EC2 launch templates by defining the request structure, response parsing, and error handling for the AWS API call. It works with input and output types specific to the `CreateLaunchTemplate` operation, including encoded query parameters and XML-parsed errors. Concrete use cases include submitting launch template configurations to AWS EC2 and processing the resulting API responses or errors.",
      "description_length": 422,
      "index": 2008,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module enables fast snapshot restores for EC2 instances by handling the request and response cycle with AWS. It works with EC2-specific input and output types, including snapshot restore requests and results, along with internal error types. Use this module to directly interact with the EC2 API for snapshot restore operations, such as enabling faster restoration of EBS snapshots for improved instance recovery times.",
      "description_length": 424,
      "index": 2009,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceRoute",
      "library": "aws-ec2",
      "description": "This module handles the replacement of a route in an AWS EC2 route table by converting a native request into an HTTP request and processing the response. It works directly with the `ReplaceRouteRequest` type for input and returns no output on success, using a custom error type for failure cases. Concrete use cases include updating routing rules to direct traffic through a new gateway or network interface in EC2 networking management workflows.",
      "description_length": 447,
      "index": 2010,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing attributes of EC2 snapshots by converting input requests into properly signed HTTP queries and parsing responses. It works with EC2 snapshot attribute request and result types, along with internal error types for failure handling. Use this module to retrieve details like create volume permissions or product codes for a specific snapshot in AWS EC2.",
      "description_length": 381,
      "index": 2011,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorFilterNetworkServices",
      "library": "aws-ec2",
      "description": "This module handles modifying network services for traffic mirror filters in EC2. It provides functions to convert native input types to HTTP requests and parse responses or errors from the service. It works directly with traffic mirror filter request and result types, targeting specific EC2 networking configurations.",
      "description_length": 319,
      "index": 2012,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Traffic Mirror filter rules by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with Traffic Mirror filter rule identifiers and AWS error types. Concrete use cases include removing specific filtering rules from a Traffic Mirror session to control network traffic monitoring in EC2 environments.",
      "description_length": 427,
      "index": 2013,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe reserved instances, converting input parameters into an HTTP request and parsing the response or errors. It works with `DescribeReservedInstancesRequest` and `DescribeReservedInstancesResult` types, along with internal error types for failure handling. Use this module to query details about existing reserved EC2 instances, including their configuration and pricing terms, by sending properly signed HTTP requests to the EC2 service endpoint.",
      "description_length": 492,
      "index": 2014,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeregisterTransitGatewayMulticastGroupMembers",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of multicast group members from a transit gateway in EC2. It works with transit gateway multicast group member requests and responses, specifically managing the removal of specified members from multicast groups. Use this module to update multicast group membership by removing endpoints such as network interfaces.",
      "description_length": 354,
      "index": 2015,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeBundleTasks",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 bundle task descriptions between native OCaml types and HTTP requests/responses. It works with input types representing bundle task requests and outputs or errors from describing those tasks. Concrete use cases include encoding bundle task queries into signed HTTP requests and decoding the results or errors from the EC2 service.",
      "description_length": 372,
      "index": 2016,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpnGateways",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 DescribeVpnGateways API requests to HTTP and parsing of responses, working directly with DescribeVpnGatewaysRequest and DescribeVpnGatewaysResult types. It encodes input data into properly formatted HTTP queries and decodes responses, handling both successful results and error cases. Concrete use cases include querying AWS EC2 for information about virtual private gateways and processing the returned data or errors in an API-specific format.",
      "description_length": 487,
      "index": 2017,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.StartVpcEndpointServicePrivateDnsVerification",
      "library": "aws-ec2",
      "description": "This module handles the initiation of private DNS verification for a VPC endpoint service in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, specifically for the `StartVpcEndpointServicePrivateDnsVerification` API call. It works with input and output types defined in the `Aws_ec2.Types` module, along with internal error handling specific to EC2 operations.",
      "description_length": 408,
      "index": 2018,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SearchTransitGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module handles querying and filtering routes in an EC2 Transit Gateway. It provides functions to construct HTTP requests from route search parameters and decode responses or errors from the service. It works directly with Transit Gateway route tables, supporting precise route lookups based on CIDR or route state.",
      "description_length": 319,
      "index": 2019,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ApplySecurityGroupsToClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module applies security groups to a Client VPN target network in AWS EC2. It handles the conversion between native OCaml types and HTTP requests/responses for this specific API call, including signing and endpoint determination. Use this module to programmatically manage security group associations for Client VPN endpoints in OCaml-based AWS tooling.",
      "description_length": 357,
      "index": 2020,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeIamInstanceProfileAssociations",
      "library": "aws-ec2",
      "description": "This module handles describing IAM instance profile associations in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types defined in `Aws_ec2.Types` for association data and errors. Use this module to query IAM role associations for EC2 instances, including filtering by association ID or instance ID.",
      "description_length": 355,
      "index": 2021,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateAddress",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of an Elastic IP address from an EC2 instance. It provides functions to construct HTTP requests from a `DisassociateAddressRequest`, parse responses, and decode errors specific to the EC2 API. It works directly with EC2\u2019s internal error types and the `DisassociateAddressRequest` structure, targeting use cases like releasing a public IP from a running instance or reassigning IPs in automated infrastructure workflows.",
      "description_length": 458,
      "index": 2022,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles modifying a transit gateway prefix list reference in AWS EC2. It provides functions to convert native input to an HTTP request and parse HTTP responses into output or errors, working with specific input, output, and error types defined in the Aws_ec2.Types module. It is used when updating routing configurations for transit gateways associated with prefix lists.",
      "description_length": 383,
      "index": 2023,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcPeeringConnectionOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying VPC peering connection options by converting input requests into properly signed HTTP queries and decoding responses. It works with VPC peering connection identifiers and associated options, such as allowing or disallowing DNS resolution or communication across the peering connection. Use this module to update configuration settings for VPC peering connections directly through EC2 API calls.",
      "description_length": 424,
      "index": 2024,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReportInstanceStatus",
      "library": "aws-ec2",
      "description": "This module handles reporting instance status in EC2 by sending HTTP requests to AWS. It works with the `ReportInstanceStatusRequest` type to specify instance health details, and converts these requests to HTTP format for transmission. It parses responses into unit output or specific EC2 errors, ensuring correct decoding and error handling for instance status reporting operations.",
      "description_length": 383,
      "index": 2025,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateLocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module handles the creation of associations between local gateway route tables and VPCs in AWS EC2. It works with specific EC2 types for input requests and output results, along with internal error types for handling failures. Concrete use cases include configuring routing for VPCs connected to on-premises networks through AWS Direct Connect or AWS Site-to-Site VPN.",
      "description_length": 373,
      "index": 2026,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptReservedInstancesExchangeQuote",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of Reserved Instances exchange quotes in AWS EC2 by converting native inputs to HTTP requests and parsing HTTP responses into outputs or errors. It works with specific input and output types defined in the `Aws_ec2.Types` module, along with error handling tied to EC2's internal error structure. It is used to programmatically manage Reserved Instance exchanges, including request signing, query parameter encoding, and response decoding.",
      "description_length": 473,
      "index": 2027,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayVirtualInterfaces",
      "library": "aws-ec2",
      "description": "This module handles describing local gateway virtual interfaces in EC2 by converting input requests to HTTP format and parsing responses. It works with EC2-specific request and response types, along with error handling tailored to this operation. Use this when querying details about local gateway virtual interfaces, such as their configuration and status.",
      "description_length": 357,
      "index": 2028,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnAuthorizationRules",
      "library": "aws-ec2",
      "description": "This module handles describing client VPN authorization rules in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeClientVpnAuthorizationRules` API call, along with error types defined in `Aws_ec2.Errors_internal`. Concrete use cases include querying existing authorization rules for a client VPN endpoint and handling the resulting data or errors from the AWS API.",
      "description_length": 448,
      "index": 2029,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 ID format requests to HTTP queries and parses responses or errors from AWS. It works with EC2-specific input and output types, including ID format requests and results, and AWS error responses. It is used when querying AWS EC2 to describe ID formats, ensuring proper request encoding and response decoding.",
      "description_length": 348,
      "index": 2030,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module handles the deletion of network interface permissions in AWS EC2 by converting native input types to properly signed HTTP requests and parsing responses into output or error types. It works directly with `DeleteNetworkInterfacePermissionRequest` and `DeleteNetworkInterfacePermissionResult` structures, along with internal EC2 error types. It is used when revoking permissions for a network interface, ensuring correct query encoding, request signing, and response decoding.",
      "description_length": 486,
      "index": 2031,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetHostReservationPurchasePreview",
      "library": "aws-ec2",
      "description": "This module handles previewing host reservation purchases in EC2 by converting input requests to HTTP queries and parsing the responses. It works with EC2-specific input and output types, along with internal error types for precise error handling. Use this module to generate and evaluate host reservation purchase options before committing to a purchase.",
      "description_length": 355,
      "index": 2032,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting attributes of an FPGA image in EC2. It provides functions to construct HTTP requests from input parameters and parse responses or errors from the server. It works directly with EC2-specific request and response types, such as `ResetFpgaImageAttributeRequest.t` and `ResetFpgaImageAttributeResult.t`. Use this module when modifying permissions or visibility settings of FPGA images in AWS EC2.",
      "description_length": 422,
      "index": 2033,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateVolume",
      "library": "aws-ec2",
      "description": "This module handles the creation of EBS volumes in EC2 by defining the request and response types for the CreateVolume API call. It provides functions to convert volume creation parameters into signed HTTP requests and to parse the resulting responses or errors. It works directly with EC2 volume configurations and AWS error types, used when provisioning storage resources in EC2 environments.",
      "description_length": 394,
      "index": 2034,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.BundleInstance",
      "library": "aws-ec2",
      "description": "This module handles the bundling of an EC2 instance into a stored image. It provides functions to convert a bundle request into an HTTP query request and parse the corresponding response or error. The module works with `BundleInstanceRequest` and `BundleInstanceResult` types, specifically for initiating and handling the bundling process of EC2 instances.",
      "description_length": 356,
      "index": 2035,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterTransitGatewayMulticastGroupSources",
      "library": "aws-ec2",
      "description": "This module handles registering multicast group sources for a transit gateway in AWS EC2. It works with EC2-specific request and response types, including transit gateway multicast group source identifiers and network interface references. It is used when managing multicast traffic in a virtual private cloud environment.",
      "description_length": 322,
      "index": 2036,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVpcPeeringConnections",
      "library": "aws-ec2",
      "description": "This module handles describing VPC peering connections in AWS EC2 by converting input requests to HTTP format and parsing HTTP responses into outputs or errors. It works with input and output types specific to the DescribeVpcPeeringConnections operation, along with error types defined in the EC2 service. It is used to query details about existing VPC peering connections, such as their status and configuration, by making and decoding EC2 API calls.",
      "description_length": 451,
      "index": 2037,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSnapshot",
      "library": "aws-ec2",
      "description": "This module creates an EBS snapshot from a specified volume in EC2. It handles the HTTP serialization and deserialization of snapshot creation requests, including error parsing from AWS responses. It works directly with EC2 snapshot request and response types, encoding them into HTTP requests and decoding responses into typed results.",
      "description_length": 336,
      "index": 2038,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UnmonitorInstances",
      "library": "aws-ec2",
      "description": "This module handles the conversion and execution of EC2 instance unmonitoring requests. It works with `UnmonitorInstancesRequest` and `UnmonitorInstancesResult` types, encoding requests into HTTP queries and decoding responses. It is used to disable detailed monitoring for EC2 instances in AWS.",
      "description_length": 295,
      "index": 2039,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorFilterRule",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 Traffic Mirror filter rules by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with Traffic Mirror filter rule configurations, including source and destination ports, protocols, and rule numbers. Concrete use cases include setting up traffic monitoring rules for network analysis and security auditing in virtual private clouds.",
      "description_length": 471,
      "index": 2040,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeRouteTables",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe route tables, converting input requests to HTTP format and parsing responses or errors from the server. It works with route table descriptions, filters, and VPC identifiers to retrieve routing information for specific networks. Use this module to programmatically inspect route tables associated with VPCs, including route entries and subnet associations.",
      "description_length": 404,
      "index": 2041,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeImportSnapshotTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe import snapshot tasks in EC2. It converts input parameters into an HTTP request and decodes responses or errors from the server. It works with EC2-specific request and response types, including handling task descriptions and related metadata. Use this module to query the status and details of ongoing or completed snapshot import tasks in AWS EC2.",
      "description_length": 393,
      "index": 2042,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RevokeClientVpnIngress",
      "library": "aws-ec2",
      "description": "This module handles revoking ingress access for a client VPN endpoint in EC2. It provides functions to construct and send HTTP requests for the `RevokeClientVpnIngress` API call, and to parse the corresponding responses and errors. It works directly with EC2 client VPN ingress request and result types, enabling precise control over access revocation rules.",
      "description_length": 358,
      "index": 2043,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSnapshot",
      "library": "aws-ec2",
      "description": "This module implements the deletion of an EC2 snapshot by converting a snapshot identifier into an AWS HTTP request and handling the response. It works with `DeleteSnapshotRequest.t` as input and returns no output on success, using internal EC2 error types for failure cases. It is used to issue the `DeleteSnapshot` API call to AWS EC2, handling request signing, encoding, and error parsing specific to that operation.",
      "description_length": 419,
      "index": 2044,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyClientVpnEndpoint",
      "library": "aws-ec2",
      "description": "This module modifies an existing Client VPN endpoint in EC2 by sending a signed HTTP request with configuration updates. It encodes input requests into query parameters and decodes responses or errors from XML into structured results. Use it to programmatically adjust Client VPN settings like DNS servers, split tunneling, or security groups.",
      "description_length": 343,
      "index": 2045,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyManagedPrefixList",
      "library": "aws-ec2",
      "description": "This module handles modifying AWS EC2 managed prefix lists by sending and processing HTTP requests to update prefix list entries. It works directly with `ModifyManagedPrefixListRequest` and `ModifyManagedPrefixListResult` types, encoding requests into properly formatted HTTP queries and decoding responses or errors. Concrete use cases include adding or removing CIDR blocks from a managed prefix list and updating the description or max entry count of an existing prefix list.",
      "description_length": 478,
      "index": 2046,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module deletes a network ACL entry in Amazon EC2 by sending a DeleteNetworkAclEntry request. It handles the conversion of input data into an HTTP request and processes the response, returning no output on success or an error if the deletion fails. It works directly with network ACL entry identifiers and AWS error responses.",
      "description_length": 330,
      "index": 2047,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeVolumeStatus",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve volume status information. It works with input and output types specific to the `DescribeVolumeStatus` operation, including request parameters and result data. It is used to send a properly signed HTTP request to AWS, parse the response into structured data, or handle and decode specific API errors.",
      "description_length": 349,
      "index": 2048,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a virtual private gateway in EC2 by converting input requests to signed HTTP queries and parsing responses. It works directly with `DeleteVpnGatewayRequest` inputs, returning no output on success or decoding specific EC2 errors. It is used when removing a VpnGateway resource, ensuring proper request signing and endpoint routing.",
      "description_length": 366,
      "index": 2049,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTableVpcAssociations",
      "library": "aws-ec2",
      "description": "This module handles the conversion of input and output data for the EC2 API call that describes local gateway route table VPC associations. It works with input requests and output results specific to that operation, along with internal error types for failure handling. It is used when querying AWS EC2 to retrieve information about how local gateway route tables are associated with VPCs.",
      "description_length": 389,
      "index": 2050,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetPasswordData",
      "library": "aws-ec2",
      "description": "This module handles retrieving password data for EC2 instances by converting native inputs into properly signed HTTP requests and decoding responses. It works with `GetPasswordDataRequest` and `GetPasswordDataResult` types, interacting with the EC2 service over HTTP. Concrete use cases include fetching decrypted passwords for Windows instances launched with encrypted key pairs.",
      "description_length": 380,
      "index": 2051,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSubnets",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe subnets, converting input parameters into an HTTP request and parsing the response or errors. It works with input type `DescribeSubnetsRequest.t`, output type `DescribeSubnetsResult.t`, and internal EC2 errors. Use this module when querying AWS EC2 to retrieve information about configured subnets, such as their IDs, availability zones, or associated route tables.",
      "description_length": 414,
      "index": 2052,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.SearchLocalGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API operation to search routes associated with a local gateway. It handles request signing, HTTP conversion, and response parsing for querying route data in a virtual private cloud (VPC) environment. It works directly with EC2-specific request and response types, including filtering and pagination parameters.",
      "description_length": 345,
      "index": 2053,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribePrincipalIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 principal ID format requests to HTTP queries and parses responses or errors from AWS. It works with `DescribePrincipalIdFormatRequest` and `DescribePrincipalIdFormatResult` types, along with internal error types for failure handling. It is used when querying AWS EC2 to determine the ID format settings for resources like instances or volumes, ensuring proper request signing and endpoint routing.",
      "description_length": 439,
      "index": 2054,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of transit gateway routes in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with transit gateway route request and result types, as well as internal EC2 error types. Concrete use cases include sending CreateTransitGatewayRoute API requests to EC2 and processing the responses or handling specific AWS errors returned by the service.",
      "description_length": 503,
      "index": 2055,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles the conversion of VPC endpoint connection requests to HTTP format and parses responses or errors from the EC2 service. It works with input and output types specific to describing VPC endpoint connections, along with internal error types for precise error handling. It is used to send queries to AWS EC2 for retrieving VPC endpoint connection details and to decode the results or handle failures based on the response.",
      "description_length": 437,
      "index": 2056,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetConsoleOutput",
      "library": "aws-ec2",
      "description": "This module handles retrieving console output from EC2 instances by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works with the `GetConsoleOutputRequest` and `GetConsoleOutputResult` structures, which include instance identifiers and output encoding details. A concrete use case is retrieving boot logs or diagnostic output from a misbehaving EC2 instance for troubleshooting.",
      "description_length": 477,
      "index": 2057,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetConsoleScreenshot",
      "library": "aws-ec2",
      "description": "This module handles retrieving console screenshots from EC2 instances by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with EC2-specific request and result structures, enabling precise interaction with the EC2 API. Use this module to capture instance console output for debugging or monitoring purposes.",
      "description_length": 418,
      "index": 2058,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeregisterImage",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of an Amazon EC2 image (AMI) by converting native requests into properly signed HTTP queries and processing responses. It works directly with the `DeregisterImageRequest` type, sending requests to the EC2 service endpoint and interpreting success or error responses. Concrete use cases include removing outdated or unused AMIs from an AWS account to manage image lifecycle and reduce clutter.",
      "description_length": 431,
      "index": 2059,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the deletion of local gateway routes in EC2 by converting input requests into properly signed HTTP queries and parsing the responses. It works directly with `DeleteLocalGatewayRouteRequest` and `DeleteLocalGatewayRouteResult` types, along with internal EC2 error types for failure handling. Use this module to remove specific routes from a local gateway route table within a VPC infrastructure automation workflow.",
      "description_length": 434,
      "index": 2060,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateVpcCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of CIDR blocks from VPCs in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, enabling direct interaction with the EC2 API for managing VPC CIDR configurations. Use it to programmatically remove secondary CIDR ranges from a VPC during network reconfiguration or cleanup tasks.",
      "description_length": 363,
      "index": 2061,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteCustomerGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a customer gateway in EC2 by providing functions to construct and interpret HTTP requests and responses. It works with the `DeleteCustomerGatewayRequest` type for input and returns no output on success, using internal EC2 error types for failure. It is used to send a properly signed EC2 API request to delete a customer gateway and handle the resulting response or error.",
      "description_length": 408,
      "index": 2062,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelBundleTask",
      "library": "aws-ec2",
      "description": "This module handles cancellation of bundle tasks in EC2 by converting native inputs to HTTP requests and parsing responses into results or errors. It works with `CancelBundleTaskRequest` and `CancelBundleTaskResult` types, along with internal error types for handling task cancellation responses. It is used to send cancellation commands to EC2 instances and interpret the success or failure of those commands from HTTP responses.",
      "description_length": 430,
      "index": 2063,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module enables DNS support for ClassicLink in a VPC by providing functions to construct and handle the corresponding EC2 API request. It works with VPC identifiers and converts them into signed HTTP requests targeting the EC2 service. Use this module to programmatically enable DNS resolution between ClassicLink instances and Route 53 in a specific VPC.",
      "description_length": 359,
      "index": 2064,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGateways",
      "library": "aws-ec2",
      "description": "This module handles the conversion of inputs and outputs for the EC2 DescribeLocalGateways API call, encoding requests into HTTP format and decoding responses. It works directly with DescribeLocalGatewaysRequest and DescribeLocalGatewaysResult types, along with internal error types for handling failures. It is used when querying AWS EC2 for information about local gateways, such as retrieving their identifiers or filtering based on specific criteria.",
      "description_length": 454,
      "index": 2065,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetDefaultCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles retrieving the default credit specification for EC2 instances. It works with EC2 credit specification requests and responses, translating them to and from HTTP format for API communication. Use this module when querying the default CPU credit behavior for T-series instances in AWS EC2.",
      "description_length": 306,
      "index": 2066,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of an AWS EC2 Transit Gateway by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with `CreateTransitGatewayRequest` and `CreateTransitGatewayResult` types, as well as internal error types for handling failure scenarios. Concrete use cases include initiating a Transit Gateway creation request, signing and sending it to the correct EC2 endpoint, and processing the resulting XML response or error from AWS.",
      "description_length": 565,
      "index": 2067,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeNatGateways",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication lifecycle for describing NAT gateways in EC2. It encodes input requests into properly formatted HTTP queries and decodes responses into structured results or specific AWS errors. It works directly with EC2's NAT gateway request and result types, enabling precise querying and error handling for infrastructure inspection tasks.",
      "description_length": 370,
      "index": 2068,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportInstance",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation for importing instances by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2 import instance requests, converting them into properly signed HTTP queries and parsing the results or errors returned by the service. Concrete use cases include initiating instance imports from disk images and handling the specific responses or failure conditions tied to that operation.",
      "description_length": 508,
      "index": 2069,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorTargets",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 traffic mirror targets by converting input requests into HTTP calls and parsing responses. It works with `DescribeTrafficMirrorTargetsRequest` and `DescribeTrafficMirrorTargetsResult` types, along with internal error types for failure handling. It is used to query details about traffic mirror targets in EC2, such as their configuration and associated network interfaces.",
      "description_length": 411,
      "index": 2070,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the creation of an EC2 Transit Gateway Multicast Domain by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with the `CreateTransitGatewayMulticastDomainRequest` and `CreateTransitGatewayMulticastDomainResult` types, and handles errors specific to this operation. It is used when configuring multicast networking in a transit gateway, such as setting up domain membership for VPC subnets.",
      "description_length": 501,
      "index": 2071,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetCapacityReservationUsage",
      "library": "aws-ec2",
      "description": "This module handles the retrieval and processing of AWS EC2 capacity reservation usage data. It provides functions to convert input requests to HTTP format and parse HTTP responses into usage results or specific API errors. It works directly with EC2 capacity reservation identifiers and usage metrics, enabling precise monitoring and management of reserved capacity utilization.",
      "description_length": 379,
      "index": 2072,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 VPN connections by defining the request and response types for the `CreateVpnConnection` API call. It provides functions to convert native input into an HTTP request and parse HTTP responses into either a result or an error, using AWS-specific error codes and status mappings. Concrete use cases include initiating a new Site-to-Site VPN connection and handling the low-level serialization and deserialization of API interactions.",
      "description_length": 470,
      "index": 2073,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module creates a VPC peering connection between two virtual private clouds. It handles request signing, HTTP conversion, and error parsing for the EC2 service. Use it to establish network connectivity between isolated VPCs in AWS.",
      "description_length": 235,
      "index": 2074,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 instance, such as instance type, security groups, or termination protection, using the `ModifyInstanceAttribute` API. It handles requests and responses for this specific operation, working with the `ModifyInstanceAttributeRequest` input type and producing no output on success. Use this module when directly changing instance properties in an AWS environment, such as updating an instance's IAM role or disabling API termination.",
      "description_length": 471,
      "index": 2075,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssignIpv6Addresses",
      "library": "aws-ec2",
      "description": "This module handles assigning IPv6 addresses to EC2 instances by defining the request and response types specific to that operation. It provides functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with EC2-specific types like `AssignIpv6AddressesRequest` and `AssignIpv6AddressesResult`, and handles AWS internal errors tied to this API call.",
      "description_length": 412,
      "index": 2076,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeExportTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 export tasks by converting input requests to HTTP format and parsing responses. It works with `DescribeExportTasksRequest` and `DescribeExportTasksResult` types, along with internal error types for handling failures. It is used to retrieve information about ongoing or completed export tasks for EC2 instances, such as exporting instance logs or system information to an S3 bucket.",
      "description_length": 430,
      "index": 2077,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RestoreManagedPrefixListVersion",
      "library": "aws-ec2",
      "description": "This module handles restoring a specific version of an EC2 managed prefix list by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with EC2 prefix list version data, including request parameters like prefix list ID and version number, and returns results confirming the successful restoration. Concrete use cases include rolling back prefix list changes to a known good state or reactivating a prior configuration in automated networking workflows.",
      "description_length": 560,
      "index": 2078,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.EnableVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module enables linking a VPC to the EC2 Classic network by providing functions to construct and handle the `EnableVpcClassicLink` API request and response. It works with `input`, `output`, and `error` types specific to the EC2 service, encoding requests into HTTP and decoding responses. Concrete use cases include integrating legacy EC2 instances with VPC resources by establishing a direct network connection.",
      "description_length": 416,
      "index": 2079,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateEnclaveCertificateIamRole",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of an IAM role from an enclave certificate in EC2. It works with specific request and response types defined in `Aws_ec2.Types` for this operation, along with internal error types. It provides functions to convert requests to HTTP format, parse HTTP responses, and decode AWS errors specific to this operation.",
      "description_length": 349,
      "index": 2080,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 VPN connection by defining the request structure, converting it to an HTTP request, and parsing responses or errors. It works directly with `DeleteVpnConnectionRequest` as input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include tearing down site-to-site VPN connections programmatically and integrating with automation tools for network resource management.",
      "description_length": 461,
      "index": 2081,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInternetGateways",
      "library": "aws-ec2",
      "description": "This module handles describing Internet Gateways in EC2 by sending and receiving AWS API requests. It works with input and output types specific to the `DescribeInternetGateways` operation, along with error handling tailored to this call. It is used to query metadata about Internet Gateways, such as their IDs and associated VPCs, within an AWS account.",
      "description_length": 354,
      "index": 2082,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeHostReservations",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 host reservations, converting input parameters into an HTTP request and parsing the response or errors. It works with `DescribeHostReservationsRequest` and `DescribeHostReservationsResult` types to send requests and receive results from the EC2 service. A concrete use case is retrieving information about Dedicated Host reservations for capacity planning and management.",
      "description_length": 420,
      "index": 2083,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeprovisionByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the deprovisioning of Bring Your Own IP (BYOIP) CIDR blocks in AWS EC2. It provides functions to construct HTTP requests from input types, decode responses into result types, and parse AWS errors specific to this operation. The module works directly with EC2's BYOIP CIDR request and response structures, enabling users to release custom IP ranges from their EC2 environment.",
      "description_length": 395,
      "index": 2084,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeregisterInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of instance event notification attributes in EC2 by converting input requests to HTTP calls and parsing responses. It works with EC2-specific input and output types defined in the `Aws_ec2.Types` module, along with error handling tailored to EC2's internal error format. It is used when managing event notifications for EC2 instances, particularly when disabling specific event types or destinations.",
      "description_length": 439,
      "index": 2085,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportClientVpnClientConfiguration",
      "library": "aws-ec2",
      "description": "This module handles exporting client configuration for a Client VPN endpoint in EC2. It provides functions to convert input and output types to and from HTTP requests, supporting query-based encoding and response parsing. It works with EC2's Client VPN types and errors, specifically handling the `ExportClientVpnClientConfiguration` API call.",
      "description_length": 343,
      "index": 2086,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles creating route tables in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with EC2-specific input and output structures, including route table configuration and result metadata. Use this module to programmatically create route tables, handle request signing, and process responses or errors from the EC2 API.",
      "description_length": 423,
      "index": 2087,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteNatGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of NAT gateways in AWS EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `DeleteNatGatewayRequest` and `DeleteNatGatewayResult` structures, encoding and decoding them for API communication. Concrete use cases include initiating a NAT gateway deletion and processing the resulting API response or error.",
      "description_length": 434,
      "index": 2088,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles retrieving the default KMS key ID for EBS encryption in AWS EC2. It works with `GetEbsDefaultKmsKeyIdRequest` and `GetEbsDefaultKmsKeyIdResult` types, converting requests to HTTP format and parsing responses or errors. Use this module when querying EC2 to determine the default KMS key used for encrypting EBS volumes in a specific region.",
      "description_length": 359,
      "index": 2089,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVolumeAttribute",
      "library": "aws-ec2",
      "description": "This module handles the low-level HTTP conversion and error parsing for describing EC2 volume attributes. It works with EC2 volume attribute requests and responses, translating them to and from HTTP format. It is used when querying specific attributes of an EC2 volume, such as its auto-enable I/O setting, by constructing and parsing the corresponding API calls.",
      "description_length": 363,
      "index": 2090,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcAttribute",
      "library": "aws-ec2",
      "description": "This module modifies VPC attributes in AWS EC2 by sending a query-formatted HTTP request with the required action and version parameters. It encodes a native input type into an HTTP request and decodes HTTP responses into a unit output or specific error type. It is used to programmatically enable or disable VPC features such as DNS support or hostnames.",
      "description_length": 355,
      "index": 2091,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSnapshots",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 snapshots by defining the request and response types for the `CreateSnapshots` API call. It provides functions to convert between native OCaml types and HTTP requests/responses, ensuring proper encoding and decoding of snapshot creation parameters and results. It is used to initiate snapshot creation across multiple volumes in EC2, handling the specific structure of the request and parsing the resulting API responses or errors.",
      "description_length": 471,
      "index": 2092,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeIdentityIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 identity ID format requests to HTTP queries and parses responses or errors from AWS. It works with input requests and output results defined in the `Aws_ec2.Types` module, along with internal error types. Concrete use cases include querying the ID format settings for EC2 resources and handling the corresponding AWS API responses and errors.",
      "description_length": 384,
      "index": 2093,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceTypeOfferings",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 instance type offering requests to HTTP queries and parses responses or errors from AWS. It works with input and output types specific to describing instance type offerings, including encoded query parameters and XML-parsed results. Concrete use cases include querying available EC2 instance types in a region and handling paginated responses or service-specific errors.",
      "description_length": 412,
      "index": 2094,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpc",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a VPC in AWS EC2 by converting a deletion request into an HTTP call, sending it, and processing the response. It works with the `DeleteVpcRequest` type for input and returns no output on success, using `Errors_internal` to represent failure conditions. It is used when programmatically removing a virtual private cloud, ensuring the correct query parameters are set and responses are parsed according to the EC2 API specification.",
      "description_length": 466,
      "index": 2095,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module handles the association of IAM instance profiles with EC2 instances by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with IAM instance profile association requests, responses, and errors defined in the EC2 types and errors modules. It is used to construct and send API calls to associate an IAM role with a running EC2 instance, and to process the result or error from that operation.",
      "description_length": 492,
      "index": 2096,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTags",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 tag description requests to HTTP queries and parses corresponding responses, including error handling. It works with `DescribeTagsRequest` and `DescribeTagsResult` types to manage querying and decoding of AWS EC2 tag data. It is used to retrieve metadata tags associated with EC2 resources like instances or volumes by encoding requests and decoding AWS XML responses into structured data.",
      "description_length": 431,
      "index": 2097,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointServicePermissions",
      "library": "aws-ec2",
      "description": "This module modifies permissions for a VPC endpoint service by adding or removing allowed principals. It works with VPC endpoint service identifiers and principal ARNs, enabling fine-grained access control to AWS services. Use it to programmatically manage which AWS accounts or organizations can connect to a specific VPC endpoint service.",
      "description_length": 340,
      "index": 2098,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteNetworkAcl",
      "library": "aws-ec2",
      "description": "This module handles the deletion of network ACLs in EC2 by converting input requests into properly signed HTTP queries and processing responses. It works directly with `DeleteNetworkAclRequest` inputs, returning no output on success or decoding specific EC2 errors. It is used to issue EC2 API calls to delete network ACLs, handling request signing, query encoding, and error parsing according to the AWS EC2 API specification.",
      "description_length": 427,
      "index": 2099,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportVolume",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation for importing volumes, converting native requests into properly signed HTTP queries and parsing responses or errors. It works with input and output types specific to volume import requests, including encoded query parameters and XML-parsed results. Concrete use cases include initiating volume imports from disk images and handling the corresponding API responses and error codes.",
      "description_length": 422,
      "index": 2100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles detaching a virtual private gateway from a VPC in AWS EC2. It provides functions to convert native requests to HTTP format and parse responses or errors from the service. It works directly with `DetachVpnGatewayRequest` as input and returns no output on success, using internal EC2 error types for failure handling.",
      "description_length": 335,
      "index": 2101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyEbsDefaultKmsKeyId",
      "library": "aws-ec2",
      "description": "This module handles modifying the default KMS key ID used for EBS encryption in EC2. It provides functions to construct HTTP requests from input parameters, parse responses into result types, and decode AWS-specific errors. The module works directly with EC2-specific request and response types, and is used when changing the default encryption key for new EBS volumes.",
      "description_length": 369,
      "index": 2102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableEbsEncryptionByDefault",
      "library": "aws-ec2",
      "description": "This module enables EBS encryption by default in EC2 by sending a request to activate encryption for all new EBS volumes. It handles the conversion of input parameters to an HTTP request and parsing of responses, including errors, using EC2-specific data types. Concrete use cases include enforcing encryption policies programmatically and integrating with configuration management systems to ensure secure volume creation.",
      "description_length": 423,
      "index": 2103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of an Internet Gateway in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with the `CreateInternetGatewayRequest` and `CreateInternetGatewayResult` types, and handles errors via the `Errors_internal` type. Concrete use cases include initiating an Internet Gateway creation request, sending it over HTTP, and parsing the resulting success or error responses from the EC2 API.",
      "description_length": 521,
      "index": 2104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateLocalGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of local gateway routes in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateLocalGatewayRouteRequest` and `CreateLocalGatewayRouteResult` data structures, encoding and decoding them for API communication. It is used when configuring routing for local gateways, specifically for adding routes to a local gateway route table via the EC2 API.",
      "description_length": 484,
      "index": 2105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 VPC ClassicLink DNS support requests to HTTP format and parses responses, working with input and output types defined in the `Aws_ec2.Types` module. It supports querying DNS support status for VPCs by encoding requests with the correct query parameters and decoding results or errors from XML responses. Specific use cases include checking DNS resolution status for linked VPCs and handling API responses in automated infrastructure validation tools.",
      "description_length": 492,
      "index": 2106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetManagedPrefixListEntries",
      "library": "aws-ec2",
      "description": "This module handles retrieving entries from an EC2 managed prefix list by converting input requests into properly signed HTTP queries and parsing the responses. It works directly with `GetManagedPrefixListEntriesRequest` and `GetManagedPrefixListEntriesResult` types, along with internal EC2 error types for handling failures. Use this module when querying AWS EC2 to inspect or manage CIDR entries in a managed prefix list for VPC resources.",
      "description_length": 442,
      "index": 2107,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_ec2.ImportClientVpnClientCertificateRevocationList",
      "library": "aws-ec2",
      "description": "This module handles the import of client certificate revocation lists for AWS EC2 Client VPN endpoints. It provides functions to convert native input types to HTTP requests and parse HTTP responses into output or error types. The module works with EC2-specific request and response types, targeting certificate revocation list management operations.",
      "description_length": 349,
      "index": 2108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeSpotPriceHistory",
      "library": "aws-ec2",
      "description": "This module handles querying and parsing spot price history data from EC2. It provides functions to convert native input types to HTTP requests and HTTP responses back into typed outputs or errors. It works directly with EC2 spot price history requests and responses, handling encoding to query parameters and decoding from XML.",
      "description_length": 328,
      "index": 2109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceEventStartTime",
      "library": "aws-ec2",
      "description": "This module modifies the start time of a scheduled EC2 instance event. It handles requests to adjust event timing using AWS EC2's API, working with structured input and output types specific to event scheduling. It encodes inputs into HTTP requests and decodes responses, handling errors tied to event modification constraints like invalid event IDs or timing conflicts.",
      "description_length": 370,
      "index": 2110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetCoipPoolUsage",
      "library": "aws-ec2",
      "description": "This module handles the retrieval and processing of CoIP pool usage data in AWS EC2. It sends a query request to the EC2 service to fetch usage information for a specific CoIP pool and translates the HTTP response into structured output or error data. It works directly with CoIP pool identifiers and processes usage metrics such as allocated and used IP addresses.",
      "description_length": 365,
      "index": 2111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVolume",
      "library": "aws-ec2",
      "description": "This module implements the deletion of an EC2 volume by converting a deletion request into an HTTP call, sending it to the appropriate AWS endpoint, and handling the response. It works with `DeleteVolumeRequest.t` as input and returns no output on success, using `Errors_internal.t` to represent failure conditions. It is used to directly remove a specified EBS volume from an AWS account, ensuring proper request signing and response decoding.",
      "description_length": 444,
      "index": 2112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module handles the creation of reserved EC2 instance listings by converting native input into HTTP requests and parsing responses into outputs or errors. It works with specific request and response types defined in `Aws_ec2.Types`, along with internal error types for precise error handling. It is used when listing reserved instances in EC2, where accurate query encoding and response decoding are required.",
      "description_length": 413,
      "index": 2113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 Transit Gateway Multicast Domain by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with the `DeleteTransitGatewayMulticastDomainRequest` and `DeleteTransitGatewayMulticastDomainResult` data structures, encoding requests into query format and decoding responses. It is used to issue and process AWS API calls to delete a multicast domain, handling success responses and specific API errors.",
      "description_length": 532,
      "index": 2114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeImportImageTasks",
      "library": "aws-ec2",
      "description": "This module handles the querying and parsing of EC2 import image task statuses by converting native input to HTTP requests and decoding responses into structured results or errors. It works with `DescribeImportImageTasksRequest` and `DescribeImportImageTasksResult` types to manage task metadata such as IDs, statuses, and progress. Concrete use cases include monitoring the progress of image imports into EC2 and retrieving detailed status information for specific import tasks.",
      "description_length": 479,
      "index": 2115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAddresses",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 address description requests to HTTP queries and parses responses or errors from AWS. It works with EC2-specific request and result types, including encoded query parameters and signed HTTP requests. Concrete use cases include querying public IP address allocations and handling AWS API responses with status codes and XML error parsing.",
      "description_length": 379,
      "index": 2116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServices",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint services in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types defined in `Aws_ec2.Types` for service description and error handling. Use this module to query available VPC endpoint services and process their responses or errors from AWS.",
      "description_length": 339,
      "index": 2117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.PurchaseReservedInstancesOffering",
      "library": "aws-ec2",
      "description": "This module handles the purchase of EC2 Reserved Instances offerings by converting input requests into signed HTTP queries and processing responses. It works with EC2-specific request and response types, including encoded query parameters and XML-based error handling. Concrete use cases include submitting a purchase request for a specific Reserved Instances offering and parsing the resulting status or errors from AWS.",
      "description_length": 421,
      "index": 2118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribePlacementGroups",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 placement groups, converting input parameters into an HTTP request and parsing the response or errors from AWS. It works with `DescribePlacementGroupsRequest` and `DescribePlacementGroupsResult` types, along with internal error types for handling failures. Use this module when querying AWS EC2 to retrieve information about existing placement groups, including their state and partition count.",
      "description_length": 443,
      "index": 2119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeDhcpOptions` API call in EC2, converting input requests to HTTP format and parsing responses or errors from the server. It works with `DescribeDhcpOptionsRequest` and `DescribeDhcpOptionsResult` types, along with internal error types for handling failures. It is used to retrieve information about DHCP options sets in an EC2 environment, such as their configuration and association with VPCs.",
      "description_length": 426,
      "index": 2120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpoint",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoints in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with `CreateVpcEndpointRequest` and `CreateVpcEndpointResult` data structures, encoding and decoding them according to the EC2 API specification. Concrete use cases include configuring private connectivity between a VPC and supported AWS services without requiring an internet gateway or NAT device.",
      "description_length": 537,
      "index": 2121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a Spot Datafeed subscription in AWS EC2 by converting native requests into properly signed HTTP queries and processing responses. It works directly with the `DeleteSpotDatafeedSubscriptionRequest` type for input and returns no output on success, using a custom error type for failure cases. Concrete use cases include disabling periodic logging of Spot instance interruptions to an S3 bucket.",
      "description_length": 428,
      "index": 2122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnConnection",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing AWS EC2 VPN connection by defining the request structure, response parsing, and error handling specific to the `ModifyVpnConnection` API call. It works with input and output types defined in `Aws_ec2.Types`, including `ModifyVpnConnectionRequest` and `ModifyVpnConnectionResult`, and processes HTTP requests and responses using AWS signing version 4. A concrete use case is updating the properties of a VPN connection, such as changing the customer gateway or enabling or disabling acceleration.",
      "description_length": 537,
      "index": 2123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AcceptVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of VPC peering connections in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with VPC peering connection identifiers, converting them to and from EC2 API query format. Concrete use cases include initiating peering connection acceptance and processing the resulting API response or error.",
      "description_length": 371,
      "index": 2124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFpgaImages",
      "library": "aws-ec2",
      "description": "This module handles the conversion of FPGA image description requests to HTTP format and parses responses, working with `DescribeFpgaImagesRequest` and `DescribeFpgaImagesResult` types. It encodes input data into properly formatted EC2 API queries and decodes responses, including error handling specific to FPGA image operations. Use this module when querying AWS EC2 for information about FPGA images, such as retrieving metadata or filtering available images.",
      "description_length": 462,
      "index": 2125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateEnclaveCertificateIamRole",
      "library": "aws-ec2",
      "description": "This module handles the association of an IAM role with an enclave certificate in EC2. It provides functions to convert input and output types to and from HTTP requests, parse errors, and defines the service name and API signing version. Use this module to securely link IAM roles to certificates used in EC2 enclave operations.",
      "description_length": 328,
      "index": 2126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstancePlacement",
      "library": "aws-ec2",
      "description": "This module handles modifying the placement attributes of EC2 instances, specifically through the `to_http` and `of_http` functions that encode requests into HTTP queries and decode responses. It works with the `ModifyInstancePlacementRequest` and `ModifyInstancePlacementResult` data types, representing the input and output of the placement modification operation. A concrete use case is changing the affinity or host ID of a running EC2 instance to control its placement on dedicated hosts.",
      "description_length": 493,
      "index": 2127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CancelSpotFleetRequests",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of spot fleet requests in AWS EC2 by providing functions to construct and interpret HTTP requests and responses according to the EC2 API. It works with input and output types specific to spot fleet cancellation, including request parameters, responses indicating success or failure, and error types defined in the EC2 service. Concrete use cases include programmatically terminating spot fleet requests and handling the resulting API responses, including parsing detailed cancellation errors.",
      "description_length": 529,
      "index": 2128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RunInstances",
      "library": "aws-ec2",
      "description": "This module handles launching EC2 instances by converting a request configuration into an HTTP call and parsing the response. It works with `RunInstancesRequest` to configure instance parameters and returns a `Reservation` with launched instances or an error. Concrete use cases include programmatically starting new EC2 instances with specified AMI, instance type, and network settings.",
      "description_length": 387,
      "index": 2129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateRouteTable",
      "library": "aws-ec2",
      "description": "This module handles associating a route table with a subnet or gateway in EC2. It directly works with `AssociateRouteTableRequest` and `AssociateRouteTableResult` types, translating them to and from HTTP requests and responses. It is used to configure routing by linking route tables to network components, returning the association ID or handling specific EC2 errors on failure.",
      "description_length": 379,
      "index": 2130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 route requests by converting native input types into properly signed HTTP requests and decoding responses into results or errors. It works directly with EC2 route request and result types, along with AWS internal error types for failure handling. Concrete use cases include submitting route creation actions to EC2 and processing the resulting API responses or errors.",
      "description_length": 408,
      "index": 2131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateEgressOnlyInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of egress-only internet gateways in EC2, providing functions to construct and parse HTTP requests and responses for the corresponding AWS API operation. It works with input and output types specific to the CreateEgressOnlyInternetGateway API, along with error handling tailored to the expected EC2 error responses. Use this module when programmatically setting up VPC egress-only internet access in AWS infrastructure management workflows.",
      "description_length": 472,
      "index": 2132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorFilters",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 traffic mirror filters by converting input requests to HTTP format and parsing responses. It works with `DescribeTrafficMirrorFiltersRequest` and `DescribeTrafficMirrorFiltersResult` types to send and receive data from the EC2 service. Use this module when retrieving configuration details of existing traffic mirror filters for monitoring or auditing network traffic.",
      "description_length": 417,
      "index": 2133,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetRequestHistory",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 Spot Fleet request history queries to HTTP requests and parses responses, working with input and output types defined in `Aws_ec2.Types`. It encodes requests into query format with proper action and version parameters, decodes HTTP responses into structured outputs or errors, and maps AWS errors to specific internal error types. It is used to retrieve and process historical events for EC2 Spot Fleet requests directly via the AWS API.",
      "description_length": 479,
      "index": 2134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteQueuedReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles the deletion of queued Reserved Instances in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including encoded query parameters and XML-based error responses. Concrete use cases include canceling pending Reserved Instance purchases and handling the resulting API responses or errors.",
      "description_length": 451,
      "index": 2135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCoipPools",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeCoipPools` API call in EC2, converting input requests to properly signed HTTP queries and parsing responses or errors from the service. It works with `DescribeCoipPoolsRequest.t` for input and `DescribeCoipPoolsResult.t` for output, using internal EC2 error types for failure handling. It is used to retrieve information about customer-owned IP pools in an AWS account.",
      "description_length": 402,
      "index": 2136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpoints",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoints in AWS EC2 by converting native input types into properly signed HTTP requests and parsing responses into output or error types. It works directly with `DeleteVpcEndpointsRequest` and `DeleteVpcEndpointsResult` structures, along with internal EC2 error types. It is used to issue EC2 API calls to delete one or more VPC endpoints, handling request signing, query encoding, and response decoding.",
      "description_length": 445,
      "index": 2137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module handles modifying AWS EC2 traffic mirror sessions by defining the request and response types specific to the operation. It provides functions to convert native input into HTTP requests and parse HTTP responses into results or errors, ensuring correct encoding and decoding of traffic mirror session modification parameters. Concrete use cases include updating session properties like target, filter, or packet length in EC2 networking environments.",
      "description_length": 460,
      "index": 2138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Transit Gateway route tables by providing functions to construct and interpret HTTP requests and responses for the corresponding AWS API call. It works with input and output types specific to the DeleteTransitGatewayRouteTable operation, along with error handling tailored to the possible failure modes of this action. It is used when managing network routing in AWS EC2 by allowing programmatic removal of route tables associated with Transit Gateways.",
      "description_length": 493,
      "index": 2139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.PurchaseHostReservation",
      "library": "aws-ec2",
      "description": "This module handles the purchase of EC2 host reservations by converting native inputs into properly signed HTTP requests and decoding responses into structured outputs or errors. It works directly with `PurchaseHostReservationRequest` and `PurchaseHostReservationResult` types, along with internal error types for failure handling. It is used to programmatically reserve EC2 Dedicated Hosts, handling request signing, query encoding, and response parsing specific to this operation.",
      "description_length": 482,
      "index": 2140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeFleetHistory",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 fleet history requests to HTTP queries and parses responses or errors from AWS. It works with `DescribeFleetHistoryRequest` and `DescribeFleetHistoryResult` types, along with internal EC2 errors. It is used to query AWS EC2 for the historical events of a specific fleet within a given time range.",
      "description_length": 338,
      "index": 2141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Transit Gateway VPC attachments by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `DeleteTransitGatewayVpcAttachmentRequest` and `DeleteTransitGatewayVpcAttachmentResult` structures, encoding requests into query format and decoding responses. It is used to issue and process AWS API calls to delete a Transit Gateway VPC attachment, including handling specific error responses from the service.",
      "description_length": 529,
      "index": 2142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpnConnectionRoute",
      "library": "aws-ec2",
      "description": "This module deletes a static route associated with a virtual private network (VPN) connection in Amazon EC2. It handles the request lifecycle for the `DeleteVpnConnectionRoute` API action, including input validation, HTTP request construction, response parsing, and error handling. The module works directly with `DeleteVpnConnectionRouteRequest` input and returns no output on success, using EC2-specific error types for failure conditions.",
      "description_length": 441,
      "index": 2143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableTransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module enables propagating routes from a transit gateway route table to a connected attachment. It handles the specific operation of enabling route propagation by sending a query-formatted HTTP request with the required action and version parameters, and processes responses into structured outputs or errors. The module works directly with EC2 transit gateway route table propagation requests and responses, handling AWS-specific error parsing for this operation.",
      "description_length": 469,
      "index": 2144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.SearchTransitGatewayMulticastGroups",
      "library": "aws-ec2",
      "description": "This module handles searching for multicast groups in an EC2 transit gateway. It provides functions to convert requests to HTTP format and parse responses, working with input and output types defined in the EC2 service. It is used when managing multicast group membership in a transit gateway for network traffic control.",
      "description_length": 321,
      "index": 2145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 Traffic Mirror sessions by converting input requests into properly signed HTTP queries and parsing responses. It works with `DeleteTrafficMirrorSessionRequest` and `DeleteTrafficMirrorSessionResult` types, along with internal error types for failure handling. Use this module to programmatically remove Traffic Mirror sessions in AWS EC2, ensuring correct request signing and response decoding.",
      "description_length": 434,
      "index": 2146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeRegions",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 region description requests to HTTP queries and parses responses or errors from AWS. It works with input and output types specific to the `DescribeRegions` API call, including encoded query parameters and XML-parsed results or errors. It is used to programmatically retrieve information about available EC2 regions, handling both successful responses and API-specific error conditions.",
      "description_length": 427,
      "index": 2147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVgwRoutePropagation",
      "library": "aws-ec2",
      "description": "This module enables route propagation for a virtual private gateway in EC2, specifically handling the request to propagate routes from a specified route table to the gateway. It operates on the `EnableVgwRoutePropagationRequest` type, sending an HTTP request to trigger route propagation and returning no output on success. A concrete use case is configuring route propagation to allow a transit gateway to learn routes from a VPC route table.",
      "description_length": 443,
      "index": 2148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayVpcAttachments",
      "library": "aws-ec2",
      "description": "This module handles the querying and processing of transit gateway VPC attachment details in AWS EC2. It accepts a request structure with filters and transit gateway IDs, and produces a result containing attachment data or an error. It is used to retrieve information about how VPCs are attached to transit gateways, including status and subnet associations.",
      "description_length": 358,
      "index": 2149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of AWS EC2 transit gateways by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `DeleteTransitGatewayRequest` and `DeleteTransitGatewayResult` structures, encoding requests into query format and decoding responses. Concrete use cases include issuing delete commands for transit gateways and handling the resulting success or error states.",
      "description_length": 464,
      "index": 2150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles the creation of transit gateway prefix list references in AWS EC2. It works with input and output types specific to the CreateTransitGatewayPrefixListReference operation, along with internal EC2 error types. It provides functions to construct HTTP requests from input, parse responses into output or errors, and decode API-specific errors, enabling direct interaction with the EC2 API for managing transit gateway routing.",
      "description_length": 442,
      "index": 2151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ResetNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module resets specific attributes of an EC2 network interface, such as source/destination checking. It works directly with EC2 network interface request types and handles low-level AWS HTTP interactions. Use it to modify network interface behavior in automated infrastructure management tasks.",
      "description_length": 298,
      "index": 2152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifySubnetAttribute",
      "library": "aws-ec2",
      "description": "This module modifies subnet attributes in AWS EC2, specifically handling requests to update properties like public IP assignment and subnet tagging. It works directly with EC2 subnet identifiers and AWS API request/response types. Concrete use cases include enabling auto-assignment of public IPs on subnet creation or updating subnet tags programmatically.",
      "description_length": 357,
      "index": 2153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayVirtualInterfaceGroups",
      "library": "aws-ec2",
      "description": "This module handles the conversion of inputs and outputs for the EC2 API call to describe local gateway virtual interface groups. It works with the input type `DescribeLocalGatewayVirtualInterfaceGroupsRequest.t`, output type `DescribeLocalGatewayVirtualInterfaceGroupsResult.t`, and error type `Errors_internal.t`. Concrete operations include encoding requests to HTTP format, decoding HTTP responses into results or errors, and parsing AWS errors specific to this API call.",
      "description_length": 475,
      "index": 2154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.MoveAddressToVpc",
      "library": "aws-ec2",
      "description": "This module handles moving an Elastic IP address from EC2-Classic to a VPC. It provides functions to convert input and output types to and from HTTP requests, supporting the MoveAddressToVpc operation with specific error parsing based on HTTP status codes and response bodies. The module works directly with EC2 Classic and VPC networking configurations, used when migrating resources between EC2 platforms.",
      "description_length": 407,
      "index": 2155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayRouteTableAssociations",
      "library": "aws-ec2",
      "description": "This module handles retrieving associations for EC2 transit gateway route tables by converting input requests to HTTP format and parsing responses. It works with transit gateway route table association request and result types, along with internal EC2 errors. Use this module to query which transit gateways are associated with a specific route table in AWS EC2.",
      "description_length": 362,
      "index": 2156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.EnableVolumeIO",
      "library": "aws-ec2",
      "description": "This module enables I/O operations on an EC2 volume by providing a function to construct and sign HTTP requests for the EC2 API. It works with the `EnableVolumeIORequest` type to specify the volume ID and converts the request into a properly formatted AWS query request. It is used to re-enable a volume that was previously disabled due to a failed I/O operation, directly interfacing with AWS EC2's EnableVolumeIO API action.",
      "description_length": 426,
      "index": 2157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.StartInstances",
      "library": "aws-ec2",
      "description": "This module handles starting EC2 instances by defining the request and response types for the operation. It provides functions to convert start instance requests to HTTP format and parse responses or errors from AWS. Use this module when initiating EC2 instances programmatically, handling request signing, and processing the result or failure conditions specific to starting instances.",
      "description_length": 386,
      "index": 2158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module handles replacing an entry in a network ACL within EC2 by defining the request structure, HTTP conversion logic, and error parsing specific to the operation. It works directly with network ACL entry configurations, including rule numbers, protocols, and allow/deny actions. Concrete use cases include updating ingress or egress rules in a VPC network ACL programmatically as part of infrastructure automation or security policy enforcement.",
      "description_length": 452,
      "index": 2159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing attributes of EC2 network interfaces by converting requests to HTTP format and parsing responses. It works with network interface attribute request and result types, along with internal EC2 error types. It is used to query specific properties like description, security groups, or source/destination checking status for a given network interface in EC2.",
      "description_length": 384,
      "index": 2160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeConversionTasks",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 conversion tasks by providing functions to construct HTTP requests and parse responses for describing conversion tasks. It works with input and output types specific to EC2 conversion task descriptions, along with internal error types for handling failures. Concrete use cases include querying the status of ongoing instance store-backed AMI conversions and retrieving task details such as progress, status, and associated resources.",
      "description_length": 475,
      "index": 2161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpointServiceConfigurations",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoint service configurations by converting input requests into properly signed HTTP queries and parsing responses. It works with EC2-specific input and output types, including service configurations and error responses. Use this module to retrieve details about VPC endpoint services, such as their state, acceptance requirements, and associated load balancers.",
      "description_length": 399,
      "index": 2162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyFleet",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 fleets by encoding requests into HTTP queries and decoding responses. It works with `ModifyFleetRequest` and `ModifyFleetResult` types, along with internal EC2 errors. It is used to send API requests to change fleet configurations and process the results or errors returned by the service.",
      "description_length": 323,
      "index": 2163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the rejection of a Transit Gateway VPC attachment in AWS EC2. It provides functions to construct HTTP requests from input parameters, parse responses into result types, and decode error responses. It works directly with Transit Gateway VPC attachment request and result types, targeting use cases such as programmatically managing VPC connectivity through Transit Gateways.",
      "description_length": 393,
      "index": 2164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles modifying credit specifications for EC2 instances by converting native input into HTTP requests and parsing responses into outputs or errors. It works with input and output types defined in `Aws_ec2.Types` along with internal error types, using HTTP for communication. Concrete use cases include adjusting CPU credit behavior for burstable instances via the AWS API.",
      "description_length": 386,
      "index": 2165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeregisterTransitGatewayMulticastGroupSources",
      "library": "aws-ec2",
      "description": "This module handles the deregistration of multicast group sources from a transit gateway in EC2. It works with transit gateway multicast group source request and result types, specifically managing the removal of sources from multicast groups. Use this module to update multicast group membership by removing specified network interfaces or sources in a transit gateway.",
      "description_length": 370,
      "index": 2166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeCapacityReservations",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 capacity reservations by converting input requests to HTTP queries and parsing responses. It works with `DescribeCapacityReservationsRequest` and `DescribeCapacityReservationsResult` types, along with internal EC2 errors. It is used to send requests to the EC2 service and decode the results or errors returned by the API.",
      "description_length": 357,
      "index": 2167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterImage",
      "library": "aws-ec2",
      "description": "This module handles the registration of Amazon Machine Images (AMIs) in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with EC2-specific input and output types, such as `RegisterImageRequest.t` and `RegisterImageResult.t`, and includes error handling tailored to AMI registration. Concrete use cases include creating custom AMIs from snapshots and managing image metadata like architecture and block device mappings.",
      "description_length": 541,
      "index": 2168,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceStatus",
      "library": "aws-ec2",
      "description": "This module handles describing the status of EC2 instances by sending a query request and parsing the response. It works with `DescribeInstanceStatusRequest` and `DescribeInstanceStatusResult` types, along with internal EC2 errors. It is used to check the health and status of running instances, including system and instance status checks.",
      "description_length": 340,
      "index": 2169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module handles associating a target network with a Client VPN endpoint in AWS EC2. It provides functions to convert native OCaml types to HTTP requests and responses, specifically encoding input parameters into query format and decoding XML responses into result or error types. Use this module when managing Client VPN configurations programmatically, such as linking VPC subnets to a Client VPN during setup or updates.",
      "description_length": 426,
      "index": 2170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AuthorizeSecurityGroupIngress",
      "library": "aws-ec2",
      "description": "This module handles the authorization of ingress rules for EC2 security groups by converting native input into HTTP requests and parsing responses. It works directly with `AuthorizeSecurityGroupIngressRequest` as input and returns no output on success, using internal EC2 error types for failure. Concrete use cases include adding inbound access rules to security groups, such as allowing SSH access from a specific IP range.",
      "description_length": 425,
      "index": 2171,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RequestSpotInstances",
      "library": "aws-ec2",
      "description": "This module handles the creation and processing of spot instance requests in EC2. It converts native input types to properly signed HTTP requests and decodes responses into result types, handling both successful outputs and error cases. It works directly with EC2 spot instance request and result types, using AWS-specific error structures for failure reporting.",
      "description_length": 362,
      "index": 2172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptVpcEndpointConnections",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of VPC endpoint connections in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the VPC endpoint connection acceptance operation, along with error handling tailored to this action. Use this module when implementing logic to programmatically accept endpoint connections in a VPC environment.",
      "description_length": 412,
      "index": 2173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the modification of ID formatting in EC2 by sending a request to align resource IDs with a specified format. It works with EC2 resource types such as instances, volumes, and snapshots, accepting a resource type and a flag to enable or disable longer IDs. A concrete use case is ensuring compatibility with legacy systems by controlling whether EC2 uses the older 8-character IDs or the newer 17-character IDs for specific resources.",
      "description_length": 452,
      "index": 2174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceCreditSpecifications",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 instance credit specification requests to HTTP format and parses responses, supporting precise querying of credit specifications for instances. It works with input and output types defined in `Aws_ec2.Types`, along with internal error types for handling failures. Use this module to retrieve credit settings for specific EC2 instances in a VPC, particularly for monitoring or managing burstable performance instances.",
      "description_length": 459,
      "index": 2175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateNetworkInterfacePermission",
      "library": "aws-ec2",
      "description": "This module handles creating and managing network interface permissions in AWS EC2. It works with EC2-specific request and response types, encoding them into HTTP requests and decoding responses into structured results or errors. It is used to grant or deny permissions for network interfaces, such as allowing specific AWS accounts or services to attach to an interface.",
      "description_length": 371,
      "index": 2176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGateway",
      "library": "aws-ec2",
      "description": "This module handles modifying AWS EC2 transit gateways by converting native input into HTTP requests and parsing responses into output or errors. It works with `ModifyTransitGatewayRequest`, `ModifyTransitGatewayResult`, and internal error types, primarily for adjusting transit gateway configurations. Concrete use cases include updating transit gateway options and handling API responses with proper error decoding.",
      "description_length": 417,
      "index": 2177,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.MonitorInstances",
      "library": "aws-ec2",
      "description": "This module enables monitoring of EC2 instances by converting instance IDs into HTTP requests that trigger AWS monitoring actions. It handles request signing, encoding to query format, and decoding responses into structured results or errors. Use it to programmatically enable detailed monitoring for EC2 instances, handling success responses or specific AWS errors like invalid instance IDs or permission issues.",
      "description_length": 413,
      "index": 2178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateDefaultSubnet",
      "library": "aws-ec2",
      "description": "This module handles creating a default subnet in EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with EC2-specific input and output structures, including encoded query parameters and XML-parsed errors. Use this module when programmatically setting up VPC subnets with AWS's EC2 API, particularly for default subnet creation workflows.",
      "description_length": 430,
      "index": 2179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteFleets",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 fleets by converting native input into HTTP requests and parsing responses into outputs or errors. It works with `DeleteFleetsRequest` and `DeleteFleetsResult` types, along with internal error types for handling failure cases. It is used to send properly signed HTTP requests to the EC2 service endpoint and decode the results of fleet deletion operations.",
      "description_length": 396,
      "index": 2180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportSnapshot",
      "library": "aws-ec2",
      "description": "This module handles the initiation and processing of snapshot import requests in EC2. It works with `ImportSnapshotRequest` and `ImportSnapshotResult` types, managing their conversion to and from HTTP requests and responses. It is used to import disk images from Amazon S3 into EC2 as snapshots, handling request signing, encoding, and error parsing specific to this operation.",
      "description_length": 377,
      "index": 2181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AcceptTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of transit gateway peering attachments in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically working with transit gateway peering attachment request and result types. It is used to programmatically accept peering connections between transit gateways in distributed VPC environments.",
      "description_length": 406,
      "index": 2182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AttachVolume",
      "library": "aws-ec2",
      "description": "This module handles the attachment of EBS volumes to EC2 instances by defining the request and response types for the operation. It provides functions to convert native requests into HTTP queries and to decode HTTP responses into volume attachment results or specific AWS errors. Use this module when programmatically attaching storage volumes to virtual machines in AWS EC2 environments.",
      "description_length": 388,
      "index": 2183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles attaching an internet gateway to a VPC in AWS EC2. It provides functions to convert native requests to HTTP format and parse responses or errors from the service. The main operations work with an `AttachInternetGatewayRequest` input and return no output on success, using standard AWS EC2 error types for failure cases.",
      "description_length": 339,
      "index": 2184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayAttachments",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 transit gateway attachments by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeTransitGatewayAttachments` operation, along with internal EC2 error types. It is used to query AWS EC2 for details about transit gateway attachments, such as their state and associated VPCs.",
      "description_length": 382,
      "index": 2185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ResetSnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module handles resetting attributes of an EC2 snapshot, specifically by making API calls to AWS. It works with the `ResetSnapshotAttributeRequest` type for input and returns no output on success, using custom error types for failure cases. It is used to modify snapshot permissions or other metadata directly through the AWS API, such as removing specific launch permissions from a snapshot.",
      "description_length": 396,
      "index": 2186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceCapacityReservationAttributes",
      "library": "aws-ec2",
      "description": "This module modifies capacity reservation attributes for EC2 instances, specifically handling requests to associate or disassociate instances from capacity reservations. It operates on input and output types defined in the `Aws_ec2.Types` module, including `ModifyInstanceCapacityReservationAttributesRequest` and `ModifyInstanceCapacityReservationAttributesResult`. A concrete use case is adjusting instance placement when managing reserved capacity in automated scaling or resource optimization workflows.",
      "description_length": 507,
      "index": 2187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateSpotDatafeedSubscription",
      "library": "aws-ec2",
      "description": "This module handles creating and managing spot datafeed subscriptions in EC2. It provides functions to convert input requests to HTTP format and parse responses or errors from the service. It works directly with EC2 spot datafeed subscription requests and results, handling request signing and endpoint determination.",
      "description_length": 317,
      "index": 2188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeElasticGpus",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeElasticGpus` API call in AWS EC2, providing functions to construct HTTP requests from input parameters and parse responses or errors from the service. It works with `DescribeElasticGpusRequest.t` as input and `DescribeElasticGpusResult.t` as output, along with internal error types for handling failures. It is used to retrieve information about Elastic Graphics accelerators associated with EC2 instances, such as their status, type, and attached instance IDs.",
      "description_length": 494,
      "index": 2189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVolumes",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve information about EBS volumes. It defines the input and output types specific to the DescribeVolumes operation, along with functions to serialize requests to HTTP format and deserialize responses or errors from the service. It is used to query metadata such as volume IDs, sizes, attachment states, and associated instances directly from EC2.",
      "description_length": 391,
      "index": 2190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAggregateIdFormat",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 aggregate ID format requests to HTTP queries and parses responses or errors from AWS. It works with `DescribeAggregateIdFormatRequest` and `DescribeAggregateIdFormatResult` types to manage request signing, encoding, and decoding. Use this module to query AWS EC2 about ID format settings for resources like instances or volumes, and handle the resulting HTTP responses or errors.",
      "description_length": 421,
      "index": 2191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.Types",
      "library": "aws-ec2",
      "description": "This module provides data structures and bidirectional serialization functions for EC2 resource configurations and metadata, focusing on network interfaces, IP addresses, tags, EBS devices, security groups, and instance specifications. It supports conversions between OCaml types and external formats (JSON, XML, query parameters) to enable API interactions, infrastructure automation, and configuration management for scenarios like VPC networking, security rule enforcement, and instance metadata handling. The utilities are designed for structured data manipulation, error handling, and format consistency across AWS SDK operations.",
      "description_length": 635,
      "index": 2192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ExportTransitGatewayRoutes",
      "library": "aws-ec2",
      "description": "This module handles exporting routes from an AWS EC2 Transit Gateway by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with Transit Gateway route tables, targeting use cases such as auditing route propagation or integrating route data with external networking tools. The module includes error parsing logic specific to route export operations, ensuring accurate handling of failure conditions like missing route tables or invalid parameters.",
      "description_length": 568,
      "index": 2193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RejectVpcPeeringConnection",
      "library": "aws-ec2",
      "description": "This module handles the rejection of VPC peering connection requests in AWS EC2. It provides functions to convert native input to HTTP requests and parse HTTP responses or errors specific to the VPC peering rejection operation. It works with VPC peering connection request and result types, along with internal EC2 error types.",
      "description_length": 327,
      "index": 2194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTrafficMirrorSessions",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 traffic mirror sessions by defining the request and response types, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with `DescribeTrafficMirrorSessionsRequest` and `DescribeTrafficMirrorSessionsResult` data structures, encoding and decoding them for HTTP communication. Concrete use cases include querying the status and configuration of traffic mirror sessions within an EC2 environment.",
      "description_length": 485,
      "index": 2195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.TerminateClientVpnConnections",
      "library": "aws-ec2",
      "description": "This module handles terminating client VPN connections in AWS EC2 by converting native requests into properly signed HTTP queries and parsing responses or errors from the service. It works directly with EC2's client VPN connection termination request and result types, encoding them to HTTP format and decoding responses or error messages. Concrete use cases include disconnecting specific clients from a client VPN endpoint and handling response statuses or service errors after termination attempts.",
      "description_length": 501,
      "index": 2196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteTags",
      "library": "aws-ec2",
      "description": "This module handles the deletion of tags from Amazon EC2 resources by converting native requests into properly signed HTTP queries and processing responses. It works with the `DeleteTagsRequest` type to specify which tags to delete, and returns no output on success. Concrete use cases include removing metadata tags from EC2 instances or volumes as part of resource cleanup or reorganization workflows.",
      "description_length": 403,
      "index": 2197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayMulticastDomains",
      "library": "aws-ec2",
      "description": "This module handles the HTTP serialization and deserialization logic for the *DescribeTransitGatewayMulticastDomains* API call in AWS EC2. It works with the input type `DescribeTransitGatewayMulticastDomainsRequest.t`, output type `DescribeTransitGatewayMulticastDomainsResult.t`, and error type `Errors_internal.t`. It is used to programmatically query multicast domain information for transit gateways, handling request signing, endpoint routing, and response parsing.",
      "description_length": 470,
      "index": 2198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyDefaultCreditSpecification",
      "library": "aws-ec2",
      "description": "This module handles modifying default credit specifications for EC2 instances using AWS API requests. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `ModifyDefaultCreditSpecificationRequest` and `ModifyDefaultCreditSpecificationResult`. Concrete use cases include adjusting baseline performance settings for burstable instance types by sending properly signed HTTP requests to the EC2 service endpoint.",
      "description_length": 444,
      "index": 2199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyInstanceMetadataOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 instance metadata options by providing functions to construct and process HTTP requests and responses. It works with input and output types specific to the `ModifyInstanceMetadataOptions` API call, along with error types defined in the EC2 service. It is used when updating metadata token settings or response hop limit for EC2 instances via AWS SDK.",
      "description_length": 384,
      "index": 2200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayRoute",
      "library": "aws-ec2",
      "description": "This module handles the deletion of routes from an EC2 Transit Gateway by defining the request and response types, along with functions to serialize requests into HTTP calls and deserialize HTTP responses into results or errors. It works directly with Transit Gateway route deletion requests and AWS-specific error formats. It is used to issue DeleteTransitGatewayRoute API calls to AWS EC2, handling both successful responses and error conditions specific to route deletion.",
      "description_length": 475,
      "index": 2201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateSubnetCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of IPv6 CIDR blocks from EC2 subnets by converting native requests into properly signed HTTP queries and parsing responses. It works directly with `DisassociateSubnetCidrBlockRequest` and `DisassociateSubnetCidrBlockResult` types, along with internal EC2 errors. Use this module to send disassociate subnet CIDR block requests to AWS EC2 and handle the resulting success or error responses.",
      "description_length": 429,
      "index": 2202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeHostReservationOfferings",
      "library": "aws-ec2",
      "description": "This module handles the AWS EC2 API call to describe host reservation offerings, allowing users to retrieve information about available Dedicated Host reservations. It works with input and output types specific to the `DescribeHostReservationOfferings` operation, including request parameters and result data structures. Concrete use cases include querying available host reservations for cost optimization or capacity planning in EC2 environments.",
      "description_length": 448,
      "index": 2203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the creation of an EC2 Transit Gateway Route Table by defining the request and response types specific to this operation. It provides functions to serialize the request into an HTTP call and deserialize the HTTP response into a result or error, using EC2 service-specific formatting. It is used to interact directly with the AWS EC2 API when creating a new transit gateway route table, ensuring correct query encoding and response handling.",
      "description_length": 460,
      "index": 2204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisassociateTransitGatewayRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a transit gateway route table from a transit gateway attachment in AWS EC2. It provides functions to construct and deconstruct HTTP requests and responses for this specific API call, working with input and output types defined in the `Aws_ec2.Types` module. Use this module when managing transit gateway route tables programmatically, such as in network automation or infrastructure management workflows.",
      "description_length": 446,
      "index": 2205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeSnapshots",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve snapshot information by converting input parameters into an HTTP request and parsing the response. It works with `DescribeSnapshotsRequest` and `DescribeSnapshotsResult` types to manage query parameters and decode results or errors. It is used to programmatically inspect EBS snapshots, including filtering by owner or tags, and handling responses with proper error decoding.",
      "description_length": 424,
      "index": 2206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.WithdrawByoipCidr",
      "library": "aws-ec2",
      "description": "This module handles the withdrawal of Bring Your Own IP (BYOIP) CIDR blocks from AWS EC2. It works with EC2-specific request and response types, including `WithdrawByoipCidrRequest`, `WithdrawByoipCidrResult`, and internal EC2 errors. It is used to construct and send HTTP requests to withdraw a BYOIP CIDR, and to parse the corresponding responses or errors from the EC2 API.",
      "description_length": 376,
      "index": 2207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelConversionTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an ongoing conversion task in EC2 by providing functions to construct and interpret HTTP requests and responses. It works with the `CancelConversionRequest` type for input and returns no output on success, using internal EC2 error types for failure cases. Concrete use cases include aborting a conversion task initiated for importing or exporting instances, ensuring the task is stopped and resources are properly released.",
      "description_length": 463,
      "index": 2208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAvailabilityZones",
      "library": "aws-ec2",
      "description": "This module handles describing availability zones in EC2 by sending and receiving HTTP requests. It works with input and output types specific to the DescribeAvailabilityZones API call, along with error types defined in the EC2 service. It is used to retrieve information about availability zones, such as their state and region, by making properly signed HTTP requests to the EC2 service endpoint.",
      "description_length": 398,
      "index": 2209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RestoreAddressToClassic",
      "library": "aws-ec2",
      "description": "This module handles the restoration of an Elastic IP address from a VPC to EC2-Classic. It provides functions to convert input and output types to and from HTTP requests, specifically encoding the request into query format and decoding responses, working with `RestoreAddressToClassicRequest` and `RestoreAddressToClassicResult` types. It is used when migrating network resources between EC2-Classic and VPC environments.",
      "description_length": 421,
      "index": 2210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteVpcEndpointConnectionNotifications",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC endpoint connection notifications in AWS EC2. It works with input and output types specific to the DeleteVpcEndpointConnectionNotifications operation, along with internal EC2 error types. Use this module to send deletion requests and process responses or errors from the EC2 service.",
      "description_length": 323,
      "index": 2211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeReservedInstancesListings",
      "library": "aws-ec2",
      "description": "Handles the conversion of EC2 reserved instances listing requests to HTTP queries and parses responses or errors from the AWS API. Works with EC2-specific request and response types, including reserved instances filters and listing results. Used to programmatically retrieve details about active reserved instance listings in AWS EC2 environments.",
      "description_length": 347,
      "index": 2212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTags",
      "library": "aws-ec2",
      "description": "This module handles creating tags for EC2 resources by defining the request structure, HTTP conversion logic, and error parsing specific to the tag creation operation. It works with EC2 resource identifiers and tag lists, encoding them into HTTP requests signed for AWS API consumption. Concrete use cases include tagging instances, volumes, or snapshots with metadata like environment, owner, or cost center.",
      "description_length": 409,
      "index": 2213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceTypes",
      "library": "aws-ec2",
      "description": "This module handles the EC2 `DescribeInstanceTypes` API call, converting input parameters into an HTTP request and parsing the response or errors. It works with `DescribeInstanceTypesRequest` and `DescribeInstanceTypesResult` types, along with internal EC2 errors. Use this module to retrieve metadata about available EC2 instance types, such as their resource configurations and supported features.",
      "description_length": 399,
      "index": 2214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RegisterInstanceEventNotificationAttributes",
      "library": "aws-ec2",
      "description": "This module configures event notification settings for EC2 instances by registering attributes that control which events trigger notifications. It works with instance event notification request and response types, enabling precise control over event delivery targets like SNS topics. Use this module to specify event types (e.g., instance state changes) and configure notification persistence across instance reboots.",
      "description_length": 417,
      "index": 2215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateVpcEndpointServiceConfiguration",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC endpoint service configurations by defining the request and response types for the AWS EC2 API. It works with input data structured as `CreateVpcEndpointServiceConfigurationRequest.t` and produces results or errors conforming to EC2's internal error types. It converts requests to HTTP format with proper query encoding and decodes HTTP responses into typed results or errors, validating status codes and XML-parsed AWS errors during the process.",
      "description_length": 486,
      "index": 2216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CancelReservedInstancesListing",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of Reserved Instances listings in EC2 by converting native input types to properly signed HTTP requests and parsing responses into structured outputs or errors. It works directly with `CancelReservedInstancesListingRequest` for input and `CancelReservedInstancesListingResult` for output, alongside internal error types for failure handling. Concrete use cases include submitting cancellation requests for Reserved Instances and processing the resulting success or error responses from the EC2 API.",
      "description_length": 535,
      "index": 2217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportClientVpnClientCertificateRevocationList",
      "library": "aws-ec2",
      "description": "This module handles exporting client certificate revocation lists for Client VPN endpoints in EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into output or errors, specifically for the `ExportClientVpnClientCertificateRevocationList` API call. It works directly with EC2's request and response types, handling query encoding and error mapping specific to this operation.",
      "description_length": 422,
      "index": 2218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.PurchaseScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles the purchase of scheduled EC2 instances by converting input requests into properly signed HTTP queries and processing responses. It works with structured input and output types defined in the `Aws_ec2.Types` module, specifically `PurchaseScheduledInstancesRequest` and `PurchaseScheduledInstancesResult`. Use this module when programmatically reserving EC2 compute capacity for specific time intervals, such as scheduling nightly batch processing instances.",
      "description_length": 477,
      "index": 2219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeEgressOnlyInternetGateways",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe egress-only internet gateways in EC2, converting input parameters into an HTTP request and parsing the response or errors returned by the service. It works with input and output types specific to the EC2 API, including request configurations and result data structures. It is used when retrieving information about existing egress-only internet gateways, particularly in managing IPv6 traffic routing in VPCs.",
      "description_length": 454,
      "index": 2220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateClientVpnTargetNetwork",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a client VPN target network in AWS EC2. It works with EC2 client VPN target network request and result types, specifically `DisassociateClientVpnTargetNetworkRequest.t` and `DisassociateClientVpnTargetNetworkResult.t`, along with internal EC2 errors. It is used to construct and send HTTP requests for disassociating a target network from a client VPN endpoint, and to parse the corresponding responses and errors.",
      "description_length": 456,
      "index": 2221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableVgwRoutePropagation",
      "library": "aws-ec2",
      "description": "This module handles the disabling of route propagation from a virtual private gateway (VGW) to a route table in Amazon EC2. It provides functions to construct and send the corresponding API request, as well as to decode and handle responses or errors. The primary data types are the input request and the unit output, along with internal error types for failure handling. A concrete use case is managing route propagation state in a VPC to control traffic routing between connected networks.",
      "description_length": 491,
      "index": 2222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeInstanceAttribute",
      "library": "aws-ec2",
      "description": "This module handles describing specific attributes of EC2 instances by converting requests into signed HTTP queries and parsing responses. It works with `DescribeInstanceAttributeRequest` as input and returns `InstanceAttribute` data, handling errors specific to EC2 instance attribute queries. Use this module to retrieve details like instance type, block device mappings, or network interfaces for a given EC2 instance.",
      "description_length": 421,
      "index": 2223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the deletion of DHCP options sets in Amazon EC2 by converting native requests into properly signed HTTP queries and parsing responses. It works directly with `DeleteDhcpOptionsRequest` inputs, returning no output on success or an EC2-specific error on failure. Concrete use cases include removing custom DHCP configurations from EC2 networks and managing network infrastructure cleanup in automated deployment pipelines.",
      "description_length": 440,
      "index": 2224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateVpcCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles associating a CIDR block with a VPC in AWS EC2. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors. It works directly with CIDR block association requests and results, specifically for managing IPv4 or IPv6 ranges in VPC configurations.",
      "description_length": 322,
      "index": 2225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVolume",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 volume attributes by sending HTTP requests to adjust volume size, type, or IOPS. It works with structured input and output types defined in `Aws_ec2.Types`, specifically `ModifyVolumeRequest.t` and `ModifyVolumeResult.t`. Use this module to programmatically resize EBS volumes or change their performance characteristics in AWS environments.",
      "description_length": 375,
      "index": 2226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AttachNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles attaching a network interface to an EC2 instance by defining the request and response types specific to that operation. It provides functions to convert native request types to HTTP requests and parse HTTP responses into results or errors, ensuring correct encoding and decoding of API calls. It works directly with EC2-specific request and result types, targeting the attach network interface API endpoint.",
      "description_length": 427,
      "index": 2227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFleetInstances",
      "library": "aws-ec2",
      "description": "This module handles the conversion of EC2 fleet instance requests to HTTP format and parses responses, specifically working with `DescribeFleetInstancesRequest` and `DescribeFleetInstancesResult` types. It encodes input data into signed HTTP queries for the EC2 service and decodes XML responses into structured outputs or errors. Use this module when querying AWS EC2 to retrieve information about instances in a fleet, ensuring correct request signing and response handling.",
      "description_length": 476,
      "index": 2228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFpgaImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of describing FPGA image attributes in EC2, working with input and output types defined in the Aws_ec2.Types module. It provides functions to convert native input to HTTP requests and parse HTTP responses into results or errors, ensuring correct encoding and decoding of FPGA image attribute data. Concrete use cases include querying FPGA image permissions and attributes as part of EC2 image management workflows.",
      "description_length": 457,
      "index": 2229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ReplaceRouteTableAssociation",
      "library": "aws-ec2",
      "description": "This module handles replacing a route table association in EC2 by converting native input into a signed HTTP request and parsing the response or error. It works with EC2-specific input and output types, including route table association request and result structures. Use this module to programmatically update route table associations for subnets within a VPC.",
      "description_length": 361,
      "index": 2230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyHosts",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 host reservations by encoding requests into HTTP queries and decoding responses. It works with `ModifyHostsRequest` and `ModifyHostsResult` types, along with internal EC2 error types. It is used to programmatically adjust host allocation settings in AWS EC2, such as changing auto-placement or instance family configurations.",
      "description_length": 359,
      "index": 2231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSecurityGroups",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve security group details by converting input requests to HTTP format and parsing responses. It works with security group request and result types, along with internal EC2 error types. It is used to query AWS EC2 for information about specific security groups, including their rules and associated metadata.",
      "description_length": 353,
      "index": 2232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ExportImage",
      "library": "aws-ec2",
      "description": "This module handles the initiation and processing of EC2 image export requests. It provides functions to convert native request types to HTTP queries and parse HTTP responses into results or errors. It works with EC2 image export input and output types, handling request signing and response decoding specific to the EC2 service.",
      "description_length": 329,
      "index": 2233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.UnassignIpv6Addresses",
      "library": "aws-ec2",
      "description": "This module handles the unassignment of IPv6 addresses from EC2 instances by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific types such as `UnassignIpv6AddressesRequest` and `UnassignIpv6AddressesResult`. Concrete use cases include programmatically removing IPv6 addresses from running instances and handling the associated AWS API errors.",
      "description_length": 451,
      "index": 2234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateDhcpOptions",
      "library": "aws-ec2",
      "description": "This module handles the creation of DHCP options sets in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with DHCP configuration data, including domain name servers, domain names, and other network settings. It is used when configuring custom DHCP options for VPCs to control domain name assignment, NTP servers, and other network behaviors.",
      "description_length": 442,
      "index": 2235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DisableVpcClassicLinkDnsSupport",
      "library": "aws-ec2",
      "description": "This module disables DNS support for VPC classic link in Amazon EC2 by sending a specific API request. It handles the conversion of input and output types to and from HTTP requests, including proper query parameter encoding and response parsing. It works directly with VPC identifiers and is used when managing network configurations for EC2 instances linked to a VPC.",
      "description_length": 368,
      "index": 2236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AllocateHosts",
      "library": "aws-ec2",
      "description": "This module handles allocating dedicated hosts in EC2 by defining the request and response types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with EC2-specific request parameters, host placement configurations, and AWS error responses. Concrete use cases include programmatically provisioning dedicated hosts with specific instance capacity and placement constraints.",
      "description_length": 465,
      "index": 2237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteFpgaImage",
      "library": "aws-ec2",
      "description": "This module handles the deletion of FPGA images in EC2 by converting native requests into properly signed HTTP queries and parsing responses into results or errors. It works directly with `DeleteFpgaImageRequest` and `DeleteFpgaImageResult` types, along with internal error types for failure handling. Use this module to issue delete requests for FPGA images and process the outcomes from the EC2 service.",
      "description_length": 405,
      "index": 2238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateAddress",
      "library": "aws-ec2",
      "description": "This module handles associating an Elastic IP address with an EC2 instance by converting native requests into properly signed HTTP queries and parsing responses. It works directly with `AssociateAddressRequest` and `AssociateAddressResult` types, along with internal error types for failure handling. Use this module when programmatically linking public IPs to EC2 instances in AWS workflows.",
      "description_length": 392,
      "index": 2239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribePublicIpv4Pools",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe public IPv4 pools, managing input requests and output responses. It works with structured types for requests, results, and errors defined in the EC2 library. Use this module to retrieve information about public IPv4 address pools configured in an AWS account.",
      "description_length": 308,
      "index": 2240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotFleetRequests",
      "library": "aws-ec2",
      "description": "This module handles the conversion of input and output types for the EC2 DescribeSpotFleetRequests API call, including HTTP serialization and deserialization. It works with the DescribeSpotFleetRequestsRequest and DescribeSpotFleetRequestsResponse types, along with internal error types for handling failures. It is used to construct and interpret HTTP requests and responses when interacting with EC2 spot fleet request data, such as retrieving the status or configuration of spot fleets.",
      "description_length": 489,
      "index": 2241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateCarrierGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of carrier gateways in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output structures, including carrier gateway identifiers and error responses. It is used when provisioning carrier gateways in AWS EC2 to connect VPCs with external networks.",
      "description_length": 407,
      "index": 2242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeStaleSecurityGroups",
      "library": "aws-ec2",
      "description": "This module handles the specific operation of describing stale security groups in EC2 by converting input requests to HTTP format and parsing responses. It works with EC2-specific input and output types defined in `Aws_ec2.Types`, along with internal error types for failure handling. Concrete use cases include identifying unused security groups that are no longer referenced by any instances or rules.",
      "description_length": 403,
      "index": 2243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CopyImage",
      "library": "aws-ec2",
      "description": "This module handles the copying of Amazon Machine Images (AMIs) across regions by encoding `CopyImageRequest` structures into properly signed HTTP requests and decoding responses into `CopyImageResult` or error types. It directly works with EC2-specific input and output types defined in `Aws_ec2.Types`, along with internal error representations. Concrete use cases include initiating cross-region AMI replication and handling the resulting status or failure responses.",
      "description_length": 470,
      "index": 2244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.TerminateInstances",
      "library": "aws-ec2",
      "description": "This module handles the termination of EC2 instances by defining the input and output types for the operation, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with `TerminateInstancesRequest` and `TerminateInstancesResult` structures, encoding requests into properly formatted HTTP queries and decoding responses into results or errors. Concrete use cases include sending a request to shut down specific EC2 instances and handling the resulting response or error from the AWS API.",
      "description_length": 538,
      "index": 2245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVolumeAttribute",
      "library": "aws-ec2",
      "description": "This module handles modifying attributes of an EC2 volume, specifically by making API calls to AWS. It works with the `ModifyVolumeAttributeRequest` type for input and returns no output on success. Common use cases include enabling or disabling volume auto-recovery, and updating volume permissions or tags directly through AWS API operations.",
      "description_length": 343,
      "index": 2246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpnGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of a new virtual private gateway in AWS EC2 by defining the request and response types specific to the CreateVpnGateway API call. It works directly with the `CreateVpnGatewayRequest` and `CreateVpnGatewayResult` data structures, encoding requests into properly formatted HTTP queries and decoding responses into result or error types. Concrete use cases include initiating a new VPN gateway with specified parameters such as type and availability zone, and handling the resulting gateway ID or failure conditions like invalid parameters or duplicate requests.",
      "description_length": 592,
      "index": 2247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ConfirmProductInstance",
      "library": "aws-ec2",
      "description": "This module confirms product instance ownership for EC2 instances by sending a signed HTTP request to AWS. It handles the conversion between native OCaml types and HTTP requests/responses, including query parameter encoding and error parsing. Concrete use cases include verifying that a product code is associated with a running instance and handling AWS API responses with proper error decoding.",
      "description_length": 396,
      "index": 2248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachNetworkInterface",
      "library": "aws-ec2",
      "description": "This module handles detaching network interfaces in EC2 by converting native input into a properly signed HTTP request and processing the response. It works with `DetachNetworkInterfaceRequest.t` as input and returns no output on success, using `Errors_internal.t` for error handling. It is used to issue EC2 API calls to detach a network interface, handling request signing, encoding, and response parsing.",
      "description_length": 407,
      "index": 2249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeImages",
      "library": "aws-ec2",
      "description": "This module handles the EC2 `DescribeImages` API call, converting input parameters into an HTTP request and parsing the response or errors. It works with `DescribeImagesRequest.t` for input, `DescribeImagesResult.t` for output, and `Errors_internal.t` for errors. Use this module to retrieve metadata about EC2 images (such as AMIs) by constructing and decoding AWS API requests and responses.",
      "description_length": 393,
      "index": 2250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetGroupsForCapacityReservation",
      "library": "aws-ec2",
      "description": "This module handles retrieving resource groups associated with EC2 capacity reservations. It provides functions to convert native input types to HTTP requests and parse HTTP responses into outputs or errors, specifically working with `GetGroupsForCapacityReservationRequest` and `GetGroupsForCapacityReservationResult` types. It is used when managing capacity reservations to identify the associated resource groups for allocation and access control.",
      "description_length": 450,
      "index": 2251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorTarget",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API call to create a traffic mirror target, handling request signing, HTTP conversion, and response parsing. It works with EC2-specific input and output types, including traffic mirror target configurations and error responses. Use this module to programmatically set up traffic mirroring targets in EC2, capturing network traffic for monitoring or analysis.",
      "description_length": 393,
      "index": 2252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RebootInstances",
      "library": "aws-ec2",
      "description": "This module handles the rebooting of EC2 instances by defining the request structure, error types, and HTTP conversion logic for the operation. It works with the `RebootInstancesRequest` type to specify which instances to reboot and communicates with the EC2 service via HTTP requests signed using the specified version. Concrete use cases include initiating instance reboots in response to system health checks or configuration updates.",
      "description_length": 437,
      "index": 2253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module modifies a transit gateway VPC attachment in AWS EC2 by updating its options, such as subnet associations and DNS support. It works with transit gateway VPC attachment request and result types, handling HTTP serialization and deserialization. Concrete use cases include adjusting VPC connectivity settings and managing transit gateway configurations programmatically.",
      "description_length": 379,
      "index": 2254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 transit gateway peering attachments by converting native inputs to HTTP requests and parsing responses or errors from AWS. It works with structured request and response types defined in `Aws_ec2.Types`, including `DeleteTransitGatewayPeeringAttachmentRequest` and `DeleteTransitGatewayPeeringAttachmentResult`. Use this module to programmatically remove peering connections between transit gateways in AWS EC2 environments.",
      "description_length": 463,
      "index": 2255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AcceptTransitGatewayVpcAttachment",
      "library": "aws-ec2",
      "description": "This module handles the acceptance of a Transit Gateway VPC attachment in AWS EC2. It provides functions to convert native input to an HTTP request and parse HTTP responses into output or errors, specifically working with Transit Gateway VPC attachment request and result types. It is used to programmatically accept a VPC attachment to a Transit Gateway, enabling network connectivity between VPCs and the Transit Gateway.",
      "description_length": 423,
      "index": 2256,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPC flow logs in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with EC2 flow log configurations, including parameters like log destination, format, and traffic type. Concrete use cases include enabling flow logs for network monitoring, compliance auditing, and traffic analysis in cloud environments.",
      "description_length": 475,
      "index": 2257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CopySnapshot",
      "library": "aws-ec2",
      "description": "This module handles the copying of Amazon EC2 snapshots across regions or accounts by defining the request and response types for the operation. It works with `CopySnapshotRequest` and `CopySnapshotResult` structures, encoding them into HTTP requests and decoding responses, including error handling. It is used to initiate a snapshot copy, handle authentication, and process the result or error from the EC2 API.",
      "description_length": 413,
      "index": 2258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeKeyPairs",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 key pairs by converting input requests to HTTP format and parsing responses. It works with `DescribeKeyPairsRequest` and `DescribeKeyPairsResult` types, along with internal error types for handling failures. It is used to send EC2 key pair description requests to AWS and decode the corresponding responses, including handling specific AWS errors related to key pair descriptions.",
      "description_length": 415,
      "index": 2259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeletePlacementGroup",
      "library": "aws-ec2",
      "description": "This module handles the deletion of EC2 placement groups by converting native input into an HTTP request and processing responses. It works with the `DeletePlacementGroupRequest` type for input and returns no output on success, using internal EC2 error types for failures. Concrete use cases include sending properly signed EC2 API requests to delete placement groups and parsing associated XML error responses.",
      "description_length": 411,
      "index": 2260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorFilter",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 Traffic Mirror filters by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses. It works directly with `CreateTrafficMirrorFilterRequest` and `CreateTrafficMirrorFilterResult` types, encoding and decoding them for API communication. Concrete use cases include configuring network traffic monitoring rules and integrating with AWS EC2's mirroring capabilities for security analysis or network troubleshooting.",
      "description_length": 527,
      "index": 2261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTransitGatewayPeeringAttachment",
      "library": "aws-ec2",
      "description": "This module creates a peering attachment between two transit gateways in AWS EC2. It handles request signing, HTTP serialization, and response parsing for the specific input and output types defined in the EC2 service. Use this module when programmatically connecting transit gateways across AWS accounts or regions.",
      "description_length": 316,
      "index": 2262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportKeyPair",
      "library": "aws-ec2",
      "description": "This module handles importing an SSH key pair into Amazon EC2 by converting native input into an HTTP request and parsing the response or errors. It works with `ImportKeyPairRequest.t` for input, `ImportKeyPairResult.t` for output, and `Errors_internal.t` for errors, using AWS query format for communication. Concrete use cases include programmatically adding new key pairs for secure instance access and handling EC2-specific responses and failure states during key import operations.",
      "description_length": 486,
      "index": 2263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AssociateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the association of a transit gateway multicast domain in AWS EC2. It provides functions to convert input data into an HTTP request and parse HTTP responses into output or errors, following the specific query serialization format required by the EC2 API. The module works directly with transit gateway multicast domain association requests and responses, targeting use cases such as managing multicast traffic routing in virtual private clouds.",
      "description_length": 463,
      "index": 2264,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AttachClassicLinkVpc",
      "library": "aws-ec2",
      "description": "This module handles attaching a classic link to a VPC in AWS EC2 by defining the request and response types, along with functions to convert between native OCaml types and HTTP requests or responses. It works directly with `AttachClassicLinkVpcRequest` and `AttachClassicLinkVpcResult` data structures, encoding requests into query format and decoding responses. It is used to perform the specific EC2 API call for linking a classic instance to a VPC, handling both successful and error responses.",
      "description_length": 497,
      "index": 2265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteFlowLogs",
      "library": "aws-ec2",
      "description": "This module handles the deletion of VPC flow logs in AWS EC2 by defining the request and response types, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with EC2 flow log identifiers and interacts with the EC2 API to perform deletions. Use this module when managing network traffic logging in EC2 by removing outdated or unnecessary flow logs programmatically.",
      "description_length": 445,
      "index": 2266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGateways",
      "library": "aws-ec2",
      "description": "This module handles the low-level HTTP communication for querying AWS EC2 transit gateways. It translates input requests into properly signed HTTP queries and decodes responses into structured results or specific error types. It is used to retrieve information about existing transit gateways, such as their configuration and state, directly from AWS EC2 APIs.",
      "description_length": 360,
      "index": 2267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeExportImageTasks",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe EC2 export image tasks by converting input requests to HTTP format and parsing responses. It works with input type `DescribeExportImageTasksRequest.t` and output type `DescribeExportImageTasksResult.t`, along with internal error types for handling failures. It is used to retrieve details about ongoing or completed image export tasks in EC2, such as task IDs, statuses, and export locations.",
      "description_length": 437,
      "index": 2268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CopyFpgaImage",
      "library": "aws-ec2",
      "description": "This module handles copying FPGA images in EC2 by converting native requests into properly signed HTTP queries and decoding responses. It works directly with `CopyFpgaImageRequest` and `CopyFpgaImageResult` types, along with internal EC2 error types for handling failures. Use this module when implementing logic to replicate FPGA images across regions or accounts, ensuring correct request signing and response parsing.",
      "description_length": 420,
      "index": 2269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an internet gateway in AWS EC2 by defining the request structure, converting it to an HTTP request, and parsing responses or errors. It works with the `DeleteInternetGatewayRequest` type for input and returns no output on success, using `Errors_internal` for error handling. Concrete use cases include removing an internet gateway from a VPC and ensuring proper request signing and endpoint routing during the API call.",
      "description_length": 455,
      "index": 2270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.AssociateSubnetCidrBlock",
      "library": "aws-ec2",
      "description": "This module handles associating a CIDR block with a subnet in EC2. It provides functions to convert input to an HTTP request and parse HTTP responses into outputs or errors. It works directly with EC2 CIDR block association requests and results, handling errors specific to this operation.",
      "description_length": 289,
      "index": 2271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateTrafficMirrorSession",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 Traffic Mirror sessions by defining the request and response types specific to the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with AWS EC2 Traffic Mirror session configuration data, including identifiers for source and target network interfaces, filter rules, and session properties. Concrete use cases include capturing and analyzing network traffic for security monitoring, troubleshooting, and compliance auditing in virtual private clouds.",
      "description_length": 575,
      "index": 2272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateFpgaImage",
      "library": "aws-ec2",
      "description": "This module handles the creation of FPGA images in EC2 by defining the request and response types, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with EC2-specific input and output structures, including error handling tailored to FPGA image creation. Concrete use cases include initiating an FPGA image build from a hardware design and processing the resulting image ID or failure reasons.",
      "description_length": 448,
      "index": 2273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCustomerGateways",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe customer gateways, converting input parameters into an HTTP request and parsing responses or errors from the server. It works with input and output types specific to the DescribeCustomerGateways operation, including request filters and gateway descriptions. Use this module to query AWS EC2 for information about configured customer gateways, handling both successful responses and API-specific errors.",
      "description_length": 451,
      "index": 2274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfaces",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to describe network interfaces, converting input requests to HTTP format and parsing responses or errors from the server. It works with EC2-specific request and response types, including filters for querying network interface data. Use this module to retrieve detailed information about network interfaces in an EC2 environment, such as their status, associated instances, or security groups.",
      "description_length": 429,
      "index": 2275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisableTransitGatewayRouteTablePropagation",
      "library": "aws-ec2",
      "description": "This module disables propagation from a transit gateway route table to a specified attachment. It handles the conversion of input parameters into an HTTP request and parsing of responses, including errors, for the EC2 service. Use this module to manage route table propagation settings in AWS EC2 transit gateways programmatically.",
      "description_length": 331,
      "index": 2276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcs",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeVpcs` API call in AWS EC2, converting input requests to properly signed HTTP queries and parsing responses into structured results or errors. It works with `DescribeVpcsRequest` and `DescribeVpcsResult` types to retrieve information about virtual private clouds (VPCs), such as their IDs, CIDR blocks, and associated metadata. It is used to programmatically inspect VPC configurations, supporting automation and network management workflows.",
      "description_length": 474,
      "index": 2277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteTransitGatewayPrefixListReference",
      "library": "aws-ec2",
      "description": "This module handles the deletion of transit gateway prefix list references in AWS EC2. It works with input and output types specific to the DeleteTransitGatewayPrefixListReference operation, along with internal EC2 error types. It is used to construct and sign HTTP requests for this specific API call, parse responses into appropriate success or error outcomes, and validate AWS errors against expected specifications.",
      "description_length": 419,
      "index": 2278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteKeyPair",
      "library": "aws-ec2",
      "description": "This module deletes an EC2 key pair by sending a signed HTTP request to the AWS EC2 service. It handles request construction, signing, and response parsing, specifically for the DeleteKeyPair operation. Use cases include removing unused key pairs or cleaning up resources during infrastructure teardown.",
      "description_length": 303,
      "index": 2279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateSubnet",
      "library": "aws-ec2",
      "description": "This module handles creating subnets in AWS EC2 by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with `CreateSubnetRequest` and `CreateSubnetResult` structures, encoding them into HTTP queries and decoding responses. Concrete use cases include initiating subnet creation with specified VPC and CIDR block parameters, and handling EC2 API responses including errors like duplicate subnet ranges or unauthorized access.",
      "description_length": 508,
      "index": 2280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeAccountAttributes",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeAccountAttributes` API call in AWS EC2, converting input requests to HTTP format and parsing responses or errors from the service. It works with the `DescribeAccountAttributesRequest` and `DescribeAccountAttributesResult` types, along with internal error types for handling failures. It is used to retrieve account-specific metadata such as supported features, quotas, and attribute values directly from EC2.",
      "description_length": 441,
      "index": 2281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetLaunchTemplateData",
      "library": "aws-ec2",
      "description": "This module handles retrieving launch template data from EC2 by converting native input types into properly signed HTTP requests and parsing responses into structured outputs or errors. It works directly with `GetLaunchTemplateDataRequest` and `GetLaunchTemplateDataResult` types, along with internal EC2 error types. Use this module when programmatically fetching launch template configurations, such as during instance provisioning or template auditing workflows.",
      "description_length": 465,
      "index": 2282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.AllocateAddress",
      "library": "aws-ec2",
      "description": "This module handles the allocation of Elastic IP addresses in EC2 by defining the request and response types for the `AllocateAddress` API call. It provides functions to convert between native OCaml types and HTTP requests/responses, ensuring proper query encoding and response parsing. It is used to initiate and process the allocation of public IP addresses for EC2 instances programmatically.",
      "description_length": 395,
      "index": 2283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateFleet",
      "library": "aws-ec2",
      "description": "This module handles creating EC2 fleets by defining input and output types for fleet creation requests, along with error handling specific to AWS internal error formats. It includes functions to convert native request types to HTTP requests and parse HTTP responses into results or errors, ensuring proper encoding and decoding of AWS query format and XML responses. It is used to directly interface with the EC2 API for fleet provisioning tasks.",
      "description_length": 446,
      "index": 2284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RegisterTransitGatewayMulticastGroupMembers",
      "library": "aws-ec2",
      "description": "This module handles the registration of multicast group members in a transit gateway, specifically encoding requests and decoding responses for the associated AWS EC2 API call. It works with the `RegisterTransitGatewayMulticastGroupMembersRequest` and `RegisterTransitGatewayMulticastGroupMembersResult` types, along with internal error types for handling failures. It is used when managing multicast traffic in a virtual private cloud (VPC) by associating network interfaces with specific multicast groups.",
      "description_length": 507,
      "index": 2285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayPrefixListReferences",
      "library": "aws-ec2",
      "description": "This module handles retrieving references to prefix lists associated with AWS EC2 transit gateways. It works with input and output types defined in `Aws_ec2.Types` for the `GetTransitGatewayPrefixListReferences` API operation, along with internal error types for handling failures. The module converts input requests to properly signed HTTP queries and decodes HTTP responses into results or errors, using the EC2 service endpoint and AWS request signing version.",
      "description_length": 463,
      "index": 2286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyReservedInstances",
      "library": "aws-ec2",
      "description": "This module handles modifying reserved EC2 instances by sending a signed HTTP request with the provided modification parameters. It encodes input data into a query string format suitable for the EC2 API and decodes the response into a structured result or error. It is used to update the configuration of existing reserved instances, such as changing instance type or availability zone.",
      "description_length": 386,
      "index": 2287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyNetworkInterfaceAttribute",
      "library": "aws-ec2",
      "description": "This module handles modifying attributes of an EC2 network interface via the AWS API. It works with `ModifyNetworkInterfaceAttributeRequest` to configure settings like source/destination checks or security groups, and returns no output on success. Concrete use cases include disabling source/destination checks for NAT instances or attaching/modify interface permissions.",
      "description_length": 371,
      "index": 2288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVolumesModifications",
      "library": "aws-ec2",
      "description": "This module handles the conversion of input and output types for the EC2 DescribeVolumesModifications API call, including HTTP serialization and deserialization. It works with the DescribeVolumesModificationsRequest and DescribeVolumesModificationsResult types, translating them to and from HTTP requests and responses. It is used to interact with AWS EC2 to retrieve information about volume modifications, handling errors specific to that operation.",
      "description_length": 451,
      "index": 2289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifySnapshotAttribute",
      "library": "aws-ec2",
      "description": "This module modifies attributes of an EC2 snapshot, such as adding or removing create volume permissions. It works with snapshot IDs and attribute modifications, handling access control and ownership settings. Use it to adjust who can create volumes from a snapshot or to change snapshot visibility.",
      "description_length": 299,
      "index": 2290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpnConnectionRoute",
      "library": "aws-ec2",
      "description": "This module handles the creation of VPN connection routes in EC2 by defining the request structure, error types, and HTTP conversion logic. It works with EC2-specific types like `CreateVpnConnectionRouteRequest` and errors defined in `Aws_ec2.Errors_internal`. Concrete use cases include sending properly signed HTTP requests to add routes to a VPN connection and parsing API responses or errors from those requests.",
      "description_length": 416,
      "index": 2291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLocalGatewayRouteTableVpcAssociation",
      "library": "aws-ec2",
      "description": "This module handles the deletion of a local gateway route table VPC association in AWS EC2. It works with input and output types defined in the `Aws_ec2.Types` module, specifically `DeleteLocalGatewayRouteTableVpcAssociationRequest` and `DeleteLocalGatewayRouteTableVpcAssociationResult`, along with internal error types for failure handling. It provides functions to construct and send the appropriate HTTP request, parse responses, and handle errors specific to this operation.",
      "description_length": 479,
      "index": 2292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UnassignPrivateIpAddresses",
      "library": "aws-ec2",
      "description": "This module handles the unassignment of private IP addresses from EC2 network interfaces by defining the request structure, error responses, and HTTP serialization. It works directly with EC2-specific types like `UnassignPrivateIpAddressesRequest`, string identifiers for network interfaces, and AWS error formats. Concrete use cases include programmatically managing IP address allocations in EC2 instances or during network reconfiguration tasks.",
      "description_length": 448,
      "index": 2293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcTenancy",
      "library": "aws-ec2",
      "description": "This module handles modifying the tenancy of a VPC in AWS EC2 by converting native input into HTTP requests and parsing responses or errors. It works with `ModifyVpcTenancyRequest` and `ModifyVpcTenancyResult` types, along with internal EC2 errors. It is used to send properly signed EC2 API requests to change VPC tenancy settings and handle the resulting responses or errors.",
      "description_length": 377,
      "index": 2294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeSpotInstanceRequests",
      "library": "aws-ec2",
      "description": "This module handles describing EC2 spot instance requests by converting input parameters into signed HTTP requests and parsing responses into structured results or errors. It works with input type `DescribeSpotInstanceRequestsRequest.t`, output type `DescribeSpotInstanceRequestsResult.t`, and error type `Errors_internal.t`. Concrete use cases include querying the status of spot instance requests and handling AWS response decoding and error parsing specific to this operation.",
      "description_length": 479,
      "index": 2295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DeleteClientVpnRoute",
      "library": "aws-ec2",
      "description": "This module deletes a route from an AWS Client VPN endpoint by sending a signed HTTP request to the EC2 service. It encodes a route deletion request into an HTTP query and decodes the response, handling success or error states specific to route deletion. Use this module to remove unwanted or outdated routes from a Client VPN configuration programmatically.",
      "description_length": 358,
      "index": 2296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachVolume",
      "library": "aws-ec2",
      "description": "This module handles detaching EBS volumes from EC2 instances by converting native requests into properly signed HTTP queries and parsing responses into structured volume attachment data or errors. It works directly with `DetachVolumeRequest` inputs, producing HTTP requests and handling XML-based error responses with status code validation. Concrete use cases include programmatically managing volume detachment workflows and handling EC2 API responses in deployment or resource management tools.",
      "description_length": 497,
      "index": 2297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateTransitGatewayMulticastDomain",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of a transit gateway multicast domain in AWS EC2. It provides functions to convert between native OCaml types and HTTP requests/responses, specifically for the `DisassociateTransitGatewayMulticastDomain` API call. The module works with input and output types defined in the `Aws_ec2.Types` module, along with internal error handling specific to EC2 operations.",
      "description_length": 399,
      "index": 2298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeCarrierGateways",
      "library": "aws-ec2",
      "description": "This module handles the HTTP serialization and deserialization for EC2 carrier gateway description requests. It translates input requests to properly signed HTTP queries and decodes responses or errors from the server. It is used to retrieve information about carrier gateways in an EC2 environment by interacting directly with the AWS API over HTTP.",
      "description_length": 350,
      "index": 2299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLaunchTemplateVersions",
      "library": "aws-ec2",
      "description": "This module handles the deletion of specific versions of an EC2 launch template by converting native inputs into properly signed HTTP requests and parsing responses into structured outputs or errors. It works with EC2 launch template version identifiers, sending DELETE requests with encoded query parameters and handling XML-based error responses. Concrete use cases include removing outdated or unused launch template versions to manage instance configurations efficiently.",
      "description_length": 475,
      "index": 2300,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.RevokeSecurityGroupIngress",
      "library": "aws-ec2",
      "description": "This module handles revoking ingress rules from EC2 security groups by converting native input types into properly signed HTTP requests and parsing responses or errors from AWS. It works directly with `RevokeSecurityGroupIngressRequest.t` for input and `RevokeSecurityGroupIngressResult.t` for output, along with EC2-specific error types. Concrete use cases include programmatically removing unauthorized or outdated inbound access rules from security groups within an AWS environment.",
      "description_length": 485,
      "index": 2301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CancelSpotInstanceRequests",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of spot instance requests in AWS EC2 by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to spot instance cancellation, along with error types returned by AWS. Concrete use cases include programmatically terminating pending or active spot instance requests and handling the resulting API responses or errors.",
      "description_length": 418,
      "index": 2302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeHosts",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve details about dedicated hosts, including filtering by host IDs or availability zones. It works with input requests and output responses structured according to the EC2 API specification. Use this module when querying host resource availability and status directly from AWS EC2.",
      "description_length": 326,
      "index": 2303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpnConnectionOptions",
      "library": "aws-ec2",
      "description": "This module handles modifying options for an EC2 VpnConnection by converting native input types into properly signed HTTP requests and parsing responses into result types. It works directly with `ModifyVpnConnectionOptionsRequest` and `ModifyVpnConnectionOptionsResult` structures, along with internal EC2 error types. It is used to send requests to the EC2 service endpoint with the correct query parameters and signature version, and to decode or handle errors from those requests.",
      "description_length": 483,
      "index": 2304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteSubnet",
      "library": "aws-ec2",
      "description": "This module handles the deletion of an EC2 subnet by defining the request structure, error responses, and HTTP serialization. It works with subnet identifiers and AWS error types, converting them to and from HTTP requests and responses. Concrete use cases include sending a delete request for a specific subnet and handling success or error responses from the AWS API.",
      "description_length": 368,
      "index": 2305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifySpotFleetRequest",
      "library": "aws-ec2",
      "description": "This module handles modifying an existing Spot Fleet request in AWS EC2 by providing functions to construct, send, and interpret the associated HTTP requests and responses. It works directly with `ModifySpotFleetRequestRequest` and `ModifySpotFleetRequestResponse` types, encoding inputs into properly formatted EC2 API queries and decoding responses or errors. Concrete use cases include adjusting the target capacity, replacing the launch specification, or terminating a Spot Fleet request programmatically.",
      "description_length": 509,
      "index": 2306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyVpcEndpointConnectionNotification",
      "library": "aws-ec2",
      "description": "This module modifies notifications for VPC endpoint connections by sending requests to update connection notification settings. It works with VPC endpoint connection notification IDs, notification targets, and event types. Use it to programmatically adjust which events trigger notifications and where those notifications are sent, such as disabling notifications for specific connection events or redirecting them to a new SNS topic.",
      "description_length": 434,
      "index": 2307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeManagedPrefixLists",
      "library": "aws-ec2",
      "description": "This module handles describing managed prefix lists in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the `DescribeManagedPrefixLists` operation, along with error handling for failed responses. It is used to retrieve information about managed prefix lists, such as their IDs, names, and associated metadata, from EC2.",
      "description_length": 390,
      "index": 2308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeClientVpnEndpoints",
      "library": "aws-ec2",
      "description": "This module handles describing AWS EC2 Client VPN endpoints by converting input requests into properly signed HTTP queries and parsing the responses. It works directly with `DescribeClientVpnEndpointsRequest` and `DescribeClientVpnEndpointsResult` types, along with internal error types for handling failures. It is used to retrieve information about configured Client VPN endpoints, such as their configuration, status, and associated clients.",
      "description_length": 444,
      "index": 2309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DetachInternetGateway",
      "library": "aws-ec2",
      "description": "This module handles detaching an internet gateway from a VPC in AWS EC2. It provides functions to convert native input to HTTP requests and parse responses, specifically working with `DetachInternetGatewayRequest` and handling errors from the EC2 service. Use this module to programmatically remove internet gateway associations in cloud infrastructure management tasks.",
      "description_length": 370,
      "index": 2310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteRouteTable",
      "library": "aws-ec2",
      "description": "This module handles the deletion of route tables in EC2 by converting native input into HTTP requests and parsing responses. It works with `DeleteRouteTableRequest` and `error` types, encoding requests into query format and decoding responses into unit or error results. It is used to interact directly with the EC2 API to remove route tables by ID.",
      "description_length": 349,
      "index": 2311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DisassociateIamInstanceProfile",
      "library": "aws-ec2",
      "description": "This module handles the disassociation of IAM instance profiles from EC2 instances by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works with structured types representing EC2 IAM instance profile disassociation requests and responses, including error handling specific to this operation. Concrete use cases include sending properly signed HTTP requests to the EC2 API to detach IAM roles from running instances and parsing the results or errors returned by the service.",
      "description_length": 547,
      "index": 2312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DeleteLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module implements the AWS EC2 API operation to delete a launch template by converting native inputs into properly signed HTTP requests and parsing responses into structured outputs or errors. It handles the `DeleteLaunchTemplateRequest` and `DeleteLaunchTemplateResult` data types, along with internal error types for failure conditions. It is used to directly interface with the EC2 service to remove a specified launch template by name or ID.",
      "description_length": 449,
      "index": 2313,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.GetTransitGatewayAttachmentPropagations",
      "library": "aws-ec2",
      "description": "This module handles the retrieval of transit gateway attachment propagations in AWS EC2. It works with transit gateway attachment propagation requests and responses, specifically querying and returning route table propagation details for a given transit gateway attachment. Use this module to inspect or manage route propagation settings between transit gateways and their associated VPCs or VPNs.",
      "description_length": 397,
      "index": 2314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNetworkAclEntry",
      "library": "aws-ec2",
      "description": "This module handles the creation of network ACL entries in EC2 by defining the request structure, HTTP conversion logic, and error parsing specific to that operation. It works directly with `CreateNetworkAclEntryRequest` as input and produces no output on success, using EC2 internal error types for failure cases. Concrete use cases include encoding ACL entry rules into signed HTTP requests and decoding EC2 API responses or errors after attempting to create an entry.",
      "description_length": 470,
      "index": 2315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateNatGateway",
      "library": "aws-ec2",
      "description": "This module handles creating a NAT gateway in AWS EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateNatGatewayRequest` and `CreateNatGatewayResult` types, encoding and decoding them using query parameters and XML. Concrete use cases include initiating a NAT gateway creation request and processing the resulting status or errors from the AWS API.",
      "description_length": 457,
      "index": 2316,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeInstances",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API call to retrieve instance information by converting input requests to HTTP format and parsing responses. It works with `DescribeInstancesRequest` and `DescribeInstancesResult` types to manage query parameters and decode results or errors from the AWS EC2 service. It is used to programmatically inspect running EC2 instances, including filtering by instance IDs or tags, and retrieving metadata like state, IP addresses, and associated resources.",
      "description_length": 478,
      "index": 2317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CancelImportTask",
      "library": "aws-ec2",
      "description": "This module handles the cancellation of an import task in EC2 by defining the request and response types, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with EC2 import task identifiers and AWS error types, ensuring proper encoding and decoding of API calls. Use this module when programmatically stopping an ongoing import task, such as halting a misconfigured or unnecessary VM import.",
      "description_length": 446,
      "index": 2318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeNetworkInterfacePermissions",
      "library": "aws-ec2",
      "description": "This module handles describing network interface permissions in EC2 by sending and processing HTTP requests. It works with input and output types specific to the DescribeNetworkInterfacePermissions operation, along with error types defined in the EC2 service. It is used to retrieve information about which AWS accounts or services have permission to attach or reference a network interface.",
      "description_length": 391,
      "index": 2319,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateNetworkAcl",
      "library": "aws-ec2",
      "description": "This module handles the creation of EC2 network ACLs by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with `CreateNetworkAclRequest` and `CreateNetworkAclResult` types, encoding and decoding them according to the EC2 API specification. Concrete use cases include integrating with AWS SDK tooling to programmatically set up network access control lists within a VPC.",
      "description_length": 461,
      "index": 2320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ImportImage",
      "library": "aws-ec2",
      "description": "This module handles the conversion and parsing of requests and responses for importing images in EC2. It works with `ImportImageRequest` and `ImportImageResult` types, along with internal error types, to encode and decode HTTP requests and responses. It is used to construct signed HTTP requests for image imports and to interpret the results or errors returned by the EC2 service.",
      "description_length": 381,
      "index": 2321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeClassicLinkInstances",
      "library": "aws-ec2",
      "description": "This module handles describing ClassicLink instances in EC2 by converting input requests to HTTP format and parsing responses. It works with input and output types specific to the DescribeClassicLinkInstances operation, along with error handling tailored to EC2 service responses. Use this module to query information about linked VPC instances associated with EC2 instances.",
      "description_length": 375,
      "index": 2322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeImageAttribute",
      "library": "aws-ec2",
      "description": "This module handles the EC2 API operation to retrieve specific attributes of an Amazon Machine Image (AMI), such as launch permissions or product codes. It works with the `DescribeImageAttributeRequest` input type and returns an `ImageAttribute` output, supporting query-style HTTP serialization and deserialization. Use this module to programmatically inspect AMI metadata, for example, to verify ownership or shared access settings of an image.",
      "description_length": 446,
      "index": 2323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
      "library": "aws-ec2",
      "description": "This module handles the conversion of inputs and outputs for the EC2 API call that describes associations between local gateway route tables and virtual interface group resources. It works with structured request and response types defined in the `Aws_ec2.Types` module, along with error handling specific to this operation. It is used when querying AWS to retrieve details about these network associations in a format compatible with the AWS SDK's internal request pipeline.",
      "description_length": 475,
      "index": 2324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcEndpoints",
      "library": "aws-ec2",
      "description": "This module handles describing VPC endpoints in EC2 by converting input requests to HTTP format and parsing responses. It works with `DescribeVpcEndpointsRequest` and `DescribeVpcEndpointsResult` types, along with internal EC2 errors. It is used to send DescribeVpcEndpoints API calls and process their results or errors.",
      "description_length": 321,
      "index": 2325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.UpdateSecurityGroupRuleDescriptionsEgress",
      "library": "aws-ec2",
      "description": "This module updates descriptions for egress rules of a security group in EC2. It handles requests via HTTP conversion, signing, and service endpoint configuration, working with structured input and output types defined in the EC2 SDK. Use it to modify rule metadata without altering rule behavior, such as updating documentation for outbound traffic rules.",
      "description_length": 356,
      "index": 2326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.CreateCustomerGateway",
      "library": "aws-ec2",
      "description": "This module handles the creation of customer gateways in EC2 by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with EC2-specific input and output types, such as `CreateCustomerGatewayRequest` and `CreateCustomerGatewayResult`. Use this module when configuring a customer gateway for a Site-to-Site VPN connection in AWS EC2.",
      "description_length": 419,
      "index": 2327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.GetAssociatedIpv6PoolCidrs",
      "library": "aws-ec2",
      "description": "This module handles retrieving IPv6 CIDR blocks associated with an EC2 IPv6 pool. It works with EC2-specific request and response types, including structured input for querying and parsing XML-based error responses. It is used to manage and inspect IPv6 address allocations in AWS EC2 environments.",
      "description_length": 298,
      "index": 2328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeVpcClassicLink",
      "library": "aws-ec2",
      "description": "This module handles the `DescribeVpcClassicLink` API call in AWS EC2, allowing users to retrieve information about whether a VPC is enabled for ClassicLink. It works with the `DescribeVpcClassicLinkRequest` and `DescribeVpcClassicLinkResult` types, encoding requests into HTTP format and decoding responses or errors from the service. Use this module when querying the ClassicLink status of VPCs within an AWS account.",
      "description_length": 418,
      "index": 2329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.StopInstances",
      "library": "aws-ec2",
      "description": "This module handles stopping EC2 instances by converting native requests into properly signed HTTP queries and parsing responses. It works with `StopInstancesRequest` and `StopInstancesResult` types, along with internal error types for failure handling. Concrete use cases include encoding stop instance requests with correct AWS signing, sending them to the EC2 endpoint, and decoding the results or errors from the service response.",
      "description_length": 434,
      "index": 2330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.DescribeIpv6Pools",
      "library": "aws-ec2",
      "description": "This module handles the conversion of IPv6 pool description requests to HTTP queries and parses responses or errors from AWS EC2. It works with `DescribeIpv6PoolsRequest` and `DescribeIpv6PoolsResult` types, along with internal EC2 error types. It is used to send requests to the EC2 service, encode them into HTTP format, and decode the responses or handle specific AWS errors.",
      "description_length": 378,
      "index": 2331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeScheduledInstances",
      "library": "aws-ec2",
      "description": "This module handles describing scheduled EC2 instances by converting input requests into properly signed HTTP queries and parsing responses. It works with `DescribeScheduledInstancesRequest` and `DescribeScheduledInstancesResult` types, along with internal EC2 error types. Use this module to retrieve details about scheduled EC2 instances, including their configuration and state, by making direct API calls with proper AWS signing.",
      "description_length": 433,
      "index": 2332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_ec2.ModifyVpnTunnelCertificate",
      "library": "aws-ec2",
      "description": "This module handles modifying the certificate for a specific VPN tunnel in an AWS EC2 environment. It works with `ModifyVpnTunnelCertificateRequest` and `ModifyVpnTunnelCertificateResult` types, along with internal error types for handling failures. It provides functions to convert requests to HTTP format, parse responses, and decode errors specific to this operation.",
      "description_length": 370,
      "index": 2333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeTransitGatewayPeeringAttachments",
      "library": "aws-ec2",
      "description": "This module handles the HTTP communication lifecycle for querying AWS EC2 transit gateway peering attachments. It translates input requests into properly signed HTTP queries and decodes responses into structured results or specific API errors. It works directly with EC2 transit gateway peering attachment request and result types, enabling precise filtering and retrieval of peering attachment data from AWS.",
      "description_length": 409,
      "index": 2334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.ModifyLaunchTemplate",
      "library": "aws-ec2",
      "description": "This module handles modifying EC2 launch templates by converting native input into HTTP requests and parsing responses into outputs or errors. It works with `ModifyLaunchTemplateRequest` and `ModifyLaunchTemplateResult` types, along with internal EC2 errors. It is used to update launch template configurations programmatically, such as changing instance types or user data.",
      "description_length": 374,
      "index": 2335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.CreateVpc",
      "library": "aws-ec2",
      "description": "This module handles the creation of a Virtual Private Cloud (VPC) in AWS EC2 by defining the request and response types, along with functions to serialize the request into an HTTP call and deserialize the response or error. It works directly with `CreateVpcRequest` and `CreateVpcResult` data structures, encoding them into query parameters and parsing XML responses. Concrete use cases include initiating a VPC with a specified CIDR block and handling the resulting VPC metadata or error responses from the EC2 API.",
      "description_length": 516,
      "index": 2336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.RevokeSecurityGroupEgress",
      "library": "aws-ec2",
      "description": "This module handles revoking egress rules from EC2 security groups by defining the request and response types for the operation. It works with EC2-specific input and output structures, including encoded query parameters and XML-parsed results. Concrete use cases include modifying network access policies for EC2 instances by removing outbound rule entries based on IP ranges, protocols, or port ranges.",
      "description_length": 403,
      "index": 2337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2.DescribeFastSnapshotRestores",
      "library": "aws-ec2",
      "description": "This module handles the API call to describe fast snapshot restores in EC2. It accepts a request type that includes filters and region-specific identifiers, and returns a response containing details about the status of fast snapshot restores. It is used to check the availability and state of optimized snapshot restores for EBS volumes in specific regions.",
      "description_length": 357,
      "index": 2338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_ec2",
      "library": "aws-ec2",
      "description": "This module provides operations for creating, configuring, and deleting AWS EC2 resources such as virtual networks (VPCs, subnets, transit gateways), storage (EBS volumes, snapshots), and compute instances, while managing networking attributes like security groups, IP addressing, and routing tables. It works with OCaml types representing AWS resource identifiers, request/response payloads, and error structures, using HTTP serialization to interact with EC2's API for tasks like infrastructure provisioning, network security rule enforcement, and storage lifecycle management. Specific use cases include automating cloud network topology setup, managing instance reservations, and configuring hybrid cloud connectivity via transit gateways or peering connections.",
      "description_length": 766,
      "index": 2339,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2340,
    "meaningful_modules": 2340,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 766,
    "min_description_length": 219,
    "avg_description_length": 387.97478632478635,
    "embedding_file_size_mb": 33.90542125701904
  }
}