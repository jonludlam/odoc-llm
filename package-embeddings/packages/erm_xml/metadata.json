{
  "package": "erm_xml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 63,
  "creation_timestamp": "2025-06-18T16:43:35.547950",
  "modules": [
    {
      "module_path": "XmllexerI2.M.E",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values corresponding to Unicode code points, generating a sequence of bytes as characters. Used to convert specific Unicode values into their byte representation for encoding purposes.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.M.S",
      "description": "Provides monadic operations for sequencing computations, handling errors, and managing a stream of characters. Works with a stream type that tracks position and a monadic type wrapping values with location information. Used to parse input by advancing through characters, handling failures, and setting decoding strategies.",
      "description_length": 323,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.M.X",
      "description": "Generates structured tokens for XML parsing, including tags, text, and special markers like EOF and DOCTYPE. Operates on strings, lists of attributes, and custom doctype data to construct token objects. Used to build a stream of parsed elements for downstream processing in an XML pipeline.",
      "description_length": 290,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI2.Input.D",
      "description": "Decodes UTF-8 encoded byte sequences into integers representing Unicode code points. It processes input as a stream of bytes using an iterator monad. This is useful for parsing text data from binary sources like network streams or file buffers.",
      "description_length": 244,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.M.E",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values in the range of valid Unicode code points. Used to generate UTF-8 byte sequences for text encoding in network protocols.",
      "description_length": 233,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.M.S",
      "description": "Provides monadic operations for sequencing computations, handling errors, and managing stream state. Works with stream data structures and wrapped values for error-prone parsing tasks. Enables character-level stream traversal with custom error handling and decoder configuration.",
      "description_length": 279,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.M.X",
      "description": "Generates structured tokens for XML parsing, including tags, text, and special markers like PI and DOCTYPE. Operates on strings, lists of attributes, and XML-specific data types. Used to construct a stream of parsed elements for downstream processing.",
      "description_length": 251,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.Input.D",
      "description": "Decodes UTF-8 encoded byte sequences into integers representing Unicode code points. It processes input as a stream using the IterMonad type, handling incomplete or invalid sequences gracefully. This is useful for parsing text data from binary sources like network streams or file buffers.",
      "description_length": 289,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer_generic.Make.E",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values corresponding to Unicode code points, generating a sequence of bytes. Used to convert characters from a numeric representation into their byte-level UTF-8 form for serialization or transmission.",
      "description_length": 307,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer_generic.Make.S",
      "description": "Provides monadic operations for sequencing computations, handling errors, and managing stateful streams. Works with stream data structures and computations that return values or raise exceptions. Used to parse input by advancing through characters and handling decoding configurations.",
      "description_length": 285,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer_generic.Make.X",
      "description": "Emits structured tokens for HTML elements, including start and end tags, text, doctype, and end-of-file markers, with support for attributes and string encoding. Operates on strings, attribute lists, and a custom token type derived from a generic stream type. Used to construct parsed HTML output for rendering or serialization pipelines.",
      "description_length": 338,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.M.E",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values corresponding to Unicode code points, generating a sequence of bytes as characters. Used to convert specific Unicode values into their byte representation for encoding purposes.",
      "description_length": 290,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.M.S",
      "description": "Provides monadic operations for sequencing computations, including binding and error handling, along with functions for managing a stream of characters. Works with a stream type representing a sequence of bytes and a monadic type wrapping values or errors. Used to parse input by advancing through a stream, handling errors, and decoding data from byte sequences.",
      "description_length": 363,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.M.X",
      "description": "Generates structured tokens for XML processing, including start and end tags, text, DOCTYPE declarations, and end-of-file markers. Operates on strings, lists of attribute pairs, and custom doctype values to construct token representations. Used to build a sequence of tokens for parsing or serialization workflows.",
      "description_length": 314,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.Input.D",
      "description": "Decodes a stream of characters into a UTF-8 encoded integer using a custom monadic type. It processes character streams and returns an optional integer wrapped in a monad. This is used to parse encoded input in network protocols or file formats.",
      "description_length": 245,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.M.E",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values corresponding to Unicode code points, producing a sequence of bytes as characters. Used to generate UTF-8 byte sequences for text encoding in protocols requiring binary representation.",
      "description_length": 297,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.M.S",
      "description": "Provides monadic operations for sequencing computations with error handling, including binding, lifting values, and failure propagation. Works with stream data structures and character-based parsing logic. Used to manage stateful parsing workflows, such as reading from a stream and handling unexpected input with custom error recovery.",
      "description_length": 336,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.M.X",
      "description": "Generates structured tokens for XML parsing, including start and end tags, text, doctype declarations, and end-of-file markers. Operates on strings, lists of attribute pairs, and doctype values to construct typed tokens. Used to build a stream of parsed XML elements for further processing.",
      "description_length": 290,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.IterMonad",
      "description": "Provides operations to manage and sequence input processing, including creating empty chunks and streams, checking emptiness, and binding computations. Works with input records, data structures, and a monadic type 'a t for chaining operations. Used to handle character streams and error propagation in parsing or data processing pipelines.",
      "description_length": 339,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.Decoder",
      "description": "Provides monadic operations for parsing, including binding, lifting, and failure handling, with support for character stream traversal. Works with a custom `t` type representing parsing states and a `stream` type for input sequences. Used to build recursive descent parsers that process input incrementally and recover from errors.",
      "description_length": 331,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI2.Input",
      "description": "Encodes and decodes UTF-8 byte sequences, converting between byte streams and Unicode code points. It supports streaming operations through an iterator monad, enabling efficient processing of large or continuous data sources. Operations include reading bytes, advancing the stream, and extracting code points. This allows for parsing text from binary inputs such as network packets or file contents.",
      "description_length": 399,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI2.Encoding",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 encoding. Processes integer values corresponding to Unicode code points and returns the byte sequence. Used to generate UTF-8 byte sequences for text encoding in network protocols or file formats.",
      "description_length": 274,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.LocatedStream",
      "description": "Provides operations to manage a stream of characters, including fetching the next character, handling errors, and binding computations. Works with custom types like stream, input, and data, and supports decoding and error recovery. Used to process character data incrementally, such as parsing input sources or handling network streams.",
      "description_length": 336,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.XmlStanza",
      "description": "Provides monadic operations for building and manipulating XML stanzas, including lifting values into the monad, chaining computations, and handling errors. Works with a generic monadic type 'a t that encapsulates XML elements and attributes. Used to construct complex XML messages in a structured, error-resistant manner within protocol implementations.",
      "description_length": 353,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2.X",
      "description": "Handles XML serialization by emitting start tags, end tags, doctype declarations, processing instructions, and text content. Operates on strings, XML doctype structures, and a monadic data type representing optional parsed XML data. Used to construct and output structured XML streams in a controlled, step-by-step manner.",
      "description_length": 322,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI2.M",
      "description": "Encodes Unicode code points into UTF-8 byte sequences, processes character streams with error handling and position tracking, and generates XML tokens from input strings. Operates on integers, character streams, and XML data structures, enabling encoding, parsing, and tokenization workflows. Converts code points to bytes, sequences computations with location-aware monads, and constructs XML elements from raw input. Supports tasks like encoding Unicode text, parsing structured data, and building XML pipelines.",
      "description_length": 514,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.IterMonad",
      "description": "Provides operations to manage and chain input processing, including creating empty chunks and streams, checking emptiness, and sequencing computations with `bind` and `>>=`. Works with input sources, data buffers, and monadic values encapsulating character options. Used to build parsers or stream processors that handle partial or incomplete data gracefully.",
      "description_length": 359,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.Decoder",
      "description": "Provides monadic operations for parsing, including binding, lifting, and failure handling, working with stream data and optional characters. Processes input incrementally, supporting error recovery and stateful extraction. Used to build parsers that consume and validate character streams in sequence.",
      "description_length": 301,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.Input",
      "description": "Encodes and decodes UTF-8 byte sequences, converting between byte streams and Unicode code points using a stream-based approach. It supports incremental processing with the IterMonad type, allowing for robust handling of malformed or incomplete data. Operations include decoding bytes into integers and encoding integers back into byte sequences. This enables efficient text parsing from binary sources, such as extracting characters from a network packet or file buffer.",
      "description_length": 471,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.Encoding",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 byte sequence. Processes integer values corresponding to Unicode code points, generating a list of char values. Used to convert specific Unicode characters into their byte representation for encoding purposes.",
      "description_length": 287,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.LocatedStream",
      "description": "Provides operations to manage a stream of characters, including fetching the next character, handling errors, and binding computations. Works with custom types for input, data, streams, and character options. Used to process encoded data incrementally, decode streams, and handle malformed input during parsing.",
      "description_length": 311,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI.XmlStanza",
      "description": "Provides monadic operations for building and manipulating XML stanzas, including sequencing with >>= and lifting values with return. Works with a polymorphic type 'a t that represents XML elements or fragments. Used to construct and transform XML structures in a composable, error-handling manner.",
      "description_length": 297,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerI.X",
      "description": "Emits XML elements, including start tags with attributes, end tags, doctype declarations, processing instructions, and text content, all within a monadic context. Operates on strings, attribute lists, and XML-specific data types like doctype and tokens. Used to construct and output structured XML streams in a controlled, step-by-step manner.",
      "description_length": 343,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI.M",
      "description": "Encodes Unicode code points into UTF-8 byte sequences, processes stream data with error handling and state management, and generates XML tokens from input strings. Operates on integers, streams, and XML-specific data structures, supporting encoding, parsing, and tokenization. Converts code points to bytes for network transmission, manages error-prone stream operations, and constructs XML element streams. Enables low-level text encoding, robust stream processing, and structured XML analysis.",
      "description_length": 495,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml.Serialization",
      "description": "Provides functions to manage XML namespaces, bind prefixes, and serialize elements and attributes into strings. Works with types like namespace, qname, attribute, and element. Used to generate properly formatted XML output with namespace handling and custom serialization logic.",
      "description_length": 278,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Light_xml.X",
      "description": "Emits XML elements, including start tags with attributes, end tags, doctype declarations, processing instructions, and text content, all within a monadic context. Operates on XML data structures and token representations, returning optional values wrapped in a unit monad. Used to construct and validate XML streams during parsing or generation.",
      "description_length": 345,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Light_xml.S",
      "description": "Provides monadic operations for sequencing computations, handling errors, and managing character streams. Works with stream structures derived from XML input sources and supports custom decoder configurations. Used to parse and process XML data by advancing through characters and handling parsing errors explicitly.",
      "description_length": 316,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Light_xml.Serialization",
      "description": "Converts attributes to strings, serializes lists with custom element formatting, and handles element serialization with callback functions. Works with tuples, lists, and custom element types. Used to generate XML-like output from structured data and append serialized content to a buffer.",
      "description_length": 288,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer_generic.XName",
      "description": "Checks if a Unicode code point is a valid starting or continuing character for an XML name. Operates on integer representations of characters, ensuring proper validation for name components in XML parsing. Used to filter and process character streams during XML document analysis.",
      "description_length": 280,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer_generic.Make",
      "description": "Provides monadic operations for sequencing computations, including binding and error handling, along with functions for managing a stream-based parser. Works with a custom `t` type for wrapped values and a `stream` type representing input data. Used to parse input incrementally, handle errors during parsing, and manage decoder state for specific string patterns.",
      "description_length": 364,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.UnitMonad",
      "description": "Performs sequencing of computations with explicit failure handling, where `return` wraps values and `fail` aborts with an exception. Operates on a type `t` that is isomorphic to its underlying value. Used to manage control flow in scenarios requiring early termination, such as parsing or validation pipelines.",
      "description_length": 310,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.Decoder",
      "description": "Provides monadic operations for parsing, including binding, lifting values, and failing with exceptions. Works with a stream type to process character-based input incrementally. Used to build parsers that consume input and return parsed values or errors.",
      "description_length": 254,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.Input",
      "description": "Handles asynchronous input operations with a monadic interface, supporting chaining of actions and error handling. Works with a wrapped value type `'a t` to represent input computations. Enables structured reading of user input, parsing, and error recovery in command-line applications.",
      "description_length": 286,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.Encoding",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 byte sequence. Processes integer values corresponding to Unicode code points and returns a list of char values. Used to generate UTF-8 encoded byte sequences for characters outside the ASCII range.",
      "description_length": 275,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.LocatedStream",
      "description": "Provides functions to decode data from a stream using a specified string format, returning an optional integer result. Operates on custom stream types and monadic structures for error handling. Used to parse structured data sequences such as binary protocols or log entries.",
      "description_length": 274,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer.XmlStanza",
      "description": "Provides monadic operations for building and manipulating XML stanzas, including lifting values into the monad, chaining computations, and handling errors. Works with a generic monadic type 'a t that encapsulates XML elements and attributes. Used to construct XML messages in a structured, error-resistant manner within protocol implementations.",
      "description_length": 345,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.LS",
      "description": "Provides monadic operations for sequencing computations, handling errors, and managing stream-based input. Works with stream structures derived from input sources and supports custom decoder configurations. Used to parse structured data by advancing through characters and handling failures during processing.",
      "description_length": 309,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.M",
      "description": "Encodes Unicode code points into UTF-8 byte sequences, processes streams of bytes with monadic error handling, and generates XML token structures from input. Operates on integers, byte streams, and string-based data to produce encoded output, parse structured data, and represent XML elements. Converts code points to bytes, advances through character streams while managing errors, and constructs tokens for XML parsing or generation. Supports tasks like encoding special characters, parsing byte sequences with error recovery, and building tokenized XML structures.",
      "description_length": 567,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xmllexer.X",
      "description": "Emits XML elements, including start tags with attributes, end tags, doctype declarations, processing instructions, and text content, all within a monadic context. Operates on strings, attribute lists, and XML-specific data types like doctype and tokens. Used to construct and output structured XML documents programmatically.",
      "description_length": 325,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.IterMonad",
      "description": "Provides operations to manage input processing in a monadic style, including creating chunks of data, checking if input is exhausted, and sequencing computations with bind. Works with input records and a monadic type that encapsulates optional values and error handling. Used to process streaming data in a controlled, error-aware manner, such as parsing network packets or reading from a file in segments.",
      "description_length": 406,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.Encoding",
      "description": "Encodes a Unicode code point into a list of characters representing its UTF-8 byte sequence. Processes integer values corresponding to Unicode code points and returns the encoded byte representation. Used to convert individual Unicode characters into their byte-level encoding for serialization or transmission.",
      "description_length": 311,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.LocatedStream",
      "description": "Provides operations to manage a stream of input data, including creating chunks, checking emptiness, and binding computations. Works with input records, stream objects, and monadic values to handle character retrieval and decoding. Used to process binary data incrementally, decode streams, and manage error states during parsing.",
      "description_length": 330,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerE.XmlStanza",
      "description": "Provides monadic operations for building and manipulating XML stanzas, including lifting values into the monad, chaining computations, and handling errors. Works with a generic monadic type 'a t that encapsulates XML elements and attributes. Used to construct XML messages in a structured, error-resistant manner within protocol implementations.",
      "description_length": 345,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmllexerE.X",
      "description": "Emits XML elements, including start tags with attributes, end tags, doctype declarations, processing instructions, and text content, all within a monadic context. Operates on strings, attribute lists, and XML-specific data types like doctype and tokens. Used to construct and output structured XML streams in a controlled, step-by-step manner.",
      "description_length": 343,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE.M",
      "description": "Encodes Unicode code points into UTF-8 byte sequences, handles error-prone stream parsing with monadic operations, and generates XML token structures from input strings. Processes integers, streams, and strings to produce byte lists, error-resistant computation chains, and typed XML elements. Supports tasks like encoding text for network protocols, parsing structured data with robust error handling, and constructing XML element streams. Enables low-level binary encoding, stateful parsing workflows, and XML document analysis.",
      "description_length": 530,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "erm_xml",
      "description": "Provides functions to parse and generate XML documents, including element creation, attribute handling, and text node manipulation. Works with custom XML node types and attribute lists. Used to transform structured data into XML format for configuration files and data exchange.",
      "description_length": 278,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI2",
      "description": "Combines input management, parsing, and XML processing with monadic workflows, handling character and byte streams, UTF-8 encoding, and XML tokenization. Supports operations like stream sequencing, error recovery, and stateful parsing using types such as 'a t, stream, and XML data structures. Enables tasks like decoding UTF-8 from binary data, building XML elements incrementally, and processing text with position tracking. Processes input in a modular, composable way, allowing for efficient and structured handling of text and XML data.",
      "description_length": 541,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerI",
      "description": "Manages character and byte streams with monadic operations for parsing, encoding, and XML construction. Handles UTF-8 decoding and encoding, processes incremental input, and constructs XML elements with tags, attributes, and content. Supports error recovery, stateful extraction, and stream sequencing using bind and return. Enables tasks like parsing network data, generating XML output, and converting Unicode code points to byte sequences.",
      "description_length": 442,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml",
      "description": "Manages XML namespaces, prefixes, and serialization with types such as namespace, qname, attribute, and element. Offers functions to bind prefixes, format elements, and convert structures to strings while preserving namespace integrity. Enables creation of custom XML outputs with controlled namespace declarations and element formatting. Examples include generating XML with prefixed elements, serializing attributes with namespace bindings, and handling complex namespace hierarchies.",
      "description_length": 486,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Light_xml",
      "description": "creates XML elements, attributes, and streams using monadic operations, supporting both generation and parsing with error handling and custom configurations. it handles XML data structures, character streams, and serialization of structured data into formatted output. functions include emitting tags, processing instructions, and serializing attributes or lists with callbacks. examples include building valid XML documents, parsing streams with custom decoders, and generating output from custom data types.",
      "description_length": 509,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer_generic",
      "description": "Encodes a Unicode code point into a list of characters. Processes UTF-8 encoding logic for individual code points. Used to generate valid XML character sequences from numeric Unicode values.",
      "description_length": 190,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmllexer",
      "description": "Encodes XML data by parsing strings into a stream of tokens, supporting incremental processing. It operates on strings and custom stream structures, returning results as a monadic type. Used to convert raw XML content into structured event sequences for further processing.",
      "description_length": 273,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XmllexerE",
      "description": "Manages input streams and XML construction through monadic abstractions, handling Unicode encoding, byte-level data processing, and structured XML emission. Key data types include input records, monadic values, Unicode code points, and XML elements, with operations for sequencing, encoding, and error handling. It enables tasks like parsing binary data, encoding text for transmission, and building XML documents step by step. Examples include converting code points to UTF-8, processing network packets in segments, and emitting XML tags with attributes in a controlled flow.",
      "description_length": 577,
      "index": 62,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 64,
    "meaningful_modules": 63,
    "filtered_empty_modules": 1,
    "retention_rate": 0.984375
  },
  "statistics": {
    "max_description_length": 577,
    "min_description_length": 190,
    "avg_description_length": 339.25396825396825,
    "embedding_file_size_mb": 0.2257518768310547
  }
}