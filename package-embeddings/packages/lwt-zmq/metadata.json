{
  "package": "lwt-zmq",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:52:04.070931",
  "modules": [
    {
      "module_path": "Lwt_zmq.Socket.Router",
      "library": "lwt-zmq",
      "description": "This module implements non-blocking message passing over ZeroMQ ROUTER sockets using Lwt for concurrency. It handles message routing by associating string identifiers with socket endpoints, allowing asynchronous communication between distributed components. Use cases include building event-driven microservices or peer-to-peer networks where low-latency, bidirectional messaging is required.",
      "description_length": 392,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_zmq.Monitor",
      "library": "lwt-zmq",
      "description": "Receives ZeroMQ monitoring events asynchronously on a dedicated socket. Works with `ZMQ.Monitor.event` values and Lwt threads. Useful for tracking socket state changes, like connection status or message activity, in non-blocking network applications.",
      "description_length": 250,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_zmq.Socket",
      "library": "lwt-zmq",
      "description": "This module wraps ZeroMQ sockets for non-blocking I/O with Lwt, providing asynchronous message transmission and reception. It supports both single and multi-part messaging with operations like `send`, `recv`, `send_all`, and `recv_all`, all without blocking the Lwt event loop. Direct use cases include implementing asynchronous network clients and servers that require integration with ZeroMQ's messaging patterns in an Lwt-based concurrency model.",
      "description_length": 449,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_zmq",
      "library": "lwt-zmq",
      "description": "This module integrates ZeroMQ with Lwt, enabling non-blocking socket communication and event monitoring. It provides asynchronous messaging operations through the Socket module and event tracking through the Monitor module. Concrete use cases include building event-driven network services and real-time communication systems.",
      "description_length": 326,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 449,
    "min_description_length": 250,
    "avg_description_length": 354.25,
    "embedding_file_size_mb": 0.05835247039794922
  }
}