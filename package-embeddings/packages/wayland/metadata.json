{
  "package": "wayland",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 272,
  "creation_timestamp": "2025-06-18T17:04:20.285343",
  "modules": [
    {
      "module_path": "Wayland.Wayland_proto.Wl_seat.Capability",
      "description": "Provides bitwise operations for managing seat capabilities using 32-bit integers. Includes constants for pointer, keyboard, and touch capabilities, and functions to convert between values and 32-bit integers. Used to check and manipulate available seat features in low-level system interactions.",
      "description_length": 295,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_seat.Error",
      "description": "Handles conversion between error values and 32-bit integers, enabling precise error code representation and retrieval. Works with the opaque type `t` that encapsulates seat-related error identifiers. Used to serialize and deserialize error states in communication with the Wayland seat protocol.",
      "description_length": 295,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_device_manager.Dnd_action",
      "description": "Provides bitmask operations for drag-and-drop actions, including constants for none, copy, move, and ask. Works with the int32 type to represent and manipulate action flags. Used to determine valid actions during drag-and-drop interactions, allowing compositors to select actions based on user input and modifier keys.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell_surface.Resize",
      "description": "Provides constants representing edge directions for resize operations, each as an int32 value. Supports conversion between int32 and an abstract type t. Used to determine cursor behavior and resize logic in graphical interfaces during user interaction.",
      "description_length": 252,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell_surface.Transient",
      "description": "Handles bitwise flags for transient surface behavior, providing operations to convert between opaque types and int32 values. Works with the int32 data type to represent specific transient state indicators. Used to set or query flags like inactive in window management requests.",
      "description_length": 277,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell_surface.Fullscreen_method",
      "description": "Handles conversion between a custom type and 32-bit integers, enabling precise control over fullscreen display settings. Works with the `t` type, representing compositor hints for surface scaling. Used to communicate specific fullscreen behavior to the compositor during window management.",
      "description_length": 289,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_source.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the abstract type `t` representing error states. Used to serialize error conditions in network protocols or binary data formats.",
      "description_length": 250,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_subsurface.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols or binary data formats.",
      "description_length": 248,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_offer.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_keyboard.Keymap_format",
      "description": "Converts between an opaque keymap representation and a 32-bit integer, enabling efficient serialization and deserialization of keyboard mapping data. Works with the `t` type, which encapsulates the format of keymaps used in Wayland client interactions. Used to transmit and reconstruct keymap information during the `wl_keyboard.keymap` event handling.",
      "description_length": 352,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_keyboard.Key_state",
      "description": "Represents the physical state of a key using an opaque type, with conversions to and from 32-bit integers. It supports encoding and decoding key states for low-level input handling. Used to track key press, release, and repeat events in hardware event processing.",
      "description_length": 263,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shm.Error",
      "description": "Handles conversion between error values and 32-bit integers. Works with the opaque type `t` representing Wayland shared memory errors. Used to serialize or deserialize error codes in protocol interactions.",
      "description_length": 205,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shm.Format",
      "description": "Provides conversion between pixel format representations and 32-bit integers. Works with opaque type `t` representing various pixel formats, including argb8888 and xrgb8888. Used to encode or decode format identifiers for graphics rendering and display protocols.",
      "description_length": 263,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer.Button_state",
      "description": "Converts between a button state representation and a 32-bit integer, enabling efficient storage and transmission. Operates on an opaque type representing the physical state of a hardware button. Used to serialize button events for logging or communication with low-level systems.",
      "description_length": 279,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer.Axis",
      "description": "Encodes and decodes axis values between an opaque type and 32-bit integers. Works with an abstract type representing scroll axis identifiers. Used to serialize axis data for event logging and deserialization in input handling.",
      "description_length": 226,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer.Axis_source",
      "description": "Provides conversion between an opaque type `t` and 32-bit integers. Works with a type representing different physical sources of axis events, such as fingers, wheels, or tilted wheels. Used to distinguish between scroll input methods, like continuous motion from a button or discrete steps from a mouse wheel.",
      "description_length": 309,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer.Axis_relative_direction",
      "description": "Encodes and decodes axis direction values as 32-bit integers, mapping physical motion directions to their corresponding numeric representations. Operates on a hidden type representing directional values relative to a pointer's axis. Used to interpret input device movements in low-level event handling.",
      "description_length": 302,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_surface.Error",
      "description": "Provides conversion between error values and 32-bit integers. Works with the opaque type `t` representing Wayland surface errors. Used to handle and translate error codes from Wayland surface operations into a numeric format for processing.",
      "description_length": 240,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_device.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize errors for logging or inter-process communication.",
      "description_length": 237,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_display.Error",
      "description": "Provides conversion between error values and 32-bit integers. Works with the abstract type `t` representing global error states. Used to encode and decode error conditions in server responses.",
      "description_length": 192,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_output.Subpixel",
      "description": "Provides conversion between a subpixel enumeration and 32-bit integers. Works with an abstract type representing subpixel geometry configurations. Used to serialize or deserialize subpixel layout data in low-level graphics processing.",
      "description_length": 234,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_output.Transform",
      "description": "Handles conversion between a transform representation and a 32-bit integer, enabling precise control over surface orientation. Operates on an opaque type representing rotation and mirroring transformations applied to graphical surfaces. Used to synchronize client rendering with compositor display settings, ensuring correct visual output on rotated or mirrored displays.",
      "description_length": 371,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_output.Mode",
      "description": "Provides bitwise operations for handling mode flags stored as 32-bit integers. Works with the `int32` type to encode and decode mode properties. Used to check or set specific mode attributes in event flags.",
      "description_length": 206,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_subcompositor.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols or binary data formats.",
      "description_length": 248,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_proto.Org_kde_kwin_server_decoration.Mode",
      "description": "Converts between a custom mode type and 32-bit integers, enabling efficient storage and transmission of mode values. Works with the opaque type `t` representing specific request and event modes. Used to serialize mode configurations for network protocols and deserialize incoming mode data.",
      "description_length": 290,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_proto.Org_kde_kwin_server_decoration_manager.Mode",
      "description": "Converts between a custom mode type and 32-bit integers, enabling precise control over request and event modes in system interactions. Works with the abstract type `t` representing specific operational states. Used to serialize and deserialize mode values in low-level protocol implementations.",
      "description_length": 294,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto.Zwp_pointer_constraints_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient representation and transmission of error states. Works with the opaque type `t` that encapsulates specific error conditions related to pointer constraints. Used to serialize errors in protocol interactions or system calls involving pointer constraints.",
      "description_length": 322,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto.Zwp_pointer_constraints_v1.Lifetime",
      "description": "Represents constraint lifetime semantics, converting between integer values and lifetime representations. It supports operations to encode and decode lifetime values using 32-bit integers. Used to manage how constraints are retained or released in system-level operations.",
      "description_length": 272,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_buffer_params_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize errors for logging or inter-process communication.",
      "description_length": 237,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_buffer_params_v1.Flags",
      "description": "Provides bitwise operations for manipulating 32-bit integer flags, including inversion, interlacing, and bottom-first ordering. Works with the int32 data type to represent and modify flag states. Used to adjust video frame rendering settings and serialize/deserialize flag configurations.",
      "description_length": 288,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_dmabuf_feedback_v1.Tranche_flags",
      "description": "Provides bitwise operations for manipulating 32-bit integers as flags, including conversion between opaque types and int32. Works with the int32 data type to represent and modify flag sets. Used to check and set specific bits in a system's state representation.",
      "description_length": 261,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_wm_base.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing specific error conditions. Used to serialize error states in network protocols or binary file formats.",
      "description_length": 257,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_surface.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_positioner.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_positioner.Anchor",
      "description": "Converts between a custom type and 32-bit integers, enabling precise numerical manipulation. Works with an abstract type representing numeric values. Used to serialize and deserialize numeric data in binary formats.",
      "description_length": 215,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_positioner.Gravity",
      "description": "Converts between a custom type and 32-bit integers, enabling efficient storage and transmission of values. Works with a hidden type representing numeric or identifier data. Used to serialize configuration keys and network protocol identifiers.",
      "description_length": 243,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_positioner.Constraint_adjustment",
      "description": "Provides operations to adjust a surface's position or size based on constraints, including sliding along axes, flipping anchor and gravity, and resizing. Works with 32-bit integers representing adjustment strategies. Used to ensure surfaces remain fully within a compositor's work area by applying specific adjustment rules during layout calculations.",
      "description_length": 351,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_popup.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_toplevel.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_toplevel.Resize_edge",
      "description": "Handles edge identifiers for resize operations, converting between opaque edge values and 32-bit integers. Works with the abstract type `t` representing specific edges of a surface. Used to track which edge is being manipulated during a resize, such as top, bottom, left, or right.",
      "description_length": 281,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_toplevel.State",
      "description": "Handles state transitions for window properties using integer-encoded state values. Operates on 32-bit integers to represent and convert between specific window states like maximized or fullscreen. Used to synchronize client and compositor state updates during configuration changes.",
      "description_length": 283,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_toplevel.Wm_capabilities",
      "description": "Converts between a custom type and 32-bit integers, enabling efficient storage and transmission of capability values. Works with the opaque type `t` representing system capabilities. Used to serialize and deserialize capability flags in low-level system interactions.",
      "description_length": 267,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_proto.Zxdg_toplevel_decoration_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols or binary data formats.",
      "description_length": 248,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_proto.Zxdg_toplevel_decoration_v1.Mode",
      "description": "Encodes and decodes window decoration modes between an opaque type and 32-bit integers. Operates on an abstract type representing mode configurations. Used to serialize mode settings for storage or transmission.",
      "description_length": 211,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_proto.Zwlr_screencopy_frame_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_proto.Zwlr_screencopy_frame_v1.Flags",
      "description": "Handles bitwise operations on 32-bit integers, including inversion of a specific bit. Converts between custom types and 32-bit integers for low-level manipulation. Used to manage hardware register flags or protocol bitfields.",
      "description_length": 225,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_proto.Wl_drm.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_proto.Wl_drm.Format",
      "description": "Converts between a custom type and 32-bit integers, enabling precise numeric handling. Works with the abstract type `t` and the built-in `int32` type. Used to serialize or deserialize numeric values in binary formats.",
      "description_length": 217,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_proto.Wl_drm.Capability",
      "description": "Encodes and decodes capability bitmasks using 32-bit integers. Operates on a custom type representing DRM capabilities. Converts between integer values and capability representations for low-level graphics access control.",
      "description_length": 221,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_surface_v1.Keyboard_interactivity",
      "description": "Handles conversion between a custom type representing keyboard interaction modes and 32-bit integers. Works with a sealed type encapsulating specific interaction rules for layer shell surfaces. Used to enforce exclusive keyboard focus or disable keyboard events in graphical applications.",
      "description_length": 288,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_surface_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing specific error conditions. Used to serialize error states in network protocols or binary file formats.",
      "description_length": 257,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_surface_v1.Anchor",
      "description": "Provides access to the top, bottom, left, and right values of a 32-bit integer, converting between 32-bit integers and other types while preserving their numeric value. Works with the int32 type and any type that can be safely cast to or from it. Used to extract and reconstruct specific bit ranges in low-level numeric processing tasks.",
      "description_length": 337,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_shell_v1.Error",
      "description": "Converts error values to and from 32-bit integers, enabling efficient storage and transmission of error codes. Works with the opaque type `t` representing error states. Used to serialize error conditions in network protocols and binary data formats.",
      "description_length": 249,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_shell_v1.Layer",
      "description": "Provides conversion between layer values and 32-bit integers. Works with an abstract type representing rendering layers for surfaces. Used to determine surface ordering in graphical interfaces, such as placing fullscreen windows at the top layer or standard windows between bottom and top layers.",
      "description_length": 296,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Proxy.Handler",
      "description": "Handles message dispatch for object types by collecting arguments and invoking typed virtual methods. Operates on polymorphic types ('a, 'v, 'role) and versioned message structures. Used to route incoming requests to application-specific method implementations based on defined message signatures.",
      "description_length": 297,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Proxy.Service_handler",
      "description": "Handles message routing and version selection for service objects, supporting operations to bind, dispatch, and manage handlers based on role and version. Works with service objects, message payloads, and role-specific handler functions. Used to dynamically select and execute appropriate service methods during request processing.",
      "description_length": 331,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_display",
      "description": "Handles communication with a Wayland display server, offering methods to send and receive protocol messages, manage object lifecycles, and process events. It operates on raw protocol data and event streams, enabling direct interaction with Wayland clients and servers. Used to implement custom protocol handlers and event loop integration in graphical applications.",
      "description_length": 365,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_registry",
      "description": "Handles registration and management of global objects in a Wayland client, supporting version 1 and above. Provides functions to bind to and query available interfaces, using proxy objects and interface names. Used to discover and initialize client-side representations of server-side objects like surfaces and input devices.",
      "description_length": 325,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_callback",
      "description": "Handles registration and invocation of callbacks for a proxy object, supporting versioned interactions. Operates on function pointers and opaque data structures representing callback handlers. Used to manage event-driven responses in a Wayland client implementation.",
      "description_length": 266,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_compositor",
      "description": "Handles creation and management of surfaces, sub-surfaces, and regions for graphical rendering. Operates on types such as wl_surface, wl_subsurface, and wl_region. Used to establish window hierarchies and define clipping areas in Wayland client applications.",
      "description_length": 258,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_shm_pool",
      "description": "Handles creation and management of shared memory buffers for graphics rendering. Operates on raw memory blocks and pixel data structures, enabling efficient data transfer between client and server. Used to allocate and map buffer contents for display in graphical applications.",
      "description_length": 277,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_shm",
      "description": "Handles pixel data conversion and buffer management for shared memory surfaces. Operates on raw byte arrays and image data structures to facilitate efficient memory sharing between processes. Used to prepare and transfer graphical content in Wayland-based display systems.",
      "description_length": 272,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_buffer",
      "description": "Handles buffer creation, destruction, and data management for Wayland clients. Operates on raw byte sequences and buffer objects with associated size and format information. Used to prepare pixel data for rendering and manage buffer lifecycle during surface updates.",
      "description_length": 266,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_data_offer",
      "description": "Handles data exchange operations such as retrieving mime types, accepting data, and rejecting data transfers. Works with data formats like strings, file descriptors, and binary buffers. Used to manage drag-and-drop content or clipboard data in Wayland-based applications.",
      "description_length": 271,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_data_source",
      "description": "Handles data exchange between clients and the compositor by managing data formats, MIME types, and selection operations. It works with data payloads, format lists, and selection atoms to facilitate drag-and-drop and clipboard interactions. Used to retrieve or supply data during clipboard operations or when handling user-selected content.",
      "description_length": 339,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_data_device",
      "description": "Handles data transfer operations such as setting, retrieving, and managing drag-and-drop data during clipboard interactions. Works with data formats like text, URIs, and raw bytes, using structured buffers and format lists. Used to implement clipboard copy/paste and drag-and-drop functionality in graphical applications.",
      "description_length": 321,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_data_device_manager",
      "description": "Handles data exchange operations such as setting and retrieving data during drag-and-drop interactions. Operates on data formats like text, URIs, and custom types through a structured data buffer. Used to manage clipboard content and facilitate data transfer between applications.",
      "description_length": 280,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_shell",
      "description": "Handles surface management and shell operations for Wayland clients, including creating and configuring surfaces. Works with Wayland proxy objects and surface attributes such as size, position, and focus. Used to implement window decorations and manage client-side shell interactions.",
      "description_length": 284,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_shell_surface",
      "description": "Handles interactions for shell surfaces, including resizing, moving, and setting window states. Operates on surface and rectangle data types to manage client-side window behavior. Used to implement window decorations and respond to user-driven geometry changes.",
      "description_length": 261,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_surface",
      "description": "Handles surface creation, destruction, and configuration updates for Wayland clients. Operates on surface objects and associated geometry data. Used to manage window content updates and resize events in graphical applications.",
      "description_length": 226,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_seat",
      "description": "Handles input device interactions through event-driven callbacks, including focus management and device activation. Operates on seat objects and associated input devices, managing their state and events. Used to track cursor position changes and handle keyboard focus transitions in a Wayland client.",
      "description_length": 300,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_pointer",
      "description": "Handles pointer events and interactions, including motion, button presses, and focus changes. Operates on pointer state and event data structures specific to Wayland protocols. Used to manage cursor positioning and input feedback in graphical applications.",
      "description_length": 256,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_keyboard",
      "description": "Handles key event processing and state management for a Wayland keyboard interface, including key press and release notifications. Operates on raw key codes, modifiers, and focus tracking data. Used to synchronize keyboard input with application state in graphical environments.",
      "description_length": 278,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_touch",
      "description": "Handles touch event processing including tracking contact points, calculating movement deltas, and detecting tap gestures. Operates on touch point data structures and event streams derived from a Wayland proxy. Used to implement touch input handling in graphical applications, such as tracking finger movements on a touchscreen.",
      "description_length": 328,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_output",
      "description": "Handles configuration changes and output information retrieval for Wayland displays. Operates on Wayland output objects and associated metadata. Used to adjust screen resolution and detect display properties during runtime.",
      "description_length": 223,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_region",
      "description": "Handles region creation and manipulation using rectangle and path-based operations. Works with geometric data structures such as coordinates, dimensions, and shape outlines. Used to define clipping areas and manage visual boundaries in graphical applications.",
      "description_length": 259,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_subcompositor",
      "description": "Handles the creation and management of subcompositors, enabling the nesting of surface hierarchies within a Wayland environment. It supports operations such as creating subcompositor objects, attaching surfaces to them, and managing their lifecycle. Used to implement layered UI components, such as popups or embedded windows, within a compositor's rendering pipeline.",
      "description_length": 368,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_server.Wl_subsurface",
      "description": "Handles creation, positioning, and stacking of subsurfaces relative to their parent surfaces. Operates on surface objects and z-ordering parameters. Used to implement layered UI elements in a Wayland client.",
      "description_length": 207,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_display",
      "description": "Handles communication with a Wayland display server, offering operations to send and receive protocol messages, manage object lifecycles, and process events. It works with message buffers, object proxies, and event loops to facilitate low-level interaction with Wayland clients. Used to implement custom client logic, such as handling surface creation or input events directly from the display protocol.",
      "description_length": 403,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_registry",
      "description": "Handles registration and management of global objects in a Wayland client, supporting version 1 of the registry interface. Provides functions to bind to global objects, retrieve their interfaces, and manage their lifecycles. Works with Wayland proxy objects and interface names, enabling interaction with compositor-provided services.",
      "description_length": 334,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_callback",
      "description": "Handles the invocation and management of callbacks for a proxy object, supporting registration, execution, and cleanup. Operates on function pointers and opaque data structures representing callback handlers. Used to implement event-driven interactions in a Wayland client, such as responding to surface configuration changes or input events.",
      "description_length": 342,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_compositor",
      "description": "Handles creation and management of surfaces, sub-surfaces, and regions for graphical rendering. Operates on types such as wl_surface, wl_subsurface, and wl_region to enable window composition. Used to set surface properties, attach buffers, and manage hierarchical display structures in a Wayland environment.",
      "description_length": 309,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_shm_pool",
      "description": "Handles creation and management of shared memory buffers, including allocation and mapping of memory regions. Works with raw byte arrays and memory-mapped files to facilitate efficient data transfer. Used to prepare buffer data for rendering in graphical applications.",
      "description_length": 268,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_shm",
      "description": "Handles pixel data conversion and buffer management for shared memory surfaces. Operates on raw byte arrays and image data structures to facilitate efficient memory sharing between processes. Used to prepare and transfer frame buffer content in graphical applications.",
      "description_length": 268,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_buffer",
      "description": "Handles buffer creation, destruction, and data management for Wayland clients. Operates on raw byte sequences and buffer objects with specific formatting constraints. Used to prepare pixel data for rendering and manage buffer lifecycle during surface updates.",
      "description_length": 259,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_data_offer",
      "description": "Handles data exchange operations such as retrieving mime types, accepting data, and rejecting data transfers. Works with data offer proxies and associated mime type lists. Used to manage drag-and-drop data transfers in Wayland client applications.",
      "description_length": 247,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_data_source",
      "description": "Handles data exchange between clients and the compositor by providing methods to set, retrieve, and manage MIME-type formatted data. It operates on opaque data buffers and MIME type strings, enabling clipboard operations and drag-and-drop interactions. Supports data formatting and retrieval during wayland protocol transactions.",
      "description_length": 329,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_data_device",
      "description": "Handles data transfer operations such as drag-and-drop and clipboard interactions. Works with data formats like text, URIs, and raw bytes, using structured data representations. Enables applications to manage data exchange during user interactions in a Wayland environment.",
      "description_length": 273,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_data_device_manager",
      "description": "Handles data transfer operations such as drag-and-drop and clipboard interactions. Works with data formats, MIME types, and raw byte streams during content exchange. Enables applications to manage data during window manager interactions and user-driven content sharing.",
      "description_length": 269,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_shell",
      "description": "Handles surface management and shell operations for Wayland clients, including surface creation, resizing, and focus control. Operates on Wayland surface objects and shell surface proxies. Used to implement window decorations and manage client-side shell interactions.",
      "description_length": 268,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_shell_surface",
      "description": "Handles surface management operations such as setting the title, class, and transient relationships for client surfaces. Works with surface and shell surface objects from the Wayland protocol. Used to customize window behavior and appearance in Wayland compositors.",
      "description_length": 265,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_surface",
      "description": "Handles surface creation, destruction, and configuration updates for Wayland clients. Operates on surface objects and associated geometry data. Used to manage window content and resize events in graphical applications.",
      "description_length": 218,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_seat",
      "description": "Handles input device interactions through event-driven callbacks, including focus management and device presence tracking. Operates on seat objects and associated input devices, managing their state and events. Used to synchronize cursor positions and input device availability in a Wayland client application.",
      "description_length": 310,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_pointer",
      "description": "Handles pointer events and interactions, including motion, button presses, and focus tracking. Operates on event data and surface references to manage cursor state and input feedback. Used to implement custom pointer behavior in graphical applications, such as drag-and-drop or hover effects.",
      "description_length": 292,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_keyboard",
      "description": "Handles key event processing and state management for a Wayland keyboard interface, including key press and release notifications. Operates on raw key codes, modifiers, and focus tracking data. Used to synchronize keyboard input with application state in a Wayland client.",
      "description_length": 272,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_touch",
      "description": "Handles touch event processing including tracking contact points, calculating movement deltas, and detecting tap gestures. Operates on touch point data structures and event streams derived from Wayland protocol interactions. Used to implement touch input handling in graphical applications requiring precise gesture recognition.",
      "description_length": 328,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_output",
      "description": "Handles configuration and event management for a Wayland output, including retrieving resolution, scale, and output name. Operates on structured data such as dimensions, scaling factors, and string identifiers. Used to adjust application rendering based on display properties during runtime.",
      "description_length": 291,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_region",
      "description": "Handles region operations such as setting shape, offset, and size for graphical elements. Works with coordinates, rectangles, and region data structures to define visual boundaries. Used to manage clipping areas in windowing systems and coordinate transformations.",
      "description_length": 264,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_subcompositor",
      "description": "Handles the creation and management of subcompositors, including the initialization of sub-surface hierarchies and the handling of surface placement requests. Operates on surface and sub-surface data structures within the Wayland protocol. Used to implement nested window management and layered UI components in graphical applications.",
      "description_length": 335,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_client.Wl_subsurface",
      "description": "Handles creation and management of subsurfaces, including setting position, stacking order, and committing changes. Operates on surface objects and their hierarchical relationships within a windowing system. Used to implement layered UI elements, such as tooltips or popups, that depend on a parent surface.",
      "description_length": 307,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_display",
      "description": "Manages error state encoding and decoding using an abstract type `t`, converting between error values and 32-bit integers. Supports operations to serialize and deserialize error conditions for communication with a server. For example, it can transform a server error response into a numeric code for logging or comparison. It also enables consistent error handling across different parts of the system.",
      "description_length": 402,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_registry",
      "description": "Provides methods to access the name, version, and protocol details of a Wayland registry object. It handles specific requests and events by mapping numeric identifiers to their corresponding names and data types, including strings and unsigned integers. Used to dynamically query and interpret the capabilities of Wayland objects during runtime.",
      "description_length": 345,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_callback",
      "description": "Provides functions to retrieve interface name, version, and structured data for requests and events, including typed parameters. Works with strings, integers, and custom type lists to represent protocol elements. Used to parse and handle communication protocols in low-level system interactions.",
      "description_length": 295,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_compositor",
      "description": "Provides functions to retrieve the interface name, version, and details of requests and events for a Wayland compositor. Works with strings, integers, and custom type structures representing request and event data. Used to inspect and handle protocol interactions in Wayland-based graphical systems.",
      "description_length": 299,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shm_pool",
      "description": "Provides functions to retrieve interface information, version numbers, and protocol details for shared memory pools, including request and event structures. Works with strings, integers, and custom type lists to represent protocol elements. Used to parse and handle low-level graphics protocol interactions in Wayland clients.",
      "description_length": 326,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shm",
      "description": "Converts error values and pixel formats to and from 32-bit integers, using opaque type `t` for representation. Error codes are serialized or deserialized for protocol communication, while pixel formats like argb8888 and xrgb8888 are encoded or decoded for graphics processing. Operations include converting between integer values and their corresponding type representations. This enables precise handling of error signaling and format specification in Wayland shared memory interactions.",
      "description_length": 488,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_buffer",
      "description": "Provides methods to retrieve the interface name, version, and details of requests and events for a Wayland buffer object. Works with string identifiers, version numbers, and structured request/event data. Used to inspect and handle protocol interactions in Wayland client-server communication.",
      "description_length": 293,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_offer",
      "description": "Encodes and decodes error states using 32-bit integers, facilitating efficient data exchange. It operates on the opaque type `t` to represent error conditions. This allows for consistent error handling across network protocols and binary formats. For example, it can convert an error value into an integer for transmission or reconstruct an error from a received integer.",
      "description_length": 371,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_source",
      "description": "Encodes and decodes error states as 32-bit integers, facilitating efficient data exchange. It supports conversion between the abstract type `t` and integer representations, allowing error conditions to be embedded in binary protocols. This enables consistent error handling across system boundaries. For example, an error like `invalid_input` can be converted to `0x12345678` for transmission and decoded back on the receiving end.",
      "description_length": 431,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_device",
      "description": "Encodes and decodes error states as 32-bit integers, facilitating efficient storage and communication. It operates on the opaque type `t`, allowing conversion between error representations. This enables logging of error conditions or passing them between processes. For example, an error can be serialized to an integer for transmission and later reconstructed into its original form.",
      "description_length": 384,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_data_device_manager",
      "description": "Manages drag-and-drop actions through bitwise operations on int32 values, supporting constants for none, copy, move, and ask. It enables checking, setting, and combining action flags to determine valid interactions during data transfers. Compositors can use these operations to filter or modify actions based on user input. For example, it can check if a move action is allowed or combine copy and move into a single valid operation.",
      "description_length": 433,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell",
      "description": "Handles error state conversion between 32-bit integers and opaque representations, facilitating efficient error code serialization. Provides functions to encode and decode error values using the type `t`. Supports network and binary data operations by translating error conditions into compact integer forms. For example, it can convert a custom error into an integer for transmission or parse an incoming integer back into a structured error state.",
      "description_length": 449,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_shell_surface",
      "description": "Manages surface interactions through constants for resize edges, flags for transient behavior, and hints for fullscreen control, all based on int32 and custom types. It enables precise manipulation of cursor actions, window states, and display settings during graphical operations. Operations include converting between int32 and abstract types, setting flags, and defining resize directions. Examples include adjusting window size via edge constants, checking transient status with flags, and configuring fullscreen modes with compositor hints.",
      "description_length": 545,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_surface",
      "description": "Converts Wayland surface error values to and from 32-bit integers, enabling programmatic handling of surface-related errors. The opaque type `t` encapsulates error states, with functions to map between this type and integer representations. This allows for precise error tracking and conditional logic based on numeric error codes. For example, a program can check if a surface creation failed by converting the error to an integer and comparing it against known failure codes.",
      "description_length": 477,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_seat",
      "description": "Manages seat capabilities and error states through bitwise operations and integer conversions, enabling low-level interaction with system features. It supports checking and modifying pointer, keyboard, and touch capabilities using 32-bit integers, and converts error values to and from opaque error identifiers. Operations include bitwise checks, setting, and extracting features, as well as serializing error states. For example, it can determine if a seat supports touch input or retrieve a specific error code from an opaque type.",
      "description_length": 533,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_pointer",
      "description": "Converts various input-related values\u2014errors, button states, axis identifiers, source types, and direction\u2014into 32-bit integers for efficient serialization and transmission. It handles opaque types for error states, button events, axis data, input sources, and directional movements, enabling precise encoding and decoding for system communication. This allows for consistent representation of input events across different layers of an application, such as serializing scroll directions or distinguishing between input sources. Examples include converting a button press to an integer for logging or interpreting axis motion for cursor movement.",
      "description_length": 646,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_keyboard",
      "description": "Encapsulates keyboard input handling by managing keymap and key state data through opaque types converted to and from 32-bit integers. Provides operations to serialize, transmit, and reconstruct keymap configurations and physical key states during input events. Supports tracking of key press, release, and repeat actions, enabling precise control over hardware input processing. Facilitates efficient communication of keyboard data in Wayland client interactions.",
      "description_length": 464,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_touch",
      "description": "Provides functions to retrieve interface names, version numbers, request definitions, and event structures for touch input devices. Works with strings, integers, and custom type representations for event data. Used to parse and handle touch-related protocol messages in a way that supports precise event decoding and request validation.",
      "description_length": 336,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_output",
      "description": "Encodes and decodes subpixel configurations, transform settings, and mode flags using 32-bit integers, operating on abstract and opaque types. Supports serialization of graphics data, transformation management for surface orientation, and manipulation of display mode properties. Allows checking, setting, and converting low-level display attributes for precise control. Enables synchronization of client rendering with display configurations, including rotation, mirroring, and subpixel layout.",
      "description_length": 495,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_region",
      "description": "Provides operations to retrieve the interface name, version, and details of requests and events for a Wayland region object. Works with string, int32, and custom type structures representing protocol data. Used to inspect and handle protocol interactions in Wayland client-server communication.",
      "description_length": 294,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_subcompositor",
      "description": "Encodes and decodes error states using 32-bit integers, facilitating efficient data transmission. It operates on the opaque type `t`, allowing conversion between error representations. This enables consistent error handling across system boundaries. For example, it can serialize a failed resource allocation into an integer for logging or network delivery.",
      "description_length": 357,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto.Wl_subsurface",
      "description": "Encodes and decodes error states using 32-bit integers, facilitating efficient data transmission. The opaque type `t` represents error conditions and supports conversion operations. This enables consistent error handling across system boundaries, such as embedding error codes in protocol messages or storing them in binary files. Examples include serializing a failure state for logging or transmitting an error over a network.",
      "description_length": 428,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_proto.Org_kde_kwin_server_decoration_manager",
      "description": "Encodes and decodes custom mode types as 32-bit integers, facilitating precise handling of operational states in system interactions. Provides functions to convert between the abstract type `t` and integer representations, ensuring compatibility with low-level protocol requirements. This enables accurate serialization of mode values for communication with server components. For example, it allows translating a decoration mode into a numeric identifier for event handling or request formatting.",
      "description_length": 497,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_proto.Org_kde_kwin_server_decoration",
      "description": "Encodes and decodes custom mode values as 32-bit integers, facilitating efficient data handling. It operates on the opaque type `t` to represent request and event modes. This module enables serialization of mode configurations for network transmission and parsing of incoming mode data. It supports precise manipulation of mode settings in low-level system interactions.",
      "description_length": 370,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_client.Zxdg_decoration_manager_v1",
      "description": "Handles the creation and management of client-side decorations for windows using the xdg-decoration protocol. It provides functions to request decoration surfaces and manage their lifecycle. Used in desktop environments to customize window borders and title bars.",
      "description_length": 263,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_client.Zxdg_toplevel_decoration_v1",
      "description": "Handles setting and managing window decorations for XDG toplevel surfaces, including requesting and responding to decoration mode changes. Operates on XDG toplevel objects and decoration mode values. Used to customize window borders and title bars in Wayland compositors.",
      "description_length": 271,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_server.Gtk_primary_selection_device_manager",
      "description": "Handles device-specific interactions for primary selection in a GTK application, including retrieving and managing selection data per input device. Operates on device identifiers and selection data structures, enabling precise control over clipboard operations. Used to implement custom drag-and-drop behavior and clipboard synchronization across multiple input devices.",
      "description_length": 370,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_server.Gtk_primary_selection_device",
      "description": "Handles clipboard data exchange between applications using primary selection mechanisms. Provides functions to retrieve and set data in various formats, including text and URIs. Designed for use with input devices in graphical environments to enable seamless data transfer.",
      "description_length": 273,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_server.Gtk_primary_selection_offer",
      "description": "Handles the exchange of data between applications using the primary selection protocol, including offering and retrieving data. It works with data types such as MIME types, byte arrays, and selection timestamps. Used to implement clipboard-like behavior in Wayland-based applications.",
      "description_length": 284,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_server.Gtk_primary_selection_source",
      "description": "Handles creation and management of primary selection sources in GTK, enabling data transfer between applications. Operates with data types such as MIME types, byte arrays, and selection IDs. Used to implement custom clipboard behavior in applications requiring direct data access during drag-and-drop or copy-paste operations.",
      "description_length": 326,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto.Zwp_pointer_constraints_v1",
      "description": "Handles error and lifetime management for pointer constraints through integer-based encoding and decoding. Provides operations to convert between opaque error types and 32-bit integers, as well as between lifetime values and their integer representations. Enables precise control over constraint behavior in system interactions, such as setting or releasing constraints. Examples include serializing error states for protocol messages and managing constraint durations in event handling.",
      "description_length": 487,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto.Zwp_locked_pointer_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and structured request and event data for a locked pointer protocol. Works with protocol-specific types including version identifiers and event/request descriptors. Used to generate protocol bindings and handle low-level communication in Wayland client implementations.",
      "description_length": 340,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto.Zwp_confined_pointer_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and request/event definitions for a specific protocol object. Works with protocol request and event structures, including object references and type variations. Used to dynamically inspect and handle protocol interactions in Wayland client implementations.",
      "description_length": 327,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_proto.Gtk_primary_selection_device_manager",
      "description": "Provides functions to retrieve interface information, version data, and event requests for a primary selection device, including handling ID and object references. Works with integers, strings, and custom variant types representing device events and versions. Used to manage device-specific interactions in GUI applications requiring precise input handling.",
      "description_length": 357,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_proto.Gtk_primary_selection_device",
      "description": "Provides methods to retrieve interface information, version, and event or request data structures for a primary selection device. Works with integer identifiers and custom type unions representing device events and requests. Used to inspect device capabilities and handle specific interaction signals in GUI applications.",
      "description_length": 321,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_proto.Gtk_primary_selection_offer",
      "description": "Provides functions to retrieve interface information, version, and event or request data for a primary selection offer, working with strings, integers, and variant types representing data formats. Returns structured data for handling clipboard or drag-and-drop interactions in GUI applications. Processes specific protocol messages by parsing and categorizing their content.",
      "description_length": 374,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_proto.Gtk_primary_selection_source",
      "description": "Provides functions to query interface details, version numbers, and supported requests and events for a primary selection source. Works with integers, strings, and variant types representing file descriptors or strings. Used to determine compatibility and interaction capabilities with clipboard data during drag-and-drop or copy-paste operations.",
      "description_length": 347,
      "index": 138,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_client.Zwlr_screencopy_manager_v1",
      "description": "Handles screen capture operations by exposing methods to create screen copy resources, manage frame callbacks, and retrieve pixel data. It works with Wayland objects such as surfaces, buffers, and events to facilitate screen recording and visual inspection. Used to capture specific regions of a display for debugging, streaming, or automated testing scenarios.",
      "description_length": 361,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_client.Zwlr_screencopy_frame_v1",
      "description": "Handles retrieval of screen capture data from a Wayland compositor, including frame buffer access and metadata extraction. Operates on pixel buffer structures and event streams from the screencopy protocol. Used to implement real-time screen sharing and screenshot capture in graphical applications.",
      "description_length": 299,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_dmabuf_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and definitions for requests and events associated with the Linux DMA buffer protocol. Works with string identifiers, version numbers, and structured event and request data. Used to inspect and interact with the protocol's message formats during low-level graphics operations.",
      "description_length": 347,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_buffer_params_v1",
      "description": "Encodes and decodes error states using 32-bit integers, allowing efficient handling of error codes through the opaque type `t`. Supports bitwise manipulation of int32 values to manage flag configurations, enabling precise control over rendering parameters. Operations include inverting bits, interlacing, and reordering for video frame settings. Examples include serializing errors for logging and adjusting flag states for display configurations.",
      "description_length": 447,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto.Zwp_linux_dmabuf_feedback_v1",
      "description": "Manages flag sets using 32-bit integers, enabling bit-level manipulation and conversion between opaque types and int32. Supports operations like setting, clearing, and checking individual bits to represent system states. Can determine if a specific flag is active or modify multiple flags at once. Used to track and control features in a low-level, efficient manner.",
      "description_length": 366,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_client.Gtk_primary_selection_device_manager",
      "description": "Handles device-specific interactions for primary selection, including setting and retrieving selection data. Operates on device identifiers and selection data structures. Used to manage clipboard content during drag-and-drop operations on compatible platforms.",
      "description_length": 260,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_client.Gtk_primary_selection_device",
      "description": "Handles clipboard data exchange between applications using primary selection mechanisms. Provides functions to retrieve and set data in various formats, including text and URIs. Used to implement drag-and-drop and copy-paste functionality in GUI applications.",
      "description_length": 259,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_client.Gtk_primary_selection_offer",
      "description": "Handles the exchange of data between applications using the primary selection protocol, supporting operations like offering data, requesting data, and managing selection ownership. It works with data types such as MIME types, byte sequences, and selection timestamps. Used to implement clipboard-like behavior in Wayland-based applications, enabling drag-and-drop and cross-application data sharing.",
      "description_length": 399,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_client.Gtk_primary_selection_source",
      "description": "Handles the creation and management of a primary selection source in GTK, enabling data transfer between applications. It supports operations such as setting data formats, handling requests, and managing the lifecycle of the selection. Used in clipboard and drag-and-drop scenarios where data needs to be provided on demand.",
      "description_length": 324,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_wm_base",
      "description": "Handles error code conversion between 32-bit integers and opaque error types, facilitating efficient storage and transmission. Provides functions to map between integer representations and specific error conditions. Can be used to serialize error states in network protocols or binary files. Supports operations like encoding and decoding error values within constrained data formats.",
      "description_length": 384,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_positioner",
      "description": "Encodes and decodes custom types as 32-bit integers for efficient data handling, supporting error states, numeric values, and identifiers. Provides position adjustment functions using integer strategies to manage surface layout within constrained spaces. Operations include sliding, flipping, and resizing surfaces to fit within a compositor's work area. Examples include serializing error codes for network transmission and adjusting window positions dynamically during rendering.",
      "description_length": 481,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_surface",
      "description": "Handles error state conversion between 32-bit integers and opaque type `t`, facilitating efficient error code serialization. Supports operations for encoding and decoding error values, ensuring compatibility across systems. Can be used to transmit error conditions in network protocols or store them in binary formats. Example: converting a `t` value to an integer for logging or sending over a socket.",
      "description_length": 402,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_toplevel",
      "description": "Encodes and decodes various system values using 32-bit integers, including errors, resize edges, window states, and capabilities. Each component operates on distinct opaque or abstract types to represent specific system conditions and interactions. These conversions enable efficient data serialization and state management in low-level system communication. For example, it can serialize a window's maximized state, track which edge is being resized, or transmit error codes across networked components.",
      "description_length": 504,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto.Xdg_popup",
      "description": "Handles error state conversion between 32-bit integers and opaque type `t`, facilitating efficient error code serialization. Supports network and binary data operations by mapping error conditions to numeric representations. Allows for precise error tracking and communication across system boundaries. Example uses include encoding protocol errors for transmission and decoding received error codes into internal representations.",
      "description_length": 430,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server.Xdg_wm_base",
      "description": "Handles window management events and requests for a Wayland compositor, including handling of ping, close, and configure operations. Works with Wayland surfaces and protocol messages defined in the xdg_wm_base interface. Used to manage window lifecycle and geometry adjustments in a Wayland-based desktop environment.",
      "description_length": 317,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server.Xdg_positioner",
      "description": "Handles positioning of surfaces relative to a parent using precise coordinate calculations and anchor points. Operates on surface references, coordinates, and directional enums to determine placement. Used to align popups, menus, and tooltips correctly within a windowing environment.",
      "description_length": 284,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server.Xdg_surface",
      "description": "Handles surface management for XDG shells, including commit, set_title, and set_app_id operations. Works with surface and xdg_surface objects to manage window properties and behavior. Used to customize application windows in Wayland compositors by setting identifiers and visual attributes.",
      "description_length": 290,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server.Xdg_toplevel",
      "description": "Handles the initialization and management of a Wayland toplevel surface, including setting the surface's role and handling configuration updates. Operates on Wayland surface objects and configuration data structures specific to the Xdg protocol. Used to create and maintain a standalone window that can be resized, moved, and decorated by the compositor.",
      "description_length": 354,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server.Xdg_popup",
      "description": "Handles the creation and management of popups in a Wayland environment, including positioning and activation. Works with coordinates, surfaces, and seat objects to control popup behavior. Used to implement context menus and tooltips in graphical applications.",
      "description_length": 259,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_proto.Zxdg_decoration_manager_v1",
      "description": "Manages XDG decoration requests and events for client windows, handling protocol interactions through defined interfaces and versioning. It processes client requests for window decorations and emits corresponding events based on protocol versions. Works with protocol-specific strings, version numbers, and event structures tied to window management.",
      "description_length": 350,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_proto.Zxdg_toplevel_decoration_v1",
      "description": "Converts error states and window decoration modes between opaque types and 32-bit integers, enabling efficient serialization and transmission. It supports operations to encode and decode values, allowing precise handling of error codes and mode configurations. This facilitates consistent representation of state across different systems or data formats. For example, it can serialize an error condition for logging or transmit a mode setting over a network.",
      "description_length": 458,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_client.Org_kde_kwin_server_decoration_manager",
      "description": "Handles the retrieval and management of server-side window decorations in a KDE KWin environment, offering methods to query and update decoration settings. It operates on data structures representing window properties and decoration configurations. Used to dynamically adjust visual elements of application windows based on system policies or user preferences.",
      "description_length": 360,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_client.Org_kde_kwin_server_decoration",
      "description": "Handles the initialization and management of server-side window decorations for KWin, including setting and updating decoration properties. Operates on X11 window objects and decoration configuration data structures. Used to dynamically adjust window borders and title bars in KDE environments based on user preferences or application requirements.",
      "description_length": 348,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_client.Zwp_linux_dmabuf_v1",
      "description": "Handles buffer creation and management using DMA buffer file descriptors, supporting operations like allocation, attachment, and release. Works with raw file descriptors, buffer metadata, and device-specific parameters. Used to interface with graphics hardware for efficient memory sharing in display server implementations.",
      "description_length": 324,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_client.Zwp_linux_buffer_params_v1",
      "description": "Handles retrieval of buffer parameters such as width, height, stride, and format from a Linux buffer object. Operates on opaque buffer data structures and protocol-specific types exposed by the Wayland protocol. Used to extract metadata for rendering or memory management in graphics applications.",
      "description_length": 297,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_client.Zwp_linux_dmabuf_feedback_v1",
      "description": "Handles buffer feedback from the Zwp_linux_dmabuf_feedback_v1 interface, including retrieving format, modifier, and plane information. Operates on DMA buffer metadata and associated resource identifiers. Used to inspect and validate buffer properties in Wayland-based graphics pipelines.",
      "description_length": 287,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_client.Zxdg_output_manager_v1",
      "description": "Handles creation and management of output configurations for Wayland clients, including setting output names and descriptions. Operates on XdgOutputV1 objects and associated metadata. Used to dynamically adjust display settings in multi-monitor environments.",
      "description_length": 258,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_client.Zxdg_output_v1",
      "description": "Handles the creation and management of output configurations for Wayland clients, including setting display modes and retrieving output information. Operates on structures such as output properties, mode lists, and global event handlers. Used to configure screen outputs dynamically during runtime, such as adjusting resolution or orientation.",
      "description_length": 343,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_server.Zwp_relative_pointer_manager_v1",
      "description": "Handles pointer position updates relative to a target surface, including setting and unsetting the relative pointer. Works with surface references and coordinate transformations. Used to implement precise cursor movement within a specific area of a window or interface.",
      "description_length": 269,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_server.Zwp_relative_pointer_v1",
      "description": "Handles pointer position updates relative to a target surface, including setting and resetting the relative pointer. Operates on surface references and coordinate transformations. Used to implement precise cursor movement within a specific area of a window or interface.",
      "description_length": 270,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_proto.Zwlr_screencopy_manager_v1",
      "description": "Provides functions to retrieve the interface name, version, and detailed request and event structures for a screen copy manager. Works with integers, strings, and custom type variants to describe protocol interactions. Used to generate client-side bindings for handling screen capture requests and events in a Wayland-based environment.",
      "description_length": 336,
      "index": 169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_proto.Zwlr_screencopy_frame_v1",
      "description": "Provides efficient conversion between error states and 32-bit integers, along with bitwise manipulation capabilities for low-level data handling. Supports operations like bit inversion and type conversion, enabling precise control over protocol flags and error codes. Can serialize error conditions for network transmission or store hardware register states in compact form. Examples include encoding protocol errors into integers for logging or modifying specific bits in a status word.",
      "description_length": 487,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Drm_client.Wl_drm",
      "description": "Handles DRM device initialization, resource management, and event polling for Wayland clients. Operates on file descriptors, DRM device structures, and event queues. Used to establish secure graphics rendering contexts and manage display resources in low-level X11 and Wayland integration scenarios.",
      "description_length": 299,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_server.Org_kde_kwin_server_decoration_manager",
      "description": "Handles the retrieval and management of server-side window decorations through a proxy interface, supporting operations like querying decoration properties and applying style changes. Works with data types such as window identifiers, decoration configurations, and versioned interface objects. Used to dynamically adjust window borders and title bars in a KWin environment based on user preferences or application requirements.",
      "description_length": 427,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_server.Org_kde_kwin_server_decoration",
      "description": "Handles the initialization and management of server-side decorations for KWin, including setting and updating window borders and title bars. Operates on X11 window objects and decoration configuration data. Used to customize the visual appearance of windows in KDE's KWin window manager.",
      "description_length": 287,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_server.Wl_drm",
      "description": "Handles DRM device initialization, resource management, and event polling for Wayland clients. Operates on file descriptors, DRM device structures, and event queues. Used to establish secure graphics rendering contexts and manage display resources in low-level windowing systems.",
      "description_length": 279,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client.Xdg_wm_base",
      "description": "Handles window management events and requests for a Wayland compositor, including handling of ping, close, and configure operations. Works with Wayland surfaces and protocol messages defined in the xdg-wm-base v1 interface. Used to manage window decorations and lifecycle events in a Wayland-based desktop environment.",
      "description_length": 318,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client.Xdg_positioner",
      "description": "Handles positioning of surfaces relative to a parent using precise coordinate calculations and anchor points. Operates on surface references, coordinates, and dimension data to determine placement. Used to align popups, menus, and tooltips correctly within a windowing environment.",
      "description_length": 281,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client.Xdg_surface",
      "description": "Handles surface management for XDG shells, including commit, set_title, and set_app_id operations. Works with surface and xdg_surface objects to manage window properties and behavior. Used to customize window titles and application identifiers in Wayland compositors.",
      "description_length": 267,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client.Xdg_toplevel",
      "description": "Handles window management operations such as setting the title, icon, and state of a surface. Works with Xdg_wm_base and Xdg_toplevel objects to interact with the Wayland compositor. Used to implement client-side decorations and manage window properties in a Wayland application.",
      "description_length": 279,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client.Xdg_popup",
      "description": "Handles the creation and management of popups in a Wayland environment, including positioning and activation. Works with coordinates, surfaces, and seat interactions. Used to implement context menus and tooltip displays in graphical applications.",
      "description_length": 246,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_client.Zwp_relative_pointer_manager_v1",
      "description": "Handles pointer position updates relative to a target surface, including setting and resetting the relative pointer. Works with surface references, coordinates, and event handlers for pointer motion. Used to implement custom pointer behaviors in windowing systems, such as drag-and-drop or cursor confinement.",
      "description_length": 309,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_client.Zwp_relative_pointer_v1",
      "description": "Handles pointer position updates relative to a target surface, including setting and resetting the relative pointer. Operates on surface references and coordinate transformations. Used to implement precise cursor movement within a specific area of a window or interface.",
      "description_length": 270,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_server.Zwlr_screencopy_manager_v1",
      "description": "Handles screen capture operations by providing functions to create screen copy resources, manage frame callbacks, and retrieve buffer data. Works with Wayland objects such as surfaces, buffers, and events related to screen content. Used to implement screen recording or screenshot features in Wayland-based applications.",
      "description_length": 320,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_server.Zwlr_screencopy_frame_v1",
      "description": "Handles retrieval of screen capture data through a specific protocol version, offering methods to access pixel buffers and frame metadata. Operates on structured data including image buffers and timestamp information. Used to capture and process real-time screen content in display server interactions.",
      "description_length": 302,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_client.Zwp_pointer_constraints_v1",
      "description": "Handles pointer confinement and capture operations, allowing control over cursor behavior within a specified region. Works with surface and seat data structures to enforce constraints during user interactions. Used to restrict pointer movement to a defined area or lock it to a specific surface during drag operations.",
      "description_length": 318,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_client.Zwp_locked_pointer_v1",
      "description": "Handles pointer locking and unlocking operations, managing interactions with a Wayland locked pointer interface. Works with event loops and input device states to enforce cursor confinement. Used to restrict mouse movement to a specific area during immersive applications or games.",
      "description_length": 281,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_client.Zwp_confined_pointer_v1",
      "description": "Handles pointer confinement and motion events for a specific surface, providing precise control over cursor behavior within defined boundaries. Operates on surface identifiers and event data structures to enforce spatial constraints. Used to restrict cursor movement in applications requiring confined input, such as custom UI elements or interactive widgets.",
      "description_length": 359,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_proto.Zxdg_output_manager_v1",
      "description": "Provides operations to handle interface requests and events for a Wayland output manager, including retrieving request and event details by ID. Works with string-based identifiers and custom variant types representing object and ID references. Used to manage output configuration and state updates in a Wayland client.",
      "description_length": 318,
      "index": 187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_proto.Zxdg_output_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and event or request definitions for a specific protocol object. Works with integers, strings, and variant types representing event parameters. Used to inspect and handle protocol-specific interactions in a way that supports dynamic event processing and request validation.",
      "description_length": 344,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_server.Zwp_primary_selection_device_manager_v1",
      "description": "Handles the creation and management of primary selection devices, including setting and retrieving data through clipboard-like operations. Works with data types such as MIME types, byte arrays, and event handlers for data requests. Used to implement clipboard functionality in Wayland clients, enabling data exchange between applications.",
      "description_length": 338,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_server.Zwp_primary_selection_device_v1",
      "description": "Handles interaction with the primary selection mechanism in Wayland, offering functions to request, receive, and manage data transfers between clients. Operates with data types such as mime types, selection data, and event handlers for clipboard operations. Used to implement clipboard functionality in applications that need to exchange text or binary data via the primary selection protocol.",
      "description_length": 393,
      "index": 190,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_server.Zwp_primary_selection_offer_v1",
      "description": "Handles interactions with primary selection offer objects, including retrieving the MIME type and data of the offered content. Operates on opaque proxy types representing Wayland objects. Used to access clipboard data during drag-and-drop or copy-paste operations in Wayland-based applications.",
      "description_length": 294,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_server.Zwp_primary_selection_source_v1",
      "description": "Handles the creation and management of primary selection sources in the Wayland protocol, supporting operations like setting data, committing, and handling requests. It works with data structures representing clipboard content and protocol messages. Used to enable clipboard interactions in applications that need to expose or retrieve primary selection data.",
      "description_length": 359,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_server.Zwp_linux_dmabuf_v1",
      "description": "Handles buffer creation and management using DMA buffer file descriptors, supporting operations like importing and exporting buffers. Works with raw file descriptors, buffer metadata, and pixel format specifications. Used to enable efficient graphics data transfer between clients and the compositor in Wayland environments.",
      "description_length": 324,
      "index": 193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_server.Zwp_linux_buffer_params_v1",
      "description": "Handles retrieval of buffer parameters such as width, height, stride, and format from a Linux buffer object. Operates on raw pixel data structures and surface metadata. Used to configure rendering pipelines and validate buffer compatibility with graphics hardware.",
      "description_length": 264,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_server.Zwp_linux_dmabuf_feedback_v1",
      "description": "Handles buffer feedback from the Zwp_linux_dmabuf_feedback_v1 interface, including retrieving buffer dimensions and format. Operates on DMABUF file descriptors and associated metadata. Used to synchronize rendering pipelines with hardware buffer properties in Wayland compositors.",
      "description_length": 280,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_proto.Zwp_primary_selection_device_manager_v1",
      "description": "Handles communication with the primary selection device manager in the Wayland protocol. Provides access to interface details, version information, and defines request and event structures for interacting with client-side objects. Used to manage clipboard data transfer between applications by exposing specific protocol operations.",
      "description_length": 332,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_proto.Zwp_primary_selection_device_v1",
      "description": "Provides operations to retrieve the interface name, version, and definitions for requests and events associated with a Wayland protocol object. Works with protocol-specific data structures including request and event signatures involving object references and unsigned integers. Used to dynamically generate client-side bindings for handling primary selection interactions in a Wayland compositor.",
      "description_length": 397,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_proto.Zwp_primary_selection_offer_v1",
      "description": "Provides functions to retrieve the interface name, version, request and event details for a primary selection offer, including their parameters and types. Works with string identifiers, version numbers, and structured data types like file descriptors and strings. Used to handle clipboard data exchange in Wayland protocols, enabling interaction with primary selection offers during drag-and-drop or copy-paste operations.",
      "description_length": 422,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_proto.Zwp_primary_selection_source_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and structured request and event data for a Wayland protocol object. Works with string identifiers, version integers, and custom type lists representing protocol interactions. Used to generate bindings or inspect protocol details during runtime communication setup.",
      "description_length": 336,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_server.Zwp_pointer_constraints_v1",
      "description": "Handles pointer confinement and capture operations, enabling precise control over cursor behavior in graphical interfaces. Works with pointer event data and constraint configurations to enforce spatial boundaries or input capture. Used to restrict cursor movement within a defined area or to lock input to a specific region during interactions.",
      "description_length": 344,
      "index": 200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_server.Zwp_locked_pointer_v1",
      "description": "Handles pointer locking and unlocking operations, managing interactions with a Wayland locked pointer interface. Works with event loops, input devices, and surface references to control pointer behavior. Used to restrict pointer movement to a specific area during immersive user interactions.",
      "description_length": 292,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_server.Zwp_confined_pointer_v1",
      "description": "Handles pointer confinement and cursor visibility changes for a specific surface, providing precise control over pointer behavior in a Wayland environment. Operates on surface and seat objects, managing events related to pointer locking and unlocking. Used to restrict pointer movement within a defined area and update cursor state dynamically during interactions.",
      "description_length": 364,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_server.Zwlr_layer_shell_v1",
      "description": "Handles surface positioning and stacking within a Wayland compositor, offering functions to set surface layers, anchor points, and margins. Works with surface objects and configuration parameters specific to the layer shell protocol. Used to implement floating panels, menus, and other UI elements that require precise screen placement.",
      "description_length": 336,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_server.Zwlr_layer_surface_v1",
      "description": "Handles creation and management of layer surfaces with version 1, including setting surface geometry, configuring output, and managing z-order. Operates on types such as surface, output, and rectangle to position and size layered windows. Used to implement top-level UI elements like status bars or pop-up menus in Wayland compositors.",
      "description_length": 335,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_client.Zwlr_layer_shell_v1",
      "description": "Handles surface management and layer shell interactions for windowing systems, including surface activation, positioning, and stacking. Operates on X11 window surfaces and Wayland layer shell objects. Used to implement floating windows and overlay panels in graphical applications.",
      "description_length": 281,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_client.Zwlr_layer_surface_v1",
      "description": "Handles creation and management of layer surfaces with version 1, including setting surface geometry, configuring output, and handling events. Operates on Wl_surface and Zwlr_output_v1 types, enabling precise control over overlay elements. Used to implement application-specific UI layers that appear above other windows, such as status bars or pop-up menus.",
      "description_length": 358,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_client.Zwp_primary_selection_device_manager_v1",
      "description": "Handles the creation and management of primary selection devices, including setting and retrieving data through clipboard-like operations. Works with data types such as MIME types, byte arrays, and event handlers for data requests. Used to implement clipboard functionality in Wayland clients, enabling data exchange between applications.",
      "description_length": 338,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_client.Zwp_primary_selection_device_v1",
      "description": "Handles interaction with the primary selection device protocol, offering functions to retrieve and manage the primary selection data. It operates with data types such as selections, mime types, and event handlers for clipboard updates. Used to implement clipboard functionality in Wayland clients that support primary selection.",
      "description_length": 328,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_client.Zwp_primary_selection_offer_v1",
      "description": "Handles interactions with primary selection offer objects, including retrieving the MIME type and data of the offered content. Operates on opaque proxy objects and data buffers associated with the Wayland protocol. Used to access clipboard data during drag-and-drop or copy-paste operations in Wayland-based applications.",
      "description_length": 321,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_client.Zwp_primary_selection_source_v1",
      "description": "Handles the creation and management of primary selection data sources in the Wayland protocol, supporting operations like setting data, sending selections, and handling requests. It works with data structures such as mime types, file descriptors, and event loops specific to the Wayland server. Used to enable clipboard-like functionality in applications that need to transfer text or files via the primary selection mechanism.",
      "description_length": 427,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_proto.Wl_drm",
      "description": "Encodes and decodes error states, numeric values, and DRM capabilities using 32-bit integers, providing efficient serialization and interpretation of low-level system data. It handles opaque and abstract types `t` for errors, numeric representations, and capability bitmasks. Operations include converting between these types and their integer equivalents for use in binary protocols and system interfaces. For example, it can serialize an error condition into an integer for logging, decode a capability bitmask from a network packet, or convert a custom numeric type to a 32-bit integer for storage.",
      "description_length": 601,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_shell_v1",
      "description": "Handles error and layer state conversions using opaque and abstract types, enabling efficient representation and manipulation of error codes and rendering priorities. Supports serialization of error conditions and layer ordering in graphical systems through 32-bit integer mappings. Can be used to encode error states for network transmission or set surface layers for proper display hierarchy. Operations include converting between internal states and integer representations for both error and layer values.",
      "description_length": 509,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto.Zwlr_layer_surface_v1",
      "description": "Encodes and decodes interaction modes, error states, and bit-packed integers using sealed and opaque types, enabling precise control over graphical interfaces, error handling, and low-level data manipulation. Operations include converting between custom types and 32-bit integers, extracting and reconstructing bit ranges, and serializing error conditions. Functions support exclusive keyboard focus, error code transmission, and bitwise data processing. Examples include enforcing input restrictions, transmitting error codes over networks, and isolating specific bits for hardware-level operations.",
      "description_length": 600,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_server.Zxdg_decoration_manager_v1",
      "description": "Handles the creation and management of decoration surfaces for client windows, including setting and updating decoration properties. Operates on XdgSurface and XdgToplevel objects to control window borders and title bars. Used to implement custom window decorations in Wayland compositors.",
      "description_length": 289,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_server.Zxdg_toplevel_decoration_v1",
      "description": "Handles setting and managing window decorations for XDG toplevel surfaces, including requesting and responding to decoration mode changes. Operates on XDG toplevel objects and decoration mode values. Used to customize window borders and title bars in Wayland compositors.",
      "description_length": 271,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_server.Zxdg_output_manager_v1",
      "description": "Handles creation and management of output objects for Wayland clients, including setting output information and handling events. Operates with Wayland proxy objects and output configuration data. Used to integrate application rendering with specific display outputs in a multi-monitor setup.",
      "description_length": 291,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_server.Zxdg_output_v1",
      "description": "Handles the creation and management of output configurations for high-DPI displays, including setting scale factors and transforming coordinates. Operates on XDG output objects and associated display properties. Used to adjust application rendering for multi-monitor setups with varying resolutions.",
      "description_length": 299,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_proto.Zwp_relative_pointer_manager_v1",
      "description": "Provides functions to retrieve interface details, version numbers, and request/event structures for a relative pointer manager. Works with integers to index requests and events, and uses custom type aliases for object and ID references. Used to handle protocol-specific interactions in Wayland client code.",
      "description_length": 306,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_proto.Zwp_relative_pointer_v1",
      "description": "Provides functions to retrieve interface information, version numbers, and detailed request and event structures for a specific protocol extension. Works with protocol-specific data like request IDs, event names, and parameter types including fixed and unsigned integer values. Used to dynamically generate protocol bindings and handle event parsing in Wayland client implementations.",
      "description_length": 384,
      "index": 219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Unix_transport",
      "description": "Provides functions to create and connect a transport layer over a Unix-domain socket, using a stream socket and managing resource cleanup. Works with Eio Unix network sockets and handles Wayland socket path resolution based on environment variables. Used to establish communication with a Wayland server by either using an existing file descriptor or a computed socket path.",
      "description_length": 374,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Client",
      "description": "Handles message transmission by sending outgoing messages and receiving incoming messages through a proxy interface. Operates on proxy structures and typed message records with read/write constraints. Used to manage bidirectional communication channels in networked applications.",
      "description_length": 279,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Registry",
      "description": "Provides operations to create a registry from a Wayland display, retrieve entries by interface name, and bind to specific interfaces with version checks. Works with Wayland display objects, interface entries, and proxy handlers. Used to access and interact with Wayland compositor services like surfaces, seats, and outputs.",
      "description_length": 324,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Server",
      "description": "Handles message transmission by sending outgoing data through a proxy and receiving incoming data via a proxy. Operates on proxy structures with typed message payloads for read and write operations. Used to manage bidirectional communication channels in networked applications.",
      "description_length": 277,
      "index": 223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland.Proxy",
      "description": "Handles message routing for communication channels by processing outgoing and incoming messages based on role-specific permissions. Operates on message structures with read and write constraints, using a role type to determine access. Used to manage data flow in systems requiring strict message handling, such as network protocols or inter-process communication.",
      "description_length": 363,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Fixed",
      "description": "Converts between integers and 24.8 fixed-point numbers, and provides bitwise access for low-level manipulation. Works with 32-bit integers as the underlying representation. Used for precise fractional calculations in graphics and protocol communication.",
      "description_length": 253,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_client",
      "description": "Provides low-level interaction with a Wayland display server through message handling, object management, and event processing. It supports surface creation, buffer allocation, input event handling, and data transfer operations using types like wl_surface, shared memory buffers, and event callbacks. Functions include managing surface hierarchies, handling keyboard and pointer input, and facilitating drag-and-drop and clipboard interactions. Examples include rendering graphical content, responding to user input, and synchronizing with display properties at runtime.",
      "description_length": 570,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_server",
      "description": "Provides low-level control over Wayland server communication, surface management, and input handling through direct protocol interaction. It supports operations on types like wl_surface, wl_region, and seat objects, enabling creation of window hierarchies, event-driven callbacks, and input tracking. Examples include managing drag-and-drop data transfers, handling touch gestures, and configuring display outputs. It also facilitates shared memory buffer management and surface rendering for graphical applications.",
      "description_length": 516,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Wayland_proto",
      "description": "Encapsulates error state encoding and decoding using opaque type `t`, converting between error values and 32-bit integers for efficient communication. Provides methods to access protocol details, interface names, and version numbers, enabling dynamic interpretation of Wayland objects and their interactions. Supports operations like converting error codes to integers for logging, parsing surface and buffer protocol data, and managing input-related values such as button states and axis identifiers. Examples include serializing a surface error for transmission, retrieving touch event structures, and handling compositor-specific protocol details.",
      "description_length": 650,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Metadata",
      "description": "Provides access to metadata fields such as interface name, version number, and request/event information. Operates on a custom type `t` that encapsulates structured metadata. Used to extract and inspect runtime configuration details during system initialization.",
      "description_length": 262,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Msg",
      "description": "Provides functions to parse and construct messages with headers, arguments, and file descriptors. Works with message objects, integers, strings, arrays, and file descriptors, supporting both reading and writing operations. Parses messages from buffers, extracts operation and object IDs, and builds messages with specific argument types for communication protocols.",
      "description_length": 365,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.S",
      "description": "Provides functions to send and receive byte sequences and file descriptors using low-level Unix system calls. Operates on raw byte arrays and file descriptor integers. Enables inter-process communication over Unix sockets by encapsulating sendmsg and recvmsg behavior.",
      "description_length": 268,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland.Iface_reg",
      "description": "Registers Wayland interface metadata and maps interface names to their corresponding metadata structures. Operates on modules conforming to the Metadata.S signature. Used to dynamically resolve interface definitions during code generation.",
      "description_length": 239,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_client",
      "description": "Manages DRM device initialization, resource allocation, and event handling for graphics applications. Operates on file descriptors, DRM device structures, and event queues to enable secure rendering contexts. Supports low-level display resource management in X11 and Wayland environments. Examples include setting up display pipelines, handling DRM events, and managing GPU resources.",
      "description_length": 384,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_proto",
      "description": "Encodes and decodes error states, numeric values, and DRM capabilities using 32-bit integers, enabling efficient handling of low-level system data. It supports conversions between opaque types `t` and their integer representations, including error codes, numeric values, and capability bitmasks. Operations allow serialization of error conditions for logging, decoding of bitmasks from network packets, and conversion of custom numeric types to 32-bit integers. Examples include storing a capability flag in a binary protocol or translating an error code into a human-readable format.",
      "description_length": 584,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Drm_server",
      "description": "Manages DRM device initialization, resource allocation, and event handling for secure graphics rendering in low-level windowing systems. Operates on file descriptors, DRM device structures, and event queues to support Wayland client interactions. Provides functions to set up display contexts, monitor hardware events, and manage graphics resources. Examples include initializing DRM devices, polling for display events, and allocating framebuffers for rendering.",
      "description_length": 463,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_client",
      "description": "Manages data exchange via primary selection in GTK, enabling clipboard and drag-and-drop operations across applications. Supports setting and retrieving text, URIs, and byte sequences using MIME types, device identifiers, and timestamps. Provides methods to offer data, handle requests, and manage selection ownership during interactions. Used to implement seamless data sharing in Wayland and compatible environments.",
      "description_length": 418,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_proto",
      "description": "Handles device and source interface details, versioning, and event/request structures using integers, strings, and variant types. Supports retrieval of device events, data formats, and protocol messages for precise input and clipboard management. Enables inspection of capabilities and interaction signals in GUI applications. Can parse clipboard data, manage drag-and-drop operations, and handle device-specific protocol exchanges.",
      "description_length": 432,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Gtk_primary_selection_server",
      "description": "Manages primary selection data across input devices and applications, supporting data exchange through clipboard-like operations and drag-and-drop interactions. It handles MIME types, byte arrays, and timestamps, enabling retrieval and setting of text, URIs, and other data formats. Operations include offering data, managing selection sources, and synchronizing clipboard content between applications. Examples include custom drag-and-drop implementations and cross-application data sharing in Wayland environments.",
      "description_length": 516,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_client",
      "description": "Manages DMA buffer lifecycle, metadata extraction, and feedback inspection for graphics applications. Supports operations like buffer allocation, parameter retrieval, and format validation using file descriptors, opaque data structures, and protocol-specific types. Enables efficient memory sharing and validation in Wayland-based display systems. Examples include creating buffers for rendering, extracting stride and format for texture setup, and checking buffer modifiers for compatibility.",
      "description_length": 493,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_proto",
      "description": "Provides functions to inspect and interact with the Linux DMA buffer protocol, handling interface details, versioning, and message structures through string identifiers and structured data. It includes error encoding and decoding using opaque 32-bit integers, supporting bitwise operations for precise control over rendering and display settings. Flag management is also enabled via 32-bit integers, allowing efficient manipulation of system states and feature configurations. Examples include serializing error codes for debugging and adjusting video frame flags for optimized output.",
      "description_length": 585,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Linux_dmabuf_unstable_v1_server",
      "description": "Manages DMA buffer lifecycle and metadata, enabling efficient graphics data handling in Wayland by creating, exporting, and inspecting buffers with specific pixel formats, dimensions, and strides. Provides access to buffer properties through direct file descriptor manipulation and metadata parsing, allowing for precise control over rendering configurations. Supports feedback mechanisms to align compositor operations with hardware buffer characteristics, ensuring compatibility and synchronization. Examples include importing a buffer from a file descriptor, querying its dimensions for rendering setup, and using feedback to adjust pipeline settings dynamically.",
      "description_length": 666,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_client",
      "description": "Controls cursor behavior through confinement, capture, and locking mechanisms, using surface and seat data to enforce spatial and motion constraints. Provides operations for restricting pointer movement to specific regions, locking it to surfaces, and managing event-driven interactions. Supports precise control over input in applications like games, custom UIs, and drag-and-drop interfaces. Examples include confining a cursor to a window, locking it during a drag operation, or restricting movement during immersive experiences.",
      "description_length": 532,
      "index": 242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_proto",
      "description": "Manages pointer constraint interactions through integer encoding, error handling, and protocol data retrieval. Supports operations on 32-bit integers for error and lifetime values, and provides access to protocol versions, interface details, and event/request structures. Enables serialization of error states, control of constraint lifetimes, and dynamic inspection of protocol objects. Used for generating bindings, handling Wayland events, and managing protocol-specific data in client implementations.",
      "description_length": 505,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Pointer_constraints_unstable_v1_server",
      "description": "Manages pointer behavior in Wayland environments through confinement, locking, and visibility controls. Operates on surface and seat objects, handling events to restrict movement, capture input, and update cursor states. Supports scenarios like immersive UI interactions, where pointer movement is confined to a region or locked to a surface. Enables dynamic control over cursor behavior during user sessions.",
      "description_length": 409,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_client",
      "description": "Manages relative pointer interactions by tracking and updating coordinates relative to a target surface, supporting operations like setting, resetting, and transforming positions. Key data types include surface references, coordinate pairs, and event handlers. It enables precise control over cursor behavior, such as confining movement to a region or adjusting position during drag operations. Examples include implementing custom drag logic or adjusting pointer position within a confined area.",
      "description_length": 496,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_proto",
      "description": "Encapsulates protocol-specific data for a relative pointer extension, offering access to interface details, versioning, and structured request/event definitions. It supports integer-based indexing and custom type aliases for object and ID references, enabling precise protocol interaction. Functions allow retrieval of request IDs, event names, and parameter types, including fixed and unsigned integers. This enables dynamic binding generation and event handling in Wayland client code.",
      "description_length": 487,
      "index": 246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Relative_pointer_unstable_v1_server",
      "description": "Manages relative pointer positioning by tracking and adjusting coordinates based on surface references, enabling precise cursor control within defined areas. Supports setting, unsetting, and resetting relative pointer states, with operations that handle coordinate transformations. It allows for dynamic interaction, such as moving a cursor within a specific window region or adjusting position based on surface changes. Examples include implementing drag-and-drop within a container or aligning a cursor to a transformed surface.",
      "description_length": 530,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_client",
      "description": "Manages X11 window objects and decoration configurations to dynamically adjust window borders and title bars in KDE KWin. Processes window properties to apply system policies or user preferences, enabling real-time visual adjustments. Supports querying and updating decoration settings through structured data interactions. Allows for customization of window appearance based on application needs or user-defined themes.",
      "description_length": 420,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_proto",
      "description": "Encodes and decodes custom mode values as 32-bit integers, using the opaque type `t` to represent request and event modes. It provides conversion functions between `t` and integer representations, enabling precise serialization and parsing of mode data for system communication. This allows for efficient handling of mode configurations in network protocols and low-level interactions. For instance, it can translate a decoration mode into a numeric identifier for use in event processing or request formatting.",
      "description_length": 511,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Server_decoration_server",
      "description": "Manages server-side window decorations for KWin, enabling dynamic adjustment of borders and title bars using X11 window objects and configuration data. Supports querying and applying style changes through window identifiers and versioned interface objects. Allows customization of window appearance based on user preferences or application needs. Can update decoration properties in real time, such as changing border width or title bar color.",
      "description_length": 443,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_client",
      "description": "Manages window surfaces and layer shell interactions, enabling precise control over positioning, stacking, and geometry of overlay elements like status bars and pop-up menus. Operates on X11 and Wayland types, supporting surface activation and event handling for dynamic UI layers. Allows creation of layered surfaces with output-specific configurations, facilitating floating window implementations. Examples include setting a status bar above other windows or managing a pop-up menu's placement and visibility.",
      "description_length": 512,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_proto",
      "description": "Converts and manages error states and layer priorities using opaque types, enabling efficient serialization and manipulation of graphical system data through 32-bit integer mappings. Supports encoding interaction modes, extracting bit ranges, and handling low-level data with sealed types for precise control over input and error transmission. Operations include converting between custom types and integers, isolating bits for hardware interactions, and enforcing display hierarchies. Examples include setting surface layers for rendering, transmitting error codes over networks, and managing keyboard focus restrictions.",
      "description_length": 622,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wlr_layer_shell_unstable_v1_server",
      "description": "Manages layered surfaces in a Wayland compositor by defining their position, size, and stacking order through surface, output, and rectangle types. Supports setting anchor points, margins, and z-order to place elements like menus, status bars, and panels precisely on screen. Provides functions to configure surface geometry and output-specific properties for consistent rendering. Examples include creating floating panels that remain visible above other windows or positioning pop-up menus relative to specific screen coordinates.",
      "description_length": 532,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_client",
      "description": "Provides screen capture capabilities through methods to create resources, manage frame events, and access pixel data from Wayland surfaces. It supports retrieving frame buffers and metadata, enabling real-time screen sharing and automated screenshot generation. Operations include region-specific captures and event-driven data retrieval. Examples include debugging visual output, streaming display content, and capturing screenshots for testing.",
      "description_length": 446,
      "index": 254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_proto",
      "description": "Encapsulates protocol details for screen capture interactions, offering interface names, versions, and structured request/event definitions. Supports integer and bitwise operations for error handling and low-level data manipulation, enabling precise control over protocol states. Converts error codes to 32-bit integers and allows bit-level modifications for efficient communication. Examples include encoding protocol errors for logging or adjusting status flags in hardware registers.",
      "description_length": 486,
      "index": 255,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wlr_screencopy_unstable_v1_server",
      "description": "Manages screen capture through creation of resources, frame handling, and buffer retrieval, leveraging Wayland's surface and event infrastructure. Provides access to pixel data and frame metadata using structured formats, supporting real-time screen content processing. Enables implementation of screenshot and recording features by exposing buffer access and timing information. Examples include capturing frame buffers for display or saving image data with associated timestamps.",
      "description_length": 481,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_client",
      "description": "Manages clipboard-like data exchange in Wayland clients through primary selection mechanisms, handling data retrieval, storage, and transfer. Supports MIME types, byte arrays, and file descriptors, enabling operations such as copying text, dragging content, and pasting data. Provides access to clipboard content via event-driven interactions and proxy objects. Allows applications to set, request, and manage primary selection data across different protocols and events.",
      "description_length": 471,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_proto",
      "description": "Manages Wayland primary selection interactions by exposing interface names, versions, and protocol structures for requests and events. Supports retrieval of data such as clipboard content, file descriptors, and string identifiers through structured operations. Enables dynamic client-side binding generation and protocol inspection during runtime. Facilitates clipboard data exchange and object communication in Wayland compositors.",
      "description_length": 432,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Wp_primary_selection_unstable_v1_server",
      "description": "Manages Wayland primary selection interactions, enabling clipboard-like data exchange between applications through MIME types, byte arrays, and event-driven data handling. Provides operations to create, commit, and retrieve primary selection data, as well as handle requests and offers during drag-and-drop or copy-paste actions. Supports functions for setting and accessing clipboard content, including retrieving MIME types and binary data from offered selections. Used to implement seamless data transfer between Wayland clients using protocol-specific data structures and event handlers.",
      "description_length": 591,
      "index": 259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_client",
      "description": "Manages client-side window decorations via the xdg-decoration protocol, enabling control over window borders and title bars. It supports requesting and updating decoration surfaces, handling mode changes, and interacting with toplevel objects. Operations include setting decoration modes and managing surface lifecycles. Examples include customizing window appearance and responding to compositor requests for style updates.",
      "description_length": 424,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_proto",
      "description": "Handles XDG decoration protocol interactions by managing client requests, events, and state conversions. It defines operations for encoding and decoding error states and decoration modes between opaque types and 32-bit integers. This enables efficient serialization, logging, and transmission of window management data. For instance, it can convert a decoration mode to an integer for network transmission or decode an error code from a protocol message.",
      "description_length": 454,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_decoration_unstable_v1_server",
      "description": "Manages window decoration behavior for XDG toplevel surfaces, enabling control over borders and title bars through property updates and mode changes. Operates on XdgSurface and XdgToplevel objects to apply custom decorations dynamically. Supports requests to switch between client-side and server-side decoration modes. Allows compositors to enforce specific decoration styles or respond to client preferences.",
      "description_length": 410,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_client",
      "description": "Manages dynamic configuration of Wayland outputs through XdgOutputV1 objects, enabling setting of names, descriptions, display modes, and retrieving output properties. Supports runtime adjustments like resolution and orientation changes in multi-monitor setups. Operations include creating, updating, and querying output configurations. Examples include defining custom output labels and switching between available display modes.",
      "description_length": 430,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_proto",
      "description": "Handles interface requests and events for a Wayland output manager, using string and variant types to reference objects and IDs, enabling configuration and state management. Retrieves protocol-specific details such as versions, event definitions, and request parameters through integer and string-based lookups. Supports dynamic event processing and validation by inspecting interface metadata. Examples include fetching event data by ID, validating request structures, and managing output state changes.",
      "description_length": 504,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_output_unstable_v1_server",
      "description": "Manages Wayland output objects and their configurations, enabling precise control over display settings and rendering in multi-monitor environments. Supports setting scale factors, transforming coordinates, and configuring output properties through XDG output objects. Allows applications to adapt visuals to different resolutions and DPI levels dynamically. Enables seamless integration of client rendering with specific outputs, ensuring correct layout and scaling across displays.",
      "description_length": 483,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_client",
      "description": "Manages window and surface interactions in a Wayland environment, handling events like ping, close, and configure, as well as positioning and sizing of surfaces relative to a parent. Supports setting window properties such as title, icon, and state, and enables creation and placement of popups, menus, and tooltips. Operations include commit, set_title, set_app_id, and configure, working with surfaces, xdg_surface, and xdg_wm_base objects. Examples include customizing window decorations, aligning popups, and managing window lifecycle events.",
      "description_length": 546,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_proto",
      "description": "Converts error states and system values between 32-bit integers and opaque types, enabling efficient serialization and transmission. Provides encoding and decoding operations for error conditions, window states, resize edges, and identifiers, with support for layout adjustments. Examples include serializing protocol errors for network communication and dynamically resizing surfaces within a compositor's workspace. Operations ensure compatibility across systems and facilitate low-level state management.",
      "description_length": 507,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland_protocols.Xdg_shell_server",
      "description": "Manages window and surface interactions in a Wayland compositor through operations like configuring, positioning, and initializing surfaces. Key data types include surfaces, xdg_surface objects, coordinates, and directional enums, with operations for setting titles, app IDs, and placement. It supports creating toplevel windows, popups, and menus, enabling precise control over window geometry and user interface elements. Examples include setting a window's title, positioning a popup relative to a parent surface, and handling close requests during a compositor session.",
      "description_length": 573,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "wayland",
      "description": "Handles message serialization and deserialization for the Wayland protocol, including parsing object IDs, operation IDs, and argument lists. Operates on binary data streams and structured message representations derived from protocol definitions. Used to process incoming events from the display server and construct outgoing requests from client applications.",
      "description_length": 360,
      "index": 269,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wayland",
      "description": "Manages Wayland communication through transport, message handling, and object interaction. Provides types like proxies, messages, and metadata, with operations for sending/receiving data, creating registries, and handling fixed-point arithmetic. Supports bidirectional communication, error encoding, and low-level protocol interactions, enabling tasks such as surface rendering, input event processing, and dynamic interface resolution. Examples include establishing socket connections, binding to compositor services, and managing shared memory buffers.",
      "description_length": 554,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wayland_protocols",
      "description": "Manages low-level graphics and input interactions across Wayland and X11, handling DRM device operations, DMA buffer management, and primary selection data exchange. Key data types include file descriptors, 32-bit integers, opaque `t` types, and surface objects, with operations for error encoding, buffer creation, and event handling. Examples include setting up display pipelines, managing clipboard data, and controlling cursor confinement for immersive applications.",
      "description_length": 470,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 384,
    "meaningful_modules": 272,
    "filtered_empty_modules": 112,
    "retention_rate": 0.7083333333333334
  },
  "statistics": {
    "max_description_length": 666,
    "min_description_length": 192,
    "avg_description_length": 345.5220588235294,
    "embedding_file_size_mb": 0.9636936187744141
  }
}