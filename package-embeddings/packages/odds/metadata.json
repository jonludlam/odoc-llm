{
  "package": "odds",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:22.682613",
  "modules": [
    {
      "module_path": "Odds.Dice",
      "description": "Provides operations to evaluate dice expressions and fold over multiple dice rolls. Works with custom types for unary and binary operations and a formula structure representing dice expressions. Used to compute results like the maximum of two d20 rolls or evaluate complex dice formulas.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Odds.Lexer",
      "description": "Processes input streams to identify and extract tokens according to predefined lexical rules. Operates on lexing buffers and returns parsed tokens based on internal state transitions. Used to convert raw source code into a sequence of structured tokens for subsequent parsing.",
      "description_length": 276,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Odds.Parser",
      "description": "Parses a stream of tokens into a Dice.formula structure using a provided lexer function. It processes input through a lexing buffer and maps token sequences to structured formula representations. This enables conversion of textual dice notation into an abstract syntax tree for evaluation.",
      "description_length": 289,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "odds",
      "description": "Generates random integers within specified ranges using effectful operations, allowing external control over random number generation. Works with integer bounds and dice expressions represented as tuples. Enables game mechanics like attack rolls, skill checks, and loot drops in applications requiring controlled randomness.",
      "description_length": 324,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Odds",
      "description": "Combines lexing, parsing, and evaluation capabilities for dice notation, enabling the processing of textual dice expressions into executable structures. It supports custom operations, token recognition, and formula evaluation, allowing tasks such as parsing \"2d6+3\" into a structured formula or calculating the sum of multiple dice rolls. Key data types include tokens, lexing buffers, and formula representations, with operations for folding, parsing, and evaluating expressions. Examples include extracting tokens from input, building an abstract syntax tree from a string, and computing results like the total of a complex dice roll.",
      "description_length": 636,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 636,
    "min_description_length": 276,
    "avg_description_length": 362.4,
    "embedding_file_size_mb": 0.018598556518554688
  }
}