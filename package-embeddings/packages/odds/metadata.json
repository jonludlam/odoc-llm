{
  "package": "odds",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:56.742588",
  "modules": [
    {
      "module_path": "Odds.Dice",
      "library": "odds",
      "description": "Handles dice rolls and mathematical operations on their outcomes using algebraic effects. It provides a `fold` function to accumulate results over multiple dice rolls and an `eval` function to compute values from expression trees representing dice rolls and arithmetic operations. Works with custom algebraic data types for dice formulas, including constants, unary and binary operations, and effectful dice rolls. Useful for implementing probabilistic calculations and dice-based game mechanics where expressions combine fixed values and random rolls.",
      "description_length": 552,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Odds.Lexer",
      "library": "odds",
      "description": "This module implements a lexer for parsing input into tokens using standard OCaml lexing tables. It provides functions to convert a lexing buffer into a stream of tokens defined by the `Odds.Parser.token` type. Concrete use cases include tokenizing source code or structured text input for further parsing or analysis.",
      "description_length": 318,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Odds.Parser",
      "library": "odds",
      "description": "Parses dice roll formulas from token streams generated by lexers. It converts sequences of tokens like integers, operators, and parentheses into structured dice formulas. Useful for implementing dice notation parsers in games or probability simulations.",
      "description_length": 253,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Odds",
      "library": "odds",
      "description": "This module combines lexing, parsing, and probabilistic evaluation to process and compute dice roll expressions. It defines data types for dice formulas, including constants, operations, and effectful rolls, and supports parsing token streams into structured expressions and evaluating or folding over their outcomes. Examples include converting input like \"2d6 + 4\" into an abstract formula, computing its possible results, or accumulating statistics across multiple rolls.",
      "description_length": 474,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 552,
    "min_description_length": 253,
    "avg_description_length": 399.25,
    "embedding_file_size_mb": 0.014950752258300781
  }
}