{
  "package": "ez_dune_describe",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:15:47.771858",
  "modules": [
    {
      "module_path": "Ez_dune_describe.Decoder.WorkspaceDecoder",
      "library": "ez_dune_describe",
      "description": "Handles decoding S-expressions into workspace configuration data structures. Works with `Workspace.t` and S-expression decoders. Used to parse dune workspace files into typed representations.",
      "description_length": 191,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Datatypes.Module",
      "library": "ez_dune_describe",
      "description": "This module represents OCaml modules as described by Dune, with fields for module names, implementations, interfaces, and dependency sets. It includes functions to format module data, retrieve unique identifiers, and extract dependencies. It is used to analyze and manage module relationships in Dune-based OCaml projects.",
      "description_length": 322,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Datatypes.Compilable",
      "library": "ez_dune_describe",
      "description": "This module defines and manipulates compilable units such as executables and libraries, supporting operations to format, identify, and extract dependencies. It works with algebraic data types representing executables and libraries, including their modules, dependencies, and include directories. Concrete use cases include analyzing and traversing dependency graphs of Dune projects, generating build configurations, and managing module relationships in static analysis tools.",
      "description_length": 476,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Datatypes.Workspace",
      "library": "ez_dune_describe",
      "description": "This module represents and processes dune workspaces, which consist of a root directory, a context, and a list of compilable units. It provides operations to format workspace data, extract dependency lists, and fold or iterate over compilable units in topological order. Use cases include analyzing project dependencies, generating build configurations, or detecting circular dependencies in dune-based OCaml projects.",
      "description_length": 418,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Datatypes.Make",
      "library": "ez_dune_describe",
      "description": "This module defines `fold` and `iter` functions that traverse compilable units of a workspace in topological dependency order. It operates over a foldable type `X`, which includes structures like Workspaces and Compilables. Use it to process build targets in dependency order, such as accumulating build results or executing actions across a project.",
      "description_length": 350,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Datatypes",
      "library": "ez_dune_describe",
      "description": "This module defines data structures and operations for representing and manipulating OCaml modules, compilable units (like libraries and executables), and Dune workspaces. It includes sets, formattable and foldable types, and modules for extracting dependencies, formatting data, and processing compilable units in topological order. It is used for static analysis, dependency management, and build configuration generation in Dune-based OCaml projects.",
      "description_length": 453,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe.Decoder",
      "library": "ez_dune_describe",
      "description": "Decodes S-expressions into structured workspace configurations, specifically handling `Workspace.t` types. Provides the `workspace_decoder` value to parse dune workspace files in csexp format, supporting the `--with-deps` option for dependency inclusion. Directly used in tooling that processes dune project metadata, such as build analysis or dependency visualization tools.",
      "description_length": 375,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ez_dune_describe",
      "library": "ez_dune_describe",
      "description": "This module provides operations for analyzing and manipulating Dune workspace configurations and OCaml project structures. It includes data types for representing modules, libraries, executables, and dependencies, along with functions for topological sorting, formatting, and dependency extraction. It is used for static analysis, build configuration generation, and tooling that processes Dune metadata, such as dependency visualization or build introspection utilities.",
      "description_length": 471,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 476,
    "min_description_length": 191,
    "avg_description_length": 382.0,
    "embedding_file_size_mb": 0.11633968353271484
  }
}