{
  "package": "minisat",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:51.482177",
  "modules": [
    {
      "module_path": "Minisat.Lit",
      "library": "minisat",
      "description": "This module represents propositional literals in Minisat, providing operations to create, negate, and manipulate literals using integers as the underlying representation. It supports comparisons, hashing, and sign manipulation, ensuring invariants such as double negation cancellation and consistent sign extraction. Concrete use cases include constructing logical formulas, implementing SAT solvers, and managing variable assignments in formal verification tasks.",
      "description_length": 464,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Minisat.Debug",
      "library": "minisat",
      "description": "Writes the current state of a SAT solver's clauses to a DIMACS-formatted file. Uses the solver's internal representation to output constraints in a standard format for SAT solvers. Useful for debugging or external analysis of generated clauses.",
      "description_length": 244,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minisat",
      "library": "minisat",
      "description": "This module provides a SAT solver interface with operations to create and manage solver states, add logical clauses, check satisfiability under assumptions, and inspect variable assignments. It works with literals, clauses represented as literal arrays or lists, and solver state objects, supporting use cases like formal verification, constraint solving, and automated reasoning. The interface includes utilities for literal manipulation, such as negation and sign extraction, and supports exporting solver clauses to DIMACS format for debugging or external analysis. Together, these components enable constructing, solving, and analyzing logical formulas in practical applications like program analysis and automated reasoning.",
      "description_length": 729,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 729,
    "min_description_length": 244,
    "avg_description_length": 479.0,
    "embedding_file_size_mb": 0.0113067626953125
  }
}