{
  "package": "testo",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:52.192628",
  "modules": [
    {
      "module_path": "Testo.Promise.Operators",
      "description": "Performs monadic binding, chaining operations that return wrapped values. Works with any type equipped with a `t` constructor, enabling sequential computation. Used to handle effectful computations in a clean, composable way, such as parsing or state transformations.",
      "description_length": 267,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo.Promise",
      "description": "Encapsulates asynchronous operations with monadic composition, enabling sequential execution of effectful tasks through `t`-wrapped values. Supports chaining of functions that return wrapped results, facilitating clean handling of side effects and state transitions. Examples include asynchronous parsing, I/O operations, and stateful computations. Operations include binding, mapping, and lifting functions into the wrapped context.",
      "description_length": 433,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo.Tag",
      "description": "Provides functions to create, compare, and convert tags, which are uniquely identified strings used to categorize tests. Operates on a private string type representing validated tags, ensuring they follow a specific format. Used to register test subsets and verify tag consistency during test execution.",
      "description_length": 303,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "testo",
      "description": "Provides functions for parsing and formatting structured text, including line-by-line processing and block extraction. Works with strings, lists of lines, and custom record types representing text blocks. Used to transform log files into annotated summaries and extract metadata from configuration documents.",
      "description_length": 308,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo",
      "description": "Encapsulates asynchronous and effectful operations through a monadic interface, allowing sequential execution of tasks wrapped in `t` values. Manages test categorization via validated string tags, supporting creation, comparison, and conversion for test registration and verification. Operations include binding, mapping, and tag manipulation, enabling structured test workflows. Examples include asynchronous test setup and tag-based test filtering.",
      "description_length": 450,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 450,
    "min_description_length": 267,
    "avg_description_length": 352.2,
    "embedding_file_size_mb": 0.018596649169921875
  }
}