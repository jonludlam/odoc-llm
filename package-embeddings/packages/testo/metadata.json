{
  "package": "testo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:08.316344",
  "modules": [
    {
      "module_path": "Testo.Promise.Operators",
      "library": "testo",
      "description": "This module provides Lwt-style asynchronous binding through the `>>=` operator, enabling sequential composition of promise-based test actions. It works with `Testo.Promise.t`, a wrapper for asynchronous computations. Use it to chain asynchronous test steps, such as setting up a database connection before running dependent tests.",
      "description_length": 330,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo.Tag",
      "library": "testo",
      "description": "This module manages test tags as opaque string values, enabling the creation, registration, and comparison of tags to categorize and select test cases. It provides operations to declare tags, list all registered tags, compare and check equality between tags, and convert tags to and from strings. These features support filtering and organizing tests based on descriptive metadata, both programmatically and via command-line interface.",
      "description_length": 435,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo.Promise",
      "library": "testo",
      "description": "This module manages asynchronous test logic using Lwt-style promises, enabling sequential composition with `bind` (`>>=`) and handling errors cleanly with `catch`. It centers around `Testo.Promise.t`, a type representing asynchronous computations, and supports resource cleanup with `protect`. Use it to structure tests involving I/O, concurrency, or exceptions, such as chaining setup and teardown steps or isolating error-prone operations. The `>>=` operator allows direct sequencing of asynchronous test actions, like initializing a database before running dependent tests.",
      "description_length": 576,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo",
      "library": "testo",
      "description": "This module structures test execution with support for output validation, status tracking, and test organization using tags and temporary environments. It handles test cases, execution results, and output manipulation, allowing dynamic validation through masks and filters, and supports command-line integration and test categorization via tags. The child module on tags enables creating and managing opaque string tags for filtering and organizing tests programmatically or through the command line. Another child module provides Lwt-based asynchronous test handling with promises, supporting sequential composition, error handling, and resource cleanup for I/O-bound or concurrent test logic.",
      "description_length": 694,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 694,
    "min_description_length": 330,
    "avg_description_length": 508.75,
    "embedding_file_size_mb": 0.014937400817871094
  }
}