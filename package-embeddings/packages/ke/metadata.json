{
  "package": "ke",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:25:22.765306",
  "modules": [
    {
      "module_path": "Ke.Fke.Weighted.N",
      "library": "ke",
      "description": "This module implements high-performance queue operations for handling weighted data streams using bigarrays. It provides functions to bulk push and pop elements with customizable blit and length operations, ensuring efficient data transfer without intermediate allocations. Use cases include network packet buffering, streaming data processing, and memory-backed queue management where direct memory manipulation is required.",
      "description_length": 425,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Rke.Weighted.N",
      "library": "ke",
      "description": "This module provides operations for efficiently pushing, peeking, and shifting elements in a weighted queue using bigarrays. It supports data types involving `('a, 'b) Ke.Rke.Weighted.t` and bigarray-based sources or destinations, with blit and length functions for custom memory management. Concrete use cases include high-performance data streaming and buffer manipulation where direct memory control is required.",
      "description_length": 415,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Fke.Weighted",
      "library": "ke",
      "description": "This implementation provides a weighted queue built on bigarrays, enabling efficient element manipulation at both ends, state inspection (e.g., emptiness checks, length), and memory-optimized operations through safe and unsafe push/pop variants. It works with custom weighted arrays and facilitates conversions to and from Bigarray.Array1.t, supporting applications in streaming data processing and network buffering where performance and resource management are critical. The module includes utilities for iteration, copying, and pretty-printing, balancing low-level memory control with safety-critical abstractions.",
      "description_length": 617,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Sigs.Weighted",
      "library": "ke",
      "description": "This module defines interfaces for working with weighted values and functions over them, primarily through two module types `R` and `F`. It supports operations such as combining weights, applying weighted transformations, and aggregating results based on weight-based strategies. Concrete use cases include implementing weighted averages, prioritized task scheduling, and probabilistic sampling where each element has an associated weight influencing its selection likelihood.",
      "description_length": 476,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Rke.N",
      "library": "ke",
      "description": "This module provides low-level operations for manipulating a queue structure with direct memory management using bigarrays. It supports efficient bulk data transfers to and from the queue, with functions to push data, peek at queued elements, and shift or keep elements with optional bounds checking. These operations are particularly useful for high-performance networking or I/O processing where direct memory access and batch data handling are critical.",
      "description_length": 456,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Fke",
      "library": "ke",
      "description": "This module implements a double-ended queue with operations for adding or removing elements from both ends, checking emptiness and length, and safely or unsafely accessing elements. It supports iteration, folding, and pretty-printing, working with a custom queue type that internally optimizes memory usage. Concrete use cases include managing streaming data buffers, handling asynchronous I/O operations, and implementing schedulers where efficient queue manipulation is essential.",
      "description_length": 482,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Sigs",
      "library": "ke",
      "description": "This module defines interfaces for working with weighted values through the `R` and `F` module types. It supports operations like combining weights, applying transformations, and aggregating results based on weight-driven strategies. Use cases include weighted averages, prioritized task scheduling, and probabilistic sampling where elements have associated weights affecting their selection probability.",
      "description_length": 404,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke.Rke",
      "library": "ke",
      "description": "This module implements a high-performance queue structure using bigarrays for efficient memory management, supporting operations like `push`, `pop`, `peek`, and in-place element manipulation. It provides direct access to queue elements for iteration, folding, and pretty-printing, with optional low-level memory control through the `N` sub-module for bulk data transfers and memory compression. Concrete use cases include network packet buffering, streaming data processing, and I/O scheduling where predictable memory usage and fast element access are critical.",
      "description_length": 562,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ke",
      "library": "ke",
      "description": "This module provides weighted value operations through `R` and `F` module types, enabling weighted averages, prioritized scheduling, and probabilistic sampling. It includes a double-ended queue implementation with efficient front and back manipulation, suitable for streaming buffers and schedulers. Additionally, it offers a high-performance queue using bigarrays for memory-sensitive tasks like network buffering and data streaming.",
      "description_length": 434,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 617,
    "min_description_length": 404,
    "avg_description_length": 474.55555555555554,
    "embedding_file_size_mb": 0.1308135986328125
  }
}