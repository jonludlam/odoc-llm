{
  "package": "picos_io",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:09:06.797581",
  "modules": [
    {
      "module_path": "Picos_io_select.Intr",
      "library": "picos_io.select",
      "description": "This module provides functions to request and clear interruptible delays using signals, specifically for interrupting blocking `Unix` IO operations. It works with a custom `t` type representing interrupt requests, which can be canceled or acknowledged with `clr`. Concrete use cases include implementing timeouts for network operations or gracefully handling interruptions in long-running system calls.",
      "description_length": 402,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_select",
      "library": "picos_io.select",
      "description": "This module implements an event loop using `Unix.select` to manage IO operations, process signals, and timeouts. It provides functions to await file descriptor readiness, schedule cancellations after timeouts, and handle child process termination signals. Concrete use cases include coordinating network IO with timeouts, interrupting blocking system calls, and synchronizing with subprocess lifecycle events.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io_fd.Resource",
      "library": "picos_io.fd",
      "description": "This module defines a resource type representing Unix file descriptors, providing operations to compare resources for identity, compute their hash values, and explicitly release them. It works directly with `Unix.file_descr` values, treating them as externally reference-counted resources. Concrete use cases include managing file descriptors obtained from system calls, ensuring proper cleanup after use, and using file descriptors as keys in hash tables.",
      "description_length": 456,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_io_fd",
      "library": "picos_io.fd",
      "description": "This module tracks reference counts for Unix file descriptors, allowing creation, incrementing, and decrementing of references, with optional disposal on release. It works directly with `Unix.file_descr` values wrapped in a resource type, exposing operations to manage their lifecycle and query their state. Concrete use cases include ensuring cleanup of file descriptors acquired from system calls, tracking open descriptors for debugging, and safely sharing descriptors across components with automatic close on last release.",
      "description_length": 527,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_io.Unix.LargeFile",
      "library": "picos_io",
      "description": "This module provides operations to manipulate large files, including seeking within a file, truncating files by path or file descriptor, and retrieving file metadata. It works with file descriptors and 64-bit integers to support files larger than 2GB, returning detailed statistics in a structured format. Concrete use cases include handling large log files, managing database files, and performing precise file size operations in systems requiring exact control over file content and structure.",
      "description_length": 495,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Picos_io.Unix",
      "library": "picos_io",
      "description": "This module offers low-level Unix system operations integrated with an asynchronous I/O model, focusing on non-blocking file descriptor management, process control, and network communication. It operates on file descriptors, sockets, directories, and process metadata, providing functions for asynchronous-friendly I/O multiplexing, memory-mapped files, terminal handling, and Unix domain socket operations. Designed for applications requiring direct system access in async workflows, such as network servers using non-blocking sockets or system utilities managing processes and files with scheduler-aware blocking.",
      "description_length": 615,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Picos_io",
      "library": "picos_io",
      "description": "This module implements low-level Unix system operations integrated with an asynchronous I/O model, focusing on non-blocking file descriptor management, process control, and network communication. It works directly with file descriptors, sockets, directories, and process metadata, offering functions for asynchronous-friendly I/O multiplexing, memory-mapped files, terminal handling, and Unix domain socket operations. Concrete use cases include network servers using non-blocking sockets and system utilities managing processes and files with scheduler-aware blocking.",
      "description_length": 569,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 615,
    "min_description_length": 402,
    "avg_description_length": 496.14285714285717,
    "embedding_file_size_mb": 0.10182380676269531
  }
}