{
  "package": "eio_luv",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:31:11.935468",
  "modules": [
    {
      "module_path": "Eio_luv.Low_level.File",
      "description": "Provides operations to manage file descriptors, including opening, closing, reading, writing, and retrieving file metadata. Works with file descriptors wrapped as type `t` and interacts with Luv's file API for low-level I/O. Enables safe handling of file operations within an Eio switch, including reading directory contents, creating and removing directories, and resolving absolute file paths.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level.Random",
      "description": "Generates random bytes and fills a buffer with them using the underlying system's random number generator. Operates on Luv.Buffer.t structures to ensure secure and efficient data injection. Used to initialize cryptographic keys or seed pseudo-random generators with unpredictable values.",
      "description_length": 287,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level.Handle",
      "description": "Checks if a handle is open, closes it, and converts between handle types. Operates on a constrained type representing various I/O resources like streams, pipes, and UDP. Used to integrate Luv handles with Eio's event loop, ensuring proper resource management and event loop association.",
      "description_length": 286,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level.Stream",
      "description": "Reads bytes from a stream into a buffer and writes a list of buffers to a stream, supporting pipe, TCP, and TTY handles. Operates on handle types wrapped in a stream abstraction. Used for low-level I/O operations in network and process communication.",
      "description_length": 250,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level.Pipe",
      "description": "Creates and manages pipe endpoints for inter-process or inter-thread communication. Operates on `Eio.Std.Switch` to control lifecycle and `Stream.t` for data flow. Used to establish bidirectional communication channels in event-driven I/O contexts.",
      "description_length": 248,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level.Process",
      "description": "Provides functions to manage process lifecycle, including spawning a process with custom environment and working directory, sending signals, and waiting for exit. Works with process identifiers, file descriptors, and pipe structures to control inter-process communication. Used to launch and monitor external commands, handle process termination, and manage child process signaling.",
      "description_length": 382,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv.Low_level",
      "description": "Manages low-level I/O operations through file descriptors, streams, and process controls, enabling file manipulation, random data generation, and inter-process communication. Key types include `t` for file descriptors, `Luv.Buffer.t` for byte storage, and handle types for streams and processes. It supports reading and writing data, generating cryptographic randomness, and managing process execution and termination. Examples include initializing secure keys, reading directory contents, and establishing pipe-based communication between processes.",
      "description_length": 550,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "eio_luv",
      "description": "Reads from and writes to files, establishes network connections, and executes CPU-bound tasks in a concurrent manner. Operates on file descriptors, sockets, and asynchronous channels with a focus on platform-optimized performance. Enables parallel execution of I/O and computation in applications requiring high throughput and low latency.",
      "description_length": 339,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_luv",
      "description": "Provides low-level I/O, process control, and data handling through file descriptors, buffers, and stream handles. Key types include `t` for file descriptors, `Luv.Buffer.t` for byte storage, and handle types for streams and processes. It enables reading and writing data, generating cryptographic randomness, and managing process execution. Examples include creating secure keys, listing directory contents, and setting up inter-process communication via pipes.",
      "description_length": 461,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 550,
    "min_description_length": 248,
    "avg_description_length": 355.3333333333333,
    "embedding_file_size_mb": 0.03314208984375
  }
}