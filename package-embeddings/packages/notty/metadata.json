{
  "package": "notty",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:21:38.740189",
  "modules": [
    {
      "module_path": "Notty_unix.Term.Winch",
      "library": "notty.unix",
      "description": "This module manages `SIGWINCH` signal handling for terminal resizing, allowing custom callbacks to respond to window size changes. It works with Unix file descriptors and provides a function to register handlers that receive the current terminal dimensions. Use it to update UI layouts or trigger redraws when the terminal window resizes, without interfering with the terminal's normal input/output operations.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty_unix.Term",
      "library": "notty.unix",
      "description": "This module manages terminal input and output for fullscreen applications, supporting operations like rendering images, handling cursor placement, and processing user input events. It works with terminal state through file descriptors and handles dynamic terminal features such as mouse interaction, signal handling, and window resizing. Concrete use cases include building text-based user interfaces, interactive command-line tools, and terminal emulators that require real-time input and output control.",
      "description_length": 505,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Notty_unix",
      "library": "notty.unix",
      "description": "This module provides terminal I/O operations for rendering images, controlling cursor placement, and detecting terminal capabilities. It works directly with file descriptors and Notty images, supporting dynamic output sizing, cursor visibility, and motion commands. Use it to build interactive command-line interfaces, render visual output in terminal applications, and manage real-time user interaction without requiring full terminal control.",
      "description_length": 444,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.Infix",
      "library": "notty",
      "description": "This module defines infix operators for composing images and attributes. It provides horizontal concatenation (`<->`), vertical concatenation (`</>`), and overlay (`<|>`) for images, along with attribute combination (`++`). These operators enable building complex terminal displays by combining simpler elements declaratively, such as laying out text boxes or layering styled content.",
      "description_length": 384,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.Cap",
      "library": "notty",
      "description": "This module defines terminal capabilities for rendering images, supporting operations like setting colors, text styles, and cursor positioning through escape sequences. It works with the `t` type to represent different terminal types, such as ANSI and dumb terminals. Concrete use cases include configuring output for terminals with varying levels of feature support, ensuring correct display across different environments.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.A",
      "library": "notty",
      "description": "This module offers constructors and combinators for terminal text attributes, enabling precise control over styling through foreground/background colors, ANSI and RGB specifications, and text modifiers like bold or underline. It operates on the `attr` type to compose and merge styling properties, supporting use cases such as terminal UIs requiring colored syntax highlighting, dynamic theme application, or layered text effects in cross-platform applications.",
      "description_length": 461,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.Render",
      "library": "notty",
      "description": "This module renders images into string buffers or format printers using a capability structure to guide output. It supports precise region rendering within images through buffer composition and capability-based formatting. Use it to generate textual representations of images for display or logging in environments that require direct string output.",
      "description_length": 349,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.Unescape",
      "library": "notty",
      "description": "This module parses terminal escape sequences into structured input events such as key presses, mouse actions, and paste operations. It processes byte streams to decode Unicode and control characters into typed events, supporting precise interaction handling in terminal applications. Use it to implement custom terminal input logic, such as handling cursor keys, mouse clicks, or detecting special input modes like bracketed paste.",
      "description_length": 431,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty.I",
      "library": "notty",
      "description": "This library provides operations to construct and manipulate terminal images through layout composition, transformation, and formatted text rendering. It centers on the `image` type, enabling horizontal/vertical stacking, overlay blending, grid generation, dimension snapping with alignment, and attribute-rich text creation with customizable width constraints. These capabilities support use cases like crafting interactive terminal interfaces, structured data visualizations, and dynamically aligned or padded display elements.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty",
      "library": "notty",
      "description": "This module provides terminal image construction and composition through types like `image` and `attr`, supporting styled text rendering, layout operations (stacking, overlaying), and attribute manipulation. It works with structured terminal displays and input event parsing, enabling concrete use cases like interactive terminal UIs with colored syntax highlighting, aligned text layouts, and dynamic image composition. Operations include escape sequence handling, region-based rendering, and Unicode-aware text geometry management.",
      "description_length": 533,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Notty_lwt.Term",
      "library": "notty.lwt",
      "description": "This module manages terminal input/output with support for concurrent operations using Lwt. It provides functions to create and release terminal instances, render images, handle events like keyboard and mouse input, and respond to window resizing. It works with terminal state values (`t`), images, and event streams, enabling interactive applications such as text-based user interfaces and real-time displays.",
      "description_length": 410,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notty_lwt",
      "library": "notty.lwt",
      "description": "This module provides Lwt-based terminal I/O operations for rendering images, handling input events, and managing terminal state in concurrent applications. It works with terminal instances, image values, and file descriptors to support use cases like interactive text-based interfaces, real-time terminal graphics, and responsive command-line tools. Key functions include creating and releasing terminal instances, rendering images with optional capabilities, handling window resizing, and controlling cursor visibility and position.",
      "description_length": 533,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 12,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 533,
    "min_description_length": 349,
    "avg_description_length": 451.0,
    "embedding_file_size_mb": 0.17434978485107422
  }
}