{
  "package": "pp_loc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:00.749180",
  "modules": [
    {
      "module_path": "Pp_loc.Position",
      "library": "pp_loc",
      "description": "This module represents positions in input sources using byte offsets, lines, and columns. It supports converting from lexing positions, building positions from offsets or line/column numbers, shifting positions by byte counts, and converting positions to offsets or lexing positions. Concrete use cases include tracking source code locations during parsing and mapping between different position representations in text processing tools.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pp_loc.Input",
      "library": "pp_loc",
      "description": "This module represents input sources for reading content, supporting operations to create inputs from files, strings, bytes, or input channels. It provides low-level primitives to construct custom input sources using functions for seeking, reading characters, and retrieving line offsets. Concrete use cases include parsing files, processing string buffers, or handling input streams with precise position tracking for error reporting or lexing.",
      "description_length": 445,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pp_loc",
      "library": "pp_loc",
      "description": "This module handles the precise formatting and display of source code snippets with accurate location tracking, using position markers to highlight specific regions of input. It supports customizable styling, such as ANSI colors, to visually emphasize text segments, making it ideal for error reporting and source code visualization. The position module enables conversion between different location representations\u2014like byte offsets, lines, and columns\u2014allowing tools to track and map positions during parsing or text processing. The input module provides flexible source handling, supporting creation of inputs from files, strings, or streams, with low-level access for custom input implementations while maintaining precise position tracking for accurate output rendering.",
      "description_length": 775,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 775,
    "min_description_length": 437,
    "avg_description_length": 552.3333333333334,
    "embedding_file_size_mb": 0.011309623718261719
  }
}