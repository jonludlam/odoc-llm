{
  "package": "ctypes-zarith",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:31.246260",
  "modules": [
    {
      "module_path": "Ctypes_zarith.MPZ",
      "description": "Provides functions to manage arbitrary-precision integers, including initialization, cleanup, and conversion between OCaml's Z.t and C-compatible pointers. Operates on Ctypes abstract types representing mpz_t structures and their pointers. Used to interface with GMP library functions that require raw pointers for in-place modifications.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ctypes_zarith.MPQ",
      "description": "Provides functions to initialize, clear, and manipulate arbitrary-precision rational numbers using a C-compatible structure. Works with `Q.t` for rational values and pointer types for low-level memory management. Used to convert between OCaml's `Q.t` and C-based MPQ structures in bindings for GMP libraries.",
      "description_length": 308,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ctypes-zarith",
      "description": "Provides functions to convert and manipulate arbitrary-precision integers and rational numbers between C's mpz_t and mpq_struct types and OCaml's Z.t and Q.t types. Operates on raw C pointers and OCaml abstract types representing mathematical numbers. Enables integration of GMP library operations with OCaml's native number handling in numerical algorithms.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ctypes_zarith",
      "description": "Manages arbitrary-precision integers and rational numbers through C-compatible structures, enabling direct interaction with GMP library functions. Supports operations like initialization, cleanup, and conversion between OCaml's Z.t, Q.t and C pointers. Functions allow in-place modifications and low-level memory handling for efficient numerical computations. Examples include converting OCaml integers to C-compatible mpz_t pointers and manipulating rational numbers via MPQ structures.",
      "description_length": 487,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 487,
    "min_description_length": 308,
    "avg_description_length": 372.75,
    "embedding_file_size_mb": 0.014928817749023438
  }
}