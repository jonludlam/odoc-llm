{
  "package": "hardcaml_xilinx_components",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:32:32.182415",
  "modules": [
    {
      "module_path": "Xilinx_vhdl.Vhdl.Range_direction",
      "description": "Provides comparison, serialization, and equality checks for directional ranges. Operates on an abstract type representing directional intervals. Used to determine ordering and equivalence in spatial or temporal direction tracking.",
      "description_length": 230,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Expression",
      "description": "Compares two expressions for ordering using a custom comparison function. Converts expressions into S-expression format for serialization or debugging. Operates on the abstract type `t` representing parsed or structured expressions. Used to enforce consistent ordering in sorted collections and to generate human-readable representations during debugging or logging.",
      "description_length": 366,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Range",
      "description": "Compares two ranges by their start and end expressions along with direction. Operates on tuples containing an expression, a direction, and another expression. Used to determine ordering in sorted range collections or during semantic analysis of expressions.",
      "description_length": 257,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Type",
      "description": "Compares values of type t using a custom ordering function. Converts values of type t to S-expression format for serialization. Used to enforce consistent ordering and serialization in data processing pipelines.",
      "description_length": 211,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Port_direction",
      "description": "Provides comparison, serialization, and string conversion for port direction values. Works with a custom type representing directional states. Used to standardize and encode port direction data in network communication protocols.",
      "description_length": 229,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Port",
      "description": "Compares port numbers and converts them to S-expression format. Works with a record type representing port configurations. Used to enforce ordering in sorted collections and for serialization in debugging or logging contexts.",
      "description_length": 225,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl.Component",
      "description": "Compares component instances based on internal state using a custom ordering. Converts component data to S-expression format for serialization or debugging. Operates on a record type containing structured component information. Used to enforce consistent ordering in sorted collections and generate human-readable representations for logging.",
      "description_length": 342,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xilinx_vhdl.Parse",
      "description": "Parses VHDL component definitions from an input channel or a string, returning a list of components wrapped in an error monad. Works with OCaml's standard input channels and strings, producing structured VHDL component data. Used to load and validate hardware descriptions from files or configuration strings.",
      "description_length": 309,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl",
      "description": "Combines comparison, serialization, and ordering operations across multiple abstract and structured data types, including directional ranges, expressions, port configurations, and component instances. Supports custom comparison functions, S-expression conversion, and string representation to enable consistent sorting, debugging, and data exchange. Examples include ordering parsed expressions, serializing port configurations, and comparing component states for logging. Operates on types such as `t`, directional states, and tuples containing expressions and directions.",
      "description_length": 573,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl.Vhdl_to_hardcaml",
      "description": "Generates an OCaml module string from a VHDL component, including signal and port definitions. Processes VHDL component data structures to map hardware interfaces into OCaml syntax. Used to translate hardware descriptions into executable module skeletons for circuit synthesis.",
      "description_length": 277,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "hardcaml_xilinx_components",
      "description": "Parses VHDL component definitions to extract interface information for Xilinx Unisim and XPM libraries. Processes entity and architecture declarations to generate signal and port definitions. Used to create Hardcaml module signatures from specific Xilinx component VHDL files.",
      "description_length": 276,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xilinx_vhdl",
      "description": "Parses and validates VHDL components from input sources, producing structured data for further processing. Provides comparison, serialization, and ordering capabilities for complex data types like expressions, ports, and component instances. Translates parsed component data into OCaml module syntax for integration with hardware synthesis tools. Examples include sorting parsed signals, serializing port mappings, and generating OCaml code from VHDL definitions.",
      "description_length": 463,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 573,
    "min_description_length": 211,
    "avg_description_length": 313.1666666666667,
    "embedding_file_size_mb": 0.04397392272949219
  }
}