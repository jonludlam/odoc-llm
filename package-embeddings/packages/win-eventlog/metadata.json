{
  "package": "win-eventlog",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:11.551637",
  "modules": [
    {
      "module_path": "Win_eventlog.Eventlog",
      "library": "win-eventlog",
      "description": "This module provides functions to register event sources and report structured events to the Windows event log, including event types, categories, and insertion strings. It works with event sources, event types (`Success`, `Error`, etc.), and arrays of strings for event message parameters. Concrete use cases include logging application-specific events with structured data for viewing in the Windows Event Viewer.",
      "description_length": 415,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Win_eventlog.Log_eventlog",
      "library": "win-eventlog",
      "description": "Constructs a Logs reporter that sends log messages to the Windows event log, using optional category and event identifiers. Works with `Win_eventlog.Eventlog.t` handles to target specific event logs. Useful for integrating OCaml applications with Windows system logging for error tracking and diagnostics.",
      "description_length": 305,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Log_eventlog",
      "library": "win-eventlog",
      "description": "Constructs a Logs reporter that sends log messages to the Windows event log, using optional category and event identifiers. Works with the `Win_eventlog.Eventlog.t` type to interface with Windows event logging systems. Useful for integrating OCaml applications with Windows system logging infrastructure for monitoring and diagnostics.",
      "description_length": 335,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Eventlog",
      "library": "win-eventlog",
      "description": "This module provides operations to register event sources and report events to Windows event logs. It works with event types such as `Success`, `Error`, and `Warning`, along with structured event data including category, event ID, and insertion strings. It is used to log system or application events with localized message templates, such as recording service start/stop events or auditing security-related actions.",
      "description_length": 416,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Win_eventlog",
      "library": "win-eventlog",
      "description": "This module enables OCaml applications to log structured events to the Windows event log, supporting event sources, types like `Success` and `Error`, and parameterized messages. It allows registration of event sources and reporting of events with categories and insertion strings, using handles to target specific event logs. You can integrate application logging with Windows diagnostics, for example by sending error events with descriptive strings or structured diagnostic data viewable in the Event Viewer.",
      "description_length": 510,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 510,
    "min_description_length": 305,
    "avg_description_length": 396.2,
    "embedding_file_size_mb": 0.018599510192871094
  }
}