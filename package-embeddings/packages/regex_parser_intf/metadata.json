{
  "package": "regex_parser_intf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:36.885333",
  "modules": [
    {
      "module_path": "Regex_parser_intf.S",
      "library": "regex_parser_intf",
      "description": "This module supports constructing and combining regex parsers using applicative combinators, enabling operations like alternation, repetition control, and boundary matching. It works with a custom regex type that handles strings, characters, and decimal patterns, allowing case-sensitive or case-insensitive matching with optional capture groups. This facilitates tasks like input validation, text parsing, and data extraction where precise pattern recognition is required.",
      "description_length": 473,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Regex_parser_intf.S-Decimal",
      "library": "regex_parser_intf",
      "description": "Parses integer values from strings with support for optional signs and unsigned digits. Works directly with string inputs, producing integer results. Useful for converting numeric string representations into integers during input validation or configuration parsing.",
      "description_length": 266,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Regex_parser_intf.S-Applicative_infix",
      "library": "regex_parser_intf",
      "description": "This module provides applicative-style function application and sequencing operations for parser combinators. It works with values of type `'a t`, representing parsed values within a parser context. These operators enable combining and transforming parsers in a concise, pipeline-oriented manner, such as parsing a sequence of tokens and mapping the result to a structured value.",
      "description_length": 379,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Regex_parser_intf.S-Char",
      "library": "regex_parser_intf",
      "description": "This module provides parsers for matching individual characters based on specific properties or sets. It supports operations like matching any character, checking membership in a set, and recognizing common character classes such as digits, letters, and whitespace. These parsers are useful for building lexers or validating character-level patterns in strings.",
      "description_length": 361,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Regex_parser_intf",
      "library": "regex_parser_intf",
      "description": "This module defines a parsing interface for converting string patterns into structured representations of regular expressions, supporting the construction of complex parsers through combinators. It provides core operations for parsing characters, integers, and regex patterns with support for alternation, repetition, and capture groups, working with a custom regex type and parser combinators of type `'a t`. For example, it enables case-insensitive matching of strings, validation of numeric inputs through integer parsers, and building custom lexers using character property checks. Applicative operators allow chaining and transforming parsers to extract structured data from sequences of tokens.",
      "description_length": 700,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 700,
    "min_description_length": 266,
    "avg_description_length": 435.8,
    "embedding_file_size_mb": 0.018613815307617188
  }
}