{
  "package": "fuseau-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:07:31.353241",
  "modules": [
    {
      "module_path": "Fuseau_lwt.Net.TCP_server",
      "library": "fuseau-lwt",
      "description": "Implements TCP servers that accept connections and handle them with fibers using Fuseau's Iostreams. Works directly with Unix.sockaddr and Lwt_io.server, managing connection streams for network services. Use to build concurrent network servers handling protocols like HTTP or custom binary services.",
      "description_length": 299,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuseau_lwt.Iostream.Out",
      "library": "fuseau-lwt",
      "description": "This module implements output streams that accept bytes and strings for writing to buffers, file descriptors, or multiple destinations. It supports writing individual characters, byte slices, strings, integers, and line sequences, with operations like flush and close to control output behavior. Concrete use cases include logging to memory buffers, writing to network sockets via Unix file descriptors, and broadcasting output to multiple streams using tee.",
      "description_length": 458,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fuseau_lwt.Iostream.In",
      "library": "fuseau-lwt",
      "description": "This module implements input byte streams with precise control over reading, buffering, and source composition. It supports reading from memory buffers, strings, and Unix file descriptors, offering operations like partial reads, exact reads, and stream concatenation. Concrete use cases include parsing network payloads, consuming file contents incrementally, and bridging Lwt-based IO with fiber-driven processing.",
      "description_length": 415,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fuseau_lwt.Net.TCP_client",
      "library": "fuseau-lwt",
      "description": "Implements TCP client connections using Lwt for asynchronous IO, providing a `with_connect` function that establishes a socket connection to a given address and supplies input/output streams to a callback. Works with Unix socket addresses and Lwt-managed IO streams. Useful for initiating network communication with servers, such as sending requests and receiving responses over TCP.",
      "description_length": 383,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuseau_lwt.Net",
      "library": "fuseau-lwt",
      "description": "Handles TCP networking with Lwt-based IO streams, providing server and client implementations for asynchronous network communication. Works with Unix socket addresses and Fuseau fibers to manage concurrent connections and structured IO operations. Use to build network services handling protocols like HTTP or custom TCP-based clients and servers.",
      "description_length": 347,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuseau_lwt.IO_lwt",
      "library": "fuseau-lwt",
      "description": "This module bridges Fuseau fibers with Lwt's event loop for handling asynchronous IO operations on file descriptors. It provides direct access to Lwt-driven read and write operations, allowing precise control over byte buffers and non-blocking behavior. Concrete use cases include implementing custom network protocols or streaming data over sockets without relying on higher-level Lwt IO abstractions.",
      "description_length": 402,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuseau_lwt.Iostream",
      "library": "fuseau-lwt",
      "description": "This module provides streaming abstractions for handling byte input and output in Lwt-driven applications. It supports reading from and writing to memory buffers, strings, and Unix file descriptors with precise control over buffering, partial reads, exact writes, and stream composition. Concrete use cases include parsing network data incrementally, logging to memory or files, and bridging Lwt-based IO with fiber-structured concurrency.",
      "description_length": 439,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuseau_lwt",
      "library": "fuseau-lwt",
      "description": "This module integrates cooperative fibers with an event-driven IO system, enabling precise control over asynchronous operations like timed waits, file descriptor readiness, and structured concurrency. It operates on fibers, event loops, buffered byte streams, and network sockets, combining low-level resource management with high-level concurrency primitives. Typical applications include building networked services that require fine-grained coordination between concurrent tasks and Lwt-based IO operations, such as handling TCP connections with backpressure or implementing protocol parsers over asynchronous streams.",
      "description_length": 621,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 8,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 621,
    "min_description_length": 299,
    "avg_description_length": 420.5,
    "embedding_file_size_mb": 0.11637210845947266
  }
}