{
  "package": "tidy",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:40.448253",
  "modules": [
    {
      "module_path": "Tidy.DocTree",
      "library": "tidy",
      "description": "This module provides functions to navigate and extract structured data from parsed HTML documents. It works with `Tidy.doc` and `Tidy.node` types, representing documents and their hierarchical nodes. Concrete use cases include traversing the document tree, accessing specific sections like the head or body, and retrieving attributes of individual nodes.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tidy.Attr",
      "library": "tidy",
      "description": "This module provides functions to retrieve attribute identifiers, check if an attribute is an event, and fetch attributes by ID from a node. It operates on `Tidy.attr` and `Tidy.node` types, enabling direct inspection and querying of attribute data. Concrete use cases include analyzing HTML attributes for event handling or extracting specific attribute values during document processing.",
      "description_length": 389,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tidy.Node",
      "library": "tidy",
      "description": "This module provides functions to inspect and extract information from node objects, such as retrieving node type, name, text content, and positional data. It supports operations like checking if a node is text, a property, or a header, and extracting text content from nodes. These functions are used to analyze and process structured document nodes, particularly during parsing or transformation tasks.",
      "description_length": 404,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tidy.Tree",
      "library": "tidy",
      "description": "This module builds and queries an index of HTML nodes organized by type and attribute. It processes a tree structure to map node types and attributes to their corresponding nodes. Use it to efficiently locate specific nodes in a parsed HTML document by tag name or attribute value.",
      "description_length": 281,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tidy.Config",
      "library": "tidy",
      "description": "This module provides configuration operations for parsing, formatting, and transforming HTML/XML documents through a unified interface of getter and setter functions. It works primarily with `Tidy.doc` instances, exposing boolean flags, integer parameters, and string-valued settings to control behaviors like indentation, tag case normalization, doctype handling, character encoding, and output verbosity. Specific use cases include adjusting document structure for accessibility compliance, converting HTML to XHTML with precise formatting rules, and sanitizing markup by removing redundant elements or enforcing consistent attribute casing.",
      "description_length": 643,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tidy",
      "library": "tidy",
      "description": "This module processes HTML/XML documents through parsing, transformation, and validation, centered around the `doc` type and supporting enumerations for nodes, tags, and attributes. It enables malformed content cleaning, metadata extraction, and structured output serialization, with error handling and configuration controls for formatting and transformation rules. The Tree submodule allows hierarchical node manipulation, supporting content sanitization and format conversion, while the Index submodule enables efficient lookup by tag or attribute. Together with modules for node traversal, attribute inspection, and node property extraction, it provides a comprehensive toolkit for document analysis, transformation, and structured data retrieval.",
      "description_length": 751,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 751,
    "min_description_length": 281,
    "avg_description_length": 470.3333333333333,
    "embedding_file_size_mb": 0.022233963012695312
  }
}