{
  "package": "topological_sort",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:40.905221",
  "modules": [
    {
      "module_path": "Topological_sort.Traversal_order",
      "library": "topological_sort",
      "description": "This module defines traversal order options for graph nodes, supporting reverse comparison-based ordering, reverse ordering with isolated nodes prioritized, and an unspecified efficient default. It works with graph nodes that implement a `compare` function. Use cases include optimizing traversal performance, ensuring isolated nodes are processed first, or maintaining deterministic order during analysis or compilation tasks.",
      "description_length": 427,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort.Edge",
      "library": "topological_sort",
      "description": "This module defines the structure of directed edges in a graph, used for representing dependencies between nodes. It includes a function to convert edge data to S-expressions for serialization or debugging. The module is used when implementing topological sorting algorithms over graphs with labeled edges.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort.Node",
      "library": "topological_sort",
      "description": "This module defines a node type used in topological sorting, with support for equality checks, comparison, S-expression serialization, and hashing. It ensures consistent behavior for nodes in directed acyclic graphs where ordering depends on dependencies. Concrete use cases include dependency resolution in build systems and task scheduling.",
      "description_length": 342,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort.What",
      "library": "topological_sort",
      "description": "This module defines a type `t` that specifies what information to return during a topological sort: either just the sorted nodes or both nodes and their edge endpoints. It includes a function `sexp_of_t` to convert values of type `t` into S-expressions for serialization or debugging. Use this module when controlling the output format of topological sorting operations in dependency analysis or graph processing tasks.",
      "description_length": 419,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort",
      "library": "topological_sort",
      "description": "This module organizes directed graphs into sortable node sequences based on dependencies, using customizable traversal strategies from its child module that supports reverse, isolated-first, or efficient default ordering. It processes directed edges with labeled relationships and provides detailed output options, including full node-edge listings or minimal sorted node lists. Nodes implement comparison, equality, and serialization for deterministic sorting and debugging, enabling use cases like task scheduling and dependency resolution. The module handles cycles gracefully and supports analysis through S-expression conversion of both edges and sort outputs.",
      "description_length": 665,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 665,
    "min_description_length": 306,
    "avg_description_length": 431.8,
    "embedding_file_size_mb": 0.018619537353515625
  }
}