{
  "package": "topological_sort",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:04.797829",
  "modules": [
    {
      "module_path": "Topological_sort.Traversal_order",
      "library": "topological_sort",
      "description": "This module defines traversal order options for graph nodes, supporting operations to specify whether nodes are processed in decreasing order, with isolated nodes first, or in an unspecified efficient order. It works with graph nodes that have a comparison function and categorizes them into entry points based on edge presence. Concrete use cases include controlling traversal start points in graph algorithms to prioritize certain nodes or optimize performance.",
      "description_length": 463,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort.Edge",
      "library": "topological_sort",
      "description": "This module defines the structure of directed edges in a graph, used for representing dependencies between nodes. It includes a function to convert edge data to S-expressions for serialization or debugging. The primary use case is supporting topological sorting by encoding relationships that determine ordering constraints.",
      "description_length": 324,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort.What",
      "library": "topological_sort",
      "description": "This module defines a type `t` that specifies what information to include when representing the result of a topological sort\u2014either just the nodes or both nodes and edge endpoints. It provides the `sexp_of_t` function to convert values of this type into S-expressions for serialization or debugging. This is useful when visualizing or logging the output of a topological sort in different formats.",
      "description_length": 397,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Topological_sort",
      "library": "topological_sort",
      "description": "This module performs topological sorting on directed acyclic graphs defined by nodes and edges, returning node orderings that respect dependencies. It supports configurable traversal strategies and handles cyclic graphs by detecting and returning cycles. Use cases include dependency resolution in build systems and scheduling tasks with precedence constraints.",
      "description_length": 361,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 463,
    "min_description_length": 324,
    "avg_description_length": 386.25,
    "embedding_file_size_mb": 0.05837535858154297
  }
}