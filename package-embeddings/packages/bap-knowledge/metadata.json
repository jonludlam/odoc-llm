{
  "package": "bap-knowledge",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 43,
  "creation_timestamp": "2025-07-15T23:14:30.137391",
  "modules": [
    {
      "module_path": "Bap_knowledge.Knowledge.Let_syntax.Let_syntax",
      "library": "bap-knowledge",
      "description": "This module enables monadic `let` syntax for the `Bap_knowledge.Knowledge` monad, supporting `let%bind` and `let%map` to sequence knowledge computations. It provides direct operations on `Bap_knowledge.Knowledge.t` values, simplifying the chaining of effectful operations in a readable, imperative style. With this module, users can write complex knowledge queries and transformations without explicitly invoking `bind` or `map`. The empty child module has no impact on the functionality or usage of the main module.",
      "description_length": 516,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Collection.Delay",
      "library": "bap-knowledge",
      "description": "This module provides operations for sequencing and transforming collections of monadic computations, specifically working with containers of type `'a T.t` where each element is a `Knowledge.t` computation. It includes functions for mapping, folding, filtering, and aggregating results across the collection, with control over evaluation order and result handling. Concrete use cases include orchestrating multiple knowledge-based analyses in a specific order, aggregating analysis results, or filtering data based on dynamic conditions evaluated in the monad.",
      "description_length": 559,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Enum.Make",
      "library": "bap-knowledge",
      "description": "This module supports the creation and manipulation of extensible enumerated types represented by a unique type `t` backed by `KB.Name.t`. It provides operations for declaring new enum elements, comparing and ordering values (e.g., `ascending`, `clamp`), and converting between string/binary representations and enum values (e.g., `to_string`, `bin_read_t`). These features are particularly useful for domain-specific enumerations (e.g., instruction sets, status codes) where extensibility, efficient value comparison, or persistence across sessions is required.",
      "description_length": 561,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation.Rule",
      "library": "bap-knowledge",
      "description": "This module represents documentation for rules in a knowledge base, providing access to rule metadata including names, descriptions, required and provided properties, and parameters. It works with structured documentation elements like properties and rules, enabling precise querying and display of knowledge entities. Concrete use cases include generating human-readable documentation, validating rule dependencies, and inspecting knowledge base components during analysis or debugging.",
      "description_length": 487,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Value.S",
      "library": "bap-knowledge",
      "description": "This module provides operations for comparing, ordering, clamping, and serializing structured, extensible knowledge values represented as type `t`. These values model property snapshots of objects as domain-constrained extensible records, with class and sort indices enabling type-safe relations between instances. It is particularly useful in knowledge representation systems requiring efficient binary serialization, domain-specific constraint enforcement, or analysis of hierarchical property data.",
      "description_length": 501,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Collection.Eager",
      "library": "bap-knowledge",
      "description": "This module provides eager evaluation of monadic computations over collections, enabling operations like mapping, folding, filtering, and reducing with explicit sequencing and result handling. It works with any container type `T` that implements a basic collection interface, applying functions to elements within the `Bap_knowledge.Knowledge` monad. Concrete use cases include processing sequences of knowledge assertions, accumulating results from dependent analyses, and filtering knowledge entities based on dynamic conditions.",
      "description_length": 531,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation.Property",
      "library": "bap-knowledge",
      "description": "Handles documentation for class properties, providing access to their names and descriptions. Works with property documentation structures in the Knowledge library. Used to retrieve fully qualified names and descriptive text for knowledge entity properties.",
      "description_length": 257,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation.Element",
      "library": "bap-knowledge",
      "description": "Handles documentation elements with operations to retrieve fully qualified names and descriptions. Works with knowledge entities like classes, properties, and agents. Used to access and document metadata in knowledge representation systems.",
      "description_length": 240,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Order.S",
      "library": "bap-knowledge",
      "description": "Implements a partial order for comparing the information content of knowledge values, where `order` evaluates the relationship between two elements of type `t`. Works with data types that represent knowledge domains, such as `int option` to model known or unknown values. Useful for determining when one knowledge value strictly refines another, supporting reasoning about information gain in knowledge bases.",
      "description_length": 409,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation.Agent",
      "library": "bap-knowledge",
      "description": "This module represents documentation for agents in the knowledge base, providing access to agent names and descriptions. It works with the `t` type, which encapsulates documented agent information. Use this module to retrieve human-readable details about knowledge agents, such as their fully qualified names and associated textual descriptions.",
      "description_length": 345,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Enum.S",
      "library": "bap-knowledge",
      "description": "This module provides operations for managing extensible enumerated types represented as symbolic names mapped to unique values, supporting declaration, name-based parsing, equality/ordering comparisons, and serialization. It works with enumerated values of type `t` derived from string identifiers, enabling package-scoped declarations and introspection while integrating with knowledge domains and persistence systems. Use cases include symbolic value resolution in configuration systems, ordered enum value analysis, and bridging string representations with typed knowledge representations in domain-specific reasoning.",
      "description_length": 621,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation.Class",
      "library": "bap-knowledge",
      "description": "This module describes knowledge classes with operations to retrieve their fully qualified names and textual descriptions. It works with the abstract type `t` representing documented knowledge entities. Use this module to access metadata about knowledge classes, such as their names and documentation strings, in systems that require introspection or display of knowledge elements.",
      "description_length": 380,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Object.S",
      "library": "bap-knowledge",
      "description": "This module type defines operations for ordered data types, including comparison logic (min/max, clamping, range checks) and binary serialization compatible with Bin_prot. It works with persistent, identifier-based values (`t`) that represent knowledge base objects, supporting both S-expression and binary format conversions. These capabilities enable use cases like database key management, persistent storage of structured knowledge, and systems requiring efficient ordered data manipulation.",
      "description_length": 495,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Collection.S",
      "library": "bap-knowledge",
      "description": "This module provides monadic operations for processing collections of values within the Knowledge monad, enabling composition of effectful computations over containers. It supports operations like mapping, folding, filtering, and parallel execution of knowledge computations, with explicit handling of ordering and result aggregation. Concrete use cases include analyzing program structures by collecting and transforming knowledge across abstract syntax trees, and implementing domain-specific analyses that require sequencing or aggregating symbolic facts.",
      "description_length": 558,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Context",
      "library": "bap-knowledge",
      "description": "This module provides operations to declare, set, get, and update context variables that hold arbitrary typed values during knowledge computations. These variables enable temporary state management within analyses without persisting in the knowledge base, supporting dynamic binding and scoped modifications. Concrete use cases include tracking analysis-specific state, such as counters, flags, or intermediate results, across different stages of program analysis.",
      "description_length": 463,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Name",
      "library": "bap-knowledge",
      "description": "This module provides functions to manipulate fully qualified names with optional package prefixes, supporting operations like creation, parsing, component extraction, and serialization to strings or binary formats. It enables ordering, clamping, and comparison of these names, which is useful in hierarchical naming contexts such as knowledge bases where structured identifiers and efficient data persistence are required.",
      "description_length": 422,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Monad_infix",
      "library": "bap-knowledge",
      "description": "This module provides infix operators for monadic composition and transformation of knowledge values. It works with the `Bap_knowledge.Knowledge.t` type, enabling chaining of knowledge computations and applying functions to their results. Concrete use cases include sequencing knowledge-based operations and mapping result values without explicit pattern matching.",
      "description_length": 363,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Value",
      "library": "bap-knowledge",
      "description": "This module models structured knowledge as extensible records with typed, first-class slots, enabling precise property tracking, modification, and comparison. It supports creating and merging values with conflict resolution, refining sort indices, and enforcing domain constraints through default values and ordering. The child module enhances these capabilities with comparison, serialization, and clamping operations, making it suitable for knowledge representation systems that require type-safe relations, binary persistence, or hierarchical analysis. Example uses include versioned data modeling, domain-specific property validation, and structured knowledge analysis with customizable merge strategies.",
      "description_length": 708,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Order",
      "library": "bap-knowledge",
      "description": "This module organizes knowledge by information content using a partial order, allowing comparisons of informativeness between values independent of their intrinsic data type ordering. It defines operations to determine whether one knowledge value is more, less, equal, or incomparable in information content to another, using result types like LT, EQ, GT, and NC. For example, it can compare `int option` values to assess whether one known value refines another or whether two known values carry incomparable information. Submodules extend this core logic to specific knowledge domains, enabling precise reasoning about information gain and merging uncertain data from multiple sources.",
      "description_length": 686,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Documentation",
      "library": "bap-knowledge",
      "description": "This module provides access to structured documentation for knowledge entities such as agents, classes, properties, and rules, enabling introspection and dynamic exploration of a knowledge base. It supports retrieving metadata like names, descriptions, dependencies, and parameters for these entities, facilitating tasks such as documentation generation, rule validation, and system analysis. Submodules offer specialized access to agent, class, and property documentation, as well as structured rule metadata, using types like `t` to represent documented elements. Specific operations include querying rule dependencies, extracting human-readable descriptions, and listing public classes with their associated properties.",
      "description_length": 722,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.List",
      "library": "bap-knowledge",
      "description": "This module provides monadic operations for list processing within the knowledge representation system, enabling composition and evaluation of effectful computations over lists. It supports operations like mapping, folding, filtering, and searching, where each element transformation or predicate is a knowledge computation. Use cases include aggregating analysis results across a list of program entities, conditionally filtering elements based on knowledge state, or sequencing knowledge updates over list elements.",
      "description_length": 517,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Pair",
      "library": "bap-knowledge",
      "description": "This module provides monadic operations for extracting elements from pairs within a knowledge context. It works with tuples of type `'a * 'b` wrapped in the `Bap_knowledge.Knowledge.t` monad. Concrete use cases include decomposing structured knowledge values into their components for further processing or analysis.",
      "description_length": 316,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Let",
      "library": "bap-knowledge",
      "description": "This module provides monadic and applicative operators for composing computations that manipulate knowledge values. It supports operations like binding (`let*`), mapping (`let+`), and combining (`and*`, `and+`) knowledge values within a monadic context. These functions are used to sequence and structure knowledge transformations, enabling concise expression of dependencies and data flow in knowledge representation tasks.",
      "description_length": 424,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Syntax",
      "library": "bap-knowledge",
      "description": "This module provides monadic and applicative combinators for composing computations over knowledge objects, slots, and properties, with specialized operators for property access (`-->`, `.$[]`), mutation (`.$[]<-`), and optional value handling (`>>|?`, `.?[]`). It operates on `Bap_knowledge.Knowledge.t` structures and related types, enabling safe chaining of operations that may fail or depend on dynamic property resolution. These tools are particularly useful for building and querying knowledge graphs where properties might be sparse or require lazy evaluation.",
      "description_length": 567,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Collection",
      "library": "bap-knowledge",
      "description": "This module lifts collection operations into the `Knowledge` monad, enabling sequencing, transformation, and aggregation of effectful computations over container types. It provides functions for mapping, folding, filtering, and reducing collections where each element represents a `Knowledge.t` computation, with control over evaluation order and result handling. Concrete uses include orchestrating and aggregating analysis results across abstract syntax trees, processing sequences of knowledge assertions, and filtering data based on dynamic monadic conditions. The interface supports both eager evaluation and structured composition of knowledge-based computations over arbitrary collections.",
      "description_length": 696,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Persistent",
      "library": "bap-knowledge",
      "description": "This module enables the persistence of various data types by providing functions to define, derive, and serialize instances. It supports concrete types like strings, names, lists, arrays, sequences, sets, and maps, requiring explicit serialization strategies for custom types. Use cases include storing and retrieving structured knowledge properties in a durable format.",
      "description_length": 370,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Object",
      "library": "bap-knowledge",
      "description": "This module manages identifiers representing knowledge base objects, with support for creation, scoping, comparison, and format conversion via `repr` and `read`. It works with persistent, ordered values (`t`) that can be serialized to S-expressions or binary formats, enabling efficient storage and manipulation of structured knowledge. Child modules extend this functionality with ordered operations like min/max, clamping, and range checks, along with Bin_prot-compatible serialization. Examples include tracking program variables, managing database keys, and persisting control flow nodes in a structured knowledge base.",
      "description_length": 623,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Enum",
      "library": "bap-knowledge",
      "description": "This module enables the definition and manipulation of extensible enumerated types, where each value is uniquely represented by a `KB.Name.t`. It supports declaring new enums, converting between string representations and typed values using functions like `read` and `to_string`, and performing comparisons or ordering operations such as `ascending` and `clamp`. Submodules extend this functionality to manage symbolic mappings, support package-scoped declarations, and integrate with knowledge domains for use cases like instruction set modeling, configuration systems, and domain-specific symbolic analysis.",
      "description_length": 609,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Seq",
      "library": "bap-knowledge",
      "description": "This module provides monadic sequence operations for composing and executing knowledge computations over sequences. It supports data types like `Core_kernel.Sequence.t` with functions for mapping, folding, filtering, and reducing sequences within the `Bap_knowledge.Knowledge.t` monad. Concrete use cases include processing sequences of symbolic expressions, analyzing program traces, and aggregating results from disassembled instructions.",
      "description_length": 440,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Rule",
      "library": "bap-knowledge",
      "description": "This module defines and documents rules that specify dependencies and computations over properties of entities like `person` or `address`. It supports operations to declare rules, mark them as dynamic with parameters, specify required properties, and document what they provide. Concrete use cases include modeling relationships such as deriving a `full_name` from `first_name` and `last_name`, or documenting how a `phone` number is obtained based on a person's `address`.",
      "description_length": 473,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Lift",
      "library": "bap-knowledge",
      "description": "This module provides functions to lift pure functions of various arities into a monadic context, enabling them to operate on monadic values instead of direct values. It works with functions and monadic values of types like `'a Knowledge.t`, supporting operations up to five arguments. Use this module to seamlessly integrate regular functions into monadic chains without manually unwrapping values.",
      "description_length": 398,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Domain",
      "library": "bap-knowledge",
      "description": "This module defines and manipulates domains used to represent knowledge properties as partially ordered sets with a least element. It supports operations like `join` to compute upper bounds, `order` to compare elements, and `empty` to represent absence of knowledge, working with types like `'a option`, sets, maps, and custom structures. Concrete use cases include modeling tribool logic, flat domains for strings or objects, and structured knowledge like sets or mappings with customizable merging behavior.",
      "description_length": 509,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Let_syntax",
      "library": "bap-knowledge",
      "description": "This module enables monadic `let` syntax for the `Bap_knowledge.Knowledge` monad, allowing sequential composition of knowledge computations using `let%bind` and `let%map`. It operates directly on `Bap_knowledge.Knowledge.t` values, facilitating the chaining of effectful operations that query or transform knowledge in a readable, imperative style. For example, users can bind the result of a knowledge computation to a variable with `let%bind var = get_value key in ...`, then use `var` in subsequent steps without explicit use of `>>=` or `>>|`. While it includes an empty child module, this does not affect the core functionality or usage of the monadic syntax provided.",
      "description_length": 673,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Agent",
      "library": "bap-knowledge",
      "description": "This module manages information providers called agents, each identified by a name, description, and reliability level. It supports registering new agents, querying and updating their properties, and listing all registered agents. It is used to track data provenance and resolve conflicts based on source reliability.",
      "description_length": 317,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Fn",
      "library": "bap-knowledge",
      "description": "This module provides function combinators for composing and transforming monadic computations in the Kleisli category. It works with functions that return values wrapped in the `Bap_knowledge.Knowledge.t` monad, enabling operations like identity, negation, repeated application, and sequential composition. Concrete use cases include building complex analysis pipelines, chaining symbolic evaluation steps, and structuring knowledge refinement processes in program analysis.",
      "description_length": 474,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Exn",
      "library": "bap-knowledge",
      "description": "This module provides the `expect` function for handling exceptions within monadic computations, allowing recovery via a catch handler and optional cleanup with `finally`. It operates on functions that return values in the `Bap_knowledge.Knowledge.t` monad and handles exceptions raised during their execution. Use it to safely evaluate knowledge computations that may fail, ensuring resource cleanup or error recovery without exiting the monadic context.",
      "description_length": 454,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Class",
      "library": "bap-knowledge",
      "description": "This module manages the declaration and manipulation of classes in a knowledge representation system, where each class is defined by a unique name and an associated sort. It supports operations to declare new classes, refine their sorts, and compare or assert class equality, while enabling the definition of properties that characterize class instances. Classes are used to structure knowledge objects with typed properties, ensuring consistent representation and reasoning over domains like program analysis or symbolic execution.",
      "description_length": 532,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Triple",
      "library": "bap-knowledge",
      "description": "This module provides monadic operations to access the first, second, and third elements of a triple within a knowledge computation context. It works with triples of arbitrary types encapsulated in the `Bap_knowledge.Knowledge.t` monad. Concrete use cases include extracting specific components of structured data during knowledge analysis or transformation tasks.",
      "description_length": 363,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Conflict",
      "library": "bap-knowledge",
      "description": "This module defines operations for handling conflicts that arise when inconsistent property values are introduced during knowledge representation tasks. It provides functions to convert conflict values to strings, format them, and serialize them as S-expressions, along with a mechanism to register custom printers for extended conflict types. It works directly with the `conflict` type, which represents divergent knowledge states, and supports use cases like error reporting in logic-based analysis and resolving inconsistencies in domain-specific knowledge bases.",
      "description_length": 566,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Slot",
      "library": "bap-knowledge",
      "description": "This module provides introspection operations for examining the properties of slots, including their domain, class, name, and documentation. It works with slot values that associate classes and domains with property types. Concrete use cases include querying metadata about declared properties, such as retrieving the name or domain of a specific slot for debugging or dynamic property handling.",
      "description_length": 395,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge.Symbol",
      "library": "bap-knowledge",
      "description": "This module manages symbols with unique names, supporting operations like interning, importing, and package scoping to avoid name clashes. It works with strings as symbol names and organizes them into packages, including a special \"keyword\" package. Use cases include resolving symbol references across different domains and ensuring consistent symbol identity within a knowledge base.",
      "description_length": 385,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_knowledge.Knowledge",
      "library": "bap-knowledge",
      "description": "This module orchestrates knowledge representation through scoped computations, property resolution, and failure-aware state manipulation, centered around knowledge objects, classes, slots, agents, and opinions. It enables symbolic reasoning, conflict resolution, and structured documentation management via monadic composition, serialization, and rule-based inference, with core operations for querying, transforming, and persisting knowledge. Submodules enhance this foundation by supporting context variables for dynamic state, structured name handling, infix monadic operators, extensible records with typed slots, and domain-specific enumeration. Specific applications include versioned data modeling, tribool logic, program analysis, and knowledge graph construction, with utilities for documentation introspection, conflict reporting, and agent-based provenance tracking.",
      "description_length": 877,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_knowledge",
      "library": "bap-knowledge",
      "description": "This module provides a framework for symbolic knowledge representation and reasoning, centered around knowledge objects, classes, slots, agents, and opinions. It supports scoped computations, property resolution, and state manipulation with monadic composition, rule-based inference, and extensible records with typed slots. Developers can perform versioned data modeling, construct knowledge graphs, and apply tribool logic for program analysis, while leveraging structured name handling and context variables for dynamic reasoning. Specific utilities enable documentation introspection, conflict resolution, and provenance tracking through agent-based annotations.",
      "description_length": 666,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 44,
    "meaningful_modules": 43,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9772727272727273
  },
  "statistics": {
    "max_description_length": 877,
    "min_description_length": 240,
    "avg_description_length": 499.25581395348837,
    "embedding_file_size_mb": 0.1566305160522461
  }
}