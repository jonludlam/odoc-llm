{
  "package": "nbd-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:54.743625",
  "modules": [
    {
      "module_path": "Nbd_unix.Server",
      "library": "nbd-unix",
      "description": "This module handles the initial handshake and options negotiation for exposing block devices over NBD, allowing a server to offer a list of available disk names and establish a connection with a client. It works with cleartext channels and abstract server instances, managing the lifecycle of a connection from setup to termination. Concrete use cases include starting a server to export a specific block device, restricting access to read-only operations, and ensuring proper cleanup after client disconnection.",
      "description_length": 512,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nbd_unix.Client",
      "library": "nbd-unix",
      "description": "This module implements client-side operations for interacting with remote block devices over a network. It supports connecting to a specific disk, reading and writing data to it using buffer lists, and querying device properties such as size and capabilities. It works with `Cstruct.t` buffers, `int64` sector offsets, and standard Lwt-based asynchronous channels, returning results in a typed error format that includes protocol-level failures. Use cases include virtual machine disk access over a network, remote storage management, and distributed system coordination where block-level access is required.",
      "description_length": 608,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd_unix",
      "library": "nbd-unix",
      "description": "This module enables secure and cleartext NBD communication over Unix sockets, supporting both client and server roles with TLS integration, file descriptor management, and asynchronous I/O. It provides core functions to establish and manage connections, configure TLS contexts, and expose or access block devices remotely. The server-side submodule handles handshake negotiation, disk export, and connection lifecycle, allowing clients to securely access specific block devices with read-only or read-write permissions. The client-side submodule supports asynchronous read/write operations, device property queries, and structured error handling, enabling use cases like remote virtual machine storage and distributed block device coordination using `Cstruct.t` buffers and `Lwt` channels.",
      "description_length": 789,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 789,
    "min_description_length": 512,
    "avg_description_length": 636.3333333333334,
    "embedding_file_size_mb": 0.011324882507324219
  }
}