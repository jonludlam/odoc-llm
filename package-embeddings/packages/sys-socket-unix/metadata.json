{
  "package": "sys-socket-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:05:06.415380",
  "modules": [
    {
      "module_path": "Sys_socket_unix_constants.Def",
      "library": "sys-socket-unix.constants",
      "description": "This module defines constants related to Unix domain sockets, including the address family `af_unix` and the maximum length of the socket path `sun_path_len`. It works with integer constants typically used in system programming contexts. These values are essential for configuring and binding Unix domain sockets in low-level network applications.",
      "description_length": 347,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sys_socket_unix_constants",
      "library": "sys-socket-unix.constants",
      "description": "This module provides integer constants for Unix domain socket configuration, such as `af_unix` for the address family and `sun_path_len` for the maximum socket path length. It is used in low-level networking code to set up and bind Unix domain sockets with correct system-specific values. Direct use cases include socket address initialization and system call parameter setup in networked applications.",
      "description_length": 402,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sys_socket_unix.SockaddrUnix",
      "library": "sys-socket-unix",
      "description": "This module provides operations to construct and manipulate Unix domain socket addresses. It defines the `t` structure with fields for the address family and the path to the socket, along with utilities to extract and convert socket address pointers. Concrete use cases include setting up and binding Unix domain sockets for inter-process communication.",
      "description_length": 353,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sys_socket_unix",
      "library": "sys-socket-unix",
      "description": "This module implements low-level operations for working with Unix domain sockets, including creating and manipulating socket address structures. It provides direct bindings for converting between `Unix.sockaddr` and C-compatible socket address pointers, along with a structured interface for accessing the address family and socket path. Concrete use cases include binding, connecting, and managing Unix domain sockets for local inter-process communication.",
      "description_length": 457,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sys_socket_unix_types.Def.SockaddrUnix",
      "library": "sys-socket-unix.types",
      "description": "This module defines the structure and accessors for working with Unix domain socket addresses. It provides fields to set or retrieve the address family and the path associated with a Unix socket. Use this module when binding or connecting to Unix domain sockets using low-level system interfaces.",
      "description_length": 296,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sys_socket_unix_types.Def",
      "library": "sys-socket-unix.types",
      "description": "This module defines constants and structures for working with Unix domain sockets, including the address family identifier and maximum path length. It provides a structured representation of Unix socket addresses for use in binding or connecting to sockets via low-level system calls. Use this module when handling Unix domain socket operations that require direct manipulation of socket address structures.",
      "description_length": 407,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sys_socket_unix_types",
      "library": "sys-socket-unix.types",
      "description": "This module defines constants and structures for Unix domain socket operations, including address family identifiers and maximum path lengths. It provides a structured representation of Unix socket addresses used in binding or connecting to sockets through low-level system calls. Use it when directly manipulating socket address structures in Unix domain socket programming.",
      "description_length": 375,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 457,
    "min_description_length": 296,
    "avg_description_length": 376.7142857142857,
    "embedding_file_size_mb": 0.1018209457397461
  }
}