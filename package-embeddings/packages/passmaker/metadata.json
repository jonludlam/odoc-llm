{
  "package": "passmaker",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:45.173292",
  "modules": [
    {
      "module_path": "Passmaker.Phrase.Internal",
      "library": "passmaker",
      "description": "This module defines structured phrase types combining adjectives, nouns, verbs, and locations into 32-bit and 64-bit representations. It provides pretty-printing and equality checking for these phrase structures. Useful for generating and comparing password-like phrases based on grammatical components.",
      "description_length": 303,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Passmaker.Word.Location",
      "library": "passmaker",
      "description": "This module defines a type `t` representing geographic locations with operations to convert between integers, strings, and abbreviated strings. It supports parsing, formatting, equality checks, and provides a suggestion function for string inputs based on edit distance. Use cases include handling location identifiers in a compact form, validating location strings, and generating abbreviations or suggestions for user input.",
      "description_length": 426,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Verb",
      "library": "passmaker",
      "description": "This module defines a type `t` representing a verb and provides functions to convert between verbs and integers, strings, and abbreviated strings. It supports parsing, formatting, and equality checks, along with a suggestion function that finds approximate matches based on edit distance. Use cases include handling verb inputs in a REPL, validating user-provided verbs, and generating suggestions for unrecognized input.",
      "description_length": 421,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase.Text",
      "library": "passmaker",
      "description": "This module handles conversion between textual string representations and internal phrase structures, including abbreviation parsing. It processes strings into structured phrases while identifying unknown words or abbreviations, and supports round-trip serialization via `of_string`/`to_string` and `of_abbr_string`/`to_abbr_string`. Concrete use cases include parsing user input with potential typos or unrecognized terms and converting structured phrases to human-readable or abbreviated string formats.",
      "description_length": 505,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Prelude.TESTABLE",
      "library": "passmaker",
      "description": "This module defines a type `t` along with functions for pretty-printing values of that type and testing them for equality. It is used to support test cases where structured values need to be both displayed and compared. For example, it enables asserting equality of complex data in unit tests while providing readable output when tests fail.",
      "description_length": 341,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker.Word.S",
      "library": "passmaker",
      "description": "This module defines a type `t` representing words with associated integer identifiers, supporting conversions to and from integers and strings, including abbreviated forms. It provides case-insensitive lookup via `suggest` for word completion with a given edit distance threshold and includes pretty-printing and equality checks. Concrete use cases include word-based identifier management, auto-complete features, and abbreviation handling in command-line interfaces.",
      "description_length": 468,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Adjective",
      "library": "passmaker",
      "description": "This module defines a type `t` representing adjectives with operations to convert between integers, strings, and abbreviated forms. It supports parsing, formatting, and equality checks, along with a suggestion function for generating string matches based on edit distance. Concrete use cases include handling adjective-based identifiers and supporting user input normalization with abbreviation support.",
      "description_length": 403,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Noun",
      "library": "passmaker",
      "description": "This module implements a noun word type with operations for converting between integers, strings, and abbreviated strings. It supports parsing, formatting, comparison, and suggestion generation with configurable edit distance. Use cases include handling noun-based identifiers in password generation or word-based encoding schemes.",
      "description_length": 331,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase.Hexa",
      "library": "passmaker",
      "description": "This module converts between hexadecimal string representations and internal phrase structures, validating input lengths and encoding. It handles 32- and 64-character hex strings and byte sequences, ensuring correct formatting for cryptographic or encoding workflows. Use it when parsing or generating hex-encoded phrases for storage or transmission.",
      "description_length": 350,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Prelude.String",
      "library": "passmaker",
      "description": "This module offers comprehensive string operations spanning low-level manipulation, character traversal, and semantic transformations. It works primarily with OCaml's built-in `string` type (aliased as `t`) and `bytes`, supporting both immutable and mutable string handling through functions like slicing, case conversion, and byte-level modification. Key use cases include text processing pipelines requiring precise character indexing, case normalization for internationalized data, and similarity analysis via Damerau-Levenshtein distance calculations with encoding-specific guarantees for Latin-1 and ASCII.",
      "description_length": 611,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase.EXTERNAL",
      "library": "passmaker",
      "description": "This module converts between internal and external string representations of passphrases, handling parsing and serialization. It supports the `t` type for external passphrase values and includes error handling for string conversion. Use it to securely import or export passphrase data in string format while maintaining internal consistency.",
      "description_length": 341,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word",
      "library": "passmaker",
      "description": "This module organizes words by part of speech, offering tools to retrieve, filter, and combine them based on length and category. It supports generating random word selections, creating password candidates from nouns and verbs, or building vocabulary exercises with case-insensitive word lookup and abbreviation handling. Each word type\u2014such as noun, verb, or adjective\u2014includes conversion to and from integers and strings, along with suggestion functions that find approximate matches using edit distance. Use cases range from input validation and auto-complete features to compact identifier encoding and creative writing tools.",
      "description_length": 630,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker.Prelude",
      "library": "passmaker",
      "description": "This module enhances standard data types with advanced manipulation capabilities, integrating structured value comparison and display from its submodules. It centers around arrays and strings, offering operations like sorting, sanitization, and precise character indexing, while the `t` type supports equality testing and pretty-printing for complex data in test cases. The string submodule extends handling with slicing, case conversion, and distance calculations, enabling robust text processing and internationalized data normalization. Together, they allow tasks like validating and transforming structured input, comparing test outputs with readable diagnostics, or building pipelines for byte-level string manipulation.",
      "description_length": 725,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase",
      "library": "passmaker",
      "description": "This module manages the conversion and manipulation of passphrases between internal and external formats, supporting structured representations and various encodings such as hexadecimal and human-readable text. It provides core operations for encoding, decoding, and comparing phrases, with structured types combining grammatical components and support for both abbreviated and full textual representations. Child modules handle specific conversions, including structured phrase construction, text and abbreviation parsing, hex string encoding, and secure string serialization with error handling. Examples include parsing user input with typos into structured phrases, converting between 32-bit/64-bit representations and hex strings, and round-trip serialization of passphrases for storage or transmission.",
      "description_length": 808,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker",
      "library": "passmaker",
      "description": "This module organizes vocabulary by grammatical category, enabling retrieval, combination, and transformation of words based on type, length, and similarity. It provides data types for nouns, verbs, and adjectives with conversions to integers, strings, and suggestions via edit distance, supporting tasks like password generation and vocabulary exercises. Enhanced string and array operations handle sanitization, comparison, and internationalized text processing, while structured passphrases enable encoding, decoding, and error-resilient parsing across formats like hex and abbreviated text. Specific uses include auto-complete systems, secure identifier encoding, and robust input validation with typo tolerance.",
      "description_length": 716,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 15,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9375
  },
  "statistics": {
    "max_description_length": 808,
    "min_description_length": 303,
    "avg_description_length": 491.93333333333334,
    "embedding_file_size_mb": 0.054900169372558594
  }
}