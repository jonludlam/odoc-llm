{
  "package": "passmaker",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 13,
  "creation_timestamp": "2025-08-14T23:22:46.626218",
  "modules": [
    {
      "module_path": "Passmaker.Phrase.Text",
      "library": "passmaker",
      "description": "This module handles conversion between textual phrase representations and internal structures, including parsing and validation. It processes strings into structured phrases, identifies unknown words or abbreviations, and generates string or abbreviation-based representations. Concrete use cases include parsing user input with potential typos, validating phrases against known word sets, and serializing phrases for storage or transmission.",
      "description_length": 442,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker.Prelude.String",
      "library": "passmaker",
      "description": "This module provides low-level string utilities for creation, manipulation, and comparison, including case conversion (both ASCII-specific and general), character search, iteration, and Damerau-Levenshtein edit distance calculation for ASCII strings. It operates on strings and byte sequences, supporting tasks like text processing, binary data handling via in-place byte modifications, and algorithms requiring precise character-level analysis or similarity measurements between sequences.",
      "description_length": 490,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Adjective",
      "library": "passmaker",
      "description": "This module defines a type `t` representing adjectives used in password generation, along with operations to convert between integers, strings, and abbreviated forms. It supports parsing, serialization, and pretty-printing, along with a function to suggest similar adjectives based on a maximum edit distance. Concrete use cases include generating readable passwords and correcting misspelled adjective inputs.",
      "description_length": 410,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Prelude.Array",
      "library": "passmaker",
      "description": "This module offers array creation, transformation, and manipulation capabilities, including element access, iteration, mapping, folding, sorting, and binary search operations. It supports generic arrays, float arrays, matrices, and conversions between arrays, lists, and sequences, enabling efficient data processing pipelines, numerical computations, and scenarios requiring ordered data handling or element membership tests.",
      "description_length": 426,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Verb",
      "library": "passmaker",
      "description": "This module defines a concrete type `t` representing verbs with operations to convert between integers, strings, and abbreviated strings. It supports parsing, formatting, and equality checks, along with a suggestion function that finds approximate matches based on edit distance. Use cases include handling verb inputs in command-line interfaces and validating or correcting user-entered verbs against a fixed set.",
      "description_length": 414,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase.Internal",
      "library": "passmaker",
      "description": "This module defines structured phrase types combining adjectives, nouns, verbs, and locations into fixed patterns. It provides types `r32` and `r64` for representing 32-bit and 64-bit mnemonic phrases, along with a unified type `t` that supports both. The module includes functions for pretty-printing and equality checking, enabling clear visualization and comparison of phrase structures.",
      "description_length": 390,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Noun",
      "library": "passmaker",
      "description": "This module defines a noun type with operations to convert between integers, strings, and abbreviated strings, supporting precise parsing and formatting. It includes functions for validating input, suggesting corrections based on string distance, and printing. Use this module to manage noun representations in password generation or data validation scenarios where exact or approximate matches are required.",
      "description_length": 408,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase.Hexa",
      "library": "passmaker",
      "description": "This module converts between hexadecimal string and bytes representations and an internal phrase type. It validates input lengths for 32 or 64 character hex strings and byte sequences of 16 or 32 bytes. Use it to securely parse and serialize cryptographic phrases in hex format for storage or transmission.",
      "description_length": 306,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Word.Location",
      "library": "passmaker",
      "description": "This module defines a type `t` representing geographic locations with operations to convert between integers, strings, and abbreviated strings. It supports parsing, formatting, equality checks, and provides a suggestion function for string inputs based on edit distance. Use cases include handling location identifiers in a compact form, validating location strings, and generating location-based suggestions in user interfaces.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passmaker.Phrase",
      "library": "passmaker",
      "description": "This module combines structured phrase types with tools for parsing, validating, and serializing mnemonic phrases in both hexadecimal and textual formats. It supports 32-bit and 64-bit phrase representations, enabling secure conversion between internal structures and external formats like hex strings, byte sequences, and user-readable text. Use it to process cryptographic phrases with strict validation, handle user input with typo tolerance, and generate compact or abbreviated representations for storage or transmission.",
      "description_length": 526,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker.Word",
      "library": "passmaker",
      "description": "This module provides functions to convert between integer, string, and abbreviated forms of words, with support for parsing, formatting, and suggesting corrections based on edit distance. It operates on specific word types such as adjectives, locations, nouns, and verbs. Use cases include generating readable passwords, validating user input, and providing auto-suggestions for misspelled entries.",
      "description_length": 398,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker.Prelude",
      "library": "passmaker",
      "description": "This module includes submodules for working with arrays and strings, offering precise operations tailored to each structure. The Array module supports creation, transformation, and analysis of generic and numeric arrays, including sorting, binary search, and matrix operations. The String module provides utilities for byte-level string manipulation, case conversion, character search, and edit distance calculation, enabling tasks like text analysis and binary data processing.",
      "description_length": 478,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passmaker",
      "library": "passmaker",
      "description": "This module combines structured phrase handling with cryptographic validation and format conversion across hexadecimal, textual, and byte-based representations. It supports precise array and string operations, including binary search, matrix manipulation, byte-level transformations, and edit distance calculations. It also enables word-based operations like abbreviation, correction, and password generation using typed vocabulary such as nouns, adjectives, and verbs.",
      "description_length": 469,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 526,
    "min_description_length": 306,
    "avg_description_length": 429.61538461538464,
    "embedding_file_size_mb": 0.18881797790527344
  }
}