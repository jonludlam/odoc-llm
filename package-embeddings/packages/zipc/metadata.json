{
  "package": "zipc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:17.782462",
  "modules": [
    {
      "module_path": "Zipc.Ptime",
      "library": "zipc",
      "description": "This module represents time as a POSIX timestamp, an integer denoting seconds since 1970-01-01 UTC. It provides `dos_epoch` as the earliest time expressible in ZIP archives, and converts timestamps to UTC date-time tuples with `to_date_time`. The `pp` function prints timestamps in RFC 3339 format without the \"T\" separator, suitable for logging or human-readable output.",
      "description_length": 371,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zipc.File",
      "library": "zipc",
      "description": "This module creates and manipulates file data entries for ZIP archives, supporting raw storage and Deflate compression with configurable parameters like compression level and CRC-32 checksums. It works with binary strings and structured metadata such as compression method, file size, and encryption flags, enabling precise control over ZIP file properties. Concrete use cases include building ZIP archives from in-memory data, extracting and verifying compressed files, and inspecting ZIP metadata for compatibility or integrity checks.",
      "description_length": 537,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zipc.Member",
      "library": "zipc",
      "description": "This module defines and manipulates ZIP archive members, supporting creation with specified paths, modification times, and UNIX modes. It handles two member kinds: directories and files, each with associated metadata like path, mode, and last modification time. Use cases include inspecting ZIP member details, formatting member information similarly to `ls -l`, and enforcing ZIP format limits such as maximum member count and path length.",
      "description_length": 440,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zipc_deflate.Crc_32",
      "library": "zipc",
      "description": "This module computes and validates CRC-32 checksums for byte sequences, using the `uint32` type to represent checksum values. It provides functions to calculate checksums over strings, compare them for equality, and format them for display. A typical use case involves verifying data integrity during compression or decompression by comparing computed checksums against expected values.",
      "description_length": 386,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zipc.Fpath",
      "library": "zipc",
      "description": "This module handles file path normalization and mode formatting for ZIP archive operations. It provides functions to sanitize paths by ensuring consistent directory structure and formatting file modes for display. Useful for preparing file paths for ZIP entry creation and displaying file permissions in a human-readable format.",
      "description_length": 328,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zipc_deflate.Adler_32",
      "library": "zipc",
      "description": "This module computes Adler-32 checksums over strings and compares them for equality. It works with 32-bit unsigned integers as checksum values and provides exact validation with descriptive errors. Use it to verify data integrity after compression or transmission, such as confirming the consistency of zlib-compressed payloads.",
      "description_length": 328,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zipc_deflate",
      "library": "zipc",
      "description": "This module implements compression and decompression for the Deflate and zlib formats, operating on byte strings with optional checksum verification. It provides direct functions to compress data with configurable compression levels and to decompress data with optional size constraints and checksum tracking. Concrete use cases include processing compressed network payloads, handling embedded zlib-wrapped data, and validating checksums during file decompression. Submodules handle CRC-32 and Adler-32 checksum computations, enabling data integrity verification through calculated and compared checksum values represented as 32-bit unsigned integers.",
      "description_length": 652,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zipc",
      "library": "zipc",
      "description": "This module enables creating, inspecting, and modifying ZIP archives using path-based queries to manage members, supporting operations like adding, removing, and locating files or directories. It works with an abstract representation of ZIP archives, handling compression methods such as Deflate, binary data encodings, and size constraints during serialization to strings or buffers. Time values use a POSIX timestamp format, convertible to UTC tuples and printable in RFC 3339 style, while file entries support storage with configurable compression levels and CRC-32 checksums. Use cases include generating ZIP archives from memory, converting them to wire formats, inspecting metadata for integrity checks, and formatting member details similar to `ls -l`, with path utilities ensuring consistent directory structures and display-ready mode formatting.",
      "description_length": 855,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 855,
    "min_description_length": 328,
    "avg_description_length": 487.125,
    "embedding_file_size_mb": 0.029486656188964844
  }
}