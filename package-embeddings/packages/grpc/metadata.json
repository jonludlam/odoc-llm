{
  "package": "grpc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:23.907494",
  "modules": [
    {
      "module_path": "Grpc.Server.S",
      "library": "grpc",
      "description": "This module defines operations for creating and managing a gRPC server instance. It provides functions to initialize a server, register named services that handle incoming requests, and route individual requests to the appropriate service. It works directly with H2.Reqd.t request objects and maintains internal routing state to dispatch requests based on service names.",
      "description_length": 370,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc.Buffer",
      "library": "grpc",
      "description": "This module implements a mutable buffer for efficient data manipulation, supporting operations like copying from a bigstring, slicing, and reading integers in various formats. It works with bytes, strings, and big-endian numeric values, providing direct access to binary data at specific positions. Concrete use cases include parsing network packets, handling gRPC message framing, and managing binary data streams with precise control over memory layout.",
      "description_length": 455,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc.Server",
      "library": "grpc",
      "description": "The module implements a gRPC server interface that processes incoming requests and manages bidirectional streams. It provides functions to initialize a server instance, register services by name, and route requests to the appropriate handlers using H2.Reqd.t objects. Key data types include service descriptors, RPC method definitions, and stream objects that support sending and receiving messages. You can use it to build a fully functional gRPC server that handles unary and streaming calls, integrates with serialization libraries, and manages service routing internally.",
      "description_length": 575,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc.Status",
      "library": "grpc",
      "description": "This module defines gRPC status codes as an enumerated type, along with functions to convert between codes and integers, format and display them, and construct or inspect status values with optional messages. It supports working with raw integers, status code variants, and structured status values. Concrete use cases include creating and interpreting gRPC response statuses, extracting status information from HTTP/2 headers, and handling errors with descriptive messages in gRPC services and clients.",
      "description_length": 503,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc.Message",
      "library": "grpc",
      "description": "This module encodes strings into gRPC messages and extracts them from buffers. It provides functions to process individual messages or all messages in a buffer using a callback. Typical use cases include handling streaming gRPC data or parsing message frames from network buffers.",
      "description_length": 280,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc",
      "library": "grpc",
      "description": "This module provides low-level utilities for handling binary data and gRPC communication. It includes a mutable buffer for efficient manipulation of binary data, support for building gRPC servers with stream management, definitions for gRPC status codes, and functions for encoding and extracting gRPC messages. You can use it to parse network packets, implement gRPC services with unary and streaming methods, manage errors with structured status codes, and process gRPC message frames from binary buffers.",
      "description_length": 507,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 575,
    "min_description_length": 280,
    "avg_description_length": 448.3333333333333,
    "embedding_file_size_mb": 0.02220439910888672
  }
}