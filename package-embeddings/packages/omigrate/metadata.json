{
  "package": "omigrate",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:16:56.277658",
  "modules": [
    {
      "module_path": "Omigrate.Driver.Connection",
      "library": "omigrate",
      "description": "This module defines a connection configuration type for database connections, including fields for host, user, password, port, and database name. It provides functions to create, parse, and manipulate connection parameters, enabling programmatic setup of database drivers. Concrete use cases include configuring PostgreSQL or MySQL connections with optional authentication and port settings.",
      "description_length": 391,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate.Driver",
      "library": "omigrate",
      "description": "This module manages database driver loading and registration through URIs or string identifiers, supporting operations like `load`, `load_from_uri`, and `register` to dynamically select and configure drivers. It works with database connection parameters and abstracts driver implementations behind a common interface. Concrete use cases include selecting a PostgreSQL driver by name and connecting to a database using a parsed URI.",
      "description_length": 431,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate.Error",
      "library": "omigrate",
      "description": "This module defines error types for handling migration-related failures, including unknown drivers, invalid URIs, and unrecognized sources. It provides constructors for these errors and a function to convert them to string representations. Use this module to report and handle specific migration setup and configuration issues.",
      "description_length": 327,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate.Migration",
      "library": "omigrate",
      "description": "Handles database schema migrations with explicit up and down scripts. Works with migration records containing version, name, and SQL commands. Used to apply or revert database changes in a controlled sequence.",
      "description_length": 209,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate",
      "library": "omigrate",
      "description": "This module orchestrates database schema migrations using explicit up/down scripts. It supports version tracking, migration application, and database setup operations with concrete data types like `Migration.t`, `Driver.Connection.t`, and structured error types. Use it to initialize databases, apply migrations from a source directory, or roll back changes against a specific database connection.",
      "description_length": 397,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate_sqlite3.Sqlite_3.Db",
      "library": "omigrate.sqlite3",
      "description": "This module manages SQLite database connections and transactions, providing functions to execute statements, bind parameters, run queries, and handle transaction control. It works with SQLite databases, statements, and data types, enabling operations like schema migrations or data persistence. Concrete use cases include executing SQL scripts, performing atomic updates, and retrieving structured query results.",
      "description_length": 412,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate_sqlite3.Sqlite_3.T",
      "library": "omigrate.sqlite3",
      "description": "This module handles SQLite database lifecycle management and migration operations. It provides functions to create, drop, and version databases, as well as apply and roll back migrations using a connection configuration. Concrete use cases include initializing a new SQLite database, ensuring migration tracking exists, and upgrading or downgrading schema versions.",
      "description_length": 365,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate_sqlite3.Sqlite_3",
      "library": "omigrate.sqlite3",
      "description": "This module provides functions for managing SQLite database connections, executing SQL statements, and handling transactions. It works with SQLite databases, statements, and query results, supporting operations like parameter binding, atomic updates, and schema migrations. Concrete use cases include running migration scripts, querying structured data, and maintaining transactional integrity during database changes.",
      "description_length": 418,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate_sqlite3",
      "library": "omigrate.sqlite3",
      "description": "This module handles SQLite database connections, executes SQL statements with parameter binding, and manages transactions. It works with SQLite databases, SQL statements, and query results. Use it to run migration scripts, perform atomic updates, and maintain transactional integrity during schema or data changes.",
      "description_length": 314,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Omigrate_postgres.Postgres.T",
      "library": "omigrate.postgres",
      "description": "This module provides functions for managing PostgreSQL database migrations, including creating and dropping databases, applying migrations up or down, and checking database versions. It works with PostgreSQL connections via `Pgx_lwt_unix.t` and handles migration logic using `Omigrate.Migration.t` values. Concrete operations include running migration scripts within transactions, ensuring version tracking tables exist, and parsing database connection URIs for configuration.",
      "description_length": 476,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Omigrate_postgres.Postgres",
      "library": "omigrate.postgres",
      "description": "This module handles PostgreSQL-specific migration operations such as creating and dropping databases, applying migrations in transactional batches, and verifying schema versions. It works directly with PostgreSQL connections using `Pgx_lwt_unix.t` and migration definitions via `Omigrate.Migration.t`. Use it to automate schema evolution during deployment, reset databases in testing, or synchronize database versions across environments.",
      "description_length": 438,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Omigrate_postgres",
      "library": "omigrate.postgres",
      "description": "This module provides functions to manage PostgreSQL database migrations, including creating and dropping databases, applying migrations transactionally, and checking schema versions. It operates on PostgreSQL connections using `Pgx_lwt_unix.t` and migration definitions from `Omigrate.Migration.t`. Use it to automate schema updates during deployments, reset databases in test workflows, or ensure schema consistency across environments.",
      "description_length": 437,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 476,
    "min_description_length": 209,
    "avg_description_length": 384.5833333333333,
    "embedding_file_size_mb": 0.17426395416259766
  }
}