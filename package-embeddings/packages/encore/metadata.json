{
  "package": "encore",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:41.961284",
  "modules": [
    {
      "module_path": "Encore.Syntax",
      "library": "encore",
      "description": "This module provides parser and serializer combinators that enable constructing complex data processors through functional composition and recursion. These combinators handle sequences, repetitions, choices, and transformations on strings, characters, and lists, with utilities for character classification (e.g., digits, letters) and optional parsing. They are particularly useful for tasks like parsing structured text formats, validating input patterns, and building custom serialization workflows for data interchange.",
      "description_length": 522,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Encore.Lavoisier",
      "library": "encore",
      "description": "This module implements a parser and serializer combinator library for incremental processing of byte streams. It provides primitives for matching and emitting characters and strings, conditional parsing with backtracking, and value comparison with customizable equality checks. Use cases include implementing custom binary or text-based protocols, parsing structured data formats like JSON or HTTP, and building composable serialization pipelines.",
      "description_length": 447,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Encore.Bij",
      "library": "encore",
      "description": "This module implements bijections\u2014invertible mappings between types\u2014with operations to construct, compose, and manipulate them. It supports tuples, lists, options, and custom types through functions like `v` for creation, `compose` and `product` for combining bijections, and specific helpers like `cons`, `some`, and `objN` for common data structures. Use cases include bidirectional transformations for serialization, data structure conversion, and reversible computations.",
      "description_length": 475,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Encore",
      "library": "encore",
      "description": "This module enables bidirectional data transformations by combining parsers and serializers for structured formats, offering combinators to build complex processors through composition and recursion. It supports incremental byte stream processing, character and string manipulation, and bijections for invertible mappings between types, with utilities for tuples, lists, and options. Examples include parsing and encoding Git objects, validating input patterns, and building reversible serializers for custom data interchange. Submodules extend functionality to protocol implementation, conditional parsing, and composable bijections for lossless transformations.",
      "description_length": 663,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 663,
    "min_description_length": 447,
    "avg_description_length": 526.75,
    "embedding_file_size_mb": 0.014954566955566406
  }
}