{
  "package": "diffast-api",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:39.718564",
  "modules": [
    {
      "module_path": "Diffast_api.Version",
      "library": "diffast-api",
      "description": "This module defines string values for version and copyright information. It provides direct access to version identifiers and copyright notices as static string constants. Useful for retrieving application metadata or licensing details without runtime computation.",
      "description_length": 264,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_api.Astapi",
      "library": "diffast-api",
      "description": "This module provides functions for analyzing and transforming OCaml abstract syntax trees (ASTs), particularly for comparing and dumping fragments of code. It works with AST nodes and supports operations like structural comparison, traversal, and pretty-printing of code fragments. Concrete use cases include implementing refactoring tools, linters, and code differencing utilities that require precise manipulation of OCaml source structures.",
      "description_length": 443,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_api.Diffastapi",
      "library": "diffast-api",
      "description": "Matches file paths using a regular expression pattern and retrieves a list of file paths from a specified directory. Works with strings representing file paths and directories. Useful for filtering and processing files in a directory based on naming conventions.",
      "description_length": 262,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_api",
      "library": "diffast-api",
      "description": "This module provides utilities for working with version metadata, OCaml AST transformations, and file path matching. It includes string constants for version and copyright information, functions for analyzing and manipulating OCaml abstract syntax trees, and tools for filtering file paths using regular expressions. You can retrieve application metadata, compare and print code fragments, or select files based on pattern-matching rules. Example uses include building linters, refactoring tools, and automated code analysis pipelines.",
      "description_length": 535,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 4,
    "filtered_empty_modules": 3,
    "retention_rate": 0.5714285714285714
  },
  "statistics": {
    "max_description_length": 535,
    "min_description_length": 262,
    "avg_description_length": 376.0,
    "embedding_file_size_mb": 0.014940261840820312
  }
}