{
  "package": "osc-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:25.107474",
  "modules": [
    {
      "module_path": "Osc_lwt.Udp.Client",
      "description": "Provides asynchronous creation and destruction of client instances, and sends OSC packets to a specified address. Operates on a custom type `t` representing client state and uses Lwt for concurrency. Used to manage network communication in real-time audio applications.",
      "description_length": 269,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Osc_lwt.Udp.Server",
      "description": "Handles creation and destruction of network servers using Lwt for asynchronous operations. Processes incoming OSC packets with type tag validation, returning results with specific error cases. Operates on socket addresses and Lwt-based I/O structures.",
      "description_length": 251,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Osc_lwt.Udp",
      "description": "manages network communication through asynchronous client and server operations, using Lwt for concurrency. It defines a custom type `t` for client state and processes OSC packets with validation and error handling. Clients send packets to specified addresses, while servers listen for incoming data and return structured results. This enables real-time audio applications to handle network interactions efficiently.",
      "description_length": 416,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "osc-lwt",
      "description": "Handles encoding and decoding of OSC messages and bundles using binary and textual representations. Operates on custom types such as `osc_message`, `osc_bundle`, and `osc_type` for structured data exchange. Enables real-time audio control and network communication in multimedia applications.",
      "description_length": 292,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Osc_lwt",
      "description": "handles asynchronous network communication by managing client and server operations, with a focus on OSC packet processing and real-time data exchange. It introduces a `t` type to represent client states and provides functions for sending and receiving structured data over networks. Operations include validating incoming packets, handling errors, and routing messages to appropriate handlers. Examples include setting up a server to listen for OSC messages or sending audio control signals from a client to a remote server.",
      "description_length": 525,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 525,
    "min_description_length": 251,
    "avg_description_length": 350.6,
    "embedding_file_size_mb": 0.01860523223876953
  }
}