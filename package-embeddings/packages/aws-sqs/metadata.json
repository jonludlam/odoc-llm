{
  "package": "aws-sqs",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 104,
  "creation_timestamp": "2025-07-15T23:19:01.542189",
  "modules": [
    {
      "module_path": "Aws_sqs.Types.BatchResultErrorEntry",
      "library": "aws-sqs",
      "description": "This module defines a record type for handling error entries in batch operations, with fields for error ID, sender fault flag, error code, and optional message. It provides functions to construct, parse, and convert error entries to query parameters, JSON, or XML. It is used to process and respond to individual errors within SQS batch message operations.",
      "description_length": 356,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.CreateQueueRequest",
      "library": "aws-sqs",
      "description": "This module defines the structure and operations for creating an Amazon SQS queue request. It includes functions to construct a request with required queue name and optional attributes or tags, and to convert the request to query parameters or JSON format. It also provides parsing capabilities from XML and JSON input, specifically tailored for SQS queue creation operations.",
      "description_length": 376,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.QueueDoesNotExist",
      "library": "aws-sqs",
      "description": "This module defines a singleton type `t` representing the absence of a queue in SQS operations. It includes functions to construct, parse, and convert the type to AWS query format, JSON, and back from JSON. It is used specifically to handle cases where a requested queue does not exist, providing a structured way to represent and serialize that error state.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.TooManyEntriesInBatchRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and associated functions for handling the `TooManyEntriesInBatchRequest` error in AWS SQS batch operations. It provides functions to create, parse, and convert the error type to JSON or query parameters, specifically for validating and managing batch request limits. The module works with unit type values to represent the presence of this error condition.",
      "description_length": 383,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageSystemAttributeNameForSends",
      "library": "aws-sqs",
      "description": "This module defines a single enumerated type representing message system attributes for sends, specifically supporting conversion between string representations and type values. It provides functions for serialization to and from JSON and query formats, as well as parsing from XML nodes. Use this module when handling message system attributes like trace headers in SQS message sends, particularly for integrating with AWS services that require structured attribute handling.",
      "description_length": 476,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ListQueuesResult",
      "library": "aws-sqs",
      "description": "This module represents the result of listing SQS queues, containing a list of queue URLs and an optional pagination token. It provides functions to construct, parse, and serialize the result in various formats like JSON and query parameters. It is used when handling responses from AWS SQS list queue operations, particularly for processing paginated results.",
      "description_length": 359,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchResultEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of batch result entries for changing message visibility in SQS. It provides functions to parse XML input into entry lists, convert entry lists to query parameters or JSON, and reconstruct entry lists from JSON. It is used to process responses and requests in bulk message visibility operations with SQS.",
      "description_length": 329,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ListQueueTagsResult",
      "library": "aws-sqs",
      "description": "This module handles the result of listing tags for an SQS queue, providing functions to construct, parse, and serialize the tag data. It works with a `TagMap.t` option to represent the tags returned from the operation. Use this module when retrieving and processing tags associated with an SQS queue in AWS.",
      "description_length": 307,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchRequestEntry",
      "library": "aws-sqs",
      "description": "This module defines a type and operations for constructing and serializing individual message entries in a batch send request to Amazon SQS. It supports setting message attributes, body, delay, and deduplication/group IDs, and provides conversions to JSON, query parameters, and parsing from XML. It is used to prepare messages for batched transmission via the SQS API.",
      "description_length": 369,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.GetQueueAttributesRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for retrieving queue attributes in Amazon SQS, including the queue URL and a list of attribute names. It provides functions to construct, parse, and serialize the request for use with HTTP queries or JSON APIs. Concrete use cases include fetching metadata such as queue size, visibility timeout, or access policies from an SQS queue.",
      "description_length": 373,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.EmptyBatchRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and associated functions for handling empty batch requests in AWS SQS operations. It provides functions to create, parse, and convert empty batch request values to query parameters or JSON format. It is used when submitting or processing SQS batch operations that intentionally contain no entries.",
      "description_length": 324,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.ListDeadLetterSourceQueuesRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for listing dead letter source queues in Amazon SQS, including the queue URL, pagination token, and maximum number of results. It provides functions to construct, serialize, and parse these requests in various formats such as JSON and query parameters. It is used when interacting with SQS to retrieve the list of source queues for a dead letter queue, supporting paginated responses.",
      "description_length": 424,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.QueueDeletedRecently",
      "library": "aws-sqs",
      "description": "This module defines a type `t` representing a queue that has been deleted and provides functions to construct, parse, and convert the type to and from query parameters and JSON. It works with unit values and is used when handling responses indicating recently deleted queues. Concrete use cases include serializing deletion confirmation data for API responses and deserializing such responses into a minimal structure for further processing.",
      "description_length": 441,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ListDeadLetterSourceQueuesResult",
      "library": "aws-sqs",
      "description": "This module handles the result of listing dead letter source queues, including queue URLs and an optional pagination token. It provides functions to construct, parse, and serialize the result to different formats like JSON and query parameters. Use this module when processing responses from SQS operations that retrieve dead letter source queues.",
      "description_length": 347,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.AWSAccountIdList",
      "library": "aws-sqs",
      "description": "This module handles lists of AWS account IDs represented as strings. It provides functions to convert these lists to and from JSON and query formats, and includes utilities for parsing XML node data into account ID lists. It is used when working with AWS SQS operations that require specifying multiple account IDs, such as setting queue permissions.",
      "description_length": 350,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.InvalidAttributeName",
      "library": "aws-sqs",
      "description": "This module defines a unit type and associated functions for handling invalid attribute names in SQS operations. It provides functions to convert values to query parameters, JSON objects, and back, supporting validation and serialization workflows. It is used when processing SQS attribute errors that require format or value validation.",
      "description_length": 337,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchResultEntry",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for handling individual entries in a batch result from changing message visibility in a queue service. It works with XML, JSON, and query string formats to enable parsing and serialization of message visibility response data. It is used when processing results from batch operations that update message visibility timeouts in queue processing workflows.",
      "description_length": 405,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.BinaryList",
      "library": "aws-sqs",
      "description": "This module handles lists of binary data in AWS SQS operations, providing functions to convert between XML, JSON, and query string formats. It works with `Blob.t` lists and supports serialization and deserialization for API requests and responses. Use it when sending or receiving binary message attributes through SQS.",
      "description_length": 319,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.InvalidMessageContents",
      "library": "aws-sqs",
      "description": "This module defines a unit type and associated functions for handling invalid message contents in SQS operations. It provides functions to convert unit values to AWS query format, JSON, and back from JSON, enabling seamless integration with AWS SDK serialization. Use this module when working with SQS message validation errors that require structured data conversion.",
      "description_length": 368,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.CreateQueueResult",
      "library": "aws-sqs",
      "description": "This module defines a data structure for handling the result of a queue creation operation in a messaging service. It includes functions to construct the result with an optional queue URL, parse it from XML, and convert it to query parameters, JSON, or back from JSON. It is used to retrieve and manage the output of a queue creation request in a service-specific format.",
      "description_length": 371,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.TagQueueRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for tagging an SQS queue, containing the queue URL and a map of tags. It provides functions to construct, parse, and serialize the request to query parameters or JSON format. Use this when configuring metadata for SQS queues programmatically.",
      "description_length": 282,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ActionNameList",
      "library": "aws-sqs",
      "description": "Handles lists of string actions in AWS SQS operations. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Useful for managing batched API actions like message deletion or receipt handling.",
      "description_length": 244,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.StringList",
      "library": "aws-sqs",
      "description": "This module handles lists of string values for use with AWS SQS operations, providing functions to convert these lists into query parameters or JSON representations and to parse them from XML nodes. It works with lists of `Aws.BaseTypes.String.t` values, which are used to represent string attributes in SQS messages. Concrete use cases include serializing message attribute values for sending or receiving messages and parsing string lists from SQS XML responses.",
      "description_length": 464,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.TagMap",
      "library": "aws-sqs",
      "description": "This module handles tag maps for AWS SQS by converting between hashtables of string keys and values and their representations in query parameters or JSON. It provides functions to serialize and deserialize these maps, specifically for interacting with AWS SQS APIs. Use cases include attaching metadata tags to SQS queues and retrieving or modifying those tags in API requests or responses.",
      "description_length": 390,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchRequest",
      "library": "aws-sqs",
      "description": "This module constructs and manipulates batch requests to change message visibility in SQS queues. It handles XML parsing, JSON serialization, and query parameter conversion for requests containing a queue URL and a list of visibility change entries. It is used to update visibility timeouts for multiple messages in a single API call.",
      "description_length": 334,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.DeleteQueueRequest",
      "library": "aws-sqs",
      "description": "This module defines a single data type `t` representing a request to delete an SQS queue, containing a `queue_url` field. It provides functions to construct, parse, and convert the request to various formats like JSON and query parameters. It is used specifically for handling deletion requests in SQS operations, where the URL of the queue to be deleted is provided.",
      "description_length": 367,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageSystemAttributeName",
      "library": "aws-sqs",
      "description": "This module defines a set of standard system attributes for SQS messages, such as `SenderId`, `SentTimestamp`, and `MessageGroupId`, along with conversions to and from strings, JSON, and query formats. It supports operations for parsing XML input into attribute values and serializing attributes for API requests. Use this module when interacting with SQS to specify or process message metadata like deduplication IDs, receive counts, or tracing headers.",
      "description_length": 454,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.BatchRequestTooLong",
      "library": "aws-sqs",
      "description": "This module handles errors related to oversized batch requests in SQS operations. It provides functions to create, parse, and serialize error data, primarily working with unit types to represent the absence of detailed error content. It is used when handling AWS SQS batch request size limits, where operations need to signal or process invalid oversized batches.",
      "description_length": 363,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.InvalidIdFormat",
      "library": "aws-sqs",
      "description": "This module handles validation and conversion for invalid ID formats in AWS SQS operations. It provides functions to parse, convert to query parameters, serialize to JSON, and deserialize from JSON, ensuring data adheres to expected ID structures. Use this when interacting with SQS APIs to validate message IDs or handle malformed identifiers during message processing.",
      "description_length": 370,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.GetQueueUrlResult",
      "library": "aws-sqs",
      "description": "This module defines a single data type representing the result of a GetQueueUrl operation, containing a `queue_url` string. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to retrieve and handle Amazon SQS queue URLs in API responses.",
      "description_length": 327,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchResultEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of message batch result entries, primarily for processing responses from SQS batch message sends. It provides operations to parse XML nodes into entry lists, convert entry lists to query parameters or JSON representations, and construct entry lists from JSON input. Use this module when handling SQS message batch results in API responses or when preparing batch message acknowledgments.",
      "description_length": 413,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.AddPermissionRequest",
      "library": "aws-sqs",
      "description": "This module defines a data structure for specifying permissions to add to an SQS queue, including the queue URL, a label, AWS account IDs, and allowed actions. It provides functions to construct, serialize, and parse these permission requests in various formats such as JSON and query parameters. It is used when configuring access control for SQS queues by granting specific permissions to AWS accounts.",
      "description_length": 404,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchResultEntryList",
      "library": "aws-sqs",
      "description": "This module handles parsing, converting, and manipulating lists of SQS delete message batch result entries. It provides operations to convert the list to AWS query format, JSON, and back, as well as parsing from XML nodes. It is used when processing responses from batch message deletion operations in SQS to extract individual results.",
      "description_length": 336,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchRequestEntry",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for a batch message deletion request entry in Amazon SQS. It works with string identifiers and receipt handles to construct, parse, and serialize message deletion entries. It is used to format individual deletions within a batch request when interacting with SQS queues.",
      "description_length": 322,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageSystemAttributeMap",
      "library": "aws-sqs",
      "description": "This module handles message system attributes in AWS SQS by providing functions to convert attribute maps to query parameters, JSON, and back. It works with a hash table mapping message system attribute names to string values. Use this module when sending or processing SQS messages that include metadata like approximate receive count or visibility timeout.",
      "description_length": 358,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ListQueueTagsRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for listing tags on an SQS queue, containing a single `queue_url` field. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. Use this module when interacting with AWS SQS to retrieve metadata tags associated with a specific queue URL.",
      "description_length": 347,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.UnsupportedOperation",
      "library": "aws-sqs",
      "description": "This module defines a unit type and associated functions for handling unsupported operations in AWS SQS. It includes functions to convert values to AWS query format, JSON, and back, always resulting in a unit value. It is used to manage cases where an operation is not supported by the SQS service, providing consistent handling across serialization and deserialization.",
      "description_length": 370,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ListQueuesRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for listing SQS queues with optional filtering by name prefix, pagination via next token, and limiting results. It supports operations to construct, parse, and serialize requests in JSON, XML, and query string formats. Concrete use cases include retrieving paginated lists of SQS queues filtered by a prefix or constrained by a maximum result count.",
      "description_length": 389,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.BatchResultErrorEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of batch result error entries in AWS SQS responses. It provides functions to parse XML nodes into error entry lists, convert them to query parameters or JSON representations, and construct empty lists. It is used when processing failed message batch operations to extract error details and handle retries or logging.",
      "description_length": 342,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for constructing and serializing batch message send requests to an SQS queue. It works with SQS message entries and a queue URL, enabling the grouping of multiple messages into a single batch request. It is used to efficiently send multiple messages to a queue in one API call, ensuring correct formatting for AWS SQS interactions.",
      "description_length": 383,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SetQueueAttributesRequest",
      "library": "aws-sqs",
      "description": "This module defines a type `t` for representing SQS queue attribute update requests, containing a queue URL and a map of attributes. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Use this module when configuring SQS queue settings like visibility timeout or message retention period.",
      "description_length": 338,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.QueueAttributeName",
      "library": "aws-sqs",
      "description": "This module defines a polymorphic variant type `t` representing AWS SQS queue attribute names, such as `VisibilityTimeout`, `MaximumMessageSize`, and `QueueArn`. It provides bidirectional conversions between string representations and type `t`, along with serialization to and from JSON, query parameters, and XML. Use this module when interacting with SQS APIs to specify or process queue attributes in a type-safe manner.",
      "description_length": 423,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.GetQueueUrlRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for retrieving an SQS queue URL by name and optional owner account ID. It includes functions to construct, parse, and serialize the request in query, JSON, and XML formats. It is used when interacting with AWS SQS to resolve a queue's URL for operations like message sending or queue management.",
      "description_length": 335,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageAttributeValue",
      "library": "aws-sqs",
      "description": "This module defines a data structure for representing message attribute values in AWS SQS, including string, binary, and list types. It provides functions to construct, serialize, and deserialize these values to and from JSON and query formats. Use this module when sending or processing SQS messages with custom attributes that require specific data types or encoding.",
      "description_length": 369,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.TagKeyList",
      "library": "aws-sqs",
      "description": "This module handles lists of string-based tag keys for AWS SQS operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when managing message tags in SQS, such as when retrieving or filtering messages by tag.",
      "description_length": 293,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageList",
      "library": "aws-sqs",
      "description": "This module handles lists of SQS messages, providing functions to convert them to and from XML, JSON, and query parameters. It includes parsing from XML nodes, constructing JSON representations, and transforming message lists into AWS query format. Concrete use cases include processing batch message responses from SQS and preparing message data for API requests.",
      "description_length": 364,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageRequest",
      "library": "aws-sqs",
      "description": "This module defines a data structure for sending messages to an SQS queue, including fields like queue URL, message body, delay, and message attributes. It provides functions to construct, serialize, and parse message requests in various formats such as JSON and query parameters. Use this module when configuring and sending messages to AWS SQS with specific delivery and deduplication options.",
      "description_length": 395,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ReceiptHandleIsInvalid",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for handling invalid receipt handles in AWS SQS operations. It provides functions to create, parse, and convert receipt handle invalidation data to query parameters or JSON format. It is used specifically when interacting with SQS APIs to manage message receipt validation errors.",
      "description_length": 332,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.GetQueueAttributesResult",
      "library": "aws-sqs",
      "description": "This module handles the result of retrieving queue attributes from Amazon SQS. It provides functions to construct, parse, and serialize the result, which includes an optional map of queue attributes. Use this module when processing responses from SQS queue attribute retrieval operations, particularly to extract and manipulate attribute data in different formats.",
      "description_length": 364,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.RemovePermissionRequest",
      "library": "aws-sqs",
      "description": "This module defines a type `t` representing a request to remove a permission from an SQS queue, containing the queue URL and the permission label. It provides functions to construct, parse, and convert the request to various formats like JSON and query parameters. Use this module when interacting with AWS SQS to revoke specific permissions programmatically.",
      "description_length": 359,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ReceiveMessageRequest",
      "library": "aws-sqs",
      "description": "This module defines a data structure for configuring SQS message reception parameters, including queue URL, attribute filters, and message visibility settings. It provides functions to construct, serialize, and parse these configurations to and from JSON and XML formats. Concrete use cases include setting up polling requests to retrieve messages from an SQS queue with specific attributes and timeouts.",
      "description_length": 404,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.QueueNameExists",
      "library": "aws-sqs",
      "description": "This module defines a type `t` representing the existence of a queue name in a specific context, with operations to construct, parse, and serialize the value. It works with unit type values and supports conversion to query parameters and JSON format. Concrete use cases include handling responses from queue existence checks in AWS SQS operations.",
      "description_length": 347,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.QueueUrlList",
      "library": "aws-sqs",
      "description": "This module handles lists of Amazon SQS queue URLs, providing functions to convert them to and from JSON and query formats. It includes operations for parsing XML node lists into queue URL lists and constructing empty instances. Use this when managing multiple SQS queues, such as retrieving or sending messages across a collection of queues.",
      "description_length": 342,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for a delete message request in an SQS service. It works with string-typed queue URLs and receipt handles, providing operations to construct, parse, and serialize requests to JSON or query parameters. It is used to prepare and process SQS delete message operations in a format compatible with AWS APIs.",
      "description_length": 354,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageNotInflight",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for handling the `MessageNotInflight` state in AWS SQS operations. It provides functions to construct, parse, and convert the state to query parameters, JSON, and back, primarily used when managing message visibility in SQS queues. It is used in scenarios where a message is not currently being processed and is ready to be received again.",
      "description_length": 391,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageSystemAttributeValue",
      "library": "aws-sqs",
      "description": "This module defines a type `t` representing message system attribute values in AWS SQS, including string, binary, and list variants along with a data type identifier. It provides functions to construct, parse, and serialize these attributes to and from XML, JSON, and query formats. Use this module when handling SQS message system attributes like `SenderId`, `SentTimestamp`, or `ApproximateReceiveCount` in API requests and responses.",
      "description_length": 436,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.InvalidBatchEntryId",
      "library": "aws-sqs",
      "description": "This module handles invalid batch entry IDs in SQS operations. It provides functions to create, parse, and convert error data into query parameters or JSON format. Use it when processing failed message batch operations to identify problematic entries.",
      "description_length": 251,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchResult",
      "library": "aws-sqs",
      "description": "This module handles batch results for changing message visibility in SQS. It provides operations to construct, parse, and serialize results containing successful and failed entries. It works with XML, JSON, and AWS query formats for integration with AWS SDK workflows.",
      "description_length": 268,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and operations for constructing and serializing batch delete message requests. It works with a structured type containing a queue URL and a list of message entries. Use this module to prepare batch deletion payloads for interacting with SQS queues, converting between JSON, query parameters, or XML formats as needed.",
      "description_length": 344,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchRequestEntry",
      "library": "aws-sqs",
      "description": "This module defines a record type for batch request entries to change message visibility in SQS, including operations to construct, parse, and serialize these entries. It works with XML nodes, JSON values, and AWS query format to facilitate message visibility timeout updates. Concrete use cases include modifying message visibility in bulk for SQS queues during processing workflows.",
      "description_length": 384,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.QueueAttributeMap",
      "library": "aws-sqs",
      "description": "This module handles the conversion and manipulation of SQS queue attributes stored in a hash table. It provides functions to serialize attribute maps to AWS query format or JSON, and to deserialize them from JSON. Use this when interacting with SQS APIs to set, retrieve, or process queue metadata such as visibility timeout or message retention period.",
      "description_length": 353,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.MessageBodyAttributeMap",
      "library": "aws-sqs",
      "description": "This module handles message body attributes in AWS SQS by mapping string keys to message attribute values. It provides operations to convert attribute maps to query parameters or JSON, and to construct and parse them from JSON. Use it when sending or receiving messages with custom attributes, such as tracking metadata or message-specific settings.",
      "description_length": 349,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.AttributeNameList",
      "library": "aws-sqs",
      "description": "This module handles lists of SQS queue attribute names, providing conversions to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing empty lists. Concrete use cases include serializing attribute name lists for API requests and deserializing responses from AWS SQS.",
      "description_length": 306,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityBatchRequestEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of message visibility change entries for batch operations in SQS. It provides functions to convert entry lists to and from JSON and query formats, and to parse them from XML. It is used when adjusting visibility timeouts for multiple messages in a queue.",
      "description_length": 280,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ChangeMessageVisibilityRequest",
      "library": "aws-sqs",
      "description": "This module defines a record type and operations for modifying the visibility timeout of a message in an SQS queue. It includes functions to construct, serialize, and parse requests containing the queue URL, message receipt handle, and new visibility timeout in seconds. It is used to delay reprocessing of SQS messages by adjusting their visibility window.",
      "description_length": 357,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchResultEntry",
      "library": "aws-sqs",
      "description": "This module defines a data structure representing the result of sending a batch of messages to an SQS queue, including identifiers and checksums for each message. It provides functions to construct, parse, and serialize these result entries to and from XML, JSON, and query formats. Concrete use cases include processing responses from batch message sends, validating message integrity, and integrating with SQS APIs that require structured message results.",
      "description_length": 457,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchRequestEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of message batch request entries for Amazon SQS, providing functions to convert, parse, and serialize them into query parameters or JSON. It works with XML nodes, JSON values, and SQS-specific message entry types. Use this module when sending batches of messages to an SQS queue, especially when constructing or interpreting API requests and responses.",
      "description_length": 378,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.UntagQueueRequest",
      "library": "aws-sqs",
      "description": "This module defines a request structure for removing tags from an SQS queue, containing the queue URL and a list of tag keys. It provides functions to construct, parse, and serialize the request in various formats including JSON and query parameters. It is used specifically when interacting with AWS SQS to manage queue metadata by untagging with known tag keys.",
      "description_length": 363,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.Message",
      "library": "aws-sqs",
      "description": "This module defines a data structure for representing messages received from or sent to an SQS queue, including message metadata, body, and attributes. It provides functions to construct, parse, and serialize messages to and from XML, JSON, and query formats. Concrete use cases include handling message receipts, verifying message integrity via MD5 hashes, and managing message attributes during queue operations.",
      "description_length": 414,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchResult",
      "library": "aws-sqs",
      "description": "This module handles the result of a batch message deletion operation in Amazon SQS. It defines a type `t` that contains two lists: one for successfully deleted messages and one for failed deletions. The module provides functions to construct, parse, and convert the result to various formats like JSON and query parameters, specifically for processing SQS batch delete responses.",
      "description_length": 379,
      "index": 69,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_sqs.Types.PurgeQueueInProgress",
      "library": "aws-sqs",
      "description": "This module defines a type and associated functions for handling the in-progress state of a queue purge operation. It works with unit values to represent the absence of data, using functions like `parse`, `to_query`, `to_json`, and `of_json` to convert between different representations. It is used when interacting with AWS SQS APIs to manage queue state transitions during a purge operation.",
      "description_length": 393,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.BatchEntryIdsNotDistinct",
      "library": "aws-sqs",
      "description": "This module handles the unique case where batch entry IDs in an Amazon SQS operation are not distinct. It provides operations to create, parse, and serialize unit values representing invalid batch entries, primarily used in error handling during batch message processing. The functions support converting unit values to query parameters and JSON for API interactions, ensuring proper error signaling when duplicate entry IDs are detected.",
      "description_length": 438,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.MessageBodySystemAttributeMap",
      "library": "aws-sqs",
      "description": "This module handles message system attributes for Amazon SQS operations, specifically mapping attribute names to their corresponding values using a hash table. It provides functions to convert these attributes to AWS query format and JSON, as well as parsing them from JSON. It is used when sending messages with system attributes, ensuring correct serialization and deserialization for API interactions.",
      "description_length": 404,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.MessageAttributeNameList",
      "library": "aws-sqs",
      "description": "This module handles lists of message attribute names for Amazon SQS operations. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when working with SQS message attributes in API requests and responses.",
      "description_length": 276,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchRequestEntryList",
      "library": "aws-sqs",
      "description": "This module handles lists of message deletion entries for batch operations in a queue service. It provides functions to convert entry lists to query parameters or JSON, parse them from XML, and construct empty entry lists. It is used when deleting multiple messages from a queue in a single request, mapping entries to the appropriate wire format.",
      "description_length": 347,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.DeleteMessageBatchResultEntry",
      "library": "aws-sqs",
      "description": "This module defines a type and associated functions for handling individual entries in a batch message deletion result from Amazon SQS. It works with XML, JSON, and query parameter formats to serialize and deserialize the entry's message ID. Concrete use cases include processing responses from batch message deletion operations and constructing structured output for API interactions.",
      "description_length": 385,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageResult",
      "library": "aws-sqs",
      "description": "This module defines a data structure for handling the result of sending a message to Amazon SQS, including message identifiers and checksums. It provides functions to construct, parse, and convert the result to various formats like JSON and query parameters. Use this module when interacting with SQS to process message send responses and extract metadata such as message IDs and MD5 checksums.",
      "description_length": 394,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.PurgeQueueRequest",
      "library": "aws-sqs",
      "description": "This module defines a type and conversion functions for a request to purge an SQS queue. It works with XML, JSON, and query string representations of a queue URL, providing operations to construct, parse, and serialize the request. Concrete use cases include handling SQS queue cleanup operations in AWS integrations by converting between different data formats for HTTP requests.",
      "description_length": 380,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.ReceiveMessageResult",
      "library": "aws-sqs",
      "description": "This module handles the result of receiving messages from an SQS queue. It provides functions to create, parse, and serialize message results, working with `MessageList.t` to represent received messages. Use it when processing responses from SQS after retrieving messages, especially for integrating with JSON or XML-based AWS APIs.",
      "description_length": 332,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.SendMessageBatchResult",
      "library": "aws-sqs",
      "description": "This module handles the result of a batch message send operation in Amazon SQS, providing functions to construct, parse, and convert the result to various formats like JSON and query parameters. It works with two primary data structures: a list of successful message entries and a list of error entries. Concrete use cases include processing responses from `SendMessageBatch` API calls to identify which messages were sent successfully and which failed, enabling targeted retries or logging.",
      "description_length": 491,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types.OverLimit",
      "library": "aws-sqs",
      "description": "This module handles error responses for AWS SQS operations that exceed service limits. It defines a unit type to represent the over-limit error, with functions to parse, convert to query parameters, serialize to JSON, and deserialize from JSON. It is used to manage and propagate over-limit error conditions in SQS API interactions.",
      "description_length": 332,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.SendMessageBatch",
      "library": "aws-sqs",
      "description": "This module handles sending multiple messages to an Amazon SQS queue in a single batch request. It works with `SendMessageBatchRequest` and `SendMessageBatchResult` types, encoding requests into HTTP format and decoding responses or errors. Concrete use cases include efficiently sending groups of messages with deduplication and handling batch-level visibility timeouts or delays.",
      "description_length": 381,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.ListQueues",
      "library": "aws-sqs",
      "description": "This module handles listing SQS queues by converting input requests to HTTP format and parsing responses. It works with SQS-specific input and output types, including queue URLs and error responses. Use it to send ListQueues API calls to AWS SQS and decode the results or handle errors based on HTTP status codes.",
      "description_length": 313,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.DeleteQueue",
      "library": "aws-sqs",
      "description": "This module handles the deletion of an Amazon SQS queue by defining the request structure, error types, and HTTP conversion logic. It works with the `DeleteQueueRequest` type for input and returns no output on success, using internal SQS error types for failure cases. Concrete use cases include sending a properly signed HTTP request to delete a queue and parsing HTTP responses or errors from the SQS service.",
      "description_length": 411,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.SendMessage",
      "library": "aws-sqs",
      "description": "This module sends messages to an Amazon SQS queue by converting a message request into an HTTP query request and handling the response. It works with SQS message requests and responses, including error types specific to SQS operations. A concrete use case is sending a message to a queue with a specified visibility timeout and message attributes.",
      "description_length": 347,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.Types",
      "library": "aws-sqs",
      "description": "This module provides structured data handling for SQS interactions, focusing on message attribute management, batch operations (send/delete/visibility changes), and queue metadata manipulation. It operates on attribute maps, string/binary lists, queue URLs, message receipt handles, and batch request/response entries. Specific examples include managing message visibility timeouts, validating queue existence, handling batched message sends or deletions, and processing SQS API errors during queue operations. Submodules define types and operations for batch error entries, queue creation and deletion, message sends and receives, attribute handling, tag management, and visibility changes, enabling structured construction, parsing, and serialization of SQS requests and responses in formats like JSON, XML, and AWS query strings.",
      "description_length": 832,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.ReceiveMessage",
      "library": "aws-sqs",
      "description": "This module handles receiving messages from an SQS queue by defining input and output types for the `ReceiveMessage` operation. It provides functions to convert between HTTP requests and responses and the corresponding SQS message types, ensuring proper encoding and decoding. It is used to interact directly with SQS endpoints, handling message retrieval and error parsing specific to that operation.",
      "description_length": 401,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.ChangeMessageVisibilityBatch",
      "library": "aws-sqs",
      "description": "This module handles batch updates of message visibility timeouts in Amazon SQS queues by encoding requests to change visibility for multiple messages and decoding the results. It works with batch request and result types that include message receipts and new visibility timeouts. Use this module to efficiently adjust visibility for multiple messages received from a queue, such as when extending processing time or re-queueing failed messages.",
      "description_length": 444,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.RemovePermission",
      "library": "aws-sqs",
      "description": "This module handles removing permissions from Amazon SQS queues by converting native inputs into properly signed HTTP requests and decoding responses. It works with SQS queue URLs and AWS authentication data to construct API calls that revoke specific permissions. Use this module to programmatically manage access policies for SQS queues in AWS environments.",
      "description_length": 359,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.DeleteMessage",
      "library": "aws-sqs",
      "description": "This module handles the deletion of messages from an Amazon SQS queue by converting native requests into properly signed HTTP queries and processing responses. It works with `DeleteMessageRequest` input to construct HTTP requests and parses responses into unit outputs or specific SQS errors. Concrete use cases include removing processed messages after successful handling or managing message visibility timeouts programmatically.",
      "description_length": 431,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.TagQueue",
      "library": "aws-sqs",
      "description": "This module handles tagging operations for SQS queues by encoding requests into HTTP queries and decoding responses. It works with SQS queue ARNs and tag key-value pairs through the `TagQueueRequest` type, producing unit on success or errors on failure. Concrete use cases include adding or updating tags on an SQS queue for cost allocation or resource management in AWS environments.",
      "description_length": 384,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.DeleteMessageBatch",
      "library": "aws-sqs",
      "description": "This module handles batch deletion of messages from an Amazon SQS queue by converting native requests into properly signed HTTP queries and parsing responses. It works with `DeleteMessageBatchRequest` and `DeleteMessageBatchResult` types to send and receive batch delete operations, specifically interacting with SQS endpoints. It is used to efficiently remove multiple messages from a queue in a single request, ensuring correct encoding and error handling.",
      "description_length": 458,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.PurgeQueue",
      "library": "aws-sqs",
      "description": "This module handles purging messages from an Amazon SQS queue by defining the request structure, error responses, and HTTP serialization. It works directly with SQS queue URLs and internal error types to ensure correct API interaction. Concrete use cases include clearing all messages from a queue and handling AWS-specific errors like invalid queue URLs or access permissions during purge operations.",
      "description_length": 401,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.GetQueueUrl",
      "library": "aws-sqs",
      "description": "This module handles retrieving a queue URL from Amazon SQS by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works directly with SQS queue names and AWS error responses, ensuring proper encoding into query parameters and decoding from XML. It is used when interacting with SQS queues programmatically, particularly for constructing and interpreting GetQueueUrl API calls.",
      "description_length": 446,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.Errors_internal",
      "library": "aws-sqs",
      "description": "This module defines a list of error types specific to SQS batch operations and message handling, such as invalid entries, queue state issues, and authentication failures. It provides functions to convert errors to HTTP status codes, strings, and back from strings. These operations are used to handle and interpret AWS SQS API error responses in client code.",
      "description_length": 358,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.AddPermission",
      "library": "aws-sqs",
      "description": "This module handles adding permissions to Amazon SQS queues by encoding native input types into properly formatted HTTP requests and decoding responses into success or error states. It works directly with `AddPermissionRequest` and `error_response` types, translating them to and from HTTP messages. Concrete use cases include granting specific AWS accounts or services access to perform actions on SQS queues, such as allowing S3 to send messages to a queue.",
      "description_length": 459,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.ListDeadLetterSourceQueues",
      "library": "aws-sqs",
      "description": "This module handles listing dead letter source queues in Amazon SQS by converting input requests into properly signed HTTP queries and parsing responses. It works with SQS-specific types for input, output, and errors, ensuring correct encoding and decoding of AWS API calls. Use this module to retrieve sources of messages that failed processing in a dead letter queue, particularly when managing queue error handling and diagnostics in SQS.",
      "description_length": 441,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.SetQueueAttributes",
      "library": "aws-sqs",
      "description": "This module configures queue properties in Amazon SQS by converting native requests into HTTP calls and handling responses. It works with `SetQueueAttributesRequest` input to apply settings like visibility timeout or message retention to a specific queue. Use it to programmatically update queue behavior within an AWS environment.",
      "description_length": 331,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.ChangeMessageVisibility",
      "library": "aws-sqs",
      "description": "This module handles changing the visibility timeout of a message in an SQS queue. It provides functions to convert between native OCaml types and HTTP requests/responses, specifically for the `ChangeMessageVisibility` operation. It works directly with SQS message identifiers and visibility timeout values, enabling precise control over message reprocessing delays in distributed systems.",
      "description_length": 388,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.CreateQueue",
      "library": "aws-sqs",
      "description": "This module handles the creation of SQS queues by defining the request and response types for the AWS SQS CreateQueue API call. It provides functions to convert native request types to HTTP requests and parse HTTP responses into results or errors specific to queue creation. It is used to send CreateQueue requests to AWS SQS and process the resulting responses or errors.",
      "description_length": 372,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.ListQueueTags",
      "library": "aws-sqs",
      "description": "This module handles listing tags for an SQS queue by converting requests to HTTP format and parsing responses. It works with SQS queue ARNs, query-encoded HTTP requests, and XML error responses. Use it to send ListQueueTags API calls to AWS SQS and decode the results or handle errors based on HTTP status codes.",
      "description_length": 312,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs.GetQueueAttributes",
      "library": "aws-sqs",
      "description": "This module handles retrieving attributes from an Amazon SQS queue by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with SQS queue attribute requests and responses, including error handling specific to the SQS service. Concrete use cases include querying queue metadata such as visibility timeout, message retention period, or current message count from an SQS queue endpoint.",
      "description_length": 491,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sqs.UntagQueue",
      "library": "aws-sqs",
      "description": "This module handles the removal of tags from an Amazon SQS queue by defining the request structure, error responses, and HTTP conversion logic. It works with the `UntagQueueRequest` type to specify which queue and tags to remove, and communicates with the SQS service via HTTP. Concrete use cases include managing queue metadata and cleaning up unused tags in SQS-based applications.",
      "description_length": 383,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sqs",
      "library": "aws-sqs",
      "description": "This module provides structured operations for interacting with Amazon SQS, enabling message sending, receiving, deletion, and visibility management, along with queue configuration, tagging, and metadata retrieval. It centers around core data types like queue URLs, message receipts, attribute maps, and batch request/response structures, supporting operations such as sending and receiving messages, changing visibility timeouts, listing and purging queues, and managing permissions and tags. Specific examples include sending a batch of messages with deduplication, adjusting visibility timeouts for individual or multiple messages, retrieving queue attributes like message retention periods, and programmatically managing queue access policies and tags. The module handles encoding and decoding of HTTP requests and responses, ensuring correct interaction with SQS endpoints and structured error handling for operations like batch sends, deletions, and queue creation.",
      "description_length": 971,
      "index": 103,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 104,
    "meaningful_modules": 104,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 971,
    "min_description_length": 244,
    "avg_description_length": 381.21153846153845,
    "embedding_file_size_mb": 0.3781557083129883
  }
}