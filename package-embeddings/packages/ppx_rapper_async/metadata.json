{
  "package": "ppx_rapper_async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:02.132985",
  "modules": [
    {
      "module_path": "Rapper_helper.CONNECTION",
      "library": "ppx_rapper_async",
      "description": "This module provides transaction management, query execution, and resource handling for database interactions using the Caqti library. It operates on SQL queries and result sets, supporting operations like atomic transaction blocks, streaming data insertion, and efficient result aggregation with reversed lists. Key use cases include wrapping operations in transactions, bulk-loading data streams into tables, and managing connection validity with timeout-aware error handling.",
      "description_length": 478,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper_helper.CONNECTION-Response",
      "library": "ppx_rapper_async",
      "description": "This module handles result inspection and retrieval from database responses. It provides operations to get row counts, extract single or optional rows, fold over results, and convert responses into streams. These functions are used to process query outcomes from database interactions, particularly with Caqti for database access in OCaml applications.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper_helper",
      "library": "ppx_rapper_async",
      "description": "This module combines deferred value manipulation with robust database interaction capabilities. It provides core functions for mapping and chaining asynchronous operations on `Async.Deferred.t` and `Stdlib.result`, while its submodules handle transaction management, query execution, and result processing with Caqti. Use it to safely transform deferred computations, wrap database operations in transactions, stream large datasets, or extract typed rows from query results. Key operations include deferred mapping, transaction control, row counting, and result folding with support for error handling and connection management.",
      "description_length": 628,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 628,
    "min_description_length": 352,
    "avg_description_length": 486.0,
    "embedding_file_size_mb": 0.011318206787109375
  }
}