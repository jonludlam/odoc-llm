{
  "package": "calculon-web",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-06-18T16:33:13.965204",
  "modules": [
    {
      "module_path": "Calculon_web.Plugin_web.Giphy",
      "description": "Provides functions to construct Giphy API queries, perform searches, and handle API keys and limits. Operates with strings, URIs, and Lwt-promises for asynchronous results. Used to integrate Giphy image search into command-line tools with specific rate limits and authentication.",
      "description_length": 279,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og.Parser",
      "description": "Parses a string input into a list of metadata objects representing parsed elements. It processes structured text formats, extracting key-value pairs and hierarchical data. Used to convert configuration files or log entries into accessible data structures for further processing.",
      "description_length": 278,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Movie_schema.Maybe",
      "description": "Wraps a string into an option type, providing a safe way to handle potential absence of value. Unwraps an option type, extracting the string with a guaranteed non-optional result. Used to manage user input validation where missing data must be explicitly handled.",
      "description_length": 263,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema.Year",
      "description": "Converts between string representations of years and their optional integer form, handling invalid inputs gracefully. Operates on integer options to represent valid or missing year values. Used to parse user input for historical data and format year values in output reports.",
      "description_length": 275,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Giphy_j",
      "description": "This module handles JSON serialization and deserialization for Giphy API data, utilizing Yojson for parsing and Buffer for output, with configurable buffer sizes. It works with structured data types like image metadata, collections, and search entries, abstracting API response formats. Specific use cases include processing GIF data, managing search results, and preparing API requests.",
      "description_length": 387,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Giphy_t",
      "description": "Provides functions to parse and extract specific data from Giphy API responses, including image URLs, dimensions, and metadata. Works with custom types like image, images, and search_entry, as well as Yojson's JSON representation. Used to process search results and retrieve thumbnail or original image URLs for display in applications.",
      "description_length": 336,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_j",
      "description": "This module offers JSON encoding and decoding functionalities for structured movie-related data, including operations to serialize to buffers, parse from strings, and convert to readable formats. It works with specific types like `year`, `search_entry`, and `query_entry` to manage movie metadata, search queries, and result sets. Use cases include processing user-generated movie searches and validating structured data inputs in applications.",
      "description_length": 444,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema",
      "description": "Encapsulates string and year data with option types to safely manage missing or invalid values. Provides functions to wrap and unwrap strings, and to convert between string years and optional integers. Enables robust handling of user input and output formatting in data processing workflows. For example, it can validate a user-entered movie title or parse a year from a text field into a structured format.",
      "description_length": 407,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_t",
      "description": "Provides functions to construct and manipulate movie search entries, including parsing query parameters and generating search results from database queries. Works with custom types such as year, maybe, search_entry, search_result, and query_entry to handle movie data and user input. Used to process user-generated movie search requests and map them to structured database queries.",
      "description_length": 381,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og",
      "description": "Extracts and organizes metadata from structured text, returning a list of objects containing site name, title, type, URL, image, and optional media-specific attributes. Key data types include metadata records with fields for basic and extended properties, and operations include parsing and field extraction. Examples include retrieving the title of a webpage, identifying the content type, or fetching a canonical URL from a malformed input. The output enables downstream processing of metadata for display, indexing, or validation.",
      "description_length": 533,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_movie",
      "description": "The module facilitates API-driven interactions for movie/series data, encompassing URI construction, JSON parsing, and output formatting, while working with queries, search results, and structured entries. It supports use cases like fetching real-time data, transforming raw API responses, and integrating with command-line interfaces for user-friendly output. The abstract plugin structure and query type enable modular extensions and standardized data handling across systems.",
      "description_length": 478,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Plugin_web",
      "description": "Handles Giphy API interactions through query construction, search execution, and authentication management. Supports string manipulation, URI generation, and asynchronous operations via Lwt. Enables integration of image search into command-line tools with controlled rate limits. Example: Fetching a limited number of GIFs using an API key and processing results asynchronously.",
      "description_length": 378,
      "index": 11,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "calculon-web",
      "description": "Provides functions for parsing IRC messages, managing plugin hooks, and handling connection lifecycle events. Works with data types such as IRC messages, plugin configurations, and connection states. Used to build bots that respond to channel events, execute command-based actions, and maintain persistent IRC sessions.",
      "description_length": 319,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web",
      "description": "Handles JSON serialization, deserialization, and API interactions for both Giphy and movie-related data, supporting structured types like image, search_entry, and query_entry. It enables parsing of URLs, metadata extraction, and safe handling of optional values, with functions for constructing queries, processing search results, and formatting outputs. Operations include extracting image dimensions, validating user input, and managing asynchronous Giphy searches. Examples include generating thumbnail URLs, parsing movie search queries, and organizing metadata for display or indexing.",
      "description_length": 590,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 14,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9333333333333333
  },
  "statistics": {
    "max_description_length": 590,
    "min_description_length": 263,
    "avg_description_length": 382.0,
    "embedding_file_size_mb": 0.051306724548339844
  }
}