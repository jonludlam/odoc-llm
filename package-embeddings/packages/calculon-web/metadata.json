{
  "package": "calculon-web",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 13,
  "creation_timestamp": "2025-08-14T23:14:59.673162",
  "modules": [
    {
      "module_path": "Calculon_web.Movie_schema.Year",
      "library": "calculon-web",
      "description": "This module defines an `int option` type for representing optional year values, along with functions to convert between string and integer representations. The `wrap` function parses a string into an optional integer, while `unwrap` converts an optional integer back into a string. It is used to handle year fields in movie data where the year may be missing or malformed.",
      "description_length": 372,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_web.Giphy",
      "library": "calculon-web",
      "description": "This module integrates with the Giphy API to search for GIFs based on a text query, using a configured API key and result limit. It constructs HTTP requests via `Uri.t` and performs asynchronous searches returning optional string URLs. The module is used to handle GIF search commands in a chatbot context, where a user input triggers a search and potentially a GIF response.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og.Parser",
      "library": "calculon-web",
      "description": "Parses HTML strings into a list of Open Graph metadata records, extracting fields like title, type, URL, and image. Handles optional properties for media types such as music or video, including tags and duration. Useful for scraping and validating Open Graph tags from web pages.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema.Maybe",
      "library": "calculon-web",
      "description": "This module defines a type `t` as an optional string and includes functions to wrap a string into an optional type and unwrap it back. It handles cases where a string value may be absent, ensuring safe conversion between `string` and `string option` types. Useful for parsing or handling optional fields in data structures like JSON or database records.",
      "description_length": 353,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_movie",
      "library": "calculon-web",
      "description": "This module offers asynchronous HTTP-based querying for movie and TV series data, supporting search, detail retrieval, and structured result formatting via JSON parsing. It operates on movie and TV series entities, leveraging Lwt for non-blocking I/O and exposing command-driven interactions for series management. Use cases include integrating media data lookups into web interfaces and building TV series handling workflows with customizable commands.",
      "description_length": 453,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema",
      "library": "calculon-web",
      "description": "This module defines data structures and conversion functions for handling movie-related data, including optional strings and optional years. It provides operations to safely wrap and unwrap values, ensuring correct parsing and representation of fields like movie titles and release years. Concrete use cases include processing JSON movie data where fields may be missing or invalid, such as parsing an optional release year from a string to an integer.",
      "description_length": 452,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_t",
      "library": "calculon-web",
      "description": "This module defines data structures for representing movies, including types for optional fields and years, and provides structured formats for search and query operations. It supports parsing and handling movie data with optional values, such as titles and plots, and includes types for search results and detailed movie entries with ratings and years. Concrete use cases include processing movie database queries and handling search responses with structured data.",
      "description_length": 466,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Giphy_t",
      "library": "calculon-web",
      "description": "This module defines data structures for parsing and handling Giphy API responses, including image URLs, search entries, and metadata. It works with JSON data using the Yojson.Safe.t type, enabling extraction and manipulation of GIF information. Concrete use cases include processing Giphy search results to display GIFs in a web application or extract embeddable URLs.",
      "description_length": 368,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_web",
      "library": "calculon-web",
      "description": "This module provides functions for interacting with web-based content, including fetching web page bodies, extracting titles, searching for YouTube videos, and retrieving GIFs via the Giphy API. It works with URIs, strings, and Lwt asynchronous result types, supporting operations like HTTP requests, text parsing, and command registration. Concrete use cases include responding to chat commands with video links, GIFs, or emoji lookups in a bot context.",
      "description_length": 454,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og",
      "library": "calculon-web",
      "description": "This module provides structured representation and validation of Open Graph metadata fields, including title, content type, URLs, and media-specific extensions like video duration or music tags. It operates on types such as `og_metadata`, `og_video_metadata`, and locale identifiers, supporting both mandatory protocol requirements and optional data. These tools are used to parse HTML strings into validated metadata objects and construct Open Graph tags, particularly for media-rich content or pages with inconsistent formatting.",
      "description_length": 531,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Giphy_j",
      "library": "calculon-web",
      "description": "This module converts Giphy API data structures like `image`, `images`, `search_entry`, and `search_result` between OCaml representations and JSON format using Yojson, handling input as strings and output via buffers. It specializes in bidirectional translation of `search_result` payloads, enabling efficient parsing of API responses and construction of JSON requests. Typical use cases include integrating Giphy search results into OCaml applications and formatting client-side data for web service interactions.",
      "description_length": 513,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Movie_j",
      "library": "calculon-web",
      "description": "This module provides JSON serialization and deserialization routines for movie-related data types, converting between OCaml structures like `search_entry`, `query_entry`, and `search_result` and their JSON string representations. It employs both direct string manipulation and low-level buffer/lexer mechanisms to handle optional fields, numeric values, and nested object hierarchies. These operations facilitate data exchange with web APIs, enabling use cases like querying movie databases and processing search responses.",
      "description_length": 523,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web",
      "library": "calculon-web",
      "description": "This module implements web service integrations for media content retrieval and processing, handling structured data exchange between OCaml and external APIs. It supports operations such as JSON serialization/deserialization for movie and GIF data, parsing Open Graph metadata, and executing HTTP-based queries for movie details and YouTube/Giphy content. Concrete use cases include building chat bot responses with GIFs, processing movie search results with optional metadata, and extracting embeddable media metadata from URLs.",
      "description_length": 529,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 279,
    "avg_description_length": 436.0,
    "embedding_file_size_mb": 0.18878650665283203
  }
}