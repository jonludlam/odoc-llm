{
  "package": "calculon-web",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-07-15T23:07:45.470547",
  "modules": [
    {
      "module_path": "Calculon_web.Movie_schema.Maybe",
      "library": "calculon-web",
      "description": "This module defines a type `t` as an optional string and includes functions to wrap a string into an optional type and unwrap it back. It handles cases where a string value may be absent, providing direct conversion between `string` and `string option`. Useful for parsing or handling optional fields in movie data representations.",
      "description_length": 331,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og.Parser",
      "library": "calculon-web",
      "description": "Parses HTML strings into a list of Open Graph metadata records, extracting fields like title, type, URL, and image. Handles optional properties for media types such as music or video, including tags and duration. Useful for scraping and validating Open Graph data from web pages.",
      "description_length": 279,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_web.Giphy",
      "library": "calculon-web",
      "description": "This module integrates with the Giphy API to search for GIFs based on a query string. It provides a command that sends a search request and returns a randomly selected GIF URL from the results. The module uses Lwt for asynchronous HTTP requests and Uri to construct API query URLs.",
      "description_length": 281,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema.Year",
      "library": "calculon-web",
      "description": "This module defines a type `t` as an optional integer representing a year and provides functions to convert between string and integer representations. The `wrap` function parses a string into an optional year, while `unwrap` formats an optional year back into a string. It is used to handle year values in movie data, such as parsing and displaying release years.",
      "description_length": 364,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Plugin_movie",
      "library": "calculon-web",
      "description": "This module enables asynchronous movie and TV series data retrieval through HTTP APIs, handling URI construction, JSON response parsing, and result formatting for integration into chatbot workflows. It works with web-specific types like `Uri.t` and `Lwt.t` to manage non-blocking I/O, while defining command structures to register media-related functionality in messaging systems. Use cases include responding to entertainment queries, parsing series details, and dynamically extending chatbot capabilities with movie database interactions.",
      "description_length": 540,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Og",
      "library": "calculon-web",
      "description": "This module processes metadata according to the Open Graph protocol, capturing essential information like title, type, URL, and preview image, while supporting extended attributes for media such as video or music. It includes types like `og_metadata` and `og_video_metadata` to structure data, allowing construction, parsing, and validation of metadata, even from malformed sources. The parse submodule extracts this data from HTML strings, returning a list of structured metadata records with support for optional properties like tags and duration. Together, they enable robust handling of Open Graph metadata for generating rich web previews and embedding multimedia content.",
      "description_length": 677,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Giphy_j",
      "library": "calculon-web",
      "description": "The module provides JSON conversion utilities for working with Giphy API responses, supporting bidirectional transformations between OCaml representations (`image`, `images`, `search_entry`, `search_result`) and JSON strings. It handles both buffer-based and streaming input scenarios, enabling efficient parsing of API payloads and construction of JSON requests for Giphy's search endpoints. These operations are particularly suited for web applications consuming Giphy's API where structured data exchange and incremental processing are required.",
      "description_length": 548,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Movie_t",
      "library": "calculon-web",
      "description": "This module defines data structures for representing movie search results and detailed movie queries. It includes types for optional string and year values, entries for search and query results with fields like title, ID, year, rating, and plot. These structures are used to parse and handle movie data from a web API, specifically for operations like searching movies and retrieving detailed information.",
      "description_length": 405,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_j",
      "library": "calculon-web",
      "description": "This module provides JSON serialization and deserialization capabilities for movie-related data types such as `search_entry`, `search_result`, and `query_entry`, using `Yojson.Safe` for structured conversion. It operates on JSON values through buffer-based parsing and string manipulation, enabling efficient handling of optional fields and nested structures. These utilities are particularly useful for web APIs that require translating between OCaml data models and JSON payloads during movie database queries or result processing.",
      "description_length": 533,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Giphy_t",
      "library": "calculon-web",
      "description": "This module defines data structures for parsing and handling Giphy API responses, including image URLs, search entries, and metadata. It works with JSON data using `Yojson.Safe.t` to represent and manipulate Giphy search results. Concrete use cases include extracting original and downsized image URLs from Giphy search results and processing pagination and metadata for display or further API requests.",
      "description_length": 403,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web.Plugin_web",
      "library": "calculon-web",
      "description": "This module handles web-based command interactions, enabling operations like fetching web content, searching YouTube, and resolving emoji or GIF URLs through integrated APIs. It processes URIs, strings, and chat commands to perform tasks such as extracting page titles, retrieving YouTube video results, or responding with animated GIFs. The Giphy-integrated submodule supports asynchronous GIF searches using Lwt and Uri, returning a random GIF URL from query results. Example uses include fetching webpage metadata, searching for videos by keyword, and replying to chat commands with GIFs or emoji.",
      "description_length": 600,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Calculon_web.Movie_schema",
      "library": "calculon-web",
      "description": "This module handles optional string and year values for movie data, providing direct conversions between raw and wrapped forms. It defines types for optional strings and years, with operations to parse and format these values. Functions allow wrapping strings into optional types and converting year strings to integers. Examples include parsing an optional movie title or release year from a data source and formatting them for display.",
      "description_length": 437,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Calculon_web",
      "library": "calculon-web",
      "description": "This module integrates web APIs for movies, TV series, and GIFs with structured data handling, supporting asynchronous data retrieval, metadata parsing, and JSON serialization. It defines core types like `search_entry`, `og_metadata`, and `image`, with operations for querying APIs, parsing JSON responses, and extracting Open Graph or Giphy metadata. You can search for movies, fetch GIFs from Giphy, retrieve YouTube video results, or extract rich previews from URLs. Specific workflows include responding to chat commands with GIFs, parsing movie details from API responses, or generating structured metadata from web pages.",
      "description_length": 627,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 677,
    "min_description_length": 279,
    "avg_description_length": 463.46153846153845,
    "embedding_file_size_mb": 0.04771709442138672
  }
}