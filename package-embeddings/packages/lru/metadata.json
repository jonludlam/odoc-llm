{
  "package": "lru",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:29:51.533517",
  "modules": [
    {
      "module_path": "Lru.M.Make",
      "description": "Compares keys for equality and generates hash values for key-based data structures. Operates on arbitrary types through user-defined equality and hashing functions. Used to implement hash tables or sets where custom key comparison and hashing are required.",
      "description_length": 256,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lru.M.MakeSeeded",
      "description": "Compares keys using a custom equality function and generates consistent hash values based on a provided seed. Operates on values of type `t` to ensure deterministic hashing behavior. Used to create hash tables with predictable collision resistance under specific seeding conditions.",
      "description_length": 282,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lru.F.Make",
      "description": "Compares two values of type t using a total ordering, returning -1, 0, or 1 based on their relative positions. It operates on the abstract type t, which represents keys in a structured format. This function is used to sort or order elements in data structures that require a defined comparison logic.",
      "description_length": 300,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lru.F",
      "description": "This module offers operations to manage bounded key-value collections using an LRU (Least Recently Used) eviction policy, including insertion, deletion, promotion, and traversal in LRU or sorted order. It works with generic key-value pairs, enabling customization through formatting functions for output and conversion between maps and lists. Use cases include implementing caches, tracking recent interactions, or maintaining ordered data structures with efficient access patterns.",
      "description_length": 482,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lru.M",
      "description": "This module offers operations to manage key-value caches with LRU (Least Recently Used) eviction, including adding, removing, promoting, and retrieving entries, as well as iterating through items in LRU-to-MRU order. It works with mutable structures that track usage patterns of arbitrary key-value pairs, enabling efficient cache resizing and eviction. Use cases include optimizing memory-limited systems like web proxies or database query caches, where frequent access patterns require dynamic resource management.",
      "description_length": 516,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "lru",
      "description": "Provides operations to insert, lookup, and evict entries from a weight-bounded cache, with methods to adjust the maximum allowed weight. Works with key-value pairs where each value has an associated weight, using either a persistent data structure or an in-place mutable structure. Used to manage limited resources like memory or API rate limits by automatically discarding least recently used items when the weight threshold is exceeded.",
      "description_length": 438,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lru",
      "description": "Provides operations to manage elements with adjustable weights, including retrieving the weight of an element. Works with a type `t` representing items that contribute to a capacity limit. Used to implement cache eviction policies based on individual element weights.",
      "description_length": 267,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 516,
    "min_description_length": 256,
    "avg_description_length": 363.0,
    "embedding_file_size_mb": 0.02584075927734375
  }
}