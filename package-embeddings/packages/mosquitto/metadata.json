{
  "package": "mosquitto",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:53.460397",
  "modules": [
    {
      "module_path": "Mosquitto.Message",
      "library": "mosquitto",
      "description": "This module defines a message type and operations for constructing and accessing MQTT messages. It supports creating messages with optional message ID, topic, QoS level, and retain flag, and provides accessors to retrieve message properties. Concrete use cases include handling incoming MQTT messages in a broker client or building outgoing messages for publication.",
      "description_length": 366,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mosquitto.Version",
      "library": "mosquitto",
      "description": "This module exposes the version numbers of the Mosquitto library as individual components. It provides direct access to the version as a single integer, as well as its major, minor, and revision parts. These values are useful for runtime version checking and ensuring compatibility with specific Mosquitto features.",
      "description_length": 315,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mosquitto",
      "library": "mosquitto",
      "description": "This module provides an interface to the Mosquitto MQTT client library, enabling creation and management of MQTT connections, publishing and subscribing to topics, and handling asynchronous events via callbacks. It includes a message module for constructing and inspecting MQTT messages with support for QoS levels, message IDs, and retain flags, as well as a version module for checking the Mosquitto library's major, minor, and revision numbers at runtime. Operations allow connecting to brokers, publishing messages with specified QoS, subscribing to topics with acknowledgment, and inspecting message properties or library version components. Example uses include implementing MQTT clients for IoT devices and ensuring feature compatibility based on library version.",
      "description_length": 770,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 770,
    "min_description_length": 315,
    "avg_description_length": 483.6666666666667,
    "embedding_file_size_mb": 0.011326789855957031
  }
}