{
  "package": "feat-core",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:35:16.070969",
  "modules": [
    {
      "module_path": "FeatCore.Enum.Make",
      "description": "Provides operations to construct, manipulate, and iterate over sequences, including reversing, concatenating, and computing Cartesian products. Works with polymorphic sequences and integer indices, enabling tasks like generating number ranges or sampling elements. Supports functional transformations and efficient traversal of sequence data.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeq.Make",
      "description": "Generates a 30-bit random integer and produces a random integer within a specified upper bound. Operates on integers and ensures values fall within defined ranges. Used for creating randomized identifiers and simulating probabilistic outcomes.",
      "description_length": 243,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeqSyn.Make",
      "description": "Provides arithmetic operations including addition, subtraction, multiplication, and division with remainder, along with comparison and conversion functions. Works with an abstract numeric type `t` that supports integer-like behavior. Used for implementing custom numeric types with precise control over arithmetic semantics.",
      "description_length": 324,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.RandomBigInt.Make",
      "description": "Generates a 30-bit random integer and constructs a random integer within a specified upper bound. Operates on integers and ensures values fall within defined ranges. Used for creating randomized identifiers or simulating constrained random values.",
      "description_length": 247,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeqObj.Make",
      "description": "Provides arithmetic operations including addition, subtraction, multiplication, and division with remainder, along with comparison functions for ordering and equality. Works with an abstract type `t` that can be converted to and from integers. Used for implementing custom numeric types with precise control over arithmetic behavior.",
      "description_length": 333,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.EnumSig.IFSeq",
      "description": "Provides operations to create, manipulate, and traverse implicit sequences, including concatenation, reversal, Cartesian products, and mapping. Works with sequences of arbitrary elements and integer indices, supporting both finite and potentially infinite structures. Used to generate sequences of integers, combine multiple sequences, and extract samples for processing or output.",
      "description_length": 381,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.BigIntSig",
      "description": "Provides arithmetic operations like addition, subtraction, multiplication, and division with remainder, along with comparison functions for ordering and equality checks. Works with a custom big integer type `t` and supports conversions to and from standard integers. Enables precise manipulation of large numbers in contexts requiring exact arithmetic, such as cryptographic sequences or arbitrary-precision calculations.",
      "description_length": 421,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.Enum",
      "description": "Generates and processes sequences with operations like reversal, concatenation, and Cartesian product, supporting polymorphic types and integer indexing. Enables creation of number ranges, element sampling, and functional transformations on sequence data. Iteration is optimized for performance and flexibility. Examples include building custom sequences, combining multiple lists, and applying map-like operations across elements.",
      "description_length": 431,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.EnumSig",
      "description": "Generates and manipulates sequences through operations like concatenation, reversal, and mapping, supporting both finite and infinite structures. Handles sequences of arbitrary elements and integer indices, enabling combinations and transformations. Examples include creating integer ranges, merging multiple sequences, and generating Cartesian products. Supports efficient traversal and sampling for processing or output.",
      "description_length": 422,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeq",
      "description": "Generates and manipulates random integers, including 30-bit values and bounded integers, with range enforcement. Supports creation of randomized identifiers and probabilistic simulations. Provides functions to generate, clamp, and transform integer values. Examples include generating unique session tokens and simulating dice rolls with custom ranges.",
      "description_length": 352,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeqList",
      "description": "Constructs sequences from empty, single elements, or ranges, and performs operations like reversing, concatenating, and computing Cartesian products. It maps functions over sequences, retrieves elements by index, and iterates through elements. It converts between custom sequences and OCaml's standard `Seq` module.",
      "description_length": 315,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.IFSeqObj",
      "description": "Perform arithmetic and comparison operations on an abstract numeric type `t`, supporting conversion to and from integers. Operations include addition, subtraction, multiplication, division with remainder, and ordering or equality checks. This enables precise control over numeric behavior, allowing custom implementations such as modular arithmetic or fixed-point calculations. For example, it can be used to define a new numeric type that wraps integers with overflow detection or to implement a rational number system with custom division rules.",
      "description_length": 547,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.IFSeqSig",
      "description": "Provides operations to create and manipulate implicit sequences, including empty, singleton, reverse, concatenation, Cartesian product, and mapping. Works with custom sequence types and integer indices to access elements. Used to generate ranges of integers, combine sequences without explicit storage, and apply transformations to elements on demand.",
      "description_length": 351,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore.IFSeqSyn",
      "description": "Perform arithmetic and comparison operations on an abstract numeric type `t`, supporting addition, subtraction, multiplication, division with remainder, and conversions. The module enables the creation of custom numeric types with controlled behavior. Users can implement precise arithmetic semantics tailored to specific needs. Examples include defining modular arithmetic or fixed-point number systems.",
      "description_length": 404,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.RandomBigInt",
      "description": "Generates and manipulates random integers with precision, supporting both fixed-bit and bounded range outputs. Key data types include arbitrary-length integers and range constraints, with operations for generation and validation. Users can create randomized identifiers or simulate controlled random values within specific limits. For example, generate a 30-bit integer or a random number less than 1000.",
      "description_length": 404,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FeatCore.RandomSig",
      "description": "Generates random integers and bit patterns using a fixed 30-bit range. It produces nonnegative integers from random bit sequences and selects integers within a specified upper bound. Used for deterministic random number generation in constrained numerical ranges.",
      "description_length": 263,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "feat-core",
      "description": "Counts, enumerates, and samples elements from algebraic data types, supporting recursive structures through integration with the Fix library. It provides functions for generating all possible instances of a type, selecting random elements, and determining the size of a type's universe. Used to analyze combinatorial structures or generate test data for complex type hierarchies.",
      "description_length": 379,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FeatCore",
      "description": "Combines arithmetic, sequence manipulation, and random number generation capabilities, offering precise control over numeric operations, flexible sequence transformations, and deterministic random value creation. Key data types include a custom big integer type `t`, polymorphic sequences, and random integer generators, with operations such as addition, sequence concatenation, and range-based randomization. It enables tasks like generating cryptographic keys, building complex sequences from simple components, and simulating probabilistic events with defined constraints. Examples include creating infinite integer streams, performing modular arithmetic, and producing randomized session tokens within specified bounds.",
      "description_length": 723,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 19,
    "meaningful_modules": 18,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9473684210526315
  },
  "statistics": {
    "max_description_length": 723,
    "min_description_length": 243,
    "avg_description_length": 382.3333333333333,
    "embedding_file_size_mb": 0.06587028503417969
  }
}