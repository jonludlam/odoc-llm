{
  "package": "statocaml_github",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:14:18.569464",
  "modules": [
    {
      "module_path": "Statocaml_github.Types.Review_state_map",
      "library": "statocaml_github",
      "description": "This module provides a map structure for managing polymorphic values indexed by `Review_state_map.key`, supporting operations like insertion, lookup, aggregation, and sequence-based transformations. It emphasizes associative map manipulations (e.g., filtering, partitioning, merging) and efficient key-value list appending via `add_to_list`, alongside conversions to and from lists and sequences. Use cases include tracking dynamic collections of review states with structured key-value relationships, such as aggregating comments or analyzing review metadata in version-controlled data.",
      "description_length": 587,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_github.Types.Github_event_kind_map",
      "library": "statocaml_github",
      "description": "This module implements a key-value store for GitHub event categories, enabling efficient data aggregation and transformation workflows. It supports polymorphic values associated with fixed `github_event_kind` keys, offering operations like filtered traversal, value mapping, and sequence conversion for tasks such as event analytics or configuration management. Use cases include summarizing repository activity streams and partitioning event payloads for targeted processing pipelines.",
      "description_length": 486,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_github.Cache.Log",
      "library": "statocaml_github",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all following the `Logs` module's interface. It supports logging formatted messages and handling result values that represent errors, using custom printers and error-specific logic. Concrete use cases include logging application events, debugging information, and handling and logging error results directly within a pipeline.",
      "description_length": 459,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_github.Types.Event_kind_map",
      "library": "statocaml_github",
      "description": "This module supports dictionary operations like insertion, deletion, and lookup, along with transformations such as mapping, folding, and filtering, tailored for data indexed by GitHub event types. It organizes key-value pairs using an ordered map structure where keys represent event categories (e.g., push, pull request) and values are arbitrary, enabling efficient aggregation, merging, and conversion to or from sequences. It is particularly useful for tracking event frequencies, analyzing repository activity, or processing event streams with type-specific logic.",
      "description_length": 569,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Statocaml_github.Conf",
      "library": "statocaml_github",
      "description": "This module defines configuration values for GitHub integration, including a token, cache directory, repository details, and a list of users to fetch. It provides functions to read configuration from a file, with optional initialization, and exposes default configuration values. The module works directly with file paths and custom record types to manage GitHub-specific settings.",
      "description_length": 381,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_github.Utils",
      "library": "statocaml_github",
      "description": "This module provides functions to analyze and filter GitHub issues based on activity and stalling status. It works with GitHub user and issue data structures, specifically `Statocaml_github.Types.user` and `Statocaml_github.Types.issue`, often within indexed maps. Use cases include identifying auto-stalled issues, checking if an issue is inactive based on a custom time threshold, and filtering collections of issues for those that match these criteria.",
      "description_length": 455,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_github.Get",
      "library": "statocaml_github",
      "description": "This module enables retrieval and transformation of GitHub repository data through HTTP interactions, focusing on commits, issues, pull requests, users, and releases. It supports authenticated API access, paged result handling, and time-based filtering, with utilities to construct API endpoints, aggregate metadata (e.g., user details), and sort records like commits by author date. Typical applications include generating repository activity reports, tracking issue lifecycles, or analyzing contribution histories.",
      "description_length": 516,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Statocaml_github.Types",
      "library": "statocaml_github",
      "description": "This module provides OCaml types and serialization wrappers for GitHub entities like users, issues, pull requests, commits, and event streams, including structured representations for reactions, reviews, and timelines. It supports mapping event and review states to typed values, enabling aggregation and transformation of activity data, and offers default values and bidirectional parsing for reliable handling of API responses. Use cases include processing repository timelines, analyzing commit histories, and building typed representations of GitHub activity for metrics or visualization.",
      "description_length": 592,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Statocaml_github",
      "library": "statocaml_github",
      "description": "This module integrates with GitHub's API to retrieve, structure, and analyze repository data. It handles authentication, HTTP requests, and data parsing for entities like commits, issues, and users, supporting operations such as time-based filtering, sorting, and metadata aggregation. Concrete use cases include generating contribution reports, tracking issue activity, and analyzing repository timelines with typed, serializable data structures.",
      "description_length": 447,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 9,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8181818181818182
  },
  "statistics": {
    "max_description_length": 592,
    "min_description_length": 381,
    "avg_description_length": 499.1111111111111,
    "embedding_file_size_mb": 0.13080406188964844
  }
}