{
  "package": "oepub",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 15,
  "creation_timestamp": "2025-08-14T23:22:55.791759",
  "modules": [
    {
      "module_path": "Oepub.Book.Chapter",
      "library": "oepub",
      "description": "This module creates and manipulates chapters with titles and content, supporting comparison by title and custom content comparison. It works with generic content types `'a` paired with string titles. Concrete use cases include organizing parsed EPUB chapters for further processing or display.",
      "description_length": 293,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Book.Make",
      "library": "oepub",
      "description": "Builds a book structure from an EPUB archive, organizing content into a titled book with an optional author, introduction, and list of chapters. Works with `EpubArchive.t` and constructs a record containing metadata and chapter content. Used to parse and structure EPUB files into navigable books with defined chapters.",
      "description_length": 319,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.ChapterContents.ImagedText",
      "library": "oepub",
      "description": "This module builds books where chapters contain interleaved text and image data. It processes EPUB archives into structured content using `of_file` and `of_tag` to extract and organize chapter elements. The `finalize` function completes chapter construction by resolving buffered content.",
      "description_length": 288,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.ChapterContents.Text",
      "library": "oepub",
      "description": "This module implements a text-only chapter content handler for building books from EPUB archives. It provides functions to construct and finalize chapter content from files or tags, using only the text content of chapters. It works directly with `Book.Chapter.t` lists and string-based buffers to extract, accumulate, and return chapter text data. A typical use case involves parsing an EPUB file and extracting its textual content into a structured book format without including other media types.",
      "description_length": 498,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.EpubArchive",
      "library": "oepub",
      "description": "This module provides functions to open, read, and inspect EPUB archive files, including parsing metadata like the `content.opf` and `toc.ncx` files. It works with EPUB archives as zip-based containers, exposing file listings, raw content extraction, and access to structured metadata. Concrete use cases include extracting chapter files, retrieving book metadata, and navigating the table of contents for further processing.",
      "description_length": 424,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Error",
      "library": "oepub",
      "description": "This module defines error types and exceptions for handling invalid or malformed EPUB structures during parsing. It includes specific errors for missing files, unexpected XML content, and invalid metadata, along with a `locate` type to indicate where errors occur in the EPUB structure. It is used to report issues when parsing EPUB archives or extracting chapter data.",
      "description_length": 369,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Nav",
      "library": "oepub",
      "description": "This module defines a `point` type representing navigation elements in an EPUB file, such as chapter markers, with fields for ID, play order, title, source path, and optional HTML reference. It provides a `map` type as a list of `point` values and a `compare_play_order` function to sort these points by their play order. It is used to process and organize the navigation structure of an EPUB book, such as building a table of contents from parsed chapter data.",
      "description_length": 461,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.ChapterContents",
      "library": "oepub",
      "description": "This module provides implementations for constructing book chapters from EPUB archives by processing text and image content. It includes functions to extract and organize chapter data using `of_file`, `of_tag`, and `finalize`, working directly with `Book.Chapter.t` and string buffers. Concrete use cases include parsing EPUBs into plain text books or books with mixed text and images.",
      "description_length": 385,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Book",
      "library": "oepub",
      "description": "This module structures EPUB archives into books with metadata and chapters, using the `Make` functor to organize parsed content into titled books. It works with `EpubArchive.t` to produce books containing optional author, introduction, and chapter lists. Concrete use cases include parsing EPUB files into navigable book structures for rendering or further processing.",
      "description_length": 368,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Toc",
      "library": "oepub",
      "description": "This module creates and manages table of contents (TOC) structures for EPUB books using a title and navigation map. It provides functions to construct a TOC, retrieve its title, and access its associated navigation map. It is used to represent and manipulate the hierarchical structure of chapters and sections in an EPUB file.",
      "description_length": 327,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Spine",
      "library": "oepub",
      "description": "Handles the organization of chapters in an EPUB book by managing the sequence of item IDs from the spine tag. It processes and provides access to the ordered list of chapter identifiers defined in the EPUB's spine. Useful for determining the reading order of chapters when generating a book structure from an EPUB archive.",
      "description_length": 322,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Metadata",
      "library": "oepub",
      "description": "This module processes metadata entries from an EPUB archive, providing direct access to specific fields such as author, title, and language. It works with a list of key-value pairs where each entry includes attributes and an optional string value. Use this module to extract high-level book information from parsed EPUB metadata without handling XML namespaces.",
      "description_length": 361,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Opf",
      "library": "oepub",
      "description": "This module defines the structure and operations for working with `.opf` files in an EPUB archive. It provides functions to create and access the title, author, metadata, manifest, and spine of a book, using types like `Oepub.Metadata.entries`, `Oepub.Manifest.t`, and `Oepub.Spine.t`. Use it to construct or inspect the core metadata and structure of an EPUB book.",
      "description_length": 365,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Manifest",
      "library": "oepub",
      "description": "This module manages hierarchical mappings of EPUB manifest entries, where each entry associates a string identifier with a reference containing a file path (`href`) and MIME type (`media_type`). It provides ordered map operations like insertion, filtering, and transformation while preserving key ordering, along with utilities for traversing entries in ascending/descending order or converting sequences to structured maps. Typical use cases include organizing chapter references by media type, merging manifest fragments from multiple sources, or generating ordered navigation structures for EPUB content.",
      "description_length": 607,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub",
      "library": "oepub",
      "description": "This module provides operations to parse and process EPUB files into structured books with chapters, metadata, and navigation. It works with EPUB archives as zip containers, extracting and organizing content such as metadata, manifests, spines, and navigation points. Concrete use cases include converting EPUBs into plain text books, extracting chapter lists with correct reading order, and building navigable book structures from EPUB metadata.",
      "description_length": 446,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 288,
    "avg_description_length": 388.8666666666667,
    "embedding_file_size_mb": 0.2177295684814453
  }
}