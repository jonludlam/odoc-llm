{
  "package": "oepub",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:08:43.474866",
  "modules": [
    {
      "module_path": "Oepub.ChapterContents.Text",
      "library": "oepub",
      "description": "This module implements a text-only chapter content handler for building books from EPUB archives. It provides functions to construct and finalize chapter content from files or XML tags, using only the text content of chapters. It works directly with `Stdlib.Buffer.t` for efficient string accumulation and returns structured book data with titles, content, and navigation information.",
      "description_length": 384,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.ChapterContents.ImagedText",
      "library": "oepub",
      "description": "This module implements a chapter content type for building EPUB books where each chapter consists of a list of either text strings or image data (as strings). It provides functions to construct and finalize chapter content from files or tags, handling media extraction and text parsing within the EPUB structure. Use this module when generating a book that interleaves images and text, such as illustrated stories or technical documentation with embedded diagrams.",
      "description_length": 464,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Book.Make",
      "library": "oepub",
      "description": "This module builds a structured book representation by combining an epub archive with a specified chapter content implementation. It produces a book value containing metadata like title and author, along with an optional introduction and a list of chapters, each represented using the provided ChapterContent type. It is used to generate a navigable book structure from parsed epub data, suitable for rendering or further processing.",
      "description_length": 433,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Book.ChapterContent",
      "library": "oepub",
      "description": "This module defines how to parse and transform content from an EPUB archive into structured book chapters. It provides functions to handle file and HTML tag events during parsing, allowing customization of chapter content based on media type, file data, and HTML structure. It works with types like `t`, `Stdlib.Buffer.t`, and chapter lists, and is used to build custom chapter content extraction logic for EPUB files.",
      "description_length": 418,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Book.Chapter",
      "library": "oepub",
      "description": "This module defines a chapter as a pair of a title and content, providing functions to create chapters, access their title and content, and compare chapters based on title and custom content comparison. It works with any content type `'a`, allowing flexible use with different data structures. Concrete use cases include organizing parsed EPUB chapters with titles and HTML content, or sorting chapters when generating a book index.",
      "description_length": 432,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Metadata",
      "library": "oepub",
      "description": "This module processes metadata entries from the `content.opf` file of an EPUB archive, representing each metadata field as a key-value pair with optional attributes. It provides direct access to common metadata fields such as author, title, and language through dedicated functions that return their corresponding string values. It is used to extract structured information like book authorship, title, and language directly from parsed EPUB metadata.",
      "description_length": 451,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.EpubArchive",
      "library": "oepub",
      "description": "This module handles opening and parsing EPUB archives, providing direct access to their internal files and metadata. It supports operations like listing files, reading specific entries, and parsing key EPUB files such as `content.opf` and `toc.ncx`. It is used to extract structured data from EPUBs, such as chapter lists and navigation information, by directly interacting with the archive's contents.",
      "description_length": 402,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Nav",
      "library": "oepub",
      "description": "This module defines a navigation map structure as a list of points, each representing a chapter or section with metadata like title, source file, and play order. It provides a function to sort navigation points by their play order, ensuring correct sequential access to chapters. It is used to manage and organize the table of contents in an EPUB file, specifically for processing and navigating through chapters based on the `toc.ncx` file.",
      "description_length": 441,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Opf",
      "library": "oepub",
      "description": "This module handles the parsing and construction of the `content.opf` file in an EPUB archive, which defines the book's metadata, manifest, and spine. It provides functions to create an OPF structure with title, author, metadata, manifest, and spine, as well as accessors to retrieve these components. Use this module to build or inspect the structural and descriptive data of an EPUB book from its `content.opf` file.",
      "description_length": 418,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Manifest",
      "library": "oepub",
      "description": "This structure provides map-like operations for managing manifest entries in EPUB content.opf files, where entries are keyed by identifiers and map to values like reference records containing `href` and `media_type`. It supports associative operations\u2014insertion, removal, merging, querying\u2014and functional transformations such as iteration, mapping, filtering, and ordered traversal, while preserving key order and equality semantics. It is particularly useful for manipulating manifest entries during EPUB creation or modification, enabling precise control over resource relationships, chapter organization, and metadata handling in book generation workflows.",
      "description_length": 659,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Spine",
      "library": "oepub",
      "description": "Handles the organization of chapters in an EPUB book by managing the sequence of item IDs from the content.opf file. It works with string lists representing spine entries and maps them to corresponding chapter data. Used to determine the reading order of chapters when generating a book from an EPUB archive.",
      "description_length": 308,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Error",
      "library": "oepub",
      "description": "This module defines error types and location markers for handling invalid or malformed EPUB structures during parsing. It includes specific errors for missing files, unexpected XML content, and required metadata or navigation elements. These errors are used during archive parsing and chapter extraction to signal issues in the EPUB's manifest, metadata, or table of contents.",
      "description_length": 376,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oepub.Toc",
      "library": "oepub",
      "description": "This module handles the creation and manipulation of EPUB table of contents (TOC) structures, specifically parsing and generating the `toc.ncx` file. It works with a custom type `t` that encapsulates a title and a navigation map (`Oepub.Nav.map`). Use this module to construct a TOC from a title and navigation map or to extract the title and navigation structure from an existing TOC.",
      "description_length": 385,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.Book",
      "library": "oepub",
      "description": "This module organizes epub archive content into a structured list of chapters, producing a navigable book representation with metadata like title and author, an optional introduction, and a customizable list of chapters. It integrates with `EpubArchive.parse` to build books and works with chapter content implementations to extract and structure text, manage metadata, and assemble complete books. Chapters are represented as title-content pairs, supporting flexible content types and custom parsing logic based on media type, file data, and HTML structure. Example use cases include extracting chapter text from EPUB files, transforming HTML content during parsing, and generating a sorted book index.",
      "description_length": 703,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub.ChapterContents",
      "library": "oepub",
      "description": "This module provides two implementations for handling chapter content in EPUB-based books. The first handles text-only content using `Buffer.t` for efficient accumulation, producing structured book data with titles and navigation. The second supports mixed text and image content, allowing chapters to include both strings and image data, ideal for illustrated or technical books. Both implementations offer functions to construct and finalize chapter content from files or XML tags.",
      "description_length": 483,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oepub",
      "library": "oepub",
      "description": "This library processes EPUB archives by parsing their internal structure\u2014metadata, chapters, and navigation\u2014into usable components. It extracts metadata like title and author from `content.opf`, reads and organizes chapters via the spine and manifest, and builds structured books with customizable content handling. Key operations include parsing archives, mapping manifest entries, sorting navigation points, and generating books with text or mixed media chapters. For example, you can extract a list of chapters with titles and content from an EPUB file, build a new EPUB with modified metadata, or generate a table of contents from a navigation map.",
      "description_length": 652,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 703,
    "min_description_length": 308,
    "avg_description_length": 463.0625,
    "embedding_file_size_mb": 0.05857276916503906
  }
}