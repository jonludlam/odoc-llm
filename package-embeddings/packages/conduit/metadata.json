{
  "package": "conduit",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:56:15.494059",
  "modules": [
    {
      "module_path": "Resolver.Make",
      "library": "conduit",
      "description": "This module constructs a resolver that maps URIs to endpoints using a specified `Conduit.IO` implementation. It supports adding rewrite rules for domain names, composing service functions, and initializing resolver state with custom resolution logic. Use it to resolve URIs into endpoints while applying dynamic rewrites or routing based on hostnames.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resolver",
      "library": "conduit",
      "description": "This module resolves URIs to endpoints by mapping hostnames to service configurations, supporting dynamic rewrites and custom resolution logic. It works with URI values and service records containing name, port, and TLS settings, and includes functions for serializing and deserializing service data. Concrete use cases include routing HTTP requests to backend services based on domain names and configuring secure endpoints with custom port and TLS settings.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit",
      "library": "conduit",
      "description": "This module handles stream connection establishment and URI-based endpoint resolution across different runtime environments. It supports concrete operations like connecting to TCP addresses, Unix domain sockets, and TLS-wrapped endpoints, using backend-specific modules for Lwt, Async, and Mirage. Typical use cases include connecting to remote services via URIs, resolving hostnames into connection endpoints, and managing secure or virtual channels in heterogeneous environments.",
      "description_length": 481,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_trie",
      "library": "conduit",
      "description": "This module implements a radix tree for efficient longest-prefix lookups on string keys. It supports inserting key-value pairs, finding the longest matching prefix for a given string, and folding over all entries. It is useful for routing tables or IP address classification where prefix matching is required.",
      "description_length": 309,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 481,
    "min_description_length": 309,
    "avg_description_length": 400.0,
    "embedding_file_size_mb": 0.05835151672363281
  }
}