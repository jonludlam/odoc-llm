{
  "package": "camlpdf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 32,
  "creation_timestamp": "2025-08-15T12:25:07.775801",
  "modules": [
    {
      "module_path": "Pdfafmdata",
      "library": "camlpdf",
      "description": "This module provides functions to retrieve AFM (Adobe Font Metrics) data for the standard 14 PDF fonts, such as Courier, Times, Helvetica, Symbol, and Zapf Dingbats, in various styles like bold, italic, and oblique. Each function returns the corresponding AFM data as a string when invoked with `unit`. It is used to access pre-parsed, memoized font metric information needed for PDF generation and font handling tasks.",
      "description_length": 419,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfcodec",
      "library": "camlpdf",
      "description": "This module encodes and decodes PDF streams using specific compression methods like Flate, RunLength, ASCIIHex, and ASCII85, along with support for PNG-based predictors. It provides direct manipulation of PDF stream data, allowing selective decoding stages, full decoding, or encoding with optional size checks and predictor settings. Concrete use cases include processing embedded image streams, optimizing PDF size through compression, and extracting raw data from encoded PDF content.",
      "description_length": 487,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfspace",
      "library": "camlpdf",
      "description": "This module handles color space definitions in PDF documents, including parsing and serializing color space objects. It works with types like `point` for color coordinates and `iccbased` for ICC-based color profiles. Concrete use cases include reading named color spaces from PDF resources, converting color values for rendering, and embedding ICC profiles when generating PDFs with precise color management.",
      "description_length": 408,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfstandard14",
      "library": "camlpdf",
      "description": "This module calculates text width with kerning support, adjusts baseline positioning, and extracts AFM font metrics for standard PDF fonts. It operates on string encodings, standard font types, and internal font data structures. Use it to precisely layout text in PDF documents or generate font metrics for rendering.",
      "description_length": 317,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfdate",
      "library": "camlpdf",
      "description": "This module defines a date type with fields for year, month, day, time, and timezone offset, and provides functions to parse PDF date strings into this structured type and format the type back into standard PDF date strings. It supports precise handling of PDF-specific date representations, including timezone information. Use this module when reading or generating PDF metadata that requires accurate date parsing and serialization.",
      "description_length": 434,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfdest",
      "library": "camlpdf",
      "description": "This module defines data types and operations for handling PDF destinations, including page references, named destinations, and layout specifications like XYZ or Fit. It provides functions to read and write destination objects from/to PDF files and transform destinations using a matrix. Concrete use cases include parsing and modifying document navigation targets, such as bookmarks or links, and adjusting destination coordinates during PDF manipulation.",
      "description_length": 456,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfimage",
      "library": "camlpdf",
      "description": "Handles image extraction from PDF documents, supporting JPEG, JPEG2000, JBIG2, and raw pixel formats with specific bit depths. It processes image data into structured types that represent pixel layouts and encoded streams, enabling direct access to image properties like color space and bits per component. Useful for applications that need to analyze or convert embedded PDF images to other formats.",
      "description_length": 400,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfocg",
      "library": "camlpdf",
      "description": "Handles optional content groups (OCGs) in PDF documents, including reading, writing, and printing OCG metadata. Works with PDF files using data types like `ocg`, `ocgconfig`, and `ocgproperties` to manage visibility states, configurations, and group hierarchies. Used to control layer visibility and manage optional content in PDFs, such as toggling map layers or annotations.",
      "description_length": 376,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfmarks",
      "library": "camlpdf",
      "description": "This module manages PDF bookmarks, providing operations to read, add, remove, and transform them within a PDF document. It works with a structured type representing bookmarks, including their level, text, target destination, and display properties. Use cases include modifying document navigation by updating bookmark hierarchies or adjusting their target locations after page transformations.",
      "description_length": 393,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdffun",
      "library": "camlpdf",
      "description": "This module implements a calculator interpreter for PDF functions, supporting arithmetic, logical, and control operations through a stack-based language. It processes input values using a typed instruction set that includes conditionals, mathematical functions, and array manipulation. The module handles both parsing and evaluation of PDF functions, working with raw PDF objects and numeric arrays to perform transformations specified in PDF content streams or form definitions.",
      "description_length": 479,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfe",
      "library": "camlpdf",
      "description": "This module provides functions for logging error messages using a customizable logger function. It defines a `logger` type as a function that takes a string and returns nothing, along with a mutable reference to the current logger. The `log` function writes a string using the current logger, typically used for reporting errors during PDF processing tasks.",
      "description_length": 357,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfpagelabels",
      "library": "camlpdf",
      "description": "This module manages page labels in PDF documents, supporting operations to read, create, and write labeled page ranges with specific numbering styles like decimal, Roman numerals, or letters. It works with a list of label records that define the style, prefix, start page, and starting value for each labeled range. Concrete use cases include generating labeled page numbers for document sections, merging labels from multiple PDFs, and ensuring consistent labeling across paginated content.",
      "description_length": 491,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfio",
      "library": "camlpdf",
      "description": "This module provides low-level input/output operations for precise byte and bit manipulation, including reading/writing streams with positional control, converting between bytes, strings, and integer arrays, and handling bit-level data with alignment and seeking. It operates on byte sequences, bitstreams, and channels, supporting transformations like serialization, deserialization, and bitwise processing. Use cases include parsing binary formats, implementing network protocols, and managing structured data requiring fine-grained control over binary representations.",
      "description_length": 571,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfannot",
      "library": "camlpdf",
      "description": "Handles creation, manipulation, and transformation of PDF annotations. It supports operations to add annotations to pages, extract annotations from pages, and construct border styles and annotation properties. Works with PDF documents and pages, specifically handling annotation subtypes like text, links, shapes, and interactive elements. Useful for modifying PDF forms, adding visual markers, or adjusting annotation geometry during document processing.",
      "description_length": 455,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfgenlex",
      "library": "camlpdf",
      "description": "This module provides functions to lex basic PDF tokens from input streams or strings, converting them into a structured type `t` that represents PDF syntax elements like integers, strings, dictionaries, and special markers. It operates on `Pdfio.input` streams and strings, producing token lists that can be parsed into PDF objects. Concrete use cases include parsing PDF content streams, extracting metadata, and processing embedded dictionaries or arrays in PDF files.",
      "description_length": 470,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfst",
      "library": "camlpdf",
      "description": "Handles manipulation of PDF structure trees, including trimming, merging, and renumbering parent trees. Works directly with PDF documents and structure tree objects. Used when combining multiple tagged PDFs into a single document while preserving logical structure and ensuring valid object numbering.",
      "description_length": 301,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfpage",
      "library": "camlpdf",
      "description": "This module provides structural manipulation of PDF pages (rotation, page tree management, renumbering) and content-level modifications (appending PDF operators, resolving destinations, generating navigation targets), while preserving document integrity during transformations. It operates on PDF page objects, content streams, and destination structures, enabling use cases like merging documents, programmatically editing page content, or constructing minimal valid PDFs with functional navigation.",
      "description_length": 500,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfjpeg",
      "library": "camlpdf",
      "description": "Handles extraction of raw JPEG data from PDF streams. Works with `Pdfio.input` and byte sequences, providing direct access to embedded JPEG content. Useful for processing images in PDF files without full document parsing.",
      "description_length": 221,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfpaper",
      "library": "camlpdf",
      "description": "This module defines standard paper sizes and operations to manipulate them, including creating custom sizes with specified units, width, and height. It supports transformations like switching between landscape and portrait orientations and provides predefined ISO A-series and US paper sizes. Direct use cases include setting page dimensions in PDF generation or document layout processing.",
      "description_length": 390,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfmerge",
      "library": "camlpdf",
      "description": "Merges PDF documents with control over page numbering, font deduplication, and structure tree handling. Operates on lists of PDF files and page ranges, supporting selective merging and document structure adjustments. Useful for combining reports, presentations, or forms while preserving or customizing page labels and document hierarchy.",
      "description_length": 338,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcryptprimitives",
      "library": "camlpdf",
      "description": "This module implements cryptographic operations for PDF encryption, including ARC4 and AES decryption and encryption with support for different modes (CBC and ECB), as well as SHA-256, SHA-384, and SHA-512 digest calculations. It works with PDF encryption keys, byte streams, and input data sources to perform low-level cryptographic transformations required by PDF standards. Specific use cases include decrypting and encrypting PDF content streams using algorithm-specific parameters and generating secure hashes for PDF object encryption.",
      "description_length": 541,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdf",
      "library": "camlpdf",
      "description": "This library enables low-level manipulation of PDF documents in memory, offering operations for object traversal, dictionary/array transformation, and structural modifications like merging, renumbering, and garbage collection. It works directly with PDF-specific data structures such as indirect objects, streams, name trees, and document dictionaries, alongside utility types for matrices and rectangles. Typical use cases include programmatically editing PDF content, optimizing document structure, resolving cross-references, and generating compliant document identifiers during processing.",
      "description_length": 593,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfglyphlist",
      "library": "camlpdf",
      "description": "This module provides mappings between glyph names and various encoding standards, including PDF, Windows, Standard, MacRoman, MacExpert, Symbol, and Dingbats. It includes hash tables and lookup functions to convert between glyph names and their corresponding numeric encodings, as well as reverse mappings where applicable. These conversions are used when processing PDF files that require character encoding based on named glyphs, such as when extracting or generating text from fonts.",
      "description_length": 486,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfcrypt",
      "library": "camlpdf",
      "description": "This module handles PDF encryption and decryption operations, supporting various encryption standards like 40-bit, 128-bit, and AES-based schemes. It works with PDF documents represented as `Pdf.t` values and manages access permissions such as printing, editing, and copying restrictions. Concrete use cases include decrypting a password-protected PDF for modification, re-encrypting a modified document while preserving original permissions, and applying specific encryption settings when writing a new PDF.",
      "description_length": 508,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftree",
      "library": "camlpdf",
      "description": "This module handles the construction, reading, and merging of PDF name and number trees, which are hierarchical data structures used to store key-value pairs in PDF documents. It operates directly on PDF objects, converting between tree structures and flat lists of string-object pairs, with keys represented as strings even for numeric trees. Concrete use cases include parsing and rebuilding PDF metadata dictionaries, such as page label trees or outline item mappings, where keys must be unique and merges are performed without overwriting existing entries.",
      "description_length": 560,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftransform",
      "library": "camlpdf",
      "description": "This module enables constructing, combining, and applying 2D affine transformations using both transformation operations and matrices, supporting scaling, rotation, translation, and shearing. It provides utilities to decompose matrices into fundamental components like scale, rotation, shear, and translation, then reconstruct transformations from these parts, enabling precise manipulation of object geometry in PDF documents.",
      "description_length": 427,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfafm",
      "library": "camlpdf",
      "description": "Reads Adobe Font Metrics (AFM) files, extracting header metadata, character width mappings, and kerning pairs. It processes input streams into structured data including lists of header fields, character widths, and kerning adjustments. Used for parsing font metric data required for PDF font embedding and layout calculations.",
      "description_length": 326,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfwrite",
      "library": "camlpdf",
      "description": "This module handles writing PDF documents to various outputs, supporting encryption with specific methods like AES256 and PDF40bit, and offers options for object stream preservation and generation. It operates on PDF documents represented as `Pdf.t`, encryption configurations, and output targets such as channels or files. Concrete use cases include exporting encrypted PDFs to disk, re-encrypting PDFs with existing passwords, and debugging PDF content by printing object structures.",
      "description_length": 485,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcmap",
      "library": "camlpdf",
      "description": "This module parses CMap objects from PDF files, extracting character mappings and wmode values. It processes PDF stream objects to build a mapping between integer codes and Unicode strings. Useful for converting text content in PDFs to readable Unicode, especially when handling non-ASCII or complex text encodings.",
      "description_length": 315,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfunits",
      "library": "camlpdf",
      "description": "This module handles unit conversion between different measurement systems, specifically supporting points, inches, centimeters, and millimeters. It provides direct conversion functions to and from each unit, taking a float value and a target unit type. Use this module when precise dimensional calculations are needed, such as in document layout or graphics rendering.",
      "description_length": 368,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfflate",
      "library": "camlpdf",
      "description": "This module implements compression and decompression using Zlib-like functions, operating on byte sequences through input and output callbacks. It supports configurable compression levels and optional Zlib headers for both operations. Concrete use cases include streaming compression of large data buffers and on-the-fly decompression of Zlib-encoded payloads.",
      "description_length": 360,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfops",
      "library": "camlpdf",
      "description": "This module parses and manipulates PDF graphics streams into structured operator lists, handling low-level PDF drawing commands such as path construction, color setting, and text positioning. It processes byte streams using document and resource context to produce and serialize operations like line drawing, transformations, and image embedding. Concrete use cases include extracting or modifying page content, analyzing PDF structure, and generating custom PDF graphics streams programmatically.",
      "description_length": 497,
      "index": 31,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 32,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9142857142857143
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 221,
    "avg_description_length": 429.03125,
    "embedding_file_size_mb": 0.46411800384521484
  }
}