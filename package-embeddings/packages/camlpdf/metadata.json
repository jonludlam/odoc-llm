{
  "package": "camlpdf",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 35,
  "creation_timestamp": "2025-06-18T16:38:51.049709",
  "modules": [
    {
      "module_path": "camlpdf",
      "description": "Provides functions for parsing and manipulating PDF content, including extracting text, handling page objects, and decoding stream data. Operates on byte sequences, PDF dictionaries, and parsed page structures. Used to extract structured data from PDF files for analysis or conversion.",
      "description_length": 285,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfpaper",
      "description": "Provides functions to create and manipulate paper size objects using a specified unit, with operations to extract dimensions, rotate orientation, and access predefined ISO A and US paper sizes. Works with a custom type `t` that encapsulates unit, width, and height. Used to handle document layout specifications and ensure consistent sizing across different output formats.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfread",
      "description": "The module provides low-level operations for parsing and analyzing PDF content, including lexical scanning of tokens, extraction of metadata, encryption details, and permissions, as well as structured processing of dictionaries, streams, and objects. It works with input sources like files, channels, and streams, enabling incremental processing and efficient handling of large or partially available data. Specific use cases include analyzing PDF headers, decoding hexadecimal and string literals, and inspecting document-level security settings.",
      "description_length": 547,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdffun",
      "description": "Pdffun provides functions to parse, evaluate, and serialize PDF-based mathematical functions, working with PDF objects and custom function types. It supports evaluating functions with numerical inputs and outputs, and includes a debug printing utility. The module handles structured data like sampled values, interpolation schemes, and stitching logic within PDF function definitions.",
      "description_length": 384,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfutil",
      "description": "The module offers extensive list manipulation, string processing, and numerical operations, working with lists, integers, floats, and strings to enable data transformation, aggregation, and formatting. It supports specialized tasks like converting integers to Roman numerals, managing association lists, and performing bitwise arithmetic, while handling edge cases such as empty lists or invalid ranges. Use cases include text generation, data pipeline orchestration, and mathematical computations requiring precise control over numerical and structural operations.",
      "description_length": 565,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfst",
      "description": "Provides functions to manipulate structure trees in PDFs, including trimming to specific page ranges, renumbering parent trees to avoid conflicts, and merging structure trees from multiple PDFs. Operates on PDF objects and integer lists to modify internal structure tree references. Used to prepare PDFs for safe merging and to ensure valid structure tree hierarchies in accessible PDFs.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfunits",
      "description": "Converts a measurement between different physical units including points, inches, centimetres, and millimetres. Operates on a hidden type representing a dimensionless quantity. Used to standardize measurements in PDF document layout calculations.",
      "description_length": 246,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfafm",
      "description": "Provides functions to parse Adobe Font Metrics files, extracting header information, character widths, kerning pairs, and character name-width mappings. Operates on input streams and returns structured data including strings, integers, and tuples. Used to process font metrics for rendering or font conversion tasks.",
      "description_length": 316,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfdest",
      "description": "Reads and writes PDF destination objects, transforming them using a matrix. Operates on page targets and destination structures within a PDF document. Used to adjust link destinations or navigation points during PDF processing.",
      "description_length": 227,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfflate",
      "description": "Provides compression and decompression of binary data using zlib-compatible routines. Accepts input and output callbacks for handling byte buffers, with options to include or exclude the zlib header. Used for embedding compressed streams in PDF files or processing PDF content incrementally.",
      "description_length": 291,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfmerge",
      "description": "Merges PDFs while retaining page labels and coalescing duplicate fonts, with options to process structure trees and add a top-level document entry. Operates on lists of PDF objects, strings for names, and page range lists to select specific content. Used to combine multiple PDFs into a single document with controlled font management and structure handling.",
      "description_length": 358,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfpagelabels",
      "description": "Provides functions to convert page label styles and values to strings, read and write page labels from PDFs, and manipulate label lists by completing, coalescing, or merging them. Works with page label records and lists of page numbers to manage label assignments. Used to generate consistent page numbering, adjust labels for merged documents, and ensure all pages have visible labels.",
      "description_length": 386,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcrypt",
      "description": "Provides functions to decrypt and re-encrypt PDF documents using various encryption standards, including 40-bit, 128-bit, AES, AES256, and AES256ISO. Works with PDF documents represented as `Pdf.t` and permission lists to control access rights. Decrypts with user or owner passwords, re-encrypts modified content, and checks if a document is encrypted.",
      "description_length": 352,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdf",
      "description": "The module provides operations for managing PDF objects, dictionaries, and streams, including indirect object resolution, dictionary manipulation, stream extraction, and renumbering of elements. It supports tasks like document structure traversal, matrix/rectangle parsing, and encryption handling, enabling low-level PDF manipulation and data integrity checks. Use cases include modifying PDF content, extracting embedded data, and ensuring proper object referencing in complex documents.",
      "description_length": 489,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfannot",
      "description": "Provides functions to retrieve and modify annotations within a PDF document, including adding new annotations and transforming existing ones. Works with PDF page objects, annotation data structures, and geometric properties like rectangles and borders. Used to programmatically adjust annotation positions, styles, and visual attributes during PDF processing.",
      "description_length": 359,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfafmdata",
      "description": "Provides functions to retrieve AFM data for standard 14 fonts in string format. Each function corresponds to a specific font style and returns its metrics. Used to access font dimensions and spacing information for PDF rendering tasks.",
      "description_length": 235,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfwrite",
      "description": "Writes PDF documents to output channels, files, or strings with options for object stream preservation, encryption, and compression. Operates on PDF documents and provides methods to serialize and debug PDF content. Supports re-encryption, binary data inclusion, and hex encoding of PDF strings.",
      "description_length": 295,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcodec",
      "description": "Encodes and decodes PDF streams using specific algorithms like FlateDecode, CCITTDecode, and PNGUp predictor. Operates on PDF documents and stream data, modifying the document with decoded content. Handles inline image streams, supports one-stage decoding, and allows for custom compression levels and debug logging.",
      "description_length": 316,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfio",
      "description": "The module provides low-level input/output operations for bytes, strings, and bitstreams, including reading, writing, and manipulating byte buffers, as well as handling binary data through channels and in-place modifications. It supports tasks like PDF processing, data conversion between formats, and stream management, with functions for bitstream alignment, byte copying, and buffer navigation.",
      "description_length": 397,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfocg",
      "description": "Reads and writes optional content group properties to and from a PDF document, including usage settings, states, and configurations. Operates on custom types such as ocgstate, ocglistmode, and ocgproperties to manage visibility and interaction of optional content. Used to inspect or modify PDFs with layered content for interactive or conditional display.",
      "description_length": 356,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfops",
      "description": "Parses PDF graphics streams into operator lists and reconstructs streams from operators, handling multiple streams and concatenating byte sequences with configurable whitespace. Works with PDF documents, resource dictionaries, and byte sequences to process and analyze graphics content. Used to extract and manipulate visual elements from PDF pages, including image data and rendering commands.",
      "description_length": 394,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfjpeg",
      "description": "Extracts JPEG image data from a PDF input stream, returning the raw bytes of the JPEG content. Operates on `Pdfio.input` and `Pdfio.bytes` types to handle binary data efficiently. Used to process embedded JPEG images within PDF files for rendering or conversion.",
      "description_length": 262,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfe",
      "description": "Logs error messages by writing strings to standard error, using a configurable logger function. It operates with a `logger` type that maps strings to unit, and provides a default implementation that flushes output. This enables controlled error reporting in applications where output redirection or custom handling is required.",
      "description_length": 327,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcryptprimitives",
      "description": "Performs ARC4 and AES encryption/decryption with support for 40-bit and 128-bit keys, and computes SHA-256, SHA-384, and SHA-512 hashes from input data. Processes byte arrays and handles key material in integer arrays, with options to manage padding and block modes. Implements PDF-specific hashing and decryption logic for stream data using defined encryption algorithms.",
      "description_length": 372,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfglyphlist",
      "description": "Provides functions to map glyph names to various encoding schemes, including PDF, Windows, Standard, MacRoman, MacExpert, Symbol, and Dingbats. Works with hash tables and lists that associate glyph names with integer encoding values. Used to translate glyph names into specific encoding numbers for font-related processing tasks.",
      "description_length": 329,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftransform",
      "description": "This module provides functions for creating and manipulating 2D affine transformation matrices, including operations like translation, scaling, rotation, shearing, and composition, along with conversions between transformation representations and coordinate systems. It works with transform lists and matrices to handle geometric transformations, enabling decomposition and recomposition of complex transformations. Use cases include adjusting graphical elements in PDFs, such as repositioning or resizing objects while preserving spatial relationships.",
      "description_length": 553,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfdate",
      "description": "Represents and manipulates dates in the format used by PDF documents. Parses and formats dates using a specific string syntax, handling both direct string input and structured date components. Converts between string representations and internal date values for accurate date handling in PDF processing workflows.",
      "description_length": 313,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfpage",
      "description": "This module offers functions for modifying PDF page structures, including rotation adjustments, page creation, tree building, and content/resource manipulation, while handling PDF documents, page objects, and resource dictionaries. It supports tasks like renumbering pages and generating minimal PDFs, with operations focused on structural integrity and page-level transformations. Specific use cases include customizing page layouts, managing document navigation via destinations, and automating content updates.",
      "description_length": 513,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfimage",
      "description": "Extracts image data from PDFs, returning RGB pixel streams and color space information. Operates on PDF documents, resource dictionaries, and image streams, supporting formats like JPEG, JPEG2000, and JBIG2. Returns pixel dimensions, color space details, and bit depth for image processing tasks.",
      "description_length": 296,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfmarks",
      "description": "Provides functions to read, add, remove, and transform bookmarks in PDF documents. Operates on a custom `t` type representing bookmark data, including destination transformations. Used to modify PDF structure by inserting or removing navigational bookmarks, or adjusting their positions.",
      "description_length": 287,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfstandard14",
      "description": "Calculates text width with kerning support, adjusts baseline positioning, and extracts AFM data for standard PDF fonts. It handles font-specific metrics and encoding information, including kerning pairs and character width mappings. Used to precisely render text and manage font properties in PDF generation.",
      "description_length": 308,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftext",
      "description": "This module handles font parsing and text extraction from PDFs, converting between Unicode codepoints, PDF font objects, and standard font names while managing encoding transformations like UTF8, UTF16BE, and PDFDocEncoding. It operates on PDF objects, font structures, and encoding tables to map characters accurately, supporting tasks such as decoding /ToUnicode entries and generating font-specific text extractors. Key use cases include robust text retrieval from PDF content streams and handling complex encoding scenarios in document processing.",
      "description_length": 551,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfspace",
      "description": "Provides functions to read and write color spaces from and to PDF documents, along with utilities to extract their names and generate debug representations. Operates on PDF objects and a custom `t` type representing color space definitions. Used to process color information in PDF rendering and extraction workflows.",
      "description_length": 317,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfgenlex",
      "description": "Lexes PDF token streams from input sources, extracting individual tokens or lists of tokens. Processes raw byte streams and string inputs, returning a list of token objects. Used to parse PDF content streams and object definitions during document rendering.",
      "description_length": 257,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftree",
      "description": "Reads and constructs name or number trees from PDF objects, converting them into flat key-value lists with string keys. Supports merging of name or number trees when no key conflicts are expected. Processes PDF data to manage hierarchical mappings used in document metadata and object references.",
      "description_length": 296,
      "index": 34,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 35,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 565,
    "min_description_length": 227,
    "avg_description_length": 358.25714285714287,
    "embedding_file_size_mb": 0.12761306762695312
  }
}