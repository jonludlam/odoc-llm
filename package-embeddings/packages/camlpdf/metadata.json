{
  "package": "camlpdf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 33,
  "creation_timestamp": "2025-07-15T23:11:53.477505",
  "modules": [
    {
      "module_path": "Pdfimage",
      "library": "camlpdf",
      "description": "Handles image extraction from PDF documents, supporting JPEG, JPEG2000, JBIG2, and raw pixel formats with specific bit depths. It processes image data into structured types representing pixel layouts and encodings, allowing direct access to image properties like color space and bits per component. Useful for converting embedded PDF images into raw byte streams or inspecting image metadata during document processing tasks.",
      "description_length": 425,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfdate",
      "library": "camlpdf",
      "description": "This module defines a structured type for representing dates and times, including timezone offsets, as specified in PDF documents. It provides functions to parse a date string into this structured type and to convert the structured date back into a string. It is used for handling date values when reading or generating PDF metadata such as document creation or modification times.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfafmdata",
      "library": "camlpdf",
      "description": "This module provides functions to retrieve AFM (Adobe Font Metrics) data for the standard 14 PDF fonts, such as Courier, Times, Helvetica, Symbol, and Zapf Dingbats, in various styles like bold, oblique, and italic. Each function takes no arguments and returns the corresponding AFM data as a string, enabling precise font handling in PDF generation or processing tasks. The data is parsed on demand and cached for efficiency.",
      "description_length": 426,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfjpeg",
      "library": "camlpdf",
      "description": "This module provides a function `get_jpeg_data` that extracts raw JPEG data from a PDF input stream. It operates on `Pdfio.input` and returns the data as `Pdfio.bytes`. A concrete use case is parsing embedded JPEG images within PDF files for further processing or extraction.",
      "description_length": 275,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfutil",
      "library": "camlpdf",
      "description": "This module offers a comprehensive suite of list manipulation functions (filtering, mapping, splitting, deduplication), string handling (exploding, replacing substrings, checking prefixes), and low-level integer arithmetic/bitwise operations for 32/64-bit values. It operates on lists of arbitrary types, strings, numeric types (including int32/int64), optional values, and geometric primitives like 2D vectors, with utilities for in-place mutation and state management. Specific use cases include parsing and transforming PDF content streams, handling binary data structures, implementing custom list traversals, and performing geometric calculations for document layout operations.",
      "description_length": 683,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfmarks",
      "library": "camlpdf",
      "description": "This module handles document bookmarks with operations to read, add, remove, and transform them. It works with a structured type representing each bookmark, including its level, text, target destination, and display properties. Concrete use cases include modifying a PDF's outline structure, adjusting bookmark targets after page transformations, or extracting navigation metadata.",
      "description_length": 381,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfpaper",
      "library": "camlpdf",
      "description": "This module defines paper sizes with specific width and height values in a given unit. It provides constructors for ISO A-series and US standard paper formats, along with operations to access dimensions, change orientation, and retrieve the unit of measurement. Use this module to create and manipulate paper size definitions when generating or modifying PDF documents with precise page dimensions.",
      "description_length": 398,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfops",
      "library": "camlpdf",
      "description": "This module parses and manipulates PDF graphics streams into structured operator lists, handling operations like path construction, text rendering, color setting, and image embedding. It processes byte streams using document and resource dictionaries, producing lists of typed operators for inspection or modification. Concrete use cases include extracting or modifying graphical content from PDF pages, analyzing PDF structure, and generating custom PDF graphics streams.",
      "description_length": 472,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcryptprimitives",
      "library": "camlpdf",
      "description": "This module implements cryptographic operations for PDF encryption, including ARC4 and AES decryption and encryption in both CBC and ECB modes, along with SHA-256, SHA-384, and SHA-512 digest calculations. It handles binary data using `Pdfio.bytes` and encryption keys as integer arrays, with support for PDF-specific hash generation and stream decryption. Concrete use cases include decrypting and encrypting PDF content streams using standard encryption algorithms and generating secure hashes for PDF objects.",
      "description_length": 512,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfunits",
      "library": "camlpdf",
      "description": "This module defines a type `t` representing common units of measurement and provides functions to convert values between these units. It supports conversions to and from points, inches, centimeters, and millimeters. Use this module when handling document layout or rendering tasks that require precise unit transformations, such as converting page dimensions from inches to points for PDF generation.",
      "description_length": 400,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdffun",
      "library": "camlpdf",
      "description": "This module implements a calculator engine for evaluating PDF functions, supporting arithmetic, logical, and type conversion operations on integers, floats, and booleans. It handles parsed function representations from PDF documents, including sampled functions with array-based sample data and parameter mappings. Use cases include interpreting PDF shading functions, evaluating PostScript-like expressions, and converting PDF function objects to and from their serialized forms.",
      "description_length": 480,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfst",
      "library": "camlpdf",
      "description": "Handles operations on PDF structure trees, including trimming to specific page ranges, merging structure trees from multiple PDFs, and renumbering parent trees to avoid conflicts. Works directly with PDF document objects and structure tree data. Used when combining or modifying tagged PDFs to maintain logical document structure.",
      "description_length": 330,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdf",
      "library": "camlpdf",
      "description": "This module provides functionality for parsing, inspecting, and modifying PDF documents in memory through operations like dictionary traversal, indirect reference resolution, and encryption handling. It works with PDF objects (including dictionaries, streams, and arrays), document structures, and metadata, enabling tasks such as content extraction, page reference manipulation, and garbage collection to optimize file size. Specific capabilities include renumbering objects, transforming document trees, and modifying document IDs or encryption settings.",
      "description_length": 556,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcodec",
      "library": "camlpdf",
      "description": "This module encodes and decodes PDF streams using specific compression filters like FlateDecode, RunLengthDecode, and ASCII85. It supports data types such as PDF objects and byte streams, with operations for applying or removing encodings and handling prediction schemes like PNGUp. Concrete use cases include compressing or decompressing PDF content streams and processing embedded image data.",
      "description_length": 394,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfpagelabels",
      "library": "camlpdf",
      "description": "This module manages page labeling in PDF documents, supporting operations to define, read, write, and manipulate page label formats. It works with a list of label configurations that specify numbering styles like decimal, Roman numerals, or letters, along with prefixes and page ranges. Concrete uses include applying custom numbering to document sections, generating labeled page outputs, and merging or optimizing label definitions across multi-part PDFs.",
      "description_length": 457,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfflate",
      "library": "camlpdf",
      "description": "This module implements Zlib-style compression and decompression using callback functions for input and output. It operates on raw binary data through `bytes` buffers, allowing custom data sources and destinations. Use it to integrate zlib-compatible compression into applications that require direct buffer manipulation, such as PDF generation or network streaming.",
      "description_length": 365,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfafm",
      "library": "camlpdf",
      "description": "Reads Adobe Font Metrics (AFM) files, extracting header information, character metrics, kerning pairs, and character name-to-width mappings. Processes input using low-level IO operations to parse font data into structured tuples and lists. Useful for font handling in PDF generation or text rendering systems where precise glyph metrics are required.",
      "description_length": 350,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfgenlex",
      "library": "camlpdf",
      "description": "This module provides functions to lex basic PDF tokens from input streams or strings, converting them into a structured type `t` representing PDF elements like integers, strings, and delimiters. It operates on `Pdfio.input` and string inputs, producing token lists for parsing PDF content. Useful for low-level PDF parsing tasks such as extracting raw tokens from PDF streams or validating PDF syntax.",
      "description_length": 401,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfdest",
      "library": "camlpdf",
      "description": "This module defines data types and operations for handling PDF destinations, including page references, positioning, and transformations. It supports concrete use cases like parsing and serializing destination objects within a PDF, applying geometric transformations, and resolving indirect references. Key types include `t` for destination variants and `targetpage` for specifying pages, with functions to read, write, and transform destinations directly.",
      "description_length": 456,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfstandard14",
      "library": "camlpdf",
      "description": "This module calculates text width with kerning support, retrieves baseline adjustments, and extracts AFM data for standard PDF fonts. It operates on string encodings, standard font types, and character metrics using hashtables for efficient lookups. Use cases include precise text layout, font metric analysis, and generating correct PDF font dictionaries with stem widths and flags.",
      "description_length": 383,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfcrypt",
      "library": "camlpdf",
      "description": "This module handles PDF encryption and decryption with support for various encryption standards, including 40-bit, 128-bit, and AES (versions 2, 3, and ISO). It operates on `Pdf.t` documents, allowing decryption with user or owner passwords, re-encryption of modified documents, and setting access permissions such as no print or no copy. Concrete use cases include securing sensitive documents, enforcing access restrictions, and modifying encrypted PDFs while preserving encryption integrity.",
      "description_length": 494,
      "index": 20,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Pdfglyphlist",
      "library": "camlpdf",
      "description": "This module provides mappings between glyph names and their corresponding encoding values across various character encodings such as PDF, Windows, Standard, MacRoman, MacExpert, Symbol, and Dingbats. It includes hash tables for efficient lookups in both forward and reverse directions, using string keys for glyph names and integer keys for encoding values. Concrete use cases include converting glyph names to specific encoding numbers for font rendering or document processing tasks.",
      "description_length": 485,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfread",
      "library": "camlpdf",
      "description": "This module provides low-level parsing and lexing operations for processing PDF content from input streams, files, or channels, supporting encrypted documents, malformed PDF recovery, and incremental loading. It works with structured PDF objects, dictionaries, and stream data through `Pdfio.input` and `Pdfgenlex.t`, enabling use cases like extracting embedded resources, analyzing PDF revisions, or repairing corrupted files.",
      "description_length": 427,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfe",
      "library": "camlpdf",
      "description": "This module provides functions for logging error messages using a customizable logger function. It defines a default logger that writes to standard error and a reference to the current logger used by the library. The `log` function allows emitting error messages through the currently active logger.",
      "description_length": 299,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfwrite",
      "library": "camlpdf",
      "description": "This module writes PDF documents to files, channels, or output streams, supporting encryption with specified owner and user passwords, permission settings, and object stream preservation or generation. It operates on PDF documents represented by the `Pdf.t` type and handles encryption methods like PDF40bit, PDF128bit, and various AES variants. Concrete use cases include exporting encrypted PDFs with custom permissions, re-encrypting existing PDFs, and writing PDFs to disk or output streams with optional compression and object stream control.",
      "description_length": 547,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfocg",
      "library": "camlpdf",
      "description": "Handles optional content groups (OCGs) in PDF documents, providing types to define OCG properties, configurations, and states. It supports reading, writing, and printing OCG metadata, enabling control over visibility and layering of content. Use cases include managing PDF layers, configuring default visibility states, and debugging OCG structures in complex PDFs.",
      "description_length": 365,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftext",
      "library": "camlpdf",
      "description": "This module provides tools for parsing font definitions, converting text between encodings (UTF-8, UTF-16BE, PDFDocEncoding), and mapping glyphs to Unicode codepoints. It operates on PDF font objects and content streams to extract textual data while handling encoding tables and metadata like Unicode support. Key applications include PDF text extraction, font encoding analysis, and cross-encoding text normalization for processing multilingual content.",
      "description_length": 454,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdfmerge",
      "library": "camlpdf",
      "description": "Merges PDF files by combining pages and optionally handling fonts, page labels, and structure trees. It operates on lists of PDFs and page ranges, supporting efficient merging of identical documents and customizable output structure. Use cases include generating combined reports from multiple sources and optimizing PDFs by removing redundant fonts.",
      "description_length": 350,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfspace",
      "library": "camlpdf",
      "description": "This module handles color space representations and manipulations for PDF documents, including parsing and serializing color spaces to and from PDF objects. It works with color space types like `iccbased` and `point`, supporting operations such as reading named color spaces, writing custom color spaces, and extracting metadata. Concrete use cases include embedding ICC-based color profiles and debugging color space definitions in PDFs.",
      "description_length": 438,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfannot",
      "library": "camlpdf",
      "description": "This module handles the creation, manipulation, and transformation of PDF annotations. It supports operations to add annotations to pages, extract annotations from pages, and construct border styles and annotation properties. Key data types include `subtype` for annotation kinds like text, links, and shapes, `border` for styling, and `t` for annotation objects. Use cases include embedding interactive elements like hyperlinks, comments, and geometric highlights in PDF documents.",
      "description_length": 482,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdftree",
      "library": "camlpdf",
      "description": "This module handles the reading and construction of PDF name and number trees, providing functions to convert between tree structures and flat key-value lists. It works directly with PDF objects and strings, enabling manipulation of tree-based data in PDF documents. Use cases include extracting metadata dictionaries or page label ranges from PDFs and reconstructing modified trees for document updates.",
      "description_length": 404,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pdfcmap",
      "library": "camlpdf",
      "description": "This module parses CMap objects from PDF documents, extracting character mappings and writing mode information. It processes PDF indirect objects to build a structured representation of CMaps, which define how character codes map to Unicode strings. Use this module when handling PDF text extraction or rendering where accurate character encoding is required.",
      "description_length": 359,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pdftransform",
      "library": "camlpdf",
      "description": "This module supports creating, combining, and decomposing 2D affine transformations using both transformation primitives (like translation, scaling, rotation, and shear) and 3x3 matrices. It operates on two primary representations: transformation operations (`transform_op`) and matrices (`transform_matrix`), enabling conversions, inversion, and coordinate mapping between them. These capabilities are particularly useful in PDF processing for tasks like adjusting document layouts, manipulating vector graphics, or analyzing transformations by breaking matrices into interpretable components such as scale, rotation, or shear.",
      "description_length": 628,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 33,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9428571428571428
  },
  "statistics": {
    "max_description_length": 683,
    "min_description_length": 275,
    "avg_description_length": 432.030303030303,
    "embedding_file_size_mb": 0.12033939361572266
  }
}