{
  "package": "msgpck",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:58:45.514287",
  "modules": [
    {
      "module_path": "Msgpck.Bytes",
      "library": "msgpck",
      "description": "This module decodes MessagePack values from and encodes them into byte buffers. It provides direct read and write operations on `bytes` inputs and outputs, returning the number of bytes processed along with the decoded values or serialized data. Use it for efficient binary serialization and deserialization of structured data in network protocols or storage formats.",
      "description_length": 367,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Msgpck.String",
      "library": "msgpck",
      "description": "This module decodes MessagePack values from strings and serializes them into byte buffers. It provides direct access to reading and writing operations, returning the number of bytes processed along with the decoded values or written result. Use it for parsing MessagePack data from string buffers or serializing values into byte arrays for transmission or storage.",
      "description_length": 364,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Msgpck.StringBuf",
      "library": "msgpck",
      "description": "This module decodes MessagePack values from string inputs and serializes them into buffers. It provides direct read and write operations on string and buffer types, handling partial reads and multiple messages. Use it to parse MessagePack data from network packets or files, or to build serialized output incrementally.",
      "description_length": 319,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Msgpck.BytesBuf",
      "library": "msgpck",
      "description": "This module handles MessagePack serialization and deserialization using bytes and buffers. It provides direct decoding from bytes with positional control and encoding into buffers, returning the number of bytes processed. Use it for efficient binary MessagePack handling in I/O operations or network protocols.",
      "description_length": 310,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Msgpck",
      "library": "msgpck",
      "description": "This module provides functions to construct, compare, and serialize MessagePack values using a variant type that encapsulates OCaml primitives, lists, maps, and extensions. It includes utilities for extracting data from MessagePack structures and efficient buffer-based serialization/deserialization, supporting incremental parsing and positional control. These capabilities are particularly suited for network protocols, binary data storage, and streaming applications requiring compact binary representations.",
      "description_length": 511,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 310,
    "avg_description_length": 374.2,
    "embedding_file_size_mb": 0.07280445098876953
  }
}