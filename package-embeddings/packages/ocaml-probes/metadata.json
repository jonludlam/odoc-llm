{
  "package": "ocaml-probes",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:52:54.245356",
  "modules": [
    {
      "module_path": "Probes_lib.Pid_or_self",
      "library": "ocaml-probes.probes_lib",
      "description": "This module represents a process identifier, either a specific PID or the current process. It provides operations to construct values from a PID or the current process, retrieve the executable path, and convert back to a PID. It is used to track and manipulate process-specific paths and executables in low-level system monitoring tools.",
      "description_length": 337,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Probes_lib.With_ptrace",
      "library": "ocaml-probes.probes_lib",
      "description": "This module uses `ptrace` to attach to and control the execution state of a process for probe manipulation. It provides functions to start, attach, update probe states, and retrieve probe information, all while ensuring the target process is stopped. Use it to safely modify probe configurations in a running process or after launching a new one.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Probes_lib.Raw_ptrace",
      "library": "ocaml-probes.probes_lib",
      "description": "Starts a process in a paused state using `ptrace` and detaches from it, allowing the process to continue execution. Works with process IDs and string arrays for command-line arguments. Useful for scenarios requiring precise control over process initialization, such as debugging or process inspection tools.",
      "description_length": 307,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Probes_lib.Self",
      "library": "ocaml-probes.probes_lib",
      "description": "This module manages probe states within the same process, allowing updates and retrieval of probe information. It works with arrays of probe names and their associated states, providing functions to get all probe names, get specific probe states, and update probe actions. Use cases include monitoring and modifying probe behavior in real-time during application execution.",
      "description_length": 373,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Probes_lib",
      "library": "ocaml-probes.probes_lib",
      "description": "This module provides mechanisms for managing probes in system monitoring and debugging tools, enabling operations like enabling/disabling probes by name, regex, or predicate, parsing ELF binaries to extract probe metadata, and dynamically controlling probe behavior in running processes. It operates on process IDs, probe states, and ELF structures, with specific applications in runtime inspection, debugging tools, and low-level process manipulation via `ptrace`-based initialization and detachment workflows.",
      "description_length": 511,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 307,
    "avg_description_length": 374.8,
    "embedding_file_size_mb": 0.0728607177734375
  }
}