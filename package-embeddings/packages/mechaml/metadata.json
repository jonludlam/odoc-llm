{
  "package": "mechaml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 22,
  "creation_timestamp": "2025-08-15T14:10:22.918651",
  "modules": [
    {
      "module_path": "Mechaml.Page.Form.RadioButton",
      "library": "mechaml",
      "description": "This module provides functions to interact with radio buttons in HTML forms, including retrieving values, selecting options, and checking selection states. It works with `radio_button` inputs within a form, allowing manipulation of individual buttons or groups sharing the same name. Concrete use cases include extracting available choices, selecting a specific option, and resetting a radio group to its default state.",
      "description_length": 419,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.Syntax",
      "library": "mechaml",
      "description": "This module provides monadic operators for composing agent computations in sequence and in parallel. It works with the `Mechaml.Agent.Monad.m` type, representing effectful agent actions that return values. Use it to chain agent operations like HTTP requests, where `(let*)` sequences actions based on prior results, and `(and*)` runs independent actions concurrently, merging their results.",
      "description_length": 390,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.List",
      "library": "mechaml",
      "description": "This module provides sequential and parallel iteration, mapping, and folding operations over lists within the Agent monad. It handles actions that maintain or ignore the agent state across list elements, supporting tasks like batch resource downloads or sequential state updates. Concrete use cases include scraping multiple pages in parallel while preserving the original agent state or processing links in sequence with stateful operations.",
      "description_length": 442,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.SelectList",
      "library": "mechaml",
      "description": "This module handles selection and manipulation of items in HTML select lists, providing functions to retrieve, select, unselect, and check the state of individual items. It works with `select_list` inputs and their associated `item` type, representing options within a dropdown or list box. Concrete use cases include programmatically setting user choices in forms, validating selected options, and resetting lists to their default state.",
      "description_length": 438,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page.Form.Field",
      "library": "mechaml",
      "description": "This module provides functions to manipulate and retrieve values from form fields such as text inputs, textareas, checkboxes, and more. It supports setting and resetting field values, getting current values, and retrieving default values specified in the HTML. Use cases include form population, user input validation, and form state management during web scraping or automated testing.",
      "description_length": 386,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.Checkbox",
      "library": "mechaml",
      "description": "This module provides functions to inspect and manipulate checkbox inputs within a form, including retrieving values, checking or unchecking specific checkboxes, and resetting them to default states. It operates on checkbox input elements and supports selecting multiple checkboxes by name, managing their checked status, and extracting their associated values. Concrete use cases include form validation, user preference handling, and dynamic form state updates based on checkbox selections.",
      "description_length": 491,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Agent.Monad.Infix",
      "library": "mechaml",
      "description": "This module provides infix operators for chaining and transforming monadic actions within a web scraping agent context. It supports bind, sequence, and map operations on values wrapped in the agent monad, enabling concise composition of scraping tasks. Concrete use cases include parsing HTML content, handling asynchronous responses, and managing stateful navigation between web pages.",
      "description_length": 386,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Agent.HttpResponse",
      "library": "mechaml",
      "description": "This module provides functions to access HTTP response status codes, headers, and content from a web scraping agent's response. It includes operations to extract the response body as a string, retrieve the HTTP status, and obtain structured headers or a page object. Concrete use cases include parsing scraped web pages, handling redirects via location headers, and inspecting HTTP metadata during scraping workflows.",
      "description_length": 417,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Color",
      "library": "mechaml",
      "description": "This module defines a type `t` representing RGB colors and provides a `make` function to construct color values from red, green, and blue components (0\u2013255). It includes a `to_string` function that converts a color value into a standard hex string format like `#rrggbb`. Use this module to safely create and format HTML5-compatible color values for form submission or display.",
      "description_length": 376,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Date",
      "library": "mechaml",
      "description": "This module defines a date type and provides a `make` function to construct a date value from day, month, and year components, ensuring validity. It includes a `to_string` function that converts a valid date value into an ISO 8601 formatted string suitable for HTML5 date inputs. It is used to generate correctly formatted date strings for form fields, such as setting the value of a date input in a web form.",
      "description_length": 409,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form",
      "library": "mechaml",
      "description": "This module enables precise manipulation and analysis of HTML form elements and their associated input fields, such as checkboxes, radio buttons, text areas, and specialized input types like dates or URLs. It supports querying inputs by name or type, extracting and modifying form attributes (e.g., action, method) or field values, and converting forms into structured node representations for further processing. These capabilities are particularly useful for automating form interactions, validating user input, and programmatically inspecting or resetting form states during web scraping or testing workflows.",
      "description_length": 612,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Cookiejar.Cookie",
      "library": "mechaml",
      "description": "This module represents individual cookies with fields for name, value, expiration, domain, path, and secure flag. It provides functions to create cookies, extract their properties, and check if they match a given URI for inclusion in HTTP requests. Use cases include parsing `Set-Cookie` headers into cookie values and determining which cookies to send with a specific request.",
      "description_length": 377,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Image",
      "library": "mechaml",
      "description": "This module provides functions to extract and manipulate image data from a page. It works with image elements, allowing retrieval of their source URL as a string or a parsed URI, and converting them to generic node representations. Use this module to process images in web content, such as extracting image URLs for download or analysis.",
      "description_length": 337,
      "index": 12,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Mechaml.Option.Syntax",
      "library": "mechaml",
      "description": "This module provides infix operators for chaining and combining optional values. It supports operations that sequence computations producing optional results, allowing for concise handling of optional data through monadic and applicative patterns. Use cases include safely processing nested optional fields in records or composing functions that may fail without explicit pattern matching.",
      "description_length": 389,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Link",
      "library": "mechaml",
      "description": "This module provides functions to extract and manipulate hypertext link data from web pages. It works with link elements, offering access to attributes like the href, displayed text, and resolved URI. Concrete use cases include parsing navigation menus, collecting resource URLs, and analyzing anchor content for web scraping or automated testing.",
      "description_length": 347,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Agent.Monad",
      "library": "mechaml",
      "description": "The module provides a monadic framework for composing stateful web scraping workflows, enabling asynchronous task chaining, error handling, and manipulation of cookies, headers, and HTTP client settings like redirect limits. It operates on `Mechaml.Agent.t` to manage stateful interactions, supporting sequential and parallel list processing for tasks such as dynamic request configuration and session-persistent scraping. This structure facilitates complex scenarios requiring coordinated HTTP requests, robust error recovery, and adaptive state management across scraping operations.",
      "description_length": 585,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Time",
      "library": "mechaml",
      "description": "This module defines a type `t` representing time values and provides a `make` function to construct valid time values from hours, minutes, and seconds. It includes a `to_string` function that converts a time value into an HTML5-compliant time string format (e.g., \"HH:MM:SS\"). Use this module to generate properly formatted time strings for HTML form inputs such as `<input type=\"time\">`.",
      "description_length": 388,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format",
      "library": "mechaml",
      "description": "This module defines data types and conversion functions for HTML5 input formats including color, date, and time. Each submodule provides a `make` function to construct validated values from component parts and `to_string` to produce correctly formatted strings for HTML form submission. Use these modules to generate hex color codes, ISO dates, and time strings compatible with HTML5 input elements.",
      "description_length": 399,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Option",
      "library": "mechaml",
      "description": "This module provides operations to handle optional values through mapping, binding, and default extraction. It works with the standard `'a option` type, enabling transformations and chaining of computations that may fail. Concrete use cases include safely accessing nested record fields, composing functions that return optional results, and eliminating boilerplate pattern matching when handling absent data.",
      "description_length": 409,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Cookiejar",
      "library": "mechaml",
      "description": "This module manages collections of cookies, providing operations to add, remove, and update cookies based on HTTP headers. It works with URI values and Cohttp headers to automatically handle cookie inclusion and extraction during HTTP transactions. Concrete use cases include maintaining session state across requests and filtering cookies based on domain, path, and secure attributes before sending them to a server.",
      "description_length": 417,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page",
      "library": "mechaml",
      "description": "This module enables HTML page analysis and manipulation through element selection, form handling, and media extraction. It operates on HTML documents represented as `t` values, supporting operations like resolving relative URLs, querying via CSS selectors, and traversing nodes using Lambdasoup. Key applications include scraping structured data from web pages, programmatically interacting with HTML forms, and extracting assets like images or links based on textual or attribute criteria.",
      "description_length": 490,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml",
      "library": "mechaml",
      "description": "This module provides functionalities for handling HTTP agents with cookie management, HTML5 input formatting, optional value operations, and HTML page manipulation. It works with data types such as cookies, URI, HTML documents, and standard `'a option` types. Use it to maintain HTTP sessions, generate form-compatible data strings, safely handle optional values, and extract or modify content from HTML pages using CSS selectors and node traversal.",
      "description_length": 449,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 22,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9565217391304348
  },
  "statistics": {
    "max_description_length": 612,
    "min_description_length": 337,
    "avg_description_length": 425.1363636363636,
    "embedding_file_size_mb": 0.31919193267822266
  }
}