{
  "package": "mechaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 24,
  "creation_timestamp": "2025-06-18T16:36:57.123997",
  "modules": [
    {
      "module_path": "Mechaml.Page.Form.Checkbox",
      "description": "Returns the label of a checkbox, retrieves values and checked states of grouped checkboxes, and modifies their checked status. Operates on form data structures containing checkbox inputs. Used to manage form state during user interactions, such as updating selections or restoring default settings.",
      "description_length": 298,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.RadioButton",
      "description": "Provides functions to retrieve and manipulate the value, selection state, and group of radio buttons. Works with input elements representing radio buttons and forms containing them. Enables selecting a specific radio button, checking if it is selected, and resetting groups to their default state.",
      "description_length": 297,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.SelectList",
      "description": "Provides functions to manipulate and query a select list, including selecting, unselecting, and checking the selection status of individual items. Works with a `item` type that contains a label and a value, and a select list structure that tracks selected items and multiple selection support. Used to handle form input where users can choose one or more options from a predefined set.",
      "description_length": 385,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.Field",
      "description": "Sets and retrieves values for form fields, including text, password, date, and color inputs, and resets fields to their default or empty state. Operates on field elements with associated input types, providing access to current and default values. Used to manage user input in web forms, ensuring values can be dynamically updated or restored.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Mechaml.Agent.Monad.Infix",
      "description": "Provides monadic binding and sequencing operations for effectful computations, including left and right chaining of functions and values. Works with any type wrapped in a monadic context, such as option, result, or custom monads. Enables fluent composition of asynchronous or error-prone operations, like chaining API calls or handling optional values.",
      "description_length": 352,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Agent.Monad.Syntax",
      "description": "Provides monadic binding and parallel composition operations for sequencing computations in a context-aware manner. Works with monadic types that support binding and parallel execution, such as agent-based state transformers. Enables structured handling of parallel agent interactions and value extraction within a monadic framework.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.List",
      "description": "Processes lists by applying functions sequentially or in parallel, with variants that track state or ignore it. Operates on lists of arbitrary elements, returning modified lists or updated state within a monadic context. Useful for batch processing tasks like downloading multiple images or sequentially updating an agent's state.",
      "description_length": 330,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form",
      "description": "Manages form elements including checkboxes, radio buttons, select lists, and text fields by providing methods to read, update, and reset their states. Key data types include checkbox groups, radio button groups, select lists with items, and form fields with input types. It allows actions such as checking a checkbox, selecting a radio option, choosing an item in a dropdown, or setting a text input value. These operations support dynamic form handling, user interaction tracking, and state restoration.",
      "description_length": 504,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Link",
      "description": "Extracts the URL string, associated text, and URI object from a link structure. Converts the link into an HTML node representation. Works with internal link data types to support web content parsing and rendering.",
      "description_length": 213,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page.Image",
      "description": "Provides functions to extract the source string and URI from an image object, and to convert the image into a DOM node. Works with the `t` type representing an image and the `Uri.t` type for handling URLs. Used to generate HTML elements from image data and retrieve image metadata.",
      "description_length": 281,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Cookiejar.Cookie",
      "description": "Provides functions to extract and manipulate cookie attributes such as name, value, domain, path, and security flag, along with a method to check if a cookie matches a given URI. Works with strings, booleans, and a custom `expiration` type representing cookie expiration. Used to validate cookies against request URIs and construct cookies with optional parameters like expiration and path.",
      "description_length": 390,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Color",
      "description": "Converts color values to their string representation and constructs color objects from valid RGB components. Operates on integer values for red, green, and blue to create or serialize color data. Used to validate and display color configurations in graphical applications.",
      "description_length": 272,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Format.Date",
      "description": "Converts a date value to a string representation and constructs a date from day, month, and year, returning None for invalid dates. Works with an abstract date type representing calendar dates. Used to validate and format date inputs in user-facing applications.",
      "description_length": 262,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Time",
      "description": "Converts a time value to a string representation and constructs a time value from hour, minute, and second components, returning None for invalid inputs. Works with a custom time type representing moments in a day. Used to validate and format time data for user interfaces or log entries.",
      "description_length": 288,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.HttpResponse",
      "description": "Extracts HTTP status codes, headers, and content from server responses, along with parsed page data and redirect locations. Works with HTTP status codes, headers, strings, and custom page and URI types. Used to process server replies in web applications, validate responses, and handle redirects.",
      "description_length": 296,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Agent.Monad",
      "description": "Encapsulates effectful computations within a monadic framework, enabling sequential and parallel execution of agent-related operations. Supports binding, chaining, and parallel composition of functions that manipulate agent state, such as retrieving or updating cookie jars. Processes lists of elements while maintaining or transforming agent state through monadic operations. Examples include chaining API calls, parallelizing agent interactions, and batch processing with stateful transformations.",
      "description_length": 499,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Option.Syntax",
      "description": "Provides binding and combination operations for option types, enabling sequential computation with `let*` and `and*`, and direct value extraction with `let+` and `and+`. Works with optional values and pairs of optional values. Used to handle chained computations that may fail, such as parsing nested structures or validating multiple conditions.",
      "description_length": 346,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent",
      "description": "Extracts HTTP status codes, headers, and content from server responses, along with parsed page data and redirect locations, using custom types for pages and URIs to process and validate web responses. Manages agent state through a monadic framework, enabling sequential and parallel execution of operations like cookie management, form submission, and stateful transformations. Chains API calls, parallelizes interactions, and processes lists while maintaining or modifying agent state. Examples include handling redirects, submitting forms with cookies, and executing batched web requests with state persistence.",
      "description_length": 613,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Cookiejar",
      "description": "manages cookie attributes and validation, offering functions to extract and manipulate name, value, domain, path, and security flags, along with checks for URI compatibility. It supports custom expiration handling and operates on strings, booleans, and an `expiration` type. Users can validate cookies against specific URLs, construct cookies with optional parameters, and manage their lifecycle. Examples include checking if a cookie applies to a request URI or creating a cookie with a defined expiration time and path.",
      "description_length": 521,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Format",
      "description": "Produces a string representation of a formatted value using the `to_string` function. Operates on values of type `t`, which represent structured data suitable for formatting. Used to generate human-readable output from complex data structures in logging and debugging scenarios.",
      "description_length": 278,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Option",
      "description": "Combines optional values through sequential and parallel operations, supporting failure-aware computation with `let*` and `and*`, and direct value access via `let+` and `and+`. Handles single and paired optional values, enabling safe extraction and composition. Allows chaining of operations that may return `None`, such as parsing nested JSON fields or validating multiple inputs. Examples include safely accessing nested keys in a map or combining results from multiple optional computations.",
      "description_length": 494,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page",
      "description": "handles form elements, links, and images by providing methods to manipulate their states, extract metadata, and generate HTML representations. it works with data types such as form groups, link structures, image objects, and URIs, enabling operations like checking checkboxes, extracting URL information, and converting images to DOM nodes. it supports dynamic form interactions, link parsing, and image rendering in web applications. examples include updating a form field, retrieving a link's text, and generating an image element from a URI.",
      "description_length": 544,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "mechaml",
      "description": "Extracts and processes HTML content, including form fields and submission logic. Operates on parsed DOM structures and raw HTTP responses. Enables automated interaction with web interfaces for data retrieval and input.",
      "description_length": 218,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml",
      "description": "Processes web responses by extracting status codes, headers, and parsed content, while managing agent state through monadic operations. Supports cookie validation, manipulation, and lifecycle control, along with optional value composition for safe computation. Provides formatting capabilities for structured data and enables interaction with web elements like forms, links, and images. Examples include handling redirects, validating cookies against URIs, safely parsing nested JSON, and generating HTML from image URIs.",
      "description_length": 521,
      "index": 23,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 24,
    "meaningful_modules": 24,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 613,
    "min_description_length": 213,
    "avg_description_length": 369.9166666666667,
    "embedding_file_size_mb": 0.08765316009521484
  }
}