{
  "package": "mechaml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 24,
  "creation_timestamp": "2025-07-15T23:11:14.760075",
  "modules": [
    {
      "module_path": "Mechaml.Page.Form.SelectList",
      "library": "mechaml",
      "description": "This module provides functions to interact with HTML select lists, including retrieving items, checking selection states, and modifying selections. It works with `select_list` inputs and their associated `item` type, representing individual options. Use this module to programmatically select or unselect options, retrieve selected values, or check if an option is selected within a form.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.List",
      "library": "mechaml",
      "description": "This module provides sequential and parallel iteration, mapping, and folding operations over lists within the agent monad. It works with lists of values, applying functions that produce agent actions to each element, either in sequence or concurrently. Concrete use cases include processing multiple URLs, forms, or HTML elements while maintaining or utilizing the agent's state, such as submitting forms in sequence or downloading multiple resources in parallel.",
      "description_length": 463,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page.Form.Checkbox",
      "library": "mechaml",
      "description": "This module provides functions to inspect and manipulate checkboxes within a form, including retrieving values, checking or unchecking specific checkboxes, and resetting them to their default state. It works with checkboxes represented as `Mechaml.Page.Form.checkbox Mechaml.Page.Form.input` and operates on the `Mechaml.Page.Form.t` form structure. Use cases include form validation, user input extraction, and simulating user interactions with checkboxes.",
      "description_length": 457,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.RadioButton",
      "library": "mechaml",
      "description": "This module provides functions to retrieve and manipulate radio button values, select and deselect options, and check selection states within a form. It works with `radio_button` inputs, allowing access to their labels, available choices, and selected values. Specific use cases include form validation, user preference selection, and handling mutually exclusive input groups.",
      "description_length": 376,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.Infix",
      "library": "mechaml",
      "description": "This module provides infix operators for chaining monadic actions within the agent's monad, enabling sequential composition of effectful computations. It works with values wrapped in the agent monad, allowing for concise manipulation of HTTP requests, form submissions, and page parsing. Concrete use cases include composing page fetches with subsequent form fills, or processing a sequence of HTML responses while maintaining session state.",
      "description_length": 441,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad.Syntax",
      "library": "mechaml",
      "description": "This module implements monadic operators for chaining and combining agent computations. It provides `let*`, `and*`, `let+`, and `and+` for sequencing and parallel evaluation of actions within the agent monad. These operators work directly with values wrapped in the agent monad type, enabling concise composition of web scraping and interaction tasks such as form submission and page navigation.",
      "description_length": 395,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Form.Field",
      "library": "mechaml",
      "description": "This module provides functions to manipulate and retrieve values from form fields such as text areas, text inputs, password fields, and more. It allows setting and resetting field values, getting current values, and retrieving default values specified in the form. These operations are used when handling user input or pre-filling form data based on existing values.",
      "description_length": 366,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.S",
      "library": "mechaml",
      "description": "This module defines a uniform interface for converting structured data into properly formatted strings suitable for HTML form inputs. It works with abstract types that represent specific input formats like dates, colors, or numerical ranges. Concrete implementations provide `to_string` to serialize values for use in form fields, such as setting a color picker's value or formatting a date for an input field.",
      "description_length": 410,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Option.Syntax",
      "library": "mechaml",
      "description": "This module provides syntactic operators for chaining and combining optional values. It works with OCaml's built-in `option` type to handle sequences of computations that may fail, enabling concise expressions for propagation of `None`. Concrete use cases include parsing optional fields, handling fallback values, and composing functions that return options.",
      "description_length": 359,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page.Image",
      "library": "mechaml",
      "description": "This module provides functions to extract and manipulate image data from a page. It includes operations to retrieve the source URL, parse it into a structured URI, and convert the image into a generic node representation. It works with image elements to support tasks like downloading images, analyzing their placement, or modifying their attributes within a page.",
      "description_length": 364,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.HttpResponse",
      "library": "mechaml",
      "description": "This module provides functions to access the status code, headers, content, and metadata of an HTTP response. It works with the `t` type representing a response, alongside types like `Uri.t` and `Cohttp.Response.t`. Concrete use cases include extracting redirect locations, checking HTTP status codes, and retrieving response headers or body content for further processing.",
      "description_length": 373,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Format.Color",
      "library": "mechaml",
      "description": "This module defines a type `t` representing RGB colors and provides a `make` function to construct color values from red, green, and blue components (0\u2013255). It includes a `to_string` function that converts a color value into a well-formed HTML5 color string (e.g., \"#rrggbb\"). Use this module to generate valid color input values for HTML forms, ensuring correct formatting and validation.",
      "description_length": 390,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page.Form",
      "library": "mechaml",
      "description": "This module enables analysis and manipulation of HTML forms by providing operations to access attributes like action and method, set or clear field values, and convert form components into Soup nodes. It supports querying and filtering input elements\u2014such as checkboxes, radio buttons, text fields, and specialized types like email or date pickers\u2014by type, label, or name, returning sequences or optional values for precise selection. Use this module to programmatically select options in dropdowns, check or uncheck checkboxes, set text input values, or extract selected radio button values, enabling tasks like form validation, data extraction, and automated testing. The module works in tandem with its submodules to provide fine-grained control over individual form components while supporting bulk operations across entire forms.",
      "description_length": 834,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent.Monad",
      "library": "mechaml",
      "description": "This monad enables composing web scraping workflows with error handling and state manipulation for cookies, headers, and HTTP interactions, using Lwt for asynchronous processing. It centers around `Mechaml.Agent.t`, a stateful agent that supports custom headers, redirect handling, and session persistence, and provides core operations for chaining, mapping, and folding over agent actions. Infix operators allow fluent composition of sequential and parallel tasks, such as fetching pages followed by form submissions, while the iteration module supports processing lists of URLs or elements in sequence or concurrently. Together, these components enable complex scraping pipelines that maintain session state and handle dynamic navigation, form interaction, and parallel downloads.",
      "description_length": 782,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Page.Link",
      "library": "mechaml",
      "description": "This module provides functions to extract and manipulate hyperlink data from HTML elements, including retrieving the href attribute, linked text, and URI object. It operates on a custom `t` type representing a link, which is derived from HTML nodes. Concrete use cases include parsing navigation menus, extracting article references, and validating internal or external URLs within a webpage.",
      "description_length": 392,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Cookiejar.Cookie",
      "library": "mechaml",
      "description": "This module represents individual cookies with fields for name, value, expiration, domain, path, and secure flag. It provides functions to create cookies, access their properties, and check if they match a given URI for inclusion in HTTP requests. Use cases include parsing Set-Cookie headers, filtering cookies by domain and path, and constructing Cookie headers for outgoing requests.",
      "description_length": 386,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Time",
      "library": "mechaml",
      "description": "This module defines a time type and provides a `make` function to construct valid time values from hours, minutes, and seconds, returning `None` for invalid inputs. It includes a `to_string` function that converts a time value to a properly formatted string suitable for use in HTML5 time input fields. It is used to safely generate and manipulate time strings for form submissions or UI elements expecting standardized time representations.",
      "description_length": 441,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Format.Date",
      "library": "mechaml",
      "description": "This module defines a date type and provides a `make` function to construct a date from day, month, and year values, ensuring validity. It includes `to_string` to convert the internal date representation into a properly formatted string suitable for HTML5 date inputs. It is used to generate valid date strings for form fields, such as setting values in a web form.",
      "description_length": 365,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Cookiejar",
      "library": "mechaml",
      "description": "This module manages HTTP cookies by combining cookie storage with utilities to extract cookies from server headers and inject them into client requests. It operates on a `t` type that holds a collection of cookies, interacting with `Cohttp.Header.t` and `Uri.t` to handle cookie persistence and selection based on domain, path, and secure requirements. The module supports adding cookies manually or from headers, removing expired entries, and filtering relevant cookies for outgoing requests. Specific use cases include maintaining session state and handling authentication across multiple HTTP transactions.",
      "description_length": 609,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Agent",
      "library": "mechaml",
      "description": "The module provides a web scraping agent for performing asynchronous HTTP requests, parsing and manipulating HTML content, and handling form submissions, cookies, and redirections. It operates on URIs, HTML documents, form elements, and HTTP headers, enabling tasks like extracting structured data from web pages, automating browser-like interactions, and maintaining session state across requests. Its response submodule gives access to HTTP response details such as status codes, headers, and content through types like `t`, `Uri.t`, and `Cohttp.Response.t`, allowing for tasks like checking response statuses or extracting redirect URLs. The monad submodule enables composing complex scraping workflows with error handling and state manipulation, using Lwt for asynchronous execution and supporting fluent composition of sequential and parallel tasks like fetching pages followed by form submissions or processing lists of URLs concurrently.",
      "description_length": 944,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Page",
      "library": "mechaml",
      "description": "This module represents and manipulates HTML documents through the `Mechaml.Page.t` type, offering functions to parse, traverse, and transform content using selectors, attribute filters, and text queries. It supports URI resolution, element extraction, and conversion between HTML strings and Lambdasoup nodes, enabling tasks like scraping page content, navigating DOM structures, and rewriting HTML elements. The module integrates with its submodules to handle images, forms, and links\u2014allowing operations such as extracting image sources, setting form field values, and collecting hyperlink targets. Specific capabilities include downloading images, validating form inputs, and parsing navigation menus by combining direct page analysis with specialized submodules for structured data extraction.",
      "description_length": 797,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml.Option",
      "library": "mechaml",
      "description": "This module enhances handling of optional values by combining core operations with syntactic helpers for chaining and combining. It centers around the `'a option` type, offering functions to extract values with defaults, map transformations, and flatten nested options, while its operators enable concise pipelines that propagate `None`. You can use it to safely access nested fields in data structures, apply fallback logic, or sequence operations that may fail, like parsing or lookup, without deeply nested pattern matching.",
      "description_length": 527,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mechaml.Format",
      "library": "mechaml",
      "description": "This module provides data structures and conversion utilities for working with HTML5 input types such as color, date, and time. It defines abstract operations for constructing and serializing values using `make` and `to_string`, ensuring correct formatting for form submission. Submodules handle specific input types: one represents RGB colors with components 0\u2013255 and outputs strings like \"#rrggbb\", another manages time values with optional validation and HH:MM:SS formatting, and another handles calendar dates with proper validation and YYYY-MM-DD output. These modules are used together to generate and manipulate form input values that conform to HTML5 standards.",
      "description_length": 670,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mechaml",
      "library": "mechaml",
      "description": "This module suite provides a comprehensive toolkit for web interaction, centered around HTTP cookies, HTML documents, and form data. It enables managing cookie state across requests, scraping and manipulating HTML content, and handling form inputs with precise formatting. Key data types include `t` for cookies, `Mechaml.Page.t` for HTML documents, and `'a option` for safe value handling, with operations for parsing, transforming, and serializing structured data. Examples include automating form submissions with session persistence, extracting and processing page elements, and generating valid HTML5 input values.",
      "description_length": 619,
      "index": 23,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 24,
    "meaningful_modules": 24,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 944,
    "min_description_length": 359,
    "avg_description_length": 506.1666666666667,
    "embedding_file_size_mb": 0.08766746520996094
  }
}