{
  "package": "xkbcommon",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:43.290594",
  "modules": [
    {
      "module_path": "Xkbcommon.Mod",
      "library": "xkbcommon",
      "description": "This module provides functions for working with XKB modifier masks, including combining, comparing, and converting modifiers. It operates on the `t` type, which represents a bitmask of modifiers such as Shift, Ctrl, or Alt. Use this module to manipulate and query keyboard modifier states in XKB-based input handling scenarios.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Keymap",
      "library": "xkbcommon",
      "description": "This module manages keymap configurations for keyboard input handling. It provides functions to load keymaps from file descriptors, check key repeat behavior, retrieve and resolve key names, and map modifier names to indices. It works with keycodes, modifier indices, and string identifiers to support applications needing precise keyboard event interpretation.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Context",
      "library": "xkbcommon",
      "description": "Manages XKB context creation for handling keyboard input configurations. Provides the `create` function to initialize a context object, which is used to load and manage keyboard layouts and keymaps. Useful for applications needing to process low-level keyboard events or customize input handling.",
      "description_length": 296,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xkbcommon.Keysym",
      "library": "xkbcommon",
      "description": "This module defines an enumeration of XKB keysyms and provides conversions between integer values and symbolic representations. It includes functions to retrieve and parse keysym names, supporting both case-sensitive and case-insensitive lookups. Use cases include handling keyboard input in X11 applications, mapping key events to symbols, and interpreting key names in configuration files or user interfaces.",
      "description_length": 410,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xkbcommon.State",
      "library": "xkbcommon",
      "description": "This module tracks the state of a keyboard, including key presses, modifier keys, and active keymap group. It provides functions to retrieve keysyms and UTF-8 characters for pressed keys, check modifier status, and update state based on key events or modifier masks. Use it to handle keyboard input in applications like text editors, terminal emulators, or window managers.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Keycode",
      "library": "xkbcommon",
      "description": "This module provides functions for working with XKB keycodes, which are 32-bit integers representing physical keys on a keyboard. It includes operations for converting keycodes to and from strings, checking if a key is a modifier, and determining key equivalence. Concrete use cases include handling keyboard input in X11 applications and mapping key events to actions in window managers or input method editors.",
      "description_length": 412,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon",
      "library": "xkbcommon",
      "description": "This module provides a comprehensive interface for handling keyboard input in XKB-based applications, integrating keymap management, modifier state tracking, and keysym interpretation. It centers around key data types such as keycodes, modifier masks, keymap configurations, and keysyms, offering operations to load, query, and manipulate these elements. You can use it to interpret key events in a terminal emulator, remap keys in a window manager, or convert key presses into characters or symbolic names for user interface or configuration purposes.",
      "description_length": 552,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 552,
    "min_description_length": 296,
    "avg_description_length": 390.14285714285717,
    "embedding_file_size_mb": 0.02586078643798828
  }
}