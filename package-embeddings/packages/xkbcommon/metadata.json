{
  "package": "xkbcommon",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:30:48.467922",
  "modules": [
    {
      "module_path": "Xkbcommon.Keycode",
      "description": "Provides functions to encode and decode values into 32-bit integers, including bitwise operations and range validation. Works with the int32 type to ensure compact representation of unique identifiers. Used to generate unique session tokens and map error codes to numeric representations.",
      "description_length": 288,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xkbcommon.Keysym",
      "description": "Provides conversion between integer representations and symbolic names for keyboard keys, supporting case-insensitive name lookups and raw name-to-code mapping. Operates on integer values and string identifiers for key symbols. Used to translate user input events into human-readable key names or internal key codes.",
      "description_length": 316,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Context",
      "description": "Creates a context object with isolated state, allowing for scoped modifications and resets. Operates on a custom type `t` that encapsulates mutable environment data. Used to manage temporary configuration changes in testing scenarios or nested function calls.",
      "description_length": 259,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Mod",
      "description": "Provides functions to create, compare, and manipulate opaque integer values. Operates on the private type t, ensuring encapsulation of underlying integer representations. Used to enforce type safety in contexts where raw integers should not be directly exposed.",
      "description_length": 261,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xkbcommon.Keymap",
      "description": "Provides functions to create a key mapping from a file descriptor, check if a key repeats, retrieve key names, look up keys by name, and find modifier indices. Works with keycodes, modifiers, and file descriptors. Used to configure keyboard input behavior in low-level applications like terminal emulators or custom input handlers.",
      "description_length": 331,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xkbcommon.State",
      "description": "Provides functions to manage keyboard state, including retrieving key symbols, checking active modifiers, and updating key and modifier states. Operates on a state type encapsulating key mappings and modifier information. Used to track key presses and modifier combinations for input handling in a windowing system.",
      "description_length": 315,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "xkbcommon",
      "description": "Handles key mapping and keyboard state interpretation using key codes, symbols, and groups. Processes key events, layouts, and modifiers to translate input into meaningful character output. Supports layout-specific behavior and language switching in input handling.",
      "description_length": 265,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xkbcommon",
      "description": "Encapsulates keyboard input handling through a set of interrelated functions for encoding and decoding identifiers, mapping key symbols, managing state, and enforcing type safety. It supports operations on integers, key names, and custom state types to translate user input, track key presses, and configure keyboard behavior. Functions include generating unique tokens, resolving key names from codes, and maintaining isolated context states for testing or nested operations. It enables low-level control over keyboard input, from parsing file descriptors to updating modifier states in real-time.",
      "description_length": 598,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 598,
    "min_description_length": 259,
    "avg_description_length": 329.125,
    "embedding_file_size_mb": 0.029500961303710938
  }
}