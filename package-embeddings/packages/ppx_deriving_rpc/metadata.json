{
  "package": "ppx_deriving_rpc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:04:01.418782",
  "modules": [
    {
      "module_path": "Ppx_deriving_rpc.Rpc_of",
      "library": "ppx_deriving_rpc",
      "description": "Converts OCaml type expressions and type declarations into corresponding RPC protocol representations. Works directly with `Ppxlib.core_type` and `Ppxlib.type_declaration` structures, generating `Ppxlib_ast.Ast.expression` outputs. Used to automatically derive RPC serializers for custom types during compilation.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_rpcty.Typ_of",
      "library": "ppx_deriving_rpc",
      "description": "This module generates expressions representing type definitions in the `Rpc.Types` module. It processes OCaml type declarations and core types, producing corresponding `Rpc.Types.typ` expressions and value bindings. It is used to automatically derive runtime representations of types for RPC serialization.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_rpc.Of_rpc",
      "library": "ppx_deriving_rpc",
      "description": "Converts OCaml type expressions and type declarations into corresponding RPC representation expressions. Works with Ppxlib's `core_type` and `type_declaration` structures, generating `expression` values for use in RPC serialization. Enables automatic derivation of RPC encoders for user-defined types during PPX processing.",
      "description_length": 323,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Attrs",
      "library": "ppx_deriving_rpc",
      "description": "This module provides typed attribute getters for extracting values like expressions, strings, and unit from attributes associated with various AST nodes. It supports data types such as label declarations, type declarations, constructor declarations, core types, and row fields. Concrete use cases include retrieving default values, documentation strings, version metadata, and names from attributes in a type-safe manner during PPX rewriter development.",
      "description_length": 453,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_rpcty",
      "library": "ppx_deriving_rpc",
      "description": "This module generates `Rpc.Types.typ` expressions from OCaml type declarations, enabling automatic derivation of runtime type representations for RPC serialization. It processes type definitions and core types, producing corresponding type expressions and value bindings. Concrete use cases include generating serialization metadata for ADTs, records, and recursive types in RPC interfaces.",
      "description_length": 390,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common",
      "library": "ppx_deriving_rpc",
      "description": "This module includes functions for list and string manipulation, such as associative list lookup, string splitting, and partitioning lists based on predicates. It also provides utilities for processing OCaml type declarations and core types, enabling operations like folding over type parameters and generating polymorphic functions or applications. Additionally, it supports extraction of typed attributes and documentation from AST nodes during PPX rewriting, with specific use cases in generating code based on type metadata and annotations.",
      "description_length": 544,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_rpc",
      "library": "ppx_deriving_rpc",
      "description": "This module provides functions to convert OCaml types to and from RPC representations, working directly with `Ppxlib`'s `core_type`, `type_declaration`, and `expression` structures. It includes utilities like `is_option`, `is_string`, and `is_dict` to inspect type properties, and supports generating RPC serialization code during PPX processing. Concrete use cases include automatically deriving RPC encoders and decoders for user-defined types in a type-safe manner.",
      "description_length": 468,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 544,
    "min_description_length": 306,
    "avg_description_length": 399.57142857142856,
    "embedding_file_size_mb": 0.10182666778564453
  }
}