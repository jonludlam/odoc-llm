{
  "package": "nocrypto",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 51,
  "creation_timestamp": "2025-08-15T14:46:40.637141",
  "modules": [
    {
      "module_path": "Nocrypto_entropy_unix",
      "library": "nocrypto.unix",
      "description": "This module seeds the default RNG using the Unix kernel RNG, typically reading from `/dev/urandom`. It provides `initialize` to seed the default generator once and `reseed` to mix additional entropy into a specific generator. Use it to ensure cryptographic randomness in command-line applications or system tools requiring secure RNG initialization without asynchronous dependencies.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Generators.Hmac_drgb.Make",
      "library": "nocrypto",
      "description": "This module implements the HMAC_DRBG random number generation algorithm specified by NIST, using a provided hash function. It maintains internal generator state and produces random bytes in multiples of a fixed block size. Key operations include seeding, reseeding, and generating cryptographically secure random data, suitable for cryptographic key generation or nonce creation.",
      "description_length": 379,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.DES.CBC",
      "library": "nocrypto",
      "description": "This module implements the Data Encryption Standard (DES) block cipher in Cipher Block Chaining (CBC) mode. It provides `encrypt` and `decrypt` functions that operate on `Cstruct.t` data, using a key of type `key` and an initialization vector (IV). The module supports key size queries, block size access, and computes the next IV from a ciphertext for protocols requiring inter-message chaining.",
      "description_length": 396,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Rng.Generators.Hmac_drgb",
      "library": "nocrypto",
      "description": "This module implements the HMAC_DRBG algorithm from NIST, using a specified hash function to generate cryptographically secure random data. It supports operations for seeding, reseeding, and generating random bytes in fixed block sizes, maintaining internal state for deterministic randomness. It is suitable for cryptographic key derivation and nonce generation where HMAC-based randomness is required.",
      "description_length": 403,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES.GCM",
      "library": "nocrypto",
      "description": "Implements AES-GCM encryption and decryption with authenticated data. Accepts a key, initialization vector, optional additional data, and plaintext or ciphertext, producing a sealed message with an authentication tag or verifying and decrypting a sealed message. Works with `Cstruct.t` buffers for all inputs and outputs, handling AES block sizes and GCM-specific operations internally.",
      "description_length": 386,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Generators.Null",
      "library": "nocrypto",
      "description": "This module implements a deterministic random number generator that returns pre-seeded byte sequences unchanged. It operates on a stateful generator type `g`, producing random bytes by cycling through the seed data provided via `reseed`. Useful for testing cryptographic components where predictable randomness is required, such as deterministic signature generation or repeatable encryption operations.",
      "description_length": 403,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Generators.Fortuna",
      "library": "nocrypto",
      "description": "This module implements the Fortuna cryptographically secure pseudorandom number generator (CSPRNG), providing functions to create generator states, generate random bytes, reseed the generator, and feed entropy incrementally. It operates on a generator state type `g` and uses `Cstruct.t` values for byte input and output. It is suitable for applications requiring high-quality randomness, such as cryptographic key generation or nonce creation, where direct control over seeding and entropy accumulation is needed.",
      "description_length": 514,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.DES.ECB",
      "library": "nocrypto",
      "description": "This module implements the Data Encryption Standard (DES) block cipher in Electronic Codebook (ECB) mode. It provides functions to encrypt and decrypt fixed-size blocks of data using a key derived from a secret byte sequence. The module operates on `Cstruct.t` values, with a block size of 8 bytes, and supports key sizes of 8 bytes.",
      "description_length": 333,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES.CTR",
      "library": "nocrypto",
      "description": "This module implements AES in CTR mode, providing functions to generate a keystream, encrypt, and decrypt data using a given key and counter. It operates on `Cstruct.t` values for keys, counters, and messages, with the counter incremented in big-endian for each block. Use cases include secure message encryption and decryption where a unique counter is used per message.",
      "description_length": 371,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES.CCM",
      "library": "nocrypto",
      "description": "This module implements AES encryption in CCM (Counter with CBC-MAC) mode, providing authenticated encryption and decryption operations. It works with AES keys derived from secret data, along with nonce and additional authenticated data (AAD) inputs. It is used to securely encrypt and authenticate data in scenarios like secure communications or data storage where both confidentiality and integrity are required.",
      "description_length": 413,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.DES.CTR",
      "library": "nocrypto",
      "description": "This module implements the DES block cipher in CTR mode, providing symmetric encryption and decryption using a given key and counter. It operates on `Cstruct.t` values for keys, counters, and message data, producing keystream blocks by incrementing the counter in big-endian format. Use it to securely encrypt or decrypt arbitrary byte sequences with DES-CTR, given a proper key and unique initial counter.",
      "description_length": 406,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES.ECB",
      "library": "nocrypto",
      "description": "Implements AES encryption and decryption in ECB mode using keys derived from secret byte sequences. Operates on `Cstruct.t` data for both input and output, requiring strict block size alignment. Suitable for low-level cryptographic operations where ECB's simplicity is acceptable, such as in constrained environments or protocol implementations with fixed-size data blocks.",
      "description_length": 373,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES.CBC",
      "library": "nocrypto",
      "description": "Implements AES encryption and decryption in CBC mode with support for arbitrary initialization vectors. Works with raw byte sequences (`Cstruct.t`) for keys, IVs, and data. Use to securely encode or decode data streams where each message depends on the previous ciphertext block, such as secure communication protocols requiring chained encryption.",
      "description_length": 348,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Make_N",
      "library": "nocrypto",
      "description": "This module generates cryptographically secure random values for a numeric type. It provides functions to sample integers within specified ranges and bit patterns, including uniform selection from intervals and controlled bit-length generation. Concrete use cases include creating random keys, nonces, or bounded integers for cryptographic protocols.",
      "description_length": 350,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.DES",
      "library": "nocrypto",
      "description": "This module implements the Data Encryption Standard (DES) block cipher, providing encryption and decryption operations in ECB, CBC, and CTR modes. It works with fixed-size 8-byte blocks using keys derived from 8-byte byte sequences, operating directly on `Cstruct.t` values. Concrete use cases include secure data transmission over constrained channels and legacy system interoperability where DES is required.",
      "description_length": 410,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Hash.SHA512",
      "library": "nocrypto",
      "description": "Computes SHA-512 hashes and HMACs over arbitrary binary data. Operates on `Cstruct.t` values, maintaining incremental state via `t` for streaming input. Suitable for verifying file integrity, generating message authentication codes, or deriving keys from byte sequences.",
      "description_length": 270,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Int",
      "library": "nocrypto",
      "description": "This module generates secure random integers within specified ranges or bit lengths. It provides functions to produce uniformly random values between 0 and n-1, between low and high-1, and to generate bit-constrained integers with control over the most significant bits. It directly supports cryptographic operations requiring bounded randomness, such as key generation or nonce creation.",
      "description_length": 388,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Dh.Group",
      "library": "nocrypto",
      "description": "This module provides predefined Diffie-Hellman groups standardized in various RFCs and drafts, including OAKLEY and FFDHE parameters. It works with the `group` type from `Nocrypto.Dh`, representing cryptographic groups used for key exchange. These values are used directly to configure secure key agreement protocols in TLS and IPsec implementations.",
      "description_length": 350,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Z",
      "library": "nocrypto",
      "description": "This module implements secure random number generation for arbitrary-precision integers. It provides functions to generate uniform random values within specified ranges, including bounded integers and bit-length constrained values. Typical use cases include cryptographic key generation and sampling from large integer domains.",
      "description_length": 327,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Int64",
      "library": "nocrypto",
      "description": "This module generates secure random 64-bit integers. It provides functions to sample values within specified ranges or with specific bit patterns, including uniform selection from intervals and bit-length constrained generation. It is used for cryptographic operations requiring unpredictable 64-bit integer values.",
      "description_length": 315,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Hash.SHA384",
      "library": "nocrypto",
      "description": "Computes SHA-384 cryptographic hashes and HMAC-SHA384 message authentication codes. Works with `Cstruct.t` for input data and produces fixed-size 48-byte digests. Used to verify data integrity or authenticate messages with a secret key.",
      "description_length": 236,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.Counter",
      "library": "nocrypto",
      "description": "This module provides functions to increment or add values to fixed-size blocks within a `Cstruct.t`, treating the block as a big-endian integer. It supports operations on 1, 2, 4, 8, and 16-byte blocks, with variants for incrementing and adding 32- or 64-bit integers. These operations are useful for implementing counter-based cryptographic modes, such as CTR, where precise and efficient manipulation of counter blocks is required.",
      "description_length": 433,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Rsa.PSS",
      "library": "nocrypto",
      "description": "This module implements PSS signing and verification using a specified hash function. It operates on RSA private and public keys, producing and validating PSS-padded signatures with configurable seed length. Concrete use cases include secure digital signature generation and verification in cryptographic protocols.",
      "description_length": 314,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Numeric.Int",
      "library": "nocrypto",
      "description": "This module provides arithmetic and bitwise operations, integer type conversions, and utilities for bit-length determination and formatted output. It operates on a wrapped integer type (`t`) and supports serialization to/from big-endian binary representations in `Cstruct.t` buffers. These capabilities are particularly useful for cryptographic algorithms and network protocols requiring precise control over integer encoding and endianness.",
      "description_length": 441,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Hash.SHA256",
      "library": "nocrypto",
      "description": "Computes SHA-256 hashes and HMAC-SHA256 authenticators over memory buffers. Works with `Cstruct.t` values for input data and produces fixed-size 32-byte digests. Useful for verifying data integrity, generating unique identifiers, or authenticating messages with a secret key.",
      "description_length": 275,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Hash.MD5",
      "library": "nocrypto",
      "description": "Computes MD5 message digests and HMAC authenticators. Processes data through incremental feeding or one-shot digest operations, producing fixed-size 128-bit hash values. Useful for verifying data integrity or generating short-lived authentication tokens with HMAC.",
      "description_length": 264,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Numeric.Int32",
      "library": "nocrypto",
      "description": "This module provides low-level arithmetic and bitwise operations on 32-bit integers, including addition, shifts, and logical operations, alongside utilities for converting between these integers and big-endian binary representations in Cstruct buffers. It supports precise numeric manipulation required for cryptographic algorithms and systems-level tasks, with functions for serializing 32-bit integers to and from binary data structures. Use cases include cryptographic protocol implementations and network packet encoding/decoding where predictable numeric behavior and binary compatibility are critical.",
      "description_length": 607,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Rng.Generators",
      "library": "nocrypto",
      "description": "This module provides cryptographically secure random number generation using algorithms like Fortuna and HMAC_DRBG, along with a deterministic null generator. It works with generator state types and `Cstruct.t` for byte input and output, enabling direct control over entropy and randomness. Concrete use cases include cryptographic key generation, nonce creation, and testing cryptographic operations with predictable randomness.",
      "description_length": 429,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_stream.ARC4",
      "library": "nocrypto",
      "description": "This module implements the ARC4 stream cipher algorithm for symmetric encryption and decryption of data streams. It operates on `Cstruct.t` buffers, maintaining cipher state in a `key` structure that evolves with each operation. Typical use cases include encrypting network traffic or file contents where streaming processing is required.",
      "description_length": 338,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Numeric.Int64",
      "library": "nocrypto",
      "description": "This module offers arithmetic and bitwise operations for 64-bit integers, including addition, subtraction, shifts, and logical operations, alongside utilities for precise bit-level manipulation. It bridges 64-bit integers and low-level binary representations through conversions to/from Cstruct buffers in big-endian format, supporting fixed-size bit extraction and direct memory writes. These capabilities are particularly useful in cryptographic protocols requiring deterministic integer handling, network byte order serialization, or environments lacking native 64-bit integer support.",
      "description_length": 588,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.S",
      "library": "nocrypto",
      "description": "This module defines standard block cipher modes of operation including ECB, CBC, CTR, GCM, and CCM. It specifies the required interfaces for encryption, decryption, and authentication operations on fixed-size blocks. These modes work directly with byte buffers and keys, enabling secure symmetric encryption for network protocols and data storage formats.",
      "description_length": 355,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Hash.SHA224",
      "library": "nocrypto",
      "description": "Computes SHA-224 cryptographic hashes over arbitrary binary data. It supports incremental hashing via state initialization, data feeding, and finalization to produce a fixed-size 28-byte digest. Useful for generating message authentication codes (HMAC) or verifying data integrity in network protocols and file formats.",
      "description_length": 319,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block.AES",
      "library": "nocrypto",
      "description": "Implements AES encryption and decryption across multiple modes (ECB, CBC, CTR, GCM, CCM) using keys derived from secret byte sequences. Operates on `Cstruct.t` data for keys, initialization vectors, plaintext, and ciphertext, with each mode handling block alignment and chaining logic internally. Suitable for secure communication protocols, authenticated encryption, and low-level cryptographic operations requiring precise control over cipher behavior.",
      "description_length": 454,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.Int32",
      "library": "nocrypto",
      "description": "This module generates secure 32-bit integers with uniform distribution. It provides functions to sample values within specified ranges or with specific bit patterns, including arbitrary intervals and bit-length constraints. Use it to produce cryptographic nonces, bounded random indices, or bit-masked values directly in 32-bit integer format.",
      "description_length": 343,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Numeric.Z",
      "library": "nocrypto",
      "description": "This module offers arbitrary-precision integer arithmetic, bitwise operations, and big-endian serialization/deserialization between integers and memory buffers. It primarily manipulates `Z.t` for precise numeric control and `Cstruct.t` for binary encoding, enabling tasks like cryptographic key generation and protocol-specific integer serialization. The functions are designed for scenarios requiring exact bit-level handling, such as encoding ASN.1 structures or implementing cryptographic algorithms with strict integer representation rules.",
      "description_length": 544,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Dsa.K_gen",
      "library": "nocrypto",
      "description": "Implements deterministic generation of the `k` value used in DSA signing according to RFC6979. Works with a hashing module and a private key to produce a suitable `k` from a message digest. Used to ensure secure and reproducible nonce derivation during digital signature creation.",
      "description_length": 280,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng.S",
      "library": "nocrypto",
      "description": "This module provides operations for generating cryptographically secure random numbers and bytes. It works with basic data types like integers and byte sequences (`Cstruct.t`). Concrete use cases include generating nonces, keys, or random identifiers directly without needing to manage underlying entropy sources.",
      "description_length": 313,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rsa.OAEP",
      "library": "nocrypto",
      "description": "This module implements OAEP padding for RSA encryption and decryption using a specified hash function. It operates on RSA public and private keys with associated message data, ensuring compatibility with PKCS #1 v2.1 standards. Use this module to securely encrypt and decrypt messages where key size constraints and padding correctness are critical.",
      "description_length": 349,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Hash.SHA1",
      "library": "nocrypto",
      "description": "Computes SHA-1 message digests and HMAC-SHA1 authentication codes. Works with `Cstruct.t` buffers for input data and produces fixed-size 20-byte hash outputs. Used for verifying data integrity or generating cryptographic message authentication codes with a secret key.",
      "description_length": 268,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rsa.PKCS1",
      "library": "nocrypto",
      "description": "This module implements PKCS v1.5 padding for RSA signatures and encryption. It provides functions to sign and verify messages using RSA private and public keys, as well as to encrypt and decrypt data. The operations work directly on `Cstruct.t` buffers and require keys of at least `11 + len(message)` bytes.",
      "description_length": 308,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Dh",
      "library": "nocrypto",
      "description": "Implements Diffie-Hellman key exchange with support for generating cryptographic groups, key pairs, and shared secrets. Works with modular prime (MODP) groups defined by modulus, generator, and subgroup order. Used to establish secure communication channels in TLS, IPsec, and other cryptographic protocols requiring ephemeral key agreement.",
      "description_length": 341,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_block",
      "library": "nocrypto",
      "description": "This module implements block cipher encryption and decryption operations for symmetric cryptographic algorithms like AES and DES, supporting modes such as ECB, CBC, CTR, GCM, and CCM. It operates directly on `Cstruct.t` buffers for keys, initialization vectors, plaintext, and ciphertext, handling block alignment and chaining internally. It is used for secure communication protocols, authenticated encryption, and interoperability with systems requiring standard block cipher modes.",
      "description_length": 484,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Numeric",
      "library": "nocrypto",
      "description": "This module implements arithmetic and bitwise operations for fixed-size and arbitrary-precision integers, with support for big-endian binary serialization and deserialization using `Cstruct.t`. It includes modules for 32-bit, 64-bit, and arbitrary-precision integers, offering precise numeric manipulation required for cryptographic algorithms, network protocols, and systems-level tasks. Specific use cases include ASN.1 encoding, key generation, and deterministic handling of integers in cryptographic protocol implementations.",
      "description_length": 529,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rsa",
      "library": "nocrypto",
      "description": "This module implements RSA public-key cryptography with support for key generation, encryption, decryption, and padding schemes. It operates on RSA public and private keys represented as records of modular components, and works directly with `Cstruct.t` buffers for message data. Concrete use cases include secure message encryption with OAEP, digital signatures using PSS, and interoperability with PKCS#1 v1.5 padded formats for legacy systems.",
      "description_length": 446,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Rng",
      "library": "nocrypto",
      "description": "This module generates cryptographically secure random numbers and bytes, providing direct access to operations like `generate` for producing random `Cstruct.t` buffers, and submodules for sampling integers (`Int`, `Int32`, `Int64`) and arbitrary-precision integers (`Z`) with precise range and bit constraints. It supports concrete use cases such as generating cryptographic keys, nonces, and random identifiers, as well as producing prime numbers and safe primes for cryptographic protocols. The module works with `Cstruct.t` for byte sequences and various integer types, using a generator state (`g`) that is typically managed automatically via a default instance.",
      "description_length": 666,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Cipher_stream",
      "library": "nocrypto",
      "description": "This module implements the ARC4 stream cipher for symmetric encryption and decryption of data streams. It operates on `Cstruct.t` buffers, maintaining and updating cipher state through a `key` structure during each encryption or decryption step. It is used for streaming encryption tasks such as securing network communications or encrypting large files incrementally.",
      "description_length": 368,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Hash",
      "library": "nocrypto",
      "description": "This module provides hash and HMAC computation functions for binary data using various algorithms like MD5, SHA1, and SHA2 variants. It operates on `Cstruct.t` buffers, supporting both one-shot and incremental hashing with fixed-size output digests. Concrete uses include data integrity checks, short-lived token generation, and message authentication with secret keys.",
      "description_length": 369,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto.Dsa",
      "library": "nocrypto",
      "description": "Implements the DSA digital signature algorithm with operations for key generation, signing, and signature verification. Works with private and public key types containing modular arithmetic parameters and handles message digests as Cstruct.t values. Used to create and validate digital signatures for messages using DSA key pairs, with support for deterministic nonce generation via RFC6979.",
      "description_length": 391,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nocrypto.Base64",
      "library": "nocrypto",
      "description": "Converts data between binary and Base64-encoded representations using `Cstruct.t` buffers. Provides direct encoding, decoding, and character validation for Base64 operations. Useful when handling binary data in text-based protocols or storage formats that require Base64 encoding.",
      "description_length": 280,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto",
      "library": "nocrypto",
      "description": "This module provides cryptographic operations including hashing, symmetric and asymmetric encryption, random number generation, and Base64 encoding/decoding. It works with binary data via `Cstruct.t`, integer types, and cryptographic key structures. It is used for implementing secure communication protocols, generating and verifying digital signatures, encrypting data, and encoding binary content for text-based systems.",
      "description_length": 423,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nocrypto_entropy_lwt",
      "library": "nocrypto.lwt",
      "description": "This module initializes and periodically reseeds a random number generator using entropy from the Unix kernel RNG via Lwt for asynchronous handling. It works with `Nocrypto.Rng.g` generators and provides background reseeding controlled by `attach` and `stop`, triggered by Lwt event loop wakeups at specified intervals. Use it to maintain a secure RNG state in long-running Lwt-based applications without blocking or manual reseeding.",
      "description_length": 434,
      "index": 50,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 51,
    "meaningful_modules": 51,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 666,
    "min_description_length": 236,
    "avg_description_length": 386.4117647058824,
    "embedding_file_size_mb": 0.7394647598266602
  }
}