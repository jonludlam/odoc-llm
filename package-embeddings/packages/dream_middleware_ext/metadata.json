{
  "package": "dream_middleware_ext",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:21.422446",
  "modules": [
    {
      "module_path": "Dream_middleware_ext.Rate_limiter.TokenBucket",
      "library": "dream_middleware_ext",
      "description": "Implements a token bucket rate limiter with functions to configure bucket size, refill rates, and apply rate limiting to request handlers. It operates on a token bucket data structure that tracks available tokens and refill intervals. Used to control request rates in web services by denying or allowing requests based on token availability.",
      "description_length": 341,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_middleware_ext.Rate_limiter.FixedWindow",
      "library": "dream_middleware_ext",
      "description": "Implements a fixed window rate limiting strategy using a global counter synchronized across requests. It tracks request counts within fixed time intervals, resetting the counter when the window rolls over. Useful for enforcing API request limits like 100 requests per minute per client.",
      "description_length": 286,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Rate_limiter",
      "library": "dream_middleware_ext",
      "description": "This module provides rate limiting functionality using token bucket and fixed window strategies. It supports configuration of bucket sizes, refill rates, and time-based request windows, with operations to check and update request allowances. The token bucket tracks individual token availability for gradual refill, while the fixed window maintains synchronized request counts across clients. You can use it to enforce limits like 500 requests per hour with burst capacity or 100 requests per minute with strict window resets.",
      "description_length": 526,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_middleware_ext.Delay",
      "library": "dream_middleware_ext",
      "description": "This module provides a function `make_delay` that introduces a specified time delay before processing an HTTP request, returning a delayed response. It operates on `Dream.handler`, `Dream.request`, and produces a `Dream.response Lwt.t`. Use this to simulate network latency or throttle request handling in testing and development scenarios.",
      "description_length": 340,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Cors",
      "library": "dream_middleware_ext",
      "description": "This module provides functions to configure and apply CORS policies for handling cross-origin requests in web applications. It supports defining allowed origins, methods, headers, and credentials, and generates appropriate response headers for preflight and regular requests. Concrete use cases include securing API endpoints by restricting origins, enabling credentials for trusted domains, and customizing allowed HTTP methods and headers per route.",
      "description_length": 451,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Traffic_filter",
      "library": "dream_middleware_ext",
      "description": "This module implements traffic filtering logic based on IP addresses, HTTP headers, or cookies, allowing or denying access to specific paths or the root endpoint. It works with Dream HTTP handlers and uses configuration values to define filter types and target paths. Concrete use cases include restricting access to admin routes by IP, blocking requests missing specific headers, or limiting cookie-authenticated routes to predefined paths.",
      "description_length": 441,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext",
      "library": "dream_middleware_ext",
      "description": "This module combines rate limiting, request delays, CORS policies, and traffic filtering to control and shape HTTP request handling. It supports token bucket and fixed window rate limiting, introduces artificial delays with `make_delay`, enforces CORS rules for cross-origin requests, and filters traffic based on IP, headers, or cookies. You can use it to limit API requests to 100 per minute, add latency in testing, restrict origins for security, or block unauthorized access to admin routes by IP.",
      "description_length": 501,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 526,
    "min_description_length": 286,
    "avg_description_length": 412.2857142857143,
    "embedding_file_size_mb": 0.025870323181152344
  }
}