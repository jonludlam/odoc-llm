{
  "package": "dream_middleware_ext",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:02:06.900602",
  "modules": [
    {
      "module_path": "Dream_middleware_ext.Rate_limiter.FixedWindow",
      "library": "dream_middleware_ext",
      "description": "Implements a fixed window rate limiting strategy using a global counter. It tracks request counts within fixed time intervals and rejects requests that exceed the configured limit. This module works with HTTP handlers, request objects, and response promises to enforce rate caps and optionally inject rate limit headers.",
      "description_length": 320,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Rate_limiter.TokenBucket",
      "library": "dream_middleware_ext",
      "description": "Implements a token bucket rate limiter with functions to configure bucket size, refill rate, and interval. It tracks and controls request rates using a shared token bucket state, allowing bursts up to the bucket size while enforcing average rate limits. Use to restrict API requests per client or apply dynamic rate limits based on client identifiers.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_middleware_ext.Traffic_filter",
      "library": "dream_middleware_ext",
      "description": "This module implements a traffic filtering middleware that blocks or allows requests based on IP addresses, headers, or cookies, and applies the filter to specific paths or the root. It works with `traffic_filter_conf`, `filter_type`, and `target_type` to define filtering rules and targets, and integrates directly with Dream handlers. Use cases include restricting access to admin routes by IP, validating requests via specific header values, or limiting access based on cookie content.",
      "description_length": 488,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Rate_limiter",
      "library": "dream_middleware_ext",
      "description": "The module provides rate limiting strategies for HTTP requests using two distinct approaches. The `FixedWindow` submodule enforces limits by tracking request counts within fixed time intervals and rejecting requests that exceed the configured cap, optionally injecting rate limit headers into responses. The `TokenBucket` submodule implements a token bucket algorithm that allows controlled bursts of requests up to a defined capacity while maintaining an average rate limit, making it suitable for API rate control per client or dynamic rate shaping based on identifiers.",
      "description_length": 572,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Cors",
      "library": "dream_middleware_ext",
      "description": "This module provides functions to configure and apply CORS policies for handling cross-origin requests in web applications. It supports defining allowed origins, methods, headers, and credentials through the `cors_conf` type, with support for wildcard, static URLs, or dynamic origin functions. Concrete use cases include securing API endpoints by restricting origins, enabling preflight checks for complex requests, and customizing response headers for cross-domain interactions.",
      "description_length": 480,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dream_middleware_ext.Delay",
      "library": "dream_middleware_ext",
      "description": "Implements a middleware handler that introduces a specified delay in request processing. Accepts a float value for delay duration and wraps a standard request handler to simulate latency. Useful for testing client-side timeouts or backend response delays in web applications.",
      "description_length": 275,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dream_middleware_ext",
      "library": "dream_middleware_ext",
      "description": "This module provides middleware components for web application request handling, including CORS policy enforcement, simulated request delays, rate limiting with fixed window and token bucket algorithms, and traffic filtering based on IP, headers, or cookies. It operates on configurations such as `cors_conf`, `traffic_filter_conf`, and custom handler wrappers, targeting specific routes or global request flows. Use cases include securing APIs with origin restrictions, testing client resilience under latency, controlling API usage per client, and restricting access to sensitive routes based on request metadata.",
      "description_length": 615,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 615,
    "min_description_length": 275,
    "avg_description_length": 443.0,
    "embedding_file_size_mb": 0.10182762145996094
  }
}