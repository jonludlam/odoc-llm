{
  "package": "tip-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:00:43.723427",
  "modules": [
    {
      "module_path": "Tip_loc",
      "library": "tip-parser",
      "description": "This module handles source code location tracking with precise file, line, and column information. It provides functions to create and manipulate location records, convert positions from lexing buffers, and format locations for display or string output. Use cases include error reporting in compilers or parsers, where exact source positions are needed for diagnostics or debugging.",
      "description_length": 382,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tip_ast",
      "library": "tip-parser",
      "description": "This module enables the construction and manipulation of abstract syntax trees for a typed functional language, encompassing type definitions, term representations, function declarations, and proof-oriented statements. It operates on data structures such as typed terms, algebraic data type constructors, and declarations for sorts and functions, with applications in compiler frontends and formal verification systems. Utilities for pretty-printing, source location tracking, and error reporting further support language processing tasks like parsing, transformation, and debugging.",
      "description_length": 583,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tip_lexer",
      "library": "tip-parser",
      "description": "This module implements a lexer for parsing TIP (Theory and Implementation of Programming Languages) input. It provides functions to convert character streams into lexical tokens recognized by the TIP parser, using standard OCaml lexing tables. It is used to tokenize input files or strings for further syntactic analysis by the Tip_parser module.",
      "description_length": 346,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tip_parser",
      "library": "tip-parser",
      "description": "This module parses TIP language syntax into abstract syntax trees, handling types, terms, and statements. It processes a stream of lexical tokens to construct structured representations like function definitions, assertions, and logical expressions. Use it to convert TIP source code into an AST for analysis, verification, or transformation tasks.",
      "description_length": 348,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tip_util",
      "library": "tip-parser",
      "description": "Parses TIP language files or input channels into abstract syntax trees, producing lists of statements or error messages. Works with file paths, input channels, and optionally custom filenames for error reporting. Useful for loading and processing TIP source code in tools like interpreters, linters, or compilers.",
      "description_length": 313,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 583,
    "min_description_length": 313,
    "avg_description_length": 394.4,
    "embedding_file_size_mb": 0.07288646697998047
  }
}