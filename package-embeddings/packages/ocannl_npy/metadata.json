{
  "package": "ocannl_npy",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:55.701687",
  "modules": [
    {
      "module_path": "Npy.Batch_writer",
      "library": "ocannl_npy",
      "description": "Handles writing batches of numerical data to NPZ files. Works with Bigarray.Genarray.t arrays, supporting arbitrary dimensions and layouts. Used to serialize large datasets incrementally without loading the entire dataset into memory.",
      "description_length": 234,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Npy.Npz",
      "library": "ocannl_npy",
      "description": "This module reads and writes NumPy `.npz` archive files, handling compressed arrays stored under string keys. It supports loading arrays into pre-allocated bigarrays or extracting them as packed arrays, with full control over key access and archive traversal. Typical use cases include saving and loading machine learning models or numerical datasets with multiple arrays in a single file.",
      "description_length": 389,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Npy",
      "library": "ocannl_npy",
      "description": "This module provides efficient handling of NumPy file formats using OCaml's `Bigarray` types, supporting memory-mapped access, batched writes, and safe conversions between packed and standard array representations. It enables reading and writing multi-dimensional numerical data with customizable layout and data kinds, facilitating interoperability with Python and large-scale array processing. The first child module allows incremental serialization of large datasets into NPZ files without full in-memory loading, while the second manages compressed `.npz` archives with key-based access for saving and loading complex numerical collections such as machine learning models. Direct APIs support operations like converting `packed_array2` to `Array2.t`, memory-mapping files for zero-copy access, and streaming batches to disk.",
      "description_length": 828,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 828,
    "min_description_length": 234,
    "avg_description_length": 483.6666666666667,
    "embedding_file_size_mb": 0.011307716369628906
  }
}