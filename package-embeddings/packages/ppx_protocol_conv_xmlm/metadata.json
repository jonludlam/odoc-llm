{
  "package": "ppx_protocol_conv_xmlm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:47:32.590633",
  "modules": [
    {
      "module_path": "Protocol_conv_xmlm.Xmlm",
      "library": "ppx_protocol_conv_xmlm",
      "description": "This module enables bidirectional conversion between XML structures and OCaml values, focusing on primitive types, collections, and structured data like records and variants. It operates on `Ezxmlm.node` as the central XML representation, supporting serialization of integers, strings, floats, options, lists, and more, while handling errors through explicit result types or exceptions. Typical use cases include parsing XML configuration files, generating XML payloads for APIs, and ensuring round-trip fidelity for complex data models.",
      "description_length": 537,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_xmlm",
      "library": "ppx_protocol_conv_xmlm",
      "description": "This module converts OCaml values to and from XML structures, handling primitives, lists, options, records, and variants. It uses `Ezxmlm.node` to represent XML data, enabling parsing and generating XML for specific data models. Use it to read XML configs, build API requests, or validate XML round-trips with structured data.",
      "description_length": 326,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 326,
    "avg_description_length": 431.5,
    "embedding_file_size_mb": 0.02940082550048828
  }
}