{
  "package": "ppx_protocol_conv_xmlm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:14.054122",
  "modules": [
    {
      "module_path": "Protocol_conv_xmlm.Xmlm",
      "library": "ppx_protocol_conv_xmlm",
      "description": "This module facilitates XML serialization and deserialization for OCaml primitives (e.g., integers, strings, floats) and structured types (e.g., records, variants, tuples), leveraging `Ezxmlm.node` and `Xmlm.t` as core XML representations. It includes robust error handling, validation, and support for complex data transformations like collections (lists, arrays) and lazy/result-wrapped values, enabling use cases such as XML configuration parsing, data interchange, and document structure preservation.",
      "description_length": 505,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_xmlm",
      "library": "ppx_protocol_conv_xmlm",
      "description": "This module enables XML serialization and deserialization of OCaml primitives and structured types, using `Ezxmlm.node` and `Xmlm.t` for XML representation. It supports records, variants, tuples, lists, and result-wrapped values, with error handling and data validation. You can use it to parse XML configurations, convert between OCaml data and XML documents, and preserve hierarchical data structures during transformation. Examples include converting a record to an XML node or decoding an XML document into a typed OCaml value.",
      "description_length": 531,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 505,
    "avg_description_length": 518.0,
    "embedding_file_size_mb": 0.007686614990234375
  }
}