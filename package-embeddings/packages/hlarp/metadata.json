{
  "package": "hlarp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:35:19.846188",
  "modules": [
    {
      "module_path": "Hlarp.Std.StringMap",
      "description": "This module offers functional operations for managing associative data structures with string keys and generic values, enabling insertion, deletion, lookup, and transformations like mapping and folding. It supports iterative processing of key-value pairs, predicate-based filtering, and conversions between maps and sequences, ideal for scenarios like configuration management or data aggregation. The design emphasizes immutability and composability, allowing efficient manipulation of structured data through higher-order functions.",
      "description_length": 534,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Std.SampleMap",
      "description": "The module provides key-based operations for managing sample-keyed maps, including insertion, deletion, membership checks, and traversal, alongside advanced manipulations like finding extremal bindings, splitting maps, and predicate-driven searches. It works with a parameterized map structure where keys are statically typed as `sample` and values can be of any type, enabling efficient data organization and transformation. Use cases include dynamic configuration management, data indexing, and structured data processing where key-specific lookups and transformations are critical.",
      "description_length": 584,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hlarp.Std.AlleleMap",
      "description": "This module provides standard map operations such as insertion, deletion, lookup, and transformation, along with traversal utilities like finding minimum/maximum bindings and splitting maps. It works with a generic key-value structure where keys are aliased as `allele` and values can be of any type, enabling flexible data association. Use cases include genetic data analysis, where alleles are mapped to annotations or frequencies, and dynamic data restructuring requiring efficient key-based access and modification.",
      "description_length": 519,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Std.Info",
      "description": "Provides conversion of data to a string, generation of CSV headers, and writing/reading CSV rows. Works with a structured record type containing specific fields. Used to serialize and deserialize data from CSV files with custom parsing and formatting.",
      "description_length": 251,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Std.InfoMap",
      "description": "The module provides functions for manipulating key-value maps with `Info.t` keys, supporting operations like insertion, deletion, lookup, transformation, and traversal. It works with a polymorphic variant type `'a t`, enabling flexible value handling and operations such as filtering, merging, and splitting maps. Use cases include managing structured data, processing configurations, and performing efficient key-based queries.",
      "description_length": 428,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Compare.HlarpOutputFiles",
      "description": "Loads sample data from files, mapping base names to information lists, and supports adding or setting up sample configurations with specific string lists and metadata. Works with custom sample maps, string lists, and information tuples. Used to aggregate and manage experimental data outputs for analysis workflows.",
      "description_length": 315,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Compare.AlleleSet",
      "description": "This module provides set operations such as membership checks, additions, removals, unions, intersections, and comparisons, along with higher-order functions for iteration, transformation, and filtering on generic set types. It works with sequences of `Std.allele` elements and generic set structures, enabling tasks like constructing allele sets from data, querying their cardinality, and generating ordered traversals. Specific use cases include manipulating genetic variant data through set unions/intersections and transforming allele collections for analysis.",
      "description_length": 564,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Std",
      "description": "provides functional operations for managing associative data structures with string keys and generic values, along with key-based manipulations for sample-keyed and allele-mapped data, and tools for CSV serialization and deserialization. It includes insertion, deletion, lookup, mapping, folding, and traversal across multiple map types, as well as record-based CSV handling. Users can manage configurations, genetic data, and structured records with immutability and flexibility. Examples include building dynamic configurations, analyzing allele frequencies, and exporting data to CSV formats.",
      "description_length": 595,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Seq2HLA",
      "description": "Processes sequence files by extracting class information, matching filenames against patterns, and scanning directories. Operates on strings, regular expressions, and a list of information records. Parses file content to associate metadata with sequence classes and identifies files matching specific naming conventions.",
      "description_length": 320,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.OptiType",
      "description": "Processes log filenames by extracting suffixes and parsing structured data from content. Uses regular expressions to match and scan files, supporting glob patterns for directory traversal. Handles multi-day logs by selecting the most recent entries.",
      "description_length": 249,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Athlates",
      "description": "Extracts and processes HLA allele data from filenames using a regex pattern, matching specific suffixes and headers. It converts allele strings to HLA class representations and parses structured information from text. Scans directories to aggregate parsed data into key-value maps for further analysis.",
      "description_length": 302,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Prohlatype",
      "description": "Extracts HLA allele information from text using a regex pattern, maps alleles to HLA classes, and processes files in a directory to return sample and info pairs. Operates on strings, regular expression groups, and custom types like `Std.hla_class` and `Std.Info.t`. Parses filenames to identify samples and extract associated genetic data.",
      "description_length": 339,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hlarp.Compare",
      "description": "Combines data loading and set manipulation capabilities, enabling the management of sample configurations and allele-based operations. It handles custom sample maps, string lists, and sets of `Std.allele` elements, supporting actions like adding samples, performing set unions, and filtering genetic data. Users can aggregate experimental outputs, query set properties, and transform allele collections for downstream analysis. Examples include constructing variant sets from multiple samples and comparing allele frequencies across datasets.",
      "description_length": 542,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hlarp.Output",
      "description": "Writes formatted data to an output channel using a list of string and info tuples. Operates on out_channel and Std.Info.t structures. Used to log structured debug information during program execution.",
      "description_length": 200,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "hlarp",
      "description": "Provides functions for parsing and validating HLARP protocol messages, including encoding and decoding binary data into structured records. Operates on byte sequences and custom record types representing protocol headers and payloads. Used to process incoming network traffic and ensure compliance with HLARP message formats.",
      "description_length": 325,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hlarp",
      "description": "manages string-keyed data structures, sequence and log file processing, HLA allele extraction, and data serialization, with support for immutability, pattern matching, and structured output. It handles maps, sets, and custom types like `Std.hla_class` and `Std.Info.t`, enabling operations such as inserting, querying, and transforming genetic and configuration data. Users can parse filenames, extract metadata, and generate CSV or log outputs, performing tasks like analyzing allele frequencies or aggregating sample data. Examples include building dynamic configurations, processing multi-day logs, and exporting structured genetic records.",
      "description_length": 643,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 16,
    "filtered_empty_modules": 5,
    "retention_rate": 0.7619047619047619
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 200,
    "avg_description_length": 419.375,
    "embedding_file_size_mb": 0.058559417724609375
  }
}