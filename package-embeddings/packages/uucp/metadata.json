{
  "package": "uucp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 22,
  "creation_timestamp": "2025-08-15T12:10:33.610227",
  "modules": [
    {
      "module_path": "Uucp.Case.Map",
      "library": "uucp",
      "description": "This module provides direct access to Unicode case mapping properties for individual characters. It includes functions to retrieve lowercase, uppercase, and titlecase mappings as either the character itself or a list of characters representing the mapped form. These functions are used to implement accurate case conversion and caseless comparison in text processing applications.",
      "description_length": 380,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Case.Fold",
      "library": "uucp",
      "description": "Performs case folding on Unicode characters according to the Unicode standard. Returns either the character itself if no folding applies or a list of characters representing the folded form. Useful for implementing case-insensitive string comparisons and normalizations in Unicode text processing.",
      "description_length": 297,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Break.Low",
      "library": "uucp",
      "description": "This module provides low-level integer mappings for Unicode break properties, including line, grapheme cluster, word, sentence, and Indic conjunct breaks. Each break type is represented as an integer index into a corresponding array that maps to high-level property values. It is used primarily for implementing efficient, table-driven text segmentation algorithms where direct access to break property encodings is required.",
      "description_length": 425,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Case.Nfkc_fold",
      "library": "uucp",
      "description": "Performs NFKC case folding on Unicode characters. Returns either the original character or a list of characters representing its normalized, case-folded form. Useful for implementing case-insensitive string comparisons that account for Unicode normalization.",
      "description_length": 258,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Case.Nfkc_simple_fold",
      "library": "uucp",
      "description": "This module maps Unicode characters to their NFKC simple case fold equivalents. It provides a single `fold` function that takes a Unicode character and returns either the character itself or a list of characters representing its normalized, case-folded form. This is useful for implementing case-insensitive string comparisons that account for Unicode normalization and ligature expansions.",
      "description_length": 390,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Block",
      "library": "uucp",
      "description": "This module defines a type `t` representing Unicode blocks and provides functions to relate characters to their corresponding blocks. It includes a list of all blocks paired with their character ranges and a function to determine the block of a given Unicode character. Direct applications include character classification and range-based processing in text handling or font rendering tools.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Cjk",
      "library": "uucp",
      "description": "This module tests Unicode characters for CJK-specific properties such as whether a character is an ideograph, radical, or part of the unified ideograph set. It includes predicates for checking IDS operator properties (unary, binary, trinary) and radical or ideographic status. These functions are used when processing or analyzing CJK script characters, particularly in contexts like text rendering, input methods, or linguistic analysis where character composition and categorization matter.",
      "description_length": 492,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Break",
      "library": "uucp",
      "description": "This module determines text segmentation behavior for Unicode characters according to specific break properties. It provides functions to query line break, grapheme cluster break, word break, sentence break, Indic conjunct break, and East Asian width properties for individual characters, returning enumerated types that classify break behavior. These classifications are used in implementing text layout, input processing, and terminal rendering where precise character boundary detection is required.",
      "description_length": 502,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Num",
      "library": "uucp",
      "description": "This module identifies hexadecimal digits and numeric characters using `is_ascii_hex_digit`, `is_hex_digit`, `numeric_type`, and `numeric_value`. It classifies characters into numeric types like decimal or digit, and extracts numeric values including integers and fractions. Use it to validate or parse numeric Unicode characters, such as checking if a character is a hexadecimal digit or retrieving the numeric value of a Unicode number character.",
      "description_length": 448,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Case",
      "library": "uucp",
      "description": "This module provides functions to check case properties of Unicode characters, such as whether a character is lowercase, uppercase, or case-ignorable. It includes submodules for case mapping, folding, and normalization operations that return case-transformed character sequences. These are used for tasks like case conversion, case-insensitive comparison, and Unicode normalization-aware folding in text processing applications.",
      "description_length": 428,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Gen",
      "library": "uucp",
      "description": "This module tests Unicode characters for specific general properties. It supports operations to check if a character is a default ignorable code point, deprecated, a logical order exception, a noncharacter code point, or a variation selector. These checks are useful for text processing tasks like parsing, normalization, and rendering where certain characters require special handling.",
      "description_length": 386,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Gc",
      "library": "uucp",
      "description": "This module defines the general category property of Unicode characters, represented as a polymorphic variant type `t` with constructors corresponding to Unicode general category values. It provides functions to retrieve the general category of a Unicode character and to compare or print these categories. Use cases include text processing tasks that require distinguishing character types, such as identifying letters, digits, punctuation, or control characters in parsing or formatting logic.",
      "description_length": 495,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Name",
      "library": "uucp",
      "description": "This module provides functions to retrieve the official Unicode name of a character and its associated name aliases, including tags like abbreviation or alternate forms. It operates on Unicode characters (`Uchar.t`) and returns structured data such as strings and tagged alias records. Concrete use cases include displaying human-readable names for characters in debugging tools or rendering alternate names in text processing applications.",
      "description_length": 440,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Id",
      "library": "uucp",
      "description": "This module tests Unicode characters for identifier-related properties and pattern syntax classifications. It provides boolean checks for ID_Start, ID_Continue, XID_Start, XID_Continue, and compatibility math variants, along with Pattern_Syntax and Pattern_White_Space properties. These functions are used to validate identifier formation in programming languages and process Unicode-aware pattern matching syntax.",
      "description_length": 414,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Alpha",
      "library": "uucp",
      "description": "This module tests whether Unicode characters are alphabetic. It provides the function `is_alphabetic` that takes a Unicode character and returns true if the character has the Alphabetic property. This is useful for parsing identifiers in programming languages or validating text input where alphabetic characters are required.",
      "description_length": 326,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Func",
      "library": "uucp",
      "description": "This module tests Unicode characters for specific functional and graphical properties. It operates on `Uchar.t` values, returning boolean results for predicates like `is_dash`, `is_math`, or `is_grapheme_base`. These functions are useful for text processing tasks such as parsing, rendering, or analyzing Unicode sequences in applications like editors, compilers, or natural language processing tools.",
      "description_length": 401,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Age",
      "library": "uucp",
      "description": "This module defines the Unicode Age property, representing the version in which a character was first assigned, with values like `Unassigned` or `Version (major, minor)`. It includes functions to compare age values, format them for output, and retrieve the age of a specific Unicode character. It is used to determine the historical introduction of characters in Unicode, such as filtering or categorizing characters based on their availability in specific Unicode versions.",
      "description_length": 474,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Emoji",
      "library": "uucp",
      "description": "This module tests Unicode characters for emoji-related properties. It identifies emojis, emoji presentation forms, modifiers, modifier bases, emoji components, and extended pictographic characters. Use it to filter or analyze text containing emojis, such as validating emoji sequences or processing emoji-based input in user interfaces.",
      "description_length": 336,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.White",
      "library": "uucp",
      "description": "This module tests whether Unicode characters are classified as white space. It provides the function `is_white_space` that takes a Unicode character and returns true if it is considered white space according to Unicode standards. Useful for parsing and text processing tasks where white space needs to be identified accurately.",
      "description_length": 327,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Hangul",
      "library": "uucp",
      "description": "This module defines the Hangul syllable type property, which classifies Unicode characters into components of Hangul syllables such as leading consonants (`L`), vowels (`V`), and trailing consonants (`T`), as well as combinations like `LV` and `LVT`. It provides the `syllable_type` function to retrieve this classification for a given Unicode character. This is useful for processing Korean text, particularly when decomposing or analyzing Hangul syllables into their constituent parts.",
      "description_length": 487,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Script",
      "library": "uucp",
      "description": "This module defines a type `t` representing Unicode script values and provides functions to query the script and script extensions of Unicode characters. It works with `Uchar.t` characters and returns script identifiers like `Arab`, `Latn`, or `Zyyy`. Use it to determine which writing system a character belongs to, or to check if a character is associated with multiple scripts.",
      "description_length": 380,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp",
      "library": "uucp",
      "description": "This module provides precise queries for Unicode character properties, including case, script, block, and break behavior, along with classifications like alphabetic status, emoji traits, and numeric values. It operates directly on Unicode characters (`Uchar.t`) and returns structured data such as enumerated types, boolean flags, or versioned metadata. Concrete use cases include validating identifier characters in compilers, segmenting text for layout engines, and classifying CJK or Hangul characters for linguistic processing.",
      "description_length": 531,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 22,
    "meaningful_modules": 22,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 258,
    "avg_description_length": 409.45454545454544,
    "embedding_file_size_mb": 0.31911373138427734
  }
}