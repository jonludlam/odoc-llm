{
  "package": "uucp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 22,
  "creation_timestamp": "2025-07-15T23:09:59.351669",
  "modules": [
    {
      "module_path": "Uucp.Case.Map",
      "library": "uucp",
      "description": "This module provides functions to perform case mappings on Unicode characters, including converting to lowercase, uppercase, and titlecase. It operates on individual Unicode characters (`Uchar.t`) and returns either the mapped character(s) or `Self` if no mapping exists. Concrete use cases include implementing case conversion in text processing applications, normalizing user input, and supporting case-insensitive comparisons in Unicode-aware string handling.",
      "description_length": 462,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Case.Nfkc_simple_fold",
      "library": "uucp",
      "description": "This module maps Unicode characters to their NFKC simple case fold equivalents, returning either the original character or a list of characters representing the folded form. It operates directly on `Uchar.t` values, providing case-insensitive normalization suitable for text comparison and indexing. Use it to implement case-insensitive string matching or canonicalization in Unicode-aware applications.",
      "description_length": 403,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Case.Fold",
      "library": "uucp",
      "description": "Performs case folding on Unicode characters according to the Unicode standard. Returns either the character itself if no folding applies or a list of characters representing the folded form. Useful for implementing case-insensitive comparisons and normalizations in text processing applications.",
      "description_length": 295,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Case.Nfkc_fold",
      "library": "uucp",
      "description": "This module performs NFKC case folding on Unicode characters, providing a function to map each character to its normalized, case-insensitive equivalent. It works with `Uchar.t` values, returning either the original character or a list of normalized characters. It is used to implement case-insensitive string comparisons and normalization according to Unicode standards.",
      "description_length": 370,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Break.Low",
      "library": "uucp",
      "description": "This module provides low-level access to Unicode break properties by mapping characters to integer codes for specific break types like line, grapheme cluster, word, sentence, and Indic conjunct breaks. It includes arrays to convert these integers back to their high-level property values, enabling efficient table-based processing. Concrete use cases include implementing custom text segmentation or line breaking algorithms that require direct access to Unicode break property tables.",
      "description_length": 485,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Cjk",
      "library": "uucp",
      "description": "This module tests Unicode characters for CJK-specific properties, including checks for ideographic characters, radical components, and IDS operator properties. It operates on `Uchar.t` values to determine characteristics like whether a character is a unified ideograph or part of the Ideographic Description Sequences. Concrete use cases include validating CJK script components and processing ideographic structure in text layout or input methods.",
      "description_length": 448,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Age",
      "library": "uucp",
      "description": "This module defines the Unicode Age property, representing the version at which a character was first assigned, with unassigned characters marked explicitly. It provides functions to retrieve a character's age, compare age values, and format them for output. Use cases include filtering characters by their introduction version or checking if a character is unassigned.",
      "description_length": 369,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Func",
      "library": "uucp",
      "description": "This module tests Unicode characters for specific functional and graphical properties. It operates on `Stdlib.Uchar.t` values, providing boolean checks for properties like dash, diacritic, grapheme base, math symbols, quotation marks, and regional indicators. Use it to validate or analyze character behavior in text processing, such as identifying extenders in grapheme clustering or detecting math symbols in document parsing.",
      "description_length": 428,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Block",
      "library": "uucp",
      "description": "This module defines a type `t` representing Unicode blocks and provides the `block` function to determine the block of a Unicode character. It includes a list `blocks` mapping each block to its character range. Use cases include character classification and range-based processing of Unicode text.",
      "description_length": 297,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Hangul",
      "library": "uucp",
      "description": "This module defines the Hangul syllable type property, which classifies Unicode characters into components of Hangul syllables such as leading consonants (`L`), vowels (`V`), and trailing consonants (`T`), along with composite types like `LV` and `LVT`. It provides the `syllable_type` function to retrieve this classification for a given Unicode character. This is useful for processing Korean text, particularly when decomposing or analyzing Hangul syllables in input methods or text editors.",
      "description_length": 494,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Gen",
      "library": "uucp",
      "description": "This module tests Unicode characters for specific general properties. It operates on `Stdlib.Uchar.t` values, providing boolean checks for properties like default ignorable code points, deprecation, logical order exceptions, non-characters, and variation selectors. Use it to validate or filter characters based on these specific Unicode properties in text processing or input sanitization tasks.",
      "description_length": 396,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Alpha",
      "library": "uucp",
      "description": "This module tests whether Unicode characters are alphabetic. It provides the function `is_alphabetic` that takes a Unicode character and returns true if the character has the Alphabetic property. This is useful for parsing identifiers in programming languages or validating text input where alphabetic characters are required.",
      "description_length": 326,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Emoji",
      "library": "uucp",
      "description": "This module tests Unicode characters for emoji-related properties. It supports checks for emoji characters, emoji presentation style, modifiers, modifier bases, emoji components, and extended pictographic characters. Use it to validate or process emoji sequences, such as determining if a character should be rendered as an emoji or if it functions as a modifier in an emoji sequence.",
      "description_length": 384,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Id",
      "library": "uucp",
      "description": "This module tests Unicode character properties for identifier and pattern syntax rules. It includes predicates to check if a character is an identifier start or continue (including compatibility math variants) or part of pattern syntax. These functions directly operate on `Uchar.t` values, enabling precise validation of identifiers and patterns in programming language lexers or Unicode-aware parsers.",
      "description_length": 403,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Script",
      "library": "uucp",
      "description": "This module defines a type `t` representing Unicode script values and provides functions to compare and print these values. It maps Unicode characters to their associated script properties using the `script` function and retrieves extended script associations with `script_extensions`. Use this module to determine the writing system of a Unicode character or to handle multilingual text processing tasks requiring script-specific logic.",
      "description_length": 437,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Gc",
      "library": "uucp",
      "description": "This module defines the general category property of Unicode characters, represented as a polymorphic variant type `t` with constructors corresponding to Unicode general category values (e.g., `Ll` for lowercase letters, `Nd` for decimal digits). It provides functions to retrieve the general category of a Unicode character and to compare or print these categories. Use cases include character classification in text processing, such as identifying whitespace (`Zs`), control characters (`Cc`), or punctuation (`Po`).",
      "description_length": 518,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.White",
      "library": "uucp",
      "description": "This module determines whether a Unicode character is classified as whitespace according to the Unicode standard. It provides a single function `is_white_space` that takes a Unicode character and returns a boolean. This is useful for parsing and formatting text where whitespace handling is critical, such as in lexical analyzers or text layout engines.",
      "description_length": 353,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Name",
      "library": "uucp",
      "description": "This module provides functions to retrieve the official name and name aliases of Unicode characters. It operates on `Uchar.t` values, returning the character's name as a string and its aliases as a list of tag-string pairs. Concrete use cases include displaying human-readable names for characters in debugging tools or rendering alternate names in text processing applications.",
      "description_length": 378,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Case",
      "library": "uucp",
      "description": "This module provides Unicode-aware case detection, conversion, and caseless comparison operations for both UTF-8 strings and individual Unicode characters (`Uchar.t`). It includes functions like `is_lower`, `is_upper`, and `casemap_utf_8`, enabling tasks such as case conversion, cased character checks, and case-insensitive string comparisons. Submodules like `Fold` and `Nfkc_fold` extend this functionality with Unicode case folding and NFKC normalization, supporting precise case-insensitive matching and text canonicalization. Examples include converting text to lowercase, normalizing user input, and implementing robust case-insensitive search and comparison logic.",
      "description_length": 672,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp.Break",
      "library": "uucp",
      "description": "This module combines Unicode text segmentation and line breaking properties with low-level access to break classification tables. It defines character-level classifications for line breaks, grapheme clusters, words, sentences, Indic conjuncts, and East Asian width, offering direct lookups and terminal width hints. Operations include querying break properties, mapping characters to integer codes, and converting codes back to property values for efficient text processing. Use cases range from implementing custom line breaking algorithms to rendering text correctly in internationalized UIs and terminals.",
      "description_length": 608,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uucp.Num",
      "library": "uucp",
      "description": "This module tests characters for hexadecimal digit properties and retrieves their numeric type and value. It works with Unicode characters to determine if they are ASCII or general hexadecimal digits, and classifies their numeric type as decimal, digit, none, or numeric. Concrete use cases include parsing numeric characters in Unicode strings and validating hexadecimal representations in identifiers or encodings.",
      "description_length": 416,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uucp",
      "library": "uucp",
      "description": "This module enables precise and efficient analysis of Unicode scalar values through a rich set of character properties, directly supporting operations like case conversion, script detection, and classification by general category, block, or age. Submodules provide targeted functionality for handling CJK ideographs, emoji sequences, identifier syntax, Hangul syllables, and line breaking properties, with concrete operations such as `is_white_space`, `script`, `block`, and `casemap_utf_8`. Developers can validate alphabetic characters, detect emoji presentation styles, or determine character age to filter by Unicode version, all while working with `Uchar.t` values for safe and efficient processing. Specific use cases include parsing programming language identifiers, implementing Unicode-aware text layout, and normalizing user input for case-insensitive matching.",
      "description_length": 871,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 22,
    "meaningful_modules": 22,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 871,
    "min_description_length": 295,
    "avg_description_length": 446.04545454545456,
    "embedding_file_size_mb": 0.08035850524902344
  }
}