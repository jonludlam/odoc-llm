{
  "package": "bin",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:43:35.705980",
  "modules": [
    {
      "module_path": "Bin.Size",
      "library": "bin",
      "description": "This module computes the size of values encoded in a buffer using a `Bin.t` specification. It provides functions to derive size calculations from encodings or values directly, enabling efficient buffer allocation and layout determination for binary data structures like network packets or file formats. It operates on `Bin.t` values and produces size functions that return integers based on the encoded data's structure.",
      "description_length": 420,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bin",
      "library": "bin",
      "description": "This library provides atomic and structured binary encoding/decoding operations for primitive types (integers, characters, strings) and complex layouts resembling C structs, with explicit endianness control. It works directly with byte buffers (`bytes`, `bigstring`, `Bstr.t`) to serialize and deserialize OCaml values like records, variants, and arrays, while its `Size` module calculates storage requirements for precise buffer allocation. It is particularly useful for memory-mapped I/O (e.g., video/audio framebuffers), network protocol implementations, or parsing fixed binary formats without requiring C extensions.",
      "description_length": 621,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 621,
    "min_description_length": 420,
    "avg_description_length": 520.5,
    "embedding_file_size_mb": 0.029397964477539062
  }
}