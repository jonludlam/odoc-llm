{
  "package": "tar",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:13.042241",
  "modules": [
    {
      "module_path": "Tar_gz",
      "library": "tar.gz",
      "description": "This module provides functions to handle compressed tar archives by adding gzip compression or decompression layers to existing tar processes. It works with tar streams and integrates with the `Tar` module's processing pipeline to read from or write to `.tar.gz` files. Concrete use cases include extracting contents from a gzipped tarball or creating a compressed tar archive with specified compression level and modification time.",
      "description_length": 432,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar.Header.Link",
      "library": "tar",
      "description": "Represents link types in tar file headers with variants for standard file types like normal files, directories, symbolic and hard links, and special nodes. Converts link types to string representations for serialization or inspection. Used when constructing or parsing tar archives to correctly identify file metadata and handle extended headers.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tar.Header.Extended",
      "library": "tar",
      "description": "Handles parsing and constructing extended tar headers with support for additional metadata fields like character set, user/group names, and extended file attributes. Works with the `t` record type to represent header data, including optional timestamps, paths, and size information. Used to read and write POSIX.1-2001 extended archive headers during tar file processing.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tar.Syntax",
      "library": "tar",
      "description": "This module provides monadic bind and return operations for composing Tar parsing and serialization tasks. It works with the `Tar.t` type, which represents tar archive entries and their metadata. Use it to chain operations that read from or write to tar files, handling errors and transformations in a structured way.",
      "description_length": 317,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar.Header",
      "library": "tar",
      "description": "This module processes and constructs tar file headers with precise field manipulation, supporting multiple formats like V7, USTAR, and GNU. It provides operations for header serialization, checksum computation, and padding calculation, working with a core `t` record type that represents header data including file metadata, timestamps, paths, and sizes. The link type module defines variants for standard file types\u2014such as normal files, directories, and symbolic links\u2014and converts them to string representations for use in headers. The extended header module adds support for POSIX.1-2001 metadata like character sets and extended attributes, enabling rich tar archive creation and parsing with custom or legacy formats.",
      "description_length": 723,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar",
      "library": "tar",
      "description": "This module handles parsing and constructing tar archives by decoding and encoding headers and file data, working with types like `Header.t`, `Extended.t`, and `decode_state` to represent metadata and decoding progress. It supports streaming extraction via `decode`, writing headers with `encode_header`, and building archives from entries using `out`, enabling tar readers and writers without external I/O dependencies. The monadic module allows chaining parsing and serialization tasks with `bind` and `return`, handling errors and transformations over `Tar.t` entries. Header-specific submodules enable precise manipulation of V7, USTAR, and GNU formats, including checksums, padding, and extended attributes, while the link type module supports standard file types and their string representations.",
      "description_length": 802,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 802,
    "min_description_length": 317,
    "avg_description_length": 498.5,
    "embedding_file_size_mb": 0.02221965789794922
  }
}