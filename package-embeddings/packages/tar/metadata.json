{
  "package": "tar",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:00:23.411217",
  "modules": [
    {
      "module_path": "Tar_gz",
      "library": "tar.gz",
      "description": "This module provides functions to compress and decompress `.tar.gz` archives by wrapping existing Tar operations. It introduces `in_gzipped` to add decompression to input Tar streams and `out_gzipped` to add compression to output Tar streams, both working with Tar's monadic types. Use cases include reading from or writing to gzipped tar archives directly without intermediate files.",
      "description_length": 384,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tar.Header.Link",
      "library": "tar",
      "description": "This module defines types and operations for handling link types in tar file headers. It provides a variant type `t` representing different link types such as hard links, symbolic links, and device nodes, along with the `to_string` function to convert these types to their string representations. It is used when processing or generating tar archives to correctly encode and interpret file metadata.",
      "description_length": 399,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar.Header.Extended",
      "library": "tar",
      "description": "Handles parsing and constructing extended tar headers with support for additional metadata fields like character set, user/group names, and timestamps. Works with the `t` record type to store optional header attributes during tar file processing. Used to read and write POSIX.1-2001 extended headers in tar archives, particularly for preserving file metadata across different systems.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar.Syntax",
      "library": "tar",
      "description": "This module provides monadic sequencing of Tar operations using the `let*` operator, enabling chaining of actions that produce or consume Tar archives. It works with the Tar type `'a Tar.t`, which represents a computation that may read from or write to a Tar archive. Use this module to compose complex Tar manipulations, such as filtering entries during extraction or transforming files during creation, in a concise and sequential style.",
      "description_length": 439,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar.Header",
      "library": "tar",
      "description": "This module processes and constructs tar file headers with precise fields for metadata like file size, permissions, and timestamps. It supports creating headers for different tar formats and includes functions to marshal and unmarshal header data, validate checksums, and manage padding. Concrete use cases include building tar archives with accurate file metadata and parsing existing tar headers for extraction or inspection.",
      "description_length": 427,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tar",
      "library": "tar",
      "description": "This module handles tar archive creation and parsing with precise header manipulation, checksum validation, and padding management. It works with strings, extended headers, and custom IO monads to support both sequential and effectful archive processing. Concrete use cases include building tar files with custom metadata, extracting or filtering entries from existing archives, and transforming file contents during streaming operations.",
      "description_length": 438,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 439,
    "min_description_length": 384,
    "avg_description_length": 411.8333333333333,
    "embedding_file_size_mb": 0.08731269836425781
  }
}