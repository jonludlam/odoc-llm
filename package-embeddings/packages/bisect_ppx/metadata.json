{
  "package": "bisect_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:07:05.917369",
  "modules": [
    {
      "module_path": "Bisect.Runtime",
      "library": "bisect_ppx.runtime",
      "description": "This module tracks code coverage during program execution by maintaining and persisting counters for instrumented source locations. It works with arrays of integers representing coverage points in source files and supports writing coverage data to disk either at program exit or manually. It handles environment variables to control output file paths, logging, and signal handling for coverage data persistence.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect",
      "library": "bisect_ppx.runtime",
      "description": "The module tracks code coverage by maintaining and persisting counters for instrumented source locations using arrays of integers. It supports writing coverage data to disk automatically at program exit or manually, with environment variable control over output paths, logging, and signal handling. Users can capture coverage at runtime, save it to a file, and handle interruptions gracefully to ensure data is not lost. For example, it can log coverage for specific source files, respond to signals like SIGTERM to flush data, and allow manual invocation of data persistence.",
      "description_length": 576,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_common",
      "library": "bisect_ppx.common",
      "description": "This module defines data structures for tracking and persisting code coverage data across different components of Bisect. It includes types for storing visit counts per source file and functions to serialize coverage data to strings, reset counters, and generate unique output filenames. It is used by the instrumenter to register source files, by runtimes to track execution, and by the reporter to process coverage files.",
      "description_length": 423,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_ppx.Exclude_parser",
      "library": "bisect_ppx",
      "description": "Parses exclusion rules from a file, handling tokens like file paths, names, and regex patterns. It processes input using a lexer to build a structured list of exclusion criteria. Useful for filtering files or identifiers during code analysis or test coverage reporting.",
      "description_length": 269,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bisect_ppx.Exclude",
      "library": "bisect_ppx",
      "description": "This module defines types for representing file exclusions using exact names or regular expressions, along with optional exclusion lists per file path. It works with strings, regular expressions, and lists to specify which elements should be excluded. Concrete use cases include filtering out specific files or symbols during code analysis or test coverage reporting.",
      "description_length": 367,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_ppx.Exclude_lexer",
      "library": "bisect_ppx",
      "description": "This module implements a lexer for parsing exclusion rules in string and comment contexts, handling escape sequences and encoding errors. It processes input through Lexing buffers, producing tokens for a paired parser, while managing line counting and character accumulation. Used to interpret exclusion patterns in source code analysis workflows.",
      "description_length": 347,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_ppx.Instrument",
      "library": "bisect_ppx",
      "description": "This module manages runtime configuration for code instrumentation, primarily controlling output file paths, verbosity, and signal handling. It provides mutable references to customize the behavior of instrumentation during program execution. Use this module to adjust where and how instrumentation data is collected and reported.",
      "description_length": 330,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_ppx.Exclusions",
      "library": "bisect_ppx",
      "description": "This module manages lists of excluded top-level declarations and files for code instrumentation. It provides functions to add exclusions by name, from a file, or by filename pattern, and checks whether specific values or entire files are excluded. It is used to control which parts of the code are excluded from analysis or instrumentation tools.",
      "description_length": 346,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bisect_ppx.Register",
      "library": "bisect_ppx",
      "description": "This module manages runtime configuration for coverage analysis, controlling whether instrumentation is active and handling command-line switches. It works with boolean references, command-line arguments, and string identifiers for files and switches. Concrete use cases include enabling or disabling coverage dynamically and excluding specific files from instrumentation.",
      "description_length": 372,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bisect_ppx",
      "library": "bisect_ppx",
      "description": "This module processes exclusion rules for code analysis and instrumentation, supporting file paths, names, and regex patterns. It provides data types for structured exclusion criteria, a lexer for parsing rules with escape sequences, and utilities to manage runtime configuration including output paths and signal handling. Users can define exclusions from files or strings, check if files or symbols should be excluded, and dynamically control instrumentation behavior via command-line switches. Example uses include filtering test coverage data and excluding generated code from analysis.",
      "description_length": 590,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 10,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9090909090909091
  },
  "statistics": {
    "max_description_length": 590,
    "min_description_length": 269,
    "avg_description_length": 403.1,
    "embedding_file_size_mb": 0.036751747131347656
  }
}