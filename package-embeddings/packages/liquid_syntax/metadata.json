{
  "package": "liquid_syntax",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:07:55.186534",
  "modules": [
    {
      "module_path": "Liquid_syntax.Syntax.Object",
      "library": "liquid_syntax",
      "description": "This library offers operations for managing associative maps with string-based keys, supporting dictionary manipulations like insertion, deletion, and updates alongside advanced transformations such as folding, filtering, and mapping. It works with map-like structures that store key-value pairs, enabling efficient traversal, comparison, and conversion to or from lists and sequences. These tools are particularly useful for processing hierarchical data, handling configuration objects, or implementing domain-specific languages where key-value relationships require structured manipulation.",
      "description_length": 592,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_syntax.Syntax.Ctx",
      "library": "liquid_syntax",
      "description": "This module provides functional map-like operations for managing key-value associations with keys of type `Liquid_syntax.Syntax.VariableContext.t` and polymorphic values. It supports transformations through folding, mapping, and filtering, along with sequence-based conversions for serialization or bulk updates, and ordered selection of bindings. These capabilities are suited for scenarios requiring immutable context manipulation, such as processing templating environments or evaluating expressions with scoped variables.",
      "description_length": 525,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Syntax.VariableContext",
      "library": "liquid_syntax",
      "description": "This module represents and compares string-based variable contexts in a liquid syntax environment. It provides a `compare` function to establish a total ordering between variable names. Useful for managing variable scopes and ensuring consistent variable resolution during template parsing.",
      "description_length": 290,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Syntax.LiquidObject",
      "library": "liquid_syntax",
      "description": "This module represents liquid objects as strings and provides a comparison function to order them lexicographically. It works directly with string values to support operations like sorting and equality checks. Concrete use cases include managing identifiers or keys in liquid templates where string-based ordering and comparison are required.",
      "description_length": 342,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.File",
      "library": "liquid_syntax",
      "description": "Reads and writes file contents as strings. Operates on file paths and string data. Use to load templates from disk or save generated output to a file.",
      "description_length": 150,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_syntax.Settings_ctx",
      "library": "liquid_syntax",
      "description": "This module manages currency-related settings within a Liquid syntax context. It provides operations to convert between currency values and syntax values, retrieve preferred currency information from a context, and add settings to a context. Concrete use cases include handling monetary values in templates, ensuring correct currency formatting, and maintaining user-specific currency preferences during evaluation.",
      "description_length": 415,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_syntax.Tokens",
      "library": "liquid_syntax",
      "description": "This module defines token types used in parsing Liquid templates, including control structures like `If`, `EndIf`, and `LexFor`, operators like `Eq` and `Gt`, and values like `LexString` and `LexNumber`. It handles whitespace control with `Trim` and `White`, and represents parsed elements such as raw text, expressions, and logical combinators. It is used internally during lexing to represent and process template syntax, enabling accurate parsing of Liquid constructs like conditionals, loops, and variable expressions.",
      "description_length": 522,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Timezone",
      "library": "liquid_syntax",
      "description": "This module defines a comprehensive set of timezone identifiers as enumerated variants and provides a function to retrieve detailed timezone information, including abbreviation, name, and offsets from UTC and GMT. It works with a custom algebraic data type representing timezones, including a `Custom` variant for arbitrary offsets. Concrete use cases include formatting timestamps with correct local timezone data and converting between time representations in different regions.",
      "description_length": 480,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_syntax.Syntax",
      "library": "liquid_syntax",
      "description": "This module parses and represents templating language syntax, converting input into structured ASTs for evaluation. It handles control structures, variable contexts, and expressions, using tokenization and recursive descent parsing to transform templates into executable forms. Child modules enhance this by providing map-based context management, typed key-value operations, and comparison logic for variables and strings. Together, they enable parsing templates, resolving variables within scoped contexts, and evaluating conditionals or loops against dynamic data.",
      "description_length": 567,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Values",
      "library": "liquid_syntax",
      "description": "This module provides functions for comparing, unwrapping, and validating Liquid syntax values, including equality checks, ordering comparisons, and containment tests in strings or lists. It operates on Liquid values, contexts, objects, and lists, supporting dynamic variable resolution, type coercion, and filtering elements against predicates, with utilities for list processing, key path navigation, and truthiness evaluations.",
      "description_length": 429,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_syntax.Debug",
      "library": "liquid_syntax",
      "description": "This module provides functions to convert Liquid syntax elements\u2014such as tokens, expressions, and abstract syntax trees\u2014into human-readable strings through formatting and pretty-printing. It operates on Liquid-specific data structures like token lists, conditions, and values within contextualized syntax types, enabling use cases such as debugging parsed Liquid code, inspecting intermediate representations, and generating structured diagnostic outputs.",
      "description_length": 455,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Date",
      "library": "liquid_syntax",
      "description": "This module handles date and time operations using the `Calendar` type, providing functions to format dates, retrieve the current date and time, and set timezones. It works with date strings in formats like ISO 8601 and supports custom formatting. Use it to generate timestamps, convert dates to strings, or ensure date output matches a specific format for logging or data serialization.",
      "description_length": 387,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Tools",
      "library": "liquid_syntax",
      "description": "This module provides string and list manipulation operations such as slicing, prefix/suffix modification, membership testing, and element joining with customizable separators. It supports iterative processing through higher-order functions like fold and unfold, working with strings, lists, and generic values. These utilities are useful for text processing, data transformation, and scenarios requiring concise handling of optional values or custom iteration patterns.",
      "description_length": 469,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax.Settings",
      "library": "liquid_syntax",
      "description": "This module defines configuration settings for template rendering, including currency formatting, error handling policies, and logging options. It provides named values for control structures like loops and cycles, along with mappings from currency types to display information. Use this module to customize template behavior, set error responses, and manage localization settings during rendering operations.",
      "description_length": 409,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_syntax",
      "library": "liquid_syntax",
      "description": "This module processes Liquid templates by parsing, evaluating, and rendering structured syntax using tokens, expressions, and contexts. It supports data types such as tokens for control structures and values, syntax trees for template representation, and contexts for variable scoping, with operations for parsing, comparison, and formatting. You can load templates from files, evaluate conditionals and loops with dynamic data, format currency and dates according to localization settings, and manipulate strings and lists during rendering. Examples include generating HTML from dynamic content, formatting prices in different currencies, and transforming date values into localized strings.",
      "description_length": 692,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 692,
    "min_description_length": 150,
    "avg_description_length": 448.26666666666665,
    "embedding_file_size_mb": 0.054920196533203125
  }
}