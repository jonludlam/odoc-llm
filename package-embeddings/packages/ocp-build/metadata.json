{
  "package": "ocp-build",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 59,
  "creation_timestamp": "2025-06-18T16:45:37.178442",
  "modules": [
    {
      "module_path": "Ezcmd.Modules.Arg",
      "description": "Processes command-line arguments, parsing and translating them into structured data for execution. Works with argument specifications, environment data, and command definitions to handle flags, options, and positional arguments. Used to generate help text, validate input, and drive application behavior based on user-provided command-line parameters.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "OcpCompat.StringSet.M",
      "description": "This module offers set-based operations such as membership checks, unions, intersections, and transformations, along with traversal and conversion utilities for generic collections of elements. It handles structured data through sequence-to-container conversions, particularly for string sequences, and supports manipulations like partitioning and cardinality queries. Use cases include data filtering, hierarchical data processing, and format transformations in functional workflows.",
      "description_length": 484,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.StringMap.M",
      "description": "The module offers operations for managing dynamic key-value stores, including insertion, deletion, lookup, and transformation of elements, with support for string-based keys and optional results. It enables traversal, filtering, and merging of data structures, facilitating tasks like configuration management or caching. Specific use cases include iterative processing of stored bindings and sequence-based manipulation of key-value pairs.",
      "description_length": 440,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileDirMaker.Make",
      "description": "Provides operations for directory and file manipulation, including creating, removing, and inspecting directories and files, as well as path string manipulation. Works with the `path` type and Unix statistics structures. Used to build and manage file system structures during automated build processes.",
      "description_length": 302,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpFilename.Op",
      "description": "Performs string concatenation with a slash separator. Operates on string values to construct paths or URLs. Used to combine directory names and file names into full file paths.",
      "description_length": 176,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SimpleConfig.LowLevel",
      "description": "This module handles configuration management through operations like creating, modifying, and querying options, along with type conversion between primitives (int, bool, string) and custom `option_value` types, supporting serialization of complex data structures. It enables parsing and traversal of config files, sections, and option arrays, facilitating tasks such as dynamic configuration updates and data persistence. Specific use cases include validating user input, generating structured output, and integrating with systems requiring bidirectional value transformation.",
      "description_length": 576,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SimpleConfig.Op",
      "description": "Extracts the value from a configured option, raising an exception if absent; assigns a value to a configured option. Works with config_option, a custom type representing optional configuration values. Used to access and update configuration parameters in a system's runtime settings.",
      "description_length": 283,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpManpage.CMDLINER",
      "description": "Prints formatted man page content with optional string substitution, using a custom pager and formatter. Operates on man_block and pager types to render structured documentation. Used to display help messages and command-line interface descriptions in a readable, paginated format.",
      "description_length": 281,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpManpage.RAW",
      "description": "Generates a formatted text representation of a document structure by traversing nested `div` and `span` elements. Processes hierarchical content to produce output suitable for terminal display or simple rendering. Converts structured markup into a linear string with preserved nesting and styling information.",
      "description_length": 309,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.Modules",
      "description": "Processes command-line arguments by parsing and structuring input into executable forms, using specifications, environment data, and command definitions to handle flags, options, and positional arguments. It generates help text, validates inputs, and controls application flow based on user input. Key data types include argument specifications, environment records, and command definitions, with operations for parsing, validation, and execution. Examples include extracting flag values, generating usage messages, and triggering specific application workflows.",
      "description_length": 562,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpToposort.Make",
      "description": "Provides functions to extract a node from a graph element, iterate over edges with a custom action, and retrieve a name string. Operates on a graph structure represented by type `t`. Used to traverse and inspect graph data during build processes.",
      "description_length": 246,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.String403",
      "description": "The module offers string and bytes manipulation, including creation, modification, search, and case transformation, with low-level operations like unsafe_set and blit. It supports text processing and performance-critical tasks, though some bytes functions are deprecated, making it suitable for scenarios requiring direct memory access or efficient string handling. Use cases include substring extraction, concatenation, and character-level analysis.",
      "description_length": 450,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.Char",
      "description": "Converts characters to and from ASCII code points, formats characters as escaped strings, and provides case conversion and comparison operations for ASCII and Unicode characters. Works with individual characters and supports string representation of special characters. Used to process text input, generate safe string outputs, and normalize character case in parsing or formatting tasks.",
      "description_length": 388,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.String",
      "description": "This module offers string and byte manipulation through character-level operations, including case conversion, concatenation, searching, and low-level memory modifications like blitting and filling. It supports tasks such as text formatting, data transformation, and efficient string slicing or inspection. Use cases include processing structured text, optimizing string operations, and handling ASCII-based character adjustments.",
      "description_length": 430,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.IntSet",
      "description": "The module provides operations for manipulating integer sets, including membership checks, unions, intersections, and transformations, alongside querying functions like cardinality and element retrieval. It works with sequences of integers and specialized set structures, enabling efficient set construction and data processing. Use cases include managing unique integer elements, optimizing data transformations, and handling iterable inputs for set-based computations.",
      "description_length": 470,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.StringSet",
      "description": "manages collections of unique string elements through set operations like union, intersection, and membership testing, while supporting conversions between sequences and containers. It provides functions for filtering, partitioning, and querying the size of sets, enabling efficient data manipulation. Operations include transforming string sequences into sets and traversing elements for further processing. Examples include deduplicating log entries, merging user permissions, and analyzing text corpus frequencies.",
      "description_length": 517,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpCompat.IntMap",
      "description": "This module offers a range of operations for manipulating maps with integer keys, including insertion, deletion, lookup, iteration, and transformation of key-value pairs, along with functions to filter, merge, and convert maps to lists or sequences. It specializes in efficiently handling integer-keyed data structures, enabling tasks like finding extreme bindings, applying predicates, or restructuring data for processing. Use cases include managing configuration settings, tracking frequency counts, or optimizing symbolic computations where integer indices are critical.",
      "description_length": 574,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OcpCompat.StringMap",
      "description": "manages string-keyed associative stores with insert, delete, lookup, and transform operations, supporting optional values and structural manipulations. It handles traversal, filtering, and merging of key-value pairs, enabling tasks such as configuration updates and data aggregation. Operations include iterative processing of bindings and sequence-based transformations. Examples include dynamically updating cached values and combining multiple configuration maps into a unified structure.",
      "description_length": 491,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileString.Op",
      "description": "Concatenates two strings with a forward slash, ensuring proper path formatting. It operates on string values and is used to construct file or URL paths dynamically. This function simplifies combining directory and file names in a platform-agnostic way.",
      "description_length": 252,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileGen.Op",
      "description": "Provides a way to access fields of a structured data type using a string key, returning a modified version of the original data. Works with a custom type `t` that represents nested data structures. Used to retrieve and update specific parts of a configuration object during processing.",
      "description_length": 285,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpSubst.M",
      "description": "Provides functions to create and manipulate substitutions that map strings to transformed values of type 'a. Operates on the 'a subst type, which stores string-to-function mappings. Used to apply transformations during parsing or processing, such as replacing placeholders with computed values.",
      "description_length": 294,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpSubst.Static",
      "description": "Provides functions to create and manipulate substitution maps. Operates on arrays of strings and a custom type `t` representing static mappings. Used to replace placeholders in strings with values from an array, supporting both single and iterative substitution.",
      "description_length": 262,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileSig.Op",
      "description": "Provides a function to append a string to a value of type t, enabling fluent construction of path-like structures. Works with the t type, which represents hierarchical or segmented data. Used to build file paths or URL segments by chaining string additions.",
      "description_length": 257,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ocp-build",
      "description": "Provides functions for parsing and generating build configuration files, including reading and writing structured data from disk. Operates on custom record types representing build targets, dependencies, and environment settings. Used to automate project setup and ensure consistent build environments across different systems.",
      "description_length": 327,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FileDirMaker",
      "description": "Manages file system structures through directory and file operations, including creation, deletion, and inspection, along with path manipulation. It uses the `path` type and Unix statistics to handle file system metadata. Operations include building hierarchical directory layouts and generating path strings for automated workflows. Examples include creating nested directories, checking file existence, and constructing absolute paths from relative components.",
      "description_length": 462,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpDate",
      "description": "Provides functions to generate and convert date representations between ISO 8601 strings and timestamp values, using MinUnix.tm as input. Works with custom types iso8601 and timestamp to encode date and time data. Converts system time to ISO 8601 format for logging and serializes timestamps for network transmission.",
      "description_length": 317,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpOption",
      "description": "Applies a function to the value inside an option, returning a new option. Returns a default value when the option is None, and executes a side-effect function if the option is Some. Used to safely transform, extract, or process optional values in workflows requiring explicit handling of absence.",
      "description_length": 296,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SimpleConfigOCaml",
      "description": "Parses configuration files into a structured format using file and input channel inputs. Manages saving key-value pairs and bindings to a buffer with specific value types. Resets internal state and persists configuration data with customizable output formatting.",
      "description_length": 262,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpFilename",
      "description": "Constructs file paths and URLs by concatenating strings with a slash separator. Accepts string inputs and combines them into structured path components. Supports operations like joining directory and file names into a single path. Example: combining \"src/\" and \"main.ml\" into \"src/main.ml\".",
      "description_length": 290,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OnlyWin32",
      "description": "This module offers Windows-specific process management, including execution, waiting, and inter-process communication, alongside file and directory operations via Win32 APIs. It manipulates handles for processes, files, and directories, enabling tasks like altering working directories during process creation or managing low-level file descriptors. Use cases include executing system commands, handling Windows-specific file attributes, or automating directory traversal with platform-optimized routines.",
      "description_length": 505,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SimpleConfig",
      "description": "manages configuration through creation, modification, and querying of options, with support for type conversion between primitives and custom `option_value` types, and serialization of complex structures. It enables parsing of config files, sections, and arrays, allowing dynamic updates and data persistence. Provides functions to extract and assign values to config options, using a custom `config_option` type, and raises exceptions when values are missing. Examples include validating user input, generating structured outputs, and maintaining runtime settings with bidirectional value transformations.",
      "description_length": 606,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SimpleConfigTypes",
      "description": "Provides functions to represent and manipulate configuration options as key-value pairs, where values can be strings, integers, or nested modules. Works with custom types including option_value, option_module, and load_error to handle configuration loading and validation. Used to parse and structure configuration data from files, ensuring type-safe access to nested settings.",
      "description_length": 377,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpStream",
      "description": "Converts a stream to a list, constructs a character stream from a list of strings, and checks if a stream has no elements. Operates on OCaml's stream type and string data. Used to process text input line by line and validate stream contents before further processing.",
      "description_length": 267,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpList",
      "description": "This module offers a range of list manipulation functions, including element extraction (e.g., `last`, `take`, `drop`), transformation (e.g., `tail_map`, `filter_map`), filtering (e.g., `take_while`, `drop_while`), and set-like operations (e.g., `diff`, `setify`, `union_set`). It works with lists of arbitrary types and association lists, enabling tasks like key-value pair management (e.g., `replace_assoc`) and efficient data processing. Specific use cases include cleaning data by removing duplicates, merging lists, or handling conditional element insertion and modification.",
      "description_length": 580,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpManpage",
      "description": "renders structured documentation by processing hierarchical elements and formatting them into paginated output, using custom types to manage content layout and display. It supports string substitution and traversal of nested document nodes to generate readable text for terminals or help systems. Operations include rendering blocks with specific styling and managing page flow through a pager mechanism. Examples include generating CLI help pages and converting markup into styled, line-by-line output.",
      "description_length": 503,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpString",
      "description": "This module offers character-level and substring-based string manipulations, including searching, splitting, replacing, and trimming, with support for customizable predicates and delimiter-driven processing. It operates on strings using patterns, characters, or delimiters to enable precise transformations and analysis. Use cases include parsing structured text, cleaning data, or extracting segments from raw input where fine-grained control over string operations is required.",
      "description_length": 479,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd",
      "description": "Parses and structures command-line input into executable forms using argument specifications, environment records, and command definitions, enabling flag extraction, validation, and workflow triggering. It generates help text and controls application flow based on user input. Key data types include argument specs, environment data, and command definitions, with operations for parsing, validation, and execution. Examples include retrieving boolean flags, generating usage messages, and executing subcommands based on positional arguments.",
      "description_length": 541,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpGenlex",
      "description": "Processes strings into token streams using custom lexing rules, extracting both tokens and their positions. Accepts a parser function that transforms a character stream into a token stream, returning structured results. Used for parsing structured text inputs like configuration files or domain-specific languages.",
      "description_length": 314,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MinUnix",
      "description": "This module offers low-level Unix system operations, including process management (e.g., PID retrieval, process waiting), file I/O (e.g., read/write, file descriptor manipulation), and directory/file metadata handling (e.g., stat, unlink). It works with file descriptors, process IDs, environment variables, file statistics, and timestamps, enabling direct interaction with system calls. Use cases include building system utilities, managing file permissions, or implementing custom process orchestration.",
      "description_length": 505,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpToposort",
      "description": "Extracts nodes, iterates over edges with custom actions, and retrieves names from graph elements represented by type `t`. Supports traversal and inspection of graph structures during build processes. Allows for detailed manipulation and analysis of graph data through targeted operations. Example uses include debugging graph dependencies or generating custom output based on node and edge relationships.",
      "description_length": 404,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FileDir",
      "description": "Creates and manipulates file system structures by generating directory and file paths, performing recursive directory creation, listing contents, and removing items. Operates on `FileGen.t` to represent file and directory paths, enabling controlled interaction with the file system. Used to build directory trees, traverse file structures, and clean up generated content in automated workflows.",
      "description_length": 394,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OcpCompat",
      "description": "combines string, byte, and character manipulation with set and map operations, offering low-level control over text and data structures. It provides functions for case conversion, searching, concatenation, and memory operations, alongside set membership, map lookups, and sequence transformations. Users can perform tasks like normalizing text, deduplicating entries, and managing integer or string-based key-value stores. Examples include processing log files, optimizing string operations, and handling configuration data with efficient lookups and updates.",
      "description_length": 559,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FileSig",
      "description": "Encapsulates hierarchical data manipulation through a type t, allowing sequential addition of string segments to construct complex structures. Offers a fluent interface for building paths, URLs, or directory structures by appending strings in a chainable manner. Supports operations that maintain and transform the internal structure of t during each addition. Example: constructing \"/home/user/docs/file.txt\" by appending \"home\", \"user\", \"docs\", and \"file.txt\" in sequence.",
      "description_length": 474,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileString",
      "description": "Combines string segments into properly formatted paths using a forward slash, handling platform-specific conventions automatically. It processes string inputs and returns a unified path string. This allows for dynamic construction of file or URL paths from separate components. For example, it can merge \"docs\" and \"index.md\" into \"docs/index.md\" or \"user\" and \"profile.jpg\" into \"user/profile.jpg\".",
      "description_length": 399,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpUnix",
      "description": "Provides functions for file system navigation, manipulation, and inspection, including directory and file listing, recursive directory creation and removal, and safe file operations. Works with strings, file permissions, and timestamps to manage file system entities. Used to safely create and remove directory structures, retrieve file metadata, and capture command output as strings.",
      "description_length": 385,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpPervasives",
      "description": "Decrements the integer value stored in a reference. Operates on mutable integer references, allowing in-place modification. Useful for managing counters or state variables in imperative code.",
      "description_length": 191,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OcpHashtbl",
      "description": "Converts between hash tables and lists, increments integer values in hash tables, and checks predicate conditions across all key-value pairs. Operates on hash tables with key-value pairs where the value can be an integer or any type. Useful for validating data integrity, transforming data structures, and modifying counts in associative stores.",
      "description_length": 345,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OcpDebug",
      "description": "Controls debug output verbosity through environment or direct settings, filters messages by source, and routes output to custom handlers. Processes formatted strings with a printf-like interface and manages verbosity levels via integer thresholds. Enables dynamic adjustment of debug logging during runtime.",
      "description_length": 307,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OcpArray",
      "description": "Reverses the elements of an array in place. Operates on OCaml arrays of any type. Useful for modifying data structures directly without creating new copies.",
      "description_length": 156,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpDigest",
      "description": "Converts between digest values and their hexadecimal string representations, and handles direct string encoding/decoding. Works with the Digest.t type, which represents cryptographic hash values. Used to serialize digests for storage or transmission and to reconstruct them from raw string inputs.",
      "description_length": 297,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OnlyUnix",
      "description": "This module offers process control, file manipulation, and inter-process communication capabilities, focusing on Unix system calls for managing processes, file descriptors, and directory handles. It enables low-level file system operations such as directory traversal, permission management, and symlink creation, working with file paths, channels, and ownership metadata. Specific use cases include process piping, file truncation, and secure file system interactions requiring direct access to Unix primitives.",
      "description_length": 512,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "FileOS",
      "description": "Provides operations to access OS-specific file system constants, including Windows detection, path and directory separators, line separators, and buffer size defaults. Works with primitive types such as bool, char, int, and string. Used to handle file path construction, line ending normalization, and I/O buffer configuration across different operating systems.",
      "description_length": 362,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpReuse",
      "description": "Provides functions to retrieve and release byte buffers, enabling efficient memory management. Operates on raw byte sequences and integer indices to access pre-allocated memory blocks. Used in scenarios requiring low-level memory control, such as network I/O or binary data processing.",
      "description_length": 285,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileSel",
      "description": "Provides functions to create and manage file selection processes with customizable filtering, globbing, and error handling. Operates on boolean flags, strings, and custom filter functions to determine file inclusion. Used to build precise file matching logic for tasks like batch processing or configuration scanning.",
      "description_length": 317,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileGen",
      "description": "allows retrieval and modification of nested data structures via string keys, operating on a custom `t` type that represents configurations. It supports traversing and updating fields in a hierarchical manner, enabling dynamic data manipulation. For example, it can extract a value from a deeply nested JSON-like structure or alter a specific configuration parameter. Operations include path-based access, value replacement, and structure preservation during updates.",
      "description_length": 466,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "FileChannel",
      "description": "The module provides file I/O operations for reading and writing entire files, subfiles, lines, and blocks, supporting both bulk and line-by-line processing, as well as iteration over data. It works with in_channels, out_channels (via the `out_file` alias), strings, and arrays/lists of strings, enabling flexible data handling. Use cases include parsing structured text files, efficiently processing large datasets in chunks, and managing output streams with indexed or direct access.",
      "description_length": 484,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OcpSubst",
      "description": "Combines substitution mechanisms for transforming strings using function mappings and static value arrays. Supports operations on 'a subst for dynamic transformations and a custom t type for static replacements. Enables tasks like template expansion, where placeholders are replaced with computed or predefined values. Examples include substituting environment variables in configuration files or generating personalized messages from templates.",
      "description_length": 445,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamllexer",
      "description": "Provides functions to construct a lexer from a list of strings and process input with a lexing buffer, returning parsed tokens. Works with custom token and error types to represent lexical analysis results and issues. Used to parse structured input streams, such as configuration files or domain-specific languages, by converting raw text into a sequence of recognized tokens.",
      "description_length": 376,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PythonConfig",
      "description": "This module offers functions to manipulate configuration data structures, enabling the creation, modification, and querying of sections and key-value pairs with support for diverse value types like strings, integers, and booleans. It facilitates persistent storage and retrieval of these configurations through file operations using a file handle type, suitable for scenarios like application settings management or dynamic data serialization. Specific use cases include initializing default configurations, updating runtime parameters, and saving state across sessions.",
      "description_length": 570,
      "index": 58,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 74,
    "meaningful_modules": 59,
    "filtered_empty_modules": 15,
    "retention_rate": 0.7972972972972973
  },
  "statistics": {
    "max_description_length": 606,
    "min_description_length": 156,
    "avg_description_length": 390.49152542372883,
    "embedding_file_size_mb": 0.2147235870361328
  }
}