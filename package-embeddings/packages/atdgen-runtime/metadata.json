{
  "package": "atdgen-runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 15,
  "creation_timestamp": "2025-08-14T23:28:39.514640",
  "modules": [
    {
      "module_path": "Atdgen_runtime.Json_adapter.Type_field.Default_param",
      "library": "atdgen-runtime",
      "description": "This module defines the default type field name used in JSON objects to indicate the type of the object when deserializing. It provides a single value `type_field_name` set to `\"type\"`, which is used to identify the type field in JSON during adapter processing. This supports deserialization of polymorphic JSON objects where the type field determines which variant to construct.",
      "description_length": 379,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter.Type_field.Make",
      "library": "atdgen-runtime",
      "description": "This module implements JSON normalization and restoration for objects with a type field, converting between arbitrary JSON trees and Atdgen-compatible representations. It operates on `Yojson.Safe.t` values, transforming them based on a specified type field to match expected type definitions. Use it when deserializing and serializing JSON objects that include a discriminant field indicating their variant type.",
      "description_length": 412,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter.Type_and_value_fields.Make",
      "library": "atdgen-runtime",
      "description": "This module provides `normalize` and `restore` functions to convert between JSON trees and Atdgen-compliant representations, specifically handling variant types with tag and value fields. It operates on `Yojson.Safe.t` values, transforming them based on specified tag and payload field names. Use it when working with JSON data that encodes variant types using explicit tag and value fields, such as deserializing external JSON into Atdgen-compatible structures or serializing Atdgen-generated types back into standard JSON.",
      "description_length": 524,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Util.Json",
      "library": "atdgen-runtime",
      "description": "This module facilitates converting JSON values to and from strings, files, and buffers, handling single values, sequences, and lists with customizable formatting and position tracking. It provides mechanisms to manage unknown JSON fields during parsing, enabling error customization or logging through a mutable handler. Use cases include strict schema validation, lenient data ingestion, and precise control over serialization behavior in complex data pipelines.",
      "description_length": 463,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Util.Biniou",
      "library": "atdgen-runtime",
      "description": "This module handles serialization and deserialization of values in the biniou binary format. It provides functions to read from and write to channels or files, supporting efficient data exchange with external systems. Concrete use cases include persisting structured data to disk or transmitting it over network sockets.",
      "description_length": 320,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter.Type_and_value_fields",
      "library": "atdgen-runtime",
      "description": "This module converts JSON representations of variant types using explicit tag and value fields into Atdgen-compliant forms and vice versa. It works directly with `Yojson.Safe.t` values, transforming them based on provided tag and payload field names, supporting optional values and catch-all cases. Use it to deserialize JSON into Atdgen-generated types or serialize such types back into standard JSON when variants are encoded with separate tag and payload fields.",
      "description_length": 465,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter.One_field",
      "library": "atdgen-runtime",
      "description": "This module handles JSON transformations for single-field objects where the field name represents the type of the value. It works with `Yojson.Safe.t` structures, providing `normalize` and `restore` functions to convert between real JSON trees and Atdgen-compatible forms. Use this when serializing or deserializing polymorphic JSON objects that follow this specific tagging convention.",
      "description_length": 386,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Util.Validation",
      "library": "atdgen-runtime",
      "description": "This module provides functions to construct and format validation errors with structured paths, using `path_elem` lists to represent field or index locations in nested data. It supports error creation with optional messages and converts errors to human-readable strings by flattening the path into a dotted/indexed notation. Concrete use cases include reporting deserialization or schema validation failures in generated ATD code.",
      "description_length": 430,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter.Type_field",
      "library": "atdgen-runtime",
      "description": "This module handles JSON normalization and restoration for objects containing a type field that indicates their variant. It converts between raw JSON trees and Atdgen-compatible representations by using a specified field (typically `\"type\"`) to determine the correct variant structure. It operates on `Yojson.Safe.t` values and is used when serializing or deserializing polymorphic JSON objects with a known type discriminant.",
      "description_length": 426,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Ob_run",
      "library": "atdgen-runtime",
      "description": "This module implements binary serialization and deserialization for OCaml data structures using the Biniou format, focusing on low-level operations for handling primitive types, arrays, and optional values. It works directly with Biniou input/output buffers (`Bi_inbuf.t`, `Bi_outbuf.t`) and uses `node_tag` identifiers to manage type-specific encoding during data conversion. Key applications include robust parsing of binary streams with error recovery, efficient array manipulation with index-aware transformations, and cross-language data interchange requiring compact binary representations.",
      "description_length": 596,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atdgen_runtime.Util",
      "library": "atdgen-runtime",
      "description": "This module includes submodules for handling binary and JSON data serialization, parsing, and validation. It works with data types like JSON values, biniou-encoded binary data, and structured validation errors. Use cases include reading and writing JSON or biniou data to files or network streams, handling malformed input during parsing, and generating detailed validation error messages for complex data structures.",
      "description_length": 417,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Ov_run",
      "library": "atdgen-runtime",
      "description": "This module provides functions to validate lists, arrays, and optional values by applying validation logic to each element. It works with polymorphic lists, arrays, and option types, allowing validation errors to be reported with indexed context. Concrete use cases include validating input data structures like configuration settings or API payloads during decoding or deserialization.",
      "description_length": 386,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_runtime.Json_adapter",
      "library": "atdgen-runtime",
      "description": "This module provides functions to transform JSON values between arbitrary structures and Atdgen-compatible representations, specifically for handling polymorphic variants. It supports operations like normalizing and restoring JSON based on type fields, single-field tagging, or explicit tag/value pairs, working directly with `Yojson.Safe.t` trees. Use it to customize JSON serialization and deserialization when dealing with variant types that have specific tagging conventions such as `\"type\"` fields, field names as tags, or separate tag and payload fields.",
      "description_length": 560,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atdgen_runtime.Version",
      "library": "atdgen-runtime",
      "description": "This module defines a single value `version` that holds a string representing the current version of the software. It is typically used to expose the version number to other parts of the application or for reporting purposes. The module works directly with string data to provide version information.",
      "description_length": 300,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atdgen_runtime",
      "library": "atdgen-runtime",
      "description": "This module includes submodules for handling data serialization, validation, and version management. It works with JSON and Biniou data formats, validation errors, and version strings. Use it to serialize and deserialize structured data with customizable tagging strategies, validate complex data structures with detailed error reporting, and manage version information in applications.",
      "description_length": 386,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 15,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9375
  },
  "statistics": {
    "max_description_length": 596,
    "min_description_length": 300,
    "avg_description_length": 430.0,
    "embedding_file_size_mb": 0.2177886962890625
  }
}