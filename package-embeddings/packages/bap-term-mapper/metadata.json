{
  "package": "bap-term-mapper",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-07-15T23:07:05.493456",
  "modules": [
    {
      "module_path": "Bap_bml.Mappers.Nullary",
      "library": "bap-bml",
      "description": "This module manages nullary mapper registrations in the BML DSL, providing operations to register, find, and list named nullary mappers. It works with the `t` type defined in `Bap_bml.Mappers`, representing mapper values. Concrete use cases include extending BML with custom nullary mappers and dynamically querying or overriding existing mappings by name.",
      "description_length": 356,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Predicates.Unary",
      "library": "bap-bml",
      "description": "This module defines and manages unary predicate functions that operate on strings, producing predicate values. It supports operations to register, look up, and list unary predicates by name, enabling dynamic extension of the BML language with custom unary conditions. Use cases include defining named unary checks like `is_digit` or `is_keyword` for term mapping and transformation tasks.",
      "description_length": 388,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Mappers.Unary",
      "library": "bap-bml",
      "description": "This module defines unary mapper functions for transforming terms in the Bap Mapping Language (BML). It operates on strings and produces mappers that modify BML term structures during parsing or evaluation. Use it to implement custom term transformations, such as rewriting specific identifiers or applying semantic rules to single arguments in BML scripts.",
      "description_length": 357,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bml.Predicates.Nullary",
      "library": "bap-bml",
      "description": "This module manages nullary predicate bindings in the BML language, providing operations to register, look up, and list named predicates that take no arguments. It works with the `t` type, representing nullary predicates, and maps them to string names. Concrete use cases include defining and retrieving simple conditions used in term mappings, such as checking if a term is a constant or a specific type of expression.",
      "description_length": 419,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Registry",
      "library": "bap-bml",
      "description": "This module provides operations to register, retrieve, and list named bindings in a key-value store. It works with string keys and arbitrary values of type `t`. Concrete use cases include managing named configurations, plugins, or mappings where dynamic lookup and overriding of values by name is required.",
      "description_length": 306,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Ops-Nullary",
      "library": "bap-bml",
      "description": "This module defines nullary operations for the Bap Mapping Language (BML), which are functions that take no arguments and return a value of type `t`. It works with string-named bindings to nullary functions, enabling registration, lookup, and listing of these functions. Concrete use cases include defining and managing named constants or zero-argument mappers that can be referenced within BML scripts for term mapping tasks.",
      "description_length": 426,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Ops-Unary",
      "library": "bap-bml",
      "description": "This module defines operations for working with unary functions in the Bap Mapping Language (BML). It provides functions to register, look up, and list named unary operations that transform strings into a generic type `t`. These operations are used to extend BML with custom predicates and mappers that process individual terms during mapping tasks.",
      "description_length": 349,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bml.Predicates",
      "library": "bap-bml",
      "description": "This module combines predicate combinators with support for nullary and unary predicate management to enable expressive term matching in BML. It provides the core `t` type representing predicates, along with operations to compose and apply them, while submodules handle named predicate registration and retrieval for both nullary and unary forms. You can define custom conditions like `is_digit` or `is_constant`, then combine them using logical operators to build precise filters over terms. The integration of visitor-based matching with named predicate extensibility supports complex binary analysis workflows directly within BML scripts.",
      "description_length": 641,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Ops",
      "library": "bap-bml",
      "description": "Defines operations for building and manipulating BML terms using nullary and unary constructors. Works directly with the abstract type `t` representing BML expressions. Enables concrete tasks like defining atomic predicates or unary transformations over terms, such as variable binding or term rewriting rules.",
      "description_length": 310,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Mappers",
      "library": "bap-bml",
      "description": "This module implements term transformation logic using mapper functions that operate on BAP's intermediate representation, supporting both unary and nullary mappers for custom transformations on individual terms or entire term graphs. It provides the `t` type for representing mapper values and enables operations like rewriting instruction patterns or normalizing term structures during binary analysis. The nullary mapper submodule handles registration and lookup of named mappers in the BML DSL, allowing dynamic extension and modification of mappings. The unary mapper submodule defines functions that transform BML terms based on string inputs, supporting custom rewrites such as identifier substitution or semantic rule application in BML scripts.",
      "description_length": 753,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml",
      "library": "bap-bml",
      "description": "This module implements a domain-specific language for mapping and transforming terms through customizable predicates and mappers. It provides core types like `t` for representing BML expressions, predicates, and mapper values, along with operations to define, register, and combine nullary and unary functions for term analysis and rewriting. You can create named predicates such as `is_constant`, build transformation rules with mappers, and dynamically extend BML scripts with custom logic for tasks like identifier substitution or instruction pattern rewriting. Submodules support structured extensibility through key-value bindings, predicate combinators, and mapper functions that operate on individual terms or entire term graphs.",
      "description_length": 736,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 753,
    "min_description_length": 306,
    "avg_description_length": 458.27272727272725,
    "embedding_file_size_mb": 0.040366172790527344
  }
}