{
  "package": "bap-term-mapper",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:10:47.572121",
  "modules": [
    {
      "module_path": "Bap_bml.Mappers.Nullary",
      "library": "bap-bml",
      "description": "This module manages nullary mappers in the BML DSL, handling registration, lookup, and listing of named mapper functions that take no arguments. It operates on the `t` type, which represents BML mappers, and uses strings as keys for binding names to mapper values. Concrete use cases include defining and registering custom BML mapper functions like `map_insn` or `map_var`, which can later be referenced by name in BML scripts to transform or analyze program terms.",
      "description_length": 466,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Predicates.Unary",
      "library": "bap-bml",
      "description": "This module manages unary predicate definitions for BML, handling registration, lookup, and listing of named predicates that operate on strings. It works with functions of type `string -> Bap_bml.Predicates.t`, enabling dynamic extension of BML's predicate set. Use cases include adding custom string-based filters or matchers for term mapping in BAP analyses.",
      "description_length": 360,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Mappers.Unary",
      "library": "bap-bml",
      "description": "This module handles unary mappers in the BML DSL, which transform a single input term into a mapped result. It provides operations for registering, finding, and listing unary mapper functions by name, where each mapper takes a string input and returns a mapped term. Use cases include defining custom term transformations for BAP's mapping language, such as renaming registers or adjusting memory addresses during binary analysis.",
      "description_length": 430,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Predicates.Nullary",
      "library": "bap-bml",
      "description": "This module manages nullary predicate bindings in the BML DSL, providing direct registration, lookup, and listing of named predicates with no arguments. It operates on the `t` type defined in `Bap_bml.Predicates`, representing predicate values that can be stored and retrieved by string keys. Use this module to define and access named nullary predicates when extending or customizing term mappings in BAP.",
      "description_length": 406,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Predicates",
      "library": "bap-bml",
      "description": "This module defines predicate values used in the BML DSL for term mapping, with operations to create and manipulate boolean term visitors. It supports nullary and unary predicate handling through dedicated submodules, enabling registration and evaluation of named predicates. Use it to implement custom term matching logic in BAP analyses by defining predicates that filter or classify terms based on specific criteria.",
      "description_length": 419,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml.Mappers",
      "library": "bap-bml",
      "description": "This module implements mapper combinators for the BML DSL, supporting both nullary and unary mapper operations. It works with `t` values representing term mappers and uses string keys for named mapper registration and lookup. Concrete use cases include defining and applying custom term mappings like `map_insn` or `map_var` in BML scripts to manipulate or analyze binary program structures.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bml",
      "library": "bap-bml",
      "description": "This module implements a domain-specific language for mapping terms, providing combinators and operations to define and apply custom term transformations and predicates. It works with term mappers and boolean term visitors, supporting named mapper and predicate registration and evaluation. Use it to write BML scripts that manipulate binary program structures, such as rewriting instructions or variables, or filtering terms based on analysis-specific criteria.",
      "description_length": 462,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 466,
    "min_description_length": 360,
    "avg_description_length": 419.14285714285717,
    "embedding_file_size_mb": 0.10186481475830078
  }
}