{
  "package": "mirage-runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:59.905236",
  "modules": [
    {
      "module_path": "Mirage_runtime_network.Arg",
      "library": "mirage-runtime.network",
      "description": "This module defines Cmdliner argument converters for parsing IP addresses and prefixes. It supports both IPv4 and IPv6 addresses, as well as their prefix representations. These converters are used to directly parse network configuration values from command-line arguments.",
      "description_length": 272,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mirage_runtime_network.V6",
      "library": "mirage-runtime.network",
      "description": "This module defines command-line term parsers for configuring IPv6 networking parameters. It provides functions to specify an IPv6 network prefix, a default gateway, and whether to accept router advertisements. These are used to set up and configure IPv6 network interfaces in MirageOS-based applications.",
      "description_length": 305,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mirage_runtime_network.V4",
      "library": "mirage-runtime.network",
      "description": "This module defines command-line terms for specifying IPv4 network configurations. It provides functions to parse and validate network prefixes and optional gateway addresses. Useful for configuring virtualized network interfaces with specific subnets and routing defaults.",
      "description_length": 273,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mirage_runtime_network",
      "library": "mirage-runtime.network",
      "description": "This module orchestrates network configuration for MirageOS applications by parsing command-line arguments into structured network settings, including IP addressing, DNS resolution, TLS parameters, and syslog integration. It directly supports operations like selecting secure communication protocols, defining HTTP headers, and configuring monitoring targets, while its child modules handle precise parsing of IPv4 and IPv6 configurations, including prefixes, gateways, and router advertisements. Data types such as IP addresses, TLS key pairs, and DNS server lists enable use cases like cloud-deployed virtualized services, TLS-secured hosts, and logging-enabled environments. Command-line configurability allows for flexible deployment scenarios, from adaptive timeout handling to remote syslog aggregation.",
      "description_length": 809,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mirage_runtime.Conv",
      "library": "mirage-runtime",
      "description": "This module provides a command-line converter for setting log reporter thresholds. It works with `Mirage_runtime.log_threshold` values. A concrete use case is configuring logging verbosity levels through command-line arguments.",
      "description_length": 227,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mirage_runtime",
      "library": "mirage-runtime",
      "description": "This module orchestrates runtime configuration and lifecycle management for Mirage unikernels, centering on logging control, command-line parsing, and exit hook registration. It operates on data types like `Cmdliner.Term.t`, `log_threshold`, and unit functions to configure logging levels, parse boot-time arguments, and manage event loop phases. The child module integrates command-line converters for setting log verbosity, enabling concrete workflows such as adjusting logging output via CLI flags. Together, these components support structured unikernel execution from initialization to shutdown.",
      "description_length": 600,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Functoria_runtime",
      "library": "mirage-runtime.functoria",
      "description": "This module handles command-line argument parsing and runtime configuration using Cmdliner terms. It allows registering terms as runtime arguments, evaluating them with `with_argv`, and retrieving exit codes for errors or help requests. Use it to build command-line interfaces where arguments are processed dynamically at runtime, with support for custom sections in generated documentation.",
      "description_length": 391,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 809,
    "min_description_length": 227,
    "avg_description_length": 411.0,
    "embedding_file_size_mb": 0.02583599090576172
  }
}