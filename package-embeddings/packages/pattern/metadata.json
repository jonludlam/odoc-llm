{
  "package": "pattern",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:58.885519",
  "modules": [
    {
      "module_path": "Pattern",
      "library": "pattern",
      "description": "This module provides functions for pattern matching and validation in the context of OCaml AST manipulation. It works with `pattern` values representing syntactic patterns and supports operations like checking expressions against patterns, formatting and reporting match failures, and eliminating type constraints from expressions. Concrete use cases include validating code transformations, enforcing AST structures during analysis, and debugging pattern matching logic in compiler extensions.",
      "description_length": 494,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pattern_ppx",
      "library": "pattern_ppx",
      "description": "This module facilitates the construction and manipulation of OCaml patterns and expressions, focusing on AST-level operations for PPX rewriters. It works with Ppxlib's abstract syntax tree (AST) types to handle pattern matching logic, including tuple decomposition, record field binding, and constructor matching, while supporting extension points for custom syntax transformations. Typical applications include generating code for exhaustive match cases, creating mismatch expressions, and implementing syntactic macros that require precise pattern analysis or restructuring.",
      "description_length": 576,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 576,
    "min_description_length": 494,
    "avg_description_length": 535.0,
    "embedding_file_size_mb": 0.0076904296875
  }
}