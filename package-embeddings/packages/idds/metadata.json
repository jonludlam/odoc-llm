{
  "package": "idds",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:34.845441",
  "modules": [
    {
      "module_path": "Idds.Boolean.Algebra",
      "library": "idds",
      "description": "This module implements a boolean algebra system with variables, supporting logical operations like conjunction, disjunction, and negation. It works with a custom type `t` representing boolean expressions, including constants `fls` and `tru`, and variables declared via `declare_var`. Use cases include symbolic manipulation of boolean formulas, evaluating expressions with `of_bool` and `var`, and checking equivalence with `(==)`.",
      "description_length": 431,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Bdd.Make",
      "library": "idds",
      "description": "This module implements a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs) using a set of named variables. It supports operations such as conjunction, disjunction, and negation on BDDs, and allows comparing BDDs for logical equivalence. Concrete use cases include symbolic model checking, combinatorial circuit verification, and solving constraint satisfaction problems.",
      "description_length": 418,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idds.Boolean",
      "library": "idds",
      "description": "This module implements a Boolean algebra system over a custom type `t`, supporting core operations like `meet`, `join`, `neg`, `implies`, and `equal`, and is suitable for symbolic logic manipulation, circuit simulation, and formal verification. It includes a sub-module that extends the algebra with variables, enabling the construction and evaluation of boolean expressions using `fls`, `tru`, and `declare_var`. You can perform logical reasoning on lattice-based structures, simulate digital circuits using bit vectors, or verify equivalence between expressions with `(==)`. The combined interface allows both abstract algebraic manipulation and concrete modeling of boolean systems with variables.",
      "description_length": 700,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Var",
      "library": "idds",
      "description": "This module manages Boolean variables within decision diagrams using an abstract integer representation, enabling operations to classify roles (input/output), retrieve positional indices, and determine variable ordering relative to the diagram's root. It supports critical tasks like variable comparison, hierarchy management, and string conversion, which are essential for constructing and analyzing structured decision diagrams during logical operations.",
      "description_length": 456,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Dd",
      "library": "idds",
      "description": "This module implements hash-consed decision diagrams with constant-time equality checking, supporting construction of binary trees over boolean variables with `True`, `False`, and `Branch` nodes. It provides operations to create and manipulate decision diagrams using a manager, ensuring structural identity through unique integer IDs. Concrete use cases include symbolic representation of boolean functions and efficient equality checks for automated reasoning tasks.",
      "description_length": 468,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Idd",
      "library": "idds",
      "description": "This module implements operations for constructing and manipulating identity-suppressed decision diagrams, which represent relations over Boolean variables. It supports relational composition, union, transitive closure, and conditional branching, along with Boolean operations like equality and subset checks. These operations are used for symbolic reasoning over state transitions and relational properties in formal verification tasks.",
      "description_length": 437,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Bdd",
      "library": "idds",
      "description": "This module provides a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs) using named variables, enabling efficient representation and logical operations such as conjunction, disjunction, negation, and equivalence checking. It includes a manager for controlling diagram construction and sharing, supporting advanced operations like conditional evaluation and symbolic model checking. Submodules enhance these capabilities by organizing related operations and variable management, allowing tasks such as combinatorial circuit verification and solving constraint satisfaction problems. Example uses include verifying logical equivalence between circuits and performing model checking on complex Boolean expressions.",
      "description_length": 760,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds",
      "library": "idds",
      "description": "This module provides a comprehensive system for symbolic Boolean reasoning using decision diagrams, built around core data types like boolean expressions, hash-consed nodes, and variable hierarchies. It supports algebraic operations such as meet, join, negation, and implication, alongside diagram-specific operations including relational composition, transitive closure, and conditional branching over boolean variables. Users can construct and evaluate complex boolean functions, verify logical equivalence between circuits, and perform symbolic model checking using named variables and efficient equality checks. Specific tasks include simulating digital circuits, solving constraint satisfaction problems, and analyzing state transitions in formal verification.",
      "description_length": 765,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 765,
    "min_description_length": 418,
    "avg_description_length": 554.375,
    "embedding_file_size_mb": 0.029438018798828125
  }
}