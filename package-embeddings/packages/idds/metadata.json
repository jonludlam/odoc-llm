{
  "package": "idds",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:02:52.090549",
  "modules": [
    {
      "module_path": "Idds.Bdd.Make",
      "library": "idds",
      "description": "This module implements a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs) using a set of named variables. It supports operations such as conjunction, disjunction, and negation on BDDs, and allows BDDs to be built from boolean values or variables, with equality checking between BDDs. Concrete use cases include symbolic model checking, combinatorial circuit verification, and solving constraint satisfaction problems.",
      "description_length": 466,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Dd",
      "library": "idds",
      "description": "This module implements hash-consed decision diagrams as finite binary trees with boolean leaves and variable-labeled branches. It provides operations to construct and manipulate decision diagrams using a manager, supporting `branch` creation, constant values, structural equality checks, and string rendering. Concrete use cases include building and evaluating binary decision trees for symbolic computation and logic circuit representation.",
      "description_length": 441,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Var",
      "library": "idds",
      "description": "This module manages Boolean variables as an abstract integer-based type, providing comparison, indexing, and ordering operations to support decision diagram construction. Functions like `inp`, `out`, and `closer_to_root` distinguish input/output roles and determine hierarchical variable relationships, while string conversion enables visualization of internal identifiers. It is critical for formal verification and model checking workflows where variable ordering directly impacts diagram structure and efficiency.",
      "description_length": 516,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Idd",
      "library": "idds",
      "description": "This module implements operations for constructing and manipulating identity-suppressed decision diagrams, which represent relations over Boolean variables. It supports relational composition, union, transitive closure, and conditional branching based on variable values, along with evaluation in a given variable environment. Typical use cases include symbolic representation of state transitions and relational reasoning in model checking.",
      "description_length": 441,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idds.Boolean",
      "library": "idds",
      "description": "This module defines a boolean algebra structure with operations such as conjunction, disjunction, negation, and implication. It works with boolean values and supports building and evaluating logical expressions. Concrete use cases include implementing symbolic logic systems, optimizing boolean circuits, and verifying logical equivalences.",
      "description_length": 340,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idds.Bdd",
      "library": "idds",
      "description": "This module implements logical operations over binary decision diagrams, enabling efficient manipulation of Boolean functions as directed acyclic graphs. It supports construction and evaluation of BDDs using variables and standard Boolean operators such as conjunction, disjunction, negation, and conditional selection. Typical use cases include symbolic model checking, combinatorial problem solving, and circuit design verification where compact representation and fast manipulation of Boolean expressions are required.",
      "description_length": 521,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds",
      "library": "idds",
      "description": "This module implements identity-suppressed decision diagrams for representing and manipulating Boolean relations. It supports operations like relational composition, union, and transitive closure, working with variable-labeled decision diagrams to model state transitions. It is used in symbolic model checking and relational reasoning where compact representation of Boolean functions and their transformations is essential.",
      "description_length": 425,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 340,
    "avg_description_length": 450.0,
    "embedding_file_size_mb": 0.10187339782714844
  }
}