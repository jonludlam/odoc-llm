{
  "package": "idds",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:23.839861",
  "modules": [
    {
      "module_path": "Idds.Bdd.Make",
      "description": "Provides operations to construct and manipulate boolean expressions using binary decision diagrams, including variable declaration, logical conjunction, disjunction, negation, and equality checks. Works with a boolean type `t` that represents BDD nodes and supports boolean values and variables by name. Used to model and evaluate complex logical conditions in formal verification and symbolic reasoning tasks.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Bdd",
      "description": "Constructs and manipulates boolean expressions through binary decision diagrams, supporting variable declaration, logical operations, and equality checks. The core type `t` represents BDD nodes and enables evaluation of complex logical conditions. Operations include conjunction, disjunction, negation, and variable binding by name. Examples include modeling circuit logic, verifying system properties, and performing symbolic analysis of boolean functions.",
      "description_length": 457,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Boolean",
      "description": "Provides operations to create and manipulate boolean expressions, including logical conjunction, disjunction, negation, and comparison. Works with a custom type `t` representing boolean values and variables. Used to construct and evaluate logical expressions based on variable names and boolean values.",
      "description_length": 302,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Dd",
      "description": "Provides operations to construct and manipulate hash-consed binary decision diagrams, including creating constant false and true, branching on variables, and checking structural equality. Works with binary trees where internal nodes represent boolean variables and leaves are boolean values. Used to efficiently represent and evaluate logical expressions, with unique identifiers for fast equality checks and memoization.",
      "description_length": 421,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds.Idd",
      "description": "Provides operations to construct and manipulate identity suppressed decision diagrams, including creating identity and empty relations, converting from BDDs, testing and setting input variables, branching, applying boolean functions, and composing relations. Works with abstract types `t` representing IDD diagrams and `manager` for managing diagram construction. Used to model and evaluate relational transitions, perform relational operations like union and closure, and check structural equality and containment.",
      "description_length": 515,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idds.Var",
      "description": "This module offers operations to compare, serialize, hash, and manipulate abstract boolean variables, which are internally represented as integers but treated as opaque types for safety. It supports determining variable classifications (input/output), analyzing relationships, and converting variables to strings, with a focus on ordered dependency structures. These functionalities are critical for implementing conditional branching logic in decision diagrams, such as in symbolic computation or logic circuit analysis.",
      "description_length": 521,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "idds",
      "description": "Provides operations for constructing and manipulating hash-consed binary decision diagrams (BDDs) and identity-suppressed decision diagrams (IDDs), including node creation, canonical form enforcement, and evaluation under boolean vector environments. Works with boolean vectors and symbolic representations of transition relations. Used to efficiently encode and query state transitions in model checking and formal verification tasks.",
      "description_length": 435,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idds",
      "description": "represents and manipulates logical and relational expressions using binary decision diagrams (BDDs) and identity suppressed decision diagrams (IDDs), with core types for nodes, variables, and managers. It supports logical operations like conjunction, disjunction, and negation, as well as relational operations such as union, composition, and closure, using structured tree representations and hash-consing for efficiency. It enables tasks like circuit modeling, property verification, and symbolic analysis by allowing variable binding, evaluation, and comparison. Examples include constructing boolean functions, analyzing variable dependencies, and performing relational transitions with optimized equality checks.",
      "description_length": 717,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 302,
    "avg_description_length": 472.25,
    "embedding_file_size_mb": 0.029478073120117188
  }
}