{
  "package": "bwd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:11.805370",
  "modules": [
    {
      "module_path": "Bwd.Bwd.Infix",
      "description": "Adds operators to manipulate bidirectional lists, including appending elements and lists to the end or beginning, and prepending lists to a bidirectional list. Works with the `bwd` type and standard lists. Enables concise construction of sequences in proof assistants or symbolic computation systems.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bwd.BwdLabels.Infix",
      "description": "Adds infix operators for manipulating bidirectional lists, including appending elements, prepending lists, and extending lists. Operates on `bwd` types and lists of arbitrary elements. Used to construct and transform sequences in a concise, readable manner during list processing tasks.",
      "description_length": 286,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.Bwd",
      "description": "Provides operations for working with bidirectional lists, where all indices and iterations count from the right. Supports `bwd` type manipulation with prepend, append, and conversion to and from standard lists. Enables efficient sequence construction and manipulation in proof assistants or symbolic systems. Examples include building lists from the right, reversing operations via snoc, and using infix operators for concise expressions.",
      "description_length": 438,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.BwdLabels",
      "description": "Provides operations for working with backward lists, where all indices and iterations count from the right. Supports `bwd` types with infix operators for appending, prepending, and extending, along with conversions to and from standard lists. Functions like `snoc`, `append`, and `mapi` operate from the right, enabling reverse processing of elements. Examples include building reversed sequences, transforming elements in reverse order, and combining lists with right-oriented logic.",
      "description_length": 484,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bwd",
      "description": "Processes bidirectional Unicode text by offering normalization, decomposition, and recomposition functions for Unicode code points. It operates on strings and character sequences, handling combining marks and grapheme clusters. Used to ensure consistent text representation in internationalized applications and text processing pipelines.",
      "description_length": 338,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd",
      "description": "Operates on right-counting lists with specialized operations for manipulation and transformation. Supports `bwd` type constructions using prepend, append, and snoc, along with conversions to standard lists. Enables reverse processing through functions like `mapi` and infix operators for concise list building. Examples include creating reversed sequences, applying transformations from the right, and combining lists with right-oriented logic.",
      "description_length": 444,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 484,
    "min_description_length": 286,
    "avg_description_length": 381.6666666666667,
    "embedding_file_size_mb": 0.02225208282470703
  }
}