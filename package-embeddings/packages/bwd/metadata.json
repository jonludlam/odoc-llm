{
  "package": "bwd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:16.196045",
  "modules": [
    {
      "module_path": "Bwd.BwdLabels.Infix",
      "library": "bwd",
      "description": "This module provides infix operators for working with backward lists, enabling concise snoc, append, and prepend operations using intuitive symbols like `<:`, `<@`, and `@>`. It supports the `Bwd.bwd` type for backward lists and standard lists, facilitating seamless conversions and manipulations. Concrete use cases include building and transforming backward lists with right-to-left semantics, such as processing sequences where new elements are frequently added to the end, and converting between backward and standard lists for interoperability.",
      "description_length": 549,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bwd.Bwd.Infix",
      "library": "bwd",
      "description": "This module provides infix operators for manipulating backward lists, including appending, prepending, and snoc operations. It works with the `bwd` type and standard lists, enabling concise syntax for list construction and transformation. Concrete use cases include building backward lists with intuitive operators and converting between backward and standard lists using `to_list` and `of_list`.",
      "description_length": 396,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.BwdLabels",
      "library": "bwd",
      "description": "This module offers a specialized structure for right-oriented list manipulation, where elements are efficiently added to the end using snoc and processed in right-to-left order. It centers around the `Bwd.bwd` type, supporting indexed access, mapping, folding, and filtering with all indices and iterations anchored from the right, such as `nth`, `mapi`, and `fold_left`. The child module introduces infix operators like `<:`, `<@`, and `@>` for expressive list construction and transformation, enabling idioms like appending and prepending with standard syntax. Use cases include building and analyzing sequences with right-heavy access patterns, such as parsing stacks, maintaining append-only histories, or transforming nested structures where the most recent elements are most relevant.",
      "description_length": 790,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.Bwd",
      "library": "bwd",
      "description": "This module implements a specialized list structure optimized for right-to-left processing, supporting operations like prepending, snoc, and right-indexed transformations. It provides core functions for constructing and manipulating backward lists, including folds, maps, filters, and conversions to standard lists, with iteration and indexing aligned from the right. The child module adds infix operators for seamless list construction, enabling intuitive syntax for appending, prepending, and snoc operations between backward and standard lists. Use cases include parsing algorithms, sequence manipulation, and domains where right-aligned processing simplifies logic.",
      "description_length": 669,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bwd",
      "library": "bwd",
      "description": "This module provides a right-oriented list structure optimized for efficient end additions and right-to-left processing. It centers on the `bwd` type with operations like `snoc`, `mapi`, `fold_left`, and `nth`, all indexed from the right, along with infix operators `<:`, `<@`, and `@>` for expressive list construction. It supports use cases such as parsing stacks, append-only histories, and right-aligned sequence transformations.",
      "description_length": 433,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 790,
    "min_description_length": 396,
    "avg_description_length": 567.4,
    "embedding_file_size_mb": 0.018614768981933594
  }
}