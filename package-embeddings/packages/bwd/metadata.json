{
  "package": "bwd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:14.647603",
  "modules": [
    {
      "module_path": "Bwd.Bwd.Infix",
      "library": "bwd",
      "description": "This module defines infix operators for manipulating backward lists, including appending elements and combining with standard lists. It provides `<:` to add an element to the end, `<@` to concatenate a list, and `@>` to prepend a backward list to a standard list. These operations support concise syntax for building and transforming backward lists in sequence processing tasks.",
      "description_length": 378,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.BwdLabels.Infix",
      "library": "bwd",
      "description": "This module provides infix operators for manipulating backward lists, including appending elements and combining with standard lists. It defines operations like `<:` for adding elements to the end and `<@` for appending lists. These operators simplify common list-building tasks in a left-to-right readable syntax.",
      "description_length": 314,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.Bwd",
      "library": "bwd",
      "description": "This module offers list-like operations optimized for a reversed sequence structure, supporting mapping, folding, filtering, and indexed traversal. It operates on reversed lists and standard lists, enabling conversions between both forms and combining sequences through dedicated operators. Particularly useful for scenarios requiring efficient front-append operations or processing elements in reverse order while maintaining compatibility with conventional list workflows.",
      "description_length": 474,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bwd.BwdLabels",
      "library": "bwd",
      "description": "This library component offers list manipulation utilities optimized for a reversed list structure, supporting operations like element-wise transformations, conditional filtering, and dual-list folding with indexed access. It works with a specialized bidirectional list type, enabling efficient appending via `snoc` and conversion to standard lists for interoperability. Specific utilities include left-to-right infix syntax for list assembly, equality checks, and partitioning, making it suitable for incremental list construction or processing sequences where tail-first accumulation is advantageous.",
      "description_length": 601,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bwd",
      "library": "bwd",
      "description": "This module provides list-like operations optimized for reversed sequences, supporting mapping, folding, filtering, and indexed traversal over reversed and standard lists. It enables efficient front-append operations and conversion between list forms, with dedicated operators for combining sequences. Concrete use cases include incremental list construction, processing elements in reverse order, and scenarios requiring tail-first accumulation or left-to-right infix syntax for list assembly.",
      "description_length": 494,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 601,
    "min_description_length": 314,
    "avg_description_length": 452.2,
    "embedding_file_size_mb": 0.07286930084228516
  }
}