{
  "package": "html_of_jsx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:57:19.591310",
  "modules": [
    {
      "module_path": "JSX.Debug",
      "library": "html_of_jsx",
      "description": "Converts a JSX element into a structured representation for inspection, allowing examination of HTML elements, strings, and nested components. Works with `html_element` and recursively builds a tree of `element` values, including tags, attributes, and children. Useful for debugging UI components by visualizing their structure during development.",
      "description_length": 347,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "JSX.Html",
      "library": "html_of_jsx",
      "description": "Handles low-level HTML element validation and string escaping for JSX transformations. Works directly with string tags and buffers to determine element types and safely inject content. Used during JSX compilation to ensure proper HTML/SVG tag handling and prevent injection vulnerabilities.",
      "description_length": 290,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "JSX",
      "library": "html_of_jsx",
      "description": "This module provides functions to declaratively construct and manipulate HTML elements using JSX syntax. It supports creating nodes with attributes and child elements, rendering them to strings, and handling fragments, text, and primitive values like integers or floats as elements. Concrete use cases include building server-rendered HTML views directly from OCaml code and embedding dynamic content securely using escaped text nodes.",
      "description_length": 435,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx",
      "library": "ppx",
      "description": "This module provides transformations for converting JSX-like syntax into idiomatic OCaml constructs, focusing on AST node manipulation and attribute handling. It operates on OCaml abstract syntax trees and attributes, enabling use cases like embedding JSX in ReasonML/ReScript projects by translating elements into function applications or records. Key operations include rewriting expressions with labeled arguments, validating attributes, and safely handling optional values during PPX rewriter execution.",
      "description_length": 507,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 507,
    "min_description_length": 290,
    "avg_description_length": 394.75,
    "embedding_file_size_mb": 0.058365821838378906
  }
}