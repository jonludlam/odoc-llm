{
  "package": "lablgtk3",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 466,
  "creation_timestamp": "2025-08-18T19:46:02.226133",
  "modules": [
    {
      "module_path": "GtkBase.Widget.Signals.Event",
      "library": "lablgtk3",
      "description": "This module connects callbacks to handle GUI events such as button presses, key inputs, selection changes, and window resizing, using widget instances and event-specific data structures like `GdkEvent.Button.t` or `GdkEvent.WindowState.t`. It enables implementing user interactions like input handling, window state management, and dynamic responses to visibility or proximity changes. Each handler returns a boolean to indicate whether the event was processed, allowing precise control over event propagation.",
      "description_length": 510,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ActionGroup.S",
      "library": "lablgtk3",
      "description": "This module connects and disconnects proxy widgets to actions within a group, handling activation events. It works with action groups, actions, and widgets. Use it to manage UI elements that trigger or represent actions, like menu items or buttons.",
      "description_length": 248,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.EventBox.P",
      "library": "lablgtk3",
      "description": "This module provides properties to configure event box behavior in GUI layouts. It works with `GObject`-based event boxes, specifically handling boolean attributes like `above_child` and `visible_window`. Use it to control widget stacking and visibility in GTK+ user interfaces.",
      "description_length": 278,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Paned.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring and controlling paned widgets in a GUI. It provides access to position, orientation, and boundary constraints through typed properties. These properties allow precise layout management by setting the divider position, minimum and maximum limits, and specifying vertical or horizontal orientation.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget.Signals",
      "library": "lablgtk3",
      "description": "This module connects callbacks to handle GUI events such as button presses, key inputs, selection changes, and window resizing, using widget instances and event-specific data structures like `GdkEvent.Button.t` or `GdkEvent.WindowState.t`. It enables implementing user interactions like input handling, window state management, and dynamic responses to visibility or proximity changes. Each handler returns a boolean to indicate whether the event was processed, allowing precise control over event propagation.",
      "description_length": 510,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring and controlling the appearance and behavior of tree view columns in a GUI application. It provides direct manipulation of attributes such as alignment, sizing, visibility, sorting indicators, and dimensions. These properties are used to customize individual columns in a tree view widget, such as setting titles, defining click behavior, or adjusting width constraints.",
      "description_length": 424,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring UI elements in a GUI manager, specifically controlling whether menus can be torn off and defining the XML-based UI layout. It works with objects that support the `uimanager` interface, such as GTK UI manager instances. Concrete use cases include enabling detachable menus in applications and loading custom UI configurations from strings.",
      "description_length": 386,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextView.S",
      "library": "lablgtk3",
      "description": "This module connects user input events to text manipulation actions in a text view widget. It supports operations like copying, cutting, and pasting text, moving the cursor or focus, inserting or deleting text, and handling popups. Use it to implement rich text editing behaviors in GUI applications with precise keyboard and clipboard interactions.",
      "description_length": 349,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress.P",
      "library": "lablgtk3",
      "description": "This module defines properties for a cell renderer that displays progress information. It provides access to the `value` property, representing the numeric progress value, and the `text` property, which holds an optional string label. These properties are used to configure how progress data is visually rendered in a tree view cell.",
      "description_length": 333,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuShell.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction with menu shells in a GUI application. It provides signals for navigating, activating, and managing menu items, such as `activate_current`, `cycle_focus`, and `deactivate`. These functions are used to implement keyboard navigation, menu selection, and dynamic menu updates in response to user input.",
      "description_length": 336,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.P",
      "library": "lablgtk3",
      "description": "This module provides direct access to the day, month, and year properties of a calendar widget. It allows getting and setting these date components as integers. Useful for retrieving or updating the displayed date in a calendar interface without manual date parsing.",
      "description_length": 266,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring tool buttons, including setting the icon, label, and stock identifier. It supports data types like strings, widgets, and stock IDs, enabling direct customization of tool button appearance and behavior. Use it to create tool buttons with specific visual elements and labels in a user interface.",
      "description_length": 340,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Frame.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring frame widgets, including label text, alignment, shadow type, and an optional label widget. It operates on frame objects, supporting layout customization in GUI applications. Use this to adjust frame appearance and behavior in GTK-based interfaces.",
      "description_length": 294,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.S",
      "library": "lablgtk3",
      "description": "Handles user-initiated changes in a combo box by triggering a callback when the selected item changes. Works with combo box widgets and unit functions. Useful for updating UI elements or reacting to user input selections in real time.",
      "description_length": 234,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Scale.S",
      "library": "lablgtk3",
      "description": "This module connects a scale widget to a signal handler that formats its numeric value into a string representation. It works with floating-point numbers and string outputs. A concrete use case is displaying a custom-formatted value, such as percentages or units, alongside a GUI slider.",
      "description_length": 287,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuItem.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction with menu items by defining signals for activation events. It provides `activate` and `activate_item` signals, both triggering a function when a menu item is selected. These signals are used to bind actions to menu items, such as executing commands or updating UI state in response to user choices.",
      "description_length": 335,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.FontSelection.P",
      "library": "lablgtk3",
      "description": "This module provides direct access to the `font_name` and `preview_text` properties of a `fontselection` object. It allows getting and setting the currently selected font name and the text used to preview the font in a font selection dialog. These properties are useful for synchronizing font choices with live text previews in GUI applications.",
      "description_length": 345,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ColorButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring color buttons, including alpha transparency, color values, and editor visibility. It works with GObject-based color button widgets and supports setting titles and RGBA color representations. Concrete use cases include customizing color selection dialogs and synchronizing UI elements with color state in graphical applications.",
      "description_length": 374,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView.Dnd",
      "library": "lablgtk3",
      "description": "This module provides functions to manage drag-and-drop interactions within a tree view component. It allows enabling and unsetting drag sources and drop destinations, specifying allowed actions and target types, and determining the target row and drop position during a drag operation. It works directly with tree paths, target entries, and drag actions to support features like reordering rows or transferring data between tree views.",
      "description_length": 435,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Socket.S",
      "library": "lablgtk3",
      "description": "This module connects to the lifecycle events of a socket widget, providing callbacks for when a plug is added or removed. It works with the `socket` type and unit functions to handle dynamic content embedding. Use this to manage external widget integration within a socket container.",
      "description_length": 283,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring notebook widgets in a GUI toolkit. It includes operations to set and get properties such as tab visibility, border display, page index, and tab position. These properties are used to control the appearance and behavior of notebook containers in user interfaces, such as adjusting tab layout or enabling popup menus.",
      "description_length": 362,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring combo box behavior in a GUI application. It provides boolean properties to control empty input, case sensitivity, and arrow key navigation in combo boxes. These properties are used to customize how users interact with combo box widgets, such as enforcing non-empty selections or enabling keyboard navigation.",
      "description_length": 355,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.SizeGroup.P",
      "library": "lablgtk3",
      "description": "This module defines a property for setting the mode of a size group, which determines how widgets in the group are sized relative to each other. It works with the `size_group_mode` enumeration and applies to objects that support the `P` property interface. A concrete use case is configuring a group of buttons to share the same width or height based on the largest widget in the group.",
      "description_length": 386,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView.Tooltip",
      "library": "lablgtk3",
      "description": "This module configures tooltips for cells and rows in a tree view component. It allows setting tooltips on specific cells or entire rows using paths and columns, and retrieves contextual information like the hovered row and column. Use cases include displaying additional data when hovering over tree view items or customizing tooltips based on cell content.",
      "description_length": 358,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.P",
      "library": "lablgtk3",
      "description": "This module provides properties to manage the state of checkable menu items. It works with `checkmenuitem` objects, exposing `active` and `inconsistent` boolean properties. Use it to control and observe the checked and indeterminate visual states of menu items in a GTK menu.",
      "description_length": 275,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring and controlling spin button widgets, including adjustment, numeric input behavior, value limits, and update policies. It works with `spinbutton` objects and associated types like `Gtk.adjustment` and `GtkEnums.spin_button_update_policy`. Concrete use cases include setting up numeric input fields with specific precision, enabling wrapping behavior, and controlling how updates are triggered in GUI applications.",
      "description_length": 459,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFileProps.FileChooser.P",
      "library": "lablgtk3",
      "description": "This module provides properties to configure file chooser dialogs, such as setting the action type, enabling multiple selection, and controlling visibility of hidden files. It works with `filechooser` objects and related GTK widgets like filters and preview components. Concrete use cases include customizing open/save dialogs with previews, folder creation, and file type filtering.",
      "description_length": 383,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextBuffer.S",
      "library": "lablgtk3",
      "description": "This module handles text buffer manipulation in a GUI application, providing functions to insert text and media, apply and remove formatting tags, manage user actions, and track changes. It works with text buffers, text tags, text iterators, and child anchors to enable rich text editing and dynamic content updates. Concrete use cases include implementing text editors with styled content, handling user input with undo/redo support, and synchronizing UI elements with buffer state changes.",
      "description_length": 491,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` signal of a toggle tool button, invoking a callback when the button's state changes. It works with GTK's toggle tool button objects to handle user interaction events. Use this to implement actions that respond to button presses in a graphical interface, like enabling or disabling features.",
      "description_length": 328,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for the `changed` event, which is triggered when the active item in a radio action group changes. It works with `Gtk.radio_action` objects, allowing callbacks to respond to user selections. Use this to update UI elements or application state based on the currently selected radio action.",
      "description_length": 324,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTag.S",
      "library": "lablgtk3",
      "description": "This module defines an event handler for text tags in a text buffer, specifically handling events like key presses or mouse interactions at a given text position. It works with `GdkEvent.any` and `Gtk.text_iter` to enable rich text interaction logic. Concrete use cases include implementing clickable hyperlinks or dynamic text formatting in a text editor.",
      "description_length": 356,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem.P",
      "library": "lablgtk3",
      "description": "This module provides a property for controlling whether a separator tool item is drawn as visible or hidden. It operates on the `bool` type to set or get the draw state. Useful for dynamically toggling the visibility of separators in a toolbar UI.",
      "description_length": 247,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Misc.P",
      "library": "lablgtk3",
      "description": "This module defines properties for aligning and padding UI elements. It provides access to `xalign`, `yalign`, `xpad`, and `ypad` as float and integer properties. These are used to control the positioning and spacing of widgets in a graphical user interface.",
      "description_length": 258,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Button.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring button widgets, including focus behavior, label text, image settings, and alignment. It works with button objects and related GTK widget types. Use it to customize button appearance and interaction, such as setting icons, adjusting relief style, or controlling text underlining.",
      "description_length": 325,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox.S",
      "library": "lablgtk3",
      "description": "This module handles signals for attaching and detaching child widgets in a handle box container. It provides callbacks that trigger when a child widget is added or removed. Useful for managing dynamic UI layouts where widget containment changes at runtime.",
      "description_length": 256,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers for focus navigation and scrolling behavior in scrolled window containers. It supports handling focus movement with `move_focus_out` and scrolling actions with `scroll_child`, which adjusts content based on scroll type and event propagation. Use it to customize keyboard navigation and scroll interactions in UI components like text views or canvas displays.",
      "description_length": 395,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring and manipulating action objects in a GUI toolkit. It provides direct access to properties like label, icon name, sensitivity, visibility, and tooltip for action instances. These properties are used to dynamically control the appearance and behavior of UI elements such as buttons and menu items.",
      "description_length": 350,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` signal of a toggle button widget, invoking a callback when the button's state changes. It works with toggle button objects and supports handling state transitions in user interfaces. A concrete use case is updating UI elements or application state in response to a toggle button being switched on or off.",
      "description_length": 342,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Widget.S",
      "library": "lablgtk3",
      "description": "This module facilitates event-driven GUI management by defining lifecycle controls, rendering triggers, and interaction handlers for GTK widgets. It processes events like drag-and-drop, selection, and tooltips using Gdk data structures, enabling developers to implement custom widget behavior for visibility, dynamic layout, and user input response.",
      "description_length": 349,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring GTK status icons, including screen association, visibility, and tooltip text/markup. It works with `GObject`-based status icon instances and string values for tooltips. Concrete use cases include setting up system tray icons with custom tooltips and managing their visibility across different screens.",
      "description_length": 349,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring an entry completion object, specifically setting the minimum key length required to trigger completion and associating a tree model that provides the completion data. It works with entry completion objects and tree models to enable autocompletion in text entry widgets. Concrete use cases include implementing search-as-you-type functionality in forms or combo boxes backed by a structured dataset.",
      "description_length": 445,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.S",
      "library": "lablgtk3",
      "description": "Handles user-initiated changes in combo box cell renderers by connecting a callback that receives the tree path and iterator of the modified row. Works with `cellrenderercombo` objects, `Gtk.tree_path`, and `Gtk.tree_iter` types. Useful for updating model data when a user selects a different value in a combo cell.",
      "description_length": 315,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.StyleContext.ProviderPriority",
      "library": "lablgtk3",
      "description": "This module defines integer constants representing priority levels for style providers in a GUI toolkit. It includes specific values like `fallback`, `theme`, `settings`, `application`, and `user`, which determine the precedence of style data applied to UI elements. These priorities control how styles from different sources override one another during rendering.",
      "description_length": 364,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for activating links in a link button widget. It works with GTK's link button type and unit functions. Use it to define actions when users click hyperlinks in a GUI.",
      "description_length": 203,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring a tree model filter, specifically setting the child model and defining a virtual root path. It works with tree models and tree paths in the context of filtered data displays. Concrete use cases include restricting visibility to a subset of a tree model and establishing a new root for filtering hierarchical data.",
      "description_length": 361,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.S",
      "library": "lablgtk3",
      "description": "This module defines event handlers for toolbar interactions, specifically managing focus navigation, context menu display, and style updates. It works with toolbar widgets and integrates with event signals to handle user input and interface changes. Concrete use cases include responding to focus movement, context menu triggers, and adapting layout based on style changes.",
      "description_length": 373,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Expander.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring expander widgets, including controlling expansion state, setting labels, specifying label widgets, adjusting spacing, and enabling underline mnemonics. It operates on expander objects, providing direct access to their configuration parameters. Concrete use cases include customizing the visual appearance and behavior of expandable UI sections in GTK-based applications.",
      "description_length": 417,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry.S",
      "library": "lablgtk3",
      "description": "This module defines signal handlers for interactive text entry widgets, enabling direct manipulation of text input behavior. It supports operations like text insertion, deletion, clipboard actions, cursor movement, and icon interactions, all tied to user events. Concrete use cases include handling keyboard input, implementing custom editing shortcuts, and responding to mouse clicks on entry icons.",
      "description_length": 400,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout and behavior of icon views, such as setting column and row spacing, item dimensions, text and pixbuf columns, and selection modes. It works with `Gtk.tree_model` and supports orientation, markup, and model binding for visual customization. Concrete use cases include building grid-like UIs for file browsers, image galleries, or application launchers with dynamic content.",
      "description_length": 430,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` signal of a toggle action, invoking a callback when the action's state changes. It works with toggle actions in GUI applications, such as menu items or buttons that switch between on and off states. Use it to handle state changes in UI elements like checkboxes or radio buttons directly.",
      "description_length": 325,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for color changes in a color selection widget. It works with the `colorselection` type and supports attaching a callback function that triggers when the selected color changes. A concrete use case is updating a UI preview or applying a new color choice in real time.",
      "description_length": 304,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring accelerator key rendering in a cell renderer. It provides access to properties such as the accelerator key, mode, modifiers, and keycode, allowing direct manipulation of how keyboard accelerators are displayed and edited. It is used when implementing custom keybinding interfaces in GTK tree views.",
      "description_length": 345,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring label widgets, such as text content, justification, wrapping, and styling options like markup or underline usage. It operates on label objects, supporting data types like strings, integers, floating-point numbers, and enumeration values for layout and text behavior. Concrete use cases include setting display text, enabling text selection, controlling label alignment, and configuring ellipsizing or mnemonic handling for UI elements.",
      "description_length": 482,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRenderer.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring cell renderers in a GUI toolkit, such as background color, size, alignment, and visibility. It works with GObject-based cell renderer instances and provides direct access to their visual and behavioral attributes. Concrete use cases include customizing the appearance of cells in a tree view, setting padding and alignment for rendered content, and controlling interactive behavior through mode and visibility flags.",
      "description_length": 463,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooserButton.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring a file chooser button, including setting its title and width in characters. It works with the `filechooserbutton` widget type and string and integer data types. Concrete use cases include customizing the display of file selection buttons in GUI applications, such as setting the button's label or adjusting its size to fit specific layouts.",
      "description_length": 388,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction and value updates for range-based UI elements like sliders and scrollbars. It provides signals for adjusting bounds, moving the slider, changing the value programmatically, and responding to value changes. These operations are used to implement dynamic and interactive numeric input controls in GUI applications.",
      "description_length": 349,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSortable.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for tracking changes to the sort column in a sortable tree structure. It works with tree models that support sorting, such as `GtkTreeModel` implementations. A concrete use case is updating UI elements or reapplying custom sorting logic when the user clicks a column header in a tree view.",
      "description_length": 327,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.S",
      "library": "lablgtk3",
      "description": "This module defines event handlers for user interactions with tree views, such as row expansion, selection changes, and cursor movement. It works with tree paths, iterators, and view columns to manage hierarchical data presentation and user input. Concrete use cases include implementing custom tree navigation, handling row activation for data editing, and synchronizing UI elements with tree view state changes.",
      "description_length": 413,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for managing scroll events in a menu interface. It works with GTK menu objects and scroll type enumerations. A concrete use case is implementing custom scrolling behavior when users interact with menu items using scroll gestures.",
      "description_length": 267,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Alignment.P",
      "library": "lablgtk3",
      "description": "This module defines properties for aligning and scaling widgets within a container, including horizontal and vertical alignment, scaling factors, and padding on all sides. It works with GObject-based UI components that support the `alignment` class. These properties are used to control layout behavior in GUI elements like buttons, frames, or custom widgets.",
      "description_length": 359,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring font selection buttons, including font name, size visibility, style visibility, dialog title, and whether to use font or size settings. It works with `GObject` instances that support font button functionality, such as GTK font buttons. Concrete use cases include customizing font selection dialogs in GUI applications to control display options and user preferences.",
      "description_length": 413,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers to adjustment objects in a GUI toolkit. It allows developers to respond when an adjustment's value changes or when the adjustment itself is modified. These signals are useful for synchronizing UI elements like sliders or scrollbars with application logic.",
      "description_length": 292,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget.Tooltip",
      "library": "lablgtk3",
      "description": "This module manages tooltip display for widgets, allowing retrieval and setting of tooltip text or Pango markup. It supports operations to enable or disable tooltips, associate custom windows, and manually trigger tooltip queries. Use cases include displaying contextual help on hover, showing formatted text with `set_markup`, and integrating tooltips with custom window decorations.",
      "description_length": 384,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps.Assistant.S",
      "library": "lablgtk3",
      "description": "This module defines signal handlers for managing the flow of an assistant interface, such as setup, navigation, and termination actions. It works with the `assistant` object type, connecting callback functions to specific lifecycle events. Concrete use cases include handling user interactions when moving between assistant pages or finalizing configuration steps.",
      "description_length": 364,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Window.P",
      "library": "lablgtk3",
      "description": "This module provides property accessors for configuring GTK window objects, including title, size, modality, and visual attributes like icon and opacity. It operates on window-derived GObject instances and supports use cases such as managing transient windows, controlling taskbar visibility, and setting urgency hints for user attention. The properties also handle advanced behaviors like positioning, decoration, and type hints for window manager interaction.",
      "description_length": 461,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring toggle cell renderers in a GUI toolkit. It provides boolean properties to control the activatable, active, inconsistent, and radio states of toggle cells. These properties are used to manage interactive checkboxes or radio buttons in tree views, allowing precise control over their visual and behavioral state.",
      "description_length": 357,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.ButtonBox.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting the layout style of a button box container, such as spacing and alignment behavior. It works with button box widgets and the `button_box_style` enumeration. A concrete use case is customizing the visual arrangement of buttons within a dialog or toolbar.",
      "description_length": 297,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Statusbar.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting and getting the shadow type of a status bar widget. It works with the `GtkEnums.shadow_type` enumeration and applies to status bar objects. A concrete use case is customizing the visual appearance of a status bar by adjusting its shadow style.",
      "description_length": 287,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Image.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring image widgets, such as setting the image source from a file, icon name, pixbuf, or stock ID. It supports data types like strings, integers, GdkPixbuf objects, and enumerated types for icon size and image type. These properties are used to control the appearance and behavior of image displays in GUI applications.",
      "description_length": 360,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.MessageDialog.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring message dialogs, including buttons, message type, text, and secondary text with optional markup. It works with `messagedialog` objects and associated GTK types like widgets and enums. Use it to customize dialog appearance and behavior, such as setting error messages with formatted text or assigning custom buttons.",
      "description_length": 362,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuBar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout and appearance of a menu bar, including child packing direction, overall packing direction, internal padding, and shadow type. It works with the `menubar` widget type and associated enumeration types like `pack_direction` and `shadow_type`. These properties are used to control visual behavior in GUI applications, such as adjusting spacing and directional layout for menu items.",
      "description_length": 437,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container.S",
      "library": "lablgtk3",
      "description": "This module defines signals for managing child widgets within a container, including adding, removing, resizing, and setting focus. It operates on container objects and works with widget instances, providing direct control over layout and interaction. Concrete use cases include dynamically updating UI elements, handling focus changes, and responding to container resizing events.",
      "description_length": 381,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `menu` property of a menu tool button, allowing the association of a dropdown menu with the button. It works with the `Gtk.menu` and `Gtk.obj` types, specifically for menu tool buttons. A concrete use case is setting or retrieving the menu that appears when the tool button is clicked in a GTK toolbar.",
      "description_length": 337,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.S",
      "library": "lablgtk3",
      "description": "Handles text editing events in tree view cells. The `edited` signal triggers a callback with the tree path and new text when a cell's content changes. Works with `cellrenderertext` objects and string data in GTK tree views.",
      "description_length": 223,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Invisible.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `screen` property, which retrieves the `Gdk.screen` associated with an invisible widget. It operates on widgets that support the `Gdk.screen` property, specifically those tagged with the `invisible` type. Use this property to determine the screen where an invisible widget is displayed, such as when managing multi-monitor layouts or screen-specific rendering.",
      "description_length": 395,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring table layouts in GUI applications, including the number of rows and columns, homogeneity, and spacing between rows and columns. It operates on table objects to control their visual arrangement and sizing behavior. Concrete use cases include setting up grids with consistent spacing or dynamically adjusting table dimensions while preserving layout constraints.",
      "description_length": 407,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Adjustment.P",
      "library": "lablgtk3",
      "description": "This module defines properties for adjusting numerical values within a range, such as setting and retrieving the lower and upper bounds, step increments, page increments, and current values. It operates on float values and is used to configure scrollbars, sliders, and other UI elements that require bounded numeric input. Concrete use cases include setting up scrollable areas and numeric input controls in graphical user interfaces.",
      "description_length": 434,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Orientable.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting and retrieving the orientation of UI elements, such as widgets, in a graphical interface. It works with the `orientation` type from `GtkEnums`, which includes values like `Horizontal` and `Vertical`. A concrete use case is configuring the layout direction of containers or controls, such as switching a scrollbar or box layout between horizontal and vertical.",
      "description_length": 403,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModel.S",
      "library": "lablgtk3",
      "description": "This module defines signals for tracking changes to rows in a tree model, such as insertions, deletions, and reorderings. It works with tree paths and iterators to identify specific rows and their positions. These signals are used to update UI components like tree views in response to underlying data changes.",
      "description_length": 310,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers to window events such as activation, focus changes, key input, and widget focus setting. It works with GTK window objects and related event structures like `GdkEvent.any` and `Gtk.widget`. Use it to manage window-level interactions, including keyboard navigation, focus management, and event handling in GUI applications.",
      "description_length": 358,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.S",
      "library": "lablgtk3",
      "description": "This module connects a cell renderer toggle to a tree path, enabling interactive boolean state changes in tree views. It provides the `toggled` signal to handle user interactions with toggle cells. Use it to implement editable boolean columns in a tree model, such as checkboxes in a GUI list.",
      "description_length": 293,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Statusbar.S",
      "library": "lablgtk3",
      "description": "This module connects to a status bar's text-popped and text-pushed signals, letting you run functions when messages are removed or added. It works with status bar widgets and string messages. Use it to track or log status bar changes in GUI apps.",
      "description_length": 246,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.AboutDialog.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring an about dialog in a GUI application. It includes fields for program metadata like name, version, and copyright, as well as visual elements such as logo and license display. These properties are used to set and retrieve information shown in the about dialog interface.",
      "description_length": 315,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.ProgressBar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring progress bar widgets, including setting the completion fraction, inversion state, text visibility, pulse step size, displayed text, and text ellipsization mode. It works with `GObject`-based progress bar instances and integrates with Pango for text rendering. Concrete use cases include customizing progress bar appearance and behavior in GUI applications, such as displaying percentage text, enabling indeterminate progress with pulsing, or adjusting layout with ellipsized labels.",
      "description_length": 529,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container.P",
      "library": "lablgtk3",
      "description": "This module defines properties for container widgets in a GUI toolkit, specifically handling border width, child widget assignment, and resize behavior. It operates on container objects and associated widget types, enabling configuration of layout and rendering attributes. Use this module to set spacing, manage child components, and control resizing policies in container-based UI elements.",
      "description_length": 392,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.P",
      "library": "lablgtk3",
      "description": "This module provides functions to configure text styling and layout properties for rendering cells in a graphical user interface. It operates on `cellrenderertext` objects, supporting customization of visual attributes like colors, fonts, text decorations, and wrapping behavior. These capabilities are used to tailor the appearance of text cells within structured views, such as tables or lists, where precise control over typography and formatting is required.",
      "description_length": 462,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget.P",
      "library": "lablgtk3",
      "description": "This module provides accessors for configuring layout attributes (alignment, margins, sizing), styling options (opacity, tooltips, visibility), and behavioral properties (focus handling, event masks) on GTK widgets. It enables precise control over UI element positioning, visual appearance, and interaction logic, particularly useful for tasks like responsive layout design, accessibility adjustments, and dynamic widget state management.",
      "description_length": 438,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.P",
      "library": "lablgtk3",
      "description": "This module configures cell renderer combo widgets in a GUI toolkit. It sets the underlying tree model, selects the column for text display, and toggles entry field visibility. Use it to customize combo box cells in a tree view with dropdown options and editable input.",
      "description_length": 269,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.S",
      "library": "lablgtk3",
      "description": "This module handles user interactions and property changes for status icons in a graphical interface. It provides signals for responding to icon activation, context menu display, and size adjustments. Suitable for implementing tray icon functionality with custom behaviors on click, resize, or right-click events.",
      "description_length": 313,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.S",
      "library": "lablgtk3",
      "description": "This module connects signals for entry completion functionality, specifically handling actions when a completion item is activated or a match is selected. It works with entry completion objects, tree model filters, and tree iterators. Use this to implement custom behaviors in response to user selections in auto-completing text entry fields.",
      "description_length": 342,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.P",
      "library": "lablgtk3",
      "description": "Accesses the URI property of a link button object. Works with GTK link button instances and string values. Use to get or set the web address that the link button points to.",
      "description_length": 172,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame.P",
      "library": "lablgtk3",
      "description": "This module provides properties to configure aspect ratio and alignment settings for a container widget. It allows setting whether the child's aspect ratio is respected, defining the aspect ratio value, and specifying horizontal and vertical alignment. These properties are used when laying out a single child widget within a frame that enforces a specific aspect ratio.",
      "description_length": 370,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort.P",
      "library": "lablgtk3",
      "description": "This module provides access to the underlying tree model of a sorted tree view, allowing direct manipulation and retrieval of the original, unsorted data structure. It works with tree models and their sorted wrappers, specifically handling data types like `Gtk.tree_model`. A concrete use case is when implementing custom sorting logic that requires access to the base model's rows or when synchronizing selections between sorted and unsorted views.",
      "description_length": 449,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.S",
      "library": "lablgtk3",
      "description": "This module connects signals specific to icon views, enabling responses to user interactions. It provides handlers for item activation and selection changes, working with icon view widgets and tree paths. Use it to implement actions when users click items or modify selections in an icon view.",
      "description_length": 293,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring toolbar buttons, including icon size, visibility of arrows, and toolbar style. It works with the `toolbar` object type and related enumerated types like `icon_size` and `toolbar_style`. Use it to customize the appearance and behavior of buttons within a toolbar interface.",
      "description_length": 319,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander.S",
      "library": "lablgtk3",
      "description": "This module connects the `activate` event of an expander widget to a callback function, enabling custom behavior when the expander is toggled. It operates specifically on expander widgets within a GUI context. A concrete use case is updating UI elements or loading content dynamically when the expander opens.",
      "description_length": 309,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry.P",
      "library": "lablgtk3",
      "description": "This module manages configuration and interaction with GTK entry widgets through properties that control text content, input behavior, and visual attributes. It handles data such as strings for text and placeholder content, cursor positions, and icon settings including images, tooltips, and interactivity flags. These features are used to create interactive form fields with visual cues, such as search inputs with icons or editable text areas with placeholder hints.",
      "description_length": 468,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction.P",
      "library": "lablgtk3",
      "description": "This module provides a property `draw_as_radio` that controls whether a toggle action is visually rendered as a radio button. It operates on objects supporting the `toggleaction` interface, typically used in GUI components like buttons. This is useful for customizing the appearance of toggle actions in toolbars or menus without changing their behavior.",
      "description_length": 354,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers to tree cell renderers that display keyboard shortcuts. It provides signals for when an accelerator is cleared or edited, passing details like the tree path and accelerator parameters. Use it to implement editable shortcut configuration in tree views.",
      "description_length": 288,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.P",
      "library": "lablgtk3",
      "description": "This module provides properties for managing color selection widgets, including current color, alpha value, and toggles for opacity control and palette visibility. It works with `Gobject` instances that support color selection, such as GTK color selection components. Concrete use cases include configuring and retrieving color and transparency settings in GUI applications.",
      "description_length": 374,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.StackSwitcher.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring a stack switcher, specifically setting the icon size and associating it with a stack object. It works with GTK objects of type `stackswitcher` and `stack`, allowing direct property manipulation. Use this to customize the appearance and behavior of stack-based navigation interfaces.",
      "description_length": 329,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Label.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers to label widgets for clipboard copying, cursor movement, and context menu population. It works with `label` objects and standard GTK event parameters like movement steps and menus. Use it to implement text selection, keyboard navigation, and custom right-click menus in label-based UI elements.",
      "description_length": 331,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Grid.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring grid layouts in GUI applications, such as row and column spacing, homogeneity, and baseline alignment. It operates on grid objects to control visual arrangement and sizing behavior. Use it to fine-tune grid-based user interfaces with consistent spacing and alignment.",
      "description_length": 314,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Range.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring range-based UI elements like sliders or scrollbars. It allows setting and controlling values such as adjustment, fill level, inversion, and stepper sensitivity. These properties are used to customize the behavior and appearance of range widgets in graphical applications.",
      "description_length": 318,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the visual and interactive behavior of tree views, such as enabling search, setting the model, adjusting column behavior, and controlling grid/tree lines. It operates on tree view objects, working with data types like boolean flags, integer indices, tree view columns, adjustments, and tree models. These properties are used to customize display settings and user interactions in GUI applications with hierarchical data displays.",
      "description_length": 476,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `font_set` signal of a font button widget, triggering a callback when a font is selected. It works with GTK's font button objects to handle font selection events. A concrete use case is updating a text preview or applying the selected font to a document editor in real time.",
      "description_length": 302,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu.P",
      "library": "lablgtk3",
      "description": "This module provides access to properties specific to menu widgets, such as setting the tear-off title. It works with GMenu and related UI components in the GTK framework. A concrete use case is customizing the title of a detachable menu section in a graphical application.",
      "description_length": 273,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring viewport adjustments and shadow type. It works with viewport objects and adjustment instances to control scrolling behavior and visual appearance. Concrete use cases include setting horizontal and vertical adjustments for scrollable content and specifying the shadow style of a viewport container.",
      "description_length": 345,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` event of a check menu item, invoking a callback when its state changes. It works with check menu items in GTK's menu system. Use it to handle user interactions with toggleable menu options, like enabling or disabling features.",
      "description_length": 264,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.SpinButton.S",
      "library": "lablgtk3",
      "description": "This module connects user interactions with spin button widgets to custom behaviors, enabling precise numeric input handling. It provides signals for adjusting values, validating input, formatting output, and detecting changes or wrap-around events. Use it to build UI components like numeric settings controls or data entry forms with immediate feedback.",
      "description_length": 355,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `group` property, which manages the radio button group association for a radio button widget. It allows getting or setting the group of a radio button, ensuring mutual exclusivity within the group. This is useful when dynamically managing multiple radio buttons or modifying group membership at runtime.",
      "description_length": 338,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser.S",
      "library": "lablgtk3",
      "description": "This module connects user interactions with file chooser widgets to custom responses, enabling applications to react to folder changes, file selections, and preview updates. It supports operations like prompting for overwrite confirmation and updating UI elements based on user navigation. Concrete use cases include implementing file browsers, document loaders, and asset importers where user file interaction drives application behavior.",
      "description_length": 439,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextBuffer.P",
      "library": "lablgtk3",
      "description": "This module provides direct access to properties of a text buffer, including the tag table, cursor position, and selection status. It works with text buffers and associated text tag tables to manage rich text attributes and user interaction state. Concrete use cases include querying the current cursor location, checking if text is selected, or modifying text styling through the tag table.",
      "description_length": 391,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Layout.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring layout dimensions and scroll adjustments in a GUI container. It provides direct access to horizontal and vertical adjustment objects, as well as width and height values, enabling precise control over scrollable and resizable layout components. Concrete use cases include setting up scrollable windows or dynamically resizing layout elements based on user interaction or content changes.",
      "description_length": 433,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction.P",
      "library": "lablgtk3",
      "description": "This module defines properties for managing a radio action's group and its integer value. It allows setting and retrieving the group of related radio actions and the specific integer identifier for the action. These properties are used to control the behavior and state of radio buttons in a GUI application.",
      "description_length": 308,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.Button.S",
      "library": "lablgtk3",
      "description": "This module defines event signals for button interactions, including activation, clicks, hover entry and exit, and press and release actions. It works with GTK button objects and provides callbacks to handle user input events. Concrete use cases include implementing custom button behaviors, such as triggering actions on click or changing appearance on hover.",
      "description_length": 360,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem.P",
      "library": "lablgtk3",
      "description": "This module defines properties for tool items, including whether the item is important, and its visibility in horizontal and vertical orientations. It works with tool item objects in a GUI toolkit. These properties are used to control the display behavior of tools in different interface layouts.",
      "description_length": 296,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Plug.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for managing embedded plug events in a GUI context. It works with GTK widget types that support plug embedding, specifically handling the `embedded` event. A concrete use case is responding to when a plug widget is embedded within a socket in a window, such as dynamically updating UI components upon embedding.",
      "description_length": 349,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the group property of radio tool buttons, allowing the retrieval and setting of the radio tool button group associated with a given button. It operates on `Gtk.radio_tool_button` objects, enabling the management of exclusive selection groups in toolbars. This is useful for creating UI elements where only one option can be selected at a time, such as mode selectors or category filters in graphical applications.",
      "description_length": 444,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the appearance and behavior of handle boxes in a GUI. It provides access to set and get the handle position, snap edge, shadow type, and whether the snap edge is enabled. These properties are used to control docking and visual styling of handle boxes in user interfaces.",
      "description_length": 317,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Dialog.S",
      "library": "lablgtk3",
      "description": "Handles user interactions with dialog windows by providing signals for closing the dialog and responding with a specific integer value. Works with dialog objects and their associated event handlers. Useful for implementing modal dialogs that return user input or confirmation results.",
      "description_length": 284,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring scrolled windows, including horizontal and vertical adjustments, scrollbar policies, window placement, and shadow type. It works with GTK objects of type `scrolledwindow` and related types like `adjustment` and enumeration values for policy and shadow styles. Concrete use cases include setting up scrollable areas with custom scrollbar behavior and visual appearance in GUI applications.",
      "description_length": 435,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.Action.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for activating UI actions, typically used in GUI applications. It works with objects that support the `activate` method, such as buttons or menu items. The `activate` value connects a callback function to trigger when the action is activated, enabling direct response to user interactions like clicks or selections.",
      "description_length": 352,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Stack.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring GTK stack widgets, including layout behavior, transitions, and visibility settings. It provides direct access to stack-specific attributes like transition type, duration, and child visibility. These properties are used to control the visual presentation and animation of stacked UI components in a GTK application.",
      "description_length": 361,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for toggle buttons, including `active`, `draw_indicator`, and `inconsistent`, which control the button's state and visual appearance. It works with the `togglebutton` object type in the GObject hierarchy. These properties are used to manage tri-state toggle buttons in GUI applications, such as checkboxes or switch controls with intermediate states.",
      "description_length": 381,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Arrow.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the type and shadow style of arrow widgets. It provides direct access to set and retrieve the `arrow_type` and `shadow_type` attributes of arrow elements. Useful when customizing the appearance of arrows in user interface components like buttons or scrollbars.",
      "description_length": 307,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ActionGroup.P",
      "library": "lablgtk3",
      "description": "This module defines properties for action groups, including name, sensitivity, and visibility. It works with GObject-based action group instances to manage their runtime behavior. These properties are used to dynamically control UI elements like menus and toolbars based on application state.",
      "description_length": 292,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.S",
      "library": "lablgtk3",
      "description": "This module defines operations for tree view columns, including the `clicked` signal to handle user interactions. It works with tree view column objects and supports event-driven programming in GUI applications. A concrete use case is triggering a callback when a user clicks on a column header in a tree view.",
      "description_length": 310,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView.P",
      "library": "lablgtk3",
      "description": "This module provides operations for configuring layout, scrolling behavior, and text formatting in GTK text view widgets. It works with `textview` objects, `adjustment` for scroll control, and `text_buffer` for content management, enabling tasks like adjusting margins, synchronizing vertical scrolling, and setting input constraints such as editability or tab handling. Specific use cases include customizing text alignment, managing overflow via adjustments, and defining user interaction rules for text entry.",
      "description_length": 512,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager.S",
      "library": "lablgtk3",
      "description": "This module defines signals for managing UI manager events, such as action changes, widget connections, and activation hooks. It works with `uimanager` objects, `action` instances, and `widget` components to handle dynamic UI updates and event routing. Concrete use cases include synchronizing menu items with actions, updating UI elements on action changes, and managing widget proxies during activation.",
      "description_length": 405,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTagTable.S",
      "library": "lablgtk3",
      "description": "This module manages signals for text tag table events, providing callbacks when tags are added, changed, or removed. It works with `Gtk.text_tag` and `Gtk.texttagtable` structures to handle dynamic updates to text styling and formatting. Concrete use cases include synchronizing UI elements with text tag modifications or implementing custom text editing behaviors in GTK-based applications.",
      "description_length": 391,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Editable.S",
      "library": "lablgtk3",
      "description": "This module handles text editing operations for GUI components, providing signals for tracking changes, deleting text ranges, and inserting new text. It works with editable widgets like text fields and text views, allowing direct manipulation of their content. Concrete use cases include implementing custom input validation, real-time text transformation, and synchronized text updates across multiple UI elements.",
      "description_length": 415,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.S",
      "library": "lablgtk3",
      "description": "This module defines event handlers for calendar interactions, connecting user actions like date selection, month and year navigation, and double-clicks to callback functions. It works with calendar widgets in a GUI context, enabling responsive date and time input interfaces. Concrete use cases include scheduling tools, date pickers, and time-based data filtering interfaces.",
      "description_length": 376,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps.Builder.P",
      "library": "lablgtk3",
      "description": "Accesses the translation domain used for internationalization in UI definitions. Works with `GObject` instances and string values. Useful for setting or retrieving the domain that maps translated strings in GUI builder files.",
      "description_length": 225,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.S",
      "library": "lablgtk3",
      "description": "This module connects a callback to a tool button's click event. It provides the `clicked` signal handler for executing an action when the button is activated. Useful for triggering UI updates or initiating actions in response to user input.",
      "description_length": 240,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring and interacting with combo box widgets, including setting the data model, active item index, entry visibility, and layout options. It works with tree models and integer, boolean values to customize display and behavior. Concrete use cases include populating dropdown lists from a data model, enabling text entry, and adjusting visual layout in UI forms.",
      "description_length": 400,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring scale widgets, such as setting precision, visibility of the value label, origin display, and value position. It operates on scale objects to customize their visual behavior and user interaction. Concrete use cases include adjusting a volume slider with visible numeric feedback or configuring a temperature control with an origin indicator.",
      "description_length": 387,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ColorButton.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for when a color is set in a color selection dialog. It works with the `GtkSignal.t` type, specifically handling events from color button widgets. A concrete use case is triggering a callback to update an application's UI or model with the newly selected color.",
      "description_length": 299,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring pixbuf-based cell renderers in a GUI toolkit. It allows setting pixbuf images directly or via stock identifiers, along with expander icons and rendering details. Useful for customizing tree view cells with icons and visual states.",
      "description_length": 277,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.S",
      "library": "lablgtk3",
      "description": "This module defines event callbacks for managing notebook widgets in a GUI application. It supports operations like switching pages, reordering tabs, handling focus navigation, and responding to page additions or removals. These functions are used to implement dynamic tabbed interfaces with custom page management behavior.",
      "description_length": 324,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSelection.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for tracking changes in tree selection within a GUI component. It works with tree selection objects to detect when the selected row or item in a tree view changes. A concrete use case is updating related UI elements or data displays in response to user selection in a hierarchical tree structure.",
      "description_length": 334,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Box.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring box containers in a GUI toolkit. It provides direct access to set and manipulate the `homogeneous`, `spacing`, and `orientation` attributes of box widgets. These properties control layout behavior, such as element sizing and arrangement direction, enabling precise UI design.",
      "description_length": 322,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Separator.P",
      "library": "lablgtk3",
      "description": "This module defines a property for setting and retrieving the orientation of a separator widget, such as horizontal or vertical. It works with objects that support the `separator` tag and the `orientation` enumeration from the `GtkEnums` module. Use this property to control the visual direction of separators in UI layouts.",
      "description_length": 324,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.ListStore",
      "library": "lablgtk3",
      "description": "This module implements a mutable list data structure for storing rows of typed data, primarily used to manage tabular data in GUI applications. It supports operations to insert, remove, reorder, and update rows with type-safe value assignments. Concrete use cases include populating and dynamically modifying tree views or combo boxes with heterogeneous row data.",
      "description_length": 363,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFile.FileFilter",
      "library": "lablgtk3",
      "description": "This module creates and configures file filters for GUI file dialogs, allowing filtering by MIME type, filename patterns, or custom logic. It operates on file filter objects, setting names, matching rules, and evaluation callbacks. Use it to restrict file selections in open/save dialogs based on specific type or naming criteria.",
      "description_length": 330,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Layout",
      "library": "lablgtk3",
      "description": "This module manages layout containers with precise positioning and sizing controls. It supports operations to place and move widgets within a layout at specific coordinates, set fixed dimensions, and associate scroll adjustments. Use it to build custom scrollable areas or dynamically reposition UI elements in response to user input or window resizing.",
      "description_length": 353,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Tags",
      "library": "lablgtk3",
      "description": "This module defines types and conversions for text styling attributes like font weight, style, variant, and underline. It includes functions to convert scale values to floats and map weight values to integers. These features are used to configure text appearance in graphical user interfaces, such as setting font properties for labels or rich text rendering.",
      "description_length": 359,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.Adjustment",
      "library": "lablgtk3",
      "description": "Handles adjustments for scrollable or numeric input widgets by setting and retrieving values like bounds, increments, and page sizes. Works with `Gtk.adjustment` objects to configure parameters such as lower/upper limits, step increments, and page increments. Used to control the behavior of sliders, scrollbars, and spin buttons by defining their range and movement characteristics.",
      "description_length": 383,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkWindow.Plug",
      "library": "lablgtk3",
      "description": "Handles the creation and manipulation of plug windows in a GTK application. Works with GObject and Gtk.obj types to cast and manage top-level windows. Useful for embedding external widgets or creating detached windows from a main application.",
      "description_length": 242,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Focus",
      "library": "lablgtk3",
      "description": "Handles focus change events in GUI applications. It provides a function to check whether an event indicates focus entering or leaving a window, using the `focus_in` function. Works with the `t` type, which represents a specific subset of Gdk events related to focus changes.",
      "description_length": 274,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Tags",
      "library": "lablgtk3",
      "description": "This module defines enumerated types for managing GUI events, window states, input sources, and X11-specific data formats. It supports handling user interactions like button presses and key events, controlling window behavior through properties and fullscreen modes, and configuring event masks or input modifiers for precise interaction logic in graphical applications.",
      "description_length": 370,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.HandleBox",
      "library": "lablgtk3",
      "description": "This module manages handle box containers in a GUI, providing functions to configure docking behavior and visual styling through properties like handle position, snap edge, and shadow type. It allows creating handle boxes with custom parameters and exposes signals for tracking child widget attachment and detachment. Concrete use cases include implementing dockable panels or resizable UI components with dynamic layout adjustments.",
      "description_length": 433,
      "index": 151,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.Table",
      "library": "lablgtk3",
      "description": "This module manages table layouts in a GUI, providing functions to create tables, set row and column spacing, and attach widgets with specific positioning and expansion properties. It works with `Gtk.table` objects and `Gtk.obj` widgets, allowing precise control over grid-based UI arrangements. Concrete use cases include building forms, dashboards, and dialog boxes with aligned and spaced UI elements.",
      "description_length": 404,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines property accessors for text attributes in GUI elements, enabling direct manipulation of text formatting and layout. It works with GObject-based types that support text rendering, such as text views or labels. Specific use cases include adjusting text margins, setting line spacing, controlling text wrapping, and configuring justification and editability in rich text interfaces.",
      "description_length": 399,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkStock.Icon_source",
      "library": "lablgtk3",
      "description": "This module creates and configures icon sources for use in GTK user interfaces. It allows setting icon properties such as filename, pixbuf, direction, state, and size, with support for wildcarding these properties to apply across variations. It is used to define visual appearance of UI elements like buttons and menu items.",
      "description_length": 324,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate toggle tool buttons in a GTK interface. It allows setting and retrieving the active state of a button and connects callbacks to handle state changes, such as toggling UI elements or triggering on-off actions. Use it to build interactive toolbar buttons that maintain their state, like bold or italic switches in a text editor.",
      "description_length": 382,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Stack",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage GTK stack widgets, allowing the addition of named or titled child widgets with associated labels. It supports operations to retrieve children by name, set visible children with transition animations, and configure stack properties like transition type and duration. These capabilities are used to implement tabbed interfaces, wizard-style navigation, or any UI that requires switching between multiple views in the same area.",
      "description_length": 477,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Windowing",
      "library": "lablgtk3",
      "description": "This module provides operations to determine the underlying platform for windowing systems, returning a value that identifies whether the environment is using QUARTZ, WIN32, or X11. It works directly with variant types to represent platform-specific windowing backends. A concrete use case is adapting UI rendering or input handling logic based on the current windowing system in a cross-platform application.",
      "description_length": 409,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.Button",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure button widgets with properties like label text, relief style, and image settings, along with event handling for clicks and hover interactions. It operates on GTK button objects and supports customizing appearance and behavior, such as setting icons or triggering actions on activation. Concrete use cases include building interactive UI elements like action buttons with dynamic responses to user input.",
      "description_length": 458,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Visual",
      "library": "lablgtk3",
      "description": "This module manages low-level display visuals, providing functions to query and select visual types based on color depth and capabilities. It works with the `visual_type` variant to represent different pixel storage formats and the `Gdk.visual` type to describe on-screen visuals. Concrete use cases include selecting the best visual for rendering graphics with specific depth or color requirements and inspecting the properties of existing visuals.",
      "description_length": 449,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.CustomModel",
      "library": "lablgtk3",
      "description": "This module implements a customizable tree model interface for hierarchical data displays. It allows defining dynamic row behaviors through callbacks for events like insertion, deletion, and reordering, while maintaining type-safe interactions with tree paths and row data. Typical use cases include building interactive UI trees with custom data sources, such as file browsers or structured data editors.",
      "description_length": 405,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.EventBox",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure event boxes in GTK+ GUIs, working with `GObject`-based event box instances. It supports setting boolean properties like `above_child` and `visible_window` to control widget stacking and visibility behavior. Use it to define how event boxes interact with child widgets and window visibility in graphical layouts.",
      "description_length": 366,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure menu tool buttons with associated dropdown menus. It allows setting tooltips on the button's arrow and works with `Gtk.menu_tool_button` and `Gtk.menu` types. A concrete use case is adding a toolbar button that opens a dropdown menu when clicked, such as in a text editor's toolbar for selecting font options.",
      "description_length": 364,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle",
      "library": "lablgtk3",
      "description": "This module defines properties and signals for toggle cell renderers in a GUI toolkit. It provides boolean properties to control the activatable, active, inconsistent, and radio states of toggle cells, and connects these cells to tree paths for interactive state changes. Use it to implement editable boolean columns, such as checkboxes, in tree views with precise visual and behavioral control.",
      "description_length": 395,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser",
      "library": "lablgtk3",
      "description": "This module provides direct manipulation of file chooser dialogs through property configuration and signal handling. It operates on `filechooser` objects and integrates with GTK widgets like filters and preview panes. Use it to build custom file import interfaces, implement save-as dialogs with type filtering, or create interactive folder browsers with real-time previews.",
      "description_length": 374,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBase.DnD",
      "library": "lablgtk3",
      "description": "This module handles drag-and-drop interactions within GUI components. It allows setting up drag sources and drop targets, managing drag data transfers, and controlling visual feedback during operations. Use it to implement custom drag-and-drop behavior in widgets, such as reordering lists or transferring data between UI elements.",
      "description_length": 331,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit.Editable",
      "library": "lablgtk3",
      "description": "This module provides direct manipulation of editable text fields, supporting operations like selecting regions, inserting and deleting text, clipboard interactions, and managing cursor positions. It works with `Gtk.obj` instances that implement the editable interface, such as text entries or text views. Concrete use cases include implementing custom input validation, building rich text editors, and handling user-driven text modifications with precise control over selection and insertion points.",
      "description_length": 499,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Button",
      "library": "lablgtk3",
      "description": "This module handles button events in a graphical user interface, providing functions to access event details such as the type of button press, coordinates, device used, and modifier state. It works with event objects that represent button interactions, allowing inspection and modification of event properties like position, button number, and event type. Concrete use cases include handling mouse clicks, tracking double or triple presses, and retrieving input device information for precise event handling.",
      "description_length": 508,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Motion",
      "library": "lablgtk3",
      "description": "Handles motion events in a graphical user interface, providing access to cursor position, device state, and event timing. It works with floating-point coordinates and device input data. Useful for tracking mouse movement with precision, handling multi-axis input devices, or implementing custom hover interactions.",
      "description_length": 314,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf",
      "library": "lablgtk3",
      "description": "This module defines properties and operations for configuring pixbuf-based cell renderers in a GUI toolkit. It supports setting pixbuf images directly or from stock identifiers, along with expander icons and rendering details. It is used to customize the visual appearance of tree view cells with icons and state indicators.",
      "description_length": 324,
      "index": 169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.StyleContext",
      "library": "lablgtk3",
      "description": "This module manages style contexts in a GUI toolkit, providing functions to apply, modify, and query CSS styles for UI elements. It works with `Gtk.style_context` and `Gtk.css_provider` to control how styles are assigned and prioritized, using specific priority levels like `theme` or `user`. Concrete use cases include dynamically changing widget appearance, applying custom themes, and managing style overrides at different scopes.",
      "description_length": 433,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.AccelMap",
      "library": "lablgtk3",
      "description": "This module manages keyboard accelerator mappings, allowing applications to define, modify, and persist shortcut key combinations. It works with strings representing accelerator paths, integer key codes, and modifier flags. Use it to load and save accelerators from a file, add or update shortcuts dynamically, or iterate over existing mappings to apply custom logic.",
      "description_length": 367,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create link buttons and manage their URI properties and activation signals. It works directly with GTK link button objects, allowing URIs to be set or retrieved as strings and defining actions when links are clicked. Concrete use cases include building clickable hyperlinks in GUIs that open web pages or trigger specific callbacks upon activation.",
      "description_length": 383,
      "index": 172,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.AccelGroup",
      "library": "lablgtk3",
      "description": "This module manages keyboard accelerators for GUI applications. It provides functions to create, lock, and unlock accelerator groups, connect and disconnect key combinations with callbacks, and validate or parse key sequences. Use cases include implementing shortcut keys in applications, such as binding Ctrl+S to a save function or handling complex key combinations in dialogs.",
      "description_length": 379,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and customize tool buttons with specific properties like icons, labels, and stock identifiers, using data types such as strings and widgets. It allows connecting actions to button clicks via the `clicked` signal handler. Use it to build interactive tool buttons in graphical user interfaces that trigger actions or update UI elements when activated.",
      "description_length": 390,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Bin",
      "library": "lablgtk3",
      "description": "This module provides operations for working with bin containers in a GUI toolkit. It includes functions to cast objects to bin containers and retrieve the child widget contained within. Use this module when managing container-child relationships in UI components like buttons or frames.",
      "description_length": 286,
      "index": 175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.MenuBar",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure menu bar widgets with properties controlling layout direction, padding, and shadow appearance. It operates on `Gtk.menu_bar` objects, using parameters like `pack_direction` and `shadow_type` to adjust visual behavior. Concrete use cases include setting horizontal or vertical arrangement of menu items and customizing spacing and borders in graphical user interfaces.",
      "description_length": 422,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Rc",
      "library": "lablgtk3",
      "description": "Handles loading and parsing of GTK+ resource files. Adds default configuration files and processes RC file content from disk or string. Used to apply visual themes and settings to GUI applications at runtime.",
      "description_length": 208,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress",
      "library": "lablgtk3",
      "description": "This module defines properties for a cell renderer that displays progress information. It provides access to the `value` property, representing the numeric progress value, and the `text` property, which holds an optional string label. These properties are used to configure how progress data is visually rendered in a tree view cell.",
      "description_length": 333,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu",
      "library": "lablgtk3",
      "description": "This module manages GTK menu creation, display, and interaction, providing functions to popup, popdown, and customize menu behavior. It works with GTK menu objects, widgets, and accelerator groups, enabling actions like setting active items, attaching menus to widgets, and handling detachment. Concrete use cases include displaying context menus at specific coordinates and configuring keyboard accelerators for menu items.",
      "description_length": 424,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps.Builder",
      "library": "lablgtk3",
      "description": "Handles loading and manipulating GTK UI definitions from files or strings, supporting object instantiation and translation domain configuration. Works with `GObject` instances and string-based resource identifiers. Use to build user interfaces programmatically from XML descriptions, retrieve specific UI elements, or manage localized strings in GUIs.",
      "description_length": 351,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.CellLayout",
      "library": "lablgtk3",
      "description": "This module manages the layout and rendering of cells within a tree view by providing functions to add, remove, and reposition cell renderers. It supports operations like setting packing order, binding model data to cell attributes, and configuring custom data functions for dynamic rendering. Use it to customize how rows and columns are displayed in a `GtkTreeView`, such as aligning text, icons, or interactive widgets within cells.",
      "description_length": 435,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.LinkButton",
      "library": "lablgtk3",
      "description": "This module implements buttons that display hyperlinks, allowing users to navigate to specified URLs when clicked. It provides functions to create link buttons with or without custom labels and to cast generic GObject instances to link button objects. The module works with GTK's object hierarchy and string-based URL/label values. Use this to integrate clickable web links into GTK user interfaces.",
      "description_length": 399,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView",
      "library": "lablgtk3",
      "description": "This module facilitates hierarchical data visualization through column management, row expansion, and selection control, operating on tree structures and paths to enable dynamic UI adjustments like scrolling and cell-area configuration. It supports interactive features such as drag-and-drop reordering and tooltip displays, catering to applications requiring user-driven data manipulation and contextual feedback in tree-based interfaces.",
      "description_length": 439,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.RadioButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create and manage radio buttons, including casting generic objects to radio button instances and manipulating their group associations. It works with `Gtk.radio_button` objects and related GObject parameters. Concrete use cases include dynamically constructing radio button groups and adjusting group membership at runtime to control mutual exclusivity.",
      "description_length": 388,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage toolbars, insert and retrieve toolbar items, and control layout behavior like drop highlighting and relief style. It operates on `toolbar` and `toolitem` objects, using enumerated types such as `icon_size` and `relief_style` for configuration. Use it to build and customize interactive toolbars with precise control over item placement, visual appearance, and drag-and-drop behavior.",
      "description_length": 435,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeSortable",
      "library": "lablgtk3",
      "description": "This module provides direct operations for managing sort behavior in tree models that support sorting, such as setting and retrieving the current sort column and order, defining custom sort functions, and resetting to default sorting logic. It works with `Gtk.tree_sortable` objects and associated tree models like `GtkTreeModel`. Concrete use cases include implementing custom comparison logic for rows, responding to user-initiated column sorting in a tree view, and synchronizing UI feedback with the current sort state.",
      "description_length": 523,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView",
      "library": "lablgtk3",
      "description": "This module implements icon view widgets for displaying and interacting with grid-based collections of items. It supports operations like selecting and activating items, retrieving paths at positions, and iterating over selected paths, working directly with `Gtk.tree_path` and `Gtk.tree_model`. It is ideal for building interactive UIs such as file browsers, image galleries, or application launchers where items are arranged in a grid and support dynamic content updates and user selection.",
      "description_length": 492,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Data",
      "library": "lablgtk3",
      "description": "This module provides low-level data conversion utilities for bridging OCaml values with GObject's type system, supporting both primitive types (booleans, numbers, strings) and complex representations like boxed types, GObject instances, and C-compatible pointers. It enables type-safe marshaling to and from GValue containers, with explicit handling of optional values and memory management through pointer conversions. Typical use cases include interfacing OCaml code with GObject-based C libraries, implementing language bindings, or working with GObject's dynamic type system for property/value management.",
      "description_length": 609,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Main",
      "library": "lablgtk3",
      "description": "This module manages event loops for handling asynchronous events, providing functions to create, run, and control the main loop's lifecycle. It works with the `t` type representing a main loop instance and includes operations like `iteration` for processing events, `pending` to check for queued events, and `quit` to terminate the loop. Concrete use cases include driving GUI applications by processing user input events and managing timed callbacks in event-driven programs.",
      "description_length": 476,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango.Layout",
      "library": "lablgtk3",
      "description": "This module manages formatted text rendering through operations that configure layout properties, manipulate text content, and handle font and spacing adjustments. It works with structured types like `layout`, `context`, and `font_description` to control text wrapping, justification, and ellipsization, while providing coordinate mapping for precise screen positioning. Typical applications include dynamic text layout in GUIs or document rendering where adaptive formatting and measurement are critical.",
      "description_length": 505,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Property",
      "library": "lablgtk3",
      "description": "Handles property change notifications in GUI events, specifically for X11 property updates. Works with `GdkEvent` types, particularly property notify events, and provides access to the associated atom, timestamp, and state. Useful for tracking changes to window properties like title or icon updates in a window manager.",
      "description_length": 320,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeViewColumn",
      "library": "lablgtk3",
      "description": "This module manages columns in a tree view widget, providing operations to configure cell renderers, set sorting behavior, and manipulate column layout. It works with tree view columns, cell renderers, and tree models to display and interact with hierarchical data. Concrete use cases include adding clickable headers to sort data, rendering custom content in cells, and dynamically updating column attributes based on model values.",
      "description_length": 432,
      "index": 192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Gc_custom",
      "library": "lablgtk3",
      "description": "This module configures garbage collection behavior for custom blocks, primarily through `set_speed` and `get_speed` to adjust how much allocation impacts GC cycles. It works directly with integer values representing speed factors, influencing collection frequency and pause times. Use this to fine-tune performance in applications with frequent custom block allocations, such as GUIs with dynamic resource handling.",
      "description_length": 415,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Value",
      "library": "lablgtk3",
      "description": "This module manages GObject `GValue` operations for dynamic type handling and value manipulation. It supports creating, initializing, copying, and transforming typed values, along with getting and setting values of various primitive and boxed types. Use cases include property access in GObject-based libraries and type-safe value conversion during signal handling or object introspection.",
      "description_length": 389,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Context",
      "library": "lablgtk3",
      "description": "This module manages font rendering and text layout configurations. It provides access to and modification of font descriptions, languages, and metrics, along with functions to load fonts and fontsets based on those configurations. It is used when setting up text rendering in graphical applications, such as configuring font settings for a UI element or measuring text dimensions for layout purposes.",
      "description_length": 400,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Color",
      "library": "lablgtk3",
      "description": "This module provides functions to extract RGB and pixel values from color objects, as well as parsing and converting colors to and from string representations. It operates on the `Gdk.color` data type, which represents colors in a graphical context. Concrete use cases include retrieving individual color components for rendering, converting user-input color strings into usable color values, and serializing colors for configuration or display purposes.",
      "description_length": 454,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Frame",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure frame widgets with properties like label text, alignment, and shadow type. It works with `Gtk.frame` objects, enabling precise layout customization in GTK GUI applications. Use it to define framed UI elements with labeled headers and styled borders.",
      "description_length": 304,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Proximity",
      "library": "lablgtk3",
      "description": "Handles proximity events from input devices, providing access to event type, timestamp, and associated device. Works with GdkEvent objects, specifically proximity in/out events. Used to detect when a stylus or similar device enters or leaves the proximity of a tablet or screen.",
      "description_length": 278,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreePath",
      "library": "lablgtk3",
      "description": "This module manages tree path manipulations for hierarchical data structures, providing operations to create paths from integer lists or strings, modify paths by appending or prepending indices, and navigate within a tree structure using functions like `next`, `prev`, `up`, and `down`. It supports concrete use cases such as traversing rows in a tree view, comparing path hierarchies with `is_ancestor`, and copying or extracting path indices for dynamic tree updates. The primary data type is `Gtk.tree_path`, representing a position in a multi-level tree.",
      "description_length": 558,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Dialog",
      "library": "lablgtk3",
      "description": "Handles user interactions with dialog windows by providing signals for closing the dialog and responding with a specific integer value. Works with dialog objects and their associated event handlers. Useful for implementing modal dialogs that return user input or confirmation results.",
      "description_length": 284,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.RowReference",
      "library": "lablgtk3",
      "description": "This module manages references to rows in a tree model using paths. It allows creating a stable reference to a specific row, retrieving the path of an existing reference, and checking if a reference remains valid. Concrete use cases include tracking selected rows across tree model updates or maintaining persistent access to dynamic tree data.",
      "description_length": 344,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.ToggleButton",
      "library": "lablgtk3",
      "description": "This module implements toggle buttons with explicit control over activation state and visual indicators. It provides functions to create toggle buttons, set their active state, and connect toggled event handlers. Use cases include UI elements like switch controls or stateful buttons in dialog interfaces.",
      "description_length": 305,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.Window",
      "library": "lablgtk3",
      "description": "This module provides operations for creating, configuring, and controlling top-level GUI windows, including managing window state (maximize, fullscreen), setting visual properties (decoration, size), and handling user interactions (keyboard accelerators, focus behavior). It operates on `Gtk.window` objects and integrates with GDK types to enforce layout constraints and geometry rules. Typical use cases include desktop applications requiring precise window management, such as IDEs with custom docking behaviors or media players with dynamic fullscreen transitions.",
      "description_length": 568,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.FontSelection",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate font selection objects, with direct access to the `font_name` and `preview_text` properties. It works with `Gtk.font_selection` objects, allowing precise control over font selection and preview text in GUI applications. Concrete use cases include implementing custom font selection dialogs with live text previews and synchronizing font settings across multiple UI components.",
      "description_length": 432,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Convert",
      "library": "lablgtk3",
      "description": "Handles conversion between integer flags and tagged values for modifier keys, window states, and similar low-level UI events. Works with integer bitmasks and enumerated tag types from the Gdk.Tags module. Used to interpret raw event data from graphical input devices, such as determining which modifier keys are active during a key press or checking window state flags in event handlers.",
      "description_length": 387,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.SizeGroup",
      "library": "lablgtk3",
      "description": "This module manages size groups in a GUI layout, ensuring consistent sizing among grouped widgets. It provides functions to create size groups, add or remove widgets, and set sizing modes like horizontal or vertical alignment based on the largest widget. Use it to synchronize button sizes or align form elements dynamically.",
      "description_length": 325,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBase.Widget",
      "library": "lablgtk3",
      "description": "This module enables managing the lifecycle, rendering, and interaction of UI components through operations like destruction, visibility control, event propagation, and property manipulation. It works with widget objects alongside structures such as rectangles, color values, and layout contexts to handle tasks like dynamic UI updates, input event handling, and visual customization. Specific applications include configuring tooltips with dynamic content, adjusting widget dimensions, and mapping keyboard accelerators to user actions.",
      "description_length": 536,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow",
      "library": "lablgtk3",
      "description": "This module provides operations to configure and manage scrolled windows in GTK, including setting scroll policies, adjustments, and visual properties like shadow type. It works with `scrolled_window` objects and related types such as `adjustment`, `policy_type`, and `corner_type`. Concrete use cases include creating scrollable interfaces with precise control over scrollbar visibility and behavior, and integrating custom scrolling logic with UI elements like text editors or image canvases.",
      "description_length": 494,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate cell renderers that display and edit keyboard accelerators in GTK tree views. It works with `Gtk.cell_renderer_accel` objects, exposing properties and signals to configure accelerator display, capture user input, and handle editing events. Concrete use cases include implementing customizable keyboard shortcut interfaces in application settings or plugin configuration dialogs.",
      "description_length": 434,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Icon_factory",
      "library": "lablgtk3",
      "description": "Manages icon sets for GUI elements, allowing registration and retrieval of icons by name. It works with `Gtk.icon_factory` and `Gtk.icon_set` types to associate named icons with their visual representations. Use this module to define custom icons for toolbars or menus and ensure consistent rendering across widgets.",
      "description_length": 316,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Io",
      "library": "lablgtk3",
      "description": "This module manages input/output channels for file descriptors, enabling asynchronous I/O monitoring and data transfer. It provides functions to read from channels, watch for I/O conditions like readiness for input or output, and manage watch callbacks. Concrete use cases include handling socket communication, non-blocking file reads, and integrating with event loops for real-time data processing.",
      "description_length": 400,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkWindow.Dialog",
      "library": "lablgtk3",
      "description": "This module manages the creation and interaction of dialog windows, providing functions to construct dialogs, add buttons with associated response IDs, and control dialog behavior such as sensitivity and default responses. It works with `Gtk.dialog` objects and related structures like `Gtk.button_box` and `Gtk.box`. Concrete use cases include displaying modal dialogs for user confirmation, capturing input through custom buttons, and handling responses in event-driven GUI applications.",
      "description_length": 489,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window",
      "library": "lablgtk3",
      "description": "This module supports configuration and control of GUI windows through property manipulation, event handling, and geometric adjustments. It operates on GTK window objects and associated parameter records, enabling tasks like setting titles, managing modality, positioning, and responding to window state changes. Typical applications include customizing window behavior dynamically, synchronizing UI elements with window properties, and handling user interactions such as resizing or closing.",
      "description_length": 491,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines a property for inverting the direction of a range widget, such as a scrollbar or slider. It works with boolean values to control the visual and behavioral orientation of the widget. Concrete use cases include adjusting the layout of UI elements to match right-to-left languages or custom control behavior.",
      "description_length": 325,
      "index": 214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.TreeStore",
      "library": "lablgtk3",
      "description": "This module implements a mutable tree model for storing hierarchical data with typed columns. It supports creating rows with optional parent-child relationships, setting and removing values, reordering nodes, and checking tree structure properties. Typical uses include populating tree views in GUI applications with dynamic hierarchical content like file systems or nested configuration settings.",
      "description_length": 397,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container",
      "library": "lablgtk3",
      "description": "This module provides direct operations for managing container widgets in a GUI toolkit, including adding and removing child widgets, setting focus behavior, and configuring layout properties. It works with container objects and associated widget and adjustment types to enable precise control over UI rendering and interaction. Use it to build dynamic interfaces with responsive layouts, such as resizable windows with scrollable content or focusable child elements.",
      "description_length": 466,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion",
      "library": "lablgtk3",
      "description": "This module implements autocompletion logic for text entry widgets, allowing configuration of match thresholds, data sources, and custom selection behaviors. It operates on entry completion objects linked to tree models, supporting dynamic filtering and action insertion based on user input. Use it to build interactive search fields or context-aware input controls backed by structured data.",
      "description_length": 392,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.DrawingArea",
      "library": "lablgtk3",
      "description": "Handles creation and type casting for drawing area widgets. Works with `Gtk.drawing_area` objects and GObjects. Used to instantiate customizable drawing surfaces for rendering graphics or handling user input in GUI applications.",
      "description_length": 228,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Tooltip",
      "library": "lablgtk3",
      "description": "This module manages tooltip display and customization for GUI elements. It allows setting text, markup, icons, or custom widgets as tooltips, and controls when and where tooltips appear. Use cases include showing help text on hover, displaying icons alongside descriptions, or triggering tooltips programmatically.",
      "description_length": 314,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget",
      "library": "lablgtk3",
      "description": "This module provides functions to manipulate GTK widgets' layout, styling, and behavior, including alignment, margins, opacity, and event handling. It works directly with GTK widget objects and GValue types, enabling tasks like responsive UI design, accessibility configuration, and dynamic state changes. Key operations include property access, destruction, and event-driven rendering controls.",
      "description_length": 395,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame",
      "library": "lablgtk3",
      "description": "This module configures aspect ratio and alignment for a container widget that holds a single child. It provides functions to set whether the child's aspect ratio is enforced, define the ratio value, and specify horizontal and vertical alignment. Use it to layout a widget inside a frame that maintains a fixed aspect ratio, such as displaying video or images with specific proportions.",
      "description_length": 385,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_pango.Font_map",
      "library": "lablgtk3",
      "description": "This module manages fontmaps for rendering text with Cairo and Pango, providing functions to create, configure, and retrieve fontmaps, including setting and getting the resolution and font backend type. It works with the `t` type representing a Pango fontmap object and interacts with Cairo font types and contexts. Concrete use cases include initializing a fontmap for a specific Cairo backend, adjusting DPI scaling for accurate text rendering, and creating Pango contexts tied to a particular fontmap for text layout.",
      "description_length": 520,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.X",
      "library": "lablgtk3",
      "description": "This module provides low-level operations for interacting with the X Window System, specifically for handling display updates and user notifications. It works directly with the underlying X11 display connection to perform actions like flushing output buffers and emitting system beeps. Concrete use cases include ensuring immediate rendering of graphical changes and providing auditory feedback in GUI applications.",
      "description_length": 415,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Cursor",
      "library": "lablgtk3",
      "description": "This module creates and manages cursors using predefined shapes or custom images. It supports operations to instantiate cursors from a pixel buffer and retrieve their image data. Use cases include setting custom mouse pointers in GUI applications or dynamically changing cursor appearance based on user interaction.",
      "description_length": 315,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooserButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure file chooser buttons, allowing developers to set properties such as the button's title and width in characters. It operates on the `filechooserbutton` widget and uses string and integer data types for configuration. Use cases include tailoring file selection buttons in graphical user interfaces to match layout requirements or improve user interaction through customized labels and sizing.",
      "description_length": 445,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout behavior of container widgets, specifically controlling spacing and orientation. It provides direct access to `column_spacing`, `homogeneous`, `orientation`, and `row_spacing` as GObject properties, allowing precise adjustments to grid-like layouts. These properties are used when arranging widgets in containers such as boxes or grids where consistent spacing and directionality are required.",
      "description_length": 451,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Object",
      "library": "lablgtk3",
      "description": "Handles GObject-based UI element creation and type manipulation. Provides functions to cast objects between types, create new instances with specified parameters, and safely reference or sink object lifetimes. Useful for constructing and managing GTK+ UI components like buttons, windows, or widgets with precise type control.",
      "description_length": 326,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps.Assistant",
      "library": "lablgtk3",
      "description": "This module enables creating and managing multi-step guided interfaces with structured navigation, offering functions to manipulate pages (set titles, images, completion states), control button sensitivity based on workflow progress, and embed actionable widgets. It operates on `Gtk.assistant` objects to orchestrate step-by-step user interactions and `Gtk.widget` elements for visual and functional customization. Designed for implementing wizards or configuration tools where progressive disclosure and contextual navigation are required.",
      "description_length": 541,
      "index": 228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkStock.Icon_set",
      "library": "lablgtk3",
      "description": "Handles creation and manipulation of icon sets for UI elements. It works with `Gtk.icon_set` and `Gtk.icon_source` to define icons from pixbufs or stock items. Use it to build custom icons for toolbars or menus with specific sizes and sources.",
      "description_length": 243,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module provides a property for setting the shadow type of a widget, which controls how the widget's border is displayed. It works with the `shadow_type` enumeration from the `GtkEnums` module. A concrete use case is customizing the visual appearance of containers or buttons by adjusting their border shadow style.",
      "description_length": 319,
      "index": 230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Expose",
      "library": "lablgtk3",
      "description": "Handles expose events in GUI applications, providing access to the area needing redraw and the number of pending expose events. Works with `GdkEvent.Expose.t` and `Gdk.Rectangle.t` types. Used to optimize rendering by retrieving the region affected by an expose event and determining how many such events are queued.",
      "description_length": 316,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainers.Container",
      "library": "lablgtk3",
      "description": "This module manages hierarchical relationships between UI components by providing operations to add, remove, and iterate over child widgets within a container. It supports containers and widgets from the Gtk library, enabling dynamic layout manipulation and focus control through functions like `add`, `remove`, `forall`, and `set_focus_child`. Direct use cases include building custom widget hierarchies, implementing layout managers, and adjusting child properties at runtime.",
      "description_length": 478,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.ProgressBar",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure progress bar widgets with precise control over visual properties like fraction completion, text display, and pulsing behavior. It operates on GObject-based progress bar instances and integrates with Pango for text rendering. Use it to implement custom progress indicators with dynamic text updates, indeterminate progress animations, or ellipsized labels in graphical user interfaces.",
      "description_length": 439,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Selection",
      "library": "lablgtk3",
      "description": "This module handles events related to X11 selection operations, such as clipboard interactions. It provides access to event details including the selection type, target, property, requestor window, and timestamp. Use it to process selection clear, request, and notify events in GUI applications requiring direct clipboard or inter-process communication handling.",
      "description_length": 362,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton",
      "library": "lablgtk3",
      "description": "This module implements spin button widgets for numeric input with precise control over value ranges, increments, and display formatting. It operates on `spinbutton` objects using associated types like `Gtk.adjustment` and `GtkEnums.spin_button_update_policy`, supporting operations such as value spinning, manual updates, and parameterized creation with custom behavior. Use it to create interactive numeric fields in GUIs, such as configuration sliders, quantity inputs, or time selectors with immediate validation and feedback.",
      "description_length": 529,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring editable widgets in a GUI toolkit. It provides `has_frame`, a boolean property indicating whether a widget displays a frame, and `model`, which associates a widget with a tree model for data binding. These properties are used to customize the appearance and data behavior of UI components like combo boxes or list views.",
      "description_length": 367,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Grab",
      "library": "lablgtk3",
      "description": "This module manages input grabs for widgets, allowing precise control over event capture. It provides functions to add, remove, and query the current input grab widget. Use it to implement modal interactions or direct input to specific UI elements during drag operations or pop-up displays.",
      "description_length": 290,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment",
      "library": "lablgtk3",
      "description": "This module manages numerical adjustments within a defined range, providing functions to set and retrieve values, bounds, and step increments. It works with float values and is used to control UI elements like scrollbars and sliders. Concrete use cases include configuring scrollable areas and synchronizing numeric input controls with application state.",
      "description_length": 354,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPack.SizeGroup",
      "library": "lablgtk3",
      "description": "This module manages widget size synchronization within a group, ensuring consistent sizing across multiple widgets. It provides operations to create size groups, add or remove widgets from a group, and set sizing modes. Use cases include aligning buttons or labels in a user interface to maintain visual consistency.",
      "description_length": 316,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.RadioButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create and manage radio buttons, including casting generic objects to radio button instances. It works with `Gtk.radio_button` objects and supports setting group associations to control mutual exclusivity. Concrete use cases include building grouped toggleable UI elements where only one option can be selected at a time, such as preference selections or mode switches.",
      "description_length": 404,
      "index": 240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.RadioAction",
      "library": "lablgtk3",
      "description": "This module manages radio actions in a GUI application, providing functions to set and retrieve the group of related actions and the integer identifier for each action. It supports creating radio actions, getting the current value of an action, and handling changes through a dedicated signal handler. Use it to implement mutually exclusive options, such as selecting one item from a group of radio buttons.",
      "description_length": 407,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPack.Grid",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate grid layouts in a GUI, enabling precise placement of widgets with optional row and column spacing and homogeneity. It operates on grid and widget objects, supporting attachment of widgets to specific grid cells with configurable dimensions. Concrete use cases include building complex user interfaces with structured layouts, such as forms or dashboards.",
      "description_length": 410,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Display",
      "library": "lablgtk3",
      "description": "This module provides functions to interact with the default display and retrieve window information under the pointer. It works with `Gdk.display` and `Gdk.window` types, enabling direct access to display-specific resources and pointer position data. Concrete use cases include determining the window currently under the mouse cursor and handling display-specific input events.",
      "description_length": 377,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Grab",
      "library": "lablgtk3",
      "description": "Adds and removes widget input grabs, controlling which widget receives events. Works with GTK widgets. Use to temporarily redirect input to a specific widget, like a dialog or menu.",
      "description_length": 181,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Range",
      "library": "lablgtk3",
      "description": "This module configures and manages range-based UI elements such as sliders and scrollbars, supporting operations to set adjustment parameters, control fill levels, invert direction, and manage stepper sensitivity. It works with data types like `Gtk.adjustment`, `float`, `bool`, and `GtkEnums.sensitivity_type` to define widget behavior and appearance. Concrete use cases include building custom numeric input controls with bounded ranges, visual feedback via fill levels, and conditional stepper interactivity in graphical applications.",
      "description_length": 537,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTagTable",
      "library": "lablgtk3",
      "description": "This module provides operations to manage a collection of text tags, enabling dynamic styling and formatting in GTK text buffers. It supports adding, removing, and looking up tags by name, and works directly with `Gtk.text_tag` and `Gtk.text_tag_table` structures. Use it to implement features like syntax highlighting, real-time text formatting, or synchronized tag updates in collaborative text editing interfaces.",
      "description_length": 416,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.View",
      "library": "lablgtk3",
      "description": "This module provides text display and interaction capabilities through widgets that support initializing views with or without underlying buffers, scrolling content to specific positions, and converting between buffer and window coordinate systems. It operates on text buffers, iterators, and marks to manage content layout, while also manipulating window dimensions and embedded child elements, enabling interactive interfaces that require precise text navigation, dynamic layout adjustments, and integration of graphical components within text streams.",
      "description_length": 554,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Timeout",
      "library": "lablgtk3",
      "description": "Handles timed events in the main loop by scheduling and canceling callbacks. It works with timeouts represented by integer IDs and functions that return a boolean to indicate completion. Use it to execute code after a delay or cancel pending timeouts.",
      "description_length": 251,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Setting",
      "library": "lablgtk3",
      "description": "Handles events related to system settings changes, such as theme or interface adjustments. It provides access to the action type (e.g., changed, deleted) and the name of the affected setting. Useful for responding to environment-level configuration updates in GUI applications.",
      "description_length": 277,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Plug",
      "library": "lablgtk3",
      "description": "This module provides a cast function to convert GObject instances to GTK plug objects and includes a signal handler module S for managing embedded plug events. It operates on GTK widget types that support plug embedding, specifically handling the `embedded` event. Use it to dynamically update UI components when a plug widget is embedded into a socket within a window.",
      "description_length": 369,
      "index": 250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.WindowState",
      "library": "lablgtk3",
      "description": "Handles window state change events in GUI applications. It provides functions to cast generic events to window state events and retrieve the mask of changed states or the new state values. Works with window state tags to track changes like maximization, fullscreen, or focus.",
      "description_length": 275,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Arrow",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure arrow widgets with specific parameters, including arrow type and shadow style. It works directly with `Gtk.arrow` objects and related parameter lists. Use it to customize arrow appearance in UI elements like buttons or scrollbars, such as setting the direction or visual depth of an arrow.",
      "description_length": 344,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextBuffer",
      "library": "lablgtk3",
      "description": "This module manages rich text content and user interaction state in a GUI application, offering functions to manipulate text buffers, apply styling through tags, and track cursor and selection changes. It operates on text buffers, tag tables, text iterators, and child anchors to support dynamic content updates and user-driven editing. Concrete use cases include implementing styled text editors, handling input with undo/redo, and synchronizing UI elements with buffer state.",
      "description_length": 477,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeSelection",
      "library": "lablgtk3",
      "description": "This module manages selection behavior in tree views, providing functions to control selection modes, query selected rows, and manipulate selections programmatically. It works with `Gtk.tree_selection`, `Gtk.tree_path`, and `Gtk.tree_iter` to enable concrete interactions such as selecting or deselecting specific rows, iterating over selected rows, and setting custom selection filters. Use cases include implementing multi-select logic, tracking user selections, and synchronizing UI elements with selection state.",
      "description_length": 516,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure table layouts in GUI applications, allowing precise control over rows, columns, spacing, and widget placement. It works with table objects and supports operations like attaching widgets with specific alignment and padding, setting row and column spacing, and dynamically adjusting table dimensions. Concrete use cases include building grids with uniform spacing and managing dynamic UI layouts that require runtime adjustments to table structure.",
      "description_length": 501,
      "index": 255,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring button widgets, including setting the button's label text, title, and whether underscores in the label should be interpreted as mnemonics. It works with GObject-based button types, allowing string and boolean values to be assigned to these properties. Concrete use cases include customizing button appearance and behavior in GUI applications, such as enabling keyboard shortcuts via underlined characters.",
      "description_length": 452,
      "index": 256,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeModel",
      "library": "lablgtk3",
      "description": "Handles row-level changes in hierarchical data models using signals for insertions, deletions, and reordering. Works with tree paths and iterators to track and respond to modifications in structures like file systems or nested UI elements. Directly supports dynamic updates in components such as tree views when underlying data changes.",
      "description_length": 336,
      "index": 257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Idle",
      "library": "lablgtk3",
      "description": "Handles deferred execution of functions in the main event loop. Adds and removes idle callbacks that run when no higher-priority events are pending. Use to schedule non-urgent work like UI updates or background tasks without blocking interactive elements.",
      "description_length": 255,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextMark",
      "library": "lablgtk3",
      "description": "This module manages text markers in a graphical user interface, providing functions to create, modify, and query marker properties such as visibility, name, and buffer association. It operates on text mark objects, allowing for precise control over text positioning and display behavior. Use cases include implementing custom text editing features like bookmarks, selection tracking, or dynamic text annotations within a text buffer.",
      "description_length": 433,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon",
      "library": "lablgtk3",
      "description": "This module manages GTK status icons with operations for creation, image and tooltip configuration, screen association, and visibility control. It works with GObject-based status icon instances, GdkPixbuf for images, and GdkScreen for screen context. Concrete use cases include implementing system tray icons with dynamic images, tooltips, and multi-screen support.",
      "description_length": 365,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Font",
      "library": "lablgtk3",
      "description": "This module enables manipulation of font attributes through `Pango.font_description` objects, supporting operations like property adjustments, batch configuration via optional parameters, and string serialization. It also provides metric queries on `Pango.font_metrics` to retrieve rendering-specific values such as descent and character width in device-units, facilitating precise text layout calculations. These capabilities are essential for dynamically styling text and determining spatial requirements in graphical rendering contexts.",
      "description_length": 539,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.AboutDialog",
      "library": "lablgtk3",
      "description": "This module configures about dialog windows in a GUI application, setting and retrieving program metadata such as authors, artists, and documenters. It supports data types like string lists for contributor information and GdkPixbuf for logos, along with optional parameters for version, license, and website display. Concrete use cases include populating an about dialog with application details and managing contributor credits dynamically.",
      "description_length": 441,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Markup",
      "library": "lablgtk3",
      "description": "Processes simple XML-like markup by escaping text and parsing structured content. Handles errors such as invalid UTF-8, unknown elements, or malformed attributes. Useful for generating or sanitizing XML fragments in GUI configurations or data serialization.",
      "description_length": 257,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButton.Button",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate button widgets, including setting labels, stock icons, and relief styles. It supports operations to simulate button interactions such as pressing, releasing, clicking, and triggering enter/leave events. Concrete use cases include building UI elements like action triggers, menu items, and interactive controls in graphical applications.",
      "description_length": 392,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction",
      "library": "lablgtk3",
      "description": "This module manages toggle actions in GUI applications, providing functions to create, activate, and monitor toggle states. It works with objects implementing the `toggleaction` interface, such as buttons and menu items, allowing visual customization (e.g., rendering as radio buttons) and handling state changes via callbacks. Use it to implement interactive UI elements like checkboxes or switchable toolbar buttons with associated on/off behavior.",
      "description_length": 450,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.CheckMenuItem",
      "library": "lablgtk3",
      "description": "This module implements checkable menu items with support for label creation, mnemonic handling, and active state toggling. It operates on `Gtk.check_menu_item` objects, allowing creation with or without mnemonics and programmatic state control. Concrete use cases include building menu interfaces with toggleable options like \"Show Line Numbers\" or \"Enable Notifications\".",
      "description_length": 372,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action",
      "library": "lablgtk3",
      "description": "This module provides operations to create and manipulate action objects in a GUI toolkit, with functions to set properties like label, icon, sensitivity, and visibility, and to connect activation handlers. It supports dynamic control of UI elements such as buttons and menu items, enabling responsive interactions through callbacks and accelerator keys. Concrete use cases include building customizable toolbars, context menus, and keyboard shortcuts in desktop applications.",
      "description_length": 475,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Glib.Message",
      "library": "lablgtk3",
      "description": "This module provides functions to manage message logging, including setting log handlers, defining fatal levels, and filtering log messages by domain and severity. It works with log levels as polymorphic variants and handles logging output through user-defined functions. Concrete use cases include redirecting error messages to a file, suppressing non-critical logs, or triggering actions on specific log events.",
      "description_length": 413,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.Buffer",
      "library": "lablgtk3",
      "description": "This module enables precise text content manipulation through operations like insertion, deletion, and retrieval, alongside managing rich text features such as tags, marks, and embedded pixbufs or anchors. It works with text buffers, iterators, and clipboard objects to support interactive editing scenarios, such as implementing custom text editors with formatted content, handling user-driven selections, or integrating clipboard actions like copy-paste within GUI applications.",
      "description_length": 480,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter",
      "library": "lablgtk3",
      "description": "This module filters rows in a tree model based on a visibility function or column, allowing subsets of hierarchical data to be displayed. It operates on tree models and paths, enabling use cases like showing only matching search results or limiting view to a specific branch. Functions include converting paths between child and filtered models, setting visibility rules, and triggering refiltering.",
      "description_length": 399,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Configure",
      "library": "lablgtk3",
      "description": "This module handles window configuration events, providing access to position and size data. It extracts coordinates and dimensions from event structures to facilitate window layout adjustments. Use it to respond to window resizing or repositioning in GUI applications.",
      "description_length": 269,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.RadioMenuItem",
      "library": "lablgtk3",
      "description": "This module manages radio menu items in a GUI application, allowing creation of items with labels or mnemonics and grouping them for mutual exclusivity. It operates on `Gtk.radio_menu_item` objects and their associated group type. Concrete use cases include building menu interfaces where only one option can be selected at a time, such as theme selections or mode switches.",
      "description_length": 374,
      "index": 272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.ColorSelection",
      "library": "lablgtk3",
      "description": "This module manages color selection widgets with operations to set and retrieve color, alpha values, and UI toggles like opacity control and palette visibility. It works with `Gobject` instances that implement color selection capabilities, such as GTK's color selection components. Use it to configure color settings in GUI applications and respond to color changes in real time, such as updating a preview area or applying a selected color to an element.",
      "description_length": 455,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Timeout",
      "library": "lablgtk3",
      "description": "This module schedules functions to be called after a specified time interval. It provides `add` to register a callback with a timeout in milliseconds and `remove` to cancel an existing timeout using its ID. Use it to delay execution, implement polling, or trigger one-time or recurring actions in event-driven programs.",
      "description_length": 319,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextChildAnchor",
      "library": "lablgtk3",
      "description": "Handles anchors for child widgets embedded within text buffers. It allows creating anchors with specific properties, retrieving associated widgets, and checking if an anchor has been deleted. Useful for managing interactive elements like buttons or images placed inside a text view.",
      "description_length": 282,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBoxText",
      "library": "lablgtk3",
      "description": "This module provides operations for creating and managing text-based combo boxes. It works with `Gtk.combo_box_text` objects, allowing the addition, removal, and selection of text items. Concrete use cases include building user interface elements for selecting from a list of strings, such as dropdown menus or input fields with predefined options.",
      "description_length": 348,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for alignment and scrolling behavior in container widgets. It provides access to horizontal and vertical adjustments, shadow type, and alignment coordinates. These properties are used to control layout and appearance of bin containers in GUI applications.",
      "description_length": 286,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.Internal",
      "library": "lablgtk3",
      "description": "This module provides low-level operations for converting and copying tree paths in a data structure, specifically working with `Gtk.tree_path` types. It handles marshaling and duplication of path data through reference-stored conversion functions. Concrete use cases include managing hierarchical data navigation and path persistence in GUI components like tree views.",
      "description_length": 368,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ActionGroup",
      "library": "lablgtk3",
      "description": "This module manages action groups by providing functions to create, modify, and query groups of actions. It supports operations like adding or removing actions, retrieving specific actions by name, and listing all actions in a group. It works directly with GObject-based action group and action instances to implement dynamic UI behavior, such as enabling or disabling menu items based on application state.",
      "description_length": 407,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo",
      "library": "lablgtk3",
      "description": "This module configures and manipulates combo box cell renderers in a GUI toolkit. It allows setting the tree model, specifying the text column, and controlling editability of combo cells. It directly works with `Gtk.cell_renderer_combo`, `Gtk.tree_path`, and `Gtk.tree_iter` types, enabling dynamic updates to model data based on user selections in a tree view.",
      "description_length": 361,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Bin",
      "library": "lablgtk3",
      "description": "This module provides a single operation, `cast`, which safely converts a GObject into a `Gtk.bin` type, ensuring it adheres to the expected structure. It works specifically with GObject-based types and the `Gtk.bin` widget container in the GTK+ library. A concrete use case is when integrating custom widgets into a `GtkBin` container, requiring type-safe downcasting for proper UI composition.",
      "description_length": 394,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Window",
      "library": "lablgtk3",
      "description": "This module manages low-level window operations, such as creating windows from XIDs, retrieving window positions, and setting cursors. It works with window objects, XIDs, and visual attributes. Concrete use cases include embedding external windows, tracking pointer location, and configuring window visuals.",
      "description_length": 307,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Orientable",
      "library": "lablgtk3",
      "description": "This module provides functions to set and retrieve the orientation of UI elements using the `GtkEnums.orientation` type, which includes `Horizontal` and `Vertical`. It allows configuring layout direction for widgets like scrollbars and boxes, enabling concrete use cases such as dynamically switching a container's layout between horizontal and vertical. Key operations include `set_orientation`, `get_orientation`, and `create` for initializing with specific parameters.",
      "description_length": 471,
      "index": 283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort",
      "library": "lablgtk3",
      "description": "This module provides functions to bridge between a sorted tree model and its underlying base model, enabling direct access and conversion of paths and iterators. It operates on `Gtk.tree_model` and `Gtk.tree_model_sort` types, facilitating tasks like mapping selections in a sorted view back to the original data or applying custom sorting logic. Key use cases include synchronizing UI elements with unsorted data sources and implementing complex row filtering or grouping mechanisms.",
      "description_length": 484,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Visibility",
      "library": "lablgtk3",
      "description": "This module handles visibility change notifications in GUI applications. It provides a type `t` representing visibility notify events and functions to cast generic events to visibility events and retrieve the visibility state. Use it to detect when windows become partially or fully visible, or are obscured.",
      "description_length": 308,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scrollbar",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate scrollbar widgets with a specified orientation. It works with `Gtk.scrollbar` objects and supports initializing them with custom parameters. Concrete use cases include building vertical or horizontal scrollbars for GUI elements like text views or canvas areas.",
      "description_length": 316,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextTag",
      "library": "lablgtk3",
      "description": "This module defines text tag objects for applying attributes to text in a buffer, supporting operations like setting priorities and handling events. It works with `Gtk.text_iter` and `GdkEvent.any` to enable rich text interactions. Concrete use cases include implementing clickable links, dynamic formatting, and event-driven text behavior in a text editor.",
      "description_length": 357,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem",
      "library": "lablgtk3",
      "description": "This module manages checkable menu items in GTK, providing direct control over their active and inconsistent states through properties and event handling. It works specifically with `check_menu_item` objects, allowing creation with custom parameters and triggering actions when the item is toggled. Use it to implement interactive menu options that reflect binary or indeterminate states, such as enabling/disabling features or selecting modes.",
      "description_length": 444,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Main",
      "library": "lablgtk3",
      "description": "This module manages the initialization and execution of a GUI application's main loop. It provides functions to start, run, and quit the main loop, retrieve version information, and handle event timestamps. Key operations include `init` for setup, `main` to run the loop, `quit` to exit, and `get_current_event_time` for event timing, working with unit values and returning integers or strings where applicable. Use cases include bootstrapping a GTK application, handling event-driven execution, and retrieving runtime version details.",
      "description_length": 535,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Statusbar",
      "library": "lablgtk3",
      "description": "This module manages status bar widgets, providing operations to customize their visual style and handle message updates. It supports setting shadow types with the `GtkEnums.shadow_type` enumeration and interacting with messages through context IDs, including pushing, popping, and removing specific messages. Use it to build dynamic status bars with contextual feedback and visual customization in GUI applications.",
      "description_length": 415,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Screen",
      "library": "lablgtk3",
      "description": "This module provides functions to retrieve screen dimensions, obtain a Pango context for rendering text, and access the default screen. It operates on the `Gdk.screen` type, representing a physical screen. Concrete use cases include adjusting window sizes based on screen resolution and setting up text rendering contexts for GUI elements.",
      "description_length": 339,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMisc.Misc",
      "library": "lablgtk3",
      "description": "This module provides functions for creating and configuring miscellaneous UI components with alignment and padding parameters. It works with GObject-based data structures, particularly widgets and their parameters. Concrete use cases include setting up spacers or labels with precise layout properties in a GTK interface.",
      "description_length": 321,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Socket",
      "library": "lablgtk3",
      "description": "This module manages socket widgets for embedding external content, offering creation and type casting operations. It works with `Gtk.socket` objects and connects callbacks to plug lifecycle events like addition or removal. Use it to integrate and monitor dynamically embedded widgets within a socket container.",
      "description_length": 310,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Main",
      "library": "lablgtk3",
      "description": "This module initializes the GTK library, runs the main event loop, and provides functions to quit the loop and retrieve the library version. It handles string and integer data types for locale settings and version information. Concrete use cases include starting a GTK application, managing event processing, and cleanly shutting down the application.",
      "description_length": 351,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Language",
      "library": "lablgtk3",
      "description": "This module provides operations to create and manipulate language tags from strings, convert them back to strings, and check if a language matches a given string. It works with the `Pango.language` type representing parsed language tags. Use cases include handling multilingual text in user interfaces, filtering content by language, and validating language codes.",
      "description_length": 364,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Glib.Utf8",
      "library": "lablgtk3",
      "description": "This module handles UTF-8 string validation, encoding, decoding, and transformation. It operates on standard OCaml strings and Glib.unichar values, providing direct conversion between UTF-8 and UCS-4 representations. Functions support tasks like character extraction, normalization, case conversion, and collation for text processing and internationalization.",
      "description_length": 359,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.RadioMenuItem",
      "library": "lablgtk3",
      "description": "Handles operations for radio menu items in a menu system. Provides functions to cast generic objects to radio menu item types and set their group associations. Useful for managing grouped selectable menu options in graphical user interfaces.",
      "description_length": 241,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create and configure font selection buttons with properties like font name, dialog title, and visibility settings for size and style options. It works with GTK font button objects to customize font selection dialogs in GUI applications. Use it to build interactive font pickers that update a text preview or apply selected fonts to a document in real time.",
      "description_length": 391,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create and configure tri-state toggle buttons, with properties like `active`, `draw_indicator`, and `inconsistent` to control their state and appearance. It supports handling state changes through the `toggled` signal, enabling direct updates to UI or application logic when the button is switched. Use cases include implementing checkboxes with indeterminate states and switch controls in graphical interfaces.",
      "description_length": 446,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Item",
      "library": "lablgtk3",
      "description": "This module represents individual stock items in a GUI toolkit, containing identifiers, labels, and icons. It supports operations to add items to the stock, list all registered item IDs, and retrieve items by their ID. Use this module to manage predefined UI elements like \"Open,\" \"Save,\" or \"Quit\" with consistent icons across menus and toolbars.",
      "description_length": 347,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.AboutDialog",
      "library": "lablgtk3",
      "description": "This module implements an about dialog for displaying application metadata. It allows setting and retrieving artists, authors, and documenters as string lists, and configuring dialog properties like comments, copyright, license, logo, and version through parameterized creation. Use it to present application information with customizable visual elements and structured contributor data.",
      "description_length": 387,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Io",
      "library": "lablgtk3",
      "description": "This module manages I/O channels and event watches for handling asynchronous input and output operations. It provides functions to read from channels, add or remove condition watches, and convert file descriptors into channels. Concrete use cases include monitoring sockets for incoming data, handling file I/O completion, and integrating with event loops for network communication.",
      "description_length": 382,
      "index": 302,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem",
      "library": "lablgtk3",
      "description": "This module includes operations to cast objects to a `Gtk.separator_tool_item` type and create new instances with specified parameters. It provides a property module `P` for managing the visibility state of a separator tool item using a boolean value. It is used to control the display of separators in a toolbar interface dynamically.",
      "description_length": 335,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile.FileChooser",
      "library": "lablgtk3",
      "description": "This module supports operations to select and manage files or folders within GTK file chooser interfaces, including setting paths, handling previews, and applying filters. It works with dialogs, widgets, URIs, and file metadata to enable tasks like restricting selections to specific file types or organizing shortcuts for frequent directories. Common use cases involve creating customized file dialogs with tailored filters, preview capabilities, or persistent navigation shortcuts.",
      "description_length": 483,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.Menu",
      "library": "lablgtk3",
      "description": "This module manages hierarchical menus and their interactions in GUI applications. It provides functions to create menus, attach them to widgets, control their visibility with popups and popdowns, and manage accelerators and active items. Concrete use cases include building context menus, dropdown navigation bars, and keyboard-accelerated menu systems.",
      "description_length": 354,
      "index": 305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Separator",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate separator widgets with a specific orientation, such as horizontal or vertical. It operates on objects supporting the `separator` tag and uses the `orientation` enumeration from `GtkEnums`. Use it to define visual dividers in UI layouts where directionality matters, like in toolbars or panes.",
      "description_length": 348,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for GUI actions, including `name`, `sensitive`, and `visible`. It works with GObject-based types to manage action states and visibility. Use it to configure and control UI elements like buttons and menu items in GTK applications.",
      "description_length": 260,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeView",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure tree views for displaying hierarchical data, supporting operations like setting models, enabling search, and adjusting column behavior. It works with tree paths, models, and view columns to manage data display and user interactions. Concrete use cases include building file browsers, structured data editors, and interactive UI elements that require navigation through nested data.",
      "description_length": 436,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Event",
      "library": "lablgtk3",
      "description": "This module handles event retrieval and propagation in GUI applications. It provides functions to access the current event time, retrieve the current event and its associated widget, and propagate events to specific widgets. Use cases include handling user input events and managing event flow in custom widget hierarchies.",
      "description_length": 323,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.Style",
      "library": "lablgtk3",
      "description": "This module manages visual styling for GUI components, handling operations like creating and copying styles, attaching them to windows, and setting or retrieving color properties for different widget states. It works with `Gtk.style` and `Gdk.color` types, along with window and state type tags. Concrete use cases include customizing the appearance of buttons or text areas by adjusting background, foreground, and shading colors based on interaction states like active, prelight, or insensitive.",
      "description_length": 497,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Alignment",
      "library": "lablgtk3",
      "description": "This module defines properties for aligning and scaling widgets within a container, including horizontal and vertical alignment, scaling factors, and padding. It works with GObject-based UI components that support the `alignment` class. These properties are used to control layout behavior in GUI elements like buttons, frames, or custom widgets.",
      "description_length": 346,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry",
      "library": "lablgtk3",
      "description": "This module configures GTK entry widgets with properties for text, visibility, and visual cues, and supports interactive behaviors like input validation and icon interaction. It works directly with strings, integers, and GTK-specific types for entries and completions. Use it to build form inputs with placeholder text, password fields with visibility toggles, or searchable entry fields with auto-completion.",
      "description_length": 409,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem",
      "library": "lablgtk3",
      "description": "This module provides functions to manipulate tool item properties in a GUI toolkit, such as setting homogeneity, expand behavior, and drag window usage. It operates on tool item objects, allowing configuration of layout and interaction attributes. Concrete use cases include adjusting tool item display in toolbars based on orientation and managing drag-and-drop behavior in graphical interfaces.",
      "description_length": 396,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Type",
      "library": "lablgtk3",
      "description": "This module manages GObject type hierarchies and introspection. It provides operations to query type relationships, such as checking inheritance with `is_a`, retrieving parent types with `parent`, and resolving types by name with `from_name`. Concrete use cases include dynamically inspecting GObject-based class trees and registering new types with the GObject type system.",
      "description_length": 374,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Invisible",
      "library": "lablgtk3",
      "description": "This module casts objects to invisible widgets and creates new invisible widgets with specified parameters. It provides access to the `screen` property for retrieving the associated `Gdk.screen`, specifically on invisible widgets. Use it to manage screen-specific behavior in multi-monitor setups or when handling hidden UI components that still require screen context.",
      "description_length": 369,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Convert",
      "library": "lablgtk3",
      "description": "This module handles character set conversion between different encodings, providing direct operations like `convert` and `convert_with_fallback` for transforming byte sequences. It supports common encodings and integrates with system locales and file paths through specific functions like `locale_to_utf8`, `filename_to_utf8`, and their inverses. Concrete use cases include converting legacy text data to UTF-8, handling file paths in system-native encodings, and normalizing user input across different locales.",
      "description_length": 512,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Grid",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure grid layouts in GUI applications, with operations to set row and column spacing, homogeneity, and baseline alignment. It works directly with grid and widget objects to control their visual arrangement and sizing behavior. Use it to build structured, responsive user interfaces where precise control over grid cell properties is required.",
      "description_length": 392,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit.SpinButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate spin buttons, which are UI elements for numeric input. It supports operations like setting the value, adjusting step increments, and retrieving the current value as an integer. Concrete use cases include configuring numeric settings in forms or controls where user input is constrained to a specific range.",
      "description_length": 362,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label",
      "library": "lablgtk3",
      "description": "This module manages label widgets with functions to set and retrieve text, configure layout properties like justification and ellipsizing, and control text selection. It works directly with `Gtk.label` objects, using strings, integers, and enumeration types for text behavior and styling. Use it to create and customize display labels in a GTK UI, including selectable text, mnemonic handling, and formatted layout.",
      "description_length": 415,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Property",
      "library": "lablgtk3",
      "description": "This module manages X11 window properties through operations to set, retrieve, and delete properties on windows. It works with window objects, atoms representing property types and names, and raw X data. Concrete use cases include storing and reading window metadata like titles or session identifiers during window management or inter-process communication.",
      "description_length": 358,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuShell",
      "library": "lablgtk3",
      "description": "This module manages menu shell interactions in a GUI application, providing operations to add, remove, and navigate menu items. It supports data types representing menu shells and widgets, with functions like `append`, `prepend`, `insert`, and `deactivate` for dynamic menu manipulation. Concrete use cases include implementing dropdown menus, context menus, and keyboard-driven navigation in desktop applications.",
      "description_length": 414,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GTree.Path",
      "library": "lablgtk3",
      "description": "This module manipulates tree path objects representing positions in a tree structure. It supports creating, copying, and converting paths to and from strings, as well as navigating and modifying paths with operations like appending, prepending, moving to siblings, parents, or children. Concrete use cases include tracking selections in tree views, traversing hierarchical data, and building or modifying paths dynamically during user interaction with tree widgets.",
      "description_length": 465,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Rectangle",
      "library": "lablgtk3",
      "description": "This module defines a data structure for representing rectangular areas with integer coordinates. It provides functions to create rectangles and access their position and dimensions. Useful for managing window geometries or layout calculations in graphical applications.",
      "description_length": 270,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Key",
      "library": "lablgtk3",
      "description": "This module handles key press and release events in a graphical user interface. It provides access to key symbols, character strings, hardware keycodes, and modifier states from key events. Use it to implement keyboard input handling, such as detecting shortcut keys or processing text input.",
      "description_length": 292,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSelection",
      "library": "lablgtk3",
      "description": "This module provides operations to cast generic GObject instances to tree selection objects and includes a submodule for connecting to selection change events. It works with `Gtk.tree_selection` to monitor and respond to user selections in tree views. A concrete use case is synchronizing UI components or triggering data updates when a user selects a different row in a tree-based interface.",
      "description_length": 392,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Property",
      "library": "lablgtk3",
      "description": "This module provides direct access to GObject properties and notification control. It allows getting and setting property values by name or type, freezing and thawing property change notifications, and handling dynamic property values. These operations are used to manipulate GObject instances with precise control over property behavior, such as setting parameters during object construction or observing property changes.",
      "description_length": 423,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Internal",
      "library": "lablgtk3",
      "description": "This module provides functions to retrieve widget area information, specifically the full allocation rectangle and the allocation at a pointer position. It operates on GTK widget data structures, using `Gpointer.boxed` and `Gtk.rectangle` types. These functions are used to determine widget positioning and layout for event handling and rendering.",
      "description_length": 347,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder.Builder",
      "library": "lablgtk3",
      "description": "This module handles the creation and manipulation of UI components from XML descriptions using a builder pattern. It provides functions to load UI definitions from files or strings, retrieve specific objects by name, and add objects selectively. Commonly used for constructing graphical interfaces in GTK applications by parsing `.ui` files or embedded XML strings.",
      "description_length": 365,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Event",
      "library": "lablgtk3",
      "description": "Handles event retrieval, time stamping, and propagation within the GUI event loop. Works with `GdkEvent.any` and `Gtk.widget` objects to manage user interactions and system events. Used to implement custom event handlers, track event timing, and route events to appropriate widgets.",
      "description_length": 282,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate radio tool buttons, which are used to manage exclusive selection groups in toolbars. It allows setting and retrieving the group property of a radio tool button, ensuring only one button in the group can be active at a time. Use this module to implement UI controls like mode selectors or category filters where mutual exclusion is required.",
      "description_length": 396,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook",
      "library": "lablgtk3",
      "description": "This module implements notebook widget management operations for GUI applications, providing functions to manipulate tabbed containers with precise control over page insertion, removal, and navigation. It supports configuration of visual properties like tab position, border visibility, and popup menus, along with runtime modifications such as tab reordering and dynamic label updates. Concrete use cases include building multi-tab interfaces with custom tab behavior, implementing wizard-style UIs, and managing dynamic page sets in configuration dialogs.",
      "description_length": 557,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.Toolbar",
      "library": "lablgtk3",
      "description": "This module manages toolbar widgets with operations to create, configure, and manipulate toolbars, including setting orientation, style, and inserting or querying toolbar items. It works with `Gtk.toolbar` objects and related parameters like icon size, toolbar style, and item indices. Concrete use cases include building customizable UI toolbars with dynamic item insertion, style adjustments, and drag-and-drop item handling.",
      "description_length": 427,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure viewport objects with specific adjustments and shadow styles. It operates on viewport and adjustment instances to manage scrollable content and visual borders. Use it to set horizontal and vertical scrolling behavior and define the shadow appearance of a viewport container.",
      "description_length": 329,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar",
      "library": "lablgtk3",
      "description": "This module provides functions to manipulate and retrieve date values from a calendar widget, including selecting specific days or months, marking days for visual emphasis, and setting display options. It works directly with calendar widgets to handle date selection and visualization tasks. Concrete use cases include implementing date pickers, scheduling interfaces, and time-based data navigation tools.",
      "description_length": 406,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure scale widgets with precise control over their appearance and behavior. It supports operations like setting the display precision, visibility of value labels, origin positioning, and value formatting through signal handling. Use cases include implementing sliders for volume control with numeric feedback or temperature selectors with custom value formatting and origin indicators.",
      "description_length": 435,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GWindow.Buttons",
      "library": "lablgtk3",
      "description": "This module defines standard button configurations for dialog windows, specifying variants like `OK`, `Cancel`, `Yes`, `No`, and `Close`. It works with polymorphic variant types representing button responses, used in modal dialogs for user interaction. Concrete use cases include confirming actions, selecting options, or closing dialogs in GUI applications.",
      "description_length": 358,
      "index": 336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.MenuItem",
      "library": "lablgtk3",
      "description": "This module manages menu item creation and behavior, supporting operations like setting submenus, activating items, and configuring accelerators. It works with `Gtk.menu_item` objects and related widget types, enabling precise control over menu interactions. Concrete use cases include building context menus with custom actions, binding keyboard shortcuts to menu options, and dynamically updating submenu content based on application state.",
      "description_length": 442,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Rc",
      "library": "lablgtk3",
      "description": "Handles loading and parsing of configuration files for application settings. Works with strings and file paths to read and interpret key-value pairs. Used to initialize application preferences from standard configuration files like `.gtkrc`.",
      "description_length": 241,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Scroll",
      "library": "lablgtk3",
      "description": "Handles scroll events in GUI applications, providing access to scroll direction, position, and device information. Works with scroll events from input devices, extracting coordinates, state, and delta values. Useful for implementing custom scrolling behavior or gesture recognition based on wheel or touchpad input.",
      "description_length": 315,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure combo boxes with properties that control user input behavior. It supports boolean options like allowing empty input, case sensitivity, and arrow key navigation, specifically for GUI combo box widgets. Use it to customize combo box interaction in applications, such as requiring valid selections or enabling keyboard-driven input.",
      "description_length": 384,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.MenuItem",
      "library": "lablgtk3",
      "description": "This module manages individual items within a menu, providing operations to create labeled or mnemonic menu items, set and retrieve submenus, activate or toggle item states, and configure accelerators. It works with `menu_item` objects and interacts with `menu` and `widget` structures to build hierarchical menu interfaces. Concrete use cases include constructing application menus with submenus, implementing keyboard shortcuts, and dynamically enabling or disabling menu options based on application state.",
      "description_length": 509,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.CssProvider",
      "library": "lablgtk3",
      "description": "This module provides functions to create and load CSS styling data into a `Gtk.css_provider` instance, enabling custom visual styling for GTK UI components. It operates directly on CSS strings and the `Gtk.css_provider` type to apply styles at runtime. Concrete use cases include theming applications or dynamically adjusting widget appearance based on user preferences.",
      "description_length": 370,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeModel",
      "library": "lablgtk3",
      "description": "This module provides functions to access and manipulate tree-like data structures in a model-view pattern. It supports operations such as retrieving rows, navigating hierarchy, and fetching values by column. Concrete use cases include implementing custom tree data sources for UI components like tree views or hierarchical lists.",
      "description_length": 329,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererText",
      "library": "lablgtk3",
      "description": "This module configures text rendering and editing behavior for cells in GTK tree views. It supports operations like setting font styles, text color, and wrapping through the `P` module, and handling edit events via the `S` module. Use it to customize display and interaction for textual data in tables or lists, such as highlighting specific entries or capturing user input changes.",
      "description_length": 382,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Unichar",
      "library": "lablgtk3",
      "description": "This module provides functions for Unicode character manipulation, including case conversion, classification, and numeric value extraction. It operates on the `Glib.unichar` type, representing Unicode characters, and supports tasks like checking if a character is a digit, converting to lowercase, or determining its printability. Concrete use cases include text processing, input validation, and character encoding conversion.",
      "description_length": 427,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Clipboard",
      "library": "lablgtk3",
      "description": "This module handles clipboard operations for transferring data such as text, images, and arbitrary content identified by atoms. It provides functions to set and retrieve clipboard contents synchronously or asynchronously, clear the clipboard, and request specific types of data. Concrete use cases include copying text to the system clipboard, pasting images from external applications, and handling custom clipboard formats in GUI applications.",
      "description_length": 445,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.MessageDialog",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure message dialogs with specific properties like message type, text, and buttons. It operates on `message_dialog` objects and supports GTK enums and parameters for customization. Use it to display dialogs with formatted messages and predefined button layouts, such as error or confirmation dialogs.",
      "description_length": 350,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure expander widgets, allowing control over expansion state, labels, spacing, and mnemonic handling. It works directly with `Gtk.expander` objects, enabling customization of UI elements that show or hide content dynamically. Concrete use cases include building collapsible settings panels or organizing complex interfaces into manageable sections.",
      "description_length": 398,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.FontMap",
      "library": "lablgtk3",
      "description": "Loads a font based on a given description and context, returning a font object for rendering text. Works with `Pango.font_map`, `Pango.context`, and `Pango.font_description` to configure and retrieve specific font details. Useful for applications needing precise font control in text layout and rendering, such as document viewers or UI toolkits.",
      "description_length": 346,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Atom",
      "library": "lablgtk3",
      "description": "This module handles operations related to Gdk atoms, which are used to identify interned strings in the X11 window system. It provides functions to intern strings into atoms, retrieve the string name of an atom, and access predefined atoms for common selections like clipboard and primary. Use cases include interacting with X11 properties, drag-and-drop protocols, and window manager hints where specific atoms are required.",
      "description_length": 425,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Idle",
      "library": "lablgtk3",
      "description": "This module schedules functions to be called when the main event loop is idle. It provides `add` to register a callback with an optional priority and `remove` to cancel a previously added callback. The module works with the `id` type to uniquely identify and manage each scheduled operation. Use it to defer non-critical tasks, such as background processing or UI updates, until the application is idle.",
      "description_length": 403,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.Iter",
      "library": "lablgtk3",
      "description": "This module provides operations for navigating and manipulating text buffer positions through iterator objects, enabling precise movement by characters, words, lines, or logical text boundaries. It works with text iterators to inspect properties like tags, editability, and cursor positions within a text buffer, supporting tasks such as text selection, boundary detection, and content rendering. Specific use cases include implementing cursor movement logic, searching for text ranges, and determining formatting transitions in a GTK text widget.",
      "description_length": 547,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.Editable",
      "library": "lablgtk3",
      "description": "This module provides direct text manipulation and selection control for editable GUI components. It supports operations like inserting, deleting, and selecting text ranges, as well as clipboard interactions and input validation. Use it to implement rich text input features, such as auto-completion, character filtering, and synchronized multi-field updates.",
      "description_length": 358,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextView",
      "library": "lablgtk3",
      "description": "This module configures and manipulates GTK text view widgets, supporting operations to control layout, scrolling, and text formatting. It works with `text_view`, `adjustment`, and `text_buffer` types to implement features like margin settings, scroll synchronization, and input constraints. Use it to build custom text editors with precise control over display and interaction behavior.",
      "description_length": 386,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.DnD",
      "library": "lablgtk3",
      "description": "Handles drag-and-drop operations by managing context, actions, and target data. Works with `drag_context` to track ongoing operations, `drag_action` to specify allowed interactions, and `atom` lists for data types. Used to implement custom drag-and-drop interfaces, such as file transfers or UI element reordering.",
      "description_length": 314,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines a property for setting and getting the opacity of GUI elements, specifically working with float values. It allows adjusting the transparency level of widgets in a graphical user interface. A concrete use case is fading or dimming UI components dynamically.",
      "description_length": 276,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring tree view columns, including setting the data model, enabling reordering, controlling visibility, and specifying column width. It works with tree models and column objects to customize display and interaction behavior. Concrete use cases include adjusting column layout dynamically and enabling user-driven column reordering in a tree view interface.",
      "description_length": 397,
      "index": 357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Box",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage box containers in a GUI toolkit, allowing precise control over layout properties such as `homogeneous`, `spacing`, and `orientation`. It supports operations like packing widgets at specific positions, reordering children, and querying or setting packing parameters for individual child widgets. Concrete use cases include building dynamic user interfaces where widgets need to be arranged horizontally or vertically with customizable spacing and resizing behavior.",
      "description_length": 516,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.StackSwitcher",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure GTK stack switcher widgets, including setting the icon size and associating them with a specific stack. It directly manipulates `stack_switcher` and `stack` GTK objects through property parameters. Use it to build and customize tabbed or stacked navigation interfaces with precise control over visual and behavioral properties.",
      "description_length": 382,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Selection",
      "library": "lablgtk3",
      "description": "This module handles selection and clipboard operations in GUI applications, providing functions to manage selection data, targets, and ownership. It works with `selection_data` and `Gdk.atom` to store and transfer data during drag-and-drop or copy-paste actions. Concrete use cases include setting and retrieving clipboard content, handling drag-and-drop events, and registering supported data formats for inter-application communication.",
      "description_length": 438,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.Box",
      "library": "lablgtk3",
      "description": "This module manages layout containers for arranging widgets in a horizontal or vertical orientation. It provides functions to create boxes, pack widgets at the start or end with specified expansion and padding, reorder children, and query or modify child packing properties. Concrete use cases include building user interfaces with structured widget layouts, such as toolbars, forms, or dialog panels.",
      "description_length": 401,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GDraw.Cairo",
      "library": "lablgtk3",
      "description": "This module provides low-level Cairo drawing operations on offscreen drawables, enabling direct 2D rendering via Cairo contexts. It works with `Gdk.cairo` objects, allowing pixel-level manipulation, path drawing, and surface composition. Concrete use cases include implementing custom widget rendering, generating dynamic images, and handling complex graphical effects outside the main UI thread.",
      "description_length": 396,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRenderer",
      "library": "lablgtk3",
      "description": "This module provides operations to configure and create cell renderer objects used in GUI toolkits for customizing the visual and behavioral attributes of cells in tree views. It works with GObject-based cell renderer instances, exposing properties such as background color, alignment, size, and interaction modes. Use cases include adjusting cell padding and visibility, setting text alignment within cells, and defining rendering behavior for interactive elements in a tree view.",
      "description_length": 481,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate tree view columns in a GUI application, supporting configuration of visual properties like alignment, sizing, and visibility through the `P` module, and handling user interactions such as column header clicks via the `S` module. It operates on `Gtk.tree_view_column` objects, allowing direct customization and event binding. Concrete use cases include setting fixed column widths, enabling sorting indicators, and registering callbacks to re-sort data when a column header is clicked.",
      "description_length": 540,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Gc_custom",
      "library": "lablgtk3",
      "description": "This module provides functions to control the speed of the garbage collector. It works with integer values to set and retrieve the speed multiplier. Concrete use cases include tuning performance in applications with real-time constraints or managing memory behavior in long-running processes.",
      "description_length": 292,
      "index": 365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ColorButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure color buttons with properties like color, transparency, and dialog title. It works with GObject-based color button widgets and supports RGBA and legacy color representations. Use it to integrate custom color selection interfaces or synchronize UI components with color state changes in real time.",
      "description_length": 351,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gtk.Tags",
      "library": "lablgtk3",
      "description": "This module defines polymorphic variant types and enumerated values to configure UI behavior and appearance across GUI components. It provides flags for layout control (alignment, orientation, resizing), interaction modes (selection, drag-and-drop, event phases), and visual styling (relief, shadow, icon positioning), primarily used in widgets like buttons, windows, toolbars, and dialogs. These types enable precise customization of element states, transitions, and rendering properties in GTK+ applications.",
      "description_length": 510,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Crossing",
      "library": "lablgtk3",
      "description": "Handles cross-window pointer motion events with precise location and state tracking. It provides access to coordinates, event time, crossing mode, and window focus changes. Useful for implementing hover effects, drag-and-drop, and context-sensitive UI behaviors.",
      "description_length": 262,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Internal",
      "library": "lablgtk3",
      "description": "Handles marshaling of insert operations in text editing contexts, specifically for integrating with GObject closures. Works with string data and position references to manage text insertion points. Useful for implementing custom text input behaviors in GUI components like text editors or input fields.",
      "description_length": 302,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellLayout",
      "library": "lablgtk3",
      "description": "This module manages the layout and rendering of cells within a tree view by providing functions to add, reorder, and configure cell renderers. It works with `Gtk.cell_layout` objects and `Gtk.cell_renderer` instances, allowing precise control over cell placement, expansion, and attribute mapping. Concrete use cases include customizing the visual structure of tree rows, binding model data to cell properties, and dynamically updating cell rendering behavior.",
      "description_length": 460,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.ButtonBox",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate button box containers with specific layout properties. It supports operations to set alignment, spacing, and child widget behavior using the `button_box_style` enumeration and object properties. Concrete use cases include arranging buttons in a dialog or toolbar with precise control over their visual layout and grouping.",
      "description_length": 378,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.UIManager",
      "library": "lablgtk3",
      "description": "This module manages UI element configuration and event handling for GTK UI managers. It supports operations like adding action groups, loading UI layouts from files or strings, and retrieving widgets or actions by name. Use it to build dynamic interfaces with customizable menus, toolbars, and accelerators, such as loading a main window's UI from XML or connecting actions to menu items.",
      "description_length": 388,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Paned",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage paned widgets with precise layout controls. It supports operations to set orientation, position constraints, and child placement with resizing and shrinking behavior. Concrete use cases include building resizable UI panels, split views, and custom layout containers with interactive dividers.",
      "description_length": 344,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Cairo",
      "library": "lablgtk3",
      "description": "Creates a Cairo context for rendering graphics on a Gdk window. Works with Gdk window objects to enable low-level drawing operations. Useful for implementing custom widget rendering or direct window surface manipulation.",
      "description_length": 220,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage combo box widgets with support for setting and retrieving active items via tree iterators, applying row separators, and configuring properties like model, visibility, and layout. It operates on `Gtk.combo_box` objects, integrating with tree models, integer indices, and boolean flags. Concrete use cases include dynamically updating dropdown content, enabling editable entries, and controlling visual appearance in graphical user interfaces.",
      "description_length": 493,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Fixed",
      "library": "lablgtk3",
      "description": "This module provides functions to manage fixed positioning of widgets within a container. It allows creating a fixed container, adding widgets at specific coordinates, and repositioning them dynamically. Use this module to build custom layouts where precise control over widget placement is required, such as overlaying controls or aligning elements in a diagram.",
      "description_length": 363,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8.Error",
      "library": "lablgtk3",
      "description": "This module defines exceptions and error handling for UTF-8 validation and conversion operations. It works with byte sequences and Unicode characters, focusing on errors such as invalid sequences, partial input, and unsupported conversions. Concrete use cases include handling malformed UTF-8 input during string decoding and validating proper Unicode to UTF-8 conversions.",
      "description_length": 373,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Closure",
      "library": "lablgtk3",
      "description": "This module manages closures and callbacks for GObject-based systems, handling argument passing and return values through `argv` structures. It provides functions to access and manipulate individual arguments by position, retrieve result values, and set return types. Concrete use cases include implementing custom GObject signal handlers and wrapping OCaml functions for use in GObject-based C libraries.",
      "description_length": 405,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistant.Assistant",
      "library": "lablgtk3",
      "description": "This module manages a multi-step assistant interface with operations to control page navigation, content, and visual elements. It works with `Gtk.assistant` objects and associated widgets, allowing insertion and configuration of pages with titles, images, and completion states. Concrete use cases include building setup wizards or guided workflows where users progress through a sequence of interactive steps.",
      "description_length": 410,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Image",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure image widgets with properties like setting the image source from a file, icon name, pixbuf, or stock ID. It supports operations to clear an image and construct parameterized image objects using data types such as strings, integers, GdkPixbuf objects, and enumerated types for icon size and image type. Concrete use cases include displaying icons, loading images from files or resources, and dynamically updating image content in GUI applications.",
      "description_length": 501,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Misc",
      "library": "lablgtk3",
      "description": "This module provides functions to set alignment and padding parameters for UI widgets. It works with GObject parameter lists and GTK widget objects to configure positioning properties. Concrete use cases include adjusting the horizontal and vertical alignment of buttons, labels, or other UI elements within containers, as well as setting pixel-based padding around widgets.",
      "description_length": 374,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkRangeProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring UI elements like sliders or input fields by modifying their underlying property values or constructing parameterized property changes for event-driven updates.",
      "description_length": 439,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock",
      "library": "lablgtk3",
      "description": "This module defines identifiers for standard GUI elements like buttons and menu items, along with associated icons and labels. It provides functions to create and configure icon sources, sets, and factories for consistent visual representation across UI components such as toolbars and menus. Concrete use cases include setting up common actions like \"Save,\" \"Print,\" or \"Help\" with predefined icons and keyboard accelerators.",
      "description_length": 426,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkEditProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameterized values for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring UI elements in GTK+ applications, such as setting the text of a label or adjusting the value of a slider.",
      "description_length": 395,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Glib",
      "library": "lablgtk3",
      "description": "This module offers utilities for event loop management, including scheduling timeouts, idle tasks, and asynchronous I/O operations, alongside robust support for Unicode and UTF-8 string manipulation. It works with system-level data like environment variables, file descriptors, and directory paths, enabling use cases such as internationalized text processing, responsive GUI applications, and system resource management through environment configuration or path resolution.",
      "description_length": 474,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder",
      "library": "lablgtk3",
      "description": "This module loads UI definitions from XML files or strings, retrieves named UI components, and selectively adds objects to the interface. It works with XML-based UI descriptions and GTK widget hierarchies. Used to build GTK user interfaces from `.ui` files or embedded XML at runtime.",
      "description_length": 284,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps",
      "library": "lablgtk3",
      "description": "Handles property initialization and parameter list construction for GTK objects, supporting optional values and nested configuration. Works with GObject properties and parameter lists to build structured UI components programmatically. Use to construct and configure GTK widgets with optional properties, assemble parameter lists for object instantiation, or manage translation domains in UI definitions.",
      "description_length": 404,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GContainer",
      "library": "lablgtk3",
      "description": "This module provides functions for managing hierarchical relationships between UI widgets, specifically for adding, casting, and configuring container widgets. It operates on widget types like `Gtk.container` and `Gtk.widget`, enabling structured layout management. Concrete use cases include building complex UIs by nesting widgets within containers, setting layout parameters such as size and border width, and safely casting generic widgets to container types.",
      "description_length": 463,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree",
      "library": "lablgtk3",
      "description": "This module provides structured access to hierarchical data through operations that manage tree paths, row references, and model-view interactions. It works with tree models, lists, and selections to support concrete tasks like populating GUI components with dynamic nested data, tracking and updating row selections, and configuring column rendering and layout. Use it to build and manipulate tree-based user interfaces with features like sorting, dynamic row updates, and custom cell rendering.",
      "description_length": 496,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMisc",
      "library": "lablgtk3",
      "description": "This module includes functions for creating and adjusting non-interactive UI elements like spacers and labels, with support for alignment and padding configuration. It operates on GObject-derived widget types, allowing layout customization in GTK interfaces. Specific uses include inserting fixed spaces between widgets or aligning text labels within a window.",
      "description_length": 360,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gaux",
      "library": "lablgtk3",
      "description": "This module handles optional values with functions to conditionally apply transformations or provide fallbacks. It operates on `'a option` types, allowing safe extraction of values or mapping over present options. Use cases include handling missing data in configurations, safely processing optional fields in records, and composing functions that depend on presence checks.",
      "description_length": 374,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkTreeProps",
      "library": "lablgtk3",
      "description": "This module provides functions to set and get GObject properties, create parameters for property configuration, and define specialized parameters for GTK cell renderers. It operates on GObject instances and supports data types like strings, integers, floats, colors, pixbufs, and enumerated values. It is used to configure UI elements like tree views, adjusting cell appearance, behavior, and layout properties directly.",
      "description_length": 420,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMisc",
      "library": "lablgtk3",
      "description": "This module creates and configures UI components like separators, status bars, calendars, drawing areas, arrows, images, and labels for GTK+ interfaces. It supports data types such as orientation, pixbufs, stock icons, and text markup, enabling direct integration of visual elements in GUI applications. Use it to build custom toolbars, display status messages, select dates, render drawings, or show icons and formatted text.",
      "description_length": 426,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPack",
      "library": "lablgtk3",
      "description": "This module organizes and manages layout components for graphical user interfaces, enabling structured widget arrangement and sizing. It supports operations for creating and configuring layout containers like boxes, tables, and grids, as well as synchronizing widget sizes across groups. Concrete use cases include constructing toolbars with aligned buttons, designing data entry forms with consistent spacing, and building dashboards with responsive grid-based layouts.",
      "description_length": 470,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps",
      "library": "lablgtk3",
      "description": "This module provides layout configuration and container management capabilities for GUI widgets, focusing on precise control over spacing, orientation, and positioning. It includes functions for creating and manipulating structured containers like boxes, grids, tables, and panes, with direct support for dynamic layout adjustments, widget packing, and size synchronization. Concrete use cases include building resizable split views, tabbed interfaces with synchronized sizing, and grid-based forms with uniform spacing.",
      "description_length": 520,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GPack",
      "library": "lablgtk3",
      "description": "This module creates and configures container widgets for organizing user interface elements. It supports boxes, tables, grids, fixed layouts, notebooks, paned windows, and stacks, each with customizable properties like spacing, size, and orientation. These containers are used to build structured and responsive graphical interfaces with precise layout control.",
      "description_length": 361,
      "index": 396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GAction",
      "library": "lablgtk3",
      "description": "This module implements action-based user interfaces with support for creating and managing actions, toggle actions, and radio actions. It works with action groups to organize related actions and associate them with menus, toolbars, and keyboard accelerators. Concrete use cases include building menu items that trigger specific behaviors, creating toolbars with toggle buttons for stateful operations, and managing groups of mutually exclusive options via radio actions.",
      "description_length": 470,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkMenuProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties, specifically working with objects and their associated properties. It handles property values of arbitrary types tied to GObject instances, enabling dynamic property manipulation. Concrete use cases include configuring UI elements like menu items or widgets at runtime, such as setting labels, sensitivity, or custom data fields.",
      "description_length": 429,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkBuilderProps",
      "library": "lablgtk3",
      "description": "This module provides direct access to GObject properties through `set`, `get`, and `param` functions. It operates on GObject instances and their associated property types, enabling property manipulation and parameter creation for UI elements. Concrete use cases include setting widget attributes in GUI applications and constructing property-based configurations for GObjects.",
      "description_length": 376,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GToolbox",
      "library": "lablgtk3",
      "description": "This module builds GTK menus from labeled entries with associated actions, supports creating pop-up menus, and handles user interactions through dialog boxes for questions, messages, and input prompts. It works with menu trees composed of strings, boolean states, and callbacks, along with keyboard shortcuts tied to window events. Concrete uses include constructing context menus, prompting users for confirmation or input, and binding key combinations to application commands.",
      "description_length": 478,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow",
      "library": "lablgtk3",
      "description": "This module initializes GTK window functionality and provides four submodules for managing different types of windows. The `Window` submodule handles top-level window operations such as state management and visual configuration. The `Dialog` submodule constructs and controls dialog windows with buttons and responses. The `AboutDialog` submodule displays application metadata in a structured dialog. The `Plug` submodule manages plug windows for embedding or detaching UI components.",
      "description_length": 484,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK action support and provides functions to manipulate GObject parameters for UI actions. It includes submodules for managing regular, toggle, and radio actions, as well as action groups and UI layout integration. Use it to define, configure, and dynamically control UI elements like buttons, menus, and toolbars in GTK-based desktop applications.",
      "description_length": 372,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkObject",
      "library": "lablgtk3",
      "description": "Handles the creation and reference management of GUI objects in a GObject-based system. It provides functions to cast objects to a common GUI type, increase their reference count, and instantiate new objects with specified parameters and class names. This module is used when initializing and managing widgets or windows in a GTK-like interface.",
      "description_length": 345,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps",
      "library": "lablgtk3",
      "description": "This module implements GTK-based GUI components for text and numeric input with precise control over editing behavior, data binding, and user interaction. It provides functions to configure editable widgets with properties like frames and models, manipulate text with insertions and selections, and create combo boxes, spin buttons, and entry fields with validation and auto-completion. Use it to build interactive forms, configuration panels, and data entry interfaces with rich input handling and immediate feedback.",
      "description_length": 518,
      "index": 404,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkThread",
      "library": "lablgtk3",
      "description": "This module manages a threaded GTK main loop, enabling safe execution of GUI operations from multiple threads using `async` and `sync`. It supports system threads by releasing the OCaml runtime lock during polling and allows non-blocking operation when `busy_waiting` is enabled. Use cases include running GTK in a dedicated thread while handling background tasks, ensuring GUI updates happen in the correct thread, and integrating with event loops that require periodic `do_jobs` invocation.",
      "description_length": 492,
      "index": 405,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GBin",
      "library": "lablgtk3",
      "description": "This module provides single-child container widgets for layout and interaction control, including scrolling, framing, alignment, and visibility toggling. It works with widgets like scrollable areas, event boxes, frames, and expandable sections. Concrete use cases include embedding a resizable image in a scrolled window, aligning a button within a fixed space, or toggling visibility of a settings panel with an expander.",
      "description_length": 422,
      "index": 406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainers",
      "library": "lablgtk3",
      "description": "This module manages hierarchical relationships between UI components by providing operations to add, remove, and iterate over child widgets within a container. It works with Gtk containers and widgets, offering functions like `add`, `remove`, `forall`, and `set_focus_child` for dynamic layout manipulation and focus control. Use cases include building custom widget hierarchies, implementing layout managers, and adjusting child properties at runtime.",
      "description_length": 452,
      "index": 407,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GEdit",
      "library": "lablgtk3",
      "description": "This module creates and configures editable UI components like text entry fields, spin buttons, and combo boxes. It supports data types such as strings, integers, floats, and tree models for populating dropdowns and auto-completing input. Use it to build forms, settings panels, or data entry interfaces with features like input validation, auto-complete suggestions, and selectable dropdown lists.",
      "description_length": 398,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit",
      "library": "lablgtk3",
      "description": "This module provides precise control over text editing operations and numeric input through its submodules. Editable handles text selection, insertion, deletion, and cursor management for UI elements like text entries and views, enabling use cases such as input validation and custom text editors. SpinButton manages numeric input via spin buttons, allowing value setting, step adjustments, and range-constrained user input, ideal for numeric configuration forms.",
      "description_length": 463,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkSignal",
      "library": "lablgtk3",
      "description": "This module enables connecting, disconnecting, and managing event handlers for GObject-based GUI components, supporting operations to emit or block signals and query their metadata. It works with GObject instances, signal descriptors, and marshaling functions that convert between OCaml closures and C-compatible handlers, handling variadic arguments like integers, strings, and custom types. It is particularly useful for integrating OCaml callbacks with GTK's event-driven architecture while ensuring type-safe data exchange across language boundaries.",
      "description_length": 554,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps",
      "library": "lablgtk3",
      "description": "This module initializes button-related functionality and provides operations to configure various types of buttons, including standard, toggle, radio, color, font, tool, and link buttons. It works with GObject-based button widgets, supporting properties like labels, states, icons, and associated actions, enabling precise control over appearance and behavior. Concrete use cases include creating interactive UI elements such as action buttons with keyboard shortcuts, color pickers with real-time updates, and toolbar buttons that maintain state or open dropdown menus.",
      "description_length": 570,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairo_pango",
      "library": "lablgtk3",
      "description": "This module integrates Pango text layout with Cairo rendering, enabling precise text rendering, measurement, and path creation using Pango layouts. It operates on Cairo contexts and Pango objects such as `Pango.context` and `Pango.layout`, supporting operations like setting font resolution, updating layout transformations, and drawing underlines for error highlighting. Concrete use cases include rendering formatted text in GUI applications, measuring text dimensions for dynamic layout adjustments, and generating vector paths from text for scalable graphics.",
      "description_length": 563,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEnums",
      "library": "lablgtk3",
      "description": "This module defines polymorphic variant types representing GTK's enumerations for layout, alignment, visual states, and UI behavior. These types enable type-safe configuration of widgets and interactions, covering directional settings, rendering styles, input handling, and operational flags. They are used to adjust widget appearance, manage drag-and-drop operations, configure print settings, and structure GUI elements like menus and file choosers.",
      "description_length": 451,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps",
      "library": "lablgtk3",
      "description": "This module provides operations for constructing and managing hierarchical data displays with customizable visualizations, focusing on tree-based structures and grid layouts. It works with `Gtk.tree_model` for data representation, `Gtk.tree_path` for navigation, and specialized `CellRenderer` subclasses (text, pixbuf, toggle, progress) to control how data is rendered in UI components. These tools are ideal for interactive interfaces like file browsers, image galleries, or configuration panels where structured data needs dynamic, user-driven visualization and editing.",
      "description_length": 573,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK assistant components and provides functions to conditionally add properties to parameter lists. It works with GObject property types and parameter lists to construct or modify GTK assistant configurations dynamically. Useful for building UIs where widget properties need to be set based on runtime conditions, such as enabling or disabling assistant buttons or setting page content dynamically.",
      "description_length": 422,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8",
      "library": "lablgtk3",
      "description": "This module converts between Unicode code points and UTF-8 encoded strings. It operates on `unichar` (integers representing Unicode characters) and `unistring` (arrays of `unichar`), providing functions to encode to UTF-8 (`from_unichar`, `from_unistring`) and decode from UTF-8 (`to_unichar`, `to_unistring`, `first_char`). It also includes utilities for UTF-8 string traversal (`next`, `length`) and strict decoding with validation (`to_unichar_validated`).",
      "description_length": 459,
      "index": 416,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GWindow",
      "library": "lablgtk3",
      "description": "This module creates and configures top-level windows, dialogs, and specialized windows like message boxes, file choosers, and about dialogs. It works with window types such as `window`, `dialog`, `message_dialog`, and `file_chooser_dialog`, supporting operations like setting window properties, adding buttons, and handling user responses. Concrete use cases include displaying modal dialogs for user confirmation, showing application metadata, and opening file selection windows in GUI applications.",
      "description_length": 500,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GUtil",
      "library": "lablgtk3",
      "description": "This module provides functions for debugging GTK objects with `print_widget`, manages signal callbacks with `next_callback_id`, and implements state propagation through the `variable` class. It works with GTK widgets, signal identifiers, and state variables using deep equality. Concrete use cases include attaching state change handlers, generating unique callback IDs, and formatting widget output for interactive debugging.",
      "description_length": 426,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps",
      "library": "lablgtk3",
      "description": "This module initializes range-based UI components and provides functions to conditionally add property parameters. It operates on GObject properties and param lists, enabling dynamic configuration of widgets like sliders, scrollbars, and progress bars. Use it to build customizable UI elements with conditional visual and behavioral attributes, such as language-specific layouts, numeric controls, and animated progress indicators.",
      "description_length": 431,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps",
      "library": "lablgtk3",
      "description": "This module implements GTK menu system functionality, offering operations to initialize menu components, conditionally add properties to parameter lists, and manage complex menu structures. It works with GTK menu-related objects like `menu_item`, `check_menu_item`, `radio_menu_item`, `menu_shell`, and `menu_bar`, supporting precise configuration of menu behavior and layout. Concrete use cases include constructing hierarchical menus with dynamic content, binding keyboard accelerators to menu actions, and implementing context-sensitive menu interfaces with checkable and radio items.",
      "description_length": 587,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkPackProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring widget properties in GUI applications and constructing parameterized objects for GTK+ bindings.",
      "description_length": 375,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject",
      "library": "lablgtk3",
      "description": "This module enables type introspection, dynamic object manipulation, and property management through operations like object creation with reference counting, type-safe value handling, and parameter construction. It works with data structures such as GType for type representation, GValue for dynamic value storage, GClosure for callback encapsulation, and structures for property metadata and data conversion. These capabilities are particularly useful for integrating with GObject-based C libraries, implementing dynamic object systems, and managing runtime type information in heterogeneous environments.",
      "description_length": 606,
      "index": 422,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkKeysyms",
      "library": "lablgtk3",
      "description": "This module provides constants of type `Gdk.keysym` representing keyboard symbols for handling input events in graphical applications. It includes keys for standard navigation, editing, and function keys, as well as specialized symbols for international text input (e.g., Cyrillic, Arabic, Japanese kana), mathematical and typographic characters, and accessibility features like Braille dot combinations. These keysyms are used to identify key presses and modifiers in event handling, supporting use cases such as multilingual input methods, multimedia controls, and low-level system interactions.",
      "description_length": 597,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango",
      "library": "lablgtk3",
      "description": "This module handles text rendering and layout configuration for graphical interfaces. It provides structured types like `context`, `layout`, and `font_description` to control font properties, text styling, and language settings. Key operations include font loading, text measurement, and layout formatting for UI elements such as labels and rich text displays.",
      "description_length": 360,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkActionProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties. It works with GObject instances and their associated property types. Concrete use cases include configuring UI elements like buttons or windows by modifying properties such as labels, sizes, or sensitivity.",
      "description_length": 306,
      "index": 425,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GText",
      "library": "lablgtk3",
      "description": "This module implements text editing and display with support for rich formatting, including styled text ranges, embedded images, and custom tags. It provides functions to create and manage text buffers, apply tags with visual properties like font and color, and insert interactive elements using marks and anchors. Concrete use cases include building code editors with syntax highlighting, chat interfaces with formatted messages, and document viewers with embedded media.",
      "description_length": 472,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PangoEnums",
      "library": "lablgtk3",
      "description": "This module defines a set of enumerated types representing text styling and layout options, such as font weight, variant, stretch, underline, wrap mode, and ellipsize mode. These types are used to configure text rendering and layout behavior in graphical user interfaces. Concrete use cases include setting font attributes for UI elements and controlling text wrapping and truncation in layout engines.",
      "description_length": 402,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gtk",
      "library": "lablgtk3",
      "description": "This module offers operations for constructing and manipulating GUI components through hierarchical widget and container types, enabling structured layout management, styling, and interaction handling. It works with data structures like text buffers, tree models, cell renderers, and layout containers (e.g., grids, notebooks, paned windows) to support use cases such as building responsive interfaces with dynamic data views, implementing styled widgets with CSS, and managing user interactions via drag-and-drop or action groups. The type hierarchy ensures type-safe composition of elements ranging from basic buttons to complex data displays like tree views and text editors.",
      "description_length": 678,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkPixbuf",
      "library": "lablgtk3",
      "description": "This module provides functions for loading, modifying, and saving image data through pixbuf objects, enabling low-level pixel manipulation, alpha channel adjustments, and geometric transformations. It supports operations such as subregion extraction, interpolation-based scaling, and format conversion, catering to tasks like GUI image processing, transparency handling, and high-quality resizing without direct module name references.",
      "description_length": 435,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent",
      "library": "lablgtk3",
      "description": "This module enables creating, copying, and inspecting events tied to windows and input devices, with operations for converting between event types and extracting data like coordinates, device state masks, timestamps, and window properties. It supports fine-grained handling of motion, scrolling, key presses, window configuration changes, and clipboard interactions through event-specific modules. Applications include responding to user input, managing window state transitions, detecting device proximity, and synchronizing with system settings updates.",
      "description_length": 555,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEnums",
      "library": "lablgtk3",
      "description": "This module provides enumerated types for classifying input events (e.g., button presses, touch gestures), managing window states, and configuring visual properties. It works with low-level GUI data structures to control event handling, cursor appearance, and window manager interactions. These types are essential for developing responsive graphical applications that require precise input detection and customized window behavior.",
      "description_length": 432,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText",
      "library": "lablgtk3",
      "description": "This module handles text content manipulation and display in GUI applications, offering precise control over rich text features like tags, embedded images, and formatted selections. It operates on text buffers, views, and iterators to support tasks such as implementing custom text editors, managing user interactions with text, and integrating dynamic layout adjustments. Concrete use cases include handling clipboard operations, navigating and modifying text with fine granularity, and synchronizing view scrolling with buffer content.",
      "description_length": 537,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkContainersProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring widget properties in GUI applications and constructing parameter lists for object initialization or method calls.",
      "description_length": 393,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile",
      "library": "lablgtk3",
      "description": "This module provides precise tools for creating and managing file filters and file chooser dialogs in GTK-based applications. It enables filtering files by MIME type, pattern, or custom logic, and supports configuring dialogs with specific paths, preview widgets, and directory shortcuts. Direct use cases include implementing custom open/save dialogs with strict file type restrictions and enhanced navigation features.",
      "description_length": 420,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps",
      "library": "lablgtk3",
      "description": "This module handles text attribute configuration and widget embedding in GTK text views. It provides functions to manipulate text formatting, layout, and interactive elements through direct property accessors and buffer management. Use it to implement rich text editors with custom styling, embedded widgets, and precise control over text display and interaction.",
      "description_length": 363,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkButtonProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties on UI elements like buttons. It works with GObject-based objects and their associated property types, enabling precise manipulation of widget attributes such as labels, sensitivity, or visibility. Concrete use cases include configuring button properties at runtime or binding widget state to application data.",
      "description_length": 417,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GFile",
      "library": "lablgtk3",
      "description": "This module provides widgets for selecting files or directories, including a file chooser widget and button with customizable actions, titles, and initial filenames. It works with file system paths and supports filtering via patterns or MIME types. Concrete use cases include opening or saving files in a GUI application, with options to restrict selections to specific file types or directories.",
      "description_length": 396,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK file-related components and provides functions to conditionally add properties to GObject parameter lists. It works with GObject properties and parameter lists, specifically handling optional values and customizing file chooser dialogs and buttons. Use it to dynamically construct property configurations for file choosers with optional fields or to integrate file selection controls into GTK-based user interfaces.",
      "description_length": 443,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMenu",
      "library": "lablgtk3",
      "description": "This module creates and configures menu interfaces with functions for building menus, menu items, separators, check items, radio items, and menu bars. It works with GUI components like `menu`, `menu_item`, `check_menu_item`, `radio_menu_item`, and `menu_shell`. Use it to implement application menus with dropdowns, checkboxes, and radio selections.",
      "description_length": 349,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GRange",
      "library": "lablgtk3",
      "description": "This module creates and configures scrollbars and progress bars with customizable appearance and behavior. It supports data types like `adjustment`, `orientation`, and `position_type` to control layout, value display, and interaction. Use it to implement UI elements like volume sliders, file progress indicators, or scrollable content areas.",
      "description_length": 342,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GObj",
      "library": "lablgtk3",
      "description": "This module provides functions for working with GUI widgets, including converting and packing widgets, applying CSS styling, and managing display properties. It operates on widget objects, supporting optional configurations like visibility settings and custom packing logic. Concrete use cases include building and customizing user interface elements in a GTK-based application.",
      "description_length": 378,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkMiscProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring widget attributes in GUI applications and constructing parameterized objects for GTK+ widgets.",
      "description_length": 374,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkBaseProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring widget attributes in GUI applications and binding property values dynamically during object construction.",
      "description_length": 385,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpointer",
      "library": "lablgtk3",
      "description": "This module provides low-level memory manipulation and interoperability tools, including pointer arithmetic, value conversion between OCaml and C representations, and structured data encoding for variants and flags. It operates on memory regions, boxed values, and byte sequences, supporting direct memory access, copying, and in-place modifications. These capabilities are particularly useful for system-level programming tasks requiring precise memory control, such as interfacing with C libraries or implementing custom data layouts.",
      "description_length": 536,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu",
      "library": "lablgtk3",
      "description": "This module provides operations for creating and managing menu items, checkable menu items, radio menu items, and hierarchical menus. It works with `menu_item`, `check_menu_item`, `radio_menu_item`, and `menu` data structures to build interactive GUI menus with features like keyboard accelerators, submenus, and dynamic state changes. Concrete use cases include implementing application-wide menus, context-sensitive dropdowns, and grouped or toggleable menu options.",
      "description_length": 468,
      "index": 445,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GPango",
      "library": "lablgtk3",
      "description": "This module provides direct conversions between pixel values and Pango units, along with parsing font descriptions from strings. It operates on integer pixel values and Pango-specific unit types, along with string representations of font descriptions. Concrete use cases include adjusting text layout metrics for rendering and constructing font descriptions from configuration strings.",
      "description_length": 385,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData",
      "library": "lablgtk3",
      "description": "This module provides functionality for managing keyboard accelerators, visual styling, and adjustable value controls in GUI applications. It includes operations for binding key combinations to actions, defining and persisting shortcut mappings, styling widgets with color and CSS-based theming, and configuring scrollable or numeric input behavior. Use cases include implementing application shortcuts, customizing widget appearance across interaction states, and controlling slider or scrollbar parameters in UI components.",
      "description_length": 524,
      "index": 447,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkBinProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties. It works with GObject instances and their associated property types, enabling precise manipulation of object properties at runtime. Concrete use cases include configuring widget attributes in GUI applications, such as adjusting button labels or window sizes dynamically.",
      "description_length": 370,
      "index": 448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GData",
      "library": "lablgtk3",
      "description": "This module creates and manages non-widget data objects like adjustments and clipboards. It provides functions to initialize adjustments with specific parameters like value and bounds, and to access clipboards using atoms. These are used to handle scrollable area settings and inter-process data sharing in GUI applications.",
      "description_length": 324,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GDraw",
      "library": "lablgtk3",
      "description": "This module provides low-level Cairo drawing operations on offscreen drawables, enabling direct 2D rendering via Cairo contexts. It works with `Gdk.cairo` objects, supporting pixel-level manipulation, path drawing, and surface composition. Concrete use cases include implementing custom widget rendering, generating dynamic images, and handling complex graphical effects outside the main UI thread.",
      "description_length": 398,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GButton",
      "library": "lablgtk3",
      "description": "This module creates interactive UI elements that generate signals when clicked. It supports buttons with labels, stock icons, or custom visuals, including toggle, radio, color, and font selection variants, along with toolbar integration. Concrete use cases include building action triggers in GUIs, managing toolbars with grouped or separated items, and launching dialogs for color or font selection.",
      "description_length": 400,
      "index": 451,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps",
      "library": "lablgtk3",
      "description": "This module provides operations for configuring GTK container widgets with specific layout, alignment, and scrolling behaviors. It works with GObject-based types such as `Gtk.bin`, `Gtk.frame`, `Gtk.scrolled_window`, and `Gtk.expander`, exposing properties like adjustments, shadow types, and alignment settings. Concrete use cases include building scrollable interfaces with custom scroll policies, creating collapsible UI sections, and managing aspect-ratio-constrained widgets for media display.",
      "description_length": 498,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase",
      "library": "lablgtk3",
      "description": "This module implements core UI element creation, lifecycle management, and interaction handling for GTK+ applications. It operates on GObject-derived types, widgets, clipboard and selection data, and drag-and-drop contexts to support concrete tasks like building type-safe UI components, handling input events, transferring data via clipboard or drag-and-drop, and customizing tooltips with specific content and behavior. Use it to construct and manage GTK+ interfaces with precise control over widget properties, data exchange, and user interaction feedback.",
      "description_length": 559,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps",
      "library": "lablgtk3",
      "description": "This module provides functions for conditionally adding property values to a list of GObject parameters, handling both direct and optional values. It works with GObject property types and parameter lists to facilitate dynamic property configuration. Use it to construct parameter lists for GUI components where properties may vary or be omitted, such as setting optional margins or alignment in container layouts.",
      "description_length": 413,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain",
      "library": "lablgtk3",
      "description": "This module provides core functionality for managing the GTK main loop, input grabs, event handling, resource configuration, and garbage collection tuning. It operates on GUI components like widgets and events, as well as system-level values such as integers and timestamps. Use cases include initializing and running GTK applications, controlling input focus during interactions, customizing application appearance via RC files, and optimizing memory performance in long-running or real-time applications.",
      "description_length": 506,
      "index": 455,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkTextProps",
      "library": "lablgtk3",
      "description": "This module directly manipulates text properties for GUI elements, offering functions to set, get, and parameterize attributes like font, color, margins, and alignment. It operates on GObject-based text components, particularly text tags, enabling precise control over visual and behavioral aspects. Use cases include customizing rich text appearance in editors, applying styles dynamically, and configuring text layout parameters in GTK+ interfaces.",
      "description_length": 450,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton",
      "library": "lablgtk3",
      "description": "This module provides concrete UI components for creating and managing various types of buttons and toolbars in GTK-based applications. It includes specific operations for configuring button properties, handling user interactions, and organizing toolbar items with support for dynamic updates and event handling. Use cases include implementing action triggers, stateful controls, grouped options, and navigable toolbars in desktop GUIs.",
      "description_length": 435,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkFileProps",
      "library": "lablgtk3",
      "description": "This module provides direct access to object properties through explicit set, get, and param operations. It works with GObject-based objects and their associated property types. Concrete use cases include configuring UI elements like file dialogs by setting properties such as file paths or retrieving widget states during user interactions.",
      "description_length": 341,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain",
      "library": "lablgtk3",
      "description": "This module initializes the GTK library, runs the main event loop, and provides functions to quit the loop and retrieve the library version. It handles string and integer data types for locale settings and version information. Concrete use cases include starting a GTK application, managing event processing, and cleanly shutting down the application.",
      "description_length": 351,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistant",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manage multi-step assistant interfaces, including adding pages with titles, images, and completion indicators, and controlling navigation between steps. It operates on `Gtk.assistant` objects and related widgets, enabling dynamic page insertion, removal, and visual customization. Use it to implement guided workflows such as installation wizards or configuration tools with interactive, step-by-step interfaces.",
      "description_length": 457,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps",
      "library": "lablgtk3",
      "description": "This module provides low-level property manipulation and widget configuration capabilities for GTK-based GUI applications. It includes functions for conditional property setting, container-child management, numerical adjustment controls, orientation configuration, and window/dialog customization. Concrete use cases include dynamic UI layout adjustments, responsive event handling, and precise control over widget appearance and behavior.",
      "description_length": 439,
      "index": 461,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps",
      "library": "lablgtk3",
      "description": "This module implements GTK widget property management and UI customization features. It handles alignment, padding, text labels, arrows, images, color and font selection, status bars, calendars, and drawing areas with direct operations on GObject-based widgets. Use it to configure visual properties like shadows, alignment, and text layout, and to build interactive UI components such as date pickers, system tray icons, and custom drawing surfaces.",
      "description_length": 450,
      "index": 462,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GAssistant",
      "library": "lablgtk3",
      "description": "This module creates and configures assistant windows with step-by-step guidance. It supports operations to set window properties like title, size, and modality, and manages user navigation through assistant pages. Concrete use cases include setup wizards or guided configuration dialogs with interactive steps.",
      "description_length": 310,
      "index": 463,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkAssistantProps",
      "library": "lablgtk3",
      "description": "This module provides functions to set, get, and create parameters for GObject properties. It operates on GObject instances and their associated property types. Use cases include configuring UI elements dynamically, passing property values during object creation, and integrating with GTK's property system for runtime customization.",
      "description_length": 332,
      "index": 464,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GBuilder",
      "library": "lablgtk3",
      "description": "This module creates UI interfaces from XML definitions, providing functions to initialize a builder context either from a file or a string. It works with XML data structures to construct GUI components, supporting translation domains for internationalization. Use it to load application interfaces defined in Glade or similar UI design tools.",
      "description_length": 342,
      "index": 465,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 781,
    "meaningful_modules": 466,
    "filtered_empty_modules": 315,
    "retention_rate": 0.5966709346991037
  },
  "statistics": {
    "max_description_length": 678,
    "min_description_length": 172,
    "avg_description_length": 386.95922746781116,
    "embedding_file_size_mb": 6.75349235534668
  }
}