{
  "package": "lablgtk3",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 446,
  "creation_timestamp": "2025-06-18T17:13:25.638672",
  "modules": [
    {
      "module_path": "GtkBase.Widget.Signals.Event",
      "description": "The module provides event handling mechanisms for GUI toolkits, managing widget-specific signals like button presses, key events, motion, and visibility changes, while operating on GdkEvent types to enable responsive user interactions. It includes functions for processing selection requests, proximity events, and window state transitions, returning boolean flags to control event propagation in GTK+ applications. These capabilities are essential for building dynamic interfaces that react to user input and system events.",
      "description_length": 524,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.RadioAction.P",
      "description": "Provides methods to access and manipulate the group and value properties of a radio action widget. Operates on GTK radio action objects and their associated integer values. Used to determine the current selection within a group of radio buttons and to identify which button is active.",
      "description_length": 284,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction.S",
      "description": "Handles signal connections for radio action widgets, specifically triggering a callback when the selected option changes. Operates on Gtk.radio_action objects and associated signal handlers. Used to implement dynamic UI updates based on user selection in grouped radio buttons.",
      "description_length": 277,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ActionGroup.P",
      "description": "Provides properties to access and manipulate the name, sensitivity, and visibility of action groups. Works with GObject-based action groups, exposing boolean and string attributes. Used to dynamically update UI elements based on action group states.",
      "description_length": 249,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ActionGroup.S",
      "description": "Provides signal handlers for managing action group interactions in a GTK application. Works with Gtk.action and Gtk.widget objects, enabling control over activation sequences and proxy connections. Used to synchronize UI elements with action triggers, such as updating buttons before or after an action is executed.",
      "description_length": 315,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager.P",
      "description": "Provides properties for accessing and modifying tearoff capabilities and UI strings of a UI manager. Works with Gobject properties that associate boolean and string values with UI manager instances. Used to dynamically adjust menu behaviors and retrieve UI definitions at runtime.",
      "description_length": 280,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager.S",
      "description": "Handles signal connections for UI manager interactions, including widget addition, proxy management, and action activation. Works with GTK action and widget objects, enabling dynamic UI updates. Used to synchronize UI elements with action states and manage widget visibility and behavior.",
      "description_length": 288,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action.P",
      "description": "Provides access to properties of action objects, including visibility controls, labels, icons, and tooltips. Works with boolean flags and string values to manage UI element behavior and appearance. Used to dynamically adjust menu items or toolbar buttons based on application state.",
      "description_length": 282,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action.S",
      "description": "Provides a function to bind an action to a signal handler, enabling event-driven behavior in GUI applications. Works with GtkSignal.t and polymorphic variants to handle user interactions. Used to trigger specific actions, such as button clicks or menu selections, within a graphical interface.",
      "description_length": 293,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ToggleAction.P",
      "description": "Provides a property setter for rendering UI elements as radio buttons, operating on GObject properties with a boolean value. Works with GUI components that support toggle actions. Used to dynamically switch the visual representation of a widget in a graphical interface.",
      "description_length": 270,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction.S",
      "description": "Handles a toggle action signal in a GTK application, triggering a unit function when activated. Operates with GTK signal structures and event-driven callbacks. Used to manage UI elements that switch states, such as checkboxes or switches.",
      "description_length": 238,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Grid.P",
      "description": "Provides properties to configure layout behavior of grid-based widgets, including baseline alignment, uniform row and column sizing, and spacing between rows and columns. Works with grid structures and boolean or integer values to control visual arrangement. Used to fine-tune the appearance of tabular layouts in graphical interfaces.",
      "description_length": 335,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.ButtonBox.P",
      "description": "Provides a property accessor for retrieving and setting the button box style in a GTK interface. Works with GTK's button box widget and associated style enums. Used to customize the arrangement of buttons within a button box container.",
      "description_length": 235,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.SizeGroup.P",
      "description": "Provides access to the size group mode property for GTK widgets, allowing control over how widgets in a group resize relative to each other. Works with GTK size group objects and their associated mode values. Used to synchronize widget dimensions in a user interface layout.",
      "description_length": 274,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.P",
      "description": "Provides properties to configure and query specific attributes of a notebook widget, including popup behavior, group name, current page index, scrollability, border visibility, tab visibility, and tab position. Works with OCaml's Gobject property system and GtkEnums types. Used to dynamically adjust notebook appearance and behavior in GUI applications.",
      "description_length": 354,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.S",
      "description": "Handles interactions with a notebook interface, offering methods to switch, select, and reorder tabs, adjust focus, and manage page addition/removal. Operates on Gtk.widget objects and integer indices to manipulate the layout and behavior of notebook pages. Used to implement dynamic tab management and user-driven navigation in GUI applications.",
      "description_length": 346,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table.P",
      "description": "Returns properties for querying and modifying the layout of a table widget, including number of columns and rows, uniform row and column sizes, and spacing between them. Works with table data structures in a GUI framework. Used to dynamically adjust table appearance based on user input or data changes.",
      "description_length": 303,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Layout.P",
      "description": "Provides access to layout dimensions and scroll adjustments through property getters, working with GTK layout objects and integer values. Retrieves vertical and horizontal adjustments for scrollable areas, along with intrinsic width and height measurements. Used to synchronize UI elements with layout constraints or dynamic resizing events.",
      "description_length": 341,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Stack.P",
      "description": "Provides properties to control layout behavior, transitions, and child visibility in a stack container. Works with boolean flags, integers, widget objects, and string identifiers. Used to manage smooth animations between stack children and enforce uniform sizing during layout updates.",
      "description_length": 285,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.StackSwitcher.P",
      "description": "Provides access to the icon size and stack widget of a Gtk stack switcher through property getters. Operates on Gtk.stack and integer values tied to UI components. Used to dynamically adjust visual elements and navigation behavior in GTK-based interfaces.",
      "description_length": 255,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Paned.P",
      "description": "Provides properties to query and control the position, range, and orientation of a paned container. Works with integers for position values and GtkEnums.orientation for direction settings. Used to dynamically adjust layout splits and ensure proper alignment in GUI interfaces.",
      "description_length": 276,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Box.P",
      "description": "Provides properties to configure layout behavior, including uniform sizing, spacing between elements, and direction (horizontal or vertical) for box containers. Works with GTK box widgets and their associated properties. Used to dynamically adjust the appearance and arrangement of UI components in a GTK application.",
      "description_length": 317,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range.P",
      "description": "Provides properties to control the behavior and appearance of range widgets, including adjustment values, fill levels, inversion, and sensitivity of scroll steppers. Works with GTK range objects and associated types like orientation and sensitivity. Used to customize sliders and progress bars with precise control over user interaction and visual representation.",
      "description_length": 363,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range.S",
      "description": "Adjusts slider bounds, moves the slider, changes its value with scroll type, and triggers a callback when the value updates. Works with GTK range widgets and float values. Used to synchronize slider interactions with external logic or update UI elements dynamically.",
      "description_length": 266,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.ProgressBar.P",
      "description": "Provides properties to control and customize a progress bar's appearance and behavior, including fraction, inversion, text display, pulse step, and ellipsis settings. Works with GTK+ widgets that support progress bar functionality, such as `progressbar` elements. Used to dynamically update progress indicators in GUI applications with text labels and visual feedback.",
      "description_length": 368,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale.P",
      "description": "Provides properties to access and control visual attributes of a scale widget, including digit display, value drawing, origin presence, and position type. Works with GObject properties and GtkEnums.position_type to customize scale rendering. Used to dynamically adjust how numerical data is visually represented in a GUI.",
      "description_length": 321,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale.S",
      "description": "Formats a floating-point number into a string using a scale-based transformation, tailored for UI display. It operates on float values and GtkSignal.t handlers. Used to dynamically update UI elements with scaled numerical representations.",
      "description_length": 238,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.EventBox.P",
      "description": "Provides properties to check if a widget is above its child and if a window is visible, working with GTK eventbox widgets. These properties allow direct access to internal state flags used in layout and rendering. Used to control widget stacking order and visibility logic in GUI applications.",
      "description_length": 293,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport.P",
      "description": "Provides access to scroll adjustments and shadow type for a viewport widget. Works with Gtk.adjustment objects and GtkEnums.shadow_type values. Used to control scrolling behavior and visual appearance of a container's borders.",
      "description_length": 226,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Invisible.P",
      "description": "Provides access to the screen property of a GTK widget, returning a Gdk.screen value. Works with GTK objects that have a screen property, enabling interaction with display settings. Used to retrieve the screen context for rendering or display-specific configurations.",
      "description_length": 267,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander.P",
      "description": "Provides methods to access and manipulate properties of an expander widget, including its expanded state, label text, associated widget, spacing, and underline rendering. Works with boolean, string, integer, and widget data types. Used to dynamically adjust the appearance and behavior of expandable sections in a GUI.",
      "description_length": 318,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander.S",
      "description": "Provides a function to register a signal handler for an expander widget's activation event, allowing custom behavior when the expander is toggled. Operates with GtkSignal.t and a callback that takes no arguments. Used to implement interactive UI elements that respond to user expansion or collapse actions.",
      "description_length": 306,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Frame.P",
      "description": "Provides properties to configure the label, widget, alignment, and shadow appearance of a frame widget. Works with string options, Gtk widgets, floats, and shadow type enumerations. Used to customize the visual presentation of framed UI elements in a GTK application.",
      "description_length": 267,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame.P",
      "description": "Provides properties to control the alignment, aspect ratio, and child behavior of an aspect frame widget. Works with float values for alignment and ratio, and a boolean for child obedience. Used to adjust visual layout and scaling in GUI applications.",
      "description_length": 251,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.P",
      "description": "Provides access to scroll adjustment values and scrollbar policies for a scrolled window, along with window placement and shadow type settings. Works with Gtk.adjustment objects and policy_type/corner_type enumerations. Used to control scroll behavior and visual appearance in GTK-based UIs.",
      "description_length": 291,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.S",
      "description": "Handles focus movement and child scrolling within a scrolled window, responding to direction and scroll type events. Operates on GTK scrolled window widgets and scroll parameters. Used to manage user navigation and content visibility in graphical interfaces.",
      "description_length": 258,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox.P",
      "description": "Provides properties to control positioning, snapping, and visual styling of a handlebox widget. Works with position types, shadow types, and boolean flags to adjust layout behavior. Used to align elements precisely within a GUI and apply visual effects like shadows.",
      "description_length": 266,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox.S",
      "description": "Provides signals for tracking when a child widget is added to or removed from a handlebox container. Works with Gtk.widget objects and signal handlers tied to specific widget types. Used to manage dynamic UI elements that need real-time updates when children are attached or detached.",
      "description_length": 284,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Alignment.P",
      "description": "Provides properties to adjust horizontal and vertical alignment, scaling, and padding for graphical elements. Works with float and int values to control positioning and spacing. Used to fine-tune layout appearance in GUI components.",
      "description_length": 232,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextTag.P",
      "description": "This module provides property accessors and setters for text formatting attributes on `texttag` objects, enabling manipulation of visual properties like color, font, alignment, and spacing. It works with types such as `Gdk.rgba`, `int`, `bool`, and `string` to configure text styling and rendering behaviors. Use cases include customizing text appearance in GUI applications, managing document formatting, and adjusting layout properties in Pango-based text systems.",
      "description_length": 466,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTag.S",
      "description": "Handles text tag events in a GTK application, triggering a callback when text tags are modified. Accepts a function that processes events with a text iterator and returns a boolean. Used to dynamically update or validate text content during user input.",
      "description_length": 252,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextBuffer.P",
      "description": "Provides access to text buffer properties including the tag table, cursor position, and selection status. Works with Gtk text buffer objects and their associated properties. Used to inspect and manipulate text formatting, caret position, and user-selected text.",
      "description_length": 261,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextBuffer.S",
      "description": "Provides methods to manipulate text content and formatting in a text buffer, including inserting text, images, and child anchors, as well as applying or removing text tags. Works with text iterators, marks, tags, and pixbufs to modify document structure and appearance. Used to implement rich text editing features like styled paragraphs, embedded images, and user action tracking.",
      "description_length": 381,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextTagTable.S",
      "description": "Handles signals for changes to text tags in a GTK text widget, including when a tag is added, changed, or removed. Operates on GTK text tags and associated size parameters. Used to dynamically update UI elements based on text formatting changes.",
      "description_length": 245,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView.P",
      "description": "This module offers read-only access to configuration and state properties of text view widgets, enabling customization of formatting, margins, indentation, and scrolling behavior. It interacts with GTK text view objects, exposing internal details like integer-based top margins and vertical adjustment objects. These capabilities are useful for dynamically adapting UI layouts or handling user input constraints within text-based interfaces.",
      "description_length": 441,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextView.S",
      "description": "Provides methods to manipulate text content and cursor position in a text view, including inserting, deleting, and moving text. Works with text view objects and handles clipboard operations like copy, cut, and paste. Used to implement keyboard shortcuts and context menu interactions for text editing.",
      "description_length": 301,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps.Builder.P",
      "description": "Provides access to a property representing a translation domain, using a Gobject property with a variant type that includes `builder` and a string value. Works with GObject-based objects and string literals to manage localization contexts. Used to dynamically set or retrieve the translation domain for UI elements during runtime.",
      "description_length": 330,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget.Tooltip",
      "description": "Provides methods to retrieve and set tooltip text and markup, control tooltip visibility, and trigger tooltip queries on GUI elements. Operates on GTK widget objects, allowing interaction with tooltip properties and associated windows. Used to dynamically update tooltips based on user interaction or application state.",
      "description_length": 319,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget.Signals",
      "description": "Manages GUI event handling with GdkEvent types, supporting widget-specific signals such as button presses, key events, and visibility changes. Provides functions to process selection requests, proximity events, and window state transitions, returning boolean flags to control event flow. Enables responsive user interfaces by capturing and reacting to real-time input and system changes. Examples include handling mouse movements, detecting key presses, and managing window resizing interactions.",
      "description_length": 496,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.StyleContext.ProviderPriority",
      "description": "Provides integer-based priority values for distinct system components, including fallback, theme, settings, application, and user levels. Works with the `int` type to represent hierarchical precedence in configuration resolution. Used to determine override order in layered settings systems, such as merging user preferences with default configurations.",
      "description_length": 353,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.P",
      "description": "Provides access to day, month, and year values from a calendar object through property getters. Works with calendar data structures that expose these temporal components. Used to extract specific date information for display or calculation purposes.",
      "description_length": 249,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.S",
      "description": "Handles event signals for calendar interactions, including day selection, double-click, and month/year navigation. Works with GTK calendar widgets to trigger callbacks for user actions. Used to implement responsive calendar UIs that update based on user input.",
      "description_length": 260,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Image.P",
      "description": "Provides access to properties of image objects, including icon names, pixbufs, icon sizes, and resource paths. Works with types such as GdkPixbuf.pixbuf, Gtk.icon_set, and GtkEnums.icon_size. Used to configure and retrieve visual attributes of icons in GUI applications.",
      "description_length": 270,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.FontSelection.P",
      "description": "Provides access to font selection properties, including the name of the selected font and a preview text string. Works with GObject-based font selection objects. Used to retrieve user-selected font details and display sample text in a GUI application.",
      "description_length": 251,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Separator.P",
      "description": "Provides a property accessor for retrieving the orientation of a widget, specifically handling `GtkEnums.orientation` values. Works with GTK widgets that support a separator style. Used to dynamically check or set the direction of layout elements like bars or dividers.",
      "description_length": 269,
      "index": 54,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "GtkMiscProps.Statusbar.P",
      "description": "Provides a property accessor for the `statusbar` widget's shadow type, allowing retrieval and modification of its visual border style. Works with GTK's `shadow_type` enumeration and Gobject properties. Used to dynamically adjust the appearance of status bars in GTK applications.",
      "description_length": 279,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Statusbar.S",
      "description": "Handles signal connections for status bar updates in a GTK application. Responds to text insertion and removal events on a status bar widget, using integer indices and string messages. Enables dynamic status bar content management during user interactions.",
      "description_length": 256,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Arrow.P",
      "description": "Provides properties for retrieving and setting arrow and shadow types on graphical elements. Works with Gobject properties and GtkEnums types to customize visual appearance. Used to adjust widget styling in GTK-based interfaces.",
      "description_length": 228,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label.P",
      "description": "Provides properties to configure text display and interaction for UI elements, including text alignment, markup support, underlining, and ellipsis handling. Works with string-based content and widget references, offering control over text rendering and user input. Used to customize labels in graphical interfaces with precise formatting and behavior settings.",
      "description_length": 360,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Label.S",
      "description": "Handles clipboard operations, cursor movement with precise control, and popup menu customization. Works with GTK signals and event-driven interactions. Used to integrate custom text editing behaviors and context menus in GUI applications.",
      "description_length": 238,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.P",
      "description": "Provides properties to access and modify the screen, visibility, and tooltip content of a GTK status icon. Works with GTK status icon objects and associated data types like screen, boolean, and string. Used to dynamically update the status icon's appearance and user feedback in a GUI application.",
      "description_length": 297,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.S",
      "description": "Handles signal connections for a status icon, including activation, menu popping, and size changes. Operates with GTK status icon instances and integer parameters for event handling. Used to integrate application notifications and context menus within a system tray.",
      "description_length": 266,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.P",
      "description": "Provides access to properties of a color selection widget, including the current alpha value, color, and flags indicating presence of opacity control and palette. Works with Gobject properties and Gdk.color type. Used to query and interact with color selection UI elements in a GUI application.",
      "description_length": 294,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.S",
      "description": "Handles color change events from a UI element, triggering a callback when the selected color is updated. Operates with GTK signals and unit-returning functions. Used to dynamically update UI components based on user color selections.",
      "description_length": 233,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Misc.P",
      "description": "Provides properties to adjust horizontal and vertical alignment and padding for UI elements. Works with graphical objects that support alignment and spacing adjustments. Used to fine-tune layout positioning in GUI applications.",
      "description_length": 227,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget.P",
      "description": "The module offers functions to access and retrieve properties of GTK widgets, focusing on layout and interaction attributes such as margins, size, visibility, alignment, and focusability. It operates on widget objects, enabling precise control over styling and behavioral configurations. These utilities are particularly useful for dynamically adjusting UI elements' appearance and responsiveness during runtime.",
      "description_length": 412,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget.S",
      "description": "These functions manage event-driven interactions for GUI components, focusing on signal emissions like showing, hiding, and drawing widgets, as well as handling drag-and-drop, tooltip queries, and selection data. They operate on GTK widget objects and Gdk events, enabling precise control over interactions such as drag motion, event preprocessing, and post-processing. Use cases include implementing custom widget behaviors, responsive user interfaces, and managing complex input workflows.",
      "description_length": 491,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Socket.S",
      "description": "Provides signal handlers for tracking when a plug is added to or removed from a socket in a GTK application. Operates with GTK socket widgets and associated signals. Used to dynamically manage embedded components within a windowed interface.",
      "description_length": 241,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window.P",
      "description": "This module provides property accessors and configuration functions for manipulating window objects, exposing attributes such as size, position, opacity, focus behavior, system hints, and transient relationships. It enables precise control over window appearance, behavior, and layout within a GUI framework, supporting use cases like dynamic resizing, focus management, and customizing window types. Specific applications include adjusting visual properties, enforcing system-specific hints, and managing hierarchical window dependencies.",
      "description_length": 539,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window.S",
      "description": "Provides signal handlers for window-related events in a GUI application, including focus activation, key changes, and event propagation. Works with GTK+ window signals and widget objects, enabling interaction with user input and interface state. Used to manage focus navigation, event handling, and dynamic UI updates.",
      "description_length": 318,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.MessageDialog.P",
      "description": "Provides access to properties of a message dialog, including buttons configuration, message type, associated image, message area, text content, and markup formatting options. Works with GTK+ dialog objects and related types such as strings, booleans, and widgets. Used to customize and retrieve details of dialog boxes in GUI applications.",
      "description_length": 339,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Orientable.P",
      "description": "Handles orientation properties for UI elements, allowing retrieval and manipulation of horizontal or vertical layout directions. Works with GtkEnums.orientation and Gobject.property types to integrate with GTK+ widgets. Used to dynamically adjust widget layouts based on user preferences or screen orientation changes.",
      "description_length": 318,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment.P",
      "description": "Provides access to numeric properties of an adjustment object, including lower bound, upper bound, current value, and step/page increments. Works with float values representing scrollable ranges and interaction parameters. Used to control and query scrollable interfaces in GUI applications.",
      "description_length": 291,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment.S",
      "description": "Handles signal connections for adjustment changes in GTK, responding to user interactions with sliders or spin buttons. Operates on GTK adjustment objects and associated event handlers. Used to trigger updates in UI components when numerical values are modified.",
      "description_length": 262,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Plug.S",
      "description": "Provides a signal handler for embedded events, specifically triggered by a `plug` event type. Operates on GtkSignal.t with a unit return type. Used to integrate external applications into a GTK+ windowing environment.",
      "description_length": 217,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.AboutDialog.P",
      "description": "Provides access to properties of an application's about dialog, including text fields like program name, comments, copyright, and version, as well as graphical elements like a logo and license information. Works with string and GdkPixbuf.pixbuf data types to store and retrieve dialog content. Used to dynamically populate and customize application information in GUIs.",
      "description_length": 369,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Dialog.S",
      "description": "Provides signal handlers for GTK dialog events, including a close action and a response with an integer code. Works with GTK dialog objects and their associated callbacks. Used to manage user interactions such as closing a window or handling button responses in graphical applications.",
      "description_length": 285,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView.Tooltip",
      "description": "Provides methods to associate tooltips with specific cells or rows in a tree view, retrieve column indices, and obtain context information based on mouse coordinates. Works with tree paths, tree iterators, and tree model data structures. Used to display detailed information about individual cells or rows when hovering over a tree view widget.",
      "description_length": 344,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView.Dnd",
      "description": "Provides functions to manage drag-and-drop interactions in a tree view, including determining drop positions, enabling and disabling drag sources and destinations, and handling drag operations with specific target formats and actions. Works with GTK tree view objects, drag actions, and target entries to facilitate interactive data manipulation. Used to implement drag-and-drop reordering of items and data transfer between tree views.",
      "description_length": 436,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu.P",
      "description": "Tearoff_title extracts a string value from a GObject property associated with a menu element. It interacts directly with the internal structure of menu objects through the Gobject library. This function is used to retrieve the title of a menu for dynamic UI updates.",
      "description_length": 266,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu.S",
      "description": "Handles scroll events for a menu interface, triggering specific actions based on scroll type. Operates on GTK scroll type enumerations and associated signal handlers. Used to implement smooth navigation behavior within a menu component.",
      "description_length": 236,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuBar.P",
      "description": "Provides properties to control layout and appearance of a menubar, including direction of child packing, internal padding, and shadow type. Works with GtkEnums.pack_direction, GtkEnums.shadow_type, and integer values. Used to customize the visual and spatial arrangement of menu items within a menubar.",
      "description_length": 302,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuShell.S",
      "description": "Handles interaction with a menu shell interface by emitting signals for user actions such as activating, canceling, or moving focus within a menu. Operates on GTK signals tied to specific menu shell events and direction types. Used to manage keyboard navigation and menu state transitions in graphical applications.",
      "description_length": 315,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuItem.S",
      "description": "Provides signal handlers for activating menu items and specific menu actions in a GTK application. Works with GTK signal types and callback functions tied to menu elements. Used to trigger custom behavior when user selects menu options or performs context-specific actions.",
      "description_length": 273,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.P",
      "description": "Provides properties to query the active and inconsistent states of a check menu item. Works with GTK+ widgets represented as `[> `checkmenuitem ]` and boolean values. Used to synchronize UI state with application logic, such as updating menu item appearance based on user interactions.",
      "description_length": 285,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.S",
      "description": "Toggles the state of a check menu item by connecting a signal handler that executes a given action. It operates on GTK+ menu items and their associated signal mechanisms. This function is used to implement user interface elements that require on/off state changes, such as enabling/disabling features via a menu.",
      "description_length": 312,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainersProps.Container.P",
      "description": "Provides access to properties of container widgets, including border width, child widget, and resize mode. Works with GTK container objects and their associated types. Used to configure layout behavior and widget positioning in graphical interfaces.",
      "description_length": 249,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainersProps.Container.S",
      "description": "Provides methods to handle widget addition, removal, and resizing within a container, as well as focus management. Operates on GTK container widgets and their associated widgets. Used to dynamically update UI layouts and manage keyboard focus in graphical applications.",
      "description_length": 269,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.P",
      "description": "Provides properties to configure and query attributes of a tree view column, including alignment, visibility, size constraints, and sorting behavior. Works with tree view column objects and associated data types like integers, booleans, strings, and enums. Used to dynamically adjust column appearance and interaction in a GUI table interface.",
      "description_length": 343,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.S",
      "description": "Handles click events on tree view columns, triggering a provided callback function. Operates with GTK+ tree view column objects and unit-returning functions. Used to implement interactive column sorting or selection in graphical user interfaces.",
      "description_length": 245,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.P",
      "description": "Provides properties to configure and control the behavior of a tree view widget, including setting the model, adjusting scrollbars, enabling search, and managing column visibility. Works with tree view objects and associated data structures like tree models, adjustments, and columns. Used to customize the appearance and interaction of hierarchical data displays in GTK-based applications.",
      "description_length": 390,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.S",
      "description": "Provides signal handlers for interacting with a tree view widget, including managing row expansion, cursor movement, selection, and activation. Works with tree iterators, paths, and columns to manipulate and respond to user actions. Used to implement custom behavior for navigating and modifying hierarchical data displays.",
      "description_length": 323,
      "index": 91,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf.P",
      "description": "Provides access to properties of a cell renderer for displaying pixbufs and stock icons, including custom pixbufs for expanders, stock identifiers, and icon sizes. Works with GdkPixbuf.pixbuf and GtkEnums.icon_size types to customize visual elements in UI components. Used to dynamically set icons and expandable row indicators in tree views.",
      "description_length": 342,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.P",
      "description": "Provides methods to access and manipulate properties of a GTK cell renderer combo, including the associated tree model, the text column index, and whether an entry widget is present. Works with GTK's cell renderer combo widget and its associated data structures. Used to configure dropdowns with custom text rendering and input capabilities in GUI applications.",
      "description_length": 361,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.S",
      "description": "Handles tree view cell renderer changes by binding a callback to a specific signal, allowing dynamic updates to tree items. Operates on GTK+ tree paths and iterators, enabling interactive GUI modifications. Used to refresh combo box cells in a tree view when user input alters the underlying data.",
      "description_length": 297,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress.P",
      "description": "Provides access to the progress value and associated text of a cell renderer, using property getters for GTK widgets. Operates on GTK cell renderer objects with specific type constraints. Used to dynamically update and retrieve progress display information in user interfaces.",
      "description_length": 276,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.P",
      "description": "This module offers getter and setter functions for configuring text rendering attributes, focusing on properties like font style, color, size, and formatting options such as underline and text wrapping. It operates on types including strings, colors, integers, and Pango-specific structures like font descriptions, enabling precise control over text appearance. Use cases include customizing GUI elements like cell renderers in applications requiring dynamic text styling or layout adjustments.",
      "description_length": 494,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.S",
      "description": "Handles real-time text editing in a tree view cell by connecting a signal handler that updates the cell's content based on the tree path and new string value. Operates with GTK+ tree paths and string inputs to enable dynamic data modification. Used to implement interactive data entry in hierarchical list interfaces.",
      "description_length": 317,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSelection.S",
      "description": "Handles tree selection changes by emitting a signal that triggers a callback function. Operates with GTK+ tree selection objects and unit-returning functions. Used to update UI elements in response to user selection in a tree view.",
      "description_length": 231,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter.P",
      "description": "Provides access to the child model and virtual root path of a tree model filter, enabling manipulation of filtered tree structures. Works with Gtk.tree_model and Gtk.tree_path types to navigate and modify hierarchical data. Used to implement dynamic filtering in tree views by adjusting the underlying model and visible root.",
      "description_length": 325,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.P",
      "description": "Provides properties to configure visual and behavioral aspects of a grid-based item display, including column count, spacing, item dimensions, and data source mapping. Works with integer values, tree models, and enumeration types to control layout and interaction. Used to customize the appearance of icon views in GUI applications, such as adjusting item alignment or defining data columns for rendering.",
      "description_length": 405,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.S",
      "description": "Handles signal connections for interactive UI elements, specifically responding to item activation and selection changes in a graphical interface. Operates with GTK+ tree paths and event triggers tied to icon view components. Used to implement user-driven interactions such as launching actions on item click or updating UI state upon selection.",
      "description_length": 345,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRenderer.P",
      "description": "Provides properties to configure and query visual and layout attributes of cell renderers, including background color, size, alignment, and visibility. Works with GTK cell renderer objects and associated types like Gdk.color and cell_renderer_mode. Used to adjust appearance and behavior of cells in UI components such as trees and lists.",
      "description_length": 338,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModel.S",
      "description": "Handles tree model change events such as row insertion, deletion, and reordering, with signals triggered by specific path and iterator parameters. Works with Gtk.tree_path and Gtk.tree_iter to track modifications in hierarchical data structures. Used to update UI components in response to dynamic tree model changes, such as in file browsers or configuration editors.",
      "description_length": 368,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.P",
      "description": "Provides properties to access and modify accelerator settings on a cell renderer, including key codes, modifier flags, and mode configurations. Works with GTK's cell renderer accelerator object, handling integer and mode-specific data. Used to customize keyboard shortcuts in UI elements like trees or lists.",
      "description_length": 308,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.S",
      "description": "Provides signal handlers for tracking changes in a cell renderer's accelerator settings, including when an accelerator is cleared or edited. Works with GTK+ tree paths and accelerator key data, including key codes and modifier states. Used to implement custom keyboard shortcut configurations in GUI applications.",
      "description_length": 313,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort.P",
      "description": "Provides access to a tree model property, enabling interaction with hierarchical data structures in GTK. Works with GTK's tree model objects and supports sorting operations through the `treemodelsort` tag. Used to dynamically bind and manipulate tree data in GUI applications.",
      "description_length": 276,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSortable.S",
      "description": "Sorts data based on column changes, triggering a callback when the sorting state of a column is altered. It operates on GUI elements that support tree sorting, specifically those tagged with the `treesortable` variant. This is used to dynamically update views when users interact with sortable columns in a table.",
      "description_length": 313,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.P",
      "description": "Provides properties to manage state and behavior of toggleable cell renderers, including activation status, active state, inconsistency flag, and radio mode. Works with GTK+ cell renderers that support toggle functionality. Used to control checkbox appearance and interaction in tree views or list views.",
      "description_length": 304,
      "index": 108,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.S",
      "description": "Toggles the state of a tree view cell renderer based on the provided path. It operates on GTK tree paths and interacts with cell renderers of type `cellrenderertoggle`. This function is used to implement interactive tree view elements that respond to user clicks by switching their state.",
      "description_length": 288,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.Entry.P",
      "description": "This module offers functions to retrieve and modify properties of Gtk entry widgets, focusing on text content, visibility, editing status, formatting, and icon configurations, working with types like strings, booleans, integers, GdkPixbuf, and stock IDs. It enables customization of UI elements such as secondary icons and placeholder text, allowing developers to dynamically adjust widget appearance and behavior in graphical applications.",
      "description_length": 440,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry.S",
      "description": "Provides signal handlers for interacting with a text entry widget, including text insertion, deletion, cursor movement, and clipboard operations. Works with Gtk entry widgets and event types related to mouse actions on icons. Used to implement custom text editing behaviors and keyboard shortcuts in GUI applications.",
      "description_length": 317,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo.P",
      "description": "Provides properties to control behavior of a combo widget, including allowing empty selections, enforcing case sensitivity, enabling arrow key navigation, and ensuring arrow keys are always active. Works with boolean values tied to specific combo widget states. Used to customize user input validation and interaction in GUI applications.",
      "description_length": 338,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton.P",
      "description": "Provides access to properties of a spin button widget, including adjustment values, numeric input validation, display digits, and behavior settings like wrapping and tick snapping. Works with Gtk.spinbutton objects and related types such as float, int, and boolean. Used to configure and retrieve settings for user input controls in GTK-based GUIs.",
      "description_length": 348,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton.S",
      "description": "Provides signal handlers for interacting with a spinbutton widget, including retrieving its integer value, checking its boolean state, and detecting value changes or wrapping. Works with GTK+ spinbutton elements and their associated events. Used to synchronize UI input with application logic, validate user entries, and manage spinbutton behavior during user interactions.",
      "description_length": 373,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.P",
      "description": "Provides access to the minimum key length required for auto-completion and retrieves the associated tree model for data lookup. Works with GTK entry completion widgets and integer-based properties. Used to configure auto-complete behavior and bind completion data sources.",
      "description_length": 272,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.S",
      "description": "Handles signal connections for GUI interactions, specifically for tracking when an entry completion action is triggered and when a match is selected. Operates with GTK+ signal types and tree model filters. Used to implement auto-complete features with custom selection logic in graphical interfaces.",
      "description_length": 299,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Editable.S",
      "description": "Handles text modification events in a GUI component, including detecting changes, deleting selected text, and inserting new text at a specified position. Operates on editable widgets with signal-based interactions. Used to synchronize UI state with underlying data models during user input.",
      "description_length": 290,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.P",
      "description": "Provides properties to configure and interact with a combobox widget, including setting the active item, managing entry text, controlling focus behavior, and defining column spans. Works with integer and boolean values to adjust visual and interactive aspects of the widget. Used to customize dropdown behavior in GUI applications, such as setting a default selection or enabling user input in a combobox.",
      "description_length": 405,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.S",
      "description": "Handles user interaction events for a combobox widget, triggering a callback when its value changes. Operates on GTK signal structures tied to GUI elements. Used to dynamically update application state in response to user selections.",
      "description_length": 233,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFileProps.FileChooserButton.P",
      "description": "Provides access to the title and width_chars properties of a file chooser button, allowing retrieval and modification of its display text and character width. Works with GTK+ widgets that implement the file chooser button interface. Used to customize the appearance of file selection dialogs in GUI applications.",
      "description_length": 312,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser.P",
      "description": "Provides properties to configure and extend the behavior of a file chooser interface, including setting actions, filters, preview widgets, and selection modes. Works with GTK+ file chooser objects and associated widgets, such as file filters and custom UI elements. Used to customize file selection dialogs for applications requiring advanced file handling, like image editors or document managers.",
      "description_length": 398,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser.S",
      "description": "Provides signals for handling user interactions with a file chooser, including changes to the current folder, file activation, selection updates, and preview generation. Emits a confirmation response when overwriting files. Works with GTK file chooser widgets and event-driven callbacks. Used to implement custom file selection logic in GUI applications.",
      "description_length": 354,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkAssistantProps.Assistant.S",
      "description": "Handles signal connections for a GTK assistant widget, providing specific event triggers for actions like applying changes, canceling, closing, leaving, and preparing the assistant. Works with GTK signal types and unit-returning callback functions. Used to integrate user interactions with assistant lifecycle events in GUI applications.",
      "description_length": 337,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.P",
      "description": "Provides a property accessor for retrieving a URI string from objects with a `linkbutton` tag. Works with Gobject properties and string data types. Used to extract hyperlinks from UI elements in GTK-based applications.",
      "description_length": 218,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.S",
      "description": "Provides a function to bind a click event to a UI element, triggering a callback that performs an action. Works with GTK+ widgets and signal handlers. Used to handle user interactions such as navigating to a URL or executing a command when a link is clicked.",
      "description_length": 258,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.P",
      "description": "Provides properties to control the size and appearance of a toolbar, including icon size, arrow visibility, and style. Works with GTK+ toolbar objects and associated enumeration types. Used to customize the visual layout and behavior of toolbars in graphical user interfaces.",
      "description_length": 275,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.S",
      "description": "Provides signals for handling toolbar interactions, including style changes, focus navigation, and context menu activation. Works with GTK+ toolbar elements and associated event parameters like direction types and mouse coordinates. Used to customize toolbar behavior in GUI applications, such as responding to user input for focus movement or context menu requests.",
      "description_length": 366,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.Button.P",
      "description": "Provides properties to configure visual and behavioral aspects of button widgets, including image display, label text, alignment, and styling. Works with GTK button objects and associated types such as position, relief, and boolean flags. Used to customize button appearance in graphical user interfaces, such as setting an icon next to text or adjusting button padding.",
      "description_length": 370,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.Button.S",
      "description": "Handles mouse and button interaction events for GUI elements, including activation, click, hover, press, and release actions. Works with GTK button widgets and associated signal handlers. Used to trigger custom behavior in response to user input in graphical interfaces.",
      "description_length": 270,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem.P",
      "description": "Provides access to properties that determine the visibility and importance of tool items in a UI framework. Works with objects tagged as `toolitem` and returns boolean values for horizontal and vertical visibility, as well as importance. Used to control the display and prioritization of interface elements based on context.",
      "description_length": 324,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.P",
      "description": "Provides access to properties of a tool button, including its icon widget, label, label widget, stock ID, and underline usage flag. Works with GTK+ widget objects and associated properties. Used to customize the appearance and behavior of toolbar buttons in GUI applications.",
      "description_length": 275,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.S",
      "description": "Handles click events on tool buttons, invoking a provided callback function. Operates with GTK+ widget signals and unit-returning functions. Used to trigger actions like opening dialogs or updating UI state in response to user interaction.",
      "description_length": 239,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton.P",
      "description": "Provides properties to configure and retrieve settings from a font selection widget, including font name, display flags for size and style, a title label, and options to enable font and size selection. Works with GTK+ widget types that support property access. Used to customize the appearance and behavior of font dialogs in graphical applications.",
      "description_length": 349,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton.S",
      "description": "Provides a signal handler for font selection events, binding a callback to a font button widget. Operates on GTK+ widgets and signal connections. Used to trigger actions when a user selects a new font in a graphical interface.",
      "description_length": 226,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem.P",
      "description": "Provides a property to control the rendering of a separator tool item, accepting a boolean value. Works with Gobject properties and GTK+ UI elements. Used to dynamically show or hide a separator in a toolbar based on application state.",
      "description_length": 235,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioButton.P",
      "description": "Groups radio buttons together, ensuring mutual exclusivity in user selections. It operates on GTK radio button objects and their optional references. This is used to create a set of mutually exclusive options in a graphical interface.",
      "description_length": 234,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton.S",
      "description": "Handles toggle state changes for a specific UI element, invoking a provided action when the state switches. Operates on a Gtk widget with a toggle tool button signal. Used to manage UI interactions where a button's state directly affects application behavior.",
      "description_length": 259,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ColorButton.P",
      "description": "Provides access to properties of a color selection widget, including color value, alpha channel, editor visibility, title, and alpha channel usage. Works with Gdk.color, Gdk.rgba, and boolean flags tied to a color button element. Enables dynamic adjustment of color properties and UI state in a graphical interface.",
      "description_length": 315,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ColorButton.S",
      "description": "Handles color selection through a button widget, triggering a callback when a color is chosen. Operates with GTK+ UI elements, specifically color button widgets. Used to integrate color pickers into graphical interfaces for user-driven color customization.",
      "description_length": 256,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.P",
      "description": "Provides properties to control the active state, indicator drawing, and inconsistency flag of toggle buttons. Works with GTK toggle button objects and boolean values. Used to manage visual feedback and state synchronization in GUI interactions.",
      "description_length": 244,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.S",
      "description": "Toggles the state of a GUI element represented by a `togglebutton` through a signal handler. It operates on GTK+ widget signals and executes a callback when the button is clicked. This is used to switch between on/off states in a graphical interface.",
      "description_length": 250,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton.P",
      "description": "Provides a property accessor for retrieving a menu associated with a tool button in a GTK interface. Works with GTK's menu and object types, enabling interaction with UI elements. Used to dynamically access and modify context menus linked to toolbar buttons.",
      "description_length": 258,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton.P",
      "description": "Groups radio tool buttons into a mutually exclusive set, ensuring only one can be selected at a time. It operates on GTK+ radio tool button objects and their properties. This is used to create a toolbar with radio buttons where selecting one automatically deselects others.",
      "description_length": 273,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.PrivateProps",
      "description": "Provides properties to access and manipulate the name, sensitivity, and visibility of GUI elements. Works with GObject-based objects, using property wrappers for type-safe access. Used to dynamically control widget appearance and behavior in graphical interfaces.",
      "description_length": 263,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action",
      "description": "Manages action properties and event binding for GUI elements, supporting dynamic UI adjustments and user interaction handling. It includes boolean and string-based controls for visibility, labels, and tooltips, along with signal binding for responsive behavior. Actions can be customized to reflect application state or trigger specific responses to user input. For example, it can hide a menu item when a feature is disabled or execute a function when a button is clicked.",
      "description_length": 473,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction",
      "description": "Manages UI state transitions by binding boolean properties to radio button rendering and triggering callback functions on toggle events. Supports GObject properties and GTK signals, enabling dynamic UI updates and event handling. Allows widgets to switch visual styles and execute actions based on user interaction. Can be used to create interactive checkboxes that update data models or change interface layouts.",
      "description_length": 413,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction",
      "description": "Manages radio action widgets by exposing methods to retrieve and modify group and value properties, enabling interaction with GTK radio button groups. Supports signal handling to execute callbacks when selections change, allowing for real-time UI responses. Operations include querying the active selection and setting new values within a group. Examples include updating UI elements based on user choice or programmatically selecting a specific radio option.",
      "description_length": 459,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.UIManager",
      "description": "manages properties for adjusting UI behavior and retrieving string-based definitions, while handling signal-based interactions to synchronize widgets with actions and update UI elements dynamically. It exposes boolean and string properties for tearoff and label customization, and supports action-driven widget management. Users can modify menu behaviors at runtime and ensure consistent UI state through signal handlers. Examples include enabling/disabling menu items and updating labels based on application events.",
      "description_length": 517,
      "index": 148,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "GtkActionProps.ActionGroup",
      "description": "Manages GObject-based action groups by exposing and modifying attributes like name, sensitivity, and visibility, allowing dynamic UI updates. Supports signal handling for GTK interactions, enabling control over action activation and widget synchronization. Operations include setting visibility, checking sensitivity, and connecting signals to trigger UI changes. Examples include updating button states before an action executes or reflecting group changes in real-time.",
      "description_length": 471,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.PrivateProps",
      "description": "Provides properties to control layout spacing and orientation, including column and row spacing values, a homogeneous flag, and an orientation setting. Works with widget types that support GTK layout properties. Used to configure grid-like arrangements in GUI interfaces with precise control over element placement.",
      "description_length": 315,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Box",
      "description": "Controls layout behavior in GTK applications by managing uniform sizing, spacing, and direction (horizontal or vertical) for box containers. Exposes data types such as `box_layout`, `spacing`, and `orientation` to define and manipulate container properties. Allows dynamic adjustment of UI component arrangement, such as setting uniform child sizes or adding consistent gaps between elements. Enables creation of responsive layouts that adapt to user interactions or window resizing.",
      "description_length": 483,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.ButtonBox",
      "description": "Manages the style configuration of a GTK button box, enabling retrieval and modification of layout properties through style enums. Supports operations like setting the box's spacing, alignment, and packing direction. Allows developers to dynamically adjust the visual and structural behavior of button containers. Example tasks include changing the button arrangement from horizontal to vertical or adjusting padding between buttons.",
      "description_length": 433,
      "index": 152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Fixed",
      "description": "Provides methods to cast and create a fixed container, and to position widgets within it by specifying absolute coordinates. Operates on GTK fixed containers and widgets, allowing precise placement. Used to build custom layouts where elements need fixed positioning relative to the container's origin.",
      "description_length": 301,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Paned",
      "description": "Controls and queries the position, range, and orientation of a paned container using integers and GtkEnums.orientation. Supports dynamic layout adjustments by modifying split positions and alignment. Allows precise manipulation of container dimensions and direction. Example: adjust a vertical split to position 200 or switch to horizontal orientation.",
      "description_length": 352,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Layout",
      "description": "Manages layout properties by exposing methods to retrieve scroll adjustments and intrinsic dimensions from GTK layout objects. Key data types include integers for size measurements and adjustment objects for scroll behavior. Operations allow for dynamic UI synchronization, such as updating element positions based on scroll values or resizing components to fit available space. Examples include adjusting widget placement during window resizes or controlling scrollable content visibility.",
      "description_length": 490,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook",
      "description": "Manages notebook widget behavior and appearance through property accessors and setters, allowing dynamic control over popup settings, tab positioning, scrollability, and visibility. Provides methods to manipulate tabs, including switching, reordering, and adjusting focus, using widget references and page indices for precise control. Supports real-time updates to the notebook layout based on user input or application logic. Examples include hiding tabs on demand, programmatically switching to a specific page, or reordering tabs based on user preferences.",
      "description_length": 559,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table",
      "description": "Controls table layout through properties that define row and column counts, uniform sizing, and spacing. Supports dynamic adjustments to table structure and appearance. Operates on table data structures, enabling modifications like resizing and reordering. Examples include setting fixed row heights, adjusting column widths based on content, and updating spacing in response to user interactions.",
      "description_length": 397,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Grid",
      "description": "Controls layout behavior of grid-based widgets through properties like baseline alignment, uniform sizing, and spacing. Operates on grid structures using boolean and integer values to adjust visual arrangements. Enables precise control over tabular layouts in graphical interfaces. Examples include setting equal row heights, adjusting column gaps, and aligning elements along a baseline.",
      "description_length": 388,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.SizeGroup",
      "description": "Controls how widgets within a group resize relative to one another by managing size group mode properties. Offers operations to set and retrieve mode values, ensuring consistent layout behavior across GTK widgets. Supports synchronization of dimensions in user interfaces through direct interaction with size group objects. Example tasks include aligning button sizes or maintaining uniform row heights in a grid.",
      "description_length": 413,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Stack",
      "description": "Manages a collection of widgets in a stacked layout, allowing dynamic control over visibility, transitions, and sizing. Supports boolean flags to show/hide elements, integers for indexing, widget objects for direct manipulation, and string identifiers for referencing specific children. Enables smooth animated transitions between stacked elements and ensures consistent layout behavior during updates. Example tasks include hiding a widget, swapping positions, or triggering a slide animation between views.",
      "description_length": 508,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.StackSwitcher",
      "description": "Manages visual and navigational aspects of a GTK stack interface by exposing icon size and stack widget properties. It supports operations on Gtk.stack and integer values to modify UI elements dynamically. Developers can adjust layout and interaction based on user input or application state. Examples include resizing icons or switching between stacked views at runtime.",
      "description_length": 371,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gtk.Tags",
      "description": "The module provides operations for defining and managing configuration, styling, and state parameters in graphical user interfaces, including alignment, selection modes, and interaction flags. It works with type aliases and enumerated types that represent UI element properties, such as resize behaviors, dialog options, and component-specific settings. These are applied in scenarios like customizing layout controls, configuring toolbar behaviors, and managing file chooser interfaces.",
      "description_length": 487,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.PrivateProps",
      "description": "Inverts the boolean value of a given GObject property. Operates on properties of type ('a, bool) Gobject.property. Useful for toggling UI elements based on property state changes.",
      "description_length": 179,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range",
      "description": "Controls range widget behavior and appearance through properties like adjustment, fill, inversion, and sensitivity, while enabling dynamic value manipulation and callback triggers. Supports GTK range objects, orientation, and float-based interactions for precise user control. Sliders and progress bars can be customized, bounded, and synchronized with external systems. Examples include adjusting slider limits, updating values via scroll, and responding to changes in real time.",
      "description_length": 480,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Scale",
      "description": "Manages visual and numerical representation of scale widgets through property manipulation and value formatting. Exposes float-to-string conversion with scale transformations and supports dynamic UI updates. Provides control over display elements like digits, origin, and position via GObject and GtkEnums. Enables real-time adjustments to how numerical data appears in graphical interfaces.",
      "description_length": 391,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Scrollbar",
      "description": "Provides functions to cast existing objects to scrollbars and create new scrollbars with specified orientation and parameters. Operates on GObject objects and scrollbars, using orientation tags and parameter lists. Used to dynamically generate or reference scrollbars in GUI layouts.",
      "description_length": 283,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.ProgressBar",
      "description": "Controls progress bar behavior through properties like fraction, inversion, and text display, enabling dynamic updates in GUI applications. Supports GTK+ widgets with methods to adjust visual and textual feedback. Allows customization of pulse steps and ellipsis for animated or indeterminate progress states. Can be used to create responsive, user-friendly interfaces with real-time progress tracking.",
      "description_length": 402,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GWindow.Buttons",
      "description": "Provides functions to create predefined button configurations for user interactions, including OK, close, yes/no, and ok/cancel layouts. Works with custom type variants representing different dialog button sets. Used in GUI applications to standardize button groups in alerts, file dialogs, and configuration panels.",
      "description_length": 316,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.PrivateProps",
      "description": "Provides properties to configure alignment and scroll adjustments for GUI elements, including horizontal and vertical alignment values and references to adjustment objects. Works with Gtk.adjustment and GtkEnums.shadow_type types to control widget appearance and behavior. Used to fine-tune the layout and scrolling properties of UI components in GTK applications.",
      "description_length": 364,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Bin",
      "description": "Converts a GObject instance into a Gtk.bin object, enabling interaction with GTK+ container widgets. Operates on GObject and Gtk.obj types, facilitating access to bin-specific properties and methods. Used to embed child widgets into containers like Gtk.window or Gtk.box.",
      "description_length": 271,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Alignment",
      "description": "Controls positioning and spacing of graphical elements through adjustable alignment, scaling, and padding parameters. Supports both float and int types for precise layout management. Enables fine-grained control over GUI component appearance by modifying horizontal and vertical placement. Examples include centering an element, adjusting spacing between widgets, or scaling content proportionally.",
      "description_length": 398,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Frame",
      "description": "Configures and customizes the visual properties of framed UI elements using string options, Gtk widgets, floats, and shadow type enumerations. Supports label placement, widget embedding, alignment settings, and shadow effects. Allows precise control over the appearance of framed components in a GTK interface. Examples include setting a framed label with a specific shadow style or embedding a button inside a styled frame.",
      "description_length": 424,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame",
      "description": "Controls alignment, aspect ratio, and child behavior in GUI layouts using float values for alignment and ratio, and a boolean for child obedience. Supports precise adjustment of widget scaling and positioning. Allows developers to enforce consistent proportions and alignment within dynamic interfaces. Example uses include maintaining a video's aspect ratio or centering content within a resizable window.",
      "description_length": 406,
      "index": 173,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.EventBox",
      "description": "Manages internal state flags of GTK eventbox widgets, enabling checks for widget stacking and window visibility. Provides direct access to boolean properties that influence layout and rendering behavior. These properties are used to control the z-order of widgets and manage visibility during application execution. For example, they can determine whether a widget is displayed above others or if a window remains hidden until specific conditions are met.",
      "description_length": 455,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Invisible",
      "description": "Provides access to the screen context of GTK widgets, allowing interaction with display settings through Gdk.screen values. Enables retrieval of display-specific configurations and rendering context from GTK objects. Operations include querying screen properties and adapting widget behavior to the current display. Examples include adjusting widget appearance based on screen resolution or color depth.",
      "description_length": 403,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox",
      "description": "Controls positioning, snapping, and visual styling of a handlebox widget using position types, shadow types, and boolean flags, enabling precise layout adjustments and visual effects. Manages dynamic UI changes through signals that track additions and removals of child widgets, using Gtk.widget objects and custom handlers. Allows for real-time updates when elements are attached or detached from the container. Example tasks include aligning a button within a window and updating a status bar when a new widget is added.",
      "description_length": 522,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow",
      "description": "Controls scroll behavior and visual properties through adjustment values, scrollbar policies, and shadow types, while managing focus and content navigation via direction and scroll events. Utilizes Gtk.adjustment objects, policy_type, and corner_type enumerations for fine-grained control. Supports operations like adjusting scroll positions, setting scrollbar visibility, and handling user-driven navigation. Enables precise management of content visibility and user interaction in GTK-based interfaces.",
      "description_length": 504,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport",
      "description": "Controls scroll behavior and border appearance using Gtk.adjustment objects and GtkEnums.shadow_type values. Offers methods to retrieve and modify scroll adjustments and border styles. Allows precise tuning of container visuals and interaction. Enables setting shadow types like `None`, `EtchedIn`, or `ShadowIn` and adjusting scroll parameters dynamically.",
      "description_length": 357,
      "index": 178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Expander",
      "description": "Manages expander widgets by exposing methods to read and modify their state, label, child widget, spacing, and underline formatting, supporting boolean, string, integer, and widget types. Enables registration of activation handlers to execute custom logic when the expander is toggled, using a signal and argument-free callback. Allows dynamic UI adjustments and user interaction tracking. For example, it can hide or show content sections based on user input or update labels in response to expansion events.",
      "description_length": 509,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenu.RadioMenuItem",
      "description": "Provides methods to cast objects to radio menu items, set their group association, and create instances with or without mnemonics or labels. Operates on GTK radio menu item objects and groups. Used to build interactive menu options in graphical applications where mutually exclusive selections are required.",
      "description_length": 307,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenu.Menu",
      "description": "The module provides a framework for defining and managing menu structures, offering basic constructs for building interactive command-line interfaces. It includes types for menu items and selections, along with operations to create, navigate, and process user input. Users can define custom menus, handle user choices, and integrate with external commands. Example uses include generating a main menu with suboptions and processing user input to trigger specific actions.",
      "description_length": 471,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainers.Container",
      "description": "The module provides a framework for managing containerized data structures with support for basic operations like insertion, retrieval, and traversal. It includes a core type `container` and functions such as `add`, `find`, and `iter` for manipulating stored elements. Users can create and modify containers, perform lookups, and process elements in sequence. Example uses include maintaining a registry of items or tracking stateful information across computations.",
      "description_length": 466,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Type",
      "description": "Provides functions to initialize type systems, retrieve and convert type names, navigate type hierarchies, check type relationships, and manage fundamental and interface types. Operates on `g_type` and `fundamental_type` to support type registration and introspection. Used to dynamically register new types, verify inheritance, and access interface dependencies in a type-safe manner.",
      "description_length": 385,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Value",
      "description": "Manages GObject value containers, enabling creation, type checking, and data manipulation. It supports operations like copying, resetting, and transforming values between compatible types, and provides direct access to underlying data types such as nativeint, int32, and pointers. Used to handle dynamic data storage and conversion in GObject-based systems.",
      "description_length": 357,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Closure",
      "description": "Provides functions to create and manipulate closures, extract and set argument values, and retrieve type information from argument lists. Works with custom types like `argv`, `g_closure`, `g_value`, and `Gpointer.boxed` to handle low-level data access. Used to inspect and modify function call arguments in bindings for C libraries or event-driven systems.",
      "description_length": 356,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Data",
      "description": "The module provides bidirectional type conversion between OCaml and GLib/GObject data types, including boxed types, GObject instances, and variant tables, with specialized handling for primitive types, numeric operations, and pointers. It supports injection/projection functions for wrapping and unwrapping values, enabling seamless integration with Glib-based systems like GTK and efficient management of heterogeneous data structures. Specific use cases include interoperability in GUI frameworks and converting complex data between OCaml and Glib-compatible formats.",
      "description_length": 569,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Property",
      "description": "Manages dynamic property values and notifications for objects, allowing setting and retrieving values by name or typed property, with support for optional values and parameter lists. Works with object instances, string identifiers, and custom data types like `g_value`, `g_type`, `data_set`, and `data_get`. Used to update UI elements in response to property changes, configure object behavior dynamically, and handle optional configuration parameters during initialization.",
      "description_length": 474,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.PrivateProps",
      "description": "Provides access to text formatting properties through typed GObject properties, including indentation, margins, line spacing, and text justification. Works with widget types that support text rendering, such as text views or labels. Enables precise control over text layout in graphical interfaces.",
      "description_length": 298,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView",
      "description": "offers read-only access to text view properties such as margins, indentation, and scroll settings, while providing methods to modify text content and cursor position, including clipboard operations. It supports dynamic UI adjustments and text editing tasks through direct interaction with GTK text view objects. Users can customize layout parameters and implement keyboard-driven text manipulation. Examples include adjusting vertical spacing based on user preferences or enabling copy-paste functionality within a text editor.",
      "description_length": 527,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextBuffer",
      "description": "Manages text content and formatting through operations like inserting text, images, and tags, while providing access to buffer properties such as cursor position and selection status. Supports manipulation of text iterators, marks, and pixbufs to alter document structure and appearance. Enables features like styled paragraphs, embedded media, and user interaction tracking. Allows inspection and modification of text buffers for dynamic document handling.",
      "description_length": 457,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextChildAnchor",
      "description": "Provides functions to cast objects to text child anchors, create them with parameters, retrieve associated widgets, and check if they have been deleted. Works with GTK text child anchor objects and widget references. Used to manage embedded widgets within text buffers and track their lifecycle.",
      "description_length": 295,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextMark",
      "description": "Provides operations to create and manipulate text marks in a GTK text buffer, including setting visibility, checking deletion status, retrieving names, associated buffers, and gravity settings. Works with GTK's text_mark objects and related parameters. Used to track positions in a text buffer, manage mark properties during editing, and synchronize UI state with document content.",
      "description_length": 381,
      "index": 192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextTag",
      "description": "Manages text formatting and event-driven modifications in GTK applications, offering methods to adjust visual properties like color, font, and alignment using types such as `Gdk.rgba`, `int`, `bool`, and `string`. Supports dynamic content updates by invoking callbacks when text tags change, using a function that processes text iterators and returns a boolean. Enables precise control over text styling in GUIs and real-time validation during user input. Examples include adjusting text appearance in documents and enforcing formatting rules as users type.",
      "description_length": 557,
      "index": 193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextTagTable",
      "description": "Manages dynamic updates to UI elements in response to changes in text formatting within a GTK text widget. Tracks additions, modifications, and removals of text tags, along with their size attributes. Supports real-time adjustments to the interface based on these events. For example, it can highlight syntax or adjust font sizes as the user edits formatted text.",
      "description_length": 363,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Expose",
      "description": "Converts any value to an event type representing an expose event. Calculates the area of the event's bounding rectangle and returns the number of regions affected by the event. Used to handle window redraw requests in graphical applications.",
      "description_length": 241,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Visibility",
      "description": "Converts any value to a specific event type representing visibility notifications. Retrieves the visibility state from such an event. Used to handle window visibility changes in GUI applications, such as detecting when a window is obscured or unobscured.",
      "description_length": 254,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Motion",
      "description": "Provides methods to extract positional data, device information, and event timing from motion events. Works with event records that represent motion notifications, including coordinates, axes, and device details. Used to track mouse movement, detect input device changes, and retrieve precise event timestamps.",
      "description_length": 310,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Button",
      "description": "Provides methods to extract and modify properties of input events, including position, button state, and device information. Works with event data structures representing user interactions like mouse clicks and movements. Used to process and transform event data for custom input handling in graphical applications.",
      "description_length": 315,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Scroll",
      "description": "Provides methods to extract specific properties from scroll events, including position, direction, device, and delta values. Works with event records that represent scroll actions, capturing detailed input information. Used to track user interactions with scroll wheels or touchpads, enabling precise control over scroll behavior in graphical applications.",
      "description_length": 356,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Key",
      "description": "Converts arbitrary values to event objects, extracts timing information from events, and retrieves key symbols, string representations, hardware key codes, group indices, and modifier states from event data. Works with event records that include timing and key-related metadata. Used to process keyboard input events in graphical applications, such as determining which key was pressed and its associated properties.",
      "description_length": 416,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Crossing",
      "description": "Provides methods to extract specific properties from event objects, including coordinates, time, crossing mode, and state. Works with event types representing window entry and exit notifications. Used to track mouse movements and interaction states within graphical interfaces.",
      "description_length": 277,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Focus",
      "description": "Handles focus change events by converting arbitrary values to focus event types and checking if a focus-in event occurred. Operates on event data structured as `Gdk.event` with a specific variant `FOCUS_CHANGE`. Used to detect and respond to window focus changes in GUI applications.",
      "description_length": 283,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Configure",
      "description": "Provides operations to extract integer values from a configuration event type, including coordinates and dimensions. Works with a tagged variant type representing a specific event structure. Used to access positional and size data from graphical interface events.",
      "description_length": 263,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Property",
      "description": "Provides operations to convert values to event objects, extract Gdk atoms from events, and retrieve time stamps from timed events. Works with event types specifically marked as property notifications and timed events. Used to handle X11 property change notifications and synchronize event timing in GUI applications.",
      "description_length": 316,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Selection",
      "description": "Provides operations to inspect and manipulate selection events, including extracting atoms for targets and properties, retrieving the requestor window, and capturing event timestamps. Works with event types representing selection actions like clear, request, and notify. Used to handle clipboard interactions and X11 selection protocols in GUI applications.",
      "description_length": 357,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Proximity",
      "description": "Handles proximity event states with `cast` to convert values to event types, `time` to extract timestamps from timed events, and `device` to retrieve input devices from proximity events. Works with `Gdk.event` and integer timestamps. Used to track input device interactions and timing in graphical applications.",
      "description_length": 311,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Setting",
      "description": "Provides functions to convert values into a setting event type, extract associated action tags, and retrieve the name of the setting. Works with the `t` type, which is a wrapped Gdk event representing a setting. Used to handle user interface configuration changes and retrieve specific setting details during event processing.",
      "description_length": 326,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.WindowState",
      "description": "Handles conversion of arbitrary values to window state objects and extracts information about changes in window states, working with Gdk event types. It processes lists of window state tags to determine updated properties. Used to track and respond to window resizing, positioning, and focus changes in graphical applications.",
      "description_length": 326,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.Iter",
      "description": "The module provides navigation, inspection, and manipulation operations on `Gtk.text_iter` objects, enabling precise control over text buffers through character, line, word, and sentence-level movements. It supports tasks like retrieving text content, tags, marks, and validating positions, with capabilities for searching, comparing iterators, and handling visible text segments. These functions are essential for text processing, formatting, and UI interactions requiring granular control over GTK+ text buffers.",
      "description_length": 514,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile.FileFilter",
      "description": "Provides functions to create and configure file filters for use in GTK applications, including setting names, adding MIME types, patterns, and custom filtering logic. Operates on GTK file filter objects, enabling precise control over file selection criteria. Used to define specific file types allowed in open/save dialogs, such as restricting to image formats or custom file extensions.",
      "description_length": 387,
      "index": 210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFile.FileChooser",
      "description": "None of the child modules contribute functional elements; they contain no types, functions, or operations. No data structures or behaviors are available for use. No operations can be performed or values constructed. The module offers no capabilities or interactions.",
      "description_length": 266,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.Dialog",
      "description": "The module provides a foundation for handling dialog-related operations, offering basic structures and utilities. It includes a single type for representing dialog states and a handful of operations for manipulating these states. Users can create, update, and query dialog instances using the provided functions. Example tasks include initializing a dialog and checking its current status.",
      "description_length": 389,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps.Builder",
      "description": "Manages translation contexts for UI elements by exposing a property that accepts a variant type with `builder` and a string, enabling dynamic localization adjustments. Supports GObject-based objects and string literals to set or query the domain at runtime. Allows for flexible localization handling by associating specific strings with translation domains. For example, it can be used to switch between different language sets for a widget based on user preferences.",
      "description_length": 467,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Object",
      "description": "Provides methods to cast and instantiate GObject-derived objects, including reference counting and type checking. Works with GObject objects and parameters, supporting dynamic type handling. Used to safely convert between object types and create instances with specific properties.",
      "description_length": 281,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget",
      "description": "Controls tooltip behavior and event handling for GUI elements, enabling dynamic updates and user interaction responses. It includes methods to manipulate tooltip text, visibility, and queries, as well as functions to process GdkEvent types and widget-specific signals. Operations such as handling button presses, key events, and window resizing are supported, with boolean flags to manage event propagation. This allows for real-time adjustments to UI elements based on user actions or application state.",
      "description_length": 504,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Clipboard",
      "description": "Provides functions to interact with the system clipboard, including retrieving and setting text and image data, clearing content, and querying available data formats. Operates with Gtk.clipboard, Gdk.atom, and GdkPixbuf.pixbuf to manage clipboard operations. Used to copy text between applications, transfer images, and check available clipboard formats asynchronously.",
      "description_length": 369,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Selection",
      "description": "Provides functions to manipulate and query clipboard and selection data, including retrieving and setting data, formats, and targets. Works with Gtk.selection_data, Gdk.atom, and string types to handle data exchange between applications. Used for implementing custom clipboard operations, drag-and-drop interactions, and inter-process data transfer.",
      "description_length": 349,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.DnD",
      "description": "Provides drag-and-drop functionality for GUI widgets, including setting and unsetting drag sources and destinations, handling data transfer, and managing visual feedback during interactions. Operates on GTK widgets, drag contexts, and target entries to enable seamless data exchange. Used to implement custom drag-and-drop behaviors in graphical applications, such as moving items between panels or inserting data into text fields.",
      "description_length": 431,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Tooltip",
      "description": "Sets text, markup, or custom widgets as tooltips, and configures icons from stock or pixbuf. Operates on GTK tooltip objects and rectangle areas to define interaction zones. Used to display rich content, such as formatted text or icons, in response to user hover events.",
      "description_length": 270,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.AccelGroup",
      "description": "Manages keyboard accelerator groups for GUI applications, handling key binding, activation, and validation. It works with key symbols, modifier masks, and callback functions to control user input responses. Used to dynamically assign and check accelerator keys for menu items and widgets.",
      "description_length": 288,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.AccelMap",
      "description": "Manages keyboard shortcut mappings by loading and saving configurations from files, adding or modifying key bindings with specific modifiers, and iterating over stored entries with detailed metadata. Operates on key symbols, modifier lists, and string-based path identifiers. Used to dynamically update application shortcuts at runtime or persist user-defined key mappings between sessions.",
      "description_length": 390,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.Style",
      "description": "Creates and manages GTK style objects, enabling manipulation of color properties for different widget states. Operates on `Gtk.style` and `Gdk.color` types, allowing attachment to windows and modification of background, foreground, and other visual attributes. Used to customize widget appearance by setting and retrieving color values based on state types like normal, active, or selected.",
      "description_length": 390,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.CssProvider",
      "description": "Provides functions to create a CSS styling source and apply raw CSS data to it. Works with GTK's CSS provider object and string-based style definitions. Used to dynamically inject custom styles into GTK applications during runtime.",
      "description_length": 231,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.StyleContext",
      "description": "Manages hierarchical precedence in configuration systems using integer priorities to resolve conflicts between distinct layers like fallback, theme, and user settings. Supports operations that compare and combine priority values to determine effective configuration values. Can prioritize user-defined settings over defaults or apply theme-specific overrides in a structured manner. Enables precise control over how different configuration sources interact during resolution.",
      "description_length": 475,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.PrivateProps",
      "description": "Provides access to the `shadow_type` property of GTK objects, allowing retrieval and manipulation of shadow effects applied to widgets. Works with GTK's internal representation of shadow types, such as `None`, `In`, `Out`, and `EtchedIn`. Used to dynamically adjust visual styling of UI elements based on application state.",
      "description_length": 323,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon",
      "description": "Manages GTK status icon behavior through properties and signals, enabling dynamic updates to appearance and user interaction. Supports operations on screen, boolean, and string data to control visibility and tooltips, and handles integer-based events for activation and menu actions. Allows real-time adjustments to the icon's state and response to user input. Example tasks include changing the tooltip text on demand or displaying a context menu when the icon is clicked.",
      "description_length": 473,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Misc",
      "description": "Controls layout positioning by adjusting alignment and padding for graphical elements. Supports horizontal and vertical alignment properties, along with spacing parameters. Allows precise control over the placement and spacing of UI components. Example: center a button within a window or add consistent margin around a text box.",
      "description_length": 329,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Label",
      "description": "Manages text display and interaction in graphical interfaces by configuring alignment, markup, underlining, and ellipsis, while supporting widget references and string content for precise rendering. Enables clipboard integration, cursor control, and popup menu customization through GTK event handling, allowing for tailored text editing experiences. Operations include text formatting, content manipulation, and user interaction customization. Examples include creating styled labels with ellipsis, implementing custom context menus, and controlling text selection and clipboard actions.",
      "description_length": 588,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Arrow",
      "description": "Manages visual properties of graphical elements by allowing retrieval and modification of arrow and shadow types through Gobject properties and GtkEnums. Key data types include enum values for arrow and shadow styles, with operations for setting and querying these properties. This enables precise control over widget appearance in GTK interfaces, such as changing arrow direction or shadow intensity. Examples include customizing button icons or adjusting window borders dynamically.",
      "description_length": 484,
      "index": 229,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Image",
      "description": "Handles image properties and visual attributes, offering access to icon names, pixbufs, icon sizes, and resource paths. Supports operations on GdkPixbuf.pixbuf, Gtk.icon_set, and GtkEnums.icon_size to configure and retrieve icon details. Allows developers to dynamically adjust icon appearance and source in graphical interfaces. For example, it enables loading a specific icon size from a resource path or modifying an icon set's visual representation.",
      "description_length": 453,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection",
      "description": "Manages color selection interactions through property access and event handling. Exposes color, alpha, and UI flags via Gobject properties, and supports Gdk.color type operations. Triggers callbacks on color changes using GTK signals. Enables real-time UI updates and state queries during user interactions.",
      "description_length": 307,
      "index": 231,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.FontSelection",
      "description": "Encapsulates font selection behavior by exposing the chosen font's name and a preview text for rendering. Supports interaction with GObject-based font objects to fetch user preferences and generate visual samples. Allows retrieval of font properties and dynamic text previews in graphical interfaces. Enables developers to customize UI elements based on user font choices.",
      "description_length": 372,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Statusbar",
      "description": "Manages visual and behavioral aspects of a status bar in GTK applications by exposing and modifying its shadow type, and by handling signals for text updates. Supports operations like retrieving and setting the border style using GTK's `shadow_type` and responding to changes in status messages via integer indices. Allows dynamic adjustments to appearance and content based on user interactions. For example, it can change the status bar's border to `In` or `Out` and update displayed messages when users perform actions.",
      "description_length": 522,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Calendar",
      "description": "Extracts temporal components like day, month, and year from calendar objects and manages user interactions through event signals. Supports operations such as retrieving date values and handling callbacks for selections or navigation. Enables dynamic UI updates and precise date manipulation in applications. Examples include displaying selected dates or adjusting the calendar view in response to user input.",
      "description_length": 408,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.DrawingArea",
      "description": "Handles object casting and initialization for graphical rendering surfaces, enabling direct manipulation of GTK drawing area instances. Operates on GTK object structures and parameter lists to configure visual components. Used to set up custom drawing contexts in GUI applications.",
      "description_length": 281,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Separator",
      "description": "Handles orientation properties for GTK widgets, enabling dynamic retrieval and modification of layout direction. Supports `GtkEnums.orientation` values to control horizontal or vertical alignment of elements. Allows developers to query or adjust the layout direction of separators, bars, and dividers at runtime. Example: determine if a separator is horizontal to conditionally apply styling or layout changes.",
      "description_length": 410,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Internal",
      "description": "Allocates a rectangle based on a pointer's position using a boxed Gpointer. Operates on Gtk.rectangle and Gobject.data_conv types to extract and manipulate geometric data. Used to determine widget placement during event handling.",
      "description_length": 229,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.PrivateProps",
      "description": "Handles property access and manipulation for graphical objects, specifically retrieving and setting opacity values as floats. Works with Gobject properties and float values to control visual transparency. Used to dynamically adjust element visibility in GUI applications.",
      "description_length": 271,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Widget",
      "description": "provides tools for dynamically controlling GTK widget properties and event handling, enabling runtime adjustments to layout, visibility, and interaction. It supports operations on widget objects and Gdk events, including managing signals, drag-and-drop, and tooltip behavior. Users can adjust widget alignment, respond to user input, and customize UI responses in real time. Examples include modifying margins during layout changes or handling drag motion events for custom interactions.",
      "description_length": 487,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Bin",
      "description": "Provides functions to cast GObject instances to Gtk.bin objects and retrieve the child widget contained within a bin. Operates on GObject and Gtk.widget types, enabling interaction with container widgets in GTK. Used to access and manipulate UI elements within a container during dynamic interface construction.",
      "description_length": 311,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment",
      "description": "Manages scrollable interface parameters and event-driven updates in GTK applications. Exposes properties like bounds, value, and step size for float-based adjustments, and supports dynamic UI responses to value changes. Allows precise control over scrollable elements and synchronization with user interactions. Enables real-time updates to sliders or spin buttons when underlying values shift.",
      "description_length": 394,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Orientable",
      "description": "Manages orientation settings for UI components, enabling dynamic layout adjustments through horizontal or vertical direction controls. It works with GtkEnums.orientation and Gobject.property to interact with GTK+ widgets. Operations include querying current orientation and modifying layout directions at runtime. For example, it can switch a button box from horizontal to vertical when the screen orientation changes.",
      "description_length": 418,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Window",
      "description": "Manages window properties and event handling through accessors, configuration functions, and signal handlers. Exposes data types like window objects, signals, and event handlers, supporting operations such as adjusting size, handling focus, and responding to user input. Enables dynamic UI updates, custom window behavior, and event-driven interactions. Examples include setting window opacity, capturing key presses, and managing focus transitions between widgets.",
      "description_length": 465,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Dialog",
      "description": "Handles GTK dialog events with signal handlers for closing and responding with integer codes, enabling controlled user interaction. Supports GTK dialog objects and their callbacks, allowing for structured event management. Users can implement actions like dismissing a window or processing button clicks based on response codes. Examples include validating form inputs or triggering specific application states upon dialog closure.",
      "description_length": 431,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.MessageDialog",
      "description": "Manages dialog box configurations by exposing properties like button layouts, message types, images, and text formatting. Supports operations on GTK+ dialog objects, including retrieving and modifying string, boolean, and widget values. Allows precise control over visual and interactive elements of message dialogs. Enables developers to create customized alerts, confirmations, and information panels with specific content and styling.",
      "description_length": 437,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.AboutDialog",
      "description": "Encapsulates application metadata for display in a graphical about dialog, handling text and image data. Exposes properties such as program name, version, and license, along with a logo stored as a GdkPixbuf.pixbuf. Allows retrieval and modification of these elements to tailor the dialog's appearance. Enables dynamic updates to application information without hardcoding values.",
      "description_length": 380,
      "index": 246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Plug",
      "description": "Handles embedded event integration through a dedicated signal handler, responding to `plug` events within a GTK+ environment. Operates on `GtkSignal.t` with unit return values, enabling seamless interaction between external applications and GUI components. Allows for custom behavior in response to embedded event triggers, such as updating UI elements or managing application lifecycle. Supports event-driven communication in graphical applications using GTK+ signals.",
      "description_length": 469,
      "index": 247,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Socket",
      "description": "Manages dynamic component integration in GTK interfaces by responding to plug insertion and removal events. Tracks changes through signal handlers linked to socket widgets, enabling real-time updates. Supports operations like adding or removing embedded widgets based on event triggers. Example: Automatically refreshes a window when a new plug is connected or removes outdated content when a plug is disconnected.",
      "description_length": 414,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8.Error",
      "description": "Provides functions to handle UTF-8 validation errors, including raising exceptions for invalid input sequences. Works with the error type to represent malformed UTF-8 data. Used to enforce strict UTF-8 decoding in text processing pipelines.",
      "description_length": 240,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreePath",
      "description": "Manages tree node paths in a GTK+ application, supporting creation from lists or strings, modification through index insertion, and traversal operations like moving up, down, or to the next/previous node. Works with tree path structures that store ordered integer indices representing node positions. Used to navigate and manipulate hierarchical data structures in user interfaces, such as file systems or organizational charts.",
      "description_length": 428,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.RowReference",
      "description": "Provides functions to create and manage references to specific rows in a tree model, retrieve their paths, and check their validity. Works with GTK's tree path and row reference objects. Used to track rows across model changes or selections in a tree view.",
      "description_length": 256,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeModel",
      "description": "Provides methods to interact with tree-like data structures in GTK, including iterating, querying, and modifying rows. Works with tree paths, iterators, and column types to navigate and manipulate hierarchical data. Used to implement custom tree views, validate row relationships, and update UI elements dynamically.",
      "description_length": 316,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeStore",
      "description": "Manages hierarchical data structures using tree iterators and values, enabling insertion, removal, and traversal of nodes in a structured format. Operates on tree stores with columns defined by Gobject types, supporting operations like appending, prepending, and reordering entries. Used to dynamically build and manipulate tree views in GUI applications, such as file system explorers or configuration panels.",
      "description_length": 410,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.ListStore",
      "description": "Manages a dynamic list of rows with columnar data, enabling insertion, removal, and reordering of items using tree iterators. Operates on GTK's list_store structure, supporting value setting and validation checks for row integrity. Used to dynamically update UI components like combo boxes or tree views with structured data.",
      "description_length": 325,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeSelection",
      "description": "The module provides a framework for working with tree structures by defining core types and operations for traversal and manipulation. It includes a `node` type representing elements and a `tree` type for hierarchical collections. Functions such as `map`, `fold`, and `filter` allow transformation and analysis of tree contents. Users can build and process complex data structures like abstract syntax trees or file system hierarchies.",
      "description_length": 435,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeViewColumn",
      "description": "provides a framework for defining and managing columns in a tree view structure, enabling the display of hierarchical data. it includes types for column configurations and operations to customize rendering and data binding. users can create columns with specific data types, set headers, and define cell renderers. examples include displaying file system directories or organizational charts with tailored column layouts.",
      "description_length": 421,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView",
      "description": "manages tooltip display and drag-and-drop interactions for tree view components, leveraging tree paths, iterators, and model data. It supports retrieving column indices, obtaining context from mouse positions, and handling drag operations with target formats and actions. Tooltip associations allow detailed cell or row information to be shown on hover, while drag-and-drop functions enable reordering and data transfer between tree views. It integrates directly with GTK tree view objects to enhance user interaction.",
      "description_length": 518,
      "index": 257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.CellLayout",
      "description": "Provides methods to manage cell renderers within a layout, including packing, reordering, and clearing cells. Operates on GTK cell layout objects and cell renderers, allowing precise control over how data is displayed in UI components. Used to customize the appearance of items in lists or trees by associating renderers with specific data columns and formatting rules.",
      "description_length": 369,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkStock.Icon_source",
      "description": "Creates and configures an icon source object with specific properties, allowing assignment of a filename, pixel buffer, and wildcard flags for direction, state, and size. It enables setting explicit direction, state, and size values for icon rendering. Used to define how icons are selected and displayed in GTK+ applications.",
      "description_length": 326,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Icon_set",
      "description": "Creates and manages icon sets for graphical interfaces, supporting operations to add icon sources and retrieve available sizes. Works with GTK icon sets and pixbufs to handle visual elements. Used to build custom icon collections for application UI components.",
      "description_length": 260,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Icon_factory",
      "description": "Manages icon sets within a GTK application, allowing registration and retrieval of icons by name. It operates with `Gtk.icon_factory` and `Gtk.icon_set` to store and access graphical icons. Used to dynamically load and reference icons in user interfaces, such as setting icons for buttons or menu items.",
      "description_length": 303,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkStock.Item",
      "description": "Adds an item to a collection, retrieves a list of all item IDs, and fetches an item by its unique identifier. Works with item records containing structured data and string-based IDs. Used to manage inventory entries and quickly access stored items by ID.",
      "description_length": 254,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GTree.Path",
      "description": "Constructs and manipulates tree path structures used in GTK+ for navigating hierarchical data. Operates on integer lists and arrays to represent path indices, supporting operations like appending, prepending, and moving between nodes. Converts paths to and from strings, and checks ancestor relationships for tree traversal in UI components.",
      "description_length": 341,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GDraw.Cairo",
      "description": "Creates a Cairo context for rendering on a GDK window, enabling low-level 2D vector graphics operations. Works with Gdk.window and Gdk.cairo types to perform drawing tasks such as path rendering and color filling. Used to implement custom UI elements and visual effects in graphical applications.",
      "description_length": 296,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder.Builder",
      "description": "The module provides a foundation for constructing complex data structures through a series of specialized components. It includes types such as `builder`, `state`, and `output`, along with operations like `add`, `reset`, and `finalize` to manipulate and assemble content. Users can create and manage incremental builds, track progress, and generate final outputs in a structured manner. Example tasks include building JSON documents, assembling binary streams, or generating code snippets step by step.",
      "description_length": 502,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuItem",
      "description": "Handles user interactions with menu elements by binding custom logic to activation events and specific actions in a GTK interface. Supports signal-based callbacks for menu items and contextual operations, enabling dynamic response to user input. Key data types include signal handlers, menu action identifiers, and callback functions. Examples include launching dialogs, updating application state, or executing commands based on selected menu options.",
      "description_length": 452,
      "index": 266,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem",
      "description": "manages the state and interaction of check menu items in a GTK+ application. It includes functions to query active and inconsistent states using boolean values and GTK+ widgets, and provides a way to toggle these states through signal handlers. This enables dynamic UI updates based on user actions, such as switching features on or off. Examples include synchronizing a menu item's appearance with application settings or triggering actions when the item is selected.",
      "description_length": 468,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.RadioMenuItem",
      "description": "Provides methods to cast objects to a radio menu item and set their group association. Operates on GObject instances and radio menu item groups. Used to dynamically assign radio menu items to the same group for mutual exclusion in GUI interfaces.",
      "description_length": 246,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuShell",
      "description": "Manages user interactions with a menu shell through signal emission, enabling control over activation, cancellation, and focus movement. Processes GTK signals associated with menu events and directional input, supporting keyboard-driven navigation. Allows for tracking and modifying menu states during user engagement. Examples include handling arrow key movements, triggering menu item selections, and managing escape key behavior to close menus.",
      "description_length": 447,
      "index": 269,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.MenuBar",
      "description": "Controls the layout and appearance of a menubar through properties like packing direction, internal padding, and shadow type, using GtkEnums.pack_direction, GtkEnums.shadow_type, and integers. Applies visual and spatial adjustments to menu items within the menubar. Sets direction to left-to-right, padding to 5, and shadow type to etched-in. Enables precise customization of the menubar's look and structure.",
      "description_length": 409,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu",
      "description": "Extracts and manipulates menu element properties, including titles and scroll behaviors, through direct GObject interactions and GTK event handling. Provides functions to retrieve string values from menu properties and manage scroll-based navigation. Operations include dynamic title updates and responsive scroll action triggers. Examples include adjusting menu labels in real time and enabling fluid scrolling through nested menu items.",
      "description_length": 438,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container",
      "description": "Manages container widgets by exposing properties like border width, child widget, and resize mode, while enabling dynamic layout adjustments through addition, removal, and resizing operations. Supports focus management to control keyboard interaction within UI elements. Operations include setting border dimensions, modifying child widgets, and adjusting resize behavior. Examples include creating resizable panels, reordering UI components, and ensuring proper focus flow in complex interfaces.",
      "description_length": 496,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.Internal",
      "description": "Provides functions to manipulate and duplicate tree path data structures used in GTK+ for hierarchical data representation. Operates on `Gtk.tree_path` objects wrapped in data conversion references. Used to generate string representations of tree paths and create copies for safe manipulation in UI interactions.",
      "description_length": 312,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.PrivateProps",
      "description": "Provides properties to access and manipulate tree model, reordering, visibility, and width attributes of GUI elements. Works with GObject-based objects and boolean or integer values. Used to dynamically adjust widget behavior and appearance in a GTK interface.",
      "description_length": 260,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView",
      "description": "Configures and controls tree view widgets by managing models, scrollbars, search, and column visibility, while also handling user interactions through signal handlers that respond to row expansion, cursor movement, and selection. Key data types include tree models, adjustments, columns, iterators, and paths, with operations for customization and event-driven manipulation. Users can dynamically adjust display settings, filter data, and respond to user input in real time. Examples include enabling searchable tree views, highlighting selected rows, and expanding/collapsing nodes based on user actions.",
      "description_length": 605,
      "index": 275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRenderer",
      "description": "Configures and queries visual and layout attributes of UI elements using properties like background color, size, alignment, and visibility. Operates on GTK cell renderer objects and related types such as Gdk.color and cell_renderer_mode. Adjusts cell appearance and behavior in components like trees and lists. Supports dynamic modification of cell rendering through direct property access and manipulation.",
      "description_length": 407,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf",
      "description": "Manages visual representation of data in UI elements by exposing properties for pixbufs, stock icons, and expanders. Supports GdkPixbuf.pixbuf and GtkEnums.icon_size types to control icon display and sizing. Enables dynamic icon assignment and expandable row indicators in tree views. Allows customization of visual elements with specific icons, sizes, and expandable states.",
      "description_length": 375,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText",
      "description": "Provides functions for configuring and dynamically updating text rendering in GUI components, combining style control with real-time editing capabilities. It manages properties like font, color, and formatting through Pango structures, and supports interactive text input via signal handlers that modify tree view cells. Operations include setting text attributes, handling user input, and updating hierarchical data displays. Examples include adjusting cell appearance on the fly and enabling editable tables with styled text.",
      "description_length": 527,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle",
      "description": "Manages toggleable cell renderer behavior through properties like activation status, active state, and radio mode, enabling control over checkbox-like elements in GTK+ views. Supports state transitions via tree path manipulation, allowing dynamic updates to cell renderers in response to user interactions. Key data types include tree paths and cell renderer states, with operations that switch renderer states based on input. Examples include implementing clickable checkboxes in a tree view or synchronizing multiple toggle cells in a list.",
      "description_length": 542,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress",
      "description": "Manages progress display properties for GTK cell renderers, exposing methods to access and modify progress values and associated text. Operates on typed GTK cell renderer objects, enabling dynamic updates to UI elements. Supports retrieving current progress state and setting new values during runtime. Example uses include updating a progress bar in a table or displaying percentage text alongside a visual indicator.",
      "description_length": 418,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo",
      "description": "Manages GTK cell renderer combo widgets by exposing methods to access and modify properties like the tree model, text column, and entry widget presence, enabling custom dropdown configurations. Supports dynamic updates through signal-bound callbacks that respond to changes in tree paths and iterators, allowing real-time adjustments to combo box cells. Operations include retrieving and setting column indices, checking for entry widgets, and triggering refreshes based on user interactions. Examples include customizing displayed text in a tree view combo and updating dropdown options when underlying data changes.",
      "description_length": 617,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel",
      "description": "Manages accelerator configurations and events for UI elements, enabling dynamic keyboard shortcut customization. Supports integer key codes, modifier flags, and mode settings, with operations to read, update, and monitor changes. Tracks modifications through signal handlers, responding to edits or clears using GTK+ tree paths and accelerator data. Allows developers to create responsive, user-configurable interfaces with real-time feedback on shortcut adjustments.",
      "description_length": 467,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellLayout",
      "description": "Manages layout of cell renderers within a GTK+ widget, allowing insertion, reordering, and removal of renderers with specific alignment. Works with cell renderers and tree model data to control how data is displayed in columns or lists. Enables dynamic attribute mapping and custom cell data generation for interactive UI elements.",
      "description_length": 331,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn",
      "description": "Configures and manages tree view column properties, including alignment, visibility, and sorting, while handling click interactions through callback functions. Supports data types such as integers, booleans, strings, and enums for dynamic column adjustments. Allows for real-time modifications to column behavior and appearance in GUI tables. Enables features like sortable columns and event-driven user interactions.",
      "description_length": 417,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSelection",
      "description": "Tracks changes in tree selections through signal emission, invoking specified callbacks to reflect user interactions in a tree view. Operates on GTK+ tree selection objects and executes unit-returning functions to update UI state. Allows dynamic UI updates based on selected tree items. For example, selecting a node can trigger a function to display its details in a separate panel.",
      "description_length": 383,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeModel",
      "description": "Tracks changes in hierarchical data structures through signals tied to tree paths and iterators, enabling dynamic UI updates. Supports operations like inserting, deleting, and reordering rows within nested data. Processes Gtk.tree_path and Gtk.tree_iter to reflect modifications in real time. Can be used to synchronize file browser views with underlying directory structures or update configuration panels as data evolves.",
      "description_length": 423,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort",
      "description": "Encapsulates hierarchical data manipulation and sorting for GTK interfaces, leveraging tree model objects to manage structured data. Supports operations like reordering, filtering, and dynamic updates through property access and sorting mechanisms. Allows developers to bind and modify tree structures in real time, enabling responsive GUI interactions. Examples include sorting tree nodes alphabetically, updating child entries dynamically, and maintaining consistent data representation during user interactions.",
      "description_length": 514,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSortable",
      "description": "Manages dynamic sorting of tree-structured data through column interactions, invoking callbacks on state changes. It processes elements marked with the `treesortable` tag, enabling real-time view updates. Operations include detecting column sort changes and applying corresponding visual or data transformations. Users can track sorting preferences, reorder hierarchical data, and synchronize UI elements with underlying data states.",
      "description_length": 433,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter",
      "description": "Manages filtered tree structures by exposing the underlying model and virtual root path, allowing dynamic adjustments to hierarchical data. Supports operations on Gtk.tree_model and Gtk.tree_path to navigate and modify visible sections of a tree. Enables real-time filtering by altering the model's view without changing its core structure. For example, it can hide specific branches or reposition the visible root based on user input.",
      "description_length": 435,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView",
      "description": "Controls grid layout and interaction for icon-based UI elements, allowing configuration of column counts, spacing, and data mapping through integer, tree, and enumeration types. Manages user interactions by connecting signals to item activation and selection events, using GTK+ paths and event handlers. Enables dynamic UI responses, such as triggering actions on item clicks or updating displays based on selections. Supports customizing visual layouts and adding interactivity in graphical applications.",
      "description_length": 505,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.Internal",
      "description": "Handles marshaling of function calls by accepting a closure and an argument vector, then invoking a provided callback with a position reference. Operates on closures and argument vectors derived from GObject. Used to integrate OCaml functions with C-based callback systems in GTK+ applications.",
      "description_length": 294,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.PrivateProps",
      "description": "Provides access to GObject properties for checking frame presence and retrieving tree models. Operates on objects with boolean and Gtk.tree_model type properties. Used to determine if a widget displays a frame and to access hierarchical data structures in GTK interfaces.",
      "description_length": 271,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Editable",
      "description": "Manages text updates in interactive UI elements by responding to user input through signals. Supports operations such as detecting modifications, removing selected content, and inserting text at specific indices. Processes events to maintain consistency between the interface and data structure. Enables real-time adjustments like auto-saving or validation during typing.",
      "description_length": 371,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.Entry",
      "description": "manages Gtk entry widgets by exposing functions to read and alter text, visibility, formatting, and icon settings, using types such as strings, booleans, integers, and pixbufs; it also includes signal handlers for tracking text changes, cursor movements, and icon interactions, enabling dynamic UI adjustments and custom input handling; developers can set placeholder text, toggle password visibility, and respond to clipboard events; examples include validating input in real time or replacing icons based on user actions.",
      "description_length": 523,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.SpinButton",
      "description": "Manages spin button widgets by exposing properties for adjustment values, validation, display formatting, and behavior, along with signal handlers for tracking changes and user interactions. Supports operations on numeric and boolean values, enabling dynamic UI updates and input validation. Can retrieve current values, detect wrapping, and respond to user-driven modifications. Used to control and monitor user input in GTK-based applications with precise behavioral settings.",
      "description_length": 478,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo",
      "description": "Controls widget behavior through boolean properties, enabling features like empty selections, case sensitivity, and arrow key navigation. Key data types include flags representing widget states, with operations to toggle or query these settings. Users can configure input validation and navigation dynamically during runtime. For example, enforce case sensitivity or ensure arrow keys remain functional regardless of focus.",
      "description_length": 423,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.ComboBox",
      "description": "Manages combobox behavior and user interactions through properties and event handlers. Supports setting active items, entry text, and focus behavior using integer and boolean values, while triggering callbacks on value changes. Enables dynamic updates to application state based on user selections. Allows for customized dropdown interactions, such as pre-selecting an option or reacting to input changes in real time.",
      "description_length": 418,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBoxText",
      "description": "Provides methods to cast and create a combo box with text entries, operating on GTK objects and parameter lists. Works with Gtk.combo_box_text and Gobject.obj types to integrate with GUI frameworks. Used to dynamically generate dropdown lists with text options in graphical applications.",
      "description_length": 287,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion",
      "description": "Manages auto-completion behavior by exposing key length constraints and linking to tree models for data retrieval, while enabling event-driven interactions through signal handlers that track completion triggers and selection events. Supports integer-based configuration and GUI integration with GTK. Allows developers to set minimum input lengths, bind data sources, and define custom actions on match selection. Enables dynamic auto-complete features in entry widgets with responsive user feedback.",
      "description_length": 499,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser",
      "description": "Configures and extends file chooser interfaces with properties like actions, filters, and selection modes, enabling advanced file handling in applications such as image editors. Handles user interactions through signals that track folder changes, file selections, and preview updates, with built-in confirmation for file overwrites. Supports GTK+ file chooser objects and custom UI elements for flexible integration. Examples include filtering image types, displaying file previews, and validating file overwrites during save operations.",
      "description_length": 537,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooserButton",
      "description": "Manages properties of a file chooser button, enabling control over its displayed title and character width. Supports both reading and updating these attributes to adjust the visual layout of file selection interfaces. Allows developers to fine-tune how file dialogs appear to users. For example, setting a custom label or ensuring sufficient space for long filenames.",
      "description_length": 367,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_pango.Font_map",
      "description": "Provides functions to manage Cairo font maps, including creating, setting, and retrieving default font maps, adjusting resolution, and determining the font backend type. Works with font maps that can be of type `pangofontmap` or `cairo`, and interacts with Pango contexts. Used to configure font rendering settings for applications using Pango and Cairo, such as setting up thread-local font configurations or switching between font backends.",
      "description_length": 442,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Tags",
      "description": "Converts a scale value to a floating-point representation and retrieves pre-defined variant tables for text styling attributes. It exposes tables mapping style, weight, variant, stretch, and other text properties to their respective underlying representations. Provides direct access to integer equivalents of weight values for low-level configuration tasks.",
      "description_length": 358,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Font",
      "description": "The module offers functions for configuring and querying font properties, including creating, modifying, and converting font descriptions, as well as extracting metrics like ascent, descent, character width, and digit width. It works with `font_description` and `font_metrics` types to manage typographic attributes such as family, size, and style. These operations are essential for tasks like text layout calculations, font customization, and ensuring consistent typographic rendering.",
      "description_length": 487,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango.FontMap",
      "description": "Loads a font into a context based on a font map and a specific font description. It operates on font maps, contexts, and font descriptions to resolve and apply font configurations. Used to dynamically select and render fonts in graphical applications with precise typographic control.",
      "description_length": 284,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Language",
      "description": "Converts between string representations and a language type, checks if a string matches a language's criteria, and represents the absence of a language. Works with the `language` type and arbitrary strings. Used to validate user input against known language formats and handle missing language data.",
      "description_length": 299,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Context",
      "description": "Provides operations to cast objects to a rendering context, retrieve and modify font descriptions and language settings, load fonts and fontsets, and obtain font metrics. Works with types such as font_description, language, font, and font_metrics. Used to configure and query text rendering properties in graphical applications.",
      "description_length": 328,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Layout",
      "description": "The module provides operations for creating, modifying, and querying text layouts, including setting font details, dimensions, and formatting, as well as handling paragraph alignment and ellipsis. It works with layout objects, context structures, font descriptions, rectangles, and positional indices to manage text rendering and spatial constraints. Use cases include dynamic text formatting in UIs, responsive paragraph layout, and precise control over text positioning in graphical applications.",
      "description_length": 498,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Main",
      "description": "Manages event loop lifecycle and state, including starting, checking status, and terminating the loop. Processes pending events and handles locale settings during execution. Integrates with system-level polling mechanisms for asynchronous operations.",
      "description_length": 250,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Timeout",
      "description": "Adds a one-time timer that triggers a callback after a specified number of milliseconds, returning an identifier to cancel the timer. Operates with integer milliseconds and functions that return a boolean to indicate whether the timer should repeat. Used to schedule delayed actions or cancel pending operations before they execute.",
      "description_length": 332,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Idle",
      "description": "Adds a function to be executed periodically, with optional priority, returning a unique identifier. Removes a previously added function using its identifier. Used to manage background tasks or timers within event-driven applications.",
      "description_length": 233,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Io",
      "description": "Provides functions to create and manage I/O channels, including reading data from channels and adding event watchers for specific conditions. Operates on Unix file descriptors, channels, and condition lists to handle asynchronous I/O operations. Used to monitor socket activity and process data in real-time within event-driven applications.",
      "description_length": 341,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Message",
      "description": "Provides functions to configure and manage logging behavior, including setting log levels, handlers, and fatal error masks. Operates with log levels, domains, and handler functions to control message output. Used to customize application logging, filter messages by severity, and handle errors in real-time.",
      "description_length": 307,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Convert",
      "description": "Converts strings between different character encodings, including UTF-8 and the locale's encoding, with support for fallback strategies. Handles filename and URI encoding conversions, and retrieves the current locale's character set information. Processes input validation and error handling for invalid or unsupported encodings.",
      "description_length": 329,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Unichar",
      "description": "Converts Unicode characters to lowercase, uppercase, or titlecase, and checks properties like digit value, alphabetic status, and whitespace. Operates on individual Unicode code points (unichar) to determine character classification and transformation. Used for text normalization, input validation, and character analysis in internationalized applications.",
      "description_length": 357,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Utf8",
      "description": "Handles UTF-8 validation, length calculation, and conversion between UTF-8 strings and Unicode code points or arrays. Processes operations like decoding individual characters, converting to and from unichar arrays, and normalizing text. Used for safely parsing user input, generating valid UTF-8 output, and preparing strings for case-insensitive comparisons or sorting.",
      "description_length": 370,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Markup",
      "description": "Escapes special characters in a string for safe XML output. Processes raw text to prevent invalid markup sequences. Handles character encoding transformations for structured data representation.",
      "description_length": 194,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Tags",
      "description": "This module provides operations for defining and manipulating enumerated types that represent specific graphical system attributes, such as event types, visibility states, input modes, and window properties. It works with data structures like constants and enumerations tied to X11 protocol attributes, window hints, and interaction states, enabling precise control over GUI elements. Use cases include low-level window management tasks, such as configuring window decorations or handling protocol-specific behaviors in graphical applications.",
      "description_length": 543,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Convert",
      "description": "Provides functions to convert between integer representations and tagged types for modifiers, window states, and test conditions. Operates on integers and lists of tagged enums from the Tags module. Used to parse and validate input values in system state management and user interface configuration.",
      "description_length": 299,
      "index": 319,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Atom",
      "description": "Provides operations to create and retrieve unique identifiers from strings, with support for predefined atoms like `none`, `primary`, and `secondary`. Works with the `atom` type, which wraps string values for efficient comparison and storage. Used to manage system-specific identifiers such as clipboard data types or UI element labels.",
      "description_length": 336,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Property",
      "description": "Provides functions to modify, retrieve, and remove X11 property data associated with a window. Operates on window handles, atoms, and Xdata structures. Used to manage window-specific metadata such as application names, icons, or custom data during X11 session interactions.",
      "description_length": 273,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Screen",
      "description": "Returns the width and height of a display screen, retrieves the Pango rendering context for text layout, and provides a default screen instance. Operates on screen and Pango.context types. Used to configure UI elements based on screen dimensions and to initialize text rendering settings.",
      "description_length": 288,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Visual",
      "description": "Provides functions to retrieve a visual based on depth and type, extract the type of a visual, and obtain the depth of a visual. Works with the `visual` type and the `visual_type` variant that includes specific visual categories. Used to select and inspect visual elements in a rendering pipeline or scene graph.",
      "description_length": 312,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Color",
      "description": "Extracts individual RGB components and pixel value from color representations. Operates on a custom color type, converting it to integers and strings. Parses color strings into internal representations and serializes colors for display.",
      "description_length": 236,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Rectangle",
      "description": "Provides operations to construct and query rectangles using integer coordinates and dimensions. Works with a hidden type representing rectangular regions in a 2D space. Used to manage bounding boxes in graphical rendering or spatial calculations.",
      "description_length": 246,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Window",
      "description": "Provides operations to manipulate and query window objects, including casting between types, retrieving parent and position information, and managing cursor and transient relationships. Works with types such as `xid`, `native_window`, `cursor`, and `visual` to interact with low-level windowing system data. Used to integrate with X11 windows, handle window positioning, and manage visual attributes in graphical applications.",
      "description_length": 426,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.DnD",
      "description": "Handles drag-and-drop state tracking, including the current action and available target atoms. Operates on drag contexts and time values to determine interaction status. Used to update UI elements based on ongoing drag operations and supported data formats.",
      "description_length": 257,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.X",
      "description": "Provides operations to immediately flush output buffers and trigger a system beep sound. Works with no specific data types, operating at the system level. Used to ensure immediate output visibility and provide auditory feedback in interactive applications.",
      "description_length": 256,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Cursor",
      "description": "Provides functions to create cursors from predefined types or pixel buffers, and retrieve the associated pixel buffer of a cursor. Works with cursor_type variants and GdkPixbuf objects. Used to customize mouse pointers in GUI applications with specific images or system-defined shapes.",
      "description_length": 285,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Display",
      "description": "Provides functions to retrieve the default display and obtain the window under the mouse pointer along with coordinates. Operates with display and window types from the Gtk library. Used to implement pointer-based interactions and context-sensitive UI updates.",
      "description_length": 260,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Windowing",
      "description": "Provides functions to query and interact with windowing systems, including platform-specific identifiers and rendering context management. Operates on platform tags and graphics contexts to enable low-level window control. Used to initialize and manage native windows in cross-platform GUI applications.",
      "description_length": 303,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Cairo",
      "description": "Creates a Cairo context for rendering graphics onto a given window. Operates on window objects and provides low-level drawing primitives. Used to implement custom UI elements and visual effects in graphical applications.",
      "description_length": 220,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Main",
      "description": "Provides functions to control application lifecycle, including initializing the environment, modifying command-line arguments, and managing event loops. Works with system time, version tuples, and Glib main loop references. Used to start and quit the application, retrieve version information, and access current event timestamps.",
      "description_length": 330,
      "index": 333,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMain.Grab",
      "description": "Adds and removes widgets from a focused container, tracking the current widget in use. Operates on Gtk.obj instances tagged with the `widget` variant. Used to manage dynamic UI elements like form fields or tab content.",
      "description_length": 218,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Event",
      "description": "Returns the current system time as an integer, retrieves the current GTK event, extracts the widget from a GTK event, and propagates an event to a widget. Operates with time values, GTK events, and widget objects. Used to handle real-time event processing and widget interaction in GUI applications.",
      "description_length": 299,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMain.Rc",
      "description": "Adds a default configuration file path and parses either a file or a string to load configuration data. Operates on strings representing file paths and configuration content. Used to initialize and load settings from a specified file or inline string.",
      "description_length": 251,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Gc_custom",
      "description": "Sets the garbage collection speed to a specified integer value and retrieves the current speed. Operates on integer values representing collection efficiency levels. Used to fine-tune memory management performance in applications with specific timing constraints.",
      "description_length": 263,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps.Assistant",
      "description": "Manages event-driven interactions for a GTK assistant by binding specific signals to callback functions, enabling controlled application flow during user actions. Key operations include connecting handlers for events such as applying, canceling, or preparing the assistant. Data types include GTK signal identifiers and unit-returning functions. Examples include executing validation before page transitions or saving state upon cancellation.",
      "description_length": 442,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.PrivateProps",
      "description": "Provides access to object properties for labeling, titling, and enabling underlined text rendering. Works with GObject-based objects and string or boolean values. Used to customize UI elements with dynamic labels and formatting options.",
      "description_length": 236,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Button",
      "description": "Configures and manages button widgets with properties for visual and behavioral settings, including text, images, alignment, and styling, while handling interaction events like clicks and hovers to trigger custom actions. Key data types include GTK button objects, position markers, and boolean flags, with operations for setting labels, images, and event handlers. It enables tasks such as adding icons to buttons, adjusting padding, and defining actions for mouse presses. Examples include creating a button with a tooltip that changes color on hover or executing a function when the button is clicked.",
      "description_length": 604,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ToggleButton",
      "description": "Controls the active state, visual indicators, and inconsistency flag of GTK toggle buttons, synchronizing their behavior with boolean values and GUI signals. Supports state transitions via signal handlers, enabling on/off toggling in response to user interactions. Operations include updating visual feedback, managing state changes, and handling callback execution. Examples include switching between active/inactive visuals and ensuring consistent state representation across UI elements.",
      "description_length": 490,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.RadioButton",
      "description": "Manages groups of GTK radio buttons, enforcing that only one option can be selected at a time. It handles the creation and coordination of radio button sets, using object references to track selections. Operations include adding buttons to a group, retrieving the currently selected button, and updating the group state. This enables the construction of interactive UI elements like yes/no choices or multiple-choice options.",
      "description_length": 425,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ColorButton",
      "description": "Manages color selection and display through a button widget, exposing properties like color value, alpha channel, and editor visibility. Supports Gdk.color, Gdk.rgba, and boolean flags for dynamic UI updates. Triggers callbacks on color selection, enabling real-time color customization in graphical applications. Allows setting and retrieving color values, controlling UI elements, and responding to user interactions.",
      "description_length": 419,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.FontButton",
      "description": "Controls font selection through properties that adjust widget settings like font name, size, and style, while enabling interactive updates via event signals. Supports GTK+ widgets with methods to access and modify display attributes and bind callbacks to user actions. Allows developers to create dynamic font dialogs that respond to user input and maintain custom configurations. Example uses include updating text rendering in real time or validating font choices against application constraints.",
      "description_length": 498,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem",
      "description": "Controls the visibility and prioritization of interface elements by evaluating boolean flags for horizontal and vertical display and importance levels. Operates on objects marked as `toolitem`, returning values that influence layout and user interaction. Allows developers to dynamically adjust UI element behavior based on application state. For example, hide a tool item in a compact view or elevate its priority in a specialized mode.",
      "description_length": 437,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem",
      "description": "Controls the visibility of a separator in a toolbar using a boolean property, integrated with GTK+ UI components. The core data type is a boolean, with operations to set and retrieve the visibility state. It enables dynamic UI adjustments, such as hiding a separator when a specific feature is disabled. This allows for responsive toolbar layouts that adapt to user interactions or application conditions.",
      "description_length": 405,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ToolButton",
      "description": "Manages tool button properties and event handling, exposing icon and label widgets, stock IDs, and underline flags for visual customization, while enabling click actions through callback functions. Supports direct manipulation of GTK+ widgets to adjust appearance and bind user interactions to application logic. Allows setting icons, labels, and behavior dynamically during runtime. Example uses include updating button labels based on user input or displaying confirmation dialogs on click.",
      "description_length": 492,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton",
      "description": "Manages UI elements that switch between two states, triggering defined actions on each transition. Tracks the current state and applies associated logic through signal handling. Supports custom behavior by linking toggle events to user-defined functions. Can control visibility, enable features, or update application state based on user interaction.",
      "description_length": 350,
      "index": 348,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton",
      "description": "Manages groups of GTK+ radio tool buttons, enforcing mutual exclusivity in selection. It handles properties and interactions between buttons, ensuring only one remains active at a time. Operations include adding buttons to a group, checking the currently selected button, and triggering actions based on selection changes. This enables the creation of toolbars with coordinated radio button behavior, such as switching between modes or options.",
      "description_length": 444,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton",
      "description": "Manages interactions between tool buttons and their associated menus in a GTK interface, allowing dynamic access and modification of context menus. It handles GTK's menu and object types, enabling programmatic control over UI elements. Operations include retrieving, setting, and manipulating menu properties through property accessors. This enables developers to customize toolbar behavior at runtime, such as changing associated actions or menu content.",
      "description_length": 455,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar",
      "description": "Controls toolbar appearance and interaction through properties and signals, enabling customization of visual elements and user-driven behavior. Supports icon size adjustment, style changes, and focus navigation, with access to GTK+ enumeration and event types. Handles context menu activation and direction-based input through event-driven callbacks. Allows developers to create responsive toolbars that adapt to user actions and interface requirements.",
      "description_length": 453,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton",
      "description": "Retrieves and manipulates URI data from UI elements using property accessors and binds click events to trigger specific actions. Exposes a string-based interface for extracting links and a callback mechanism for handling user interactions. Supports direct navigation to URLs or execution of commands upon clicking UI elements. Integrates seamlessly with GTK+ widgets for dynamic, interactive application behavior.",
      "description_length": 413,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.SizeGroup",
      "description": "The module provides a mechanism for grouping elements based on size constraints, enabling coordinated sizing across multiple components. It includes a `t` type representing a size group and operations like `add`, `remove`, and `update` to manage contained elements. Functions such as `get_size` and `set_size` allow querying and modifying group dimensions. This supports layout management in user interfaces by ensuring consistent sizing behavior.",
      "description_length": 447,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Main",
      "description": "Initializes the GTK environment, sets the locale if enabled, and returns the locale name. Runs the main event loop until explicitly quit, and provides a function to terminate the loop. Retrieves the GTK version as a tuple of major, minor, and micro numbers.",
      "description_length": 257,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Grab",
      "description": "Manages a collection of GUI widgets, allowing addition, removal, and retrieval of the currently active widget. It operates on `GObj.widget` instances, which represent graphical elements in a user interface. Used to track and manipulate the focused or selected component during user interactions.",
      "description_length": 295,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Event",
      "description": "Returns the current time as an int32 or GDK_CURRENT_TIME, and retrieves the current GdkEvent.any object. Extracts a Gtk.widget from a Gdk event, and propagates an event to a widget. Used to handle user interactions and event flow in GTK applications.",
      "description_length": 250,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Rc",
      "description": "Adds a file path to a collection of default resources, ensuring it is included in subsequent resource lookups. Operates on string-based file paths and maintains an internal registry of defaults. Used to pre-configure commonly accessed configuration or data files during initialization.",
      "description_length": 285,
      "index": 357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Timeout",
      "description": "Adds a timed callback that executes after a specified number of milliseconds, returning a unique identifier for managing the timeout. Removes a previously added timeout using its identifier. Operates with integer millisecond values and timeout identifiers from the Glib module. Used to schedule and cancel periodic or one-time actions in event-driven applications.",
      "description_length": 364,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Idle",
      "description": "Provides functions to schedule and manage idle callbacks, using an integer priority and a function that returns a boolean to determine continuation. Operates with the `id` type, which wraps Glib's idle identifier. Used to register background tasks that execute when the application is idle, such as periodic updates or low-priority computations.",
      "description_length": 345,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Io",
      "description": "Provides functions to manage I/O channels, including reading data with `read` and `read_chars`, and setting up event watchers with `add_watch` and `remove`. Operates on Unix file descriptors, custom channel types, and condition lists to handle asynchronous I/O events. Used to monitor socket activity and respond to data availability or write readiness in real-time applications.",
      "description_length": 379,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Gc_custom",
      "description": "Controls the rate at which custom block allocations influence garbage collection cycles by adjusting a speed parameter between 0 and 100. Retrieves the current speed setting used for determining allocation impact on GC. Used to fine-tune memory management behavior in applications with high custom block usage.",
      "description_length": 310,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.ToggleButton",
      "description": "provides a framework for managing toggle states through a set of predefined operations includes a state type representing on/off values and functions to switch, query, and reset the state allows developers to integrate toggle behavior into user interfaces with simple API calls example uses include controlling UI elements like switches or checkboxes based on user input",
      "description_length": 370,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.RadioButton",
      "description": "provides a framework for managing radio button interactions through a set of related components includes type definitions for state management and event handling supports operations such as setting selected options and retrieving current selections can be used to create interactive forms where only one option is selectable at a time",
      "description_length": 334,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "lablgtk3",
      "description": "Handles C-stub compilation for lablgtk using Dune, managing OPAM package structures for each C library. Processes Dune configuration files to automate build steps and ensure reproducibility. Facilitates release workflows by isolating dependencies per C library.",
      "description_length": 261,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps",
      "description": "provides property-based control over GUI elements, enabling dynamic manipulation of name, sensitivity, visibility, and action states through GObject integration. It supports boolean and string properties for UI adjustments, signal binding for event-driven interactions, and state transitions via radio buttons and action groups. Operations include hiding widgets, updating labels, and triggering callbacks on user input. Examples include disabling a menu item when a feature is inactive or updating a data model when a radio button is selected.",
      "description_length": 544,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GBuilder",
      "description": "Creates a GObject instance with a specified type, enabling interaction with GTK+ widgets through a unified interface. Works with GTK+ object types and their associated properties. Used to construct and manipulate GUI elements like buttons and labels programmatically.",
      "description_length": 267,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GPack",
      "description": "Provides methods to manage child widgets within a notebook interface, including adding, removing, and reordering tabs. Works with Gtk.Widget.t and Gtk.Notebook.page structures to manipulate tab content and properties. Enables dynamic interface updates by allowing programmatic control over tab visibility and positioning.",
      "description_length": 321,
      "index": 367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GEdit",
      "description": "Handles text input and modification in a single-line entry field, offering methods to retrieve, set, and manipulate the entered string. Works with UTF-8 encoded strings and cursor positions, supporting input validation and event handling. Used to implement user-driven data entry in forms or search bars.",
      "description_length": 304,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps",
      "description": "Controls layout and positioning of GTK widgets through a range of properties and data types, including spacing, orientation, size groups, and container-specific configurations. It enables precise manipulation of grids, boxes, tables, panes, and stacks, allowing dynamic adjustments to element placement, sizing, and visibility. Operations include setting uniform sizing, adjusting split positions, positioning widgets absolutely, and managing notebook pages or stacked views. Examples include creating responsive grids, reordering tabs, or dynamically resizing scrollable content.",
      "description_length": 580,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gtk",
      "description": "manages UI configuration, styling, and state through type aliases and enums, enabling control over layout, interaction, and component behavior. It supports operations like setting alignment, defining selection modes, and configuring dialog options. Users can customize toolbar actions, adjust resize policies, and manage file chooser properties. Examples include setting a widget's expand flag, defining a tree view's selection mode, or adjusting a dialog's response sensitivity.",
      "description_length": 479,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GButton",
      "description": "Provides methods to create and manipulate button widgets, including accessing the underlying GTK object. Works with GTK button instances and their associated properties. Used to integrate clickable UI elements into applications, such as triggering actions on user input.",
      "description_length": 270,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GPango",
      "description": "Provides access to Pango context objects, enabling text rendering and layout calculations. Works with Pango context data structures to manage font descriptions and text shaping. Used to initialize text rendering environments in graphical applications.",
      "description_length": 251,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps",
      "description": "Controls range and scale widget behavior, appearance, and interaction through property manipulation, including inversion, adjustment, and value formatting. Manages scrollbars and progress bars with dynamic updates, real-time feedback, and UI synchronization. Supports float-based operations, boolean toggling, and GObject integration for precise control. Examples include adjusting slider bounds, formatting scale labels, and updating progress bars in response to user input.",
      "description_length": 475,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GWindow",
      "description": "Provides methods to interact with GTK dialog windows, including object manipulation and event handling. Works with Gtk.dialog type and associated GUI elements. Used to create and manage modal dialogs for user input and confirmation prompts.",
      "description_length": 240,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkObject",
      "description": "Provides methods to cast objects to specific types, reference and sink objects for memory management, and create instances from class names and parameters. Works with GObject-based objects and parameter lists. Used to instantiate and manage GTK objects with precise type handling and lifecycle control.",
      "description_length": 302,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GData",
      "description": "Handles adjustments for scrollable widgets with methods to retrieve and set values, upper bounds, page sizes, and step increments. Operates on numeric types and provides precise control over scrollable content positioning. Used to dynamically update scroll positions in list views or text editors.",
      "description_length": 297,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps",
      "description": "Manages GUI layout and styling through alignment, adjustment, and positioning controls, with support for scroll behavior, widget embedding, and visual customization. Key data types include Gtk.adjustment, Gtk.obj, Gdk.screen, and GtkEnums.shadow_type, enabling operations like setting widget margins, configuring scrollbars, and adjusting frame appearances. It allows precise control over widget placement, spacing, and interaction, such as centering elements, embedding buttons in frames, or managing scroll adjustments. Examples include fine-tuning a window's layout, applying shadow effects to containers, and handling dynamic widget additions in a container.",
      "description_length": 662,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu",
      "description": "provides a framework for building and managing menu structures, including methods to create and manipulate radio menu items with group associations. it includes types for menu items, selections, and operations to navigate and process user input. users can define custom menus, handle choices, and integrate with external commands, such as generating a main menu with suboptions. it supports interactive graphical and command-line interfaces through structured menu management.",
      "description_length": 476,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkButtonProps",
      "description": "Provides methods to manipulate properties of button-like widgets, including accessing the underlying GObject. Works with Gobject.obj and specific button types such as `toolbutton`. Used to customize button behavior and appearance in GTK interfaces.",
      "description_length": 248,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PangoEnums",
      "description": "Provides conversion functions between Pango enum values and their string representations. Works with specific types such as style, weight, variant, stretch, underline, wrap_mode, and ellipsize_mode. Used to serialize or deserialize Pango formatting options in text rendering pipelines.",
      "description_length": 285,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpointer",
      "description": "The module provides direct memory manipulation via operations such as peeking, poking, and subregion extraction, enabling interaction with C-compatible data structures like bytes, bigarrays, and memory regions. It supports unsafe byte-level access and conversions between data representations, particularly useful for tasks requiring precise control over binary data or integration with C libraries. Specific use cases include efficient memory copying, binary format parsing, and low-level data transformation.",
      "description_length": 510,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkBinProps",
      "description": "Provides methods to manipulate and query properties of GTK container widgets, including retrieving the underlying GObject. Works with GTK widget types such as `aspectframe` and related container structures. Used to access and modify layout and sizing attributes during GUI construction.",
      "description_length": 286,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkThread",
      "description": "Manages GTK main loops in threaded environments, enabling safe execution of GUI operations from multiple threads. Provides functions to start a GUI thread, schedule synchronous and asynchronous tasks, and control message processing. Ensures thread-safe interaction with GTK by enforcing main thread execution for UI updates and handling busy-waiting configurations.",
      "description_length": 365,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GAction",
      "description": "Provides methods to create and manipulate toggleable actions in GTK, including handling state changes and signal connections. Works with GTK's internal representation of actions, specifically toggle actions that can be checked or unchecked. Used to implement menu items or toolbar buttons that reflect a boolean state, such as \"bold\" or \"italic\" in a text editor.",
      "description_length": 363,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainers",
      "description": "manages containerized data with operations for adding, finding, and iterating over elements. It defines a `container` type and supports sequential processing and state tracking. Users can build registries or manage dynamic data sets. Examples include maintaining a list of active sessions or organizing hierarchical data structures.",
      "description_length": 332,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject",
      "description": "Provides functions for type management, value handling, closure manipulation, type conversion, and property control in GObject-based systems. It works with types like `g_type`, `g_value`, and `g_closure`, enabling dynamic type registration, value transformation, argument inspection, and property updates. Operations include checking type relationships, converting between OCaml and GObject types, and managing object properties at runtime. Examples include registering new types, handling function arguments in bindings, and updating UI elements via property changes.",
      "description_length": 568,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GAssistant",
      "description": "Provides methods to create and manage a multi-step dialog interface, including adding pages, navigating between them, and handling user input. Works with Gtk.Widget and Gtk.Builder to construct and manipulate the dialog structure. Used to guide users through complex workflows like form submissions or configuration setups.",
      "description_length": 323,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps",
      "description": "combines text property management, content manipulation, and event handling for GTK text widgets. It exposes types like `Gdk.rgba`, `int`, `bool`, and `string` for formatting, along with operations to modify text, manage marks, and track changes. Users can adjust indentation, insert images, handle clipboard actions, and respond to formatting events in real time. Examples include dynamically updating text color on input or adjusting layout when tags are modified.",
      "description_length": 466,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent",
      "description": "Provides methods to convert values into various event types and extract specific properties from event records, including positional data, timing, visibility, scroll deltas, key symbols, device information, and state changes. Supports operations on expose, visibility, motion, input, scroll, keyboard, cross-window, focus, configuration, property, selection, proximity, setting, and window state events. Enables precise tracking of user interactions, window behavior, and input device activity in graphical applications. Examples include calculating redraw regions, detecting window visibility, tracking mouse movements, processing scroll input, and handling keyboard events.",
      "description_length": 675,
      "index": 389,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkText",
      "description": "provides navigation, inspection, and manipulation of `Gtk.text_iter` objects, enabling precise control over text buffers through character, line, word, and sentence-level movements. It supports retrieving text content, tags, marks, and validating positions, with capabilities for searching, comparing iterators, and handling visible text segments. This module allows for granular control in text processing, formatting, and UI interactions. Examples include moving an iterator to the start of a line, extracting selected text, or checking if an iterator is within a specific range.",
      "description_length": 581,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile",
      "description": "Manages file filter configurations for GTK applications by defining criteria such as MIME types, patterns, and custom logic. Supports creating and manipulating filter objects to restrict file selections in dialogs. Examples include limiting choices to image files or specific extensions. No additional functionality is provided by other child modules.",
      "description_length": 351,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow",
      "description": "The module offers a foundation for dialog management, including a type for representing dialog states and operations to create, update, and query these states. It enables tasks such as initializing a dialog and checking its current status. No other functional capabilities are available beyond this limited set. Other child modules contribute no meaningful functionality or data structures.",
      "description_length": 390,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEnums",
      "description": "The module defines enumerated types for graphical and input-related operations, including event masks, window attributes, and device states. It works with types such as event configurations, window hints, and rendering parameters to manage GUI elements and input handling, with use cases like configuring window decorations, handling input events, and adjusting graphical properties in a GUI framework.",
      "description_length": 402,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps",
      "description": "Manages dynamic translation contexts for UI elements through a property that accepts a variant type containing a builder and a string, enabling runtime localization adjustments. Supports GObject-based objects and string literals to set or query translation domains, allowing widgets to switch language sets based on user preferences. The module provides a mechanism to associate specific UI strings with their respective translation domains. For example, it can be used to update a button's label in real time when the user changes the application's language.",
      "description_length": 559,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gaux",
      "description": "Provides functions to handle optional values by applying a function only if the value is present, mapping over options, and retrieving a default value when the option is absent. Works with `option` types and transforms them using function application and fallback logic. Used to safely execute operations on potentially missing data without explicit pattern matching.",
      "description_length": 367,
      "index": 395,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkPackProps",
      "description": "Provides methods to manipulate and query properties of grid-based layout elements in a GUI framework. Works with objects tagged as `grid` and returns their underlying Gobject representation. Used to access and modify layout parameters during dynamic interface construction.",
      "description_length": 273,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBase",
      "description": "Manages GObject interactions, tooltip customization, clipboard operations, and drag-and-drop functionality for GUI elements. Provides methods to cast objects, handle events, manipulate clipboard data, and enable data transfer between applications. Supports dynamic type checking, tooltip formatting, and drag-and-drop interactions with visual feedback. Examples include copying text to the clipboard, displaying rich tooltips, and implementing custom data exchange between widgets.",
      "description_length": 481,
      "index": 397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkFileProps",
      "description": "Provides methods to interact with file properties through a file chooser widget, including retrieving and manipulating file metadata. Works with Gobject objects and file selection interfaces. Used to extract file paths and properties during user-driven file operations.",
      "description_length": 269,
      "index": 398,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData",
      "description": "handles key accelerators, style customization, CSS injection, and configuration prioritization, integrating keyboard input management with visual and layout controls. it operates on types such as key symbols, modifier masks, `Gtk.style`, `Gdk.color`, and CSS providers, enabling actions like setting widget colors, defining shortcut mappings, and applying dynamic styles. it allows for runtime modification of accelerator keys, persistent storage of shortcut configurations, and controlled application of CSS and theme settings. examples include changing widget background colors, updating key bindings from file data, and injecting custom CSS to alter UI appearance.",
      "description_length": 667,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps",
      "description": "Provides property access and manipulation for visual and behavioral aspects of GTK widgets, including shadow types, alignment, padding, text formatting, icon display, color selection, font previews, status bar styling, and orientation control. Key data types include enum values, GdkPixbuf.pixbuf, Gtk.icon_set, Gdk.color, and GtkEnums.orientation, with operations for querying, setting, and responding to changes. Examples include dynamically adjusting widget shadows, centering UI elements, customizing text display, updating status bar borders, and handling date selections. Supports real-time UI updates and interactive element customization through signals and property bindings.",
      "description_length": 684,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps",
      "description": "Provides tools for manipulating GTK widget properties, geometry, and event handling through a set of specialized functions. It includes operations for extracting and adjusting rectangle data, managing opacity, casting GObject instances, controlling scrollable parameters, and handling dialog and window events. Functions enable dynamic layout changes, real-time UI updates, and interaction with embedded components. Examples include adjusting widget placement, modifying transparency, and responding to scroll or orientation changes.",
      "description_length": 533,
      "index": 401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GBin",
      "description": "Provides methods to create and manipulate alignment properties for GTK widgets, including setting padding and expansion factors. Works with Gtk.alignment objects and associated properties. Used to control widget positioning and sizing within a container.",
      "description_length": 254,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GToolbox",
      "description": "Provides functions to construct and display interactive UI elements such as menus, dialog boxes, and input forms. Operates with GTK+ window skeletons, menu entries, key combinations, and string-based user inputs. Used to create context menus, confirmation dialogs, and input prompts with customizable buttons and keyboard shortcuts.",
      "description_length": 332,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8",
      "description": "Handles UTF-8 validation and error reporting, ensuring correct decoding of text by identifying and responding to malformed sequences. It defines an error type to represent invalid UTF-8 data and provides functions to raise exceptions when invalid input is encountered. This enables precise control over text processing by enforcing strict validation rules. For example, it can detect invalid byte sequences in a string and trigger appropriate error handling.",
      "description_length": 458,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMisc",
      "description": "Provides functions for working with GTK objects, including type-safe casting and manipulation of widget references. Operates on GTK widget types such as labels, buttons, and containers. Used to safely interact with UI elements in GTK-based applications.",
      "description_length": 253,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree",
      "description": "Manages hierarchical data structures through tree paths, iterators, and row references, enabling navigation, modification, and dynamic updates in GTK interfaces. Core types include tree paths, row references, iterators, and node structures, with operations for insertion, traversal, and validation. Examples include building file system explorers, tracking selected rows in tree views, and customizing column layouts for data display. Supports advanced interactions like drag-and-drop, tooltips, and cell renderer management for rich UI experiences.",
      "description_length": 549,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEnums",
      "description": "The module provides enumeration types for UI configuration constants in GTK, such as alignment options, text directions, and widget states, enabling precise control over graphical elements. It includes type-safe enums for settings like shadows, toolbar styles, and input purposes, used to customize widget behavior and appearance in applications. Specific use cases involve defining dialog behaviors, layout adjustments, and interaction patterns through predefined, named constants.",
      "description_length": 482,
      "index": 407,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEdit",
      "description": "provides a framework for extending functionality through empty modules that serve as placeholders. no data types, operations, or computations are available within its structure. it allows for the creation of empty containers that can be later populated with logic or data. developers can use it as a starting point for building custom modules without initial implementation.",
      "description_length": 374,
      "index": 408,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GFile",
      "description": "Handles file selection and path manipulation with functions to open, save, and retrieve file paths. Operates on GTK's file chooser widgets and file system paths. Used to implement file open dialogs and save-as functionality in GUI applications.",
      "description_length": 244,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock",
      "description": "Manages icon sources, sets, and item collections for GTK+ applications, enabling precise control over icon rendering and retrieval. Provides types like icon sources, icon sets, and item records, with operations to configure, add, and fetch elements. Supports dynamic icon loading, size management, and ID-based item access for UI components. Allows defining custom icons, building icon libraries, and referencing items in buttons or menus.",
      "description_length": 439,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMenu",
      "description": "Provides functions to create, manipulate, and manage menu items within a menu shell, including adding, removing, and activating items. Works with Gtk.Widget.t and Gtk.MenuShell.t to construct hierarchical menu structures. Used to build context menus and application menus with dynamic content.",
      "description_length": 293,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkContainersProps",
      "description": "Provides access to container properties through a virtual object, enabling manipulation of widget layouts and sizing. Works with GTK container types and their associated properties. Used to dynamically adjust container behavior in GUI applications, such as resizing or repositioning child widgets.",
      "description_length": 297,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GTree",
      "description": "Provides methods to manipulate tree view columns in a GTK application, including setting titles, resizing, and managing cell renderers. Works with Gtk.tree_view_column and associated cell properties. Used to customize column appearance and behavior in data-displaying tables.",
      "description_length": 275,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GText",
      "description": "Provides functions to create, manage, and apply text tags within a text buffer, including tag insertion, retrieval, and modification. Works with GtkTextTag and GtkTextBuffer structures to format text content dynamically. Used to implement rich text editing features such as bold, italic, and color highlighting in GTK-based applications.",
      "description_length": 337,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GDraw",
      "description": "Provides functions to interact with drag-and-drop contexts, including retrieving the current context and handling drag events. Works with Gdk.drag_context and related data structures for managing drag operations. Enables precise control over drag initiation and data transfer in graphical interfaces.",
      "description_length": 300,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder",
      "description": "manages incremental construction of structured data through `builder`, `state`, and `output` types, supporting operations like `add` to append elements, `reset` to restart, and `finalize` to produce the completed result. It enables step-by-step assembly of complex formats such as JSON, binary data, or code generation. Users can track build progress and modify content dynamically during the process. Tasks like constructing nested objects or streaming encoded data are efficiently handled.",
      "description_length": 491,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkPixbuf",
      "description": "The module provides functions for creating, manipulating, and transforming image data through operations like scaling, compositing, and alpha channel adjustments, working with pixel buffers and raw pixel data. It enables tasks such as image resizing, pixel-level modifications, and saving images to files or callbacks with parameters for positioning and interpolation. Use cases include processing images for display, applying transformations, and exporting with specific formatting requirements.",
      "description_length": 496,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps",
      "description": "manages GTK menu interactions through event binding, state control, and visual customization. It includes signal handlers, state queries, radio group assignments, and layout properties, enabling dynamic UI responses. Users can toggle check items, handle keyboard navigation, and adjust menubar appearance. Examples include updating application state on menu selection, synchronizing UI with settings, and customizing layout parameters.",
      "description_length": 435,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkBaseProps",
      "description": "Provides access to a window object through a virtual method, enabling interaction with GTK window components. Works with GTK's internal object system and window-specific properties. Used to retrieve and manipulate window instances in GUI applications.",
      "description_length": 251,
      "index": 419,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainersProps",
      "description": "Manages container widgets by exposing properties such as border width, child widget, and resize mode, enabling dynamic layout adjustments through addition, removal, and resizing operations. Supports focus management to control keyboard interaction within UI elements, allowing for precise control over user input flow. Operations include setting border dimensions, replacing child widgets, and modifying resize behavior to adapt layouts in real time. Examples include building resizable panels, reordering UI components, and ensuring consistent focus traversal in complex interfaces.",
      "description_length": 583,
      "index": 420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps",
      "description": "Manages hierarchical data and UI interactions in GTK+ through tree path manipulation, model properties, and cell renderer configurations. Key data types include tree paths, models, iterators, and cell renderers, with operations for dynamic updates, sorting, filtering, and event handling. It enables features like searchable tree views, editable cells, progress tracking, and interactive cell rendering. Examples include real-time data filtering, dynamic icon sizing, and responsive selection-based UI updates.",
      "description_length": 510,
      "index": 421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps",
      "description": "manages GTK widget interactions by providing tools for callback integration, property access, text and numeric input handling, and dynamic UI adjustments. It includes operations on closures, argument vectors, boolean flags, tree models, and Gtk objects, enabling tasks like frame detection, text modification, spin button control, and combobox configuration. Developers can track user input, validate entries, manage widget states, and implement auto-complete features with real-time feedback. Examples include toggling password visibility, enforcing case sensitivity, and updating dropdown selections based on user actions.",
      "description_length": 624,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps",
      "description": "Provides tools for configuring and interacting with file chooser interfaces, including advanced handling of file actions, filters, and user interactions through signals. Supports managing properties of file chooser buttons, such as title and width, for customizing the appearance of file selection dialogs. Enables features like image type filtering, file preview display, and overwrite confirmation during saves. Allows developers to extend and integrate file chooser functionality with custom UI elements and GTK+ objects.",
      "description_length": 524,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairo_pango",
      "description": "Manages font configuration and rendering through integration with Pango and Cairo, enabling control over font maps, resolution, and backend types. Supports operations on `pangofontmap` and `cairo` font maps, including creation, modification, and retrieval. Allows setting thread-local font configurations and switching between rendering backends. Can adjust font rendering settings for applications, such as changing the default font map or querying the current backend type.",
      "description_length": 475,
      "index": 424,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango",
      "description": "Manages text rendering by converting and applying font properties, handling language validation, and configuring layouts. It works with types like font_description, font_metrics, language, and layout objects to perform tasks such as adjusting text styling, resolving font configurations, and calculating text dimensions. Operations include converting scale values to floats, validating language strings, and setting paragraph alignment. It enables precise control over typographic elements in graphical applications, from font selection to layout management.",
      "description_length": 558,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GContainer",
      "description": "Provides methods to add, remove, and iterate over child widgets within a container, and to query the container's size and child alignment. Works with widget hierarchies and layout constraints defined by GTK. Used to manage the structure of dialog boxes and complex UI layouts.",
      "description_length": 276,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GUtil",
      "description": "Provides functions to manage signal disconnection in a GUI context, including a flag to control post-processing behavior. Operates on GtkSignal IDs and boolean conditions to determine disconnection logic. Used to dynamically manage event handlers during application runtime.",
      "description_length": 274,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib",
      "description": "Manages event loops, timers, and I/O operations while providing encoding, text processing, and logging capabilities. Supports scheduling one-time and periodic callbacks, handling asynchronous I/O through file descriptors, and converting between character encodings and Unicode. Offers functions to manipulate strings, validate UTF-8, and escape XML content. Processes locale settings, logs messages with custom handlers, and transforms text for internationalized applications.",
      "description_length": 476,
      "index": 428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkTextProps",
      "description": "Provides methods to manipulate text buffer properties, including retrieving and modifying text content, formatting, and cursor positions. Works with GTK text buffer objects and related data structures like tags and iterators. Used to dynamically update text content in GUI applications and apply styled formatting to specific text ranges.",
      "description_length": 338,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk",
      "description": "Provides operations for managing graphical system attributes, identifiers, and window properties through enumerated types, atoms, and X11 data structures. Supports color manipulation, rectangle handling, and screen configuration, while enabling low-level window interactions, drag-and-drop tracking, and rendering context creation. Functions include converting modifier states, retrieving visual properties, and flushing output buffers. Examples include configuring window hints, customizing cursors, and managing clipboard data types.",
      "description_length": 535,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkBuilderProps",
      "description": "Provides access to GTK builder objects through a virtual method, enabling dynamic property manipulation. Works with GTK widget hierarchies and property values represented as tagged variants. Used to inject or retrieve custom properties during UI construction.",
      "description_length": 259,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBin",
      "description": "Provides a framework for container widgets by defining a base structure for child elements. Includes basic types for managing content and layout within a parent container. No operational functions or data transformations are available. Suitable only for foundational setup in widget hierarchies.",
      "description_length": 295,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain",
      "description": "Manages application lifecycle, widget interactions, event handling, configuration loading, and garbage collection settings. Provides access to system time, GTK events, widget objects, configuration data, and GC speed parameters. Supports dynamic UI updates, event-driven processing, and runtime configuration adjustments. Enables precise control over application behavior, from startup to memory optimization.",
      "description_length": 409,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps",
      "description": "Manages event-driven interactions in a GTK assistant by linking signals to callback functions, controlling application flow during user actions. Key data types include GTK signal identifiers and unit-returning functions, with operations focused on connecting and triggering event handlers. Examples include validating input before page changes or saving state on cancellation. Provides structured control over assistant behavior through signal-based execution.",
      "description_length": 460,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GRange",
      "description": "Provides methods to create and manipulate a visual progress indicator, including retrieving the underlying GTK object. Works with GTK's progress bar data structure to display ongoing operations. Used to update and query progress in applications with long-running tasks.",
      "description_length": 269,
      "index": 435,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps",
      "description": "Controls GTK button properties and interactions, offering tools to customize labels, colors, fonts, visibility, and behavior. Key data types include GTK button objects, color values, font attributes, boolean flags, and menu references, with operations for setting properties, handling events, and managing state transitions. It enables dynamic UI updates such as changing button colors on hover, toggling visibility based on application state, or linking buttons to actions like opening URLs or switching between modes. Examples include creating styled buttons with icons, managing radio button groups, and responding to user clicks with custom logic.",
      "description_length": 651,
      "index": 436,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack",
      "description": "The module offers a mechanism for grouping elements based on size constraints, enabling coordinated sizing across multiple components. It defines a `t` type for size groups and provides operations like `add`, `remove`, `update`, `get_size`, and `set_size` to manage and query group dimensions. This supports consistent layout behavior in user interfaces by aligning component sizes. For example, it can ensure buttons in a dialog maintain uniform width regardless of content.",
      "description_length": 475,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain",
      "description": "Manages application lifecycle, event handling, and resource configuration for GTK-based interfaces. Provides access to GTK version, event data, and widget focus tracking, while enabling timed and idle callbacks, I/O monitoring, and garbage collection tuning. Operates on widgets, file paths, time values, and identifiers to control application flow and user interaction. Supports scheduling delays, handling user input, and optimizing memory usage in real-time GUI applications.",
      "description_length": 478,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton",
      "description": "provides a framework for managing interactive UI elements with toggle and radio button functionality. includes a state type for on/off values and operations to switch, query, and reset states, along with types and functions for handling single-select radio button groups. developers can use these features to build responsive interfaces with switches, checkboxes, and single-choice forms. examples include updating UI elements based on user input or capturing selected options in a form.",
      "description_length": 487,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkMiscProps",
      "description": "Provides access to the underlying GObject of a calendar widget, enabling direct manipulation of its properties. Works with the `Gobject.obj` type, specifically for calendar instances. Used to customize or inspect calendar behavior at a low level, such as adjusting date formatting or event handling.",
      "description_length": 299,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkMenuProps",
      "description": "Sets and retrieves properties on GTK objects, and converts properties to parameters for use in widget construction. Works with GObject properties, objects, and parameters. Used to dynamically adjust menu item labels and icons during runtime.",
      "description_length": 241,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkKeysyms",
      "description": "The module provides key symbol constants for handling keyboard input across diverse use cases, including standard function keys, modifiers, international scripts (Japanese, Arabic, Cyrillic, Thai), special characters, and accessibility features like Braille. It operates on `Gdk.keysym` values and Unicode representations, enabling precise mapping of keyboard events to symbols for text input, navigation, and system controls. Specific applications include supporting multilingual input methods, multimedia shortcuts, hardware control keys, and specialized layouts for non-Latin alphabets and technical notation.",
      "description_length": 612,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkSignal",
      "description": "The module provides signal handling and emission mechanisms for GObject-based objects, enabling operations like connecting, disconnecting, and emitting signals while managing callbacks, closures, and data conversions. It supports complex scenarios such as exception-safe callback execution, argument marshaling, and signature-specific signal emission, tailored for event-driven programming in GUI frameworks. Use cases include building responsive user interfaces and ensuring robust event propagation with customizable signal behaviors.",
      "description_length": 536,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkRangeProps",
      "description": "Provides methods to manipulate and query properties of range-based widgets, such as progress bars, using GObject integration. Works with Gobject.obj and specific widget types like `progressbar`. Enables dynamic adjustment of values, ranges, and styling during runtime.",
      "description_length": 268,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkEditProps",
      "description": "Provides methods to interact with entry widget properties, including retrieving the underlying GObject. Works with GTK entry widgets and their associated properties. Used to access and manipulate text input fields in GUI applications.",
      "description_length": 234,
      "index": 445,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 597,
    "meaningful_modules": 446,
    "filtered_empty_modules": 151,
    "retention_rate": 0.7470686767169179
  },
  "statistics": {
    "max_description_length": 684,
    "min_description_length": 179,
    "avg_description_length": 361.84753363228697,
    "embedding_file_size_mb": 1.6207361221313477
  }
}