{
  "package": "lablgtk3",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 468,
  "creation_timestamp": "2025-07-16T00:32:40.633267",
  "modules": [
    {
      "module_path": "GtkBase.Widget.Signals.Event",
      "library": "lablgtk3",
      "description": "This module provides event handling operations for GUI components, focusing on user interaction and window management events. It works with widget instances and GdkEvent subtypes to enable callbacks for actions like button presses, key inputs, window resizing, selection requests, proximity changes, and visibility updates. Specific use cases include implementing custom input responses, managing UI state during window transitions, and controlling widget behavior based on environmental events.",
      "description_length": 495,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTag.P",
      "library": "lablgtk3",
      "description": "This module configures text appearance, layout, and interactivity through properties like color, font styling, margins, and text flow controls for GTK text tags. It operates on GObject-based `TextTag` objects, utilizing data types such as RGBA colors, numeric dimensions, boolean flags, and enumerations to define attributes like justification or wrap modes. These capabilities are commonly used in rich text editors, document viewers, or UI components requiring dynamic text formatting and visual customization.",
      "description_length": 512,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.FontButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring font selection buttons, including font name, size visibility, style visibility, dialog title, and whether to use font or size settings. It works with `GObject` instances that support font button functionality, such as `GtkFontButton`. Concrete use cases include customizing font selection dialogs and synchronizing UI elements with font configuration settings.",
      "description_length": 407,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Misc.P",
      "library": "lablgtk3",
      "description": "This module defines properties for aligning and padding UI elements. It provides `xalign`, `yalign`, `xpad`, and `yp`ad values to control positioning and spacing. These properties are used to adjust the layout of widgets within containers in a graphical user interface.",
      "description_length": 269,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Image.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring image widgets, including setting image sources from files, icons, pixbufs, or stock items, and controlling display parameters like size and fallback behavior. It operates on objects supporting the `image` tag, such as GtkImage, and is used to dynamically adjust image content and appearance in GUI applications. Concrete use cases include loading images from disk, switching between icon themes, and setting scalable pixel sizes for responsive UIs.",
      "description_length": 503,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for the `clicked` event on a tree view column, allowing a callback function to be triggered when the column header is clicked. It operates on tree view column objects to enable interactive sorting or filtering. A concrete use case is implementing custom sorting logic in a GUI application when a user clicks a column header.",
      "description_length": 361,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.S",
      "library": "lablgtk3",
      "description": "This module defines event callbacks for managing notebook widgets in a GUI application. It supports operations like switching, selecting, and reordering notebook pages, handling page additions and removals, and responding to focus changes. These functions are used to implement dynamic tabbed interfaces with custom navigation and layout behavior.",
      "description_length": 347,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Frame.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring frame widgets, including label text, alignment, associated label widget, and shadow type. It works with frame objects and related widget types. Concrete use cases include customizing the appearance and layout of frames in GUI applications, such as setting a frame's label or adjusting its shadow style.",
      "description_length": 349,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.S",
      "library": "lablgtk3",
      "description": "This module connects signals specific to icon views, enabling responses to user interactions. It provides handlers for item activation and selection changes, working with icon view widgets and tree paths. Use it to implement actions when users click items or modify selections in an icon view interface.",
      "description_length": 303,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTagTable.S",
      "library": "lablgtk3",
      "description": "This module manages text tag events in a text buffer system. It provides signals for handling the addition, modification, and removal of text tags. These operations are used when implementing dynamic text formatting and real-time style updates in text editors or rich text interfaces.",
      "description_length": 284,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring text content, input constraints, visual appearance, and icon behavior in entry widgets. It works with `entry` objects, enabling features like cursor control, visibility settings, and icon customization through GObject properties. Specific applications include setting placeholder text for user guidance, adjusting icon tooltips and sensitivity, and managing input validation rules in graphical interfaces.",
      "description_length": 453,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring table layouts in GUI applications, including column and row counts, spacing, and homogeneity. It works with table objects and their associated integer and boolean properties. Concrete use cases include setting up grid-like UI components with consistent spacing and uniform cell sizing.",
      "description_length": 332,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry.S",
      "library": "lablgtk3",
      "description": "This module connects event handlers to input actions on text entry widgets, enabling direct user interaction responses. It supports operations like text modification, cursor movement, clipboard actions, and icon clicks through signal bindings. Use it to define behaviors for form inputs, search fields, or editable UI components.",
      "description_length": 329,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring an entry completion object, specifically setting the minimum key length required to trigger completion and associating a tree model that provides the completion data. It works with entry completion objects and tree models to enable autocompletion in text entry widgets. Concrete use cases include implementing search-as-you-type functionality in forms or interactive UI elements.",
      "description_length": 426,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager.S",
      "library": "lablgtk3",
      "description": "This module defines signals for managing UI manager events, such as action changes, widget additions, and proxy connections. It works with `uimanager` objects, `action` instances, and `widget` instances to handle dynamic UI updates and interactions. Concrete use cases include synchronizing UI elements with underlying actions, responding to activation events, and integrating custom widgets into a managed interface layout.",
      "description_length": 424,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.StackSwitcher.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring a stack switcher widget. It provides access to the `icon_size` property to set the size of icons and the `stack` property to associate the switcher with a specific stack container. It is used when building UI components that require switching between multiple pages, such as tabbed interfaces.",
      "description_length": 340,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `menu` property, which associates a dropdown menu with a menu tool button. It works with `Gtk.menu` objects and menu tool button instances. Use this property to set or retrieve the menu that appears when the tool button is clicked.",
      "description_length": 266,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring and manipulating action objects in a GUI toolkit. It provides direct access to properties like label, icon name, sensitivity, visibility, and tooltip for action instances. These properties are used to dynamically control the appearance and behavior of UI elements such as buttons and menu items.",
      "description_length": 350,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for combo box changes in a GUI application. It works with combo box widgets and their associated data models. Use it to trigger actions when a user selects a different item in a combo box.",
      "description_length": 226,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for the `changed` event, which is triggered when the active item in a radio action group changes. It works with `Gtk.radio_action` objects, allowing callbacks to respond to user selections. A concrete use case is updating the UI or application state when a user selects a different option in a radio menu or toolbar group.",
      "description_length": 360,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.HandleBox.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring handle box widgets, including handle position, snap edge, and shadow type. It works with GTK handlebox objects and their associated enums. Use it to customize docking behavior and visual appearance of movable panels in GUI applications.",
      "description_length": 283,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.Range.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring range-based UI elements, such as sliders or scrollbars, including adjustment, fill level, inversion, and stepper sensitivity. It operates on types related to `Gtk.range` and associated enums like `sensitivity_type` and `orientation`. Use it to customize the behavior and appearance of range widgets in GUI applications, such as setting bounds, controlling interaction sensitivity, or displaying progress.",
      "description_length": 451,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkContainersProps.Container.P",
      "library": "lablgtk3",
      "description": "This module defines properties for container widgets in a GUI toolkit. It provides direct access to the border width, child widget, and resize mode of a container. These properties allow configuring the layout and behavior of UI elements such as windows, boxes, or frames.",
      "description_length": 272,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring and interacting with combo box widgets. It provides direct manipulation of properties like the underlying tree model, active item index, entry visibility, and layout behavior. These properties are used to control combo box appearance and behavior in GUI applications, such as setting the number of columns or enabling text entry.",
      "description_length": 384,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring GTK status icons, including screen association, visibility, and tooltip text/markup. It works with `GObject`-based status icon instances and string values for tooltips. Concrete use cases include setting up system tray icon visibility and displaying formatted or plain text tooltips.",
      "description_length": 331,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window.P",
      "library": "lablgtk3",
      "description": "This module provides property accessors for configuring and querying window attributes such as title, size, decoration, focus behavior, icon, positioning, taskbar visibility, startup ID, parent relationships, window type, type hints, and urgency status. These functions operate on window objects to customize display behavior, manage urgency indicators, and establish hierarchical relationships in window management.",
      "description_length": 416,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon.S",
      "library": "lablgtk3",
      "description": "This module handles user interactions and property changes for status icons in a graphical interface. It provides signals for responding to icon activation, context menu display, and size adjustments. Suitable for implementing tray icon functionality with custom behavior on click, resize, or right-click events.",
      "description_length": 312,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring notebook widgets in a GUI application. It allows setting and retrieving attributes such as tab visibility, border display, page index, and layout options like tab position and scrollability. Use this module to customize the appearance and behavior of notebook containers in GTK-based interfaces.",
      "description_length": 342,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.UIManager.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring UI elements in a GTK user interface manager. It allows setting whether menus can be torn off and specifying the XML description of the UI layout. These properties are used when constructing and customizing menu bars and toolbars in GTK applications.",
      "description_length": 297,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget.P",
      "library": "lablgtk3",
      "description": "This module provides property accessors for configuring layout behavior (alignment, margins, expansion), visibility, sensitivity, and tooltip settings of GUI widgets. It operates on `Gtk.widget` and related types through typed GObject properties, enabling precise control over visual presentation and interactive behavior. Specific use cases include adjusting widget alignment in containers, setting tooltips for user guidance, and dynamically enabling or disabling UI elements based on application state.",
      "description_length": 505,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring toggle cell renderers, such as checkboxes or radio buttons, in a graphical user interface. It provides direct access to boolean properties like `activatable`, `active`, `inconsistent`, and `radio` to control the state and behavior of individual cells. These properties are used to manage user interactions and visual states in list or tree views with boolean-valued data.",
      "description_length": 418,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ToggleAction.P",
      "library": "lablgtk3",
      "description": "This module provides a property `draw_as_radio` that controls whether a toggle action is visually rendered as a radio button. It operates on objects supporting the `toggleaction` interface, typically used in GUI components like buttons. This is useful for customizing the appearance of toggle actions in toolbars or menus without changing their behavior.",
      "description_length": 354,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Socket.S",
      "library": "lablgtk3",
      "description": "This module connects to the lifecycle events of a socket widget, providing callbacks when a plug is added or removed. It works with GTK socket widgets to handle dynamic content embedding. Use this to manage UI components that are loaded or unloaded at runtime, such as external plugins or modular interface elements.",
      "description_length": 316,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.P",
      "library": "lablgtk3",
      "description": "This module provides direct access to the day, month, and year properties of a calendar widget. It allows getting and setting these date components as integer values. Useful for applications that need to manipulate or retrieve specific date fields from a calendar UI element.",
      "description_length": 275,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment.S",
      "library": "lablgtk3",
      "description": "This module connects signals to handle changes in adjustment values within GUI components. It provides `changed` and `value_changed` signals that trigger callbacks when an adjustment's configuration or current value updates. Useful for synchronizing UI elements like sliders or scrollbars with dynamic data.",
      "description_length": 307,
      "index": 34,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkTreeProps.TreeSortable.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for tracking changes to the sort column in a sortable tree structure. It works with tree models that support sorting, such as `GtkTreeStore` or `GtkListStore`. A concrete use case is updating the UI or reapplying custom sorting logic when the user clicks a column header to sort a tree view.",
      "description_length": 329,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort.P",
      "library": "lablgtk3",
      "description": "This module provides access to the underlying tree model of a sorted tree view, allowing direct manipulation and retrieval of the original, unsorted data structure. It works with tree models and their sorted wrappers, specifically handling data types like `Gtk.tree_model`. A concrete use case is when you need to interact with the source data of a sorted list or tree in a GUI application, such as retrieving the original index of a selected item.",
      "description_length": 448,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton.S",
      "library": "lablgtk3",
      "description": "This module connects user interactions with spin button widgets to custom behaviors, enabling precise numeric input handling. It supports operations like capturing value changes, validating input, and responding to wrapping events. Concrete use cases include form validation, numeric configuration controls, and interactive data entry interfaces.",
      "description_length": 346,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ColorButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring color buttons, including alpha transparency, color values, and editor visibility. It works with GObject-based color button widgets and supports setting titles and RGBA/GDK color representations. Concrete use cases include customizing color selection dialogs and synchronizing UI elements with color state in graphical applications.",
      "description_length": 378,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar.S",
      "library": "lablgtk3",
      "description": "This module defines event handlers for calendar interactions, connecting user actions like date selection, month and year navigation to callback functions. It works with calendar widgets to respond to single and double clicks on days, as well as explicit navigation between months and years. Concrete use cases include triggering UI updates or data fetches when a user selects a date or navigates through the calendar.",
      "description_length": 418,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Editable.S",
      "library": "lablgtk3",
      "description": "This module connects to signals emitted by editable widgets, allowing direct manipulation of text content. It supports tracking changes, deleting text ranges, and inserting new text at specified positions. Typical use cases include implementing custom input validation or real-time text transformation in GUI applications.",
      "description_length": 322,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTag.S",
      "library": "lablgtk3",
      "description": "Handles event signals for text tags in a GTK text buffer, such as keyboard or mouse input. Works with `texttag` objects and `GdkEvent.any` events tied to `Gtk.text_iter` positions. Useful for implementing custom behavior when users interact with tagged text regions, like clickable links or input validation.",
      "description_length": 308,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` signal of a toggle button widget, invoking a callback when the button's state changes. It works with toggle button instances and supports handling state transitions directly. Use this to implement interactive UI elements like switches or checkboxes that respond to user input.",
      "description_length": 314,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.SpinButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring a spin button widget, including adjustment, numeric input behavior, value formatting, and update policies. It works with GObject-based spin button instances and associated types like adjustments and policy enums. Concrete use cases include setting up numeric input fields with specific precision, range constraints, and user interaction behaviors in GUI applications.",
      "description_length": 414,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` event of a check menu item, invoking a callback when the item's state changes. It works with check menu items in a GTK menu structure. A concrete use case is updating application settings or UI elements in response to user selection changes in a menu.",
      "description_length": 289,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.P",
      "library": "lablgtk3",
      "description": "This module configures display and interaction behavior for hierarchical data views, supporting features like search, column reordering, grid lines, and tooltips. It operates on `treeview` objects, interacting with models, adjustments, and tree view columns. Use it to customize UI elements such as expandable rows, header visibility, and selection behavior in data grids or file browsers.",
      "description_length": 389,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ActionGroup.S",
      "library": "lablgtk3",
      "description": "This module connects and disconnects proxy widgets to actions within a group, handling activation signals. It works with action groups, actions, and widgets. Use it to manage UI elements that trigger actions and respond to their activation lifecycle.",
      "description_length": 250,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeSelection.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for tracking changes in tree selection within a GUI component. It works with tree selection objects to detect when the selected row or item in a tree view changes. A concrete use case is updating related UI elements or data displays in response to user selection changes in a hierarchical data viewer.",
      "description_length": 339,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Orientable.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting and retrieving the orientation of UI elements, such as widgets, in a graphical interface. It works with the `GtkEnums.orientation` type, which defines horizontal and vertical orientations. Concrete use cases include configuring the layout direction of containers like boxes or separators.",
      "description_length": 332,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.S",
      "library": "lablgtk3",
      "description": "This module connects the `edited` signal to handle user edits in a text cell renderer. It works with `Gtk.tree_path` and string values to identify and update specific cells. Use it to capture and apply changes made in-place within a tree view's text column.",
      "description_length": 257,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.HandleBox.S",
      "library": "lablgtk3",
      "description": "This module handles signals for when a child widget is attached or detached from a handle box container. It provides two event handlers: `child_attached` and `child_detached`, which trigger callbacks when a widget is added or removed. These signals are useful for managing dynamic UI layouts where child widgets are frequently moved or hidden.",
      "description_length": 343,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `group` property, which manages the radio button group association for a radio button widget. It works with `Gtk.radio_button` objects, allowing the retrieval or modification of the group to which a radio button belongs. This is useful when dynamically reorganizing radio button groups or querying a radio button's current group membership.",
      "description_length": 375,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `toggled` signal of a toggle tool button, invoking a callback when the button's state changes. It works with toggle tool button widgets in a GTK interface. Use it to handle actions like activating or deactivating a tool in a toolbar based on user input.",
      "description_length": 281,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.AboutDialog.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring an about dialog, such as program name, version, copyright, and license. It works with strings and GdkPixbuf for visual elements like logos. Use it to set detailed metadata and branding in an application's about window.",
      "description_length": 265,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuItem.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction with menu items by defining signals for activation events. It provides `activate` and `activate_item` signals, both triggering a function when a menu item is selected. These signals are used to bind actions to menu items, such as executing commands or updating UI state in response to user input.",
      "description_length": 333,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring combo box behavior in a GUI application. It provides boolean properties to control empty input, case sensitivity, and arrow key navigation in combo boxes. These properties are used to customize the interactive behavior of combo widgets when selecting from or entering text in a list.",
      "description_length": 330,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ToggleAction.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for toggle actions, specifically the `toggled` event. It works with GTK toggle action objects to connect callbacks that execute when the toggle state changes. Use this to respond to user interactions with toggle buttons or menu items in a GTK interface.",
      "description_length": 290,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring scale widgets, including setting the number of decimal digits displayed, controlling value drawing, indicating the origin position, and specifying the value's positional alignment. It operates on scale objects within a GUI toolkit context. Concrete use cases include customizing slider appearance and behavior in user interfaces.",
      "description_length": 376,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Paned.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring paned widgets, including position, orientation, and bounds. It works with `paned` objects to control layout behavior in GUI applications. Concrete use cases include setting the initial position of a split pane, constraining movement, and switching between horizontal and vertical layouts.",
      "description_length": 335,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame.P",
      "library": "lablgtk3",
      "description": "This module provides properties to configure aspect ratio and alignment settings for a container widget. It works with `GObject` instances that support aspect frame constraints, such as `aspectframe`. Concrete use cases include enforcing a specific aspect ratio on child widgets and adjusting their alignment within the frame.",
      "description_length": 326,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring file chooser dialogs, such as setting the action type, enabling folder creation, and controlling visibility of hidden files. It works with `filechooser` objects and associated types like `file_filter` and `widget`. Concrete use cases include customizing file selection behavior in GUI applications, such as restricting file types or enabling multi-file selection.",
      "description_length": 410,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Layout.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring layout dimensions and scroll adjustments in a GUI container. It provides direct access to horizontal and vertical adjustment objects, as well as width and height values, allowing precise control over scrollable and resizable layout components. Concrete use cases include setting up scrollable text areas, dynamic window resizing, and aligning UI elements with specific size constraints.",
      "description_length": 433,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring viewport adjustments and shadow type. It works with viewport objects and adjustment instances to control scrolling behavior and visual appearance. Concrete use cases include setting horizontal and vertical scroll adjustments and defining the shadow style of a viewport container.",
      "description_length": 327,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring toolbar buttons, including icon size, visibility of arrows, and toolbar style. It works with the `toolbar` object type and related enumeration types like `icon_size` and `toolbar_style`. Use it to customize the appearance and behavior of buttons within a toolbar interface.",
      "description_length": 320,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.FontButton.S",
      "library": "lablgtk3",
      "description": "This module connects to the `font_set` signal of a font button widget, which triggers when a user selects a new font. It works with GTK's font button objects and callback functions to handle font selection events. A concrete use case is updating a text editor's display font in real time when a user picks a new font from a dialog.",
      "description_length": 331,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuShell.S",
      "library": "lablgtk3",
      "description": "This module connects signals to handle menu navigation and activation, such as `activate_current`, `cycle_focus`, and `move_current`. It operates on menu shell widgets, responding to user input like keyboard navigation and mouse selection. Use it to implement custom menu behavior in GUI applications, such as context menus or dropdowns with specialized interaction logic.",
      "description_length": 372,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.S",
      "library": "lablgtk3",
      "description": "Handles link activation events for link buttons, providing a signal callback that triggers when a link is clicked. Works with `linkbutton` objects in the GTK framework. Enables custom actions when hyperlinks are activated, such as opening URLs or navigating within an application.",
      "description_length": 280,
      "index": 66,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkTextProps.TextBuffer.P",
      "library": "lablgtk3",
      "description": "This module provides properties for interacting with a text buffer's tag table, cursor position, and selection state. It works with `textbuffer` objects and exposes direct access to key attributes for text manipulation and UI feedback. Concrete use cases include applying text styles via tags, tracking cursor movement, and implementing selection-based actions like copy or delete.",
      "description_length": 381,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout and behavior of icon views, such as spacing between items, text and pixbuf columns, selection mode, and orientation. It works with `Gtk.tree_model` and supports properties that control visual aspects like margins, item width, and row/column spacing. Concrete use cases include setting up grid-like displays of icons with customizable appearance and interaction modes.",
      "description_length": 425,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Window.S",
      "library": "lablgtk3",
      "description": "This module connects signal handlers to window events such as activation, focus changes, key input, and widget focus setting. It works with GTK window objects and related event structures like `GdkEvent.any` and `GtkEnums.direction_type`. Use this to manage window-level interactions, including setting default actions, handling keyboard navigation, and responding to focus shifts.",
      "description_length": 381,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView.P",
      "library": "lablgtk3",
      "description": "This module provides operations to configure text formatting (justification, wrapping), input behaviors (editability, tab handling), and layout properties (margins, scrolling) for GTK text widgets. It works with `textview` objects, `adjustment` for scroll control, `text_buffer` for content management, and GTK enums for hinting. These functions are used to customize rich text presentation, implement dynamic layout adjustments, and control user interaction in text-heavy interfaces like document editors or log viewers.",
      "description_length": 521,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction.P",
      "library": "lablgtk3",
      "description": "This module defines properties for managing a radio action's group and its integer value. It allows setting and retrieving the group of related radio actions and the specific integer identifier for the action. These properties are used to implement grouped radio button behavior in user interfaces.",
      "description_length": 298,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuBar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout and appearance of a menu bar, including child packing direction, overall packing direction, internal padding, and shadow type. It operates on types that inherit from `menubar`, allowing direct manipulation of visual and structural behavior. These properties are used to customize how the menu bar arranges its children and renders its borders in a graphical user interface.",
      "description_length": 431,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction and styling events for toolbar widgets. It provides callbacks for handling style changes, focus navigation, and context menu popups. Useful for implementing custom toolbar behavior in GUI applications.",
      "description_length": 238,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Button.S",
      "library": "lablgtk3",
      "description": "This module defines event signals for button interactions, including activation, click, hover, and press/release actions. It works with GTK button objects and callback functions to handle user input. Concrete use cases include attaching actions to button events in GUI applications, such as form submission on click or visual feedback on hover.",
      "description_length": 344,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem.P",
      "library": "lablgtk3",
      "description": "This module defines properties for tool item widgets, including `is_important`, `visible_horizontal`, and `visible_vertical`. It works with objects of type `[> `toolitem ]` and provides direct access to their boolean properties. These properties control the display and significance of tool items in horizontal and vertical orientations within a GUI.",
      "description_length": 350,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range.S",
      "library": "lablgtk3",
      "description": "This module handles user interaction and value updates for range-based UI elements like sliders and scrollbars. It provides signals for adjusting bounds, moving the slider, changing values with specific scroll types, and responding to value changes. These operations directly manipulate and react to the state of range widgets in a graphical interface.",
      "description_length": 352,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView.S",
      "library": "lablgtk3",
      "description": "This module defines signal handlers for user interactions with tree views, such as row expansion, selection changes, and cursor movement. It operates on tree paths, iterators, and view columns, enabling direct manipulation of hierarchical data displays. Concrete use cases include handling row activation to open child nodes, managing selection states during keyboard navigation, and triggering interactive searches within a tree view.",
      "description_length": 435,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Box.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring box containers in a GUI toolkit. It provides direct access to the homogeneous, spacing, and orientation attributes of a box widget. These properties control layout behavior, such as element sizing and direction, and are used when constructing or modifying user interfaces with box-based layouts.",
      "description_length": 342,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Separator.P",
      "library": "lablgtk3",
      "description": "This module defines a property for setting and retrieving the orientation of a separator widget, such as horizontal or vertical. It works with objects that support the `separator` tag and the `orientation` enumeration from `GtkEnums`. Useful when configuring UI layouts where directional separation is needed, like in toolbars or dialog boxes.",
      "description_length": 343,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget.Signals",
      "library": "lablgtk3",
      "description": "This module manages signal connections and event propagation for UI components, enabling callbacks on widget lifecycle events like destruction and value extraction from event data. Its child module extends this with handlers for user interactions and window events, supporting actions on button presses, resizing, and visibility changes. Together, they allow binding custom logic to both widget state and dynamic UI events, such as triggering cleanup on removal or adjusting layout on resize. Use cases include responsive input handling, dynamic UI updates, and lifecycle-aware resource management.",
      "description_length": 598,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextBuffer.S",
      "library": "lablgtk3",
      "description": "This module handles text buffer manipulation in a GUI application, providing functions to insert text and media, apply and remove formatting tags, manage user actions, and track changes. It works with text buffers, text tags, text iterators, and marks to modify and monitor document content. Concrete use cases include building rich text editors, implementing undo/redo functionality, and synchronizing document state with user interface elements.",
      "description_length": 447,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Statusbar.S",
      "library": "lablgtk3",
      "description": "This module connects to a status bar's text-popped and text-pushed signals, letting you run functions when messages are removed or added. It works with status bar widgets and string messages. Use it to track or log status bar updates in a GUI application.",
      "description_length": 255,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Invisible.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `screen` property, which retrieves the `Gdk.screen` associated with an invisible widget. It allows querying the display screen for widgets that are not visible, such as internal or placeholder components. This is useful when managing multi-screen environments or performing screen-specific rendering and configuration.",
      "description_length": 353,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooserButton.P",
      "library": "lablgtk3",
      "description": "This module provides properties for configuring a file chooser button, including setting its title and width in characters. It works with the `filechooserbutton` widget type and integer or string values. Concrete use cases include customizing the display of file selection buttons in GUI applications, such as setting the button's label or adjusting its size to fit specific layouts.",
      "description_length": 383,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.FontSelection.P",
      "library": "lablgtk3",
      "description": "This module provides direct access to the `font_name` and `preview_text` properties of a `fontselection` object. It allows getting and setting the currently selected font name and the text used to preview the font in a font selection widget. These properties are useful for synchronizing font choices with application settings or displaying custom preview text.",
      "description_length": 361,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.Menu.P",
      "library": "lablgtk3",
      "description": "This module provides access to the `tearoff_title` property, which sets or retrieves the title of a menu when it is torn off into a separate window. It operates on menu objects, specifically handling string-based titles for torn-off instances. Use this property to customize the displayed title of a detached menu in a GUI application.",
      "description_length": 335,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.ButtonBox.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting the layout style of a button box container, such as spacing and alignment behavior. It works with button box widgets and the `button_box_style` enumeration. A concrete use case is configuring the visual arrangement of buttons within a dialog or toolbar interface.",
      "description_length": 307,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Statusbar.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting and retrieving the shadow type of a status bar widget. It works with the `GtkEnums.shadow_type` enumeration and applies to objects that support the `statusbar` class. A concrete use case is customizing the visual appearance of a status bar by adjusting its shadow style.",
      "description_length": 314,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps.Builder.P",
      "library": "lablgtk3",
      "description": "This module provides a property for setting or retrieving the translation domain associated with a builder object, typically used in GUI applications for internationalization. It operates on objects that support the `Gobject.property` interface, specifically handling string values. A concrete use case is configuring UI elements to load translated text resources based on the specified domain.",
      "description_length": 394,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.P",
      "library": "lablgtk3",
      "description": "This module configures properties for a cell renderer that displays a combo box in a tree view. It allows setting the associated tree model, specifying the column that provides text for the combo items, and determining whether the combo allows manual entry. These properties are used to customize interactive cells in a tree view where users can select from predefined options or input custom values.",
      "description_length": 400,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress.P",
      "library": "lablgtk3",
      "description": "This module defines properties for a cell renderer that displays progress bars. It provides access to the `value` property for setting the numeric progress value and the `text` property for displaying optional textual information. These properties are used to customize the appearance of progress indicators in tree views.",
      "description_length": 322,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale.S",
      "library": "lablgtk3",
      "description": "This module connects a scale widget to a signal handler that formats its numeric value into a string for display. It works with float values and string outputs, typically used to customize how scale values are shown in the user interface. A concrete use case is displaying logarithmic or percentage-based values on a scale with custom labels.",
      "description_length": 342,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.StyleContext.ProviderPriority",
      "library": "lablgtk3",
      "description": "This module defines integer constants representing priority levels for style providers in a GUI toolkit. It includes specific priorities such as fallback, theme, settings, application, and user. These values determine the precedence of style data applied to UI elements, allowing precise control over styling in graphical applications.",
      "description_length": 335,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps.Assistant.S",
      "library": "lablgtk3",
      "description": "This module defines signal handlers for managing the flow of an assistant interface, connecting user actions like applying, canceling, closing, leaving, or preparing steps. It works with `GtkSignal.t` values that trigger unit functions, specifically for assistant-related events. Concrete use cases include handling navigation and state transitions in setup wizards or multi-step forms.",
      "description_length": 386,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for toggle buttons, including the state (`active`), indicator visibility (`draw_indicator`), and tri-state support (`inconsistent`). It works with `GObject` instances that inherit from `togglebutton`. These properties are used to control and query the visual and behavioral aspects of toggle buttons in GUI applications.",
      "description_length": 351,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem.P",
      "library": "lablgtk3",
      "description": "This module provides properties to manage the state of check menu items in a user interface. It handles boolean attributes for whether an item is active or in an inconsistent state. Concrete use cases include synchronizing menu item states with application logic, such as tracking enabled/disabled features or mixed selection states.",
      "description_length": 333,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring scrolled windows, including horizontal and vertical adjustments, scrollbar policies, window placement, and shadow type. It operates on `scrolledwindow` objects and associated types like `adjustment`, `policy_type`, `corner_type`, and `shadow_type`. It is used to control the visual behavior and layout of scrollable areas in GUI applications.",
      "description_length": 389,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring accelerator key handling in a cell renderer, including setting the accelerator key, mode, modifier mask, and key code. It works with integer and enumeration types to control input behavior in GUI components. Concrete use cases include customizing keyboard shortcuts directly within tree view cells or enabling user-defined key bindings in editable cell renderers.",
      "description_length": 410,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Arrow.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the type and shadow style of arrow widgets. It provides direct access to set and retrieve the `arrow_type` and `shadow_type` attributes of arrow UI elements. Useful for customizing arrow appearance in graphical interfaces, such as indicating direction or enhancing visual feedback.",
      "description_length": 328,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring tool buttons, including setting the icon, label, and stock identifier. It supports operations to customize the button's appearance and behavior, such as enabling underlined labels. These properties are applied to tool button objects, allowing direct manipulation of their visual elements and associated actions.",
      "description_length": 358,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring and manipulating tree view columns in a GUI application. It provides direct access to properties like alignment, sizing behavior, visibility, and sorting indicators, enabling precise control over column appearance and interaction. These properties are used to customize individual columns in a tree view widget, such as setting fixed widths, enabling resizing, or defining sort order for user interaction.",
      "description_length": 460,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText.P",
      "library": "lablgtk3",
      "description": "This module configures text rendering properties for cells in GTK tree views, such as font styling, color, alignment, and text wrapping behavior. It operates on `cellrenderertext` objects to customize visual appearance and interactive features like editing or truncation. Typical use cases include fine-tuning textual display in table rows, enabling rich text formatting, or adjusting layout constraints for readability in hierarchical data views.",
      "description_length": 447,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkRangeProps.ProgressBar.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring progress bar widgets, including setting the progress fraction, inversion, text visibility, pulse step, display text, and text ellipsizing. It works with `GObject`-based progress bar instances and Pango ellipsize modes. Use it to customize progress bar appearance and behavior in GUI applications.",
      "description_length": 343,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBase.Widget.Tooltip",
      "library": "lablgtk3",
      "description": "This module manages tooltip display for widgets, allowing retrieval and setting of tooltip text or Pango markup. It supports operations to enable or disable tooltips, associate custom windows, and manually trigger tooltip queries. Use it to provide contextual help or display dynamic information when users hover over UI elements.",
      "description_length": 330,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.Action.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for activating UI actions, typically used in GUI applications. It works with objects that support the `activate` method, such as buttons or menu items. Use this to bind actions to user-triggered events like clicks or key presses.",
      "description_length": 266,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.MessageDialog.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring message dialogs, including buttons, message type, text, and secondary text with optional markup. It works with `messagedialog` objects and supports setting images, message areas, and button types. Concrete use cases include customizing dialog appearance and behavior in GUI applications, such as displaying error messages with icons or confirmation dialogs with rich text formatting.",
      "description_length": 430,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring label widgets in a GUI, such as text content, justification, wrapping, and styling options like markup or underline. It works with `Gobject.property` values tied to `Gtk.label` objects, allowing fine-grained control over label appearance and behavior. Concrete use cases include setting localized text, enabling mnemonic activation, adjusting text layout, and controlling ellipsization or wrapping in UI elements like dialog messages or form labels.",
      "description_length": 496,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander.S",
      "library": "lablgtk3",
      "description": "This module connects the `activate` event to an expander widget, allowing it to respond to user interactions such as clicks. It works directly with GTK's expander widget and handles the action of expanding or collapsing the widget's content. A concrete use case is triggering UI updates or loading content dynamically when an expander is opened.",
      "description_length": 345,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Button.P",
      "library": "lablgtk3",
      "description": "This module defines property accessors for configuring button widgets, including focus behavior, label text, image display, and alignment settings. It operates on button objects, allowing manipulation of visual and interactive attributes like relief style, stock image usage, and text underlining. Concrete use cases include customizing button appearance and behavior in GUI applications, such as setting icons, adjusting label alignment, and controlling focus interaction.",
      "description_length": 473,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for color selection widgets, specifically triggering a callback when the selected color changes. It works with color selection UI components and unit functions. A concrete use case is updating a preview area or applying a new color choice in real time when a user interacts with a color picker.",
      "description_length": 332,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection.P",
      "library": "lablgtk3",
      "description": "This module provides properties for managing color selection widgets, including current color, alpha transparency, and UI controls for opacity and palette visibility. It works with `Gobject` instances that support color selection, such as `colorselection` objects. Concrete use cases include customizing and retrieving color selection settings in graphical user interfaces.",
      "description_length": 373,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Plug.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for managing embedded plug events in a GUI context. It works with GTK widget types that support plug embedding, specifically handling the `embedded` event. A concrete use case is responding to when a plug is embedded within a socket in a GTK application.",
      "description_length": 292,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow.S",
      "library": "lablgtk3",
      "description": "This module connects signals for scrolling and focus navigation in scrolled window interfaces. It handles user input for moving focus and scrolling content, using direction and scroll type enums. Ideal for implementing custom scroll behavior or keyboard navigation in GUI applications.",
      "description_length": 285,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.Menu.S",
      "library": "lablgtk3",
      "description": "Handles scroll events in a menu by adjusting the view based on the provided scroll type. Works with `menu` objects and `scroll_type` values from the `GtkEnums` module. Useful for implementing custom scrolling behavior in dropdown or context menus.",
      "description_length": 247,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle.S",
      "library": "lablgtk3",
      "description": "This module defines a signal handler for toggle events in a cell renderer toggle widget. It provides the `toggled` signal, which is triggered when the toggle state changes, accepting a tree path to identify the affected cell. It is used to handle user interactions in a tree view where boolean state changes need to be captured and processed.",
      "description_length": 342,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Expander.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring expander widgets, including controlling expansion state, setting labels, specifying label widgets, adjusting spacing, and enabling underline mnemonics. It operates on expander objects, working with boolean, string, and widget data types. Concrete use cases include customizing the appearance and behavior of collapsible UI sections in graphical applications.",
      "description_length": 405,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRenderer.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring cell renderers in a GUI toolkit, such as background color, size, alignment, and visibility. It works with GObject-based cell renderer instances and provides direct access to their visual and behavioral attributes. Use these properties to customize the appearance and layout of cells in tree views or list views, such as setting background colors, adjusting padding, or controlling expansion state.",
      "description_length": 444,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeView.Dnd",
      "library": "lablgtk3",
      "description": "This module implements drag-and-drop functionality for tree views, allowing rows to be reordered or transferred between views. It provides functions to enable and configure drag sources and drop destinations, including specifying valid target types and allowed actions. Use cases include reordering items in a list or transferring data between different tree views.",
      "description_length": 365,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo.S",
      "library": "lablgtk3",
      "description": "Handles user-initiated changes to combo box cells in a tree view by connecting a callback that receives the tree path and iterator of the modified row. Works with `cellrenderercombo` objects, `Gtk.tree_path`, and `Gtk.tree_iter` types. Useful for updating model data when a user selects a different value in a combo cell.",
      "description_length": 321,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Alignment.P",
      "library": "lablgtk3",
      "description": "This module defines properties for aligning and scaling widgets within a container, including horizontal and vertical alignment, scaling factors, and padding on all sides. It works with widget types that support alignment configuration, using float and integer values to control layout behavior. Concrete use cases include adjusting the position and size of UI elements like buttons or labels within a window or panel.",
      "description_length": 418,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton.P",
      "library": "lablgtk3",
      "description": "This module provides access to the group property of radio tool buttons, allowing the retrieval and setting of the radio group associated with a button. It works with `Gtk.radio_tool_button` objects and options, enabling management of button groupings. A concrete use case is ensuring multiple radio tool buttons belong to the same group to enforce exclusive selection in a toolbar interface.",
      "description_length": 392,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Grid.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring grid layouts in GUI applications, such as row and column spacing, homogeneity, and baseline alignment. It works with grid containers and their associated integer and boolean properties. Use it to control the visual arrangement and consistency of widgets within a grid.",
      "description_length": 315,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton.S",
      "library": "lablgtk3",
      "description": "This module connects a callback to a tool button's click event. It provides the `clicked` signal for handling user interactions with tool buttons. Use it to define actions triggered when a tool button is pressed.",
      "description_length": 212,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFileProps.FileChooser.S",
      "library": "lablgtk3",
      "description": "This module connects user interactions with file chooser widgets to custom responses, enabling actions like handling folder changes, file selections, and overwrite confirmations. It works with file chooser objects to manage events such as activation, selection updates, and preview rendering. Concrete use cases include implementing custom file selection logic, updating UI elements based on the current folder, and controlling file overwrite behavior in dialog windows.",
      "description_length": 470,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container.S",
      "library": "lablgtk3",
      "description": "This module defines signals for managing child widgets within a container, including adding, removing, resizing, and setting focus. It operates on container objects and works with widget instances, providing direct interaction for dynamic UI updates. Concrete use cases include implementing custom container behavior, handling widget layout changes, and managing focus navigation in graphical interfaces.",
      "description_length": 404,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion.S",
      "library": "lablgtk3",
      "description": "This module handles user interactions with entry completion widgets, specifically responding to action activation and match selection events. It works with entry completion objects, tree model filters, and tree iterators. Concrete use cases include triggering custom behavior when a user selects a completion item or activates a specific action associated with the entry.",
      "description_length": 371,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.EventBox.P",
      "library": "lablgtk3",
      "description": "This module provides properties to configure event box behavior in GUI applications. It allows setting whether the event box is positioned above its child widget and whether it has a visible window. These properties are used to control event handling and visual layering in widget hierarchies.",
      "description_length": 293,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Stack.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring and controlling the behavior of a stack widget, including layout homogeneity, transition effects, and visibility settings. It operates on stack objects, managing data types such as boolean flags, integers, strings, and widget references. Concrete use cases include setting transition animations between stack pages, controlling size interpolation during transitions, and specifying which child widget is currently visible by name or reference.",
      "description_length": 490,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf.P",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring pixbuf-based cell renderers in a GUI toolkit. It allows setting pixbuf images, stock icons, and expander states for visual elements in tree views. Use this to customize icons and images in tree rows, such as displaying folder open/closed states or stock buttons.",
      "description_length": 309,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ColorButton.S",
      "library": "lablgtk3",
      "description": "This module provides a signal handler for when a color is set in a color selection dialog. It works with the `GtkSignal.t` type, specifically handling events from color button widgets. A concrete use case is triggering a callback to update an application's UI or model with the newly selected color.",
      "description_length": 299,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ActionGroup.P",
      "library": "lablgtk3",
      "description": "This module defines properties for action groups, including name, sensitivity, and visibility. It works with GObject-based action group instances to manage their runtime attributes. These properties are used to control and query the state of action groups in GUI applications.",
      "description_length": 276,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Dialog.S",
      "library": "lablgtk3",
      "description": "Handles user interactions with dialog windows by connecting callback functions to dialog events. It provides signals for handling dialog closure and user responses, typically used in GUI applications to manage modal or non-modal dialogs. These functions work with dialog objects to implement actions like dismissing a dialog or processing button clicks.",
      "description_length": 353,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.SizeGroup.P",
      "library": "lablgtk3",
      "description": "This module defines a property for setting and retrieving the mode of a size group, which controls how widgets in the group are sized relative to each other. It works with the `size_group_mode` enumeration and applies to objects that support the `GtkPackProps.SizeGroup` interface. Concrete use cases include ensuring consistent sizing behavior across multiple UI elements, such as making buttons or labels in a group have the same width or height.",
      "description_length": 448,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Adjustment.P",
      "library": "lablgtk3",
      "description": "This module defines properties for adjusting numerical values within a range, such as setting and retrieving the lower and upper bounds, step increments, page increments, and current values. It works with float values and adjustment objects to configure scrollable or ranged UI elements. Concrete use cases include setting up scrollbars, sliders, and spin buttons with precise control over their behavior and display.",
      "description_length": 417,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter.P",
      "library": "lablgtk3",
      "description": "This module provides properties to access and manipulate the child model and virtual root path of a tree model filter. It works with `Gtk.tree_model` and `Gtk.tree_path` types, enabling dynamic filtering and hierarchical data representation. Concrete use cases include implementing custom filtering logic for tree views and managing nested data structures in GUI applications.",
      "description_length": 376,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem.P",
      "library": "lablgtk3",
      "description": "This module provides a property for controlling whether a separator tool item is drawn as visible or hidden. It operates on the `bool` type to set or get the draw state. A concrete use case is toggling the visibility of a separator in a toolbar based on user preferences or application state.",
      "description_length": 292,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton.P",
      "library": "lablgtk3",
      "description": "Accesses the URI property of a link button, allowing the button's target URL to be set or retrieved. Works directly with link button objects to configure their associated web address. Useful when implementing clickable links that open in a browser, such as help or documentation buttons.",
      "description_length": 287,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModel.S",
      "library": "lablgtk3",
      "description": "This module defines signals for tracking changes to rows in a tree model, including row modification, deletion, insertion, reordering, and child state toggles. It works with tree models that support hierarchical data structures using `Gtk.tree_path` and `Gtk.tree_iter`. These signals are used to update UI components like tree views in response to dynamic data changes.",
      "description_length": 370,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView.S",
      "library": "lablgtk3",
      "description": "This module connects user input events to text editing actions in a text view widget. It handles keyboard and clipboard interactions like moving the cursor, selecting text, cutting, copying, and pasting, as well as toggling overwrite mode. Use it to implement rich text editing behavior with precise control over cursor movement and text manipulation.",
      "description_length": 351,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget.S",
      "library": "lablgtk3",
      "description": "This module provides operations for managing widget lifecycles, rendering updates, state transitions, and drag-and-drop interactions. It operates on GTK widgets and associated data structures like `Gdk.cairo` contexts, `Gtk.tooltip` instances, `Gtk.selection_data`, and `Gdk.drag_context`. These functions enable use cases such as synchronizing UI state with widget visibility, implementing drag-and-drop workflows, and handling dynamic layout or style changes during rendering.",
      "description_length": 478,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.TreeView.Tooltip",
      "library": "lablgtk3",
      "description": "This module manages tooltips for cells and rows in a tree view. It allows setting tooltips on specific cells or entire rows, retrieving context information for a given position, and getting or setting the column index for tooltip events. Use it to display detailed information when hovering over tree view items or to customize tooltip behavior based on cell content.",
      "description_length": 367,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label.S",
      "library": "lablgtk3",
      "description": "This module connects signals to handle user interactions with labels, enabling text copying to the clipboard, cursor movement, and context menu population. It operates on label widgets and integrates with menus and input events. Concrete use cases include enabling text selection in labels, adding custom context menu items, and handling keyboard navigation.",
      "description_length": 358,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel.S",
      "library": "lablgtk3",
      "description": "Handles acceleration key events in a tree view cell renderer. It provides signals for when an accelerator is cleared or edited, capturing details like key codes and modifiers. Useful for implementing custom keyboard shortcut editing in tree-based UIs.",
      "description_length": 251,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Main",
      "library": "lablgtk3",
      "description": "This module manages the initialization and event loop of a GUI application, handling locale settings, command-line arguments, and event time retrieval. It works with global state like the main loop stack and version information, providing direct control over the application's lifecycle. Concrete use cases include initializing the GUI environment, starting and stopping the main loop, and querying runtime version or event timestamps.",
      "description_length": 435,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps.Assistant",
      "library": "lablgtk3",
      "description": "This component orchestrates multi-step assistant interfaces by managing navigation flow, visual states, and dynamic interactions with `GtkAssistant` and `GtkWidget` instances. It supports operations such as inserting pages, configuring titles and images, updating completion status, and managing action widgets, while its child module handles user-triggered events like apply, cancel, and navigation transitions through `GtkSignal.t` callbacks. Main data types include `GtkAssistant`, `GtkWidget`, and `GtkSignal.t`, with operations to control page content, button sensitivity, and interface progression. Examples include building configuration wizards, guided setup flows, and step-by-step data entry interfaces where visual and logical state updates are tied to user actions.",
      "description_length": 777,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.RadioButton",
      "library": "lablgtk3",
      "description": "This module handles the creation and manipulation of radio button widgets, supporting operations like casting generic objects and initializing new instances with custom parameters. It works directly with `Gtk.radio_button` objects, enabling configuration through property lists and providing access to core behaviors such as group association. The child module extends this functionality by allowing dynamic management of radio button groups, letting you retrieve or change a button's group membership at runtime. For example, you can create a radio button with a specific label and signal handler, then later reassign it to a different group based on user interaction.",
      "description_length": 669,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.EventBox",
      "library": "lablgtk3",
      "description": "This module manages event boxes in a GUI toolkit, enabling precise control over input events and visual stacking of widgets. It supports configuration options such as visibility and layering, allowing event boxes to be positioned above or below child widgets. Key operations include creating event boxes, setting their display properties, and embedding them within windows or other containers. For example, it can be used to overlay interactive elements on top of a canvas or ensure that certain widgets receive input events exclusively.",
      "description_length": 537,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for GUI action objects, including name, sensitivity, and visibility. It works with GObject-based types to manage user interface behavior. These properties are used to control and query the state of actions in a graphical application.",
      "description_length": 264,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenu.RadioMenuItem",
      "library": "lablgtk3",
      "description": "This module implements radio menu items for creating mutually exclusive menu selections. It provides functions to create items with labels or mnemonics, set their group affiliation, and cast generic objects to radio menu item type. Typical use cases include building menu interfaces where only one option can be selected at a time, such as theme choices or display modes.",
      "description_length": 371,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Statusbar",
      "library": "lablgtk3",
      "description": "This module manages status bar widgets in a GUI application, handling message queuing, context-based updates, and direct manipulation of status messages using types like `Gtk.statusbar`, `Gtk.statusbar_context`, and `Gtk.statusbar_message`. It allows creation of status bars, retrieval of context identifiers, and display or removal of messages, with support for tracking message contexts to enable targeted updates or logging. Child modules extend functionality by connecting to message push/pop events and customizing appearance via shadow type properties. Examples include showing temporary notifications, logging status changes, and adjusting the visual style of the status bar.",
      "description_length": 682,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTag",
      "library": "lablgtk3",
      "description": "This module manages text tag creation, priority settings, and event handling within a GTK text buffer, enabling styled and interactive text segments. It combines direct manipulation of `Gtk.text_tag` with submodules that control visual properties\u2014like color, font, and layout\u2014and define behaviors in response to user input events such as clicks or key presses. You can use it to implement features like syntax highlighting, clickable hyperlinks, or formatted document displays. Operations include applying tags to text ranges, setting visual attributes, and connecting callbacks to handle interactions at specific buffer positions.",
      "description_length": 631,
      "index": 151,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMain.Grab",
      "library": "lablgtk3",
      "description": "This module manages input grabs for widgets, allowing precise control over event capture. It provides functions to add or remove a grab on a specific widget and to retrieve the currently grabbed widget. Use it to implement features like modal dialogs or drag-and-drop interactions where exclusive input handling is required.",
      "description_length": 324,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.DnD",
      "library": "lablgtk3",
      "description": "This module handles drag-and-drop interactions within GUI components. It allows setting up drag sources and drop targets, managing drag data transfer, and controlling visual feedback during drag operations. Use it to implement features like file uploads via drag, reordering list items, or transferring data between interface elements.",
      "description_length": 335,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Setting",
      "library": "lablgtk3",
      "description": "Handles events related to system-wide settings changes, such as theme or interface adjustments. It provides access to the action type (e.g., changed, removed) and the name of the affected setting. Useful for applications that need to react dynamically to global configuration updates.",
      "description_length": 284,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Windowing",
      "library": "lablgtk3",
      "description": "This module provides operations to determine the underlying platform for windowing systems, returning a value that identifies the specific graphical environment in use. It works with the platform type, which is a polymorphic variant representing supported windowing platforms like X11, Win32, or Quartz. A concrete use case is adapting window creation or rendering logic based on the current display server or operating system.",
      "description_length": 427,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Timeout",
      "library": "lablgtk3",
      "description": "Handles timed events with millisecond precision. Adds and removes timeout sources that execute callbacks at specified intervals. Useful for scheduling delayed actions or periodic tasks like UI updates and resource polling.",
      "description_length": 222,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.X",
      "library": "lablgtk3",
      "description": "This module provides low-level operations for interacting with the X11 window system, specifically for handling display updates and user notifications. It works directly with the underlying X11 display connection to perform actions such as flushing output buffers and emitting system beeps. Concrete use cases include ensuring immediate rendering of graphical changes and providing auditory feedback in GUI applications.",
      "description_length": 420,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenu.MenuItem",
      "library": "lablgtk3",
      "description": "This module manages individual items within a menu, providing functions to create labeled or mnemonic-based items, set and retrieve submenus, activate or toggle item states, and configure size and accelerator properties. It operates on `Gtk.menu_item` objects, allowing integration with `Gtk.menu` and `Gtk.widget` structures. Concrete use cases include building context menus with nested submenus, implementing keyboard shortcuts via accelerator paths, and creating interactive menu entries with dynamic state changes.",
      "description_length": 519,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.WindowState",
      "library": "lablgtk3",
      "description": "Handles window state change events in GUI applications. It provides functions to cast generic events to window state events and retrieve the mask of changed states. Uses the `Gdk.Tags.window_state` list to represent window state flags like maximized or fullscreen. Useful for responding to window resizing or state transitions in desktop applications.",
      "description_length": 351,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Utf8",
      "library": "lablgtk3",
      "description": "This module handles UTF-8 string validation, encoding, and decoding operations, including conversion to and from Unicode code points. It provides functions for string normalization, case conversion, collation, and character indexing, working directly with UTF-8 encoded strings and unichar values. Concrete use cases include processing user input, preparing text for display, and ensuring valid UTF-8 encoding when interfacing with external data sources.",
      "description_length": 454,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.CheckMenuItem",
      "library": "lablgtk3",
      "description": "This module creates and manages checkable menu items in a GTK-based UI, supporting state toggling and property customization. It provides direct access to `Gtk.check_menu_item` operations, such as setting active or inconsistent states, and connects to child modules for handling state change events and binding properties. With it, developers can create menu items that reflect boolean application settings, respond to user interactions by updating internal state, and synchronize UI elements with runtime logic. Example uses include enabling/disabling features via menu selections or reflecting mixed selection states in multi-item interfaces.",
      "description_length": 644,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.Arrow",
      "library": "lablgtk3",
      "description": "This module enables the creation and configuration of arrow widgets in GTK-based applications, allowing developers to specify visual properties such as direction and shadow style. It provides direct access to key operations like setting and retrieving the `arrow_type` and `shadow_type` attributes, which control the widget's appearance and behavior. With these capabilities, developers can build interactive UI elements that indicate direction, provide visual feedback, or enhance navigation within a graphical interface. Submodules extend this functionality by offering fine-grained control over arrow properties, making it easier to customize and manage arrow widgets in complex layouts.",
      "description_length": 690,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModelSort",
      "library": "lablgtk3",
      "description": "This module manages sorted tree models, enabling seamless conversions between paths and iterators in child models and their sorted views. It supports hierarchical data sorting and filtering through `Gtk.tree_model_sort`, `Gtk.tree_path`, and `Gtk.tree_iter`, allowing custom sorting logic and selection synchronization. The child module exposes the underlying unsorted model, facilitating direct access to original data structures like `Gtk.tree_model` for tasks such as retrieving unsorted indices of selected items. Together, they enable robust manipulation of hierarchical data in GUI applications, maintaining consistency between sorted views and their data sources.",
      "description_length": 670,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextChildAnchor",
      "library": "lablgtk3",
      "description": "Handles anchors for child widgets embedded within text buffers. It allows creating anchors with specific properties, retrieving associated widgets, and checking if an anchor has been deleted. Useful for managing interactive UI elements like buttons or images within a text view.",
      "description_length": 278,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.DrawingArea",
      "library": "lablgtk3",
      "description": "Handles creation and type casting for drawing areas in a GUI toolkit. Works with `Gtk.drawing_area` objects and GObject parameters. Used to instantiate customizable drawing surfaces and convert generic objects to drawing area instances.",
      "description_length": 236,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder.Builder",
      "library": "lablgtk3",
      "description": "This module constructs user interfaces from XML descriptions, loading widgets and connecting signals. It operates on `Gtk.builder` objects, parsing UI definitions from files or strings and retrieving constructed widgets by name. Concrete use cases include loading `.ui` files generated by Glade or dynamically creating interfaces from XML strings with optional translation domains.",
      "description_length": 381,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Item",
      "library": "lablgtk3",
      "description": "Handles predefined menu and toolbar items with associated icons. Provides operations to register items, retrieve available item IDs, and look up items by ID. Useful for building consistent UI elements like file open, save, and print buttons using standardized stock identifiers.",
      "description_length": 278,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.Style",
      "library": "lablgtk3",
      "description": "This module manages visual styling for GUI components by manipulating color properties and associating styles with windows. It provides functions to create, copy, and apply styles, set and retrieve color values for different widget states, and control background, foreground, and intermediate colors. Use cases include customizing the appearance of widgets in a GTK+ interface, such as changing button colors based on interaction states or applying a consistent theme across windows.",
      "description_length": 483,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Language",
      "library": "lablgtk3",
      "description": "This module provides operations to create, convert, and compare language tags from strings. It works with the abstract `Pango.language` type representing a language tag. Use cases include parsing language strings, checking language matches, and representing the absence of a language with `none`.",
      "description_length": 296,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.Menu",
      "library": "lablgtk3",
      "description": "This module manages hierarchical menus and their interactions in a graphical user interface. It provides functions to create menus, display them at specific positions, activate items, and associate accelerators. Key operations include popping up or down menus, setting active items, and attaching menus to widgets for context-sensitive behavior.",
      "description_length": 345,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Window",
      "library": "lablgtk3",
      "description": "This module manages low-level window operations, such as creating windows from XIDs, retrieving window positions, and setting cursors. It works with window objects, XIDs, and visual attributes. Concrete use cases include embedding external windows, tracking pointer location, and configuring window visuals.",
      "description_length": 307,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.ActionGroup",
      "library": "lablgtk3",
      "description": "This module organizes and manages sets of actions in a GUI application, allowing groups to be activated, deactivated, or reconfigured as a unit. It supports creating and manipulating action groups with accelerators, and provides direct access to `Gtk.action_group` and `Gtk.action` objects for registering, retrieving, and modifying actions by name. The module's child modules handle connecting UI widgets to actions and managing action group properties such as sensitivity and visibility. For example, you can use it to enable or disable a group of menu items based on application state, or dynamically update toolbar buttons in response to user interaction.",
      "description_length": 659,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.View",
      "library": "lablgtk3",
      "description": "This module enables creation and configuration of text views with support for buffer operations, scrolling, and coordinate transformations between buffer and window spaces using text iterators and marks. It facilitates complex text layouts by embedding child widgets, adjusting visual positioning, and navigating content by display lines, ideal for applications like rich text editors and interactive interfaces requiring dynamic content integration. Key data structures include text views, buffers, and associated layout components to manage both textual content and embedded elements.",
      "description_length": 586,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8.Error",
      "library": "lablgtk3",
      "description": "This module defines error types and exception-raising functions for handling invalid or incomplete UTF-8 sequences during character encoding conversion. It works with byte sequences and Unicode characters, specifically handling cases like partial input or illegal byte patterns. Concrete use cases include validating UTF-8 input before conversion and handling malformed URI or path inputs in system operations.",
      "description_length": 410,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps.FontSelection",
      "library": "lablgtk3",
      "description": "This module creates and configures font selection widgets, allowing control over the selected font and preview text through GObject parameters. It directly supports operations like setting a font name or updating preview text, enabling integration into forms or custom dialogs. The child module exposes `font_name` and `preview_text` properties for fine-grained synchronization with application state. For example, you can use it to persist user font choices or dynamically update the preview based on user input.",
      "description_length": 513,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.UIManager",
      "library": "lablgtk3",
      "description": "This module organizes and extends the management of dynamic user interfaces in a GTK application, combining core functionality with event handling and property configuration. It centers on `uimanager` objects to build and modify menus, toolbars, and other interface elements at runtime, using `action_group` and `widget` instances to structure and control behavior. The module supports loading UI definitions from files or strings, retrieving widgets or actions by name, and adjusting layout properties such as tear-off menus and XML-based UI descriptions. Signals from child modules enable responses to action changes, widget additions, and proxy connections, allowing synchronization of UI elements with application state and integration of custom components.",
      "description_length": 761,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.TreeModel",
      "library": "lablgtk3",
      "description": "This module provides functions to access and manipulate tree-like data structures used in GUI components, such as tree views. It supports operations like retrieving rows, navigating hierarchy, and fetching cell values, working with types like `Gtk.tree_model`, `Gtk.tree_iter`, and `Gtk.tree_path`. Concrete use cases include populating hierarchical data in a file browser or managing selections in a structured list.",
      "description_length": 417,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBoxText",
      "library": "lablgtk3",
      "description": "This module provides operations for creating and managing combo box text widgets. It supports adding, removing, and selecting text items within a combo box. Commonly used for user interfaces requiring dropdown text selection with dynamic content updates.",
      "description_length": 254,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Crossing",
      "library": "lablgtk3",
      "description": "This module handles events related to pointer crossing boundaries, specifically `ENTER_NOTIFY` and `LEAVE_NOTIFY`. It provides access to event details such as coordinates, window, mode, and state. Use it to track when the mouse pointer enters or leaves a window, including subwindow and root window positions.",
      "description_length": 309,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Paned",
      "library": "lablgtk3",
      "description": "This module manages resizable split layouts using `Gtk.paned` objects, allowing orientation settings and dynamic placement of two child widgets. It supports operations to pack, resize, and reposition panes, with properties to control layout constraints and orientation. You can create adjustable panels with fixed or proportional sizing, set minimum and maximum positions, or switch between horizontal and vertical splits. Specific use cases include implementing editor-side panels, resizable data viewers, and interactive layout builders.",
      "description_length": 539,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Stack",
      "library": "lablgtk3",
      "description": "This module manages layout and transitions between multiple child widgets in a stack container, using `Gtk.stack` and `Gtk.widget` objects to control visibility, animation, and dynamic UI swaps. It provides direct access to operations like adding or removing pages, setting transition effects such as crossfade or slide, and selecting the visible child by name or reference. The child module extends this functionality by exposing properties to configure homogeneity, transition duration, and visibility policies, enabling fine-grained control over the stack's behavior and appearance. Examples include implementing tabbed interfaces with animated transitions or wizard-style navigation with dynamic page updates.",
      "description_length": 713,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenuProps.MenuBar",
      "library": "lablgtk3",
      "description": "This module constructs and manages menu bar interfaces in GUI applications using GTK components, supporting creation and casting of menu bar objects. It provides direct control over layout and appearance through properties like child packing direction, internal padding, and shadow type, enabling precise customization of structural behavior and visual rendering. With operations to configure menu bar orientation and spacing, it allows developers to define how items are arranged and displayed within the interface. For example, you can set the overall packing direction to horizontal or vertical and adjust padding to control spacing around menu items.",
      "description_length": 654,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.AboutDialog",
      "library": "lablgtk3",
      "description": "This module manages about dialog components by configuring attributes like artists, authors, and documenters, and supports data types including string lists, pixbufs, and boolean flags. It enables concrete use cases such as displaying application metadata, managing license information, and setting version and website details in GTK-based about dialogs. The child module handles specific properties like program name, version, copyright, and logo display, using strings and GdkPixbuf for branding. Together, they allow building and customizing rich graphical about windows with both textual and visual content.",
      "description_length": 611,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Selection",
      "library": "lablgtk3",
      "description": "This module handles events related to X11 selection operations, such as clipboard management. It provides access to event details including the selection type, target atom, property atom, requestor window, and event time. Use it to implement custom clipboard handling or inter-process communication in GUI applications.",
      "description_length": 319,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Invisible",
      "library": "lablgtk3",
      "description": "This module handles the creation and manipulation of invisible widgets, serving as placeholders in UI layouts without being rendered. It provides functions to cast and construct `Gtk.invisible` instances, along with a submodule `P` for property access, including the `screen` property to retrieve the associated `Gdk.screen`. With it, developers can create invisible widgets with custom parameters and query screen information for layout management across multiple displays. Example use cases include managing internal UI components or setting up signal handlers on hidden elements.",
      "description_length": 582,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.RadioAction",
      "library": "lablgtk3",
      "description": "This module manages radio actions and their groups, enabling the creation and manipulation of mutually exclusive options in GUIs. It provides functions to set and retrieve groups and current values, working directly with `Gtk.radio_action` objects. The `changed` signal handler allows responding to user selections by updating UI or application state when the active item changes. Properties for managing group membership and integer identifiers support implementing radio button behavior across menus and toolbars.",
      "description_length": 515,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButton.Toolbar",
      "library": "lablgtk3",
      "description": "This module manages the creation and manipulation of toolbar widgets, supporting operations to insert, retrieve, and index tool items. It works with `Gtk.toolbar` and `Gtk.toolitem` objects, allowing configuration of display properties like icon size, toolbar style, and orientation. Concrete use cases include building customizable UI toolbars with dynamic item insertion and visual styling control.",
      "description_length": 400,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Editable",
      "library": "lablgtk3",
      "description": "This module enables direct manipulation of editable text fields through precise control over selection, insertion, deletion, and clipboard interactions on `Gtk.obj` instances that support the editable interface. It provides operations for modifying text content, responding to changes in real time, and integrating custom logic like input validation or auto-completion. Specific capabilities include tracking text modifications, deleting ranges, inserting content at specific positions, and handling clipboard data. These operations can be applied directly or extended through signal handling for dynamic text field behavior.",
      "description_length": 625,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Plug",
      "library": "lablgtk3",
      "description": "This module enables type-safe interaction with GTK plug widgets by casting GObject instances to GtkPlug objects and exposing plug-specific properties through the `S` submodule. It supports operations such as retrieving and modifying attributes of `Gtk.plug` and `Gobject.obj` types, ensuring correct handling of plug-specific behavior. The child module provides a signal handler for embedded plug events, allowing applications to respond when a plug is embedded in a socket. Example uses include dynamically adjusting plug properties and reacting to embedding events to manage GUI layout and state.",
      "description_length": 598,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererCombo",
      "library": "lablgtk3",
      "description": "This module renders and edits combo box cells in a tree view, enabling inline selection from dropdown lists or custom entry. It supports creating and configuring combo cell renderers with associated tree models, text columns, and editable settings. User changes trigger callbacks with the row path and iterator, allowing direct updates to model data. For example, it can manage product categories in a tree where users pick from or add new options.",
      "description_length": 448,
      "index": 190,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Gobject.Type",
      "library": "lablgtk3",
      "description": "This module manages GObject type hierarchies and introspection. It provides operations to query type relationships, such as checking inheritance with `is_a`, retrieving parent types with `parent`, and resolving types by name with `from_name`. Concrete use cases include dynamically inspecting GObject-based libraries and registering new types with the GObject type system.",
      "description_length": 372,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.ToggleButton",
      "library": "lablgtk3",
      "description": "This module implements toggle buttons with active/inactive states, providing functions to create buttons, set their initial state, and connect to their toggled event. It works with GObject parameters and toggle button objects, supporting properties like active and draw_indicator. Use it to build UI elements like switches or checkboxes that maintain state.",
      "description_length": 357,
      "index": 192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Orientable",
      "library": "lablgtk3",
      "description": "This module manages the orientation of UI components, allowing layout direction to be set and retrieved using the `GtkEnums.orientation` type\u2014supporting both horizontal and vertical configurations. It directly handles `Gtk.orientable` objects, enabling custom orientation during instance creation, and is used to control layout flow in widgets like `Gtk.Box` and `Gtk.Separator`. The included property module provides fine-grained access to orientation settings, making it possible to dynamically adjust or query a widget's layout direction at runtime. For example, you can create a vertical box or change a separator's direction mid-interaction based on user input.",
      "description_length": 666,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Selection",
      "library": "lablgtk3",
      "description": "This module handles selection data manipulation and target management for widgets in a GUI application. It provides functions to access and modify selection data, such as retrieving the selected content, setting new data, and copying selection information. Concrete use cases include implementing drag-and-drop functionality, clipboard operations, and inter-application communication through selections.",
      "description_length": 403,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Idle",
      "library": "lablgtk3",
      "description": "Handles deferred execution of functions in the main event loop. Adds and removes idle callbacks that run when no higher-priority events are pending. Useful for background tasks like UI updates or incremental processing without blocking the main loop.",
      "description_length": 250,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Internal",
      "library": "lablgtk3",
      "description": "This module provides functions to retrieve and manipulate widget allocation rectangles using GObject data conversions. It works with `Gpointer.boxed` and `Gtk.rectangle` types to handle spatial information for GUI elements. Concrete use cases include determining widget positions at runtime and converting allocation data for layout management.",
      "description_length": 344,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Rectangle",
      "library": "lablgtk3",
      "description": "This module defines a data structure for representing rectangular areas with integer coordinates. It provides functions to create rectangles and access their position and dimensions. Useful for managing window geometries or layout calculations in graphical applications.",
      "description_length": 270,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.AccelMap",
      "library": "lablgtk3",
      "description": "Handles loading and saving keyboard accelerator maps from files, adding or modifying keybindings with specific modifiers, and iterating over existing entries. Works with strings for file paths and accelerator paths, integers for key values, and lists of modifier tags. Used to configure and persist application-wide keyboard shortcuts in a GUI environment.",
      "description_length": 356,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkFileProps.FileChooserButton",
      "library": "lablgtk3",
      "description": "This module implements a file selection button that opens a dialog for choosing files or directories, allowing configuration of the dialog's title, action type, and default path. It supports dynamic updates through signals emitted on selection changes and integrates with GUI layouts via properties like button width and label. Concrete use cases include selecting configuration files or input data sources in desktop applications. Properties from child modules enable fine-grained control over the button's appearance and behavior, such as setting the displayed title or adjusting the button's size to fit specific UI constraints.",
      "description_length": 631,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Frame",
      "library": "lablgtk3",
      "description": "This module creates and configures frame widgets with optional labels and shadow styles, supporting alignment, label text, and shadow type parameters. It works with `Gtk.frame` objects and includes properties for customizing appearance and layout, such as setting a frame's label or adjusting its shadow style. Concrete use cases include building bordered containers with titled headers in graphical applications. The module combines direct configuration of frame widgets with fine-grained property control for custom UI elements.",
      "description_length": 530,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleButton",
      "library": "lablgtk3",
      "description": "This module creates and configures toggle buttons with support for active state, indicator visibility, and tri-state behavior. It directly handles construction parameters and integrates signal handling for state changes via the `toggled` event. The associated property module allows dynamic control of visual and behavioral attributes on any compatible GObject-based toggle button. Use it to build interactive UI elements like checkboxes or switches that respond to and maintain user input.",
      "description_length": 490,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.FontButton",
      "library": "lablgtk3",
      "description": "This module creates and configures font selection buttons, allowing control over font name, title, and visibility settings for UI elements in GTK applications. It supports direct manipulation of GTK font button objects through GObject parameters and provides properties to customize dialog appearance and behavior. The module handles user font selections via the `font_set` signal, enabling real-time updates to application interfaces, such as changing a text editor's font dynamically. Specific configurations include toggling size and style visibility, setting custom dialog titles, and linking font changes to UI responses.",
      "description_length": 626,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.StackSwitcher",
      "library": "lablgtk3",
      "description": "This module creates and configures a stack switcher widget for navigating pages in a `Gtk.stack`, supporting customization through parameters like `icon_size` and `stack`. It provides direct access to the switcher's core properties via its child module, enabling fine-grained control over appearance and behavior. You can use it to build tab-like interfaces that let users toggle between different UI sections, such as settings panels or document tabs. The module combines widget creation with property management to streamline integration into complex UI layouts.",
      "description_length": 564,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolButton",
      "library": "lablgtk3",
      "description": "This module creates and configures tool buttons in a GTK interface, supporting parameterized initialization and object casting. It integrates child modules that define visual properties\u2014like icon, label, and underlined text\u2014and connect user interactions through the `clicked` signal. You can construct a tool button with a custom icon and label, set its appearance, and attach a callback to respond to clicks. These buttons can then be added to toolbars or other UI components for interactive, visual control.",
      "description_length": 509,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.Bin",
      "library": "lablgtk3",
      "description": "Converts a GObject into a `Gtk.bin` type, enabling operations specific to bin containers. Works with GTK objects and the `Gtk.bin` structure. Use when manipulating bin widgets like buttons or frames in a type-safe way.",
      "description_length": 218,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.DnD",
      "library": "lablgtk3",
      "description": "Handles drag-and-drop operations by managing context, actions, and target data. Works with `drag_context` to determine available actions, set status, and retrieve supported targets. Used to implement custom drag-and-drop behavior in GUI applications, such as transferring files or data between widgets.",
      "description_length": 302,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMisc.Misc",
      "library": "lablgtk3",
      "description": "This module provides functions for configuring alignment and padding parameters in GUI components. It works with GObject parameter lists and GTK widget types to set properties like `xalign`, `yalign`, `xpad`, and `ypad`. Use it to adjust layout behavior of widgets within containers, such as centering a label or adding spacing around a button.",
      "description_length": 344,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines a property for setting and getting the opacity of GUI elements as a floating-point value. It works with GObject-based types to enable transparency adjustments in user interface components. Useful for custom widgets needing per-element transparency control in graphical applications.",
      "description_length": 302,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_pango.Font_map",
      "library": "lablgtk3",
      "description": "This module manages fontmaps for rendering text with Cairo and Pango, providing functions to create, configure, and retrieve fontmaps, including setting resolution and font backend type. It works with `Pango.font_map` objects and integrates with Cairo's font system to control text layout and rendering. Concrete use cases include setting a custom font backend for high-quality text rendering, adjusting DPI scaling for precise font sizing, and creating isolated font contexts for multi-threaded applications.",
      "description_length": 509,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Range",
      "library": "lablgtk3",
      "description": "This module creates and configures range widgets such as sliders and spinners, enabling precise control over numeric input through adjustable bounds, step sizes, and visual properties. It supports interaction handling and value updates via signals for scrolling, dragging, and sensitivity adjustments, working directly with `Gtk.range` objects and enums like `sensitivity_type`. You can set fill levels, invert direction, or link range behavior to dynamic data updates in real time. Submodules extend configuration options and user interaction handling, making it possible to fully customize and respond to range-based UI elements.",
      "description_length": 631,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Color",
      "library": "lablgtk3",
      "description": "This module provides functions to extract RGB and pixel values from color objects, as well as parsing and converting colors to strings. It operates on the `Gdk.color` data type, representing colors in a format suitable for graphical rendering. Use cases include color manipulation in GUI applications, such as extracting component values for display or converting user-input color strings into usable color objects.",
      "description_length": 415,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextView",
      "library": "lablgtk3",
      "description": "This module creates and configures text views with support for editing, cursor visibility, justification, wrapping, and tab handling, working directly with `Gtk.text_view` objects. It provides functions to build parameter lists with optional properties and integrates with submodules for advanced text formatting, layout control, and user interaction. The first submodule configures formatting, input behavior, and layout using `textview`, `adjustment`, and `text_buffer`, enabling dynamic adjustments in interfaces like document editors. The second submodule connects input events to editing actions, supporting cursor movement, text selection, clipboard operations, and overwrite mode for rich text editing.",
      "description_length": 709,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain.Rc",
      "library": "lablgtk3",
      "description": "Handles loading and parsing of configuration files for application settings. Works with strings and file paths to manage key-value pairs and section-based data. Used to initialize application preferences from standard configuration files like `.gtkrc`.",
      "description_length": 252,
      "index": 213,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.TreeView",
      "library": "lablgtk3",
      "description": "This module organizes hierarchical data into a navigable structure, supporting custom rendering and interaction through models and views. It enables drag-and-drop operations across views with configurable targets and actions, and allows associating tooltips with cells or rows to display contextual information. You can reorder tree nodes via drag-and-drop, transfer items between different views, and show custom tooltips based on cell content or position. The module also provides access to cell-specific data for dynamic rendering and event handling.",
      "description_length": 553,
      "index": 214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkWindow.Window",
      "library": "lablgtk3",
      "description": "This module enables creation and manipulation of GUI windows through state control (maximizing, fullscreen), geometric adjustments (resizing, positioning), and visual configuration (decorations). It directly operates on window objects to manage user interaction patterns like mnemonic key handling, focus management, and accelerator groups. Developers use it to implement top-level application windows with customized behavior for tasks like dialog presentation, main interface layout, and window manager integration.",
      "description_length": 517,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextBuffer",
      "library": "lablgtk3",
      "description": "This module manages text buffers with support for tagged text, custom parameters, and integration with GTK text buffers and GObject. It provides core operations for buffer creation, styled text insertion, serialization, and event handling, while its submodules offer fine-grained control over tag tables, cursor position, and selection state. Additional functionality includes inserting text and media, applying formatting tags, managing user actions, and implementing undo/redo. Together, these features enable the development of rich text editors with interactive styling, selection-based operations, and synchronized UI feedback.",
      "description_length": 632,
      "index": 216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeSelection",
      "library": "lablgtk3",
      "description": "This module manages selections in tree views, enabling operations to cast objects to tree selection types and access selection state through a dedicated submodule. It works with `Gobject.obj` and `Gtk.tree_selection` to track selected rows, supporting actions like editing or deleting selected items based on user interaction. The integrated signal handler detects selection changes, allowing immediate updates to UI elements or data displays in response to user navigation within hierarchical data. Direct API functions combined with the submodule provide both configuration and real-time monitoring of selection state.",
      "description_length": 620,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GDraw.Cairo",
      "library": "lablgtk3",
      "description": "Handles low-level Cairo drawing operations on offscreen drawable surfaces. Provides functions for creating and manipulating Cairo contexts tied to GDK windows, enabling precise 2D rendering tasks like path drawing, text layout, and pixel manipulation. Useful for implementing custom widgets or exporting graphical content to image files.",
      "description_length": 337,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Calendar",
      "library": "lablgtk3",
      "description": "This module creates and manages calendar widgets, enabling date selection, day marking, and display customization through `Gtk.calendar` objects. It supports direct manipulation of date components like day, month, and year, and integrates event handling for user interactions such as clicks and navigation. You can retrieve the currently selected date, highlight specific days, and connect callbacks to respond to date changes or month transitions. Practical applications include building date pickers and scheduling interfaces with visual feedback.",
      "description_length": 549,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Event",
      "library": "lablgtk3",
      "description": "Handles event retrieval and propagation in GUI applications. Works with GdkEvent and Gtk widget types to manage user interactions. Used to process input events like clicks or key presses and route them to the appropriate UI components.",
      "description_length": 235,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Glib.Idle",
      "library": "lablgtk3",
      "description": "This module manages idle functions in the main event loop, allowing deferred execution of callbacks. It provides operations to add and remove idle handlers, which run when the system has no higher-priority events to process. Use it to schedule non-urgent tasks like UI updates or background processing without blocking the main loop.",
      "description_length": 333,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GTree.Path",
      "library": "lablgtk3",
      "description": "This module provides functions to create, modify, and query tree paths, which represent positions within a hierarchical tree structure. It supports operations like navigating to adjacent or parent nodes, converting paths to and from strings, and checking hierarchical relationships. Concrete use cases include managing selections in a GUI tree widget and synchronizing tree navigation with external data models.",
      "description_length": 411,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.SpinButton",
      "library": "lablgtk3",
      "description": "This module manages numeric input through customizable spin button UI elements, combining direct control over creation, value manipulation, and behavior configuration with advanced interaction handling via its child modules. It supports key operations such as setting bounds, adjusting input policies, capturing value changes, and validating user input, centered around data types like adjustments, numeric values, and policy enums. You can use it to build form fields that enforce specific numeric ranges, respond to input changes in real time, or format displayed values with custom precision. The integration of widget properties and event handling enables fine-grained control over both appearance and behavior in interactive GUI applications.",
      "description_length": 747,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps.Container",
      "library": "lablgtk3",
      "description": "This module manages child widgets within a container, supporting operations like adding, removing, and iterating over children, adjusting layout parameters, and setting focus properties. It provides direct access to container properties such as border width, child widget, and resize mode, while also handling signals for dynamic updates like child addition, resizing, and focus changes. You can use it to build custom containers, implement layout logic, or manage focus navigation in GUI applications. The combination of direct API methods and signal handling enables both static configuration and runtime interaction with container widgets.",
      "description_length": 642,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.AboutDialog",
      "library": "lablgtk3",
      "description": "This module implements an about dialog for GTK applications, allowing display and configuration of application metadata. It provides functions to set and retrieve artists, authors, and documenters, as well as to configure dialog content through parameters like version, license, and website. Concrete use cases include showing application credits, licensing information, and developer acknowledgments in a structured dialog interface.",
      "description_length": 434,
      "index": 225,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.MenuShell",
      "library": "lablgtk3",
      "description": "This module organizes and manipulates menu shells in a graphical interface, enabling the dynamic creation and management of menu structures such as dropdowns and context menus. It supports adding, removing, and positioning menu items, while its child module handles navigation and activation through signals like `activate_current` and `move_current`. Together, they allow building interactive menus with custom layouts and responsive user input handling. For example, you can create a dropdown menu that reacts to keyboard navigation or a context menu that updates dynamically based on user actions.",
      "description_length": 600,
      "index": 226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellLayout",
      "library": "lablgtk3",
      "description": "This module manages the layout and rendering of cells within a tree view by providing functions to add, remove, and reposition cell renderers. It supports operations like setting packing order, attribute mappings, and dynamic data functions for custom rendering. It works directly with tree models and cell renderers to configure how data is displayed in structured tree or list views.",
      "description_length": 385,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRenderer",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of cell renderers for tree views, enabling customization of visual properties like background color, alignment, and size through GObject-based parameters. It supports operations to convert and set property values on `Gtk.cell_renderer` objects, allowing precise control over cell appearance and behavior. With its submodules, it provides a structured way to define and apply styling and layout attributes to individual cells. Examples include rendering text with custom fonts, displaying toggles with specific padding, or adjusting image alignment within a tree view row.",
      "description_length": 622,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.ComboBox",
      "library": "lablgtk3",
      "description": "This module manages combo box widgets with support for dynamic content, row separators, and custom rendering through associated tree models. It allows setting active items, configuring layout properties, and handling user selections through signal callbacks. You can create dropdown menus with custom row layouts, bind data models to combo boxes, and respond to selection changes with specific actions. Key operations include setting the active index, attaching tree models, enabling entry, and connecting change handlers for interactive UIs.",
      "description_length": 542,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Table",
      "library": "lablgtk3",
      "description": "This module manages table layouts in GUI applications, enabling precise placement of widgets using attachment parameters like padding, spacing, and alignment. It operates on `Gtk.table` and `Gtk.obj` types, offering functions to configure rows, columns, and sizing behavior. The child module extends this by defining properties to control table behavior, such as homogeneity and spacing, allowing dynamic adjustment of layout characteristics. Together, they support building structured, grid-based interfaces with fine-grained control over widget positioning and table appearance.",
      "description_length": 580,
      "index": 230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkStock.Icon_source",
      "library": "lablgtk3",
      "description": "This module creates and configures icon sources for use in GTK user interfaces. It allows setting icon properties such as filename, pixbuf, direction, state, and size, with support for wildcarding these properties to apply broadly across different contexts. It is used to define how icons should be displayed in buttons, menus, and toolbars based on predefined stock items.",
      "description_length": 373,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Unichar",
      "library": "lablgtk3",
      "description": "This module provides functions for Unicode character manipulation, including case conversion, classification, and validation. It operates on the `Glib.unichar` type, representing individual Unicode characters. Use cases include text processing, character validation, and converting characters between cases or to numeric values.",
      "description_length": 328,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.IconView",
      "library": "lablgtk3",
      "description": "This module creates and manages icon views for displaying items visually, supporting selection, path retrieval, and item activation. It works with tree models and paths to enable interfaces like file browsers or media galleries with multiple selectable icons. The signal submodule connects user interactions, such as clicks and selection changes, to custom handlers, enabling responsive behavior when items are activated or modified. The property submodule configures layout aspects like spacing, orientation, and selection mode, allowing precise control over visual appearance and interaction styles in grid-based icon displays.",
      "description_length": 629,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkData.AccelGroup",
      "library": "lablgtk3",
      "description": "This module manages keyboard accelerators for GUI applications. It allows creating, locking, and unlocking accelerator groups, connecting and disconnecting key combinations with callbacks, and activating accelerators based on key events. Use cases include implementing shortcut keys in applications, such as Ctrl+S for saving or Alt+F4 for closing windows.",
      "description_length": 356,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.LinkButton",
      "library": "lablgtk3",
      "description": "This module creates and manages link buttons in a GUI toolkit, supporting configuration of properties like URI and label. It integrates event handling through a signal callback for link activation, enabling custom responses when links are clicked. The module provides direct access to a link button's URI, allowing dynamic retrieval or modification of its target address. For example, you can create a button that opens a documentation URL in the browser or triggers an in-app navigation when activated.",
      "description_length": 503,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Key",
      "library": "lablgtk3",
      "description": "This module handles key press and release events, providing access to key symbols, hardware codes, and modifier states. It works with event structures that include timing, key values, and input state information. Use it to implement keyboard input handling in GUI applications, such as detecting shortcut keys or processing text input.",
      "description_length": 335,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Tags",
      "library": "lablgtk3",
      "description": "This module defines polymorphic variant and enumerated types to represent GUI-related concepts like event categories, window attributes, input device states, and drag-and-drop protocols. These types enable type-safe handling of window management operations, event filtering with masks, and device interaction tracking in graphical applications. They are specifically used for tasks like configuring window behaviors, processing user input events, and implementing cross-platform GUI interactions in OCaml programs utilizing GTK bindings.",
      "description_length": 537,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Io",
      "library": "lablgtk3",
      "description": "This module manages input/output operations on file descriptors using event-driven callbacks. It supports monitoring channels for conditions like input readiness or errors, enabling non-blocking I/O integration with the main loop. Concrete use cases include handling socket communication, file monitoring, and asynchronous data reading without blocking execution.",
      "description_length": 363,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.MenuItem",
      "library": "lablgtk3",
      "description": "This module manages the creation and behavior of menu items, allowing developers to build interactive, hierarchical menus with support for submenus, keyboard accelerators, and toggle states. It provides core operations to activate items, set or retrieve submenu attachments, and configure visual properties, working directly with GTK widget abstractions. The child module enhances interactivity by exposing signals like `activate` and `activate_item`, enabling callbacks to respond to user selections or trigger application-specific logic. For example, a menu item can be configured to open a submenu on hover, execute a command on click, or update its state based on application data through connected signal handlers.",
      "description_length": 719,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring editable widgets in a GUI toolkit. It provides `has_frame`, a boolean property indicating whether a widget displays a frame, and `model`, which associates a widget with a tree model for data binding. These properties are used to customize the appearance and data behavior of UI components like combo boxes or entry fields.",
      "description_length": 369,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeSelection",
      "library": "lablgtk3",
      "description": "This module manages selection logic for tree views, providing functions to control selection modes, query selected rows, and manipulate selections programmatically. It operates on `Gtk.tree_selection` objects, working directly with tree paths and iterators to enable precise selection updates. Concrete use cases include implementing custom selection behaviors, retrieving user-selected items, and synchronizing UI elements with selection state.",
      "description_length": 445,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText.Iter",
      "library": "lablgtk3",
      "description": "This module enables precise inspection, navigation, and manipulation of text iterators within a rich text buffer, focusing on structured traversal and positional analysis. It provides operations to query text properties (tags, marks, embedded content), move bidirectionally by textual units (characters, words, lines), and determine contextual attributes like editability, language, and boundary conditions. These capabilities are critical for implementing text editing workflows such as selection management, content search, and dynamic formatting in rich text interfaces.",
      "description_length": 573,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Main",
      "library": "lablgtk3",
      "description": "This module manages event loops for handling asynchronous events, providing functions to create, run, and terminate main loop instances. It works with the `t` type representing a main loop and a `locale_category` variant for localization settings. Concrete use cases include driving GUI applications by processing input events, scheduling timeouts, and managing locale configurations during runtime.",
      "description_length": 399,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.Layout",
      "library": "lablgtk3",
      "description": "This module organizes layout containers and their properties into a unified system for building complex, interactive UIs with precise positioning and sizing. It combines direct operations for placing and moving widgets with submodules that expose layout dimensions and scroll adjustments, enabling tasks like creating resizable windows with scrollable content or positioning elements in a diagram. Key data types include containers, adjustments, and coordinates, with operations to modify and query their state. Examples include implementing a scrollable text editor or a drag-and-drop interface within a custom window.",
      "description_length": 619,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.Box",
      "library": "lablgtk3",
      "description": "This module manages layout containers for arranging widgets in a horizontal or vertical orientation. It provides functions to create boxes, pack widgets at the start or end with specific parameters, reorder children, and query or modify packing properties. Concrete use cases include building user interfaces with structured widget layouts, such as toolbars, forms, or panels with controlled spacing and alignment.",
      "description_length": 414,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Scroll",
      "library": "lablgtk3",
      "description": "Handles scroll events in GUI applications, providing access to scroll position, direction, and input device details. Works with scroll events from input devices, exposing coordinates, delta values, and modifier states. Useful for implementing custom scrolling behavior or gesture recognition in graphical interfaces.",
      "description_length": 316,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Grab",
      "library": "lablgtk3",
      "description": "This module manages widget input grabs, allowing a widget to capture and handle all input events until released. It works with `GObj.widget` instances, tracking the current grabbed widget and providing direct control over event focus. Concrete use cases include implementing drag-and-drop interactions or modal dialogs that require exclusive input access.",
      "description_length": 355,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Gc_custom",
      "library": "lablgtk3",
      "description": "This module provides functions to control the speed of garbage collection, specifically `set_speed` to adjust the speed factor and `get_speed` to retrieve the current setting. It works with integer values to configure the garbage collector's behavior. This is useful in performance-sensitive applications where tuning garbage collection timing is necessary to avoid pauses or optimize throughput.",
      "description_length": 396,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Widget",
      "library": "lablgtk3",
      "description": "This module manages core widget operations in a GTK-based GUI toolkit, handling lifecycle events, visual properties, and interaction behaviors. It provides direct access to widget destruction, style retrieval, and GValue-based property manipulation, while submodules enable layout configuration, tooltip management, drag-and-drop handling, and rendering synchronization. Main data types include `Gtk.widget`, `Gdk.cairo`, and `Gtk.tooltip`, with operations for alignment, sensitivity, state transitions, and event handling. Examples include dynamically adjusting widget margins, enabling tooltips for user feedback, and implementing drag-and-drop workflows with custom rendering updates.",
      "description_length": 687,
      "index": 249,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Configure",
      "library": "lablgtk3",
      "description": "This module handles window resize and reposition events by extracting position and dimension data from event objects. It provides accessors to retrieve the x, y coordinates and width, height values from a configured event. Use it to respond to window geometry changes in GUI applications.",
      "description_length": 288,
      "index": 250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButton.RadioButton",
      "library": "lablgtk3",
      "description": "This module provides operations to create and manage radio button widgets within a GUI application. It allows constructing radio buttons with optional group associations and converting generic objects to radio button instances. Concrete use cases include building grouped selection interfaces, such as preference panels or multiple-choice forms.",
      "description_length": 345,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Socket",
      "library": "lablgtk3",
      "description": "This module integrates external widgets into GTK applications using socket containers, enabling dynamic embedding of third-party or runtime-loaded UI components. It provides `create` to set up socket widgets with custom parameters and `cast` to safely convert GObject instances to socket type, ensuring type safety during integration. The lifecycle module connects callbacks to plug addition and removal events, allowing precise control over dynamically loaded content such as plugins or modular interface elements. Together, these features support building flexible, extensible GTK interfaces with runtime-managed components.",
      "description_length": 626,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Proximity",
      "library": "lablgtk3",
      "description": "Handles proximity events from input devices, providing access to event type, timestamp, and associated device. Works with `GdkEvent` types specifically for proximity in and out events. Used to detect when a stylus or similar device enters or leaves the proximity area of a display.",
      "description_length": 281,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.CellLayout",
      "library": "lablgtk3",
      "description": "This module manages the layout and rendering of cells within a tree view by providing functions to add, remove, and reposition cell renderers. It supports operations like setting packing order, binding model data to cell attributes, and configuring custom data rendering logic. Use it to customize how rows and columns are displayed in a GtkTreeView, such as aligning text, icons, or interactive widgets within cells.",
      "description_length": 417,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainers.Container",
      "library": "lablgtk3",
      "description": "This module manages hierarchical relationships between UI components by providing operations to add, remove, and iterate over child widgets within a container. It supports containers and widgets from the Gtk library, enabling dynamic layout manipulation and property management for specific UI elements. Use cases include building custom widget hierarchies, implementing dynamic UI updates, and configuring child widget properties at runtime.",
      "description_length": 442,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Atom",
      "library": "lablgtk3",
      "description": "Handles interning and lookup of X11 atom identifiers, working with string names and Gdk.atom values. It provides direct access to predefined atoms like PRIMARY, SECONDARY, and CLIPBOARD, along with operations to convert between atom identifiers and their string representations. Useful for interacting with X11 properties and selection mechanisms in GUI applications.",
      "description_length": 367,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeView",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of hierarchical data displays using tree views, integrating models, visibility settings, and event handling. It supports direct manipulation of tree paths, iterators, and columns to control rendering, selection, and interaction behavior. The display submodule customizes UI aspects like expandable rows, column reordering, and tooltips, while the event submodule handles user actions such as row expansion, selection changes, and keyboard navigation. Use it to build interactive file browsers, data grids, or nested menus with dynamic layout and responsive feedback.",
      "description_length": 617,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Value",
      "library": "lablgtk3",
      "description": "This module manages `GValue` objects for storing and manipulating type-checked values in the GObject system. It supports operations like initializing, copying, transforming, and releasing values, along with getting and setting typed data such as integers, pointers, and boxed types. Concrete use cases include property handling in GObject-based libraries and interoperation with dynamically typed data in GTK or GStreamer.",
      "description_length": 422,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.MessageDialog",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of message dialogs, allowing customization of properties like message type, text, buttons, and styling. It directly supports operations to set images, message areas, and button layouts on `Gtk.message_dialog` objects, enabling precise control over dialog appearance and behavior. The child module extends this functionality by defining configurable properties and supporting rich text formatting, making it possible to display error messages with icons or confirmation prompts with styled text. Together, they provide a streamlined interface for building and modifying dialogs tailored to user interaction scenarios.",
      "description_length": 667,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scale",
      "library": "lablgtk3",
      "description": "This module creates and configures scale widgets with parameters like orientation, digits, value drawing, origin visibility, and value position, working directly with `Gtk.scale` objects. It supports customizing appearance and behavior, such as setting precision or controlling label visibility, and allows connecting signal handlers to format numeric values into strings for display. Submodule 1 defines properties for fine-grained control over scale display and positioning, while Submodule 2 enables custom string formatting for scale values, useful for logarithmic or percentage-based representations. Examples include building vertical sliders with hidden value labels or horizontal scales that display values in custom formats like percentages.",
      "description_length": 750,
      "index": 260,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps.Menu",
      "library": "lablgtk3",
      "description": "This module manages GTK menus with functions to create, display, and control menu behavior, including popping up menus at specific positions, setting active items, and integrating accelerators. It supports dynamic context menus and keyboard shortcuts, working directly with menu and menu item objects. The `tearoff_title` property allows setting custom titles for torn-off menus, while the scroll event handler adjusts menu display based on scroll type, enabling fine-grained control over scrolling in dropdown interfaces. Example uses include context menus with dynamic item activation, torn-off menus with custom labels, and scrollable dropdowns responding to wheel events.",
      "description_length": 675,
      "index": 261,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkTreeProps.TreeSortable",
      "library": "lablgtk3",
      "description": "This module manages sorting behavior for tree models in GUI applications, allowing users to set and retrieve sort columns, define custom sort functions, and trigger sort updates. It works with data types like `Gtk.tree_sortable`, `Gtk.tree_iter`, and `Gtk.Tags.sort_type`, enabling features such as sortable columns in tree views and dynamic reordering of hierarchical data. A child module provides a signal handler to track sort column changes, useful for updating the UI or reapplying sorting logic when users interact with column headers. Together, these components support implementing and maintaining complex sorting behaviors in interactive tree-based interfaces.",
      "description_length": 669,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.SeparatorToolItem",
      "library": "lablgtk3",
      "description": "This module creates and configures separator tool items for GTK toolbars, allowing insertion of visual dividers between tool groups. It supports constructing `Gtk.separator_tool_item` instances with custom properties, including a `draw` boolean that controls visibility. The `draw` property enables dynamic toggling of separator visibility based on runtime conditions such as user preferences. Example usage includes adding a hidden separator that becomes visible when a certain feature is activated.",
      "description_length": 500,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Cursor",
      "library": "lablgtk3",
      "description": "This module creates and manages cursors using predefined shapes or custom images. It supports operations to instantiate cursors from a pixel buffer and retrieve their visual representation. Use cases include setting custom mouse pointers in graphical applications or switching between standard cursor types like arrows, hands, or wait indicators.",
      "description_length": 346,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Rc",
      "library": "lablgtk3",
      "description": "Handles loading and parsing of GTK+ resource files. Works with string paths and configuration data. Used to apply theme or interface settings from files or raw strings.",
      "description_length": 168,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.EntryCompletion",
      "library": "lablgtk3",
      "description": "This module enables autocompletion in text entry widgets by integrating user input with data models, allowing configuration of completion triggers and interaction logic. It provides key data types like entry completion objects and tree models, with operations to set minimum input lengths, bind data sources, and handle selection events. You can use it to implement search-as-you-type interfaces, form auto-filling, or context-aware suggestion dropdowns by connecting entry widgets to data models and defining custom behaviors on item selection. Submodules refine this functionality by managing configuration properties and handling user-driven actions and matches through event callbacks and filters.",
      "description_length": 701,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Combo",
      "library": "lablgtk3",
      "description": "This module enables the creation and configuration of type-safe combo boxes with customizable behavior, such as case sensitivity and arrow key navigation, using GObject and Gtk.combo types. It provides direct access to properties that control empty input validation and user interaction, allowing developers to define strict or flexible selection rules. The child module enhances this functionality by exposing boolean flags to fine-tune runtime behavior, such as whether the combo box accepts new entries or restricts input to predefined options. Together, they support building rich, interactive dropdown interfaces with precise control over data entry and navigation.",
      "description_length": 670,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.SizeGroup",
      "library": "lablgtk3",
      "description": "This module manages size grouping for UI elements, ensuring consistent dimensions across widgets like buttons or labels in dialogs and toolbars. It allows creating and configuring size groups, adding or removing widgets, and setting group behavior through modes. The included property handles mode configuration, supporting `size_group_mode` to control sizing behavior, such as uniform width or height across grouped elements. Example uses include aligning toolbar buttons to the same height or making dialog labels and inputs share a common width.",
      "description_length": 548,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps.Entry",
      "library": "lablgtk3",
      "description": "This module creates and configures entry widgets with support for text, visibility, placeholder content, and input completion. It exposes direct operations to set and retrieve entry properties and connect handlers for user interactions like text changes, cursor movement, and icon clicks. Child modules refine appearance, behavior, and event handling, enabling tasks like input validation, tooltip customization, and clipboard integration in GUI applications.",
      "description_length": 459,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.ProgressBar",
      "library": "lablgtk3",
      "description": "This module manages progress bar widgets, allowing creation, parameter configuration, and animation control such as pulse steps and indeterminate progress. It supports `Gtk.progress_bar` objects and integrates with property settings for appearance customization like text visibility, inversion, and ellipsizing. You can update progress based on task completion, display custom text, or start pulsing animations. Submodule properties enable fine-grained control over visual behavior using GObject and Pango types.",
      "description_length": 512,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkActionProps.ToggleAction",
      "library": "lablgtk3",
      "description": "This module manages toggle actions that can be activated or deactivated, primarily working with `Gtk.toggle_action` objects to control and monitor their state. It provides direct access to setting and querying the active state, along with emitting the toggled signal, enabling UI elements like checkboxes or toggle buttons to maintain state. The `draw_as_radio` property allows rendering toggle actions as radio buttons for visual customization in menus or toolbars, while the `toggled` signal handler connects callbacks to respond to state changes from user interaction. Together, these features support both the behavior and appearance of toggle-based UI components.",
      "description_length": 668,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps.Action",
      "library": "lablgtk3",
      "description": "This module manages UI actions by creating, activating, and configuring them with support for accelerators, visibility, and sensitivity controls. It works directly with `Gtk.action` objects, allowing dynamic updates to labels, icons, tooltips, and UI state through properties and event handlers. You can bind keyboard shortcuts to actions, enable or disable UI elements based on action state, and connect user events like clicks to action activation. Submodules provide fine-grained property access and event binding, enabling precise control over action behavior and integration with GUI components.",
      "description_length": 600,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Main",
      "library": "lablgtk3",
      "description": "Initializes the library and sets the locale, runs the main event loop, and provides a way to quit the loop. Works with unit values and returns a string for the locale name. Used to start and manage the lifecycle of a GUI application.",
      "description_length": 233,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.GtkStatusIcon",
      "library": "lablgtk3",
      "description": "This module manages status icons in a graphical interface, enabling creation from pixbufs, files, or stock items and offering operations to adjust size, screen association, visibility, and tooltips. It integrates properties for configuring icon behavior and signals for handling user interactions like activation, resizing, and context menu display. Concrete use cases include implementing system tray icons with dynamic visibility, custom tooltips, and responsive click handlers. The combined API supports both direct manipulation of icon state and event-driven updates through submodules.",
      "description_length": 590,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.Plug",
      "library": "lablgtk3",
      "description": "Creates a new top-level window that embeds a given GObject, allowing it to be integrated into a GTK+ interface as a plug-in component. Works with GObject-based widgets and GTK+ windowing structures. Useful for embedding external widgets or custom UI elements into a GTK+ application window.",
      "description_length": 290,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.Internal",
      "library": "lablgtk3",
      "description": "This module provides low-level operations for converting and copying `Gtk.tree_path` values, primarily used in handling tree model paths within GTK+ bindings. It works directly with `Gtk.tree_path` and `Gobject.data_conv` types, enabling efficient data transformation and duplication. Concrete use cases include managing hierarchical tree selections and path manipulations in GUI components like tree views.",
      "description_length": 407,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module provides a property for setting the shadow type of a widget, which controls how the widget's border is rendered. It works with the `GtkEnums.shadow_type` enumeration to define visual styles like `None`, `In`, `Out`, `EtchedIn`, and `EtchedOut`. A concrete use case is customizing the appearance of containers or buttons to match specific UI themes or states.",
      "description_length": 370,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module provides a property for inverting the direction of a range widget, such as a scrollbar or slider. It works with boolean values to control the visual and behavioral orientation of the widget. Concrete use cases include adjusting UI elements to right-to-left layouts or custom control behavior.",
      "description_length": 304,
      "index": 278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gdk.Screen",
      "library": "lablgtk3",
      "description": "This module provides functions to retrieve the dimensions of a screen, obtain its Pango context for text rendering, and access the default screen. It operates on the `Gdk.screen` type, which represents a physical screen. Concrete use cases include adjusting window sizes based on screen resolution and setting up text rendering contexts for GUI elements.",
      "description_length": 354,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines property accessors for text formatting and layout attributes in a GUI toolkit. It provides direct manipulation of text buffer properties such as margins, justification, wrapping, and spacing. These properties are used to configure text display behavior in text view components.",
      "description_length": 297,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile.FileFilter",
      "library": "lablgtk3",
      "description": "This module creates and configures file filters for GUI file selection dialogs. It supports operations to set and retrieve filter names, and to add filtering rules based on MIME types, filename patterns, or custom logic. It works directly with `Gtk.file_filter` objects, enabling precise control over which files are displayed in file choosers, such as restricting to image files or specific document types.",
      "description_length": 407,
      "index": 281,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "GtkFile.FileChooser",
      "library": "lablgtk3",
      "description": "This module supports configuring file selection interfaces with operations to set and retrieve file paths, URIs, and folder navigation states, while enabling programmatic selection of items within a `Gtk.file_chooser` object. It also manages metadata like file filters, custom shortcut folders, and preview handlers, allowing creation of tailored file dialogs for scenarios such as document import/export or media asset browsing. The functionality integrates with GTK's dialog and widget hierarchy to build interactive file management workflows.",
      "description_length": 545,
      "index": 282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Visibility",
      "library": "lablgtk3",
      "description": "This module handles visibility change notifications in GUI applications. It provides a function to cast generic events to visibility-specific events and retrieves the visibility state from them. Use it to respond to window visibility changes, such as when a window becomes fully visible or obscured.",
      "description_length": 299,
      "index": 283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.RadioToolButton",
      "library": "lablgtk3",
      "description": "This module manages radio tool buttons and their grouping behavior, enabling the creation of mutually exclusive toggle buttons that share a common state. It supports direct operations like setting button properties and retrieving group associations, while its child module specifically handles group management, allowing buttons to be added to or removed from a shared radio group. Main data types include `Gtk.radio_tool_button` and group identifiers, with key operations for initializing buttons and synchronizing their group membership. For example, it can be used to implement a toolbar where selecting one text alignment option automatically deselects the others.",
      "description_length": 668,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton.LinkButton",
      "library": "lablgtk3",
      "description": "This module implements buttons that display hyperlinks, allowing users to navigate to specific URLs when clicked. It provides functions to create link buttons with or without custom labels, and to cast generic GObject instances to link button objects. Direct use cases include embedding clickable web links in GUI applications and dynamically converting UI elements into link buttons.",
      "description_length": 384,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.Button",
      "library": "lablgtk3",
      "description": "This module creates and configures button widgets with properties like label, stock image, underline, and relief style, operating directly on `Gtk.button` objects. It provides type-safe property access through submodules that allow setting focus behavior, image display, and label alignment, enabling precise control over appearance and interaction. Event handling is supported through signal definitions for actions like click, hover, and activation, making it possible to attach callbacks for dynamic behavior such as form submission or visual feedback. Examples include building buttons with custom icons, underlined text, and responsive actions on user interaction.",
      "description_length": 669,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.ListStore",
      "library": "lablgtk3",
      "description": "This module implements a mutable list data structure for storing rows of typed data, supporting dynamic row insertion, removal, and value updates. It operates on `Gtk.list_store` objects with rows identified by `Gtk.tree_iter` and columns defined by GType values. It is used to manage data for tree or list views in GUI applications, enabling direct manipulation of rows and cell values.",
      "description_length": 387,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Cairo",
      "library": "lablgtk3",
      "description": "Creates a Cairo context for rendering graphics on a Gdk window. Works with Gdk window objects to enable low-level drawing operations. Useful for implementing custom widget rendering or direct window surface manipulation.",
      "description_length": 220,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToggleToolButton",
      "library": "lablgtk3",
      "description": "This module manages toggle tool buttons, allowing creation with labels or icons and control over their active state. It supports handling state changes through the `toggled` signal, enabling actions like switching tools or applying formatting in a UI. You can create a button, set its initial state, and connect a function to run when the state changes. Common use cases include toolbar buttons for bold text or paintbrush tools that stay activated.",
      "description_length": 449,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Tooltip",
      "library": "lablgtk3",
      "description": "This module manages tooltip display and customization for GUI elements. It allows setting text, markup, icons, or custom widgets as tooltips, and controls when and where tooltips appear. Use cases include enhancing user interaction by providing contextual help, displaying formatted text or images as tooltips, and restricting tooltip visibility to specific widget areas.",
      "description_length": 371,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Viewport",
      "library": "lablgtk3",
      "description": "This module creates and configures viewport widgets for scrollable content, supporting shadow borders and integration with adjustment objects. It offers direct control over viewport parameters such as horizontal and vertical scrolling and shadow style. You can embed scrollable areas in UI layouts, adjust scroll behavior dynamically, and customize the visual appearance of viewport containers. The module combines direct viewport configuration with fine-grained adjustment and styling options through its submodules.",
      "description_length": 517,
      "index": 291,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererProgress",
      "library": "lablgtk3",
      "description": "This module renders progress bars within tree views, allowing direct visualization of task completion or data load status in UI tables. It provides functions to create and cast cell renderers, with key properties like `value` for numeric progress and `text` for optional labels. For example, you can set a row's progress to 75% and display \"75% complete\" alongside the bar. The module integrates these core controls with support for customizing appearance and behavior through its properties API.",
      "description_length": 496,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Dialog",
      "library": "lablgtk3",
      "description": "This module manages the creation and type conversion of dialog widgets, offering `create` for instantiating dialogs with custom properties such as buttons and content areas, and `cast` for safely converting generic objects into dialog instances. Its child module connects callback functions to dialog events, providing signals to handle closure and user responses, enabling actions like dismissing a dialog or reacting to button clicks. Together, they support building and managing modal or transient dialog windows with interactive behavior. For example, you can create a dialog with specific buttons and attach a callback to handle the user's selection upon dismissal.",
      "description_length": 670,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Glib.Message",
      "library": "lablgtk3",
      "description": "This module handles message logging with configurable log levels such as error, warning, and debug. It allows setting custom log handlers, controlling fatal error behavior, and filtering log messages by domain or level. Concrete use cases include redirecting error output to a file, suppressing non-critical logs, or integrating with external logging systems.",
      "description_length": 359,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.ColorSelection",
      "library": "lablgtk3",
      "description": "This module creates and configures color selection widgets with opacity control and palette visibility, supporting `Gtk.color_selection` objects and parameters like color, alpha, and control flags. It allows building custom color pickers with adjustable transparency and extended palette options, while child modules handle real-time color change callbacks and property management for UI customization. Operations include setting and retrieving color and alpha values, toggling UI controls, and connecting update handlers to refresh previews or apply new selections dynamically. Specific uses include integrating color pickers into GTK-based applications with live preview updates and configurable visibility settings.",
      "description_length": 718,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Tags",
      "library": "lablgtk3",
      "description": "This module defines types and conversions for text styling attributes like font weight, style, variant, and underline. It provides mappings between these types and their corresponding variant tables used for interoperation with lower-level rendering systems. Direct use cases include configuring text appearance in UI components such as labels or text views with precise typographic controls.",
      "description_length": 392,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.CustomModel",
      "library": "lablgtk3",
      "description": "This module implements a customizable tree model interface for hierarchical data displays. It allows defining dynamic row behaviors through callbacks for events like insertion, deletion, and reordering, while working with abstract row types and tree paths. Use it to build interactive UI components like file browsers or nested data editors where rows respond to structural changes.",
      "description_length": 382,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Grid",
      "library": "lablgtk3",
      "description": "This module organizes grid layouts in GUI applications, enabling precise placement of widgets in rows and columns with configurable spacing, homogeneity, and alignment. It provides operations to attach widgets to specific cells, set grid dimensions, and adjust layout behavior dynamically. The child module enhances this functionality by exposing fine-grained properties like row and column spacing, baseline alignment, and homogeneity controls. Together, they allow building responsive UIs where widgets resize and align consistently across different screen sizes or dynamic content changes.",
      "description_length": 592,
      "index": 298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButton.Button",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate button widgets, including setting labels, stock icons, and relief styles. It supports operations like simulating button presses, releases, and clicks, as well as handling mouse enter and leave events. Concrete use cases include building interactive UI elements such as action triggers or menu items in graphical applications.",
      "description_length": 381,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Markup",
      "library": "lablgtk3",
      "description": "Processes basic XML-like markup, handling structured text with tags, attributes, and content validation. Provides `escape_text` to sanitize strings for markup embedding, and reports parsing issues like malformed UTF-8, invalid elements, or bad attributes. Useful for generating or sanitizing simple XML snippets in GUI configurations or data serialization.",
      "description_length": 356,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Convert",
      "library": "lablgtk3",
      "description": "Handles conversion between integer flags and tagged values for modifier keys, window states, and similar low-level GUI event attributes. Works with integer bitmasks and enumerated tag types to extract or check specific flags. Useful for interpreting keyboard modifiers and window state changes in event handlers.",
      "description_length": 312,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkEditProps.Internal",
      "library": "lablgtk3",
      "description": "Handles marshaling of insert operations in text editing contexts, specifically for integrating with GObject closures. Works with string data and position references to manage text insertion points. Useful for implementing custom text input behaviors in GUI components like text editors or input fields.",
      "description_length": 302,
      "index": 302,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango.FontMap",
      "library": "lablgtk3",
      "description": "Loads a font based on the given description and context, returning a font object for rendering text. Works with `Pango.font_map`, `Pango.context`, and `Pango.font_description` types. Used to retrieve a specific font for text layout and rendering in GUI applications.",
      "description_length": 266,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Clipboard",
      "library": "lablgtk3",
      "description": "This module manages clipboard operations for transferring data such as text and images. It provides functions to set and retrieve clipboard contents, wait for specific data types, and handle asynchronous requests. Use cases include copying text to the system clipboard, pasting images, and handling custom clipboard formats in GUI applications.",
      "description_length": 344,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTextProps.TextMark",
      "library": "lablgtk3",
      "description": "This module manages text markers in a document buffer, allowing creation, visibility control, and property queries. It operates on text buffers and markers, providing functions to set and retrieve visibility, name, buffer association, and gravity. Use it to track positions in editable text, such as for cursor placement or selection bounds.",
      "description_length": 341,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Font",
      "library": "lablgtk3",
      "description": "This module enables creation and modification of font descriptions to define attributes like family, style, and size, with support for batch updates and string serialization. It also provides access to font metrics such as descent and character width, which are essential for precise text layout and rendering calculations. These capabilities facilitate configuring and measuring fonts in graphical applications requiring typographic control.",
      "description_length": 442,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps.FileChooser",
      "library": "lablgtk3",
      "description": "This module enables working with GTK file chooser widgets by providing casting operations and integrating configuration and event-handling capabilities through its submodules. It supports key data types like `file_chooser`, `file_filter`, and `widget`, allowing operations such as setting action modes, filtering files, and retrieving selected paths. The `P` submodule customizes dialog behavior with properties for visibility, file types, and selection modes, while the `S` submodule connects user actions like folder changes and file selections to application logic. Specific uses include restricting selectable files, enabling folder creation, and responding to user confirmations in file dialogs.",
      "description_length": 700,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPackProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring the layout behavior of container widgets, specifically controlling spacing and orientation. It provides direct access to `column_spacing`, `homogeneous`, `orientation`, and `row_spacing` as GObject properties. These are used to adjust how child widgets are arranged in grid-like containers, such as setting consistent spacing between elements or switching between horizontal and vertical layouts.",
      "description_length": 443,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.Adjustment",
      "library": "lablgtk3",
      "description": "This module manages numeric adjustments for GUI elements, providing functions to create and manipulate adjustment objects with parameters like bounds, step size, and page size. It works with floating-point values and GTK adjustment objects to control scrollbars, sliders, and similar UI components. Concrete use cases include setting up scrollable areas, configuring slider ranges, and adjusting viewport boundaries dynamically.",
      "description_length": 428,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreeStore",
      "library": "lablgtk3",
      "description": "This module manages hierarchical tree data structures, allowing dynamic creation, modification, and traversal of nodes with typed columns. It supports operations like inserting, removing, and reordering nodes, as well as setting and validating node values. Concrete use cases include implementing editable tree views in GUI applications, such as file browsers or structured data editors.",
      "description_length": 387,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow.Dialog",
      "library": "lablgtk3",
      "description": "This module manages dialog windows in a GUI application, providing functions to create dialogs, add buttons with associated response IDs, and control dialog behavior such as sensitivity and default responses. It works with `Gtk.dialog` objects and related structures like `Gtk.button_box` and `Gtk.box`. Concrete use cases include displaying modal dialogs for user confirmation, capturing input through custom buttons, and handling standard responses like OK or Cancel using predefined constants.",
      "description_length": 496,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTree.TreeViewColumn",
      "library": "lablgtk3",
      "description": "This module manages columns in a tree view, providing operations to create, configure, and manipulate columns with cell renderers. It supports sorting by setting sort column IDs, defining how cell data is displayed through data functions, and packing renderers with specific layout options. Concrete use cases include displaying tabular data with customizable rendering, enabling user-driven sorting, and embedding interactive elements like buttons within columns.",
      "description_length": 464,
      "index": 312,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "GtkMenuProps.RadioMenuItem",
      "library": "lablgtk3",
      "description": "Handles radio menu item group assignments and type casting. Works with `Gtk.radio_menu_item` objects and their groups. Use to cast generic menu items to radio menu items and set their associated group.",
      "description_length": 201,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Fixed",
      "library": "lablgtk3",
      "description": "This module provides functions to manage fixed positioning of widgets within a container. It allows creating a fixed container, placing widgets at specific coordinates, and repositioning them dynamically. Use this module when building custom layouts where precise control over widget placement is required, such as overlaying UI elements or implementing drag-and-drop interfaces.",
      "description_length": 379,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango.Context",
      "library": "lablgtk3",
      "description": "This module manages font rendering and text layout configurations. It provides functions to set and retrieve font descriptions, languages, and load fonts or font sets based on those settings. It is used to configure how text is displayed in graphical applications, such as setting font properties and retrieving metrics for precise text rendering.",
      "description_length": 347,
      "index": 315,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Focus",
      "library": "lablgtk3",
      "description": "Handles focus change events in GUI applications. Provides a function to check if an event indicates focus entering a window. Use when implementing custom focus behavior in UI components.",
      "description_length": 186,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Misc",
      "library": "lablgtk3",
      "description": "This module handles alignment and padding configurations for GTK widgets, offering functions to cast objects to a generic widget type and build parameter lists with optional layout values. Its core data types include alignment and padding properties like `xalign`, `yalign`, `xpad`, and `yp`, which control the positioning and spacing of UI elements within containers. You can use these operations to adjust the layout of buttons, labels, or other widgets in a GTK application. The child module extends this functionality by defining specific properties that refine how elements are aligned and spaced in the interface.",
      "description_length": 619,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBuilderProps.Builder",
      "library": "lablgtk3",
      "description": "This module enables the creation and manipulation of UI components from XML descriptions using a builder pattern, supporting dynamic interface construction from files or strings. It allows setting translation domains for internationalization, retrieving constructed objects by name, and configuring properties that handle string values for localized text. Concrete use cases include loading GTK+ interfaces from Glade files and embedding XML-defined UIs with runtime parameter customization. The module combines direct construction APIs with property management for flexible and localized GUI development.",
      "description_length": 605,
      "index": 318,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkText.Buffer",
      "library": "lablgtk3",
      "description": "This module enables structured text editing and formatting through operations like inserting, deleting, and styling text ranges with tags, managing bookmarks (marks), and handling selections or clipboard interactions. It works with text buffers, iterators for precise positioning, marks for persistent locations, tags for styling, and anchors for embedding widgets or images. Typical applications include rich text editors, code editors with syntax highlighting, or interactive document viewers requiring precise text manipulation and user-driven formatting.",
      "description_length": 558,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Icon_factory",
      "library": "lablgtk3",
      "description": "Manages icon sets for GUI elements using predefined stock identifiers. Associates string keys with `Gtk.icon_set` values for consistent icon display across toolbars and menus. Enables registering, retrieving, and removing icon sets, with support for default icon mappings.",
      "description_length": 272,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererPixbuf",
      "library": "lablgtk3",
      "description": "This module handles the rendering of pixbufs in tree view cells, allowing images, icons, and graphical elements to be embedded directly into GTK list or tree UI components. It provides functions to create and configure cell renderers, with properties for setting pixbufs, stock icons, and expander states to reflect visual changes like folder open/closed indicators. You can use it to display dynamic icons in a tree view, such as status indicators or interactive buttons, by directly setting image data or referencing predefined stock items. Submodule functionality extends these capabilities by enabling fine-grained control over visual properties and state-based rendering.",
      "description_length": 676,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain.Event",
      "library": "lablgtk3",
      "description": "This module handles event retrieval and propagation in GUI applications. It provides functions to access the current event time, retrieve the current event, extract the associated widget from an event, and propagate events to a widget. These operations are essential for managing user interactions and event-driven behavior in graphical interfaces.",
      "description_length": 348,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps.TextTagTable",
      "library": "lablgtk3",
      "description": "This module organizes and maintains a collection of `Gtk.text_tag` instances, enabling efficient addition, removal, and lookup of text tags by name. It supports dynamic text formatting by integrating event handling for tag changes through its child module, allowing real-time updates in rich text interfaces. You can create named tags for styling text regions, connect callbacks to tag modification events, and manage tag lifetimes within a text buffer.",
      "description_length": 453,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.StyleContext",
      "library": "lablgtk3",
      "description": "This module manages style contexts for GTK widgets, enabling the attachment of CSS providers with specific priorities to control styling precedence. It supports operations like adding or removing style classes, applying custom themes, and resetting widget appearance based on screen-level configurations. The priority constants submodule defines levels such as fallback, theme, and user, which dictate the order in which styles are applied. Together, these components allow dynamic styling adjustments, such as switching themes at runtime or highlighting widgets with custom CSS.",
      "description_length": 579,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps.Scrollbar",
      "library": "lablgtk3",
      "description": "This module provides functions to cast generic GObject instances to scrollbars and create new scrollbar widgets with specified orientation and properties. It operates on `Gtk.scrollbar` objects, which are used to manage user interaction for scrolling content in GUI applications. Concrete use cases include implementing vertical or horizontal scrollbars for text views, canvas areas, or custom scrollable interfaces.",
      "description_length": 416,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererToggle",
      "library": "lablgtk3",
      "description": "This module manages toggle cell renderers in GTK tree views, enabling interactive checkboxes or switches within rows. It provides direct access to boolean properties like `activatable`, `active`, and `radio`, allowing precise control over cell state and behavior. The `toggled` signal captures user interactions, passing the tree path to event handlers for responsive data updates. Together with its submodules, it supports both configuration and event-driven manipulation of boolean-valued cells in lists or trees.",
      "description_length": 515,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.CellRendererAccel",
      "library": "lablgtk3",
      "description": "This module manages cell renderer acceleration events in tree views, enabling direct handling of keyboard shortcuts within cells using `Gtk.cell_renderer_accel` objects. It provides functions to create and configure cell renderers with accelerator properties like key, mode, and modifier mask, supporting integer and enumeration types for precise input control. Signals from child modules capture accelerator edits or clears, allowing dynamic customization of key bindings in editable cells. Example uses include embedding shortcut configuration in settings tables or enabling inline keyboard shortcut editing in GUI applications.",
      "description_length": 630,
      "index": 327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.SizeGroup",
      "library": "lablgtk3",
      "description": "This module manages size groups for widgets, ensuring consistent sizing across multiple widgets. It provides functions to create size groups, add or remove widgets from them, and set parameters like size group mode. Use cases include aligning buttons or labels in different containers to maintain visual consistency.",
      "description_length": 316,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock.Icon_set",
      "library": "lablgtk3",
      "description": "Handles creation and manipulation of icon sets for UI elements. Uses `Gtk.icon_set` and `Gtk.icon_source` to manage visual representations of actions. Useful for customizing toolbar buttons or menu items with specific icons.",
      "description_length": 224,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData.CssProvider",
      "library": "lablgtk3",
      "description": "Loads CSS data into a provider for styling GTK widgets. It parses and applies cascading style sheets to user interface elements. Use when customizing the appearance of GUI components with specific styling rules.",
      "description_length": 211,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gtk.Tags",
      "library": "lablgtk3",
      "description": "This module provides polymorphic variant types to configure UI behavior and appearance across GTK components, encoding options for layout, alignment, state management, and interaction modes. These types define constants for widget properties like expansion policies, selection states, border styles, and event handling phases, consumed by containers, buttons, dialogs, and data views. They enable precise control over GUI elements in scenarios such as dynamic layout adjustments, error state propagation in file operations, and customizing user input handling in interactive widgets.",
      "description_length": 583,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeViewColumn",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of tree view columns in a GUI application, centering on `Gtk.tree_view_column` objects that can be customized through parameter lists. It supports setting key attributes such as title, sizing, visibility, and alignment, and allows defining interactive behaviors like sorting through a `clicked` event handler. You can, for example, create a resizable column with a custom title and alignment, then attach a sorting function to be triggered when the user clicks its header. Direct API functions and property accessors work together to enable both structural setup and dynamic adjustments to columns within a tree view widget.",
      "description_length": 675,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Closure",
      "library": "lablgtk3",
      "description": "This module manages closures and callbacks in the GObject type system, handling argument passing and return values through `Gobject.g_value` and related types. It provides functions to create closures from OCaml functions, extract and manipulate arguments by position, and set return values. Concrete use cases include implementing custom GObject signal handlers and wrapping OCaml functions for invocation from C-based GObject code.",
      "description_length": 433,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.AspectFrame",
      "library": "lablgtk3",
      "description": "This module manages aspect frames with alignment and aspect ratio constraints, working directly with `Gtk.aspect_frame` objects. It supports configuration through parameters like `obey_child`, `ratio`, `xalign`, and `yalign`, enabling precise control over layout behavior for elements such as image previews or video displays. The child module extends this functionality by providing properties to adjust aspect ratio and alignment on any `GObject` that supports these constraints, broadening the use cases beyond basic containers. Together, they allow developers to enforce fixed aspect ratios, align content within frames, and dynamically adjust layout properties based on child widget dimensions.",
      "description_length": 699,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Expose",
      "library": "lablgtk3",
      "description": "Handles expose events in GUI applications, providing access to the area needing redraw and the number of pending expose events. Works with `Gdk.event` and `Gdk.Rectangle.t` data types. Useful for optimizing screen updates by retrieving the exact region to refresh and batching redraw operations.",
      "description_length": 295,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring alignment and scroll adjustments in container widgets. It provides direct access to horizontal and vertical adjustments, shadow type, and alignment coordinates. These properties are essential for customizing the layout and scrolling behavior of UI elements like scrolled windows or panes.",
      "description_length": 335,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Property",
      "library": "lablgtk3",
      "description": "This module manages X11 window properties, allowing clients to set, retrieve, and delete properties on windows. It operates on `Gdk.window` and `Gdk.atom` values, using raw X data in the form of `Gdk.Tags.xdata`. Concrete use cases include storing and retrieving window metadata, such as application-specific hints or inter-process communication data.",
      "description_length": 351,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.ToolItem",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of tool items in a GTK toolbar, enabling precise control over layout and interaction through properties like homogeneity, expansion, and drag behavior. It directly operates on `Gtk.tool_item` objects, allowing dynamic adjustments to how items respond to resizing and user interactions. The child module extends this functionality by exposing boolean properties such as `is_important`, `visible_horizontal`, and `visible_vertical`, which determine the visibility and prominence of tool items in different orientations. Together, these components enable fine-grained customization of toolbar elements, such as adjusting a button's visibility based on screen orientation or controlling its drag-and-drop behavior within the application's interface.",
      "description_length": 796,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps.ColorButton",
      "library": "lablgtk3",
      "description": "This module creates and configures color buttons with properties like color, RGBA, and title, supporting UI elements such as color selection dialogs and swatches. It integrates with `Gtk.color_button` and provides structured configuration through properties like alpha transparency and editor visibility, using GDK color representations. Signal handling allows callbacks to respond to color changes, enabling real-time updates to application state or UI elements. Example uses include building custom color pickers and synchronizing interface components with selected color values.",
      "description_length": 581,
      "index": 339,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkBinProps.Alignment",
      "library": "lablgtk3",
      "description": "This module manages alignment and scaling properties for GTK widgets, enabling precise control over their positioning and size within containers. It provides functions to set and retrieve alignment values, scaling factors, and padding, operating on `Gtk.alignment` objects and GObject parameters. With support for both horizontal and vertical alignment, it allows developers to center, stretch, or anchor widgets like buttons and labels within panels or windows. Submodules extend this functionality to specific widget types, ensuring fine-grained layout customization across different UI elements.",
      "description_length": 598,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBaseProps.Adjustment",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of adjustment objects that control numerical value ranges, with support for setting lower and upper bounds, step increments, and current values. It integrates signal handling to trigger callbacks when values or configurations change, enabling dynamic synchronization of UI elements like scrollbars and sliders. The properties submodule allows precise manipulation of adjustment parameters, while the signals submodule reacts to user or programmatic changes in real time. Example uses include configuring scrollable areas, numeric input controls, and interactive data visualizations.",
      "description_length": 633,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Box",
      "library": "lablgtk3",
      "description": "This module manages box containers in a GUI toolkit, enabling creation, layout configuration, and dynamic reordering of child widgets with packing properties like expansion, filling, and alignment. It supports horizontal and vertical orientations, adjustable spacing, and homogeneous sizing, allowing interfaces to adapt at runtime. The child module exposes direct access to key layout properties\u2014homogeneous, spacing, and orientation\u2014enabling fine-grained control over box behavior during construction or modification of UI components. Example uses include arranging buttons in a toolbar, laying out form elements, or dynamically repacking widgets in response to user interaction.",
      "description_length": 681,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.ScrolledWindow",
      "library": "lablgtk3",
      "description": "This module creates and manages scrollable areas with configurable policies and viewport placement, integrating adjustments, scrollbars, and GTK widgets for dynamic content display. It supports operations like setting scroll policies, adjusting viewport corners, and embedding large widgets such as text views or canvases. The module handles user-driven scrolling and focus navigation through signal callbacks, enabling custom keyboard and scroll interactions. Key data types include `adjustment`, `policy_type`, `corner_type`, and `shadow_type`, used to control layout, appearance, and behavior of scrollable regions.",
      "description_length": 618,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps.Expander",
      "library": "lablgtk3",
      "description": "This module manages the creation and configuration of expander widgets, handling properties like label, spacing, and expansion state, and works with `Gtk.expander` objects and parameter lists for initialization. It supports building collapsible UI sections that can dynamically load content or update the interface when expanded or collapsed. The activate submodule connects user interactions, such as clicks, to expansion actions, enabling responsive UI behavior. The properties submodule provides direct control over visual and functional aspects, allowing developers to customize labels, spacing, and mnemonic support in graphical applications.",
      "description_length": 647,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GWindow.Buttons",
      "library": "lablgtk3",
      "description": "This module defines standard button configurations for dialog windows, providing values like `ok`, `close`, `yes_no`, and `ok_cancel` that represent common button combinations. It works with polymorphic variant types that include symbols such as `OK`, `CANCEL`, `YES`, `NO`, and others, tailored for use in dialog interactions. Concrete use cases include creating confirmation dialogs with `yes_no`, or file selection dialogs that use `ok_cancel` to capture user responses.",
      "description_length": 473,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.TreeModel",
      "library": "lablgtk3",
      "description": "This module manages hierarchical data structures for GUI applications, enabling the creation and manipulation of tree models with support for rows, columns, and dynamic updates. It provides core operations for casting objects to tree models and defines submodules that expose signals for tracking row changes such as insertion, deletion, and reordering, using `Gtk.tree_path` and `Gtk.tree_iter`. With these capabilities, developers can implement custom tree-based UI components that respond to data changes in real time. Example use cases include file browsers, organizational charts, and nested configuration editors.",
      "description_length": 619,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase.Widget",
      "library": "lablgtk3",
      "description": "This module manages UI components with core operations for lifecycle control, rendering, and event handling, working with structures like rectangles and colors to manipulate visual properties and hierarchical relationships. It supports dynamic property adjustments, tooltip display, and accelerator key configuration, enabling responsive interface design and user interaction handling. Submodules provide signal connections for lifecycle and window events, allowing custom logic binding to actions like resize or destruction, while another handles tooltips with support for Pango markup and custom display triggers. Examples include adjusting layout on resize events, showing contextual help via tooltips, and triggering cleanup logic when a widget is removed.",
      "description_length": 760,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring tree view columns in a GUI toolkit. It provides access to model, reorderable, visible, and width properties for tree structures. These properties control data binding, column reordering, visibility, and layout sizing in tree-based user interfaces.",
      "description_length": 294,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.MenuToolButton",
      "library": "lablgtk3",
      "description": "This module creates and configures menu tool buttons with arrow tooltips, supporting `Gtk.menu_tool_button` objects. It allows setting tooltip text or markup specifically on the button's arrow, enabling contextual help in toolbar dropdown buttons. The associated child module manages the `menu` property, enabling the attachment and retrieval of dropdown menus (`Gtk.menu`) to the tool button. Example usage includes building toolbar buttons that display a menu on click and show help text when hovering over the arrow.",
      "description_length": 519,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent.Property",
      "library": "lablgtk3",
      "description": "Handles X11 property change notifications with functions to extract event details. Works with `Gdk.atom` and `GdkEvent.Property.t` types to retrieve the associated property atom, event time, and state. Useful for tracking window property updates like title changes or geometry adjustments in GUI applications.",
      "description_length": 309,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Property",
      "library": "lablgtk3",
      "description": "This module provides direct access and manipulation of GObject properties through typed getters, setters, and notification control. It operates on GObject instances and their associated property metadata, enabling precise property value handling using `Gobject.g_value` and type-safe property definitions. Concrete use cases include dynamically modifying widget properties in GUI applications, implementing custom property change notifications, and constructing parameter lists for object initialization with optional or conditional properties.",
      "description_length": 544,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Visual",
      "library": "lablgtk3",
      "description": "This module manages low-level display visual types and their properties. It provides functions to query and select visuals based on color depth and type, such as `get_best` for finding the most suitable visual configuration. Use cases include configuring window visuals for rendering or ensuring compatibility with specific display hardware.",
      "description_length": 341,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Image",
      "library": "lablgtk3",
      "description": "This module creates and configures image widgets with support for sources like files, icons, pixbufs, and stock identifiers, allowing dynamic updates to image content and display properties such as size and fallback behavior. It includes utilities for building parameter sets to control rendering, enabling responsive and adaptable image presentation in GUIs. The child module provides accessors for modifying these properties at runtime, making it possible to switch themes, load external images, or adjust scaling based on context. Together, they support building and manipulating image displays that react to user input or application state changes.",
      "description_length": 652,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps.TreeModelFilter",
      "library": "lablgtk3",
      "description": "This module filters rows from a tree model based on a visibility function or column, transforming child and filtered iterators and paths to display subsets of hierarchical data. It exposes properties to access and manipulate the child model and virtual root path, supporting dynamic filtering and nested data representation. Operations include setting visibility conditions, mapping paths between models, and updating filtered views in real time. Example uses include showing only active items in a tree view or implementing search-based filtering in GUI applications with complex data hierarchies.",
      "description_length": 598,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.Toolbar",
      "library": "lablgtk3",
      "description": "This module manages toolbar components in a GUI application, supporting creation, modification, and querying of toolbars and their items. It allows inserting items at specific positions, retrieving item indices, and adjusting visual styles such as relief and icon size. The associated button properties module configures appearance aspects like icon size and toolbar style, enabling fine-grained control over button display and behavior. Interaction and styling events are handled through callbacks for style updates, focus changes, and context menus, allowing dynamic and responsive toolbar interfaces.",
      "description_length": 603,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBase.Object",
      "library": "lablgtk3",
      "description": "This module provides functions for creating and managing GObject-based UI objects, including casting between object types, reference management, and instantiation with class parameters. It operates on Gobject.obj instances, which represent GTK+ objects in OCaml. Concrete use cases include constructing widgets, safely casting objects to specific types, and managing object lifetimes in GUI applications.",
      "description_length": 404,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack.Table",
      "library": "lablgtk3",
      "description": "This module manages the layout of widgets in a grid using a table container. It provides functions to create tables, set spacing between rows and columns, and attach widgets to specific cells with alignment and padding options. Concrete use cases include building user interfaces with structured layouts, such as forms or dashboards, where precise widget placement is required.",
      "description_length": 377,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu.CheckMenuItem",
      "library": "lablgtk3",
      "description": "This module implements checkable menu items with activation state management. It provides functions to create items with labels or mnemonics, set their active state, and emit toggle events. Useful for building menu interfaces with selectable options like preferences or mode switches.",
      "description_length": 284,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.TreePath",
      "library": "lablgtk3",
      "description": "This module manages tree path manipulations for hierarchical data structures, providing operations to create paths from integer lists or strings, modify paths by appending or prepending indices, and navigate within a tree structure using movements like up, down, next, and previous. It supports direct access to path depth and indices, enabling precise traversal and comparison in tree-based user interfaces such as list views or file browsers. Concrete use cases include selecting or expanding specific nodes in a GUI tree widget or synchronizing UI elements with hierarchical data models.",
      "description_length": 590,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Gc_custom",
      "library": "lablgtk3",
      "description": "This module adjusts how custom memory blocks affect garbage collection timing by setting or retrieving a speed factor. It works directly with integer values to control GC cycle contribution, impacting performance in applications with frequent custom block allocations. Use it to fine-tune garbage collection behavior in GUI applications relying on precise memory management.",
      "description_length": 374,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Convert",
      "library": "lablgtk3",
      "description": "This module handles character set conversion between different encodings, providing functions like `convert` and `convert_with_fallback` for transforming byte sequences. It works with strings and supports operations such as converting between UTF-8 and the current locale's encoding, or handling filenames and URIs via `filename_to_uri` and `filename_from_uri`. Specific use cases include adapting text for system APIs requiring locale-specific encodings or safely translating file paths to and from URI formats.",
      "description_length": 512,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMain.Io",
      "library": "lablgtk3",
      "description": "This module manages I/O channels and event watches for handling asynchronous input and output operations. It works with file descriptors and channels, allowing clients to monitor conditions like data availability or write readiness using callbacks. Concrete use cases include implementing non-blocking socket communication and handling standard input/output streams in event-driven applications.",
      "description_length": 395,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Button",
      "library": "lablgtk3",
      "description": "This module handles button events in a graphical user interface, providing access to event details like the type of button press, coordinates, and device information. It works with event objects that represent button interactions, including single, double, and triple presses, as well as releases. Use this module to retrieve the position, time, and state of button events, or to modify event properties like type and button number.",
      "description_length": 432,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Separator",
      "library": "lablgtk3",
      "description": "This module creates and configures separator widgets with directional dividers, supporting horizontal or vertical orientation. It directly provides operations to construct separators and integrates the orientation property for dynamic layout adjustments. You can use it to insert visual dividers in toolbars, dialogs, or panels, for example by setting a separator's orientation to `horizontal` or `vertical` based on layout needs. The combined functionality allows precise control over UI structure and appearance through both direct configuration and property manipulation.",
      "description_length": 574,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMiscProps.Label",
      "library": "lablgtk3",
      "description": "This module manages label widgets for displaying and interacting with text in a GUI, supporting creation, text manipulation, and layout configuration through properties like justification, wrapping, and styling. It provides direct operations to set and retrieve text, select regions, and apply formatting, while child modules handle property configuration and user interaction signals. You can use it to display rich text with markup, enable text selection and copying, or adjust label layout dynamically based on window size. Specific applications include building form labels with mnemonics, dialog messages with selectable text, and UI elements that adapt text wrapping or ellipsization based on available space.",
      "description_length": 715,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib.Timeout",
      "library": "lablgtk3",
      "description": "This module schedules and manages one-time or recurring timeouts in the main event loop. It provides functions to add a timeout with a specified interval and callback, and to remove an existing timeout by its identifier. The module works with timeouts that return a boolean to indicate whether they should continue recurring, enabling precise control over event-driven tasks like animations or delayed actions.",
      "description_length": 410,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPack.Grid",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate grid layouts in a graphical user interface. It supports operations like creating a grid with specific spacing and homogeneity settings, and attaching widgets to specific positions within the grid. The module works directly with `Gtk.obj` instances representing grids and widgets, enabling structured UI composition.",
      "description_length": 371,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButtonProps.PrivateProps",
      "library": "lablgtk3",
      "description": "This module defines properties for configuring button widgets, including setting the button's label text, window title, and whether underscores in the label should be used for mnemonics. It works with GObject-based button instances and their string and boolean properties. Concrete use cases include customizing button appearance and behavior in GUI applications, such as setting a button's display text or enabling keyboard shortcuts via underlined characters.",
      "description_length": 461,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.Notebook",
      "library": "lablgtk3",
      "description": "This module manages notebook widgets for GUI applications, combining core operations for creating, modifying, and navigating pages with support for custom tab labels and dynamic interface behavior. It provides data types representing notebook pages and operations for insertion, removal, reordering, and label management, while its submodules handle events for page navigation and focus changes, and properties for visual configuration like tab visibility and layout. You can use it to build adaptable tabbed interfaces with custom scrollability, dynamic page updates, and responsive layout adjustments. Specific applications include implementing GTK-based editors with movable tabs and context-sensitive page content.",
      "description_length": 718,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Bin",
      "library": "lablgtk3",
      "description": "This module provides operations for working with bin containers in a GUI toolkit. It includes functions to cast objects to bin containers and retrieve the child widget they contain. Use this module when managing container-child relationships in widget hierarchies.",
      "description_length": 264,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit.Editable",
      "library": "lablgtk3",
      "description": "This module provides direct manipulation of editable text fields, enabling precise control over text selection, insertion, deletion, and clipboard interactions. It operates on `Gtk.obj` instances that implement the editable interface, such as text entries or text views. Concrete use cases include implementing custom input validation, auto-completion logic, and clipboard operations in GUI applications.",
      "description_length": 404,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobject.Data",
      "library": "lablgtk3",
      "description": "This module enables type-safe conversion and marshaling between OCaml values and GObject-compatible representations, supporting primitives, boxed types, GObject instances, and abstract data types. It operates on `GValue` containers, `GType` descriptors, and type converters to ensure safe data exchange. These functions are crucial for interfacing OCaml with GObject-based C libraries, particularly when handling properties, signals, or cross-language type serialization.",
      "description_length": 471,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk.Display",
      "library": "lablgtk3",
      "description": "Manages connections to graphical displays and provides access to windows under the pointer. Works with `Gdk.display` and `Gdk.window` types. Used to retrieve the default display and detect windows at specific screen coordinates.",
      "description_length": 228,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps.ButtonBox",
      "library": "lablgtk3",
      "description": "This module organizes buttons into containers with customizable layout properties, allowing control over alignment, spacing, and sizing behavior. It includes a layout submodule that defines styles like `button_box_style` to dictate how buttons are arranged and spaced within the container. You can set secondary alignment for individual buttons, adjust overall spacing, and apply non-homogeneous sizing to create toolbars or dialog footers with precise visual structure. For example, buttons can be aligned to the right while maintaining custom spacing and mixed sizes in a dialog window.",
      "description_length": 588,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistant.Assistant",
      "library": "lablgtk3",
      "description": "This module manages a multi-step assistant interface with operations to control pages, navigation, and visual elements. It works with `Gtk.assistant` objects and associated widgets, allowing insertion, retrieval, and configuration of pages including titles, images, and completion status. Concrete use cases include building setup wizards, configuration dialogs, and step-by-step user guidance interfaces.",
      "description_length": 405,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkBinProps.HandleBox",
      "library": "lablgtk3",
      "description": "This module creates and configures handle boxes for GTK UI components, allowing resizable and movable panels with customizable docking behavior. It supports parameters like handle position, snap edge, and shadow type, and integrates with Gobject to manage GTK handlebox widgets. The module handles events when child widgets are attached or detached, enabling dynamic UI layouts. For example, you can configure a panel that resizes based on handle position or triggers layout updates when a widget is moved.",
      "description_length": 506,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit.SpinButton",
      "library": "lablgtk3",
      "description": "This module provides functions to create and manipulate spin buttons, which are UI elements for selecting numeric values within a range. It supports operations like setting the value, adjusting the increment rate, and retrieving the current value as an integer. Concrete use cases include configuring numeric input fields in forms or adjusting settings in graphical applications.",
      "description_length": 379,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps.Window",
      "library": "lablgtk3",
      "description": "This module creates and manages GTK window objects, enabling configuration of state, positioning, and decoration, while offering direct access to properties like title, modality, icon, and window role. Its submodules provide fine-grained control over window attributes and support event handling for interactions such as activation, focus changes, and keyboard input. You can set a window's title, make it transient for another window, or respond to key presses and focus shifts. The module also supports advanced behaviors like setting urgency hints, controlling taskbar visibility, and specifying window types and hints for compositing or desktop environments.",
      "description_length": 662,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree.RowReference",
      "library": "lablgtk3",
      "description": "This module manages references to rows in a tree model using paths. It allows creating a stable reference to a specific row, retrieving the path of an existing reference, and checking if a reference remains valid. Concrete use cases include tracking selected rows across model updates or maintaining persistent access to tree nodes in GUI applications.",
      "description_length": 352,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEvent.Motion",
      "library": "lablgtk3",
      "description": "This module handles motion events in graphical user interfaces, providing access to cursor position, device state, and event timing. It works with event objects that carry motion data, including coordinates, axes, and input device information. Concrete use cases include tracking mouse movement, implementing drag-and-drop, and handling pointer interactions with precise coordinate and device state retrieval.",
      "description_length": 409,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTreeProps.CellRendererText",
      "library": "lablgtk3",
      "description": "This module renders text cells in tree views with precise control over appearance, layout, and interaction. It supports customization of font, color, alignment, and sizing, and integrates with tree path identifiers to manage dynamic updates and user edits. You can create interactive text displays that respond to changes, such as editable log entries or styled file listings. Submodules handle edit events and styling options, enabling real-time text modification and rich visual formatting in hierarchical data views.",
      "description_length": 519,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkMenuProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties, specifically working with objects and their associated properties in the GObject system. It handles property manipulation for GUI components like menus, enabling dynamic updates and configuration. Concrete use cases include adjusting menu item attributes at runtime or binding properties to signals in a type-safe manner.",
      "description_length": 421,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkText",
      "library": "lablgtk3",
      "description": "This module provides a comprehensive framework for building rich text interfaces with support for text views, buffers, and layout management. It enables precise manipulation of text content through iterators, marks, and tags, allowing operations such as insertion, deletion, styling, and embedding of widgets or images. The module supports advanced text navigation, selection handling, and coordinate transformations, making it suitable for applications like code editors, document viewers, and interactive text-based interfaces. Examples include implementing syntax highlighting, managing user selections, and dynamically adjusting text layout based on user input or display constraints.",
      "description_length": 688,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkBuilderProps",
      "library": "lablgtk3",
      "description": "This module provides direct access to GObject properties through `set`, `get`, and `param` operations. It works with GObject instances and their associated property types, allowing precise manipulation of object state and parameter construction. Use it to configure UI elements in GTK+ applications, such as setting button labels or retrieving entry text.",
      "description_length": 355,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GContainer",
      "library": "lablgtk3",
      "description": "This module provides functions for managing hierarchical relationships between UI widgets, specifically for adding, casting, and configuring container widgets. It operates on widget types like `Gtk.container` and `Gtk.widget`, enabling structured layout management. Concrete use cases include building complex UIs by nesting widgets within containers, setting layout parameters such as size and border width, and safely casting generic widgets to container types.",
      "description_length": 463,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkActionProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring UI elements in GTK+ applications, such as setting button labels or retrieving window sizes.",
      "description_length": 362,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTextProps",
      "library": "lablgtk3",
      "description": "This module initializes and manipulates properties for GTK text components, using GObject and parameter lists to conditionally apply optional values when configuring text buffers, tags, and views. It coordinates with submodules that manage styled text segments, embedded anchors, and text view configuration, enabling features like syntax highlighting, interactive widgets, and rich text editing. Key operations include building property lists, applying visual attributes, handling user input, and synchronizing buffer state with UI elements. Examples include inserting formatted text, embedding buttons in a text view, and dynamically adjusting layout or formatting in response to user actions.",
      "description_length": 695,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkWindow",
      "library": "lablgtk3",
      "description": "This module initializes and coordinates window management functionality across various types of GUI windows, including top-level windows, dialogs, about dialogs, and embedded plug windows. It provides core operations for creating and configuring windows with properties such as title, size, and transient state, while integrating submodules that handle specific behaviors like embedding GObject-based components, presenting structured application metadata, and managing modal interactions. Developers can build application main windows with custom layouts, display licensing details in standardized about dialogs, or create interactive confirmation dialogs with custom buttons and response handling. Additionally, it enables embedding external UI components into a GTK+ interface through plug windows, supporting integration with GObject-based widgets and structured window hierarchies.",
      "description_length": 886,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Glib",
      "library": "lablgtk3",
      "description": "This module provides core utilities for handling Unicode strings, managing event loops, and performing cross-platform operations. It supports UTF-8 string manipulation, character encoding conversion, and structured text processing, while integrating with event-driven I/O and timeout scheduling. You can validate and transform Unicode text, schedule background tasks and recurring events, and manage system paths and locales. Direct APIs for environment variables and user information combine with submodules for markup handling, logging, and I/O monitoring to enable GUI applications to process input, manage async operations, and maintain responsive interfaces.",
      "description_length": 663,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFile",
      "library": "lablgtk3",
      "description": "This module provides tools to customize and control file selection interfaces in GTK-based applications. It centers around two key data types: `Gtk.file_filter` for defining file visibility rules, and `Gtk.file_chooser` for managing user interaction with files and directories. You can create filters that restrict displayed files to specific MIME types or patterns, set default paths, enable previews, and programmatically select files or folders. Example use cases include building a media browser that shows only image files or an import dialog that defaults to a user's documents directory and previews selected files.",
      "description_length": 622,
      "index": 390,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkTreeProps",
      "library": "lablgtk3",
      "description": "This module provides functions to set and get GObject properties, create parameters for property configuration, and define specific parameters for GTK cell renderers. It operates on GObject instances and supports data types like strings, integers, floats, colors, pixbufs, and enumerated values. Use it to customize cell renderer appearance and behavior in tree views, such as setting text formatting, background colors, toggle states, or progress bar values.",
      "description_length": 459,
      "index": 391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GDraw",
      "library": "lablgtk3",
      "description": "This module enables offscreen drawing using Cairo graphics, supporting both predefined colors and custom RGB values to render shapes, text, and images on drawable surfaces. It provides direct access to Cairo contexts for low-level 2D rendering tasks such as path drawing, text layout, and pixel manipulation, particularly useful for custom widget implementation or exporting graphics to image files. Submodules extend this functionality by managing GDK window contexts and enabling precise control over rendering operations. Example uses include generating UI graphics, pre-rendering game scenes, and exporting visual content to file formats like PNG.",
      "description_length": 651,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GAction",
      "library": "lablgtk3",
      "description": "This module implements action-based user interfaces with support for creating and managing actions, toggle actions, and radio actions. It works with data types like `action`, `toggle_action`, and `radio_action`, organizing them into groups and managing their UI representation. Concrete use cases include building menus and toolbars where actions trigger specific behaviors, such as opening files, switching modes, or adjusting settings.",
      "description_length": 437,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GData",
      "library": "lablgtk3",
      "description": "This module handles data-carrying objects such as adjustments and clipboards. It provides functions to create and convert adjustments with parameters like value, bounds, and step increments, and to manage clipboard instances using Gdk atoms. These are used to control numeric value ranges in UI components and handle copy-paste operations, respectively.",
      "description_length": 353,
      "index": 394,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "GtkContainers",
      "library": "lablgtk3",
      "description": "This module organizes UI components into hierarchical structures using Gtk containers, allowing dynamic management of child widgets through addition, removal, and iteration. It provides operations to manipulate layout and properties of UI elements at runtime, supporting flexible interface construction. Examples include building custom widget trees, updating UI components dynamically, and configuring child widget attributes within a container. Key data types are containers and widgets, with operations for traversal and property adjustment.",
      "description_length": 544,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkContainersProps",
      "library": "lablgtk3",
      "description": "This module provides functions to conditionally add GObject properties to parameter lists based on optional values, particularly for GTK container widgets. It supports operations on property types and parameter lists, allowing properties like spacing or margins to be set only when values are present. The child module extends this functionality by managing child widgets, offering methods to add, remove, and iterate over children, adjust layout parameters, and handle focus and resize modes. Together, they enable constructing and configuring custom containers with dynamic layout logic and responsive GUI behavior, such as setting margins conditionally and updating child arrangements at runtime.",
      "description_length": 699,
      "index": 396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkObject",
      "library": "lablgtk3",
      "description": "This module provides functions for creating and managing GObject-based UI elements with specific class types. It supports operations like casting objects to a common UI type, increasing reference counts, and instantiating objects with parameterized properties. Concrete use cases include constructing GTK widgets such as buttons or windows with custom configurations.",
      "description_length": 367,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkData",
      "library": "lablgtk3",
      "description": "This module provides tools for managing the visual appearance and interactive behavior of GUI components in a GTK+ application. It supports styling through CSS and direct color manipulation, handles keyboard accelerators and adjustments for scrollable elements, and allows configuration of keybindings and style contexts with defined precedence. Examples include applying custom themes with CSS, setting up keyboard shortcuts like Ctrl+S, adjusting scrollbar ranges dynamically, and modifying widget colors based on state changes.",
      "description_length": 530,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkTree",
      "library": "lablgtk3",
      "description": "This module provides a comprehensive toolkit for managing and interacting with hierarchical data in GUI applications. It centers around key data types like `Gtk.tree_model`, `Gtk.tree_iter`, `Gtk.tree_path`, and `Gtk.tree_selection`, enabling operations such as navigating tree structures, manipulating rows, rendering cells, and handling selections. You can build dynamic interfaces like file browsers with drag-and-drop, custom rendering, and editable tree views, or manage complex data interactions with stable row references and path-based navigation. Specific tasks include synchronizing UI elements with selection state, customizing column layouts, and implementing interactive, editable tree displays.",
      "description_length": 708,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilder",
      "library": "lablgtk3",
      "description": "This module builds user interfaces from XML definitions, creating and connecting widgets automatically. It supports loading from files or strings, with optional translation domains, and allows access to widgets by name. Use it to load `.ui` files from Glade or generate interfaces dynamically. For example, you can parse a UI description from a string and retrieve a button widget to connect a click event handler.",
      "description_length": 414,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEnums",
      "library": "lablgtk3",
      "description": "This module provides polymorphic variant types encoding GTK's enumeration values for UI configuration, including layout directions, alignment flags, widget behaviors, and interaction states. These types operate on UI components like buttons, windows, and file choosers to define visual properties, input handling, and dynamic behaviors such as drag-and-drop targets or dialog responses. Specific use cases include setting text view transitions, configuring assistant page types, specifying entry icon positions, and managing print settings with type-safe precision.",
      "description_length": 565,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GBin",
      "library": "lablgtk3",
      "description": "This module provides single-child container widgets for layout management and user interaction. It includes components like scrollable windows, event-handling boxes, draggable handles, frames for grouping, aspect-preserving containers, viewports for adjusted content display, alignment controls, and collapsible expanders. These are used to build structured, interactive UIs with precise control over child widget placement, visibility, and sizing.",
      "description_length": 448,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkTreeProps",
      "library": "lablgtk3",
      "description": "This module organizes hierarchical data display and interaction through tree views, combining sorted and filtered models with customizable cell rendering and selection handling. It centers on `Gtk.tree_model`, `Gtk.tree_path`, and `Gtk.tree_view_column` for managing and displaying structured data, supporting operations like sorting, filtering, and inline editing. Cell renderers control visual aspects such as text, pixbufs, toggles, and progress bars, while selection and signal modules respond to user actions like clicks and row expansions. Example uses include interactive file browsers, editable data grids, and filtered lists with dynamic sorting and real-time UI updates.",
      "description_length": 680,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEditProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK edit components and constructs property parameters for GUI elements using GObject properties and parameter lists, enabling configuration of widgets like entries, spin buttons, and combo boxes with optional properties and typed parameters. It supports dynamic UI creation and management through submodules that handle text editing with selection and clipboard control, numeric input with bounds and formatting, combo box content and layout with tree models, and entry widgets with placeholder and completion features. You can build dropdowns with custom rendering, validate input in real time, auto-complete text entries based on data models, and configure editable widgets with frame and model properties. Specific capabilities include setting spin button ranges, tracking combo box selections, inserting text at precise positions, and binding GObject closures to text operations.",
      "description_length": 908,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkAssistantProps",
      "library": "lablgtk3",
      "description": "This module provides functions to set, get, and create parameters for GObject properties. It operates on GObject instances and their associated property types. Use cases include configuring widget properties and constructing parameter lists for object initialization or method calls.",
      "description_length": 283,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pango",
      "library": "lablgtk3",
      "description": "This module handles text layout and rendering, providing core types like context, layout, and font for precise text display in GUI applications. It supports operations such as font manipulation, text measurement, and glyph rendering, enabling use cases like multiline text styling and font fallback handling. Submodules manage language tags, text attributes, and font descriptions, allowing configuration of typographic properties and integration with rendering systems. Specific capabilities include parsing language strings, setting font weight or style, and loading fonts based on descriptions for accurate on-screen text representation.",
      "description_length": 640,
      "index": 406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkMiscProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types. Use cases include configuring widget properties in GUI applications and constructing parameter lists for object initialization or method calls.",
      "description_length": 321,
      "index": 407,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PangoEnums",
      "library": "lablgtk3",
      "description": "This module defines a set of enumerated types representing text styling and layout options, such as font weight, variant, stretch, and underline styles. It is used to specify formatting attributes for text rendering in graphical user interfaces. Concrete use cases include setting font properties in text editors, configuring label appearance in UI toolkits, and controlling text wrapping and ellipsizing behavior in layout engines.",
      "description_length": 432,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkFileProps",
      "library": "lablgtk3",
      "description": "This module provides direct access to object properties via `set` and `get` for reading and modifying values, and `param` for creating parameterized property updates. It operates on GObject-based objects, specifically handling properties defined with `Gobject.property`. Concrete use cases include adjusting UI element attributes dynamically and constructing property-based configurations for GTK+ widgets.",
      "description_length": 406,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMisc",
      "library": "lablgtk3",
      "description": "This module configures alignment and padding properties for GUI components using GObject parameter lists and GTK widget types. It supports setting `xalign`, `yalign`, `xpad`, and `ypad` to control layout behavior within containers. For example, it can center a label horizontally and vertically or add spacing around a button. Key operations involve modifying widget properties to achieve precise visual positioning and spacing in user interfaces.",
      "description_length": 447,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkStock",
      "library": "lablgtk3",
      "description": "This module provides predefined stock identifiers for common UI actions, such as file operations and navigation, each paired with labels and optional icons. It supports creating and managing icon sources, sets, and factories to render these items consistently across menus and toolbars. You can register custom items, define how icons appear in different states and sizes, and ensure visual consistency by mapping identifiers to specific icon sets. Examples include building toolbars with standard save and undo buttons or customizing menu item icons based on user preferences.",
      "description_length": 577,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkBaseProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing concrete manipulation of object properties at runtime. Use cases include dynamically configuring UI elements or adjusting object attributes in response to user input.",
      "description_length": 353,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkKeysyms",
      "library": "lablgtk3",
      "description": "The module provides symbolic constants for key symbols (keysyms) used in GUI event handling, enabling identification of keyboard keys and combinations across diverse input scenarios. It operates on the `Gdk.keysym` type, encompassing standard keys (alphanumeric, function, modifier keys), international characters (diacritics, script-specific symbols for languages like Japanese, Cyrillic, Arabic), and specialized hardware keys (multimedia, system controls). These constants facilitate use cases such as text input handling, international keyboard layouts, accessibility features (e.g., Braille input), and application-specific keybindings in graphical user interfaces.",
      "description_length": 670,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GRange",
      "library": "lablgtk3",
      "description": "This module creates and configures scrollbars and progress bars for user interface elements. It works with float values and adjustment objects to control positioning, display, and interaction behavior. Use it to implement UI components like progress indicators, scrollable area controls, and adjustable value inputs with precise visual feedback and user interaction settings.",
      "description_length": 375,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpointer",
      "library": "lablgtk3",
      "description": "This module provides low-level memory manipulation capabilities, including pointer arithmetic, direct memory access via `peek`/`poke` operations, and conversion between memory regions and OCaml data types. It operates on raw memory regions, boxed values, and variant-encoded data structures to facilitate C-compatible data layout and binary format parsing. Typical applications include interfacing with C libraries requiring direct memory access, implementing custom memory management strategies, and handling platform-specific data representations in system-level programming tasks.",
      "description_length": 583,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBase",
      "library": "lablgtk3",
      "description": "This module integrates drag-and-drop handling, selection and clipboard management, tooltip customization, UI component control, and GObject operations into a cohesive toolkit for building interactive GUI applications. Key data types include widgets, selections, clipboards, drag contexts, tooltips, and GObject instances, with operations for data transfer, visual feedback, property manipulation, and event handling. You can implement features like reordering list items with drag-and-drop, copying styled text to the clipboard, showing rich tooltips on hover, and binding custom logic to widget lifecycle events. Specific examples include transferring files via drag, synchronizing selections across components, and dynamically adjusting UI layout based on window size.",
      "description_length": 770,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GWindow",
      "library": "lablgtk3",
      "description": "This module creates and configures top-level windows and dialogs, supporting window types like `window`, `dialog`, and specialized variants such as `message_dialog` and `file_chooser_dialog`. It allows setting window properties, adding responses, and displaying built-in dialog content, such as opening a resizable window with custom dimensions or launching a modal message dialog with predefined buttons. The child module provides standard button configurations like `ok`, `yes_no`, and `ok_cancel`, using polymorphic variants like `OK`, `CANCEL`, and `YES` to handle user responses in dialog interactions. Together, they enable tasks like creating confirmation dialogs with custom button sets or interactive file selection dialogs.",
      "description_length": 733,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkPixbuf",
      "library": "lablgtk3",
      "description": "This module provides operations for creating, transforming, and serializing image data through pixel buffer objects. It supports tasks like pixel-level editing, scaling, compositing with transparency, and format conversion, working with structured image representations that include metadata such as dimensions, color spaces, and alpha channels. Typical applications include dynamic image generation, UI element rendering, and batch processing of raster graphics for display or storage.",
      "description_length": 486,
      "index": 418,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Gtk",
      "library": "lablgtk3",
      "description": "This module defines polymorphic variant types that configure UI behavior and appearance across GTK components, encoding options for layout, alignment, state management, and interaction modes. It provides constants used by containers, buttons, dialogs, and data views to control widget properties like expansion policies, selection states, border styles, and event handling phases. These types enable precise customization of GUI elements, supporting tasks such as dynamic layout adjustments, error state propagation during file operations, and fine-grained input handling in interactive widgets. Submodules apply these definitions to specific UI components, ensuring consistent and expressive configuration across the toolkit.",
      "description_length": 726,
      "index": 419,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkSignal",
      "library": "lablgtk3",
      "description": "This component provides mechanisms for connecting and managing event callbacks, handling signal emissions, and ensuring type-safe argument marshaling between OCaml functions and GObject-based signals. It operates on GTK widgets and GObject instances, utilizing signal identifiers and GValue types to facilitate interaction between OCaml code and the underlying GTK signal system. It is used to implement responsive user interfaces by attaching handlers to events like button clicks or window resizing, while maintaining type integrity and managing exceptions during callback execution.",
      "description_length": 585,
      "index": 420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkPack",
      "library": "lablgtk3",
      "description": "This module organizes widgets into structured layouts using boxes, grids, and size groups to control arrangement, alignment, and sizing. It supports horizontal and vertical boxes for sequential widget packing, grids for tabular layouts with precise cell placement, and size groups to synchronize dimensions across widgets. Operations include creating layout containers, attaching widgets with alignment and spacing options, reordering children, and grouping widgets for uniform sizing. Examples include building toolbars with aligned buttons, forms with labeled fields, and dashboards with evenly spaced controls.",
      "description_length": 613,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMisc",
      "library": "lablgtk3",
      "description": "This module creates and configures UI components like separators, status bars, calendars, drawing areas, arrows, images, and labels for displaying text and graphics. It supports data types such as strings, pixbufs, icon names, and layout options, with direct control over visual properties like alignment, size, and tooltips. Concrete use cases include building status areas with dynamic icons, embedding interactive calendars, and rendering custom-drawn content in GUI applications.",
      "description_length": 483,
      "index": 422,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GAssistant",
      "library": "lablgtk3",
      "description": "This module creates and configures assistant windows with customizable properties like title, size, modality, and icon. It supports interactive step-by-step workflows by managing window behavior and appearance. Use it to build guided setup dialogs or multi-step user interactions with visual consistency.",
      "description_length": 304,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobject",
      "library": "lablgtk3",
      "description": "This module enables runtime type inspection, object coercion, and dynamic value management for GObject-based systems. It provides core operations like `get_type`, `is_a`, `try_cast`, and `GValue` handling to support type-safe interactions, property manipulation, and closure-based callbacks. With submodules for type hierarchies, value storage, signal handling, property access, and type marshaling, it allows tasks such as inspecting GObject inheritance, setting widget properties dynamically, wrapping OCaml functions for C callbacks, and converting values between OCaml and GObject representations.",
      "description_length": 601,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkEditProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring UI elements in GTK+ applications, such as setting the text of a label or adjusting the value of a slider.",
      "description_length": 385,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkEdit",
      "library": "lablgtk3",
      "description": "This module combines text editing and numeric input capabilities, offering precise control over editable fields and spin buttons. It supports operations like text selection, insertion, deletion, clipboard interactions, and numeric value adjustment through spin buttons. Key data types include `Gtk.obj` instances for text fields and spin button objects. Examples include implementing auto-completion in text inputs and configuring numeric settings in application forms.",
      "description_length": 469,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistant",
      "library": "lablgtk3",
      "description": "This module provides a structured interface for creating and managing multi-step assistant dialogs, such as setup wizards or guided workflows. It supports operations to insert, remove, and configure pages with titles, images, and completion indicators, along with navigation controls to move between steps. You can use it to build interactive configuration dialogs, onboarding sequences, or any process that requires user input across multiple stages. Examples include setting up application preferences, guiding users through initial configuration, or collecting data in a stepwise manner.",
      "description_length": 590,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GToolbox",
      "library": "lablgtk3",
      "description": "This module builds GTK menus from labeled entries with associated actions, creates dialog windows for user input or confirmation, and sets up keyboard shortcuts for windows. It works with menu entries that include labels, checkboxes, or submenus, dialog boxes with customizable buttons, and key combinations for shortcut handling. Concrete use cases include constructing context menus, prompting users for text input, displaying confirmation dialogs, and binding keyboard shortcuts to window actions.",
      "description_length": 500,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkActionProps",
      "library": "lablgtk3",
      "description": "This module initializes and configures GTK actions using GObject-based property handling, supporting dynamic construction and conditional property application. It manages action types like toggle, radio, and UI-managed actions through core operations for state control, activation, and property updates, working with types such as `Gobject.property` and `Gtk.action`. Child modules organize actions into groups, manage UI synchronization via `uimanager`, and implement specialized behavior for radio and toggle actions with support for accelerators, sensitivity, and visibility. Examples include enabling a group of actions based on application state, dynamically updating toolbar buttons, or binding keyboard shortcuts to menu items.",
      "description_length": 734,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gdk",
      "library": "lablgtk3",
      "description": "This module manages graphical elements such as colors, windows, and input devices, supporting tasks like rendering vector graphics, configuring display visuals, and handling interactive GUI components with precise input control. It works with Cairo contexts, rectangles, atoms, and device identifiers, offering operations for screen configuration, cursor management, and low-level window handling. Submodules enable platform-specific adaptations, X11 display updates, drag-and-drop protocols, and color manipulation, while also providing data structures for rectangles, visual types, and event masks. Specific capabilities include setting custom cursors, converting color values, embedding external windows, and implementing drag-and-drop data transfers.",
      "description_length": 754,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkFileProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK file components and constructs property parameters using GObject properties and option types, enabling type-safe setup of file choosers and buttons with optional configurations. It supports dynamic UI updates through signals and provides fine-grained control over appearance and behavior, such as setting titles, adjusting size, and configuring default paths. Key data types include `file_chooser`, `file_filter`, and `widget`, with operations to set action modes, filter files, and retrieve selections, while submodules handle event binding and property customization. Examples include selecting input files, restricting file types, and responding to user interactions in desktop applications.",
      "description_length": 722,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkContainersProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring widget properties in GUI applications and constructing parameter lists for object initialization or method calls.",
      "description_length": 393,
      "index": 432,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GText",
      "library": "lablgtk3",
      "description": "This module implements text editing and display functionality with rich formatting capabilities. It provides types like `mark`, `tag_property`, and `position` to manipulate text buffers, apply styling through tags, and manage cursor positions or selections. Concrete use cases include building code editors with syntax highlighting, word processors with custom text formatting, and interactive terminals with embedded images or widgets.",
      "description_length": 436,
      "index": 433,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GObj",
      "library": "lablgtk3",
      "description": "This module provides functions for working with GUI widgets, including creating CSS providers, converting and packing widgets, and handling widget-specific data conversions. It operates on widget objects, supporting operations like dynamic typing and optional value handling. Concrete use cases include building and styling UI components in a GTK-based application.",
      "description_length": 365,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gaux",
      "library": "lablgtk3",
      "description": "This module handles optional values with functions for conditional mapping, applying side effects, and providing fallbacks. It operates on `'a option` types, transforming or extracting values based on presence. Use cases include safely handling optional configuration values, chaining operations on potentially missing data, and logging or mutating state conditionally.",
      "description_length": 369,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GFile",
      "library": "lablgtk3",
      "description": "This module provides widgets for selecting files or directories, including a file chooser widget and button. It supports filtering files by name patterns or MIME types and allows setting initial filenames or customizing display properties. Concrete use cases include opening or saving files in a GUI application, with options to restrict selections to specific file types or directories.",
      "description_length": 387,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBaseProps",
      "library": "lablgtk3",
      "description": "This module provides functions to conditionally add GObject properties to GTK objects, working with `Gobject.property` and `Gobject.param` types to enable dynamic UI configuration. Submodules extend this capability to specific components: windows and dialogs support creation, property setting, and event handling for interactive UI elements, while adjustment and orientation modules manage numerical ranges and layout direction for widgets like sliders and boxes. You can build a message dialog with custom buttons, set a window's title or icon, dynamically adjust a scrollbar's bounds, or change a widget's orientation at runtime. Additional submodules handle specialized tasks like embedding external widgets, configuring about dialogs with logos and version info, and managing widget allocation and opacity for custom layout and rendering behavior.",
      "description_length": 852,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GEdit",
      "library": "lablgtk3",
      "description": "This module provides functions to create and configure editable UI components like text entry fields, spin buttons, and combo boxes with optional completion features. It works with widgets such as `entry`, `spin_button`, and `combo_box`, supporting data input and selection operations with customizable behavior. Concrete use cases include form inputs with auto-completion, numeric value selection with spin controls, and dropdown menus with or without editable text fields.",
      "description_length": 474,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkRangeProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK range-based widgets and conditionally adds GObject properties to parameter lists, handling optional values for flexible UI construction. It supports configuration of range widgets like sliders and spinners, scales with custom formatting, progress bars with animation, and scrollbars with orientation control, all while managing dynamic updates and signal handling. You can create a horizontal scale with custom percentage labels, invert a slider's direction, or link a progress bar to a task's completion status. Submodules refine appearance, behavior, and data integration, enabling precise control over numeric input, visual feedback, and interactive elements.",
      "description_length": 690,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBuilderProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK builder functionality and provides functions to conditionally add properties to GObject parameter lists, working with optional values to dynamically construct widget configurations. It supports creating and manipulating UI components from XML descriptions, enabling dynamic interface construction from files or strings, with support for internationalization through translation domains. You can load GTK interfaces from Glade files, retrieve constructed objects by name, and set localized string properties or tooltips only when values are present. The module combines runtime parameter customization with property handling for flexible and localized GUI development.",
      "description_length": 695,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GdkEnums",
      "library": "lablgtk3",
      "description": "This module provides enumerated types for managing GUI states and interactions, including event handling, window attributes, and input configurations. It operates on data structures representing window behaviors, cursor types, and drag operations, enabling precise control over graphical interfaces. Specific use cases include defining event masks, specifying window hints for positioning and decoration, and managing interaction modes like drag-and-drop actions.",
      "description_length": 463,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GBuilder",
      "library": "lablgtk3",
      "description": "This module creates UI interfaces from XML definitions, providing functions to initialize a builder either from a file, a string, or an empty configuration. It works with XML data structures that describe graphical interfaces, typically used in GTK+ applications. Concrete use cases include loading window layouts, dialog boxes, or menu structures directly from XML files or strings at runtime.",
      "description_length": 394,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkThread",
      "library": "lablgtk3",
      "description": "This module manages GTK's main loop integration with OCaml threads, providing thread-safe execution of GUI operations through `async` and `sync`. It coordinates GUI thread initialization with `start` and `main`, ensuring safe access to GTK functions across threads with `gui_safe`. Use cases include running GTK UI updates from background threads, embedding GTK in multi-threaded applications, and controlling main loop behavior with custom delays via `set_do_jobs_delay`.",
      "description_length": 472,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GUtil",
      "library": "lablgtk3",
      "description": "This module includes a function `print_widget` for formatting GTK widget output, a signal system for adding GTK-like event handling to arbitrary objects, and a variable class that propagates state changes using deep equality to trigger callbacks only when necessary. It works with GTK objects, custom objects with signals, and state variables. Concrete use cases include debugging widget state in the toplevel, implementing custom event-driven components, and managing UI state that triggers updates only on actual value changes.",
      "description_length": 529,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gutf8",
      "library": "lablgtk3",
      "description": "This module converts Unicode code points to UTF-8 strings and vice versa, handling both strict and unsafe decoding for performance or validation. It supports direct operations on `string` and `int` (representing unichar), allowing encoding a single character, decoding a full string, or stepping through UTF-8 sequences. The child module defines errors and exceptions for invalid or partial UTF-8 data, enabling robust handling of malformed byte sequences during conversion. Use cases include validating user input, processing encoded URIs, and working with UTF-8 in low-level system interfaces.",
      "description_length": 595,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMenu",
      "library": "lablgtk3",
      "description": "This module provides a comprehensive toolkit for building interactive menu systems with various types of menu items and hierarchical structures. It supports radio menu items for exclusive selection, checkable items for toggleable options, and standard items with submenus, accelerators, and dynamic state changes. Key data types include `Gtk.menu_item` and `Gtk.menu`, enabling operations like item activation, menu popups, and accelerator configuration. Examples include creating a theme selector with radio items, a preferences menu with checkable options, and context menus with nested submenus and keyboard shortcuts.",
      "description_length": 621,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GPack",
      "library": "lablgtk3",
      "description": "This module creates and configures container widgets for organizing user interface elements. It supports boxes, tables, grids, fixed layouts, notebooks, panes, and stacks, each with customizable properties like spacing, size, and visibility. Use it to build complex UIs with structured layouts, such as forms in a notebook, responsive grids of buttons, or resizable panes for split views.",
      "description_length": 388,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkBinProps",
      "library": "lablgtk3",
      "description": "This module orchestrates property initialization and parameter construction for GTK bin containers and related widgets, enabling dynamic configuration with optional and nested values. It supports creating and customizing widgets such as frames, event boxes, alignment containers, and scrollable viewports, with operations for setting layout constraints, event handling, and visual styling. Key data types include `Gtk.bin`, `Gtk.frame`, `Gtk.viewport`, and `Gtk.expander`, alongside properties for alignment, shadow style, scroll adjustments, and aspect ratios. Examples include embedding scrollable content with custom scroll policies, overlaying event-sensitive widgets on a canvas, and enforcing aspect ratios for image previews within resizable UI layouts.",
      "description_length": 760,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkAssistantProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK assistant components and provides functions to conditionally add properties to parameter lists, working with GObject properties and optional values to construct or modify GTK assistant objects. It manages navigation flow, visual states, and dynamic interactions with `GtkAssistant` and `GtkWidget`, supporting operations like inserting pages, configuring titles, updating completion status, and managing action widgets. Main data types include `GtkAssistant`, `GtkWidget`, and `GtkSignal.t`, with specific use cases such as building configuration wizards, guided setup flows, and step-by-step interfaces that respond to user actions through callbacks.",
      "description_length": 679,
      "index": 449,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkButtonProps",
      "library": "lablgtk3",
      "description": "This module initializes button components and applies conditional properties to configure specialized buttons using GObject parameters. It supports a range of button types\u2014including toggle, radio, color, font, and tool buttons\u2014each with dedicated operations for creation, property setting, and signal handling. Main data types include `Gtk.button`, `Gtk.toggle_button`, `Gtk.radio_button`, and various tool and color button variants, with operations like signal connection, group management, and dynamic property updates. Examples include creating a toolbar with styled buttons that respond to clicks, building a color picker with live updates, or organizing mutually exclusive radio buttons that reassign groups at runtime.",
      "description_length": 724,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GButton",
      "library": "lablgtk3",
      "description": "This module creates interactive UI elements that generate signals when clicked. It supports buttons with labels, images, or stock items, toggle and radio buttons for state selection, and specialized buttons for color or font selection. These components are used to build toolbars with grouped actions, dropdown menus, and linkable web destinations in graphical applications.",
      "description_length": 374,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkPackProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties. It works with GObject instances and their associated property types, allowing for precise manipulation of object properties at runtime. Concrete use cases include configuring widget properties in GUI applications and constructing parameter lists for object initialization or method calls.",
      "description_length": 397,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_pango",
      "library": "lablgtk3",
      "description": "This module bridges Pango's text layout capabilities with Cairo's rendering engine, allowing precise control over text display through integrated contexts and layouts. It supports operations like converting text to paths, drawing formatted strings, and rendering error underlines directly onto Cairo surfaces. The fontmap submodule enhances this by managing font configuration, enabling DPI adjustments, custom font backends, and thread-safe font contexts. Together, they facilitate advanced text rendering workflows such as scalable text layout in GUIs, vector text conversion, and high-fidelity typography in multi-threaded environments.",
      "description_length": 639,
      "index": 453,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMiscProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK+ properties and conditionally adds parameter values to lists, working with GObject types to handle optional values and property setting for widgets. It supports dynamic configuration of UI elements like labels, images, and status icons, with key operations including property initialization and parameter list construction. Child modules extend this by managing status bars with message contexts, creating arrow and separator widgets with directional styles, configuring drawing areas and calendars with date controls, and handling font and color selection widgets with live updates. Additional submodules control widget alignment, image sources, label formatting, and status icons with tooltip and visibility settings, enabling layout customization, visual feedback, and interactive UI components.",
      "description_length": 826,
      "index": 454,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkMenuProps",
      "library": "lablgtk3",
      "description": "This module initializes GTK menu components and builds parameter lists for configuring menu items with optional properties, supporting the creation of hierarchical and dynamic menu interfaces. It includes submodules for managing checkable items, radio groups, menu bars, shells, and containers, enabling precise control over layout, state synchronization, and user interaction. Developers can create checkable menu items that reflect application settings, define radio groups for mutually exclusive selections, and construct menu bars with custom spacing and orientation. It also supports dynamic context menus with keyboard navigation, torn-off menus with custom titles, and scrollable dropdowns that respond to wheel events.",
      "description_length": 726,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkMain",
      "library": "lablgtk3",
      "description": "This module orchestrates the core runtime of a GUI application, managing initialization, event processing, and resource configuration. It provides direct control over the main loop, input grabs, garbage collection tuning, and event handling, with key operations including starting and stopping execution, setting input capture on widgets, adjusting GC speed, and loading interface resources. You can initialize a GUI session, implement modal interactions via input grabs, fine-tune performance by controlling garbage collection, and load theme settings from files or strings. Specific functions allow retrieving event timestamps, applying configuration data, and managing widget-level event propagation.",
      "description_length": 703,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkButtonProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and creating parameters for GObject properties on UI elements like buttons. It works with GObject-based UI components and their associated property types. Use cases include configuring button properties such as labels, sensitivity, or visibility, and creating parameterized property updates for event handlers or dynamic UI adjustments.",
      "description_length": 397,
      "index": 457,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GTree",
      "library": "lablgtk3",
      "description": "This module organizes hierarchical and tabular data models with interactive views, supporting dynamic data grids, expandable navigation trees, and grid-based icon views. It provides core types like tree paths, models, and view columns, with operations to build, modify, and navigate structured data displays. Functions allow creating and manipulating tree paths to track and synchronize node positions, while view components enable custom cell rendering for interactive elements like editable fields and progress bars. Use it to implement sortable tables, hierarchical file browsers, or media grids with custom layout and interaction logic.",
      "description_length": 640,
      "index": 458,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GMain",
      "library": "lablgtk3",
      "description": "The module orchestrates event loop management and system initialization, offering direct access to clipboard operations, input/output monitoring, and event-driven callbacks. It enables starting and terminating the main application loop, managing timeouts, and handling system-wide input grabs, with key data types including event structures and callback handlers. Submodules refine this functionality by scheduling timed events, executing idle callbacks, loading configuration files, and managing widget input grabs for interactions like drag-and-drop or modal dialogs. Additional components handle GUI event routing, I/O channel monitoring, and garbage collection tuning, supporting tasks such as non-blocking socket communication and performance optimization in GUI applications.",
      "description_length": 781,
      "index": 459,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OgtkBinProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties. It works with GObject instances and their associated property types, enabling precise manipulation of object properties at runtime. Concrete use cases include configuring widget attributes in GUI applications, such as adjusting button labels or window sizes dynamically.",
      "description_length": 370,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkPackProps",
      "library": "lablgtk3",
      "description": "This module configures layout containers with dynamic property handling, supporting optional and nested parameters to build flexible UI components. It provides core operations to construct and modify parameter lists for widgets like boxes, grids, tables, and panes, with key data types including property lists, container configurations, and layout constraints. You can create resizable split views, animated stack transitions, grid-based forms, and tabbed interfaces with custom sizing and alignment. Submodules extend this with specialized functionality for stacks, notebooks, panes, and size groups, enabling precise control over layout behavior, transitions, and visual consistency across complex interfaces.",
      "description_length": 712,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkTextProps",
      "library": "lablgtk3",
      "description": "This module directly manipulates text properties for GUI elements, offering functions to set, get, and parameterize attributes like font, color, margins, and alignment. It operates on GObject-based text components, particularly working with text tags and their associated parameters. Specific use cases include styling text in a text editor, configuring rich text displays, and dynamically adjusting typographic properties in GTK-based interfaces.",
      "description_length": 447,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkRangeProps",
      "library": "lablgtk3",
      "description": "This module provides direct operations for setting, getting, and parameterizing GObject properties. It works with GObject instances and their associated property types, allowing precise manipulation of object properties at runtime. Concrete use cases include configuring UI elements like sliders or input fields by modifying their underlying property values or creating parameterized property configurations for event callbacks.",
      "description_length": 428,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GPango",
      "library": "lablgtk3",
      "description": "This module provides functions to convert between pixel values and Pango units, as well as parsing font descriptions from strings. It operates on integer pixel values, Pango unit types, and string representations of fonts. Useful for adjusting text layout metrics and constructing font descriptions from configuration strings.",
      "description_length": 326,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkButton",
      "library": "lablgtk3",
      "description": "This module provides a comprehensive set of button widgets for building interactive GUI interfaces. It includes standard buttons with customizable labels and icons, toggle buttons for stateful UI elements like switches, radio buttons for grouped selections, link buttons for embedding clickable URLs, and toolbar buttons for constructing dynamic toolbars with styled items. Developers can create, configure, and connect events to these buttons, control visual properties like orientation and icon size, and simulate user interactions such as clicks and hovers. Example uses include form controls, preference panels, navigation bars, and dynamic tool interfaces.",
      "description_length": 661,
      "index": 465,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GdkEvent",
      "library": "lablgtk3",
      "description": "This module manages window system events with type-safe access to properties like time, window, and event type, supporting precise event filtering and dispatching. It integrates modules for handling key presses, pointer motion, button interactions, window state changes, and proximity events, enabling detailed input tracking and UI responsiveness. Specific capabilities include detecting mouse enter/leave events, processing keyboard shortcuts, responding to window resizing, and handling scroll or focus changes. Additional submodules support advanced use cases like clipboard management, property change tracking, and dynamic theme adaptation through structured event access and conversion functions.",
      "description_length": 703,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GMenu",
      "library": "lablgtk3",
      "description": "This module creates and configures menu interfaces with functions for building menus, menu items, separators, check items, radio items, and menu bars. It works with GUI components like `menu`, `menu_item`, and `menu_shell` to construct hierarchical menu structures. Concrete use cases include implementing application menus with dropdowns, checkboxes, and radio selections in desktop applications.",
      "description_length": 397,
      "index": 467,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 781,
    "meaningful_modules": 468,
    "filtered_empty_modules": 313,
    "retention_rate": 0.5992317541613317
  },
  "statistics": {
    "max_description_length": 908,
    "min_description_length": 168,
    "avg_description_length": 449.4465811965812,
    "embedding_file_size_mb": 1.7007856369018555
  }
}