{
  "package": "jingoo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-07-15T23:09:09.703295",
  "modules": [
    {
      "module_path": "Jingoo.Jg_utils.UTF8",
      "library": "jingoo",
      "description": "This module provides functions for manipulating UTF-8 encoded strings, including conversion to uchar lists, case transformations, trimming, splitting, and character classification. It handles operations like substring extraction, comparison, and mapping over UTF-8 characters with support for malformed input. Use cases include parsing and transforming text in web templates, handling user input, and processing multilingual content.",
      "description_length": 433,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template.Loaded",
      "library": "jingoo",
      "description": "This module handles loading and evaluating templates from files, channels, or strings. It works with template data structures and supports evaluation using context and model data. Use it to render dynamic content by loading a template and passing context variables during evaluation.",
      "description_length": 283,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template2.Loaded",
      "library": "jingoo",
      "description": "This module handles loading and evaluating templates from files, channels, or strings. It works with template structures and context data to produce rendered output. Use it to build dynamic text generation systems, such as HTML rendering or configuration file generation, using predefined templates and variable contexts.",
      "description_length": 321,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_interp.Loaded",
      "library": "jingoo",
      "description": "This module handles template loading and evaluation for a templating system. It processes templates from files, strings, or channels, returning an environment, abstract syntax tree, and macro list tuple. These components are used to evaluate templates with context data, supporting dynamic content generation through macros and variable substitution.",
      "description_length": 350,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_utils.Maybe",
      "library": "jingoo",
      "description": "This module implements monadic operations for handling optional values. It provides `return` to wrap a value in an option type and `bind` to chain computations that produce optional results. It is used to safely compose sequences of operations that may fail or return no result.",
      "description_length": 278,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_interp.RevicedApi",
      "library": "jingoo",
      "description": "This module evaluates template files, strings, or input channels by expanding variables and executing logic defined in Jingoo templates. It accepts environment settings, model data, and output functions to customize template rendering. Use it to generate dynamic text output like HTML pages, configuration files, or emails from structured data.",
      "description_length": 344,
      "index": 5,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Jingoo.Jg_runtime",
      "library": "jingoo",
      "description": "This module implements runtime operations for template processing, including arithmetic, logical comparisons, and value lookups. It works with typed values (`tvalue`) and context structures for variable scoping. Functions like `jg_plus` and `jg_escape_html` support dynamic expression evaluation and HTML escaping, while `jg_test_defined` and related functions check variable presence in the context.",
      "description_length": 400,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_types",
      "library": "jingoo",
      "description": "This module defines core data types and structures for handling templates, including environment configurations, type representations, and function application semantics. It supports operations for boxing and unboxing OCaml values, working with key/value objects, hash tables, pattern-based mappings, and lazy evaluation. Concrete use cases include managing template rendering contexts, defining custom filters, and implementing type-safe function calls with support for partial application and keyword arguments.",
      "description_length": 513,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_parser",
      "library": "jingoo",
      "description": "This module defines a parser for a templating language, converting a stream of tokens into an abstract syntax tree (AST) representing template expressions and control structures. It processes tokens like `IF`, `FOR`, `FUNCTION`, and `INCLUDE`, handling nested blocks, variable interpolation, and filters. It is used to parse template files into executable ASTs for rendering with context data.",
      "description_length": 393,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_lexer",
      "library": "jingoo",
      "description": "This module implements a lexer for parsing templating languages, offering operations to manage lexing state transitions, buffer character sequences, and generate tokens. It processes input through `Lexing.lexbuf` structures while maintaining internal buffers for string assembly, supporting dual parsing modes to differentiate template logic from static content like HTML. Key functions handle recursive tokenization of comments, raw blocks, and literals, enabling use cases such as template engine preprocessing and structured text extraction.",
      "description_length": 544,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_utils",
      "library": "jingoo",
      "description": "This module offers utilities for string manipulation, file handling, and optional value processing. It includes functions for safe substring extraction, HTML escaping, URL encoding, and reading files, while its UTF8 submodule manages UTF-8 string transformations and the Maybe submodule provides monadic operations for optional values. Use cases range from sanitizing and processing web templates to safely composing computations that may fail. For example, UTF8 supports case conversion and splitting multilingual text, while Maybe enables chaining operations that handle missing data.",
      "description_length": 586,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_ast_optimize",
      "library": "jingoo",
      "description": "Performs dead code elimination and inlines included templates in abstract syntax trees. Works with AST structures representing templates, optimizing them by removing unreachable code and embedding referenced templates directly. Useful for improving template execution efficiency by reducing runtime parsing and eliminating unnecessary branches.",
      "description_length": 344,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_ast_mapper",
      "library": "jingoo",
      "description": "This module defines a set of functions for transforming abstract syntax trees, statements, and expressions in the Jingoo templating language. It works with the `ast`, `statement`, and `expression` types from the `Jg_types` module, allowing deep structural modifications through customizable mappers. Concrete use cases include implementing custom template transformations, optimizing parsed templates, or adding preprocessing steps for specific syntax extensions.",
      "description_length": 463,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_stub",
      "library": "jingoo",
      "description": "Registers and retrieves template functions within a specified namespace. Uses `tvalue` to represent function values, allowing storage and lookup of functions by name. Enables dynamic function registration for template engines, supporting runtime-defined logic in templates.",
      "description_length": 273,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template",
      "library": "jingoo",
      "description": "This module processes templates from files, strings, or input channels, substituting variables and evaluating logic using provided environment, context, and model values. It supports rendering dynamic content such as HTML pages, configuration files, or emails by combining templates with runtime data. The child module handles loading and evaluating templates, working directly with template data structures to enable rendering with context variables. Together, they allow loading a template file, embedding OCaml expressions, and evaluating the result with a given context to produce customized output.",
      "description_length": 603,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_interp",
      "library": "jingoo",
      "description": "This module evaluates and processes template expressions through AST parsing, macro extraction, and rendering from strings, files, or channels. It operates on abstract syntax trees, runtime environments, and contextual data to support dynamic content generation and template reuse scenarios like web page assembly or configuration file creation. The core functionality enables variable binding, hierarchical context management, and on-demand template compilation, while child modules handle template loading, environment extraction, and customizable rendering with model data. Examples include generating HTML pages from templates using provided data, producing configuration files dynamically, or rendering emails by expanding variables and executing template logic.",
      "description_length": 767,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_template2",
      "library": "jingoo",
      "description": "This module compiles and renders templates from files, channels, or strings using environments, contexts, and model loaders to generate dynamic output such as HTML pages, config files, or emails. It processes template sources into executable code, supporting value injection and inheritance through the `models` function and environment settings. The child module handles loading and evaluating templates, working with structured template data and context to produce final output. Together, they enable building flexible text generation systems using predefined templates and variable contexts.",
      "description_length": 594,
      "index": 16,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Jingoo",
      "library": "jingoo",
      "description": "This module processes templating languages through lexing, parsing, and runtime evaluation, transforming templates into executable structures for dynamic content generation. It supports key data types like `tvalue` for typed values, `Lexing.lexbuf` for input handling, and abstract syntax trees for template representation, with operations for arithmetic, logic, variable scoping, and HTML escaping. Functionality includes parsing control structures, applying filters, managing contexts, and optimizing templates through inlining and dead code elimination. Examples include rendering HTML pages from templates with variable substitution, defining custom template functions, and processing multilingual text with UTF-8 aware string transformations.",
      "description_length": 747,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 767,
    "min_description_length": 273,
    "avg_description_length": 457.55555555555554,
    "embedding_file_size_mb": 0.06579875946044922
  }
}