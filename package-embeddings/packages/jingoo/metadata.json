{
  "package": "jingoo",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-14T23:21:38.437688",
  "modules": [
    {
      "module_path": "Jingoo.Jg_interp.RevicedApi",
      "library": "jingoo",
      "description": "This module evaluates template files, strings, or input channels by expanding variables and executing control structures defined in the Jingoo template language. It accepts environment configurations, model data, and output functions to render dynamic content. Commonly used for generating HTML, configuration files, or text reports from structured data.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_utils.UTF8",
      "library": "jingoo",
      "description": "This module handles UTF-8 string manipulation with functions for case conversion, trimming, splitting, and character classification. It works directly with strings and Unicode characters, providing operations like `lowercase`, `uppercase`, `trim`, and `split` that respect UTF-8 encoding. Use cases include processing user input, normalizing text, and implementing custom string transformations.",
      "description_length": 395,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_utils.Maybe",
      "library": "jingoo",
      "description": "This module implements monadic operations for handling optional values. It provides `return` to wrap a value in an option type and `bind` to chain computations that produce optional results. Use it to safely sequence operations that may fail or return absent data, such as parsing or lookup functions.",
      "description_length": 301,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_interp.Loaded",
      "library": "jingoo",
      "description": "This module handles template loading and evaluation by parsing input sources into abstract syntax trees and executing them within a given environment. It works with environments, AST nodes, and macro definitions to process templates from files, strings, or channels. Concrete use cases include rendering dynamic content by evaluating loaded templates with specific context data.",
      "description_length": 378,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_template2.Loaded",
      "library": "jingoo",
      "description": "This module loads and evaluates templates from files, strings, or input channels, producing a compiled template structure. It supports evaluation with custom context and model data, allowing dynamic content generation. Use cases include rendering text-based templates with variable substitution and control structures.",
      "description_length": 318,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template.Loaded",
      "library": "jingoo",
      "description": "This module handles loading and evaluating templates from various sources. It provides functions to load templates from files, channels, or strings, and evaluates them with a given context and model data. The core type `t` represents a loaded template ready for evaluation.",
      "description_length": 273,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_parser",
      "library": "jingoo",
      "description": "This module defines a lexer and parser for a templating language, converting input into a structured AST. It processes text and expressions into tokens like control structures, literals, and operators. Used to parse template files into executable abstract syntax trees for rendering.",
      "description_length": 283,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_utils",
      "library": "jingoo",
      "description": "This module includes functions for string manipulation, such as escaping HTML characters, encoding URLs, and handling UTF-8 strings through the UTF8 submodule. It provides list operations like `take` and `after`, along with utilities for reading files and handling parser errors. The Maybe submodule supports monadic handling of optional values, while other functions manage function composition, string comparison, and substring extraction.",
      "description_length": 441,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_runtime",
      "library": "jingoo",
      "description": "This module implements runtime operations for value manipulation, arithmetic, and conditionals in template execution. It handles operations like sequence indexing, HTML escaping, truthiness checks, and comparisons on `tvalue` values, which represent dynamic data in templates. Direct use cases include evaluating expressions, accessing variables in contexts, and applying filters during template rendering.",
      "description_length": 406,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_lexer",
      "library": "jingoo",
      "description": "This component transforms template input into tokens using OCaml's lexing infrastructure, supporting parsing modes like HTML and template logic through state transitions. It manages buffer operations for character and string accumulation, context updates for state tracking, and specialized lexing routines to handle comments, raw blocks, and string literals. The resulting tokens feed directly into a parser for template processing workflows.",
      "description_length": 443,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_interp",
      "library": "jingoo",
      "description": "This module evaluates and manipulates templates by processing expressions, macros, and abstract syntax trees, using environments and contexts to manage dynamic data. It parses templates from strings, files, or channels and renders them into text formats such as HTML or configuration files through context-driven execution and macro expansion. Key operations include AST generation from file paths, macro resolution, and selecting context data to dynamically populate template content.",
      "description_length": 485,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template2",
      "library": "jingoo",
      "description": "This module evaluates templates from files, strings, or input channels, producing result strings through variable substitution and template logic. It operates on context data and model functions that provide dynamic values during rendering. Use it to generate HTML, configuration files, or any text output that depends on runtime data.",
      "description_length": 335,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_stub",
      "library": "jingoo",
      "description": "Registers and retrieves template functions within a specified namespace. Works with string identifiers and `tvalue` function objects. Used to extend template rendering with custom logic by associating functions to namespaces.",
      "description_length": 225,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_ast_optimize",
      "library": "jingoo",
      "description": "Performs dead code elimination and inlines included templates within abstract syntax trees. It operates on AST structures representing templates, optimizing them by removing unreachable branches and embedding referenced templates directly. This reduces runtime processing overhead during template execution.",
      "description_length": 307,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_template",
      "library": "jingoo",
      "description": "This module evaluates templates from files, channels, or strings using a provided context and model data. It supports rendering dynamic content by substituting variables and executing control structures defined in the template. Commonly used for generating HTML, configuration files, or formatted text output based on structured data inputs.",
      "description_length": 341,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jingoo.Jg_ast_mapper",
      "library": "jingoo",
      "description": "This module provides functions to transform abstract syntax trees, statements, and expressions in the Jingoo templating language. It supports operations like rewriting AST nodes, mapping over function arguments, and applying transformations to expressions. Concrete use cases include implementing custom template transformations, optimizing parsed templates, or analyzing template structure during compilation.",
      "description_length": 410,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo.Jg_types",
      "library": "jingoo",
      "description": "This module defines core data types and structures for handling templates, including environment configurations, typed values (`tvalue`), and function call semantics. It supports operations for boxing and unboxing OCaml values, working with key-value objects (associative lists, hash tables, and pattern-based mappings), and managing lazy and tuple values. Concrete use cases include implementing custom template filters, handling dynamic data structures in templates, and controlling template rendering behavior through environment settings like auto-escaping and strict mode.",
      "description_length": 577,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jingoo",
      "library": "jingoo",
      "description": "This module implements a templating system with AST transformation, parsing, and runtime evaluation capabilities. It works with abstract syntax trees, token streams, and dynamic values represented as `tvalue` types. Concrete use cases include compiling and rendering HTML templates, optimizing template structure through dead code elimination, and extending template logic with custom functions and filters.",
      "description_length": 407,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 577,
    "min_description_length": 225,
    "avg_description_length": 371.05555555555554,
    "embedding_file_size_mb": 0.2612142562866211
  }
}