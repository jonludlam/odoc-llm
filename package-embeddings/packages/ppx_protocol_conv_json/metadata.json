{
  "package": "ppx_protocol_conv_json",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:01.806489",
  "modules": [
    {
      "module_path": "Protocol_conv_json.Json.Yojson",
      "library": "ppx_protocol_conv_json",
      "description": "This module enables JSON serialization and deserialization by mapping OCaml types\u2014such as primitives (integers, strings, floats), structured data (records, tuples, variants), and containers (lists, arrays, options)\u2014to and from `Yojson.Safe.t` representations. It emphasizes error-resilient conversions, handling edge cases like lazy values",
      "description_length": 339,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_json.Json.Make",
      "library": "ppx_protocol_conv_json",
      "description": "This module offers bidirectional conversion utilities for transforming JSON values (represented as `Yojson.Safe.t`) and OCaml types, supporting primitives like integers, strings, and booleans, as well as composite structures such as records, tuples, lists, and result types. It emphasizes error handling and structured data manipulation, enabling seamless serialization and deserialization for tasks like API data exchange, configuration parsing, or persistent storage of OCaml values in JSON format.",
      "description_length": 500,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_json.Json",
      "library": "ppx_protocol_conv_json",
      "description": "This module bridges JSON and OCaml types, enabling robust conversion between `Yojson.Safe.t` values and primitives, records, variants, and containers like lists and options. It handles error-resilient parsing, optional fields, and result-typed values, supporting direct operations such as serializing a record to JSON or decoding a variant from an API response. Submodules extend this core functionality with specialized tools for structured data mapping and integration with Yojson-based workflows, covering use cases from configuration parsing to persistent storage. Specific capabilities include encoding lazy values, transforming nested JSON structures, and safely handling malformed input during deserialization.",
      "description_length": 717,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_json",
      "library": "ppx_protocol_conv_json",
      "description": "This module bridges JSON and OCaml types, enabling precise conversion between `Yojson.Safe.t` values and OCaml data structures such as primitives, records, variants, and containers. It supports error-resilient parsing, optional fields, and result-typed operations, allowing tasks like decoding API responses into variants or serializing records to JSON. Specific capabilities include handling nested structures, encoding lazy values, and transforming malformed input into meaningful errors during deserialization.",
      "description_length": 513,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 339,
    "avg_description_length": 517.25,
    "embedding_file_size_mb": 0.014934539794921875
  }
}