{
  "package": "minttea",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:10.398751",
  "modules": [
    {
      "module_path": "Minttea.Event",
      "description": "Provides pretty-printing for event data structures using the Format module. Works with custom types key and t, where key represents event identifiers and t encapsulates event details. Used to format event logs for human-readable output in debugging and monitoring scenarios.",
      "description_length": 274,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minttea.Command",
      "description": "Provides functions to parse command-line arguments, validate input, and execute predefined commands. Works with strings, lists, and custom command structures representing parsed inputs. Used to handle user input in CLI tools, process flags, and trigger specific actions based on command patterns.",
      "description_length": 296,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minttea.App",
      "description": "Provides functions to initialize, update, and render a user interface based on a given model type. Operates on a polymorphic type 'model t, allowing for custom state management in application components. Used to handle user input, transition between application states, and trigger UI updates.",
      "description_length": 293,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "minttea",
      "description": "Handles user input, updates application state, and renders output to the terminal using a model-view-update pattern. Operates on a state type defined by the developer, along with messages to trigger state transitions. Enables building interactive command-line tools such as text-based games or configuration wizards.",
      "description_length": 316,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Minttea",
      "description": "Formats event data for debugging, parses and executes command-line inputs with validation, and manages UI rendering through a polymorphic model. Key types include event keys, event records, command structures, and a model type for state management. It enables logging events, processing CLI commands, and updating UIs based on application state changes. Examples include displaying formatted event logs, executing user-specified commands, and rendering dynamic interfaces.",
      "description_length": 472,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 472,
    "min_description_length": 274,
    "avg_description_length": 330.2,
    "embedding_file_size_mb": 0.018596649169921875
  }
}