{
  "package": "h2-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:53.654872",
  "modules": [
    {
      "module_path": "H2_async.Client.SSL",
      "library": "h2-async",
      "description": "This module implements asynchronous HTTP/2 client connections over SSL/TLS. It provides functions to establish secure connections, send requests with optional trailers, handle server-initiated pushes, and manage connection lifecycle events like shutdown and ping. Concrete use cases include building secure HTTP/2 clients for APIs, streaming data over encrypted channels, and handling server push in web services.",
      "description_length": 413,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_async.Server.SSL",
      "library": "h2-async",
      "description": "Handles incoming HTTPS connections for an HTTP/2 server by establishing secure TLS sessions and delegating requests to user-defined handlers. It works with TLS sockets and HTTP/2 connection configurations, requiring certificate and private key files for secure communication. This module is used to implement HTTP/2 servers that support TLS encryption, such as web servers serving APIs or web content over HTTPS.",
      "description_length": 412,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_async.Client.TLS",
      "library": "h2-async",
      "description": "This module implements asynchronous HTTP/2 client connections over TLS. It provides functions to establish secure connections, send requests with optional trailers, handle server push, send ping frames, and manage connection lifecycle events. Key operations include creating connections with custom or default TLS configurations, sending requests with response handlers, and monitoring connection state for shutdown or closure.",
      "description_length": 427,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_async.Server",
      "library": "h2-async",
      "description": "This module manages HTTP/2 connections asynchronously, offering functions to create handlers for processing requests and errors over a socket. It supports configuration of HTTP/2 settings and integrates with TLS through its child module to enable secure HTTPS communication using certificates and private keys. The core API includes creating connection handlers, defining request and error callbacks, and working with asynchronous sockets, while the child module extends this to secure TLS sessions. Example uses include building scalable API servers or web servers that handle HTTP/2 requests over both plaintext and encrypted connections.",
      "description_length": 640,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_async.Client",
      "library": "h2-async",
      "description": "This module enables asynchronous HTTP/2 client communication over both plaintext and secure channels, supporting bidirectional streams, server push, and connection lifecycle management. It provides core operations for creating connections, sending requests with optional trailers, handling responses, and exchanging ping frames, with concrete use cases in building efficient API clients and streaming applications. The SSL/TLS submodule extends these capabilities with secure communication, allowing custom TLS configurations, encrypted data transfer, and handling of server-initiated streams. Together, the module and its submodules facilitate robust client implementations for real-time, long-lived, and secure HTTP/2 connections to backend services.",
      "description_length": 752,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_async",
      "library": "h2-async",
      "description": "This module provides asynchronous HTTP/2 communication for both servers and clients, handling connection management, stream processing, and secure TLS integration. It supports key operations such as request/response handling, bidirectional streams, server push, and connection lifecycle events, with data types representing streams, connections, and TLS configurations. Example uses include building high-performance API servers with custom request handlers and developing secure HTTP/2 clients that consume streaming endpoints or manage long-lived connections to backend services.",
      "description_length": 581,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 752,
    "min_description_length": 412,
    "avg_description_length": 537.5,
    "embedding_file_size_mb": 0.022248268127441406
  }
}