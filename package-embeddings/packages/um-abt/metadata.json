{
  "package": "um-abt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:33:56.391370",
  "modules": [
    {
      "module_path": "Abt.Make.Unification.Subst",
      "description": "Provides operations to look up variables in a substitution, retrieve all variable-term pairs, and convert the substitution to a string representation. Works with variable-term mappings where terms are represented as a custom type. Used to inspect and serialize substitutions during term manipulation or debugging.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Abt.Make.Unification",
      "description": "Manages variable-term mappings through lookup, extraction, and string conversion. Key data types include variables and custom-term structures, with operations for inspecting and serializing substitutions. Allows retrieval of all bindings and conversion to human-readable formats. Enables debugging by exposing substitution contents and facilitating term inspection.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Var.Binding",
      "description": "Provides a total ordering and equality check for bindings, along with functions to create and retrieve the string name associated with each binding. Works with the `t` type, representing immutable references to variables. Used to compare and identify variable bindings in symbolic computation or constraint systems.",
      "description_length": 315,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Var.Set",
      "description": "This module provides set theory operations like union, intersection, and difference, along with element insertion, deletion, and membership checks, all tailored for ordered sets that maintain sorted order. It supports traversal, transformation, and predicate-based queries, enabling tasks such as filtering or mapping elements within ordered collections. Additionally, it facilitates constructing and modifying sets from sequences, useful for processing incremental or structured data inputs.",
      "description_length": 492,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Var.Map",
      "description": "The module provides functions for creating, modifying, and querying ordered maps with key-value pairs, supporting operations like adding, removing, merging, and transforming entries, along with iteration and filtering based on predicates. It works with ordered data structures and sequences, enabling efficient handling of dynamic datasets, such as maintaining sorted records or processing structured data in specific orders.",
      "description_length": 425,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Abt.Unification.Subst",
      "description": "Provides operations to look up variables in a substitution, retrieve all variable-term pairs, and convert the substitution to a string representation. Works with variable identifiers and term structures. Used to inspect and serialize substitution states during term rewriting or symbolic computation.",
      "description_length": 300,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Var",
      "description": "defines a system for managing variables and their relationships through ordered, immutable references, sets, and maps. It supports comparing and identifying variable bindings, performing set operations on ordered collections, and manipulating key-value pairs in sorted structures. Users can create and modify variable bindings, combine and filter sets, and manage dynamic data through ordered maps. Examples include tracking variable dependencies, merging constraint sets, and maintaining sorted records with efficient lookups.",
      "description_length": 527,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Abt.Make",
      "description": "Converts between a wrapped type and S-expressions, applies functions to elements within the structure, compares values for equality, folds over elements, and generates string representations from string-wrapped values. Operates on a parameterized type that encapsulates a single value. Used to serialize and deserialize data, transform contained values, and perform aggregations in a type-safe manner.",
      "description_length": 401,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Abt.Op",
      "description": "Converts between S-expressions and values of a wrapped type, applies functions to elements within the type, compares values for equality, folds over elements, and generates string representations from string-typed values. Works with any type wrapped in a monadic-like structure. Used to serialize and deserialize data, transform contained values, and perform aggregations during parsing or processing.",
      "description_length": 401,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Abt.Unification",
      "description": "Handles variable substitution in symbolic computation by allowing variable lookup, extraction of all bindings, and string conversion. Operates on variable identifiers and term structures, enabling inspection and serialization of substitution states. Users can retrieve specific variable values, list all substitutions, or generate human-readable representations. Useful for debugging or tracking changes in term rewriting systems.",
      "description_length": 430,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "um-abt",
      "description": "Provides functions for creating, updating, and querying immutable tables with key-value pairs using hash tables. Operates on strings, integers, and custom types as keys, and arbitrary values as associated data. Used to manage configuration settings and map user inputs to predefined responses in command-line tools.",
      "description_length": 315,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Abt",
      "description": "Provides a framework for working with abstract binding trees by enabling serialization and transformation of wrapped values, variable substitution, and inspection of term structures. It supports operations like equality checks, folding, and string conversion for arbitrary types, as well as variable lookup, substitution extraction, and term serialization. Users can convert between S-expressions and values, apply functions to elements, and track variable bindings during symbolic computations. Examples include parsing structured data, performing term rewriting, and debugging substitution states.",
      "description_length": 599,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 12,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 599,
    "min_description_length": 300,
    "avg_description_length": 406.9166666666667,
    "embedding_file_size_mb": 0.04402351379394531
  }
}