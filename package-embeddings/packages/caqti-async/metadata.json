{
  "package": "caqti-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:13.506734",
  "modules": [
    {
      "module_path": "Caqti_async.Stream",
      "description": "Provides operations to process and transform streams, including folding with error handling, iterating with potential failure, and converting streams to lists in forward or reversed order. Works with a delayed evaluation structure representing stream elements and errors, where each node may yield a value, an error, or a continuation. Used to handle asynchronous data sequences, such as processing logs, handling network data, or managing event streams with error recovery.",
      "description_length": 474,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Caqti_async.Pool",
      "description": "Provides operations to manage a pool of resources, including retrieving the current size, using a resource with a specified priority, and draining all resources. Works with a parameterized type that holds resources and potential errors. Used to efficiently manage database connections or API clients with controlled concurrency and resource lifecycle.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async.Response",
      "description": "Returns the count of rows affected or returned by a database operation, checks for success with zero or one row, and processes result sets through folding, iteration, or streaming. Works with database response objects that may contain decoded rows or errors. Used to handle query results, validate execution outcomes, and process large datasets incrementally.",
      "description_length": 359,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "caqti-async",
      "description": "Provides functions for connecting to and querying relational databases using a unified API, with support for parameterized SQL queries and type-safe data encoding/decoding. Works with database connection URIs, query templates, and result sets. Used to execute dynamic SQL statements, fetch rows with typed columns, and manage database sessions in a thread-safe manner.",
      "description_length": 368,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async",
      "description": "provides row count validation, result set processing, and error checking through functions that combine database calls with retrieval operations. It handles decoded rows, errors, and large datasets using folding, iteration, or streaming. Examples include counting affected rows after an update, checking for exactly one result, and processing query outputs incrementally. Operations work directly with database response objects to ensure precise control over query execution and data handling.",
      "description_length": 493,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 493,
    "min_description_length": 351,
    "avg_description_length": 409.0,
    "embedding_file_size_mb": 0.018575668334960938
  }
}