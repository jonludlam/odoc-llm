{
  "package": "caqti-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:16.847953",
  "modules": [
    {
      "module_path": "Caqti_async.Stream",
      "library": "caqti-async",
      "description": "This module processes asynchronous streams with operations to fold, iterate, and convert to and from lists. It handles element-wise transformations and accumulations, supporting both synchronous and asynchronous effectful callbacks. Use cases include consuming database query results into collections, applying asynchronous validation to each stream element, or batching stream items into lists for further processing.",
      "description_length": 418,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async.CONNECTION-Response",
      "library": "caqti-async",
      "description": "This module provides operations to inspect and retrieve results from database queries, specifically handling row counts and data extraction. It works with response types that encapsulate query outcomes, supporting both single and multiple row results. Concrete use cases include retrieving a single decoded row with `find`, folding over all rows with `fold`, and converting responses into a stream of decoded rows with `to_stream`.",
      "description_length": 431,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async.Pool",
      "library": "caqti-async",
      "description": "This module manages a pool of asynchronous resources, allowing controlled access and reuse. It provides operations to check the current pool size, use a resource with a given function, and drain all resources. Concrete use cases include managing database connections or network clients in an Async-based application.",
      "description_length": 316,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async.CONNECTION",
      "library": "caqti-async",
      "description": "This module provides operations for executing SQL queries, managing transactions, and handling connection lifecycles in an asynchronous environment. It works with SQL queries and responses, processing results into lists or via folding operations, and supports deferred computation for non-blocking execution. Specific use cases include transactional integrity with `with_transaction`, bulk data insertion via `populate`, and efficient result aggregation with `collect_list` or `rev_collect_list`.",
      "description_length": 496,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_async",
      "library": "caqti-async",
      "description": "This module coordinates asynchronous database interactions through connection management, query execution, and result processing. It supports establishing single or pooled connections via URIs, executing parameterized SQL queries, and managing transactions with non-blocking operations like `with_transaction`. Key data types include connections, queries, and responses, with operations to fold, map, and stream results. For example, `collect_list` aggregates query results into a list, while connection pools regulate resource usage in concurrent applications.",
      "description_length": 561,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 561,
    "min_description_length": 316,
    "avg_description_length": 444.4,
    "embedding_file_size_mb": 0.018613815307617188
  }
}