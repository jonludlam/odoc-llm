{
  "package": "ppx_yojson_conv",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:06.194910",
  "modules": [
    {
      "module_path": "Ppx_yojson_conv_expander.Sig_yojson",
      "library": "ppx_yojson_conv.expander",
      "description": "Converts type declarations into corresponding `sig` signatures for generating `Yojson` conversion functions. It processes recursive type definitions and expands them into a signature structure compatible with `Ppxlib`. This enables automatic derivation of `to_yojson` and `of_yojson` functions for custom types.",
      "description_length": 311,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Attrs",
      "library": "ppx_yojson_conv.expander",
      "description": "This module defines attributes for customizing record field serialization in JSON. It provides `default`, `drop_default`, and `drop_if` to specify default values, optional dropping of fields, and conditional exclusion based on expressions. These attributes are applied to record fields during type definition to control runtime JSON conversion behavior.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_of",
      "library": "ppx_yojson_conv.expander",
      "description": "This module generates functions to convert OCaml values to Yojson representations. It provides functions to derive expressions and type extensions for Yojson conversion, working directly with `Ppxlib.core_type` and `Ppxlib.type_declaration`. It is used to automatically generate serialization code for custom types in a type-safe manner.",
      "description_length": 337,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_fields",
      "library": "ppx_yojson_conv.expander",
      "description": "Converts type declarations into corresponding Yojson conversion functions for use in JSON serialization and deserialization. It operates on OCaml type declarations and generates structure items that implement `to_yojson` and `of_yojson` functions. This is used when defining custom JSON codecs for record and variant types in a type-safe manner.",
      "description_length": 345,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Of_yojson",
      "library": "ppx_yojson_conv.expander",
      "description": "Converts OCaml types to and from Yojson representations, generating serialization and deserialization functions for user-defined types. Works with algebraic data types, records, and variants, producing code that handles JSON parsing and construction. Used to automatically derive `of_yojson` and `to_yojson` functions for types without writing boilerplate conversion code manually.",
      "description_length": 381,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv_expander",
      "library": "ppx_yojson_conv.expander",
      "description": "This module processes OCaml type declarations to generate type-safe JSON serialization and deserialization functions, handling recursive and algebraic types, records, and variants. It supports customization of record field behavior with attributes like `default`, `drop_default`, and `drop_if`, enabling fine-grained control over JSON output. The generated functions convert values to and from Yojson representations, implementing `to_yojson` and `of_yojson` automatically based on type structure. For example, a variant type can have its JSON encoding customized per constructor, or a record can omit fields with default values during serialization.",
      "description_length": 650,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv",
      "library": "ppx_yojson_conv",
      "description": "This module generates functions to convert between OCaml values and Yojson ASTs, handling both polymorphic and record-like data structures. It provides attributes for deriving `of_yojson`, `yojson_of`, and field-specific conversions, enabling seamless JSON serialization and deserialization. Concrete use cases include parsing JSON configuration files into typed OCaml records and converting OCaml data to JSON for API responses.",
      "description_length": 429,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 650,
    "min_description_length": 311,
    "avg_description_length": 400.85714285714283,
    "embedding_file_size_mb": 0.025831222534179688
  }
}