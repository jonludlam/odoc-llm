{
  "package": "ppx_yojson_conv",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:30:19.785366",
  "modules": [
    {
      "module_path": "Ppx_yojson_conv_expander.Attrs",
      "description": "Handles attribute manipulation for OCaml AST nodes, providing functions to create, remove, and conditionally drop attributes associated with label declarations. Works with Ppxlib's attribute type, which wraps label declarations and expressions or options. Used to modify generated code during ppx processing, such as omitting fields under specific conditions.",
      "description_length": 359,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_of",
      "description": "Converts OCaml core types into JSON-compatible expressions, handling type declarations and module structures. Operates on ppxlib's core_type, location, and type_declaration structures to generate serialized representations. Used to embed type information from OCaml code into JSON for tooling or configuration purposes.",
      "description_length": 319,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_fields",
      "description": "Provides functions to generate OCaml type declarations from JSON schema fields, including handling of record types and locations. Works with JSON field paths, type declarations, and location metadata. Used to automatically derive OCaml types from structured JSON data during ppx processing.",
      "description_length": 290,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Of_yojson",
      "description": "Converts OCaml type definitions into YOJSON-compatible representations, handling core types, type declarations, and their locations. Processes module paths and recursion flags to generate structured output suitable for serialization. Supports both signature and structure contexts for use in ppx rewriters.",
      "description_length": 306,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Sig_yojson",
      "description": "Handles the creation of type declarations within a module signature, taking location, path, and type information to construct valid signature entries. Operates on Ppxlib's location data, strings, and type declaration structures. Used to inject custom type definitions into the abstract syntax tree during ppx processing.",
      "description_length": 320,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_yojson_conv",
      "description": "Provides functions to serialize and deserialize OCaml values to and from JSON, using custom syntax extensions. Works with OCaml's variant, record, and sum types, enabling direct conversion to and from JSON strings. Enables seamless integration of JSON data in applications requiring structured data exchange.",
      "description_length": 308,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv",
      "description": "Converts OCaml types to and from JSON using yojson, supporting polymorphic variants and field-specific serialization. Operates on OCaml types, including records and variants, with customizable field mappings. Enables direct integration of JSON parsing and generation in code through syntax extensions.",
      "description_length": 301,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander",
      "description": "Manages OCaml AST attributes, type serialization, and type declaration generation for ppx processing. Processes core types, label attributes, and JSON schemas to produce or consume structured data representations. Enables conditional attribute manipulation, type derivation from JSON, and injection of custom type signatures. Supports conversions between OCaml types and YOJSON formats, with context-aware handling of module paths and recursion.",
      "description_length": 445,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 445,
    "min_description_length": 290,
    "avg_description_length": 331.0,
    "embedding_file_size_mb": 0.02946186065673828
  }
}