{
  "package": "ppx_yojson_conv",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:04:12.876213",
  "modules": [
    {
      "module_path": "Ppx_yojson_conv_expander.Sig_yojson",
      "library": "ppx_yojson_conv.expander",
      "description": "Converts type declarations into corresponding Yojson conversion functions within OCaml signatures. It processes recursive type definitions and generates appropriate serialization logic for use with the Yojson library. This enables direct conversion of OCaml values to and from JSON representations based on declared types.",
      "description_length": 322,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_fields",
      "library": "ppx_yojson_conv.expander",
      "description": "Converts type declarations into corresponding Yojson conversion functions for use in OCaml code. It processes type definitions to generate code that serializes and deserializes values to and from Yojson representations. Useful when implementing custom JSON encoders and decoders for algebraic data types.",
      "description_length": 304,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Of_yojson",
      "library": "ppx_yojson_conv.expander",
      "description": "This module provides functions to generate OCaml code for converting JSON values to OCaml types using the Yojson library. It works with OCaml abstract syntax trees represented by Ppxlib types, including core types, expressions, and signatures. Concrete use cases include automatically deriving `of_yojson` functions for custom types during compilation, enabling seamless JSON deserialization without writing boilerplate code.",
      "description_length": 425,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Attrs",
      "library": "ppx_yojson_conv.expander",
      "description": "This module defines attributes used to control serialization behavior during Yojson conversion. It provides `default`, `drop_default`, and `drop_if` to specify default values and conditions for omitting fields. These attributes are applied to label declarations to influence how values are encoded or excluded in generated JSON.",
      "description_length": 328,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv_expander.Yojson_of",
      "library": "ppx_yojson_conv.expander",
      "description": "This module generates functions to convert OCaml values to Yojson representations. It operates on OCaml abstract syntax trees, specifically type declarations and core types, producing expressions and signatures for serialization. It is used to automatically derive `to_yojson` functions for custom data types during compilation.",
      "description_length": 328,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_yojson_conv_expander",
      "library": "ppx_yojson_conv.expander",
      "description": "This module expands OCaml type definitions into JSON serialization and deserialization functions using the Yojson library. It processes type declarations to generate `to_yojson` and `of_yojson` implementations, supporting attributes like `default`, `drop_default`, and `drop_if` to control field behavior during conversion. It operates directly on OCaml abstract syntax trees, enabling automatic derivation of JSON encoders and decoders for algebraic data types without runtime overhead.",
      "description_length": 487,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_yojson_conv",
      "library": "ppx_yojson_conv",
      "description": "This module generates functions to convert between OCaml values and Yojson ASTs, handling sum types, records, and polymorphic variants. It provides `of_yojson`, `yojson_of`, and `yojson_fields_of` to derive converters for custom types, enabling serialization and deserialization. Use it to automatically generate JSON encoders and decoders for algebraic data types in configuration parsing or API data exchange.",
      "description_length": 411,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 487,
    "min_description_length": 304,
    "avg_description_length": 372.14285714285717,
    "embedding_file_size_mb": 0.10183048248291016
  }
}