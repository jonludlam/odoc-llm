{
  "package": "cohttp_async_websocket",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:17.693953",
  "modules": [
    {
      "module_path": "Cohttp_async_websocket.Server.On_connection",
      "library": "cohttp_async_websocket",
      "description": "This module defines a connection handler for WebSocket servers that processes incoming connections using a provided function. It works with `Websocket.t` connections and allows customization of response headers and behavior around the `Sec-WebSocket-Accept` header. A concrete use case is handling client upgrades to WebSocket connections while setting custom headers or overriding default acceptance logic.",
      "description_length": 407,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async_websocket.Server",
      "library": "cohttp_async_websocket",
      "description": "This module sets up a WebSocket server that upgrades HTTP requests to WebSocket streams, supporting subprotocol selection and custom request handling through `create`. It works with `Cohttp.Request.t`, `Header.t`, and `On_connection.t` to manage connections and message processing, allowing precise control over the `Sec-WebSocket-Accept` header and response behavior. The child module provides a customizable connection handler that processes incoming WebSocket connections using user-defined logic, such as validating headers or modifying upgrade responses. Example usage includes building real-time communication services where clients connect via HTTP upgrade and then exchange messages over WebSocket with tailored header handling.",
      "description_length": 736,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async_websocket.Header",
      "library": "cohttp_async_websocket",
      "description": "This module handles HTTP header manipulation through case-insensitive, ordered key-value pairs, supporting operations like addition, removal, modification, and querying of headers with optional duplicate handling. It provides utilities for transforming headers to and from strings, concatenating values, and extracting structured data such as media types or WebSocket subprotocols. Use cases include managing authentication tokens, parsing user agent strings, enforcing RFC-compliant header formatting, and configuring WebSocket connections via origin validation or subprotocol negotiation.",
      "description_length": 590,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async_websocket.Client",
      "library": "cohttp_async_websocket",
      "description": "This module creates and manages WebSocket client connections using the Cohttp_async library. It provides functions to establish a connection to a WebSocket server, send and receive messages, and ensure proper cleanup by closing the writer pipe. Concrete use cases include implementing real-time communication with a server, such as subscribing to live data feeds or handling bidirectional messaging in a networked application.",
      "description_length": 426,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async_websocket",
      "library": "cohttp_async_websocket",
      "description": "This module enables asynchronous WebSocket communication over HTTP/1.1 by integrating handshake handling, header manipulation, and connection management. It supports key data types like `Cohttp.Request.t`, `Header.t`, and connection handlers to facilitate server and client implementations with precise control over subprotocols, headers, and message streams. You can build WebSocket servers that validate and upgrade incoming connections, or create clients that send and receive messages over TCP while managing headers for authentication or negotiation. The module's components work together to handle real-time communication scenarios, such as live data feeds or interactive networked services with custom header and protocol logic.",
      "description_length": 735,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 736,
    "min_description_length": 407,
    "avg_description_length": 578.8,
    "embedding_file_size_mb": 0.01862049102783203
  }
}