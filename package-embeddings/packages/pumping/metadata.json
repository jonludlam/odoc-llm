{
  "package": "pumping",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:07.062641",
  "modules": [
    {
      "module_path": "Pumping.Re.Infix",
      "library": "pumping",
      "description": "This module defines infix operators for constructing regular expressions, including concatenation (`*`), alternation (`+`), and atom conversion (`!`). It works with the `Pumping.Re.t` type representing regular expressions and `Pumping.atom` for basic character-level patterns. Use it to build complex regex patterns in a concise, readable way using standard operator syntax.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.Var",
      "library": "pumping",
      "description": "This module manages the creation and manipulation of unique variable identifiers. It provides functions to generate fresh variables, retrieve their string names, and format them for output. Useful in symbolic computation and compiler implementations where distinct variable names are required.",
      "description_length": 293,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.Re",
      "library": "pumping",
      "description": "This module provides a variant-based representation of regular expressions with core operations like concatenation, alternation, intersection, and repetition. It supports construction and manipulation of patterns using characters, character sets, and custom atoms, enabling tasks like parser generation, string validation, and lexical analysis. The child module adds infix operators for concise regex assembly, allowing expressions like `! 'a' * ! 'b' + ! 'c'` to represent `(ab|c)` in standard syntax. Together, they form a structured and readable interface for working with formal languages.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pumping.ReMap",
      "library": "pumping",
      "description": "This module implements an ordered associative map with keys of type `Pumping.Re.t` and polymorphic values, supporting standard operations like insertion, deletion, and lookup, as well as transformations (`map`, `filter_map`), combinations (`merge`, `union`), and order-based queries (`min`, `max`, `split`). It provides utilities for converting between maps and sequences, enabling initialization from key-value pairs or iterative processing of bindings. Such functionality is useful in data processing pipelines requiring ordered key management, structured data aggregation, or polymorphic value manipulation.",
      "description_length": 610,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pumping.Posix",
      "library": "pumping",
      "description": "This module parses POSIX regular expressions into an internal representation and simplifies them for efficient matching. It operates on strings and abstract syntax trees representing regular expressions, producing transformed patterns suitable for use in text processing tasks. Concrete use cases include compiling regex patterns from strings and optimizing their structure before execution.",
      "description_length": 391,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pumping.CSet",
      "library": "pumping",
      "description": "This library component provides functions for constructing and operating on immutable ordered character sets with standard set-theoretic operations like union, intersection, and difference, along with membership testing, range queries, and retrieval of minimum/maximum elements. It supports conversions to and from sequences and lists, enabling efficient text processing workflows such as lexical analysis, character classification, and incremental data traversal where ordered set manipulation and streaming are critical.",
      "description_length": 522,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping",
      "library": "pumping",
      "description": "This module enables symbolic type manipulation through algebraic operations on expression trees, combining set/map-based variable management and regular expression transformations. It supports key data types like `ty`, `Re`, `SMap`, and `CSet`, allowing operations such as type derivation, regex construction with infix operators, ordered map manipulation, and character set computation. You can generate fresh variables for symbolic computation, convert patterns to regex, optimize regex structures, and perform ordered set operations for lexical analysis. Submodules enhance these capabilities with identifier generation, variant-based regex, ordered maps, and efficient character set handling.",
      "description_length": 696,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 7,
    "filtered_empty_modules": 1,
    "retention_rate": 0.875
  },
  "statistics": {
    "max_description_length": 696,
    "min_description_length": 293,
    "avg_description_length": 497.0,
    "embedding_file_size_mb": 0.025873184204101562
  }
}