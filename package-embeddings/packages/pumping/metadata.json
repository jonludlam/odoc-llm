{
  "package": "pumping",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:04:25.036506",
  "modules": [
    {
      "module_path": "Pumping.Re.Infix",
      "library": "pumping",
      "description": "This module defines infix operators for constructing regular expressions, allowing concatenation with `+` and alternation with `*`. It works with the `Pumping.Re.t` type representing regular expressions and `Pumping.atom` for basic elements. Use it to build complex patterns like `!a + !b` for \"ab\" or `!a * !b` for \"a|b\".",
      "description_length": 322,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.SMap",
      "library": "pumping",
      "description": "This module provides operations for creating and manipulating sorted maps with string keys, supporting insertion, lookup, filtering, and ordered traversal. It works with key-value pairs where keys are strings and values can be arbitrary types, maintaining sorted order during transformations like `map`, `filter_map`, and sequence conversions. Typical use cases include managing configuration data, processing lexically ordered string mappings, and efficiently querying or aggregating values in sorted key ranges.",
      "description_length": 513,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.Posix",
      "library": "pumping",
      "description": "Parses POSIX regular expressions into an abstract syntax tree, simplifies nested or redundant patterns, and constructs expressions from string inputs. Works directly with strings and Re AST structures. Useful for validating and transforming regex patterns used in text processing pipelines.",
      "description_length": 290,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.Re",
      "library": "pumping",
      "description": "This module implements a domain-specific language for constructing and manipulating regular expressions using a variant type that supports concatenation, alternation, intersection, and repetition. It provides functions to build expressions from characters, character sets, and atoms, along with combinators for repetition ranges, optional elements, and Kleene star/plus operations. Concrete use cases include defining lexical analyzers, parsing structured text, and implementing pattern matchers for input validation or transformation tasks.",
      "description_length": 541,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.CSet",
      "library": "pumping",
      "description": "This module provides operations for manipulating sets of characters, including standard set operations like union, intersection, difference, and membership checks, alongside ordered-set functionalities such as retrieving minimum/maximum elements, range-based searches, and ordered traversal. It works with totally ordered character sets and supports conversions to and from lists and sequences, enabling efficient iteration and bulk construction from sequential data. These features are particularly useful for tasks like text processing, parsing, or managing character ranges where ordered set semantics and interoperability with sequential structures are critical.",
      "description_length": 666,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping.ReMap",
      "library": "pumping",
      "description": "This module implements a persistent associative map with regular expression-derived keys, supporting insertion, deletion, ordered traversal, and higher-order transformations like mapping and filtering. It operates on polymorphic value types paired with keys of a specific pattern-based type, enabling efficient lookups, bulk updates from sequences, and bidirectional ordered iteration. The structure is optimized for applications requiring dynamic key-value associations with pattern-based keys, such as routing configurations or data pipelines needing incremental updates and ordered traversal.",
      "description_length": 595,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pumping.Var",
      "library": "pumping",
      "description": "This module represents and manipulates variable identifiers with a focus on generating fresh variables and pretty-printing. It works with a single abstract type `t` that encapsulates variable state. Concrete use cases include generating unique variable names during code transformation and formatting variables for debugging or output.",
      "description_length": 335,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pumping",
      "library": "pumping",
      "description": "This module offers operations for manipulating character sets, regular expressions, and maps with string or pattern-based keys, alongside variable generation and type definitions for transitions and aliases, primarily supporting text processing, parsing, and transformation workflows. It also enables parsing and transforming OCaml type representations\u2014especially polymorphic variants",
      "description_length": 384,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 666,
    "min_description_length": 290,
    "avg_description_length": 455.75,
    "embedding_file_size_mb": 0.1163339614868164
  }
}