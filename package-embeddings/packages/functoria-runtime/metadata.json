{
  "package": "functoria-runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:43.748740",
  "modules": [
    {
      "module_path": "Functoria_runtime.Key",
      "library": "functoria-runtime",
      "description": "This module manages runtime keys that can be set via command-line arguments, providing functions to create keys, retrieve their values, and access default values. It works with values of any type `'a` wrapped in the `Key.t` abstract type, along with `Cmdliner.Term.t` for integrating with command-line parsing. Concrete use cases include defining configurable runtime parameters such as logging levels, file paths, or service endpoints that are resolved from command-line input during program startup.",
      "description_length": 501,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Functoria_runtime.Arg",
      "library": "functoria-runtime",
      "description": "This module defines runtime command-line arguments using a subset of Cmdliner.Arg, providing functions to create optional and required values, flags, and keys with optional defaults. It works with types like `Cmdliner.Arg.converter`, `Cmdliner.Arg.info`, and constructs values of type `'a Functoria_runtime.Arg.t`. Use it to declare command-line parameters that are parsed and used directly at runtime, such as configuring application behavior through switches or input values.",
      "description_length": 477,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Functoria_runtime",
      "library": "functoria-runtime",
      "description": "This module orchestrates runtime configuration by parsing command-line arguments and evaluating keys through Cmdliner integration. It processes `Cmdliner.Term.t` lists and argument arrays, resolving values of any type `'a` wrapped in `Key.t`, while handling errors, help, and version flags. Developers can define configurable parameters like logging levels or service endpoints, using `Arg.t` to declare command-line inputs such as flags, optional values, and required arguments with custom converters and defaults. It also exposes build-time data, such as library versions, to inform runtime behavior.",
      "description_length": 602,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 602,
    "min_description_length": 477,
    "avg_description_length": 526.6666666666666,
    "embedding_file_size_mb": 0.0113067626953125
  }
}