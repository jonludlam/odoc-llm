{
  "package": "re_parser",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:34:35.214051",
  "modules": [
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax.Open_on_rhs.Applicative_infix",
      "description": "Applies functions within a context using <*> to combine transformations, sequences effects with <* and *>, and maps values with >>|. Works with monadic types encapsulating computations. Executes sequential operations where side effects or dependencies are managed within the structure. Processes validated inputs, transforms results, and ensures execution order in effectful workflows.",
      "description_length": 385,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax.Open_on_rhs.Char",
      "description": "Provides predicates and combinators for character classification and matching, including checks for specific characters, sets of characters, and character categories. Works with character values and lists of characters to define patterns for validation or parsing. Used to filter input based on alphanumeric, whitespace, or case-sensitive criteria.",
      "description_length": 348,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax.Open_on_rhs.Decimal",
      "description": "Provides operations to extract the digit, sign, and unsigned value from a decimal number, and to convert a decimal to an integer. Works with the `Base.int` type, representing decimal values. Used to analyze and transform decimal data in numerical processing tasks.",
      "description_length": 264,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax.Open_on_rhs",
      "description": "Combines monadic operations for effectful computation sequencing and transformation, character-based pattern matching, and decimal number analysis. Supports <*> for combining effects, <<| for mapping, and predicates for character validation, alongside functions to extract and convert decimal components. Enables structured processing of input streams, validation of character sequences, and conversion of numerical values. Can parse and transform numeric strings, filter character lists, and manage sequential computations with side effects.",
      "description_length": 542,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax",
      "description": "Sequences effectful computations and processes character-based patterns, offering operations like <*> for effect combination and <<| for mapping. It handles decimal number analysis with functions to extract and convert numeric components. It enables parsing of numeric strings, filtering of character lists, and validation of input sequences. Predicates support character validation, while structured processing simplifies complex transformations.",
      "description_length": 447,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Open_on_rhs_intf.Applicative_infix",
      "description": "Applies a function wrapped in a context to a value in the same context, and lifts functions into a context for sequential transformation. Operates on monadic types, enabling chaining and combining computations. Used to sequence effects while preserving values, such as extracting and transforming results from a parser or effectful computation.",
      "description_length": 344,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re_parser.Open_on_rhs_intf.Char",
      "description": "Provides operations to create character matchers for regex-like patterns, including matching any character, one of a set, not one of a set, and specific categories like uppercase, lowercase, alphabetic, numeric, and whitespace. Works with `Base.char` and lists of `Base.char`. Used to define precise character constraints in pattern matching or validation logic.",
      "description_length": 362,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Open_on_rhs_intf.Decimal",
      "description": "Provides operations to extract the digit value, sign, and unsigned integer representation from a decimal value. Works with custom decimal types that encapsulate integer components and sign information. Used to process and validate numeric input in financial calculations or data parsing scenarios.",
      "description_length": 297,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Open_on_rhs_intf",
      "description": "Combines monadic sequencing, character pattern matching, and decimal value extraction into a unified interface for effectful computation, pattern validation, and numeric processing. Supports operations like binding within contexts, constructing regex-like character matchers, and parsing decimal components such as digits, signs, and magnitudes. Enables tasks like parsing structured text, validating input with precise character rules, and handling decimal numbers in financial applications. Examples include transforming parser outputs, enforcing character constraints in input validation, and extracting numeric details for calculation.",
      "description_length": 639,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Let_syntax",
      "description": "Combines effectful computations and character pattern processing, supporting operations like <*> for effect composition and <<| for mapping. It handles numeric string parsing, character filtering, and validation through predicates and structured transformations. Key data types include sequences, character lists, and numeric components, with operations for extraction, conversion, and validation. Examples include parsing decimal strings, filtering valid characters, and combining effectful operations.",
      "description_length": 503,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Applicative_infix",
      "description": "Applies a function wrapped in a context to a value in the same context, and sequences operations while discarding intermediate results. Works with monadic types that support applicative operations. Used to chain transformations and control evaluation order in effectful computations.",
      "description_length": 283,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re_parser.Char",
      "description": "Matches any character, including newlines, and provides specific character class patterns like uppercase, lowercase, alphabetic, numeric, and whitespace. Constructs character sets from lists of characters and negates them. Used for precise pattern matching in regular expressions, such as validating input formats or parsing structured text.",
      "description_length": 341,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Decimal",
      "description": "Provides operations to extract the digit value, sign, and unsigned integer representation from a decimal value. Works with custom decimal types that encapsulate integer components and sign information. Used to process and validate numeric input in financial calculations or data parsing scenarios.",
      "description_length": 297,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "re_parser",
      "description": "Parses regular expressions into abstract syntax trees and evaluates them against input strings. Processes patterns with capture groups, character classes, and quantifiers. Used to implement custom pattern matching in text processing pipelines.",
      "description_length": 243,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser",
      "description": "Combines monadic sequencing, character matching, and decimal parsing into a unified interface for effectful computation and structured data extraction. Key data types include monadic contexts, character sets, and custom decimal representations, with operations for binding, pattern matching, and numeric decomposition. It enables tasks like validating input formats, parsing numeric strings, and transforming structured text. Examples include extracting sign and magnitude from decimal values, filtering valid characters, and composing effectful parsing steps.",
      "description_length": 560,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 639,
    "min_description_length": 243,
    "avg_description_length": 390.3333333333333,
    "embedding_file_size_mb": 0.05135536193847656
  }
}