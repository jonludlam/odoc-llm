{
  "package": "re_parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:13:33.204005",
  "modules": [
    {
      "module_path": "Re_parser.Let_syntax.Let_syntax",
      "library": "re_parser",
      "description": "This module provides monadic operations for building and transforming parsers, including returning values, mapping functions over parsed results, and combining parsers to capture pairs of results. It works with parser values represented by the `'a Re_parser.t` type, enabling sequential composition and result manipulation. Concrete use cases include constructing complex parsers from simpler components, such as parsing structured text formats or extracting and transforming matched patterns from input strings.",
      "description_length": 512,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Applicative_infix",
      "library": "re_parser",
      "description": "This module provides applicative-style parser combinators for composing and sequencing parser operations. It works with `Re_parser.t` values, which represent parsers of arbitrary types. Use it to combine parsers sequentially, map results, or chain effects, such as parsing a value followed by a separator, or transforming parser outputs inline.",
      "description_length": 344,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Decimal",
      "library": "re_parser",
      "description": "Parses integer values from strings using regular expressions. It handles optional signs, individual digits, and both signed and unsigned decimal numbers. Useful for converting string inputs into integers where leading signs and digit sequences need explicit pattern matching.",
      "description_length": 275,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Open_on_rhs_intf",
      "library": "re_parser",
      "description": "This module defines an interface for parsing regular expressions with support for opening and handling right-hand side (RHS) operations. It works with string and character data to enable pattern matching and substitution in text processing tasks. Concrete use cases include implementing custom regex engines, parsing structured logs, and transforming text based on dynamic pattern rules.",
      "description_length": 387,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Let_syntax",
      "library": "re_parser",
      "description": "This module provides monadic operations for building and combining parsers, including returning values, mapping functions over parsed results, and sequencing parsers to capture transformed or combined outputs. It works with the `'a Re_parser.t` type, enabling structured parsing workflows where intermediate results can be captured and manipulated. Concrete use cases include parsing structured text like configuration files or log entries, where multiple parser stages are composed to extract and transform specific data fields.",
      "description_length": 529,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser.Char",
      "library": "re_parser",
      "description": "This module provides parsers for matching individual characters based on specific properties or sets. It includes primitives for matching any character, specific character classes like digits or whitespace, and inclusion/exclusion from character lists. These parsers are useful for building lexers or validating character-level input patterns directly.",
      "description_length": 352,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_parser",
      "library": "re_parser",
      "description": "This module provides parser combinators for constructing and composing regular expression operations, supporting sequencing, mapping, alternation, repetition, and capturing. It operates on string inputs using `'a Re_parser.t` abstractions, enabling case-sensitive matching, boundary constraints, greedy/non-greedy quantifiers, and conversion to low-level regex representations. Typical applications include structured text parsing, data extraction (e.g., log analysis, tokenization), input validation, and pattern-driven string transformations.",
      "description_length": 544,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 544,
    "min_description_length": 275,
    "avg_description_length": 420.42857142857144,
    "embedding_file_size_mb": 0.1018533706665039
  }
}