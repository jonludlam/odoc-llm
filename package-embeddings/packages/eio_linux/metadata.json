{
  "package": "eio_linux",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:41.737307",
  "modules": [
    {
      "module_path": "Eio_linux.Low_level.Process",
      "library": "eio_linux",
      "description": "This module manages child processes using low-level Linux system calls, providing functions to spawn processes with a list of fork-time actions, send signals, retrieve process IDs, and await exit statuses. It works directly with process handles and Unix process status values. Concrete use cases include executing external commands with precise control over process creation and handling, such as launching subprocesses with redirected I/O or managing process lifetimes in event-driven applications.",
      "description_length": 499,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Eio_linux.Low_level",
      "library": "eio_linux",
      "description": "This module provides direct access to Linux system calls for I/O, memory, and process management, enabling fine-grained control over file descriptors, sockets, memory buffers, and paths. It supports high-performance I/O with mechanisms like io_uring, asynchronous readiness notifications, and Unix socket-based FD passing, while its child module extends functionality to process spawning, signal handling, and exit status monitoring. You can use it to implement custom file I/O pipelines, manage memory-mapped regions, traverse directories at the syscall level, or launch and control subprocesses with precise fork-time actions and I/O redirection.",
      "description_length": 648,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Eio_linux",
      "library": "eio_linux",
      "description": "This module implements a high-performance event loop using Linux's io_uring for asynchronous I/O, supporting configurable queue depths and memory management to enable scalable network servers and high-throughput file processing. It integrates direct access to low-level system calls for files, sockets, memory, and processes, allowing fine-grained control over I/O pipelines, memory-mapped regions, and subprocess management. You can build custom networking stacks with async socket handling, manage file descriptors with io_uring-backed operations, or spawn and monitor processes with precise I/O redirection. Its submodules extend this capability with Unix-specific features like signal handling, FD passing, and directory traversal for system-level application development.",
      "description_length": 776,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 776,
    "min_description_length": 499,
    "avg_description_length": 641.0,
    "embedding_file_size_mb": 0.011320114135742188
  }
}