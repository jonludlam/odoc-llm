{
  "package": "cohttp-lwt-jsoo",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:15.081518",
  "modules": [
    {
      "module_path": "Cohttp_lwt_jsoo.Make_client_sync",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements a synchronous HTTP client engine that handles chunked or unchunked response data as raw bytes or UTF-8 strings. It provides operations for making HTTP requests (GET, POST, PUT, DELETE, PATCH, HEAD) with optional headers, custom request bodies, and configurable response handling. Use cases include interacting with REST APIs, fetching resources from URLs, or sending form data synchronously in environments where Lwt IO is available.",
      "description_length": 456,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Client",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements an HTTP client interface using asynchronous XmlHttpRequests for making web requests and handling responses in a browser environment. It supports standard HTTP methods like GET, POST, PUT, DELETE, and PATCH, with options to send headers, body data, and control chunked transfer encoding. Responses are delivered as streams of 128KB chunks, treating body data as raw bytes, and it allows setting a global cache function for request processing.",
      "description_length": 464,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Make_client_async",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements an asynchronous HTTP client engine that handles requests and responses with support for chunked or unchunked data as raw bytes or UTF-8. It provides functions for standard HTTP methods (`get`, `post`, `put`, etc.) that take optional headers, request bodies, and chunking flags, returning responses paired with body streams. Use cases include making asynchronous HTTP calls to REST APIs, streaming large payloads efficiently, and handling custom request/response processing directly with low-level body and header types.",
      "description_length": 542,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Client_sync",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements HTTP client operations using synchronous XmlHttpRequests for making requests and handling responses in a browser environment. It supports standard HTTP methods like GET, POST, PUT, DELETE, and PATCH, with full control over headers, request bodies, and chunked transfer encoding. Concrete use cases include making synchronous API calls in client-side web applications, such as fetching or submitting data to a server endpoint.",
      "description_length": 448,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements HTTP client functionality for JavaScript environments using XMLHttpRequest, supporting both synchronous and asynchronous request handling. It provides operations for standard HTTP methods with configurable headers, request bodies, and chunked transfer encoding, working directly with raw bytes or UTF-8 strings. Use cases include making direct API calls to REST endpoints, streaming large responses in chunks, and handling form submissions or resource fetches in client-side web applications.",
      "description_length": 515,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 542,
    "min_description_length": 448,
    "avg_description_length": 485.0,
    "embedding_file_size_mb": 0.07285213470458984
  }
}