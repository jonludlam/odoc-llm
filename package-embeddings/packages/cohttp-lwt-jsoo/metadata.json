{
  "package": "cohttp-lwt-jsoo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:46.949016",
  "modules": [
    {
      "module_path": "Cohttp_lwt_jsoo.Make_client_async",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements an asynchronous HTTP client engine that handles requests and responses with support for chunked or unchunked transfer encoding, treating response data as raw bytes or UTF-8 strings. It provides functions for standard HTTP methods (`get`, `post`, `put`, `delete`, `patch`, `head`) with optional headers, body, and chunked encoding parameters, returning responses paired with body streams. Concrete use cases include making asynchronous HTTP calls to REST APIs, streaming large responses efficiently, and handling custom request/response pipelines in client applications.",
      "description_length": 592,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Make_client_sync",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements a synchronous HTTP client engine that handles requests and responses with support for chunked or unchunked data as raw bytes or UTF-8 strings. It provides functions for standard HTTP methods (GET, POST, PUT, DELETE, PATCH, HEAD) with optional headers, custom request bodies, and context management. Concrete use cases include making direct HTTP requests to REST APIs, uploading or downloading binary data, and interacting with web services that require synchronous request-response patterns.",
      "description_length": 514,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Client_sync",
      "library": "cohttp-lwt-jsoo",
      "description": "This module provides synchronous HTTP client operations using XmlHttpRequest, supporting standard methods like GET, POST, PUT, DELETE, and PATCH with customizable headers and request bodies. It works with HTTP requests and responses represented by `Http.Method.t`, `Uri.t`, `Http.Header.t`, and `Cohttp_lwt.Body.t`, handling the response as raw bytes without chunking. Concrete use cases include making direct synchronous API calls from client-side OCaml code running in a browser, such as fetching or submitting data to a web service.",
      "description_length": 535,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Client",
      "library": "cohttp-lwt-jsoo",
      "description": "This module performs HTTP client operations using asynchronous XmlHttpRequests, supporting standard methods like GET, POST, PUT, DELETE, and PATCH with customizable headers and request bodies. It handles requests and responses as raw byte streams in 128KB chunks and allows setting a global cache function for processing requests. Concrete use cases include making authenticated API calls, streaming large HTTP responses efficiently, and sending form data in web applications.",
      "description_length": 476,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo.Params",
      "library": "cohttp-lwt-jsoo",
      "description": "This module configures XmlHttpRequest behavior, including response chunking, chunk size, JavaScript-to-OCaml string conversion, and cross-origin credentials handling. It defines settings used when making HTTP requests via the Cohttp_lwt_jsoo client. Use this to customize low-level request/response processing in browser-based OCaml applications.",
      "description_length": 346,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_lwt_jsoo",
      "library": "cohttp-lwt-jsoo",
      "description": "This module implements an HTTP client for JavaScript targets using `XmlHttpRequest`, supporting both synchronous and asynchronous request handling with customizable headers, request bodies, and response processing. It provides core data types such as `Http.Method.t`, `Uri.t`, `Http.Header.t`, and `Cohttp_lwt.Body.t`, along with operations for standard HTTP methods like GET, POST, and PATCH, allowing interaction with REST APIs, form submission, and binary data transfer. The module includes submodules that handle asynchronous and synchronous request execution, with support for chunked and unchunked transfer encoding, streaming large responses in 128KB chunks, and configuring low-level settings such as cross-origin credentials and string encoding. Specific use cases include making authenticated API calls, streaming large HTTP responses efficiently, and managing direct synchronous data exchanges between client-side OCaml code and web services.",
      "description_length": 953,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 953,
    "min_description_length": 346,
    "avg_description_length": 569.3333333333334,
    "embedding_file_size_mb": 0.02222442626953125
  }
}