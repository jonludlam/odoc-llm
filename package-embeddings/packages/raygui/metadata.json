{
  "package": "raygui",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-14T23:17:43.583995",
  "modules": [
    {
      "module_path": "Raygui.ColorPicker",
      "library": "raygui",
      "description": "This module configures visual parameters for a color picker interface, such as selector size and hue bar dimensions. It works with a polymorphic variant type representing different UI layout properties. Use it to customize the appearance of color selection widgets in graphical applications.",
      "description_length": 291,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ComboBox",
      "library": "raygui",
      "description": "This module provides functions to set and get the padding and width of a combobox widget. It works with the `t` variant type representing combobox properties. Concrete use cases include adjusting combobox layout parameters and retrieving current property values for rendering or debugging.",
      "description_length": 289,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ScrollBar",
      "library": "raygui",
      "description": "This module defines constants for configuring scroll bar appearance and behavior, such as arrow size, padding, and scroll speed. It works with integer and float values to set visual and functional parameters. Use it to customize scroll bar properties in UI layouts requiring precise scrolling control.",
      "description_length": 301,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.TextBox",
      "library": "raygui",
      "description": "This module defines constants for configuring the appearance of text boxes, such as padding and color settings. It works with enumeration values representing different styling properties. Use it to customize visual aspects of text input elements in a user interface.",
      "description_length": 266,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Default",
      "library": "raygui",
      "description": "This module defines a set of symbolic identifiers for configuring visual properties such as background color, line color, text size, and text spacing. It works with enumeration values that represent specific UI styling parameters. These symbols are used directly in UI rendering functions to apply consistent visual settings across components.",
      "description_length": 343,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.TextAlignment",
      "library": "raygui",
      "description": "This module defines an enumeration for text alignment options, including left, center, and right. It provides a conversion function to map alignment values to integers. Useful for configuring UI element layout behavior in graphical applications.",
      "description_length": 245,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.DropdownBox",
      "library": "raygui",
      "description": "This module defines constants for padding settings used in dropdown boxes, specifically `Arrow_padding` and `Dropdown_items_padding`. It provides precise configuration options for adjusting spacing around the arrow and list items within a dropdown interface. These values are used directly when styling or customizing dropdown box components in a UI.",
      "description_length": 350,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ListView",
      "library": "raygui",
      "description": "This module defines constants for configuring visual properties of list views, such as item height, padding, and scrollbar dimensions. It works with enumerated values representing layout parameters. Use this module to customize the appearance of list-based UI components in a consistent and readable way.",
      "description_length": 304,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Spinner",
      "library": "raygui",
      "description": "Handles UI spinner controls for numeric input adjustments. Works with integer values and UI state management. Used to create interactive spinners for settings like padding or width in a graphical interface.",
      "description_length": 206,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ControlState",
      "library": "raygui",
      "description": "Represents the state of a UI control with four variants: `Normal`, `Focused`, `Pressed`, and `Disabled`. Provides the `to_int` function to convert a state value to its corresponding integer representation. Useful for integrating with rendering systems or event handlers that require numeric state codes.",
      "description_length": 303,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Toggle",
      "library": "raygui",
      "description": "This module handles the creation and management of toggle UI elements with specific padding configurations. It works with the `t` variant type to define different toggle styles and integrates directly with UI rendering systems. Use it to implement customizable toggle buttons in graphical interfaces.",
      "description_length": 300,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ProgressBar",
      "library": "raygui",
      "description": "Handles rendering and interaction logic for progress bar widgets. Works with numeric values and layout parameters to visualize progress within a defined area. Useful for displaying task completion status or resource usage in a graphical interface.",
      "description_length": 247,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.CheckBox",
      "library": "raygui",
      "description": "Handles checkbox input and state rendering with specific padding adjustments. Works with boolean states and UI layout configurations. Useful for creating interactive settings panels or form interfaces where checkbox alignment and spacing are critical.",
      "description_length": 251,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.Control",
      "library": "raygui",
      "description": "This module defines property types and control variants for configuring UI elements such as buttons, sliders, checkboxes, and dropdowns. It supports setting visual and behavioral properties like color, border width, text alignment, and padding directly on controls. Use this module to customize the appearance and interaction of specific UI components in a Raylib-based application.",
      "description_length": 382,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Slider",
      "library": "raygui",
      "description": "This module provides functions to create and manage sliders for adjusting numeric values within a defined range, specifically supporting padding and width adjustments. It works with sliders represented by the `t` variant type, which includes `Padding_slider` and `Width_slider`. Concrete use cases include UI controls for layout customization, such as adjusting element spacing or component dimensions in a graphical interface.",
      "description_length": 427,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui",
      "library": "raygui",
      "description": "This module supports layout, styling, and state management for interactive UI components like buttons, sliders, checkboxes, and dropdowns, using Raylib's `Rectangle.t` and `Font.t` types alongside primitives such as strings, integers, and colors. It handles user interaction logic, returning updated states or values (e.g., clicked flags, selected indices) while enabling global UI effects like fading or disabling controls. Common use cases include game interfaces requiring dynamic input handling, data visualization dashboards, and toolchains needing real-time parameter adjustments with visual feedback.",
      "description_length": 607,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 206,
    "avg_description_length": 319.5,
    "embedding_file_size_mb": 0.23221397399902344
  }
}