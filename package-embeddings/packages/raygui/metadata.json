{
  "package": "raygui",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-06-18T16:34:33.668073",
  "modules": [
    {
      "module_path": "Raygui.ControlState",
      "description": "Converts a state representation to an integer, enabling efficient comparison and storage. Works with a custom type `t` that encapsulates control flow information. Used to track and evaluate execution paths in a compiler's intermediate representation.",
      "description_length": 250,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.TextAlignment",
      "description": "Converts a text alignment value to an integer representation. Works with a custom type representing alignment options such as left, center, or right. Used to serialize alignment settings for output in formats requiring numeric identifiers.",
      "description_length": 239,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Default",
      "description": "Provides functions to create and manipulate default values for custom types, including a constructor for initializing values with a specified fallback. Works with variant types that include a `Default` constructor. Used to ensure safe default initialization in configuration parsing and data structure defaults.",
      "description_length": 311,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Toggle",
      "description": "Provides functions to invert a boolean value, check its current state, and apply a transformation based on its value. Works with the boolean type and returns a new state after each operation. Used to toggle between two distinct system states in response to user input or event triggers.",
      "description_length": 286,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.Slider",
      "description": "Provides functions to create, update, and query a slider state with minimum, maximum, and current values. Works with a variant type representing different slider states and configurations. Used to manage user input in interactive applications, such as adjusting volume or brightness settings.",
      "description_length": 292,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ProgressBar",
      "description": "Provides functions to update and render a progress bar, including calculating percentage completion and formatting output. Works with integers representing total and current progress values. Used to display real-time progress during long-running tasks like file downloads or batch processing.",
      "description_length": 292,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.CheckBox",
      "description": "Provides functions to toggle, check, and uncheck a boolean state, along with queries to determine the current status. Works with the `t` type, which represents a selectable state with three possible values. Used to manage user interface elements that require on/off or selected/deselected behavior.",
      "description_length": 298,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ComboBox",
      "description": "Provides functions to create, update, and query a selectable list interface, including selecting an item by index, retrieving the currently selected value, and updating the list of options. Works with a custom type representing a list of items, each associated with a unique identifier and display text. Used to manage user selections in a graphical form, such as choosing a country from a list of predefined options.",
      "description_length": 417,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.DropdownBox",
      "description": "Provides functions to create, update, and render a dropdown interface, including selecting an option, toggling visibility, and handling user interactions. Works with a custom type representing the dropdown's state, options, and selected value. Used to implement interactive UI elements in a form or settings panel where users choose from a list of items.",
      "description_length": 354,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.TextBox",
      "description": "Provides functions to create, modify, and render text boxes with specified dimensions and content. Works with a variant type representing different text box states, including empty, filled, and highlighted. Used to generate UI elements in a terminal-based application, handling text wrapping and alignment.",
      "description_length": 306,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Spinner",
      "description": "Provides functions to initialize, update, and retrieve the state of a spinning animation, including calculating frame indices and determining animation direction. Works with a custom type representing the animation state, including current frame and direction. Used to synchronize visual feedback in command-line interfaces during long-running processes.",
      "description_length": 354,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ScrollBar",
      "description": "Provides functions to calculate scroll positions, adjust ranges, and determine visible intervals based on a scrollable content size and viewport dimensions. Works with integers representing content length, viewport size, and scroll offset. Used to synchronize UI elements with scrollable content, such as updating a progress indicator or determining which items are currently visible.",
      "description_length": 384,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ListView",
      "description": "Provides functions to create, update, and render a list of items with dynamic content, including adding, removing, and reordering elements. Works with a custom type representing a list of items, each associated with a unique identifier and renderable content. Used to manage and display user-generated content in a web interface, such as a to-do list or message board.",
      "description_length": 368,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ColorPicker",
      "description": "Provides functions to convert between RGB, HSL, and HEX color representations, and to adjust hue, saturation, and lightness values. Works with tuples representing RGB values, strings in HEX format, and records containing HSL components. Enables precise color manipulation for UI design and visual effects generation.",
      "description_length": 316,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.Control",
      "description": "Provides functions to evaluate and combine boolean conditions, including conjunction, disjunction, and negation. Works with custom boolean expression types and atomic propositions. Used to implement rule-based decision logic in configuration parsers and validation systems.",
      "description_length": 273,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "raygui",
      "description": "Provides functions for rendering 2D graphics, handling input, and managing game loops using a set of core types like Key.t, Rectangle, and Vector2. Offers direct access to low-level game development operations such as drawing shapes, loading textures, and checking collision detection. Designed for integrating raylib's features into OCaml projects with a focus on real-time interactive applications.",
      "description_length": 400,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui",
      "description": "Encapsulates a range of UI and state management utilities, offering conversions, toggles, and interactive elements. It handles custom types for control flow, alignment, boolean states, sliders, progress bars, and color transformations, along with operations to create, update, and query these structures. Functions include inverting booleans, calculating scroll positions, rendering progress, and converting color formats. Examples include managing user selections, tracking execution paths, and synchronizing animations with command-line interfaces.",
      "description_length": 550,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 550,
    "min_description_length": 239,
    "avg_description_length": 334.70588235294116,
    "embedding_file_size_mb": 0.062247276306152344
  }
}