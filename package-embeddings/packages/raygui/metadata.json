{
  "package": "raygui",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:07:31.045557",
  "modules": [
    {
      "module_path": "Raygui.ListView",
      "library": "raygui",
      "description": "This module defines constants for configuring visual properties of list views, such as item height, padding, and scrollbar dimensions. It works with enumerated values representing layout parameters. Concrete use cases include setting up scrollable lists with consistent spacing and sizing in GUI applications.",
      "description_length": 309,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.Default",
      "library": "raygui",
      "description": "This module defines a set of symbolic identifiers for configuring visual properties such as background color, line color, text size, and text spacing. It works with enumeration values that correspond to specific rendering parameters used in UI components. These identifiers are used directly in setting or querying style attributes within a graphical interface.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.Spinner",
      "library": "raygui",
      "description": "Handles UI spinner controls for numeric input adjustments. Works with integer values and UI state management. Used to create interactive spinners for settings like padding or width in a graphical interface.",
      "description_length": 206,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Control",
      "library": "raygui",
      "description": "This module defines property types and control variants for UI elements, such as buttons, sliders, checkboxes, and dropdowns, allowing customization of visual and behavioral attributes. It supports setting colors, alignment, padding, and other properties specific to each control type. Use this module to define and manipulate UI component styles and states in a structured way.",
      "description_length": 378,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ProgressBar",
      "library": "raygui",
      "description": "Handles rendering and layout calculations for progress bars with a specific focus on padding adjustments. Works with float values representing progress and dimensions, applying padding to ensure visual alignment within UI layouts. Useful for creating visually consistent progress indicators in graphical user interfaces.",
      "description_length": 320,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.DropdownBox",
      "library": "raygui",
      "description": "This module defines constants for padding settings used in dropdown boxes, specifically `Arrow_padding` and `Dropdown_items_padding`. It works with enumerated types to configure visual spacing in UI components. Concrete use cases include adjusting the appearance of dropdown arrows and item lists in graphical user interfaces.",
      "description_length": 326,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.TextBox",
      "library": "raygui",
      "description": "This module defines constants for configuring visual properties of text boxes, such as background and foreground colors and padding settings. It works with enumeration values representing different styling attributes. Use this module to customize the appearance of text input elements in a user interface.",
      "description_length": 305,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Toggle",
      "library": "raygui",
      "description": "Handles toggle button interactions with a specific style for padding adjustments. Works with UI state data to manage user preferences or settings. Useful for interfaces where spacing customization is required through a toggle control.",
      "description_length": 234,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ColorPicker",
      "library": "raygui",
      "description": "This module defines a set of configuration options for customizing the appearance of a color picker UI component. It works with enumerated values representing sizing and layout parameters such as selector size, hue bar dimensions, and padding. These settings are used to adjust visual elements when rendering a color selection interface in a graphical application.",
      "description_length": 364,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ScrollBar",
      "library": "raygui",
      "description": "This module defines constants for configuring scroll bar appearance and behavior, such as arrow size, padding, and scroll speed. It works with integer and float values to set visual and functional parameters. Use it to customize scroll bar properties in UI layouts requiring precise scrolling control.",
      "description_length": 301,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.TextAlignment",
      "library": "raygui",
      "description": "This module defines an enumeration for text alignment options\u2014left, center, and right\u2014and provides a function to convert each alignment to an integer representation. It works with the `t` type, which represents text alignment states. Use this module to specify and translate text alignment settings when rendering UI elements with corresponding integer-based APIs.",
      "description_length": 364,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.ComboBox",
      "library": "raygui",
      "description": "This module handles the rendering and interaction logic for combo box UI elements, supporting operations to set padding and adjust width. It works with a variant type that defines specific styling attributes for combo boxes. Concrete use cases include customizing the visual layout of combo boxes in a GUI, such as adjusting internal spacing or setting explicit width for dropdown menus.",
      "description_length": 387,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.CheckBox",
      "library": "raygui",
      "description": "Handles checkbox input and state rendering with specific padding adjustments. Works with boolean states and UI configuration records. Used to create interactive checkboxes in a graphical interface with customizable spacing.",
      "description_length": 223,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui.ControlState",
      "library": "raygui",
      "description": "This module defines a set of states representing the visual and interactive condition of a UI control, such as buttons or inputs. It includes a conversion function to map each state to an integer, primarily for compatibility with rendering or event-handling systems. Use this module to manage and respond to user interface element states in a type-safe manner.",
      "description_length": 360,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raygui.Slider",
      "library": "raygui",
      "description": "Handles user interface slider interactions for adjusting numeric values within a defined range. Works with slider identifiers and numeric values, providing functions to set, get, and update slider states. Useful for configuring settings like padding or width in real-time UI editors.",
      "description_length": 283,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raygui",
      "library": "raygui",
      "description": "This module manages global GUI state, style configuration, and interactive widget creation, enabling dynamic user interfaces with Raylib structures and primitive types. It supports direct operations like enabling controls, adjusting transparency, and building widgets\u2014buttons, sliders, color pickers\u2014while submodules handle specialized UI elements and styling, such as spinner controls, progress bar layout, dropdown padding, and text alignment. You can customize visual properties using symbolic identifiers, manage toggle and checkbox interactions with padding adjustments, or configure color pickers and combo boxes with precise layout parameters. State management, style conversion, and rendering logic are tightly integrated, allowing real-time UI editing and consistent visual behavior across components.",
      "description_length": 810,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 810,
    "min_description_length": 206,
    "avg_description_length": 345.6875,
    "embedding_file_size_mb": 0.05853080749511719
  }
}