{
  "package": "checkseum",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:17.019640",
  "modules": [
    {
      "module_path": "Checkseum.Adler32",
      "description": "Computes and manipulates ADLER-32 checksums using byte sequences, strings, and bigstrings, with both safe and unsafe variants for data processing. Operates on the `t` type, representing checksum values, and supports conversion to and from 32-bit unsigned integers. Processes incremental data updates and provides a printable representation for debugging or logging.",
      "description_length": 365,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Checkseum.Crc32c",
      "description": "Provides functions to compute and manipulate CRC32C checksums from byte sequences, strings, and bigstrings, with both safe and unsafe variants for performance-critical code. Operates on the `t` type, which wraps an unsigned 32-bit integer for checksum storage and manipulation. Used to validate data integrity in network protocols or file storage systems by generating and verifying checksums efficiently.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Checkseum.Crc32",
      "description": "Provides functions to compute and manipulate CRC32 checksums from byte sequences, strings, and bigstrings, with both safe and unsafe variants for performance-critical code. Operates on the `t` type, which wraps an unsigned 32-bit integer for checksum storage and comparison. Computes incremental digests, converts between checksums and int32 values, and supports pretty-printing and equality checks.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Checkseum.Crc24",
      "description": "Computes and manipulates CRC24 checksums using byte sequences, strings, and bigstrings, with both safe and unsafe variants for input validation. Operates on a custom type representing the checksum, supporting conversion to and from unsigned 32-bit integers. Processes data in chunks, updating the checksum incrementally for efficient validation of large or streaming data.",
      "description_length": 372,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "checkseum",
      "description": "Computes ADLER-32 and CRC32C checksums using either a C or OCaml implementation, with support for arbitrary-precision integers via optint. Processes byte sequences and returns 32-bit hash values suitable for data integrity verification. Enables flexible deployment in MirageOS environments by separating interface from implementation.",
      "description_length": 334,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Checkseum",
      "description": "Provides functions to compute and manipulate checksums, including digest operations on byte sequences, strings, and bigstrings, with and without bounds checking. Works with the `t` type, representing checksum values as `Optint.t`. Converts between `t` and unsigned 32-bit integers for serialization or comparison.",
      "description_length": 313,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 405,
    "min_description_length": 313,
    "avg_description_length": 364.6666666666667,
    "embedding_file_size_mb": 0.022217750549316406
  }
}