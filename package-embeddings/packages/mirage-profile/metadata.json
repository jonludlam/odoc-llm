{
  "package": "mirage-profile",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:56.233813",
  "modules": [
    {
      "module_path": "MProf.Trace",
      "description": "Tracks event-based program execution by labeling threads, managing asynchronous tasks, and recording state changes. Operates on Lwt threads, conditions, MVars, and counters to support debugging and performance analysis. Used to annotate long-running operations, track thread lifecycles, and log pauses in execution flow.",
      "description_length": 320,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MProf.Counter",
      "description": "Tracks integer values that can be incremented, decremented, or set directly. Operates on a custom type `t` representing a counter with a name. Used to monitor metrics like request counts or event occurrences in real-time systems.",
      "description_length": 229,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mirage-profile",
      "description": "Provides functions to annotate and record execution traces of Lwt-based programs, capturing events at the thread level. Works with Lwt threads, timestamps, and custom event data to generate structured trace logs. Used to debug and visualize asynchronous execution flow in Mirage unikernels, enabling detailed analysis through external viewers or CTF-compatible tools.",
      "description_length": 367,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MProf_counter",
      "description": "Tracks and manipulates counter values with operations to initialize, increment, and retrieve counts. Works with a custom type representing a counter, storing a name and current integer value. Used to monitor specific metrics during program execution, such as tracking the number of processed items or function calls.",
      "description_length": 316,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MProf_trace",
      "description": "Tracks application state transitions by recording pauses, resumptions, and labeled events. It manages Lwt-based synchronization primitives like tasks, conditions, and mvars, associating them with named identifiers. Used to instrument asynchronous workflows for performance analysis and debugging.",
      "description_length": 296,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MProf",
      "description": "Tracks program execution through event labeling, thread management, and state recording, while monitoring integer metrics via named counters. Provides operations to modify and query counter values, and to annotate and trace asynchronous workflows. Enables real-time performance insights by logging thread activity and tracking numeric metrics. Can be used to monitor request rates, debug thread behavior, and analyze execution pauses.",
      "description_length": 434,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 434,
    "min_description_length": 229,
    "avg_description_length": 327.0,
    "embedding_file_size_mb": 0.022243499755859375
  }
}