{
  "package": "cryptgps",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:34:11.816323",
  "modules": [
    {
      "module_path": "Cryptmodes_64.Make_modes",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode with either 32-bit integers or tuples of four integers. Processes key preparation, conversion between string and key representations, and checks for weak keys. Designed for secure data transformation in cryptographic applications.",
      "description_length": 282,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cryptmodes_64.Make_modes_int32",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode with either 32-bit integers or tuples of integers, preparing keys from strings and converting keys to strings. Operates on 32-bit integer values and key structures derived from textual representations. Used for securing data streams with consistent encryption and key management in cryptographic applications.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_3des.Cryptsystem",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode, handling both 32-bit integer arrays and tuple-based data. Operates on key type derived from string inputs, supporting key strength checks. Used for securing fixed-size data segments in cryptographic protocols.",
      "description_length": 262,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_3des.Cryptmodes",
      "description": "Provides encryption and decryption functions for CBC, CFB8, CFB64, and OFB modes using a 4-tuple of integers as an initialization vector. Operates on strings and returns updated state tuples along with processed data. Used for securing data streams with block cipher modes requiring state management.",
      "description_length": 300,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Crypt_blowfish32.Cryptsystem",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode, handling both 32-bit integer arrays and tuple representations. Operates on key type derived from string inputs, supporting key strength checks. Used for securing data streams with consistent encryption and key management.",
      "description_length": 274,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Crypt_blowfish32.Cryptmodes",
      "description": "Provides encryption and decryption functions for CBC, CFB8, CFB64, and OFB modes using a 4-tuple of integers as an initialization vector and a key type from Cryptsystem. Processes strings as input and returns updated state tuples along with encrypted or decrypted output. Supports byte-level and block-level feedback in CFB and OFB modes with explicit block size parameters.",
      "description_length": 374,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_des.Cryptsystem",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode, handling both 32-bit integer tuples and int32 values with mutable references. Processes keys derived from strings and checks for weak key conditions. Designed for low-level cryptographic operations requiring direct control over data representation.",
      "description_length": 301,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Crypt_des.Cryptmodes",
      "description": "Provides encryption and decryption functions for CBC, CFB8, CFB64, and OFB modes using a 4-tuple of integers as an initialization vector. Accepts a key and string input, returning updated state and processed data. Implements block cipher operations with precise control over feedback and block sizes.",
      "description_length": 300,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_blowfish.Cryptsystem",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode, handling both 32-bit integer tuples and int32 values with mutable references. Processes key data structures derived from string representations and checks for weak key conditions. Used for securing data streams with consistent encryption and key management.",
      "description_length": 310,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_blowfish.Cryptmodes",
      "description": "Provides encryption and decryption functions for CBC, CFB8, CFB64, and OFB modes using a 4-tuple of integers as an initialization vector. Operates on strings and returns updated state tuples along with encrypted or decrypted output. Used for securing data streams with block cipher modes requiring state management.",
      "description_length": 315,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "cryptgps",
      "description": "Provides functions for parsing and encoding GPS data in binary format, including latitude, longitude, and timestamp extraction. Operates on byte sequences and custom record types representing satellite fixes and navigation messages. Used to process raw GPS signals from receivers and prepare data for location-based applications.",
      "description_length": 329,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cryptsystem_64",
      "description": "Encrypts and decrypts 128-bit blocks using ECB mode with either 32-bit integers or tuples of four integers. Processes key preparation, conversion between string and key representations, and checks for weak keys. Designed for secure data transformation in cryptographic applications.",
      "description_length": 282,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cryptmodes_64",
      "description": "Provides encryption and decryption functions for CBC, CFB8, CFB64, and OFB modes using a 128-bit key represented as a tuple of four integers. Processes binary data as strings, updating an internal state tuple and, for CFB64 and OFB, an additional integer counter. Implements block cipher operations with explicit initialization vectors and feedback mechanisms for stream encryption.",
      "description_length": 382,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_3des",
      "description": "performs block encryption and decryption in multiple modes, including ECB, CBC, CFB8, CFB64, and OFB, using 128-bit keys and initialization vectors. It processes data as 32-bit integer arrays or strings, supporting both fixed-size and stream-based operations. Key strength checks and state management are integrated for secure data handling. Examples include encrypting sensitive messages with CBC mode or securing fixed data blocks using ECB.",
      "description_length": 443,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_blowfish32",
      "description": "performs block encryption and decryption in multiple modes, including ECB, CBC, CFB, and OFB, using 32-bit integer arrays or tuples for data and initialization vectors. It handles key derivation from strings, supports key strength validation, and provides stateful operations for modes requiring feedback. Functions accept strings and return encrypted outputs along with updated state tuples, enabling secure data processing with customizable block sizes. Examples include encrypting sensitive messages with CBC mode or streaming data using CFB with byte-level feedback.",
      "description_length": 570,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_des",
      "description": "performs symmetric encryption and decryption across multiple modes, including ECB, CBC, CFB, and OFB, using 128-bit blocks and 4-tuple initialization vectors. It supports key derivation from strings, weak key detection, and operations on both 32-bit integer tuples and int32 values with mutable references. Functions process data in various feedback configurations, returning updated states and encrypted/decrypted outputs. Examples include securing data streams with CBC mode or analyzing key strength before encryption.",
      "description_length": 521,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Crypt_aux",
      "description": "Converts a 32-bit integer into a tuple of four 32-bit integers and reconstructs a 32-bit integer from such a tuple, using reference parameters for output. Works with 32-bit integers and tuples of four integers. Used in cryptographic operations requiring bit-level manipulation and data serialization.",
      "description_length": 300,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crypt_blowfish",
      "description": "Encodes and decodes 128-bit data blocks using ECB or block cipher modes like CBC, CFB8, CFB64, and OFB, with support for integer tuples and strings. Processes keys from string inputs, detects weak keys, and maintains state through initialization vectors. Operations include encrypting and decrypting data streams with consistent key handling and mode-specific state updates. Examples include securing network transmissions with CBC or processing large files in OFB mode.",
      "description_length": 470,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 570,
    "min_description_length": 262,
    "avg_description_length": 354.22222222222223,
    "embedding_file_size_mb": 0.065826416015625
  }
}