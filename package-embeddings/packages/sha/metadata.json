{
  "package": "sha",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:05.587214",
  "modules": [
    {
      "module_path": "Sha256",
      "library": "sha",
      "description": "This module offers SHA-256 hashing with context management (initialization, incremental updates, finalization) and digest computation across strings, Bigarray buffers, files, and channels, supporting both safe/unsafe substring handling and optimized I/O operations. It enables conversion between binary and hexadecimal digest representations, equality checks, and serialization for data integrity verification, secure hash storage, or network transmission scenarios.",
      "description_length": 466,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sha1",
      "library": "sha",
      "description": "This module supports incremental hash computation and single-pass hashing for arbitrary data, handling strings, buffers, and files through mutable context management and substring-safe updates. It enables conversion between binary, hexadecimal, and internal hash representations while providing constant-time equality checks for hash values. These capabilities are suited for data integrity verification, cryptographic protocols, and scenarios requiring partial data processing or format interoperability.",
      "description_length": 505,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sha512",
      "library": "sha",
      "description": "This module enables secure hash computation and context management through operations like initializing, updating, and finalizing digests, along with serializing states for persistence or transfer. It operates on strings, Bigarray buffers, and input/output channels, supporting both safe and low-level data handling for performance-critical scenarios. Use cases include cryptographic data integrity verification, hexadecimal encoding of digests for human-readable output, and streaming large datasets or files efficiently while maintaining hash state consistency.",
      "description_length": 563,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 563,
    "min_description_length": 466,
    "avg_description_length": 511.3333333333333,
    "embedding_file_size_mb": 0.01129913330078125
  }
}