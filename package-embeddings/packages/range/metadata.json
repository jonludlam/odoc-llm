{
  "package": "range",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:16.846229",
  "modules": [
    {
      "module_path": "Range.Number",
      "library": "range",
      "description": "This module defines and manipulates integer ranges with specific constraints such as positivity or being greater than zero. It provides functions to create, convert, and extract integer values from range types, ensuring valid numeric boundaries. Concrete use cases include safely handling sequence bounds in distributed processing tasks and avoiding unnecessary list allocations for simple integer iteration.",
      "description_length": 408,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Range",
      "library": "range",
      "description": "This module handles integer sequences defined by start and stop values, supporting operations like fold, map, and filter without requiring full list materialization. It enables efficient distributed processing by splitting ranges into subranges, and ensures safe numeric boundary handling through constraint-enforced types. Concrete use cases include iterating over large integer intervals and partitioning workloads across multiple nodes. Submodules extend this functionality with specialized range types that enforce constraints like positivity and provide additional conversion and extraction utilities.",
      "description_length": 606,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 606,
    "min_description_length": 408,
    "avg_description_length": 507.0,
    "embedding_file_size_mb": 0.0076808929443359375
  }
}