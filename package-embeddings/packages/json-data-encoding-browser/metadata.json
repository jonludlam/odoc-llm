{
  "package": "json-data-encoding-browser",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:47.817404",
  "modules": [
    {
      "module_path": "Json_repr_browser.Json_query",
      "library": "json-data-encoding-browser",
      "description": "This module provides functions to query, insert, replace, and merge JSON values using a specified path. It operates directly on JSON structures represented by the `Repr.value` type. Use cases include modifying nested JSON fields, extracting specific elements, or combining JSON objects.",
      "description_length": 286,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_repr_browser.Repr",
      "library": "json-data-encoding-browser",
      "description": "This module provides functions to convert between a browser-specific JSON representation and a common intermediate format. It works with JSON values represented as `value` and `view` types, enabling serialization and deserialization. Concrete use cases include building and inspecting JSON data structures for browser-based applications, such as encoding OCaml values to JSON for transmission or decoding JSON responses into OCaml values.",
      "description_length": 438,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_repr_browser.Json_encoding",
      "library": "json-data-encoding-browser",
      "description": "This module provides functions to encode and decode values to and from a custom JSON representation using predefined encodings. It works with values of type `Json_repr_browser.value`, which represents JSON structures like objects, arrays, strings, and numbers. Concrete use cases include serializing OCaml data to JSON for web APIs and parsing JSON input into typed OCaml values, leveraging schema-driven custom encodings.",
      "description_length": 422,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Json_repr_browser",
      "library": "json-data-encoding-browser",
      "description": "This module enables parsing and stringifying JSON values using native browser capabilities, operating on a `value` type that represents JSON structures. It supports direct conversion between OCaml and JavaScript string representations of JSON, useful for handling HTTP response payloads and encoding data for web APIs. Submodules allow manipulating JSON using paths for nested access, converting between browser-specific and intermediate JSON formats, and encoding/decoding values using custom schemas. Examples include extracting fields from a JSON object, merging JSON structures, serializing OCaml values to JSON for transmission, and decoding typed values from JSON input.",
      "description_length": 676,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 676,
    "min_description_length": 286,
    "avg_description_length": 455.5,
    "embedding_file_size_mb": 0.014931678771972656
  }
}