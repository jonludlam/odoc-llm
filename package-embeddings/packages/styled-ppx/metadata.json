{
  "package": "styled-ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 215,
  "creation_timestamp": "2025-08-18T18:51:36.061610",
  "modules": [
    {
      "module_path": "Css_spec_parser",
      "library": "styled-ppx.css-spec-parser",
      "description": "This module defines data structures and operations for representing and manipulating CSS specification syntax. It includes types for terminal symbols, combinators, and value expressions with support for multipliers and grouping. Functions are provided to parse and format CSS syntax definitions, enabling concrete use cases like validating CSS property values or generating documentation from CSS specs.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Ast",
      "library": "styled-ppx.css-parser",
      "description": "This module provides pretty-printing and string conversion operations for CSS abstract syntax tree (AST) nodes, handling constructs like declarations, rules, stylesheets, and complex selectors (e.g., subclass, attribute, pseudo, and nth selectors). It works with data structures representing CSS AST elements, including location-aware nodes (`loc`, `with_loc`) and parsed CSS components (`declaration`, `at_rule`, `selector` subtypes). These functions are used to generate human-readable representations of parsed CSS data, particularly useful for debugging, code generation, or tooling that requires structured output of CSS syntax.",
      "description_length": 633,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Styled_ppx_css_parser.Parser",
      "library": "styled-ppx.css-parser",
      "description": "This module defines a CSS token type and provides parsing functions for CSS stylesheets, keyframes, declaration lists, and individual declarations. It processes lexed input into structured AST elements, handling constructs like media queries, selectors, and CSS values. Use it to parse CSS syntax into an abstract syntax tree for analysis, transformation, or code generation tasks.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Lexer",
      "library": "styled-ppx.css-parser",
      "description": "This module provides functions for lexing CSS-like syntax, including token extraction with location tracking, string conversion, and error handling. It operates on strings and lex buffers, producing tokens paired with positional data or structured errors. Concrete use cases include parsing CSS rules into tokens, debugging token streams, and handling lexing errors during stylesheet processing.",
      "description_length": 395,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Styled_ppx_css_parser.Driver",
      "library": "styled-ppx.css-parser",
      "description": "This module provides functions for parsing CSS-like syntax into abstract syntax trees, including parsing entire stylesheets, declaration lists, individual declarations, and keyframes. It works with lexing buffers and string inputs, producing results that include either parsed AST nodes or error messages with locations. Concrete use cases include integrating CSS parsing into OCaml-based preprocessors or linters, and transforming CSS syntax into typed OCaml structures for in-code styling systems.",
      "description_length": 499,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Parser_location",
      "library": "styled-ppx.css-parser",
      "description": "This module handles precise source code location transformations between different parsing libraries. It converts locations from OCaml's standard Lexing module to Ppxlib's location format, adjusts line numbers and delimiters in parsed regions, and computes intersections of source spans. These operations are essential for maintaining accurate error reporting and source mapping when parsing and transforming CSS-like syntax in PPX extensions.",
      "description_length": 443,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Styled_ppx_css_parser.Tokens",
      "library": "styled-ppx.css-parser",
      "description": "This module defines a set of token types representing CSS lexical elements such as identifiers, numbers, strings, and punctuation, used in parsing CSS syntax. It includes functions to convert tokens to human-readable or debug strings, handle formatting, and represent errors like invalid code points or unexpected EOF. Concrete use cases include lexical analysis of CSS input, error reporting during parsing, and debugging token streams.",
      "description_length": 437,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser",
      "library": "styled-ppx.css-parser",
      "description": "This module provides CSS parsing and pretty-printing capabilities, handling CSS syntax from raw strings through lexing, parsing, and AST manipulation. It works with CSS abstract syntax trees, lex buffers, token streams, and source location data to support tasks like CSS transformation, linting, and code generation. Concrete use cases include building CSS preprocessors, validating and rewriting stylesheets, and integrating CSS parsing into OCaml-based toolchains.",
      "description_length": 466,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Murmur2",
      "library": "styled-ppx.murmur2",
      "description": "Implements the MurmurHash2 algorithm to compute 32-bit hash values from input strings. Uses a default seed value of zero and processes data in 4-byte chunks. Suitable for generating consistent hash values for strings in applications like hash tables or checksums.",
      "description_length": 263,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_property_parser.Parser.StringMap",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements a map structure with string keys and polymorphic values, offering dictionary operations such as insertion, deletion, and lookup, along with functional transformations like mapping, filtering, and folding. It supports converting between maps and key-value sequences, enabling efficient traversal and bulk updates, which are particularly useful for handling JSON-like data structures, HTTP headers, or configuration parameters where string-based keys and immutable manipulations are required.",
      "description_length": 513,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Parser.Types",
      "library": "styled-ppx.css-property-parser",
      "description": "This module defines a polymorphic variant type representing various legacy CSS gradient functions, including linear, radial, and repeating gradients with specific constructor tags. It is used to parse and distinguish between different gradient syntaxes in CSS properties, particularly older vendor-prefixed forms like `-webkit-gradient`. Concrete use cases include pattern matching on gradient types during CSS parsing and transforming legacy gradient syntaxes into modern equivalents.",
      "description_length": 485,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Let",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for handling CSS property values with precise control over matching and transformation. It provides binding and mapping operations that work with parser rules returning either raw values or annotated data structures. These functions enable constructing complex parsers that select shortest or longest matches, transform intermediate results, and sequence parsing steps with error handling.",
      "description_length": 431,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Match",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for matching CSS property values, providing operations like `return`, `bind`, `map`, and strategies to select the shortest or longest matching parse. It works with rule-based parsers that process input sequences and produce typed results, often used to interpret CSS syntax according to specific grammars. Concrete use cases include parsing and validating CSS color values, lengths, and functional notations within a larger CSS parsing pipeline.",
      "description_length": 487,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Data",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for CSS property values, focusing on sequencing and transforming parse results. It works with generic data types `'a` and `'b` wrapped in a `Css_property_parser.Rule.data` structure, representing intermediate parsing states. Concrete use cases include chaining parsers to handle complex CSS values like gradients, transforms, or custom properties with precise error handling and result aggregation.",
      "description_length": 440,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Pattern",
      "library": "styled-ppx.css-property-parser",
      "description": "This module provides functions to define and manipulate parsing rules for CSS properties, specifically handling token recognition and value extraction. It works with tokens from the `Styled_ppx_css_parser.Tokens` module and constructs rules that process these tokens to build structured CSS property values. Concrete use cases include parsing specific CSS syntax patterns like color values, lengths, or custom identifiers directly from token streams.",
      "description_length": 450,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Modifier",
      "library": "styled-ppx.css-property-parser",
      "description": "This module defines modifiers for parsing CSS property values with specific repetition and optionality constraints. It supports operations like requiring one or more occurrences, optional values, and repeating values within a specified range, with variants for comma-separated lists. The modifiers work with lists, options, and tuples of parsed values, enabling precise control over CSS syntax parsing.",
      "description_length": 402,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Standard",
      "library": "styled-ppx.css-property-parser",
      "description": "This module offers low-level parsers for CSS syntax elements like keywords, numeric values with units (length, angle, time), identifiers, URLs, and functional notations (e.g., `attr()`, `url()`), transforming CSS token streams into typed OCaml values. It works with CSS token streams and structured types like integers, floats, strings, and custom property names, adhering to CSS grammar rules. It is suited for parsing and validating CSS property values in tools like CSS engines, linters, or preprocessors where precise syntax analysis is required.",
      "description_length": 550,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for CSS property values, supporting operations like sequencing, mapping, and selecting shortest or longest matches. It works with generic data types wrapped in a `data` structure and token streams from the `Tokens` module, enabling precise parsing of CSS syntax elements such as colors, lengths, and functional notations. Concrete use cases include building custom parsers for complex CSS values like gradients, transforms, and custom properties with structured error handling and result transformation.",
      "description_length": 545,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_property_parser.Parser",
      "library": "styled-ppx.css-property-parser",
      "description": "This module parses CSS property values and syntax constructs into structured OCaml types by consuming token lists, supporting both standard and vendor-specific (e.g., `-moz-`, `-ms-`) CSS features. It handles gradient definitions, transform functions, layout properties (e.g., flex, grid), text styling, animations, and legacy syntaxes through recursive descent parsing, producing typed AST nodes or error messages. Designed for integration into CSS processing systems, it enables tasks like converting browser-specific styles to modern CSS, validating property values, or transforming stylesheets within OCaml-based toolchains.",
      "description_length": 628,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Combinator",
      "library": "styled-ppx.css-property-parser",
      "description": "This module provides parser combinators for defining CSS property parsers. It includes operations for combining parsers sequentially (`and_`), selecting between parsers (`or_`), parsing a fixed value (`static`), and exclusive choice (`xor`). These combinators operate on parsers that produce values of type `'a` or collections like `'a list` and `'a option list`, enabling precise and flexible parsing of CSS property values.",
      "description_length": 425,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser",
      "library": "styled-ppx.css-property-parser",
      "description": "This module parses CSS property values and syntax constructs into structured OCaml types, handling standard and vendor-specific features like gradients, transforms, and animations. It works with CSS token streams and produces typed AST nodes or error messages, supporting precise parsing of values like colors, lengths, and functional notations. Concrete use cases include validating CSS values, converting legacy styles to modern syntax, and building CSS processing tools within OCaml-based systems.",
      "description_length": 500,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "String_interpolation",
      "library": "styled-ppx.string-interpolation",
      "description": "Performs string interpolation by replacing placeholders in a string with corresponding values from the environment. Works with OCaml expressions and attributes, using a specified delimiter to identify placeholders. Useful for generating formatted output strings dynamically within OCaml code.",
      "description_length": 292,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisPosition.LeftRightAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for text emphasis position alignment in CSS. It supports values like `left`, `right`, and cascading or variable variants, and provides the `toString` function to convert these values into their string representations for use in style rules. It is used when generating or manipulating CSS styles that involve text emphasis positioning.",
      "description_length": 376,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisStyle.FilledOrOpen",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS text emphasis styles that can be filled or open, including support for CSS variables and cascading values. It provides the `toString` function to convert these style values into their corresponding string representations for use in CSS output. This is useful when generating dynamic CSS where text emphasis styles need to be programmatically determined or composed from different sources.",
      "description_length": 436,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SVG.Fill",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with SVG fill values in CSS, including colors, URLs, and special context-sensitive tokens like `contextFill` and `contextStroke`. It provides direct constructors for these values and a `toString` function to convert them into their string representations for use in style declarations. Concrete use cases include setting SVG element fill styles dynamically based on color values, gradients, or inherited context.",
      "description_length": 464,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisStyle.Shape",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing the shape values for text emphasis in CSS, including primitives like `dot`, `circle`, and `triangle`. It provides the `toString` function to convert these shape values into their corresponding string representations for use in CSS output. This type is directly used when generating or manipulating CSS rules that involve text emphasis styling.",
      "description_length": 403,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextEmphasisPosition.OverOrUnder",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible text emphasis positions, including `over`, `under`, and support for CSS variables and cascading values. It provides the `toString` function to convert these values into their corresponding string representations for use in CSS output. This module is useful when generating or manipulating CSS text-emphasis-position values programmatically.",
      "description_length": 393,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskPosition.X",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing horizontal mask positioning options (`left`, `right`, `center`) and a function `toString` that converts these values to their corresponding string representations. It works directly with polymorphic variants and strings. Use this module when handling CSS mask positioning logic, such as generating or parsing CSS values for mask alignment.",
      "description_length": 383,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.MaskPosition.Y",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing vertical alignment positions (`top`, `bottom`, `center`) for CSS mask positioning. It includes a function `toString` that converts these alignment values to their corresponding string representations. This module is used to specify and serialize vertical mask alignment in CSS styling logic.",
      "description_length": 335,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS.Stylesheet.Hashes",
      "library": "styled-ppx.native",
      "description": "This module offers set-like manipulation of CSS stylesheet elements with operations for union, intersection, and difference, alongside searching, filtering, and iteration. It works with hash tables and sequences of strings, enabling efficient management of CSS rules through structural conversions and in-place modifications. Use cases include handling dynamic style rule aggregation and transformation workflows where declarative CSS elements require programmatic set operations or sequence-container interconversion.",
      "description_length": 518,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Visibility",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS visibility values, including standard keywords and support for CSS variables and cascading behavior. It provides a `toString` function to convert these values to their string representations for use in CSS output. Concrete use cases include generating CSS rules that control element visibility, such as toggling between `visible`, `hidden`, or `collapse`, and integrating CSS custom properties via `var` and `varDefault`.",
      "description_length": 485,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontDisplay",
      "library": "styled-ppx.native",
      "description": "This module defines types and values for specifying font display behaviors in CSS, including variants like `block`, `swap`, and `fallback`. It provides functions to construct and convert these display options to their string representations. Useful for generating CSS font-face rules with precise control over font loading strategies.",
      "description_length": 334,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Float",
      "library": "styled-ppx.native",
      "description": "Converts a floating-point number to its string representation. Works with OCaml's built-in `float` type. Useful for formatting numerical output in logging, user interfaces, or data serialization.",
      "description_length": 195,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundAttachment",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS background attachment values, including fixed, scroll, and local. It provides the `toString` function to convert these values into their string representations. Useful for generating CSS styles dynamically in OCaml applications.",
      "description_length": 278,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.JustifyContent",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS `justify-content` values, supporting alignment options like `flexStart`, `spaceBetween`, and `var`. It works with polymorphic variants representing CSS alignment keywords and expressions. Use it to safely construct and manipulate flex container alignment properties in type-safe CSS generation or styling libraries.",
      "description_length": 365,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Gap",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS gap values, including keywords, lengths, percentages, and variables. It provides a `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles with gap properties like `row-gap` or `column-gap` using a type-safe OCaml interface.",
      "description_length": 357,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FlexWrap",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS flex-wrap properties, including standard values like `wrap`, `nowrap`, and `wrapReverse`, as well as support for CSS variables and cascading values. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS flexbox layout styles programmatically.",
      "description_length": 403,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ImageRendering",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for image rendering properties in CSS. It supports values like `smooth`, `highQuality`, `pixelated`, and `crispEdges`, along with standard CSS keywords and variable references. The `toString` function converts these values to their string representations for use in style rules.",
      "description_length": 320,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Percentage",
      "library": "styled-ppx.native",
      "description": "This module represents and manipulates percentage values as a single type `t` that wraps a float. It provides two primary operations: `pct` to construct a percentage value from any float-like input, and `toString` to convert a percentage value into its string representation. Concrete use cases include formatting CSS stylesheets, calculating proportional layout dimensions, or serializing UI component sizes in web applications.",
      "description_length": 429,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.PerspectiveOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents possible values for the perspective origin in CSS, including keywords, lengths, percentages, and variables. It includes a `toString` function that converts these values into their string representation for use in CSS rules. It is used to construct valid CSS declarations for properties like `perspective-origin` or `transform-origin` with precise positional values.",
      "description_length": 412,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontOpticalSizing",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing font optical sizing options in CSS, including variants like `auto`, `none`, and `var`. It provides the `toString` function to convert these values to their string representations for use in CSS output. Useful for generating valid CSS strings from typed values in a type-safe way.",
      "description_length": 323,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CaretColor",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing valid values for the CSS `caret-color` property, including keywords like `auto`, color values, and special tokens like `transparent` or `currentColor`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles dynamically in OCaml, especially when handling user input or theme-based styling.",
      "description_length": 423,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS.Stylesheet",
      "library": "styled-ppx.native",
      "description": "This module manages CSS stylesheets using a combination of rule lists and hash-based indexing, supporting operations to add, retrieve, and clear style rules. It works with string-keyed hash tables and lists of CSS declarations to enable efficient rule lookups and updates. Concrete use cases include dynamically building and modifying CSS content in web applications where selective rule insertion and full rule set extraction are required.",
      "description_length": 440,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Hyphens",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS hyphenation options, including manual control, automatic hyphenation, and cascading values. It provides a `toString` function to convert these hyphenation values into their corresponding CSS string representations. Use this module when generating or manipulating CSS rules that require precise hyphenation settings, such as in style sheets or CSS-in-OCaml libraries.",
      "description_length": 430,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ScrollBehavior",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS scroll behavior values, including keywords like `smooth` and support for variables and cascading styles. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating CSS rules that control scrolling behavior in web applications.",
      "description_length": 356,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.WordBreak",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS word-break properties, including variants like `breakAll`, `keepAll`, and `normal`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating or manipulating CSS styles programmatically, especially in web frameworks or style engines.",
      "description_length": 360,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.LegacyAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type for representing legacy alignment options and provides a function to convert these alignment values to their string representations. It works with polymorphic variant types restricted to specific alignment tags. Useful for rendering alignment values in a format suitable for output or debugging.",
      "description_length": 330,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ListStyleType",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS list-style types, including keywords like `disc`, `circle`, and `decimal`, as well as support for custom values via `var` and `none`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS list styling values programmatically, such as in a CSS-in-OCaml library or style generator.",
      "description_length": 454,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Calc",
      "library": "styled-ppx.native",
      "description": "This module handles conversion of CSS calculation expressions to strings, supporting operations like addition, subtraction, multiplication, division, and min/max value selection. It works with polymorphic variants representing CSS numeric expressions and arrays of values. Concrete use cases include generating CSS `calc()` function strings for responsive layouts and dynamic styling based on computed values.",
      "description_length": 409,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisSmallCaps",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis small caps values, including auto, none, var, and cascading options. It provides the `toString` function to convert these values to their string representation. Useful for generating CSS styles dynamically in OCaml, particularly when handling font synthesis properties in style sheets.",
      "description_length": 348,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontWeight",
      "library": "styled-ppx.native",
      "description": "This module defines font weight values as polymorphic variants, including keywords like `bold`, `light`, and numeric values. It provides constructors for common font weight levels and converts them to their string representations. Useful for specifying CSS font weights directly in OCaml code, ensuring type-safe usage of font weight values.",
      "description_length": 341,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontVariantCaps",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing CSS font variant capitalization options, including standard values like `smallCaps`, `allPetiteCaps`, and `titlingCaps`, as well as support for CSS variables and cascading behavior. It provides a `toString` function that converts these variant values to their corresponding CSS string representations. Useful for generating CSS styles dynamically in OCaml, especially when working with font variant properties in a type-safe manner.",
      "description_length": 480,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LineHeight",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS line height values, including normal, absolute numbers, and length units. It provides a `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles dynamically and handling line height values in a type-safe manner.",
      "description_length": 343,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationStyle",
      "library": "styled-ppx.native",
      "description": "This module defines the possible styles for text decorations, such as `solid`, `dashed`, and `wavy`, and includes support for CSS variables and cascading values. It provides the `toString` function to convert these style values into their corresponding string representations for use in CSS output. This is useful when generating or manipulating CSS styles programmatically, especially in conjunction with UI libraries or style generators.",
      "description_length": 439,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontFamilyName",
      "library": "styled-ppx.native",
      "description": "Handles font family names in CSS by providing a type alias for strings and a function to convert font family names to their string representation. Works directly with string values representing CSS font family identifiers. Useful when generating or manipulating CSS rules that reference custom or standard font families.",
      "description_length": 320,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverflowInline",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing inline overflow behavior values in CSS, including variants like `hidden`, `visible`, `scroll`, and `clip`, along with support for auto, CSS variables, and cascading keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Concrete use cases include generating CSS rules for controlling text and element overflow within inline containers.",
      "description_length": 449,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundRepeat",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for handling CSS background repeat values, including single and two-value variants for horizontal and vertical directions. It provides `toString` and `hv_to_string` to convert these values to their string representations, supporting both standard keywords and CSS variables. Use cases include generating CSS rules for background images with specific tiling behaviors, such as repeating in one direction or using space/round modes.",
      "description_length": 470,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.JustifyItems",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS `justify-items` values, including alignment options like `stretch`, positional alignment, and legacy values. It provides the `toString` function to convert these alignment types into their string representations for use in CSS output. Concrete use cases include generating CSS styles for flexbox or grid layouts where item alignment needs to be precisely controlled.",
      "description_length": 416,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Angle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type for representing angles in different units\u2014degrees, radians, gradians, and turns\u2014and provides constructors for each unit. It includes a function to convert these angle representations into their corresponding string format. Use this module when working with CSS angle values that need to be expressed in specific units for styling or layout calculations.",
      "description_length": 401,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Float",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS float values, including keywords like `left`, `right`, and `inlineEnd`, as well as support for variables and cascading values. It provides the `toString` function to convert these float values into their corresponding CSS string representations. Use this module when generating or manipulating CSS float properties programmatically, such as in a CSS-in-JS library or a code generator for styling components.",
      "description_length": 457,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Height",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS height values, including keywords like `fitContent`, length units, and variables. It provides the `toString` function to convert these height values into their string representations for use in CSS output. Concrete use cases include generating CSS styles dynamically, such as setting an element's height to `fitContent`, a percentage, or a computed length.",
      "description_length": 406,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FlexDirection",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing valid CSS Flexbox direction values, including standard directions and special CSS tokens. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating or manipulating CSS styles programmatically, especially when working with layout systems that rely on Flexbox.",
      "description_length": 381,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BorderStyle",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS border styles, including standard values like `solid`, `dashed`, and `dotted`, as well as special cases like `var` and `inherit`. The primary operation is `toString`, which converts a border style value to its string representation. It is used when generating CSS output or serializing style declarations.",
      "description_length": 366,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.WhiteSpace",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS white-space values, including standard keywords and special types like variables and cascading behavior. It provides a `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control text wrapping and spacing in HTML elements.",
      "description_length": 388,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TabSize",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS tab size values, including numeric values, lengths, variables, and cascading keywords. It provides a `toString` function that converts these values into their string representations for use in CSS output. Use cases include generating CSS styles with custom tab spacing or dynamically computing tab sizes based on length units or CSS variables.",
      "description_length": 391,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverflowAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents overflow alignment values in CSS, with constructors `safe` and `unsafe` wrapping positional alignment options. It includes a `toString` function that converts these alignment values to their string representations. Use this module to handle overflow alignment properties in CSS style definitions, such as specifying how elements align when overflowing a container.",
      "description_length": 411,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ListStylePosition",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS list-style-position values, including `inside`, `outside`, and support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. This module is used to handle and generate valid CSS list-style-position declarations with support for custom variables and cascading keywords.",
      "description_length": 423,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationSkipInset",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS `text-decoration-skip-inset` values, including keywords like `none`, `auto`, and support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS styles dynamically where `text-decoration-skip-inset` needs to be set based on runtime conditions or theme variables.",
      "description_length": 455,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Int",
      "library": "styled-ppx.native",
      "description": "Converts integers to their string representations. Works with OCaml's built-in `int` type. Useful for formatting numeric output or preparing integers for display in user interfaces.",
      "description_length": 181,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Length",
      "library": "styled-ppx.native",
      "description": "This module introduces algebraic types for CSS length units and mathematical expressions, using polymorphic constructors to represent values in pixels, ems, viewport dimensions, and more. It supports operations like addition, subtraction, and min/max calculations through dedicated types, with functions to convert these expressions into CSS-compliant string representations. This enables",
      "description_length": 388,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Cascading",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS cascade keywords like `initial`, `inherit_`, and `unset`. It provides constructors for each keyword and a function to convert them to their string representation. Useful for generating or manipulating CSS values in OCaml code that interfaces with web frameworks or CSS preprocessors.",
      "description_length": 347,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Clear",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS `clear` property values, including keywords like `left`, `right`, `both`, and support for CSS variables and cascading values. It provides a `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules dynamically and handling inline style computations.",
      "description_length": 404,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TableLayout",
      "library": "styled-ppx.native",
      "description": "This module defines the table layout algorithms supported in CSS, including fixed and auto layouts, along with cascading and variable value handling. It provides a `toString` function to convert these layout values to their string representations for use in style rules. Concrete use cases include setting table layout behavior in CSS-in-JS libraries or style generators.",
      "description_length": 371,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextJustify",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS `text-justify` values, including variants like `interWord`, `interCharacter`, and support for CSS-wide keywords and variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control text justification in rendered documents, such as aligning text with spacing adjustments between words or characters.",
      "description_length": 472,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Var",
      "library": "styled-ppx.native",
      "description": "This module represents CSS custom property references with optional fallback values. It provides constructors for creating `var()` and `var(, default)` expressions, along with a function to convert them to strings. Useful for generating CSS values that use variables, such as styling components with theme-based properties.",
      "description_length": 323,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Url",
      "library": "styled-ppx.native",
      "description": "Represents URLs in CSS syntax, handling string formatting and escaping. Converts URL values to their string representation for use in stylesheets. Useful when generating or manipulating CSS rules that include external resources like fonts or images.",
      "description_length": 249,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ClipPath",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS clip-path values, including keywords like `none`, `url`, and geometry box values. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating valid CSS clip-path declarations from OCaml values, such as converting `url(\"path.svg\")` or `borderBox` to their string forms.",
      "description_length": 411,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Flex",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS flex values, supporting `auto`, `initial`, and `none`. It provides the `toString` function to convert these values into their string representations. Useful for generating CSS output from OCaml code, especially in web frameworks that use type-safe CSS values.",
      "description_length": 309,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TransformOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS transform origin values, supporting keywords like `left`, `center`, and `right`, as well as length units and special values. It includes a `toString` function that converts these values into their string representations for use in CSS output. Typical use cases include generating inline styles or CSS classes that set the origin point for transformations like rotation or scaling.",
      "description_length": 441,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontKerning",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible values for the CSS `font-kerning` property, including keywords like `normal`, `none`, and `auto`, as well as support for CSS variables and cascading values. It provides the `toString` function to convert these values into their corresponding string representations for use in CSS output. This module is used when generating or manipulating CSS rules that need to specify font kerning behavior.",
      "description_length": 446,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.DisplayOld",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS display values, including legacy and vendor-specific options. It provides a `toString` function to convert these display values to their string representations. Useful for generating CSS styles dynamically in OCaml applications.",
      "description_length": 292,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Isolation",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS isolation values, including `auto` and `isolate`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS output or configuring isolation settings in a type-safe manner.",
      "description_length": 280,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Animation",
      "library": "styled-ppx.native",
      "description": "This module creates CSS animation shorthand values with customizable duration, delay, direction, timing function, fill mode, play state, iteration count, and animation name. It operates on CSS animation-related data types, such as `Time.t`, `AnimationDirection.t`, and `TimingFunction.t`. Use it to define complex animation effects directly in OCaml code, such as fading elements in and out or sliding elements across the screen.",
      "description_length": 429,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverscrollBehavior",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS overscroll behavior values, including keywords like `contain` and `none`, and supports string serialization. It handles CSS-specific types such as `auto`, `var`, and cascading values like `inherit` and `unset`. Use this module to represent and manipulate overscroll behavior in CSS style declarations programmatically.",
      "description_length": 368,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisWeight",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis weight values, including auto, none, var, and cascading keywords. It provides the `toString` function to convert these values to their string representations. Useful for generating or manipulating CSS properties that control font weight synthesis in stylesheets or style engines.",
      "description_length": 342,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SVG",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for representing SVG fill values in CSS, including colors, URLs, and context-sensitive tokens like `contextFill` and `contextStroke`. It provides constructors for these values and a `toString` function to generate their string representations for use in style declarations. Concrete use cases include dynamically setting SVG element fill styles using color values, gradients, or inherited context.",
      "description_length": 437,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Transition",
      "library": "styled-ppx.native",
      "description": "Creates a transition shorthand value with optional duration, delay, and timing function parameters. Works with CSS transition types to define animation properties. Useful for concisely specifying transitions in CSS-like style definitions.",
      "description_length": 238,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaxWidth",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing valid values for the CSS `max-width` property, including keywords, lengths, percentages, and CSS variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles dynamically, validating `max-width` values, and integrating with CSS-in-JS libraries or code generators.",
      "description_length": 415,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declarations.SVG",
      "library": "styled-ppx.native",
      "description": "This module defines styling properties for SVG elements, including fill and stroke colors, opacity, and line styles. It supports precise control over visual attributes like dash patterns, line joins, and color interpolation. Use it to create or modify SVG graphics with detailed styling, such as charts, icons, or vector illustrations.",
      "description_length": 335,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundSize",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS background size values, including keywords like `cover`, `contain`, and `auto`, as well as explicit size pairs and CSS variable references. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when constructing or manipulating CSS background size declarations programmatically, such as in a CSS-in-OCaml library or style generator.",
      "description_length": 457,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Shadow",
      "library": "styled-ppx.native",
      "description": "This module defines and constructs CSS shadow values for box and text shadows, working with length and color types. It provides functions to create shadows with customizable offset, blur, spread, and inset properties for boxes, and offset and blur for text. Concrete use cases include styling UI components with drop shadows or text effects in a type-safe manner.",
      "description_length": 363,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationDirection",
      "library": "styled-ppx.native",
      "description": "This module defines an enumerated type representing CSS animation directions and provides a function to convert each value to its string representation. It works with polymorphic variants of the four possible animation direction keywords. Use this module to handle animation direction values when generating or manipulating CSS animations programmatically.",
      "description_length": 356,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AlignSelf",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type and `toString` function for representing and converting CSS `align-self` values. It supports variants like `normal`, `stretch`, positional alignment, and CSS variable handling. Use it to specify individual alignment for flex or grid items in CSS style declarations.",
      "description_length": 298,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ZIndex",
      "library": "styled-ppx.native",
      "description": "This module defines the type `t` for representing CSS z-index values, including auto, numeric values, and CSS variables. It provides the `toString` function to convert these values into their string representations for use in stylesheets. Typical use cases include generating CSS rules dynamically or serializing z-index values for rendering in HTML attributes.",
      "description_length": 361,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Alias.Calc",
      "library": "styled-ppx.native",
      "description": "This module defines arithmetic operations for constructing calculation expressions. It works with polymorphic types to build abstract syntax trees representing mathematical computations. Use it to create and manipulate symbolic expressions for evaluation or transformation in domain-specific calculations.",
      "description_length": 305,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Color",
      "library": "styled-ppx.native",
      "description": "This module provides utilities for constructing and transforming CSS color values through operations like interpolation, component calculation, and color space conversion. It handles RGB, HSL, hex, and special color forms alongside polar/rectangular representations, supporting dynamic expressions (`calc`, `min`, `max`) for angles, percentages, and alpha values. Typical use cases include generating precise CSS color syntax, blending colors with controlled hue interpolation, and manipulating color components programmatically.",
      "description_length": 529,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.RepeatValue",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible repeat values for CSS grid layouts, including `autoFill`, `autoFit`, and a numeric value. It provides the `toString` function to convert these values into their corresponding string representations. Useful for generating CSS grid template values dynamically based on layout logic.",
      "description_length": 333,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Display",
      "library": "styled-ppx.native",
      "description": "Converts display property values to their string representations. Works with polymorphic variant types representing CSS display values. Useful for generating CSS output or debugging display-related styles.",
      "description_length": 205,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.String",
      "library": "styled-ppx.native",
      "description": "Handles string manipulation and inspection with direct operations. Provides character access by index, length calculation, whitespace trimming, and prefix checking. Useful for parsing input, validating string formats, or processing text where precise string control is needed.",
      "description_length": 276,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.WordSpacing",
      "library": "styled-ppx.native",
      "description": "This module defines valid values for word spacing in CSS, including keywords, length units, and special tokens like `normal` or `inherit`. It converts these values to their string representations, supporting use cases like generating CSS classes or inline styles with precise word spacing control. The `toString` function handles units like pixels, ems, percentages, and CSS variables, enabling dynamic styling logic in OCaml applications.",
      "description_length": 439,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AspectRatio",
      "library": "styled-ppx.native",
      "description": "This module defines an aspect ratio type that supports numeric values, integer ratios, and CSS keywords like `auto` or `var`. It includes a function to convert these values into their string representation for use in CSS output. Commonly used to generate valid CSS aspect-ratio values from typed OCaml data.",
      "description_length": 307,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationThickness",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates values representing the thickness of text decorations in CSS. It supports variants such as keyword values (`fromFont`, `auto`), length units (`px`, `em`, `rem`, etc.), and special constructs like `var`, `inherit`, and `calc`. Use it to specify or serialize text decoration thickness values directly in CSS style declarations.",
      "description_length": 361,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontVariantEmoji",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type `t` representing CSS font-variant-emoji values, including options like `emoji`, `text`, and `unicode`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles that control emoji rendering in web applications.",
      "description_length": 333,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Auto",
      "library": "styled-ppx.native",
      "description": "Represents the CSS `auto` value and provides conversion to its string representation. Works with the polymorphic variant type `t` that includes the `auto` constructor. Useful for handling CSS properties that accept `auto` as a valid value, such as layout or sizing attributes.",
      "description_length": 276,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecoration",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates text decoration styles such as underlining, overlining, and line-through effects. It supports conversion of these styles to their string representations for use in CSS output. Concrete use cases include generating CSS rules dynamically and handling cascading values in style sheets.",
      "description_length": 318,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Position",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type for representing positional values in CSS, including keywords like `top`, `left`, and `center`, as well as length and percentage types. It provides a `toString` function that converts these positional values to their string representations, handling complex cases like `calc`, `var`, and viewport units. It is used to generate valid CSS position values programmatically in a type-safe manner.",
      "description_length": 439,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayBox",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing display box values in CSS, including `contents` and `none`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS output or inspecting display property settings in a type-safe manner.",
      "description_length": 292,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskPosition",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type `t` that represents CSS mask position values, including horizontal and vertical alignment keywords, combined `hv` positions, lengths, and CSS variables. It provides `toString` and `hv_to_string` functions to serialize these values into valid CSS strings. Use this module to construct and manipulate CSS mask positioning values directly in OCaml, particularly when generating or transforming CSS styles programmatically.",
      "description_length": 466,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackgroundOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS background origin values, including standard keywords and variable references. It provides the `toString` function to convert these values into their string representations for use in CSS output. Commonly used when generating or manipulating CSS styles programmatically, especially in libraries that interface with CSS-in-OCaml systems.",
      "description_length": 386,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackgroundImage",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS background image values, including gradients, URLs, and CSS variables. It provides the `toString` function to convert these values into their corresponding CSS string representations. It is used to construct and manipulate CSS background image properties programmatically, such as setting gradients or image URLs in stylesheets.",
      "description_length": 378,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.PositionalAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type for positional alignment values used in CSS layouts, including constants like `center`, `flexStart`, and `right`. It provides a `toString` function that converts these alignment values to their corresponding string representations. Useful for generating CSS classes or inline styles dynamically based on alignment constants.",
      "description_length": 359,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Margin",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS margin values, including units like pixels, percentages, and keywords like `auto`. It provides the `toString` function to convert these margin values into their string representation for use in stylesheets. Concrete use cases include generating CSS margin declarations from OCaml values, handling units like `px`, `em`, `percent`, and special values like `auto` or `var`.",
      "description_length": 421,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayListItem",
      "library": "styled-ppx.native",
      "description": "This module defines a single type `t` representing display list item values in CSS, with one constructor `` `listItem ``. It includes a function `toString` that converts the type to its corresponding string representation. This is used to generate valid CSS output for list item display properties in style sheets.",
      "description_length": 314,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AlignContent",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for CSS `align-content` property values, supporting variants like `center`, `flex-start`, `space-between`, and more. It includes a `toString` function that converts these alignment values to their string representations for use in CSS output. Concrete use cases include generating CSS styles for flexbox layouts, handling alignment with fallbacks, and managing custom properties through `var` and `varDefault`.",
      "description_length": 450,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.DisplayInternal",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS display values related to table layout. It includes a function to convert these display values to their string representations. Useful for generating CSS class names or style strings in web development where table-specific layout is required.",
      "description_length": 306,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextAlignLast",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type and `toString` function for handling CSS `text-align-last` values, including keywords like `left`, `right`, `center`, and `justify`, as well as special values like `auto` and `matchParent`. It supports converting these values to their string representations for use in CSS output or styling systems. Concrete use cases include generating CSS rules for text alignment in paragraphs or blocks, especially in bidirectional text layouts.",
      "description_length": 466,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Direction",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates text direction values, including left-to-right (`ltr`), right-to-left (`rtl`), and cascading or variable variants. It provides constants for common direction values and a function to convert direction values to their string representation. Useful for handling CSS direction properties in a type-safe manner, especially when generating or manipulating CSS values programmatically.",
      "description_length": 415,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BorderImageSource",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS border image sources, which can be either `none` or an image, and provides the `toString` function to convert various CSS gradient and image values into their string representations. It works directly with CSS types like gradients, URLs, and image values. Use this module when generating CSS styles dynamically, such as rendering border images from gradient definitions or URL strings.",
      "description_length": 433,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterStyleType",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents counter styles used in CSS, such as numbering formats for lists. It includes a function `toString` that converts a counter style value to its corresponding string representation. This is useful for generating CSS output or interpreting counter style values in a stylesheet processing tool.",
      "description_length": 336,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ListStyleImage",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible values for CSS `list-style-image`, including images, gradients, and special keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles dynamically, especially when handling custom list markers or gradient backgrounds.",
      "description_length": 367,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridTemplateAreas",
      "library": "styled-ppx.native",
      "description": "This module defines a type for representing CSS grid template areas and provides operations to construct and convert these values. It supports creating area specifications from string arrays and converting them to CSS-compatible strings. Use it to programmatically define or manipulate grid layouts in CSS generation libraries.",
      "description_length": 327,
      "index": 120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.NormalAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a single type `t` representing normal alignment in CSS, with a value `normal` and a conversion function `toString` that maps the value to its string representation. It works with polymorphic variant types and strings. Use this module to handle alignment values in CSS property manipulations where \"normal\" is a valid option.",
      "description_length": 344,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationName",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` for representing CSS animation names and provides `make` to create values of this type from strings, ensuring valid animation identifiers. It includes `toString` to convert these values back to their string representation for use in CSS rules. This module is used to safely handle animation names in CSS generation libraries, preventing invalid identifiers and ensuring type-safe composition of animation properties.",
      "description_length": 447,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.None",
      "library": "styled-ppx.native",
      "description": "Represents the CSS `none` value used for properties like display or visibility. Provides a single value `none` and a function to convert it to its string representation. Useful when setting CSS properties that accept `none` as a valid value.",
      "description_length": 241,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Content",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS content values, including keywords, text, counters, images, and gradients. It provides functions to convert content values to strings for rendering CSS rules. Concrete use cases include generating CSS `content` property values with quotes, counters, or dynamic text.",
      "description_length": 330,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.PropertyPosition",
      "library": "styled-ppx.native",
      "description": "This module defines types and values for CSS position properties, including standard keywords like `absolute`, `relative`, and `sticky`, as well as support for variables and cascading values. It provides functions to construct and convert these position values to their string representations. Useful for generating or manipulating CSS position declarations in a type-safe manner.",
      "description_length": 380,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kloth.Option",
      "library": "styled-ppx.native",
      "description": "This module provides functions for handling optional values with explicit default handling. It operates on the `'a option` type, allowing safe extraction of values with fallbacks, and mapping over optional data while preserving structure. Use cases include safely accessing configuration values, processing optional user input, and transforming optional data fields in records.",
      "description_length": 377,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Resize",
      "library": "styled-ppx.native",
      "description": "This module defines allowed values for the CSS `resize` property, including keywords like `both`, `horizontal`, and `vertical`, as well as support for CSS variables and cascade-related values. It provides constructors for each valid option and a `toString` function to convert values to their string representation. Use this module when specifying resizable behavior for elements in a type-safe way, such as allowing only vertical resizing or deferring to inherited values.",
      "description_length": 473,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationLine",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS text decoration lines, including values like `underline`, `overline`, `lineThrough`, and `blink`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS text styling logic that requires serialization of decoration values for rendering or configuration purposes.",
      "description_length": 421,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaxHeight",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS `max-height` values, including keywords like `none` and length-based values. It provides the `toString` function to convert these values into their string representations for use in stylesheets. It is used to construct and manipulate valid CSS `max-height` declarations programmatically.",
      "description_length": 341,
      "index": 129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontVariant",
      "library": "styled-ppx.native",
      "description": "This module defines font variant values like `normal` and `smallCaps`, and supports conversion of these values to their string representations. It works with polymorphic variants and string-based CSS variable syntax. Use it to construct and serialize valid CSS font-variant values directly in OCaml.",
      "description_length": 299,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GeometryBox",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing different geometric boxes used in CSS, such as `marginBox`, `borderBox`, and `viewBox`, along with associated values for each. It provides direct constructors for these box types and a `toString` function to convert them into their string representations. Use this module when handling CSS geometry values in style declarations or when generating CSS output from OCaml code.",
      "description_length": 422,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Image",
      "library": "styled-ppx.native",
      "description": "This module represents CSS image values, supporting both URLs and various gradient types. It provides a `toString` function to serialize these image values into CSS-compatible string representations. Use it to generate CSS background or image property values dynamically from OCaml code.",
      "description_length": 287,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.PointerEvents",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for handling CSS `pointer-events` values, including standard keywords and variances like `auto`, `none`, and `visiblePainted`. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control element interactivity, such as disabling clicks on certain elements or defining hit regions for SVG graphics.",
      "description_length": 454,
      "index": 133,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Gradient",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for constructing and converting CSS gradient values to strings. It supports linear, radial, and conic gradients with directional, color stop, shape, and positioning controls. Concrete use cases include generating CSS gradient strings for styling UI components with precise color transitions and shapes.",
      "description_length": 342,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ColumnWidth",
      "library": "styled-ppx.native",
      "description": "This module handles CSS column width values, supporting both automatic sizing and explicit length specifications. It converts column width definitions into string representations for use in CSS output or style manipulation. Concrete use cases include generating CSS rules for table layouts, responsive design adjustments, and dynamic styling based on length calculations or predefined units like pixels, ems, or percentages.",
      "description_length": 424,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OutlineStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS outline styles, including values like `solid`, `dashed`, and `auto`. It provides the `toString` function to convert these style values into their corresponding string representations. Use this module when working with CSS outline properties in OCaml, such as generating CSS rules or serializing style values for output.",
      "description_length": 383,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Time",
      "library": "styled-ppx.native",
      "description": "This module defines data types and operations for representing and manipulating time values in CSS-compatible formats, specifically seconds (`s`) and milliseconds (`ms`). It supports complex time calculations through algebraic data types like `add`, `sub`, `mult`, `div`, `min`, `max`, and `calc`, allowing the construction and serialization of CSS `calc()` expressions. Functions like `toString`, `minmax_to_string`, and `calc_value_to_string` convert these time expressions into valid CSS string representations for use in stylesheets or inline styles.",
      "description_length": 554,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LetterSpacing",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS letter spacing values, including keywords, length units, and CSS variables. It provides a `normal` value for the default spacing and a `toString` function to convert values to their CSS string representation. It is used to specify and render letter spacing styles in CSS-in-OCaml libraries.",
      "description_length": 338,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Array",
      "library": "styled-ppx.native",
      "description": "This module provides operations for transforming and aggregating array elements. It supports reduction, mapping, filtered mapping, and string concatenation over arrays of any type. Use it to process tabular data, format logs, or build dynamic strings from array elements.",
      "description_length": 271,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridAutoFlow",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS Grid's auto-flow property values, including row, column, and dense packing options. It supports operations to convert these values to their string representations for use in CSS output. Concrete use cases include generating CSS classes that control grid item placement behavior in layout systems.",
      "description_length": 346,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextOverflow",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS text overflow values, including standard keywords, string literals, and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use it to safely model and render CSS `text-overflow` properties in a type-safe manner.",
      "description_length": 346,
      "index": 141,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.UserSelect",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS `user-select` property values, including options like `text`, `all`, `none`, and support for CSS variables and cascading keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS-in-OCaml libraries to specify how text selection should behave in UI components.",
      "description_length": 412,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Overflow",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS overflow values, including `hidden`, `visible`, `scroll`, `auto`, and `clip`. It provides constructors for each value and a function to convert them to their string representation. Use this module when generating or manipulating CSS styles that require specifying overflow behavior for elements.",
      "description_length": 359,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MinWidth",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS `min-width` values, including keywords, lengths, percentages, and variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles dynamically, validating min-width constraints, and integrating with CSS-in-JS libraries.",
      "description_length": 376,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextEmphasisStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type `t` representing CSS text emphasis styles, including built-in keywords, custom strings, CSS variables, and cascading values. It provides the `toString` function to convert these style values into their standard CSS string representations. This is used when generating or dynamically composing CSS rules that apply text emphasis styles programmatically.",
      "description_length": 399,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DistributedAlignment",
      "library": "styled-ppx.native",
      "description": "Represents and converts CSS alignment values like `spaceBetween`, `spaceAround`, `spaceEvenly`, and `stretch` to their string equivalents. Works directly with polymorphic variant types to ensure valid alignment options. Used when generating or manipulating CSS layout properties in OCaml codebases.",
      "description_length": 298,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.StrokeDashArray",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing stroke dash array values in CSS, including lengths, variables, and cascading keywords. It provides the `toString` function to convert these values into their string representation for use in CSS stylesheets or inline styles. Use cases include generating responsive stroke patterns for SVG elements or dynamically styling HTML components with custom dash arrays.",
      "description_length": 405,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontVariantPosition",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing font variant position values, including normal, sub, super, and support for CSS variables and cascading keywords. It provides a `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles dynamically with precise control over font positioning in text layout.",
      "description_length": 376,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextAlign",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing text alignment values in CSS, including standard keywords and special constructs like variables and cascading behavior. It provides a `toString` function to convert these alignment values to their string representations for use in CSS output. Typical use cases include generating CSS classes or inline styles with specific text alignment properties.",
      "description_length": 409,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterSet",
      "library": "styled-ppx.native",
      "description": "This module represents and manipulates CSS counter sets, supporting operations to define counters with names and values. It works with string-based counter names and integer values, allowing direct construction and conversion to CSS string representations. Concrete use cases include generating CSS rules that manage counter resets, increments, and scoped variable fallbacks.",
      "description_length": 375,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LineBreak",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS `line-break` property values, including options like `loose`, `normal`, `strict`, and `anywhere`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that control line breaking behavior in text layout.",
      "description_length": 371,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontSynthesisStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis style values, including keywords like `auto`, `none`, and `var`, along with cascading and inherited values. It provides the `toString` function to convert these values into their string representations for use in CSS output or styling logic. Concrete use cases include generating CSS rules dynamically and handling font-related style computations in a type-safe way.",
      "description_length": 429,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Filter",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type for representing CSS filter functions and related values, including operations like `blur`, `brightness`, and `dropShadow` with specific parameter requirements. It provides functions to convert filter components to string representations, such as `string_of_amount` for numeric or percentage values and `toString` for full filter expressions. Concrete use cases include generating CSS filter strings for image manipulation in web applications, like applying shadows or adjusting color properties dynamically.",
      "description_length": 555,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.OverflowWrap",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS overflow-wrap properties, including values like `normal`, `breakWord`, and `anywhere`, along with cascading and variable handling. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use this module when generating or manipulating CSS styles that control text wrapping behavior within elements.",
      "description_length": 409,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BaselineAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS baseline alignment values and a function `toString` that converts these values to their string representations. It works with polymorphic variant types restricted to `baseline`, `firstBaseline`, or `lastBaseline`. Use this module when generating CSS styles that require baseline alignment specifications, such as in flexbox or grid layouts.",
      "description_length": 388,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ColumnCount",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS column count values, including auto, integer counts, and cascading keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that involve column layout properties.",
      "description_length": 335,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TransformBox",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS transform box values, including standard keywords and support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Typical use cases include generating CSS styles that reference transform box models like `border-box` or `viewBox`, and handling dynamic values through variables.",
      "description_length": 431,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Perspective",
      "library": "styled-ppx.native",
      "description": "This module handles CSS perspective values, supporting operations to convert various length units and special keywords to their string representations. It works with types representing CSS lengths, constants like `none`, and variable references. Use it to generate CSS strings for perspective transformations or custom properties in style declarations.",
      "description_length": 352,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationIterationCount",
      "library": "styled-ppx.native",
      "description": "This module defines an animation iteration count type that supports finite counts, infinite loops, and CSS variable references. It includes a conversion function to string for rendering CSS values. Used to specify how many times an animation should repeat in a stylesheet.",
      "description_length": 272,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BorderCollapse",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS border collapse values, including `collapse`, `separate`, and cascading variants. It provides the `toString` function to convert these values to their string representations. Useful for generating or manipulating CSS styles programmatically.",
      "description_length": 291,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ObjectFit",
      "library": "styled-ppx.native",
      "description": "This module defines an enumerated type `t` representing CSS `object-fit` values, including variants like `fill`, `contain`, `cover`, and `scaleDown`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles dynamically in OCaml applications.",
      "description_length": 330,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayInside",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing layout display models including table, flex, and grid. It provides a function `toString` to convert these display values to their string representations. Useful for generating CSS output or validating display properties in a type-safe manner.",
      "description_length": 286,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterReset",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS counter reset values, including primitives like `none`, `reset` with identifier and value, and support for variables and cascading. It provides the `reset` function to create counter reset declarations with an optional initial value, and `toString` to convert these values into their CSS string representations. Use this module to manage counter state in CSS-like stylesheets, such as resetting numbered lists or custom counters in generated content.",
      "description_length": 498,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisPosition",
      "library": "styled-ppx.native",
      "description": "This module handles text emphasis position values in CSS, combining alignment and over/under placement. It supports operations to define and convert composite positions like `left over` or `right under` into valid CSS strings. Useful for dynamically generating CSS rules that apply text emphasis styles in specific positions.",
      "description_length": 325,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Counters",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS counter styles, specifically handling the `counters` function used in styling lists. It provides a `counters` function to create counter values with optional separator and style parameters, and a `toString` function to convert these values to their string representation. Concrete use cases include generating ordered list markers with custom separators and applying counter styles like decimal or roman numerals in CSS.",
      "description_length": 481,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Width",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS width values, including keywords, length units, and special tokens. It provides the `toString` function to convert these width values into their string representations for use in CSS output. Concrete use cases include generating CSS width declarations like `\"100px\"`, `\"auto\"`, or `\"min-content\"` in style sheets or inline styles.",
      "description_length": 384,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Shadow",
      "library": "styled-ppx.native",
      "description": "This module defines and constructs CSS shadow values for both box and text shadows, using length and color types. It provides functions to create shadows with customizable x/y offsets, blur radius, spread, and color, including support for inset shadows. The `toString` function serializes shadow values into CSS string representations for rendering styles.",
      "description_length": 356,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackfaceVisibility",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS backface visibility values, including standard keywords and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating valid CSS properties that control whether the back face of an element is visible when not facing the viewer.",
      "description_length": 377,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationFillMode",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS animation fill mode values, including keywords like `forwards`, `backwards`, `both`, and support for CSS variables and cascading values. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control an animation's behavior before and after its execution period.",
      "description_length": 427,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TransformStyle",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS transform style values, including `preserve3d`, `flat`, and support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control whether child elements are positioned in 3D space or flattened.",
      "description_length": 401,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TimingFunction",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for CSS timing functions, including standard keywords like `linear`, `ease`, and `step` variants, as well as cubic B\u00e9zier curves and CSS variables. It supports constructing and converting timing function values to their string representations for use in animations and transitions. Concrete use cases include specifying animation easing behavior in UI frameworks and generating CSS output from OCaml code.",
      "description_length": 445,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AlphaValue",
      "library": "styled-ppx.native",
      "description": "Represents CSS alpha values with numeric, percentage, variable, and cascading keyword options. Converts alpha values to their string representations for CSS output. Useful for generating valid CSS opacity or transparency values dynamically.",
      "description_length": 240,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterIncrement",
      "library": "styled-ppx.native",
      "description": "Handles CSS counter increment operations with string identifiers and integer values. Provides `increment` to create counter increments with optional values and `toString` to convert counter values to CSS string representations. Used for generating and manipulating CSS counter styles in web development.",
      "description_length": 303,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Background",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS background values, including colors, gradients, and URLs, and provides the `toString` function to convert these values into their string representations for use in CSS rules. It handles color models like RGB, HSL, and hexadecimal, along with gradient types such as linear, radial, and conic, supporting both standard and repeating variants. Use cases include generating CSS background declarations dynamically and serializing UI configuration into valid CSS syntax.",
      "description_length": 515,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BoxSizing",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS box sizing values, including variants for `contentBox`, `borderBox`, and support for CSS variables and cascading behaviors. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating valid CSS strings when working with box sizing properties in a type-safe manner.",
      "description_length": 391,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridArea",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS grid area values, including identifiers, numbers, spans, and special keywords. It provides constructors like `auto`, `ident`, `num`, `span`, and `numIdent` to build grid area values, and a `toString` function to convert them into CSS-compatible strings. It is used to programmatically define grid layout regions in CSS-in-OCaml libraries, enabling precise control over grid placement and spanning.",
      "description_length": 461,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Animation",
      "library": "styled-ppx.native",
      "description": "This module defines data structures and functions for working with CSS animation properties. It provides a record type to specify animation parameters like duration, delay, direction, and timing function, along with a sum type to represent animation values, including special cases like `none`, `var`, and cascading values. The `make` function constructs animation records, and `toString` converts them into CSS-compatible string representations for use in style definitions.",
      "description_length": 475,
      "index": 177,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.AlignItems",
      "library": "styled-ppx.native",
      "description": "This module defines an enumerated type `t` representing CSS alignment values for flex container items, including positional, baseline, overflow, and cascading behaviors. It includes a `toString` function that converts these alignment values to their corresponding CSS string representations. Use this module to specify and serialize alignment properties like `align-items` in CSS-in-OCaml libraries.",
      "description_length": 399,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayOutside",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS display outside values, including `block`, `inline`, and `runIn`. It provides a function `toString` that converts these values to their string representations. Useful for generating CSS output or manipulating display properties in a type-safe manner.",
      "description_length": 298,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SideOrCorner",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing directional values like top, left, bottom, right, and their combinations for specifying sides or corners. It includes a `toString` function that converts these values to their string representations. Useful for handling layout or positioning logic in user interfaces where directional alignment matters.",
      "description_length": 347,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LineWidth",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS line width values, including keywords like `thin`, `medium`, and `thick`, and various length units. It provides the `toString` function to convert these line width values into their string representations suitable for CSS output. Use this module when generating CSS styles dynamically, particularly for properties like `border-width` or `outline-width`.",
      "description_length": 401,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.JustifySelf",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type and `toString` function for representing and converting CSS `justify-self` values. It supports variants like `normal`, `stretch`, alignment types, and CSS variables. Use it to generate valid CSS strings for `justify-self` properties in style declarations.",
      "description_length": 288,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Transition",
      "library": "styled-ppx.native",
      "description": "This module defines CSS transition values with duration, delay, timing function, and property fields. It provides a `make` function to construct transition values and `toString` to convert them to CSS-compatible strings. Use it to programmatically create and render CSS transition properties for animations.",
      "description_length": 307,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationPlayState",
      "library": "styled-ppx.native",
      "description": "This module defines an enumerated type representing the play state of a CSS animation, with values for `paused`, `running`, and extensions for cascading and variable handling. It includes a function to convert these states to their string representation, supporting both standard keywords and variable syntax. This is used when generating or manipulating CSS animation properties programmatically.",
      "description_length": 397,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Border",
      "library": "styled-ppx.native",
      "description": "Converts a border value to a CSS string representation, handling length units, border styles, and colors. Works with length values like pixels, percentages, and relative units, alongside border styles such as solid, dashed, and none. Useful for generating CSS border declarations from typed values in a type-safe way.",
      "description_length": 317,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Counter",
      "library": "styled-ppx.native",
      "description": "This module represents CSS counter styles for generating numbered content. It provides a `counter` function to create counter values with optional styling and a `toString` function to convert counter values to their string representation. It works with string identifiers and counter style types to format content in CSS-like rule definitions.",
      "description_length": 343,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS.Array",
      "library": "styled-ppx.native",
      "description": "This module offers a comprehensive toolkit for array manipulation, encompassing creation, transformation, and iteration operations with support for in-place mutation and functional pipelines. It handles standard arrays, matrices, and float-specific representations, providing utilities for element-wise computations, folds, zipping, sorting, and conversions to/from lists and sequences. Key use cases include numerical data processing, algorithmic workflows requiring indexed traversal, and scenarios demanding efficient array aggregation or decomposition.",
      "description_length": 556,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskImage",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS mask image values, including none, images, and various gradient types. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module to generate valid CSS mask image declarations from OCaml values, such as converting a linear gradient or image URL to a string suitable for styling.",
      "description_length": 396,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackgroundClip",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS background clip values, including keywords like `borderBox`, `paddingBox`, and `text`. It provides the `toString` function to convert these values into their string representations for use in CSS output. Commonly used when generating or manipulating CSS styles programmatically, especially in conjunction with CSS-in-OCaml libraries.",
      "description_length": 383,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextTransform",
      "library": "styled-ppx.native",
      "description": "This module defines and converts text transform values like `capitalize`, `uppercase`, and `lowercase` to their string representations. It operates on polymorphic variant types representing CSS text-transform properties, including support for variables and cascading values. Use it to generate valid CSS text-transform declarations from OCaml values.",
      "description_length": 350,
      "index": 190,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextDecorationSkipInk",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing values for the CSS `text-decoration-skip-ink` property, including keywords like `all`, `auto`, and `none`, as well as cascading and custom variable values. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that involve controlling text decoration rendering around glyphs.",
      "description_length": 437,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontStyle",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates font style values used in CSS, including constants for common styles like `normal`, `italic`, and `oblique`. It supports conversion of these values to their string representations via `toString`. Use cases include generating CSS rules dynamically or processing font style attributes in a type-safe manner.",
      "description_length": 341,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Cursor",
      "library": "styled-ppx.native",
      "description": "This module enables type-safe creation of CSS cursor values and their conversion to CSS-compatible strings. It uses polymorphic variants to represent cursor modes like `pointer`, `colResize`, and `zoomIn`, ensuring valid cursor property manipulation. The functionality is particularly useful for OCaml-based CSS generation or UI frameworks requiring compile-time validation of cursor styles.",
      "description_length": 391,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FlexBasis",
      "library": "styled-ppx.native",
      "description": "This module defines types and values representing CSS `flex-basis` properties, including keywords like `fill`, `content`, and `fitContent`. It provides direct constructors for each valid flex basis value and a conversion function `toString` to render them as strings. Useful for generating or manipulating CSS flexbox layout styles programmatically.",
      "description_length": 349,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.VerticalAlign",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing vertical alignment values, including keywords like `top`, `middle`, and `bottom`, as well as length units and CSS variables. It provides the `toString` function to convert these alignment values into their corresponding CSS string representations. Use this module when constructing or manipulating CSS vertical alignment properties programmatically, such as in a CSS-in-JS library or a code generator for styling components.",
      "description_length": 484,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontFace",
      "library": "styled-ppx.native",
      "description": "Represents font face sources using URLs or local font names. Converts font face values to their string representation for use in CSS rules. Useful when generating or manipulating `@font-face` CSS declarations programmatically.",
      "description_length": 226,
      "index": 196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Transform",
      "library": "styled-ppx.native",
      "description": "This module enables constructing and serializing CSS transform functions, such as translation, rotation, scaling, and skewing, using a polymorphic variant type that encapsulates dimensional values like lengths, angles, and scaling factors. It operates on data structures including 2D and 3D transform representations, converting them into CSS-compatible string formats while handling units like degrees, radians, and length measurements. It is particularly useful in web development scenarios requiring dynamic generation of transform styles for animations or responsive layouts.",
      "description_length": 579,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayLegacy",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing legacy inline display properties in CSS. It includes a function to convert each variant to its corresponding string representation. Useful for generating CSS values dynamically in inline layout contexts.",
      "description_length": 251,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverflowAnchor",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS overflow anchor values, including `auto`, `none`, and cascading options. It provides the `toString` function to convert these values to their string representations. Use this module when working with CSS overflow anchor properties in OCaml code, such as generating or manipulating CSS styles programmatically.",
      "description_length": 359,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationSkipBox",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing values for the CSS `text-decoration-skip-box` property, including keywords like `all` and `none`, and supports variable and cascading values. It provides the `toString` function to convert these values to their string representations for use in CSS output. Use this module when generating or manipulating CSS styles that require specifying how text decorations interact with inline boxes.",
      "description_length": 432,
      "index": 200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisPosition",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis position values, including auto, none, var, and cascading options. It provides the `toString` function to convert these values into their string representations for use in CSS output. This module is used to specify where in a font stack synthesis should occur, directly supporting CSS-like configuration in OCaml applications.",
      "description_length": 389,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TouchAction",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS touch action values, including identifiers like `panX`, `panY`, and `pinchZoom`, and converts them to their string representations. It supports operations for specifying how touch events are handled on elements, such as enabling or disabling specific gestures. Use this module when working with CSS touch interaction properties in a type-safe manner, such as restricting touch scrolling to a specific axis or disabling zooming.",
      "description_length": 475,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MinHeight",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type as an alias for `Css_types.Height.t` and includes a `toString` function that converts values of type `t` to strings. It works with CSS height values, such as lengths, percentages, and auto. Use this module when generating CSS output that requires min-height property values.",
      "description_length": 307,
      "index": 203,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextAlignAll",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing text alignment values in CSS, including standard keywords and special constructs like variables and cascading behavior. It provides a `toString` function to convert these alignment values into their corresponding CSS string representations. Use this type to safely model and manipulate text alignment properties in CSS-in-OCaml libraries or style generators.",
      "description_length": 418,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS",
      "library": "styled-ppx.native",
      "description": "This module offers type-safe CSS rule generation and manipulation for layout, animation, and visual styling, converting OCaml values into valid CSS declarations. It operates on `Rule.rule` structures, `Css_types.Color.t` for color constants, and polymorphic variants representing CSS properties, units, and keywords (e.g., lengths, alignment values, animation parameters). Designed for OCaml-based stylesheet construction, it supports use cases like responsive grid/flexbox layouts, dynamic styling with CSS variables, and programmatic animation definition while ensuring compile-time correctness.",
      "description_length": 597,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rule",
      "library": "styled-ppx.native",
      "description": "This module defines operations for constructing and manipulating CSS-like rules, including declarations, selectors, and media queries. It works with a custom `rule` type that represents different kinds of stylesheet constructs. Functions like `declaration`, `selector`, and `media` build specific rule types, while `important` modifies existing rules.",
      "description_length": 351,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colors",
      "library": "styled-ppx.native",
      "description": "This module offers a comprehensive palette of named CSS color constants as direct value bindings, all represented through the `Css_types.Color.t` type. It provides immediate access to standard web colors, including dark shades and other predefined hues, for use in styling or rendering workflows that require CSS-compatible color definitions. These values serve practical applications in web development, theming, or any OCaml project needing precise color representation aligned with CSS standards.",
      "description_length": 499,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declarations",
      "library": "styled-ppx.native",
      "description": "This module provides type-safe CSS rule generation for styling web components, focusing on layout, visual effects, and text formatting. It operates on polymorphic variants representing CSS keywords, lengths, colors, and custom types like `gridLength` or `PositionalAlignment`, producing `Rule.rule` values for typed CSS DSLs. Use cases include building responsive interfaces with type-checked flex/grid layouts, animations, and dynamic styling that leverages CSS variables and calc expressions.",
      "description_length": 494,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autoprefixer",
      "library": "styled-ppx.native",
      "description": "This module transforms CSS properties and values by adding vendor prefixes like `-webkit-`, `-moz-`, and `-ms-` to support older browsers. It operates on CSS rules, generating arrays of prefixed rules for a given input rule or property-value pair. Use it when generating cross-browser compatible CSS from a base rule.",
      "description_length": 317,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth",
      "library": "styled-ppx.native",
      "description": "This module organizes focused utilities for handling arrays, strings, integers, floats, and optional values. Each submodule provides direct, practical operations for data transformation, formatting, and inspection. Use it to process collections, manipulate text, convert numbers to strings, and safely handle optional data.",
      "description_length": 323,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias",
      "library": "styled-ppx.native",
      "description": "This module provides type-safe constructors for CSS properties and layout primitives, enabling precise styling and animation through polymorphic variant tags and typed values. It operates on CSS-related data structures like angles, colors, gradients, and layout keywords, supporting use cases such as responsive design, UI animations, and interactive elements with context-specific behaviors. Key capabilities include defining transform operations, grid/flexbox configurations, and cursor/resize interactions while ensuring compile-time correctness for CSS DSLs and UI frameworks.",
      "description_length": 580,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types",
      "library": "styled-ppx.native",
      "description": "This module provides type-safe construction and serialization of CSS property values, supporting operations like unit-aware arithmetic, variable substitution, and cascading behavior. It works with polymorphic variant types representing CSS keywords, length units, percentages, time values, URLs, and complex expressions (e.g., `calc()`, `var()` with fallbacks), ensuring valid CSS syntax through `toString` conversions. Designed for programmatic stylesheet generation, it enables safe manipulation of layout, animation, typography, and UI properties while preventing invalid value combinations in OCaml applications.",
      "description_length": 616,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx.Mapper",
      "library": "ppx",
      "description": "This module processes OCaml abstract syntax trees to transform specific expressions, particularly handling module expressions, HTML tags, and CSS-related constructs. It works with data types like `Ppxlib.module_expr`, `Ppxlib.expression`, and a custom `contents` type representing structured values. Concrete use cases include extracting and transforming HTML tags, matching on module expressions, and embedding CSS within OCaml code.",
      "description_length": 434,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx",
      "library": "ppx",
      "description": "This module processes OCaml abstract syntax trees, focusing on transformations of module expressions, HTML tags, and CSS constructs. It operates on types like `Ppxlib.module_expr`, `Ppxlib.expression`, and a custom `contents` type for structured values. Use cases include extracting and rewriting HTML tags, matching module expressions, and embedding CSS directly in OCaml code.",
      "description_length": 378,
      "index": 214,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 215,
    "meaningful_modules": 215,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 181,
    "avg_description_length": 390.13953488372096,
    "embedding_file_size_mb": 3.115152359008789
  }
}