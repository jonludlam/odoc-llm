{
  "package": "styled-ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 214,
  "creation_timestamp": "2025-07-15T23:42:16.966468",
  "modules": [
    {
      "module_path": "Styled_ppx_css_parser.Ast",
      "library": "styled-ppx.css-parser",
      "description": "This module provides functions to convert CSS abstract syntax tree (AST) nodes into human-readable strings and formatted representations, primarily for debugging and code generation. It operates on structured data types representing CSS elements, including declarations, selectors, at-rules, and nested blocks, with support for location tracking and component value lists. These utilities enable developers to serialize complex CSS AST structures into textual formats for inspection, error reporting, or emitting valid CSS output.",
      "description_length": 530,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Lexer",
      "library": "styled-ppx.css-parser",
      "description": "This module provides functions for lexing CSS-like syntax into tokens, including utilities to handle whitespace sensitivity, extract tokens with positional information, and convert tokens to string representations. It operates on strings and lexing buffers, producing structured token streams with location metadata. Concrete use cases include parsing CSS values in a PPX rewriter, validating CSS syntax during compilation, and generating precise error messages with location tracking.",
      "description_length": 485,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Styled_ppx_css_parser.Parser_location",
      "library": "styled-ppx.css-parser",
      "description": "Converts and manipulates source code locations between different formats, primarily between `Lexing.position` and `Ppxlib.location`. It supports operations like merging locations, updating line numbers, and printing location details for error reporting. This module is used to track and adjust source positions when parsing and transforming CSS code during preprocessing.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Styled_ppx_css_parser.Tokens",
      "library": "styled-ppx.css-parser",
      "description": "This module defines a set of token types representing CSS lexical elements such as identifiers, numbers, strings, and punctuation, used in parsing CSS syntax. It includes functions to convert tokens to human-readable or debug strings, handle formatting, and display detailed error types for invalid input. Concrete use cases include lexical analysis of CSS values, token stream debugging, and error reporting during CSS parsing.",
      "description_length": 428,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Driver",
      "library": "styled-ppx.css-parser",
      "description": "This module provides functions for parsing CSS-like syntax into abstract syntax trees, handling operations such as token conversion, string and buffer parsing, and specific CSS constructs like stylesheets, keyframes, and declarations. It works with lexing buffers, location information, and custom AST types such as `stylesheet`, `rule_list`, and `declaration`. Concrete use cases include parsing inline CSS in OCaml code during preprocessing, validating and transforming CSS syntax in PPX extensions, and extracting structured data from CSS-like strings for further analysis or code generation.",
      "description_length": 595,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser.Parser",
      "library": "styled-ppx.css-parser",
      "description": "Parses CSS-like syntax into structured AST representations, handling tokens like identifiers, strings, numbers, and CSS-specific constructs such as media queries, keyframes, and selectors. It processes input through lexing functions to generate complete stylesheets, keyframe sequences, declaration lists, or individual declarations. This module is used to interpret CSS rules embedded in OCaml code, enabling type-safe manipulation and generation of CSS within the language.",
      "description_length": 475,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Styled_ppx_css_parser",
      "library": "styled-ppx.css-parser",
      "description": "This module processes CSS-like syntax through lexing, parsing, and pretty-printing stages, converting between raw strings, token streams, and abstract syntax trees with precise location tracking. It defines core data types such as tokens, AST nodes (`stylesheet`, `declaration`, `rule_list`), and location metadata, supporting operations like parsing CSS values, generating readable CSS output, and reporting syntax errors with positional information. Developers can use it to embed and manipulate CSS directly in OCaml code, enabling tasks like validating inline styles, transforming keyframe animations, or extracting structured data from CSS rules for further processing.",
      "description_length": 674,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_spec_parser",
      "library": "styled-ppx.css-spec-parser",
      "description": "This module defines data structures and operations for parsing and representing CSS specification syntax. It includes types for terminal symbols, combinators, and value expressions with support for multipliers and grouping. Concrete use cases include interpreting CSS grammar rules, validating property values, and generating documentation from CSS specifications.",
      "description_length": 364,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx.Mapper",
      "library": "ppx",
      "description": "This module processes OCaml abstract syntax trees to transform specific expressions, particularly handling HTML tags, CSS, and pattern matching constructs. It provides functions to extract and manipulate HTML tag names, handle styled elements, and construct expressions like matches, lists, and function applications. Use cases include rewriting HTML-like syntax into valid OCaml expressions and embedding CSS within OCaml code.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx",
      "library": "ppx",
      "description": "This module enables traversal and transformation of OCaml ASTs with a focus on expressions, patterns, and payloads, offering utilities for parsing and constructing nodes involving strings, arrays, and custom data. Its child module specializes in handling HTML-like syntax, CSS embedding, and pattern matching transformations, allowing manipulation of tag names, styled elements, and expression construction. Key operations include rewriting HTML tags into OCaml expressions, generating match statements, and integrating CSS directly into code. Together, they support advanced syntax extensions, code generation, and AST-level manipulations during compilation.",
      "description_length": 659,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Murmur2",
      "library": "styled-ppx.murmur2",
      "description": "Implements the MurmurHash2 algorithm to generate 32-bit hash values from input strings. Provides a single hashing function configured with default parameters for simplicity and consistency. Useful for generating deterministic hashes for keys in hash tables or checksums in data integrity checks.",
      "description_length": 295,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisPosition.OverOrUnder",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for text emphasis position values in CSS, specifically handling `over` and `under` positions along with CSS variables and cascading keywords. It includes a `toString` function that converts these values into their corresponding string representations for use in stylesheets. Useful for generating valid CSS strings when working with text emphasis styling in OCaml-based CSS tooling.",
      "description_length": 424,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisPosition.LeftRightAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for text emphasis alignment positions in CSS. It supports values like `left`, `right`, and integration with CSS variables and cascading keywords. Use it to specify or serialize alignment positions in CSS-in-OCaml libraries or style generators.",
      "description_length": 285,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskPosition.X",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing horizontal mask positioning options (`left`, `right`, `center`) and a function `toString` that converts these values to their string representations. It works directly with polymorphic variants and strings. Use this module when handling CSS mask position values in type-safe configurations or style generators.",
      "description_length": 354,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextEmphasisStyle.Shape",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing the shape values for text emphasis in CSS, including primitives like `dot`, `circle`, and `triangle`. It provides the `toString` function to convert these shape values into their corresponding string representations for use in stylesheets. Concrete use cases include generating CSS rules for text emphasis styles in web development.",
      "description_length": 392,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SVG.Fill",
      "library": "styled-ppx.native",
      "description": "This module defines types and values for SVG fill properties, including color, context-based fills, and URL references. It provides constructors for specific fill types like `contextFill` and `contextStroke`, and a `toString` function to convert fill values to their string representations. It is used to specify how shapes and paths are filled in SVG elements, supporting both direct color values and dynamic references.",
      "description_length": 421,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextEmphasisStyle.FilledOrOpen",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS text emphasis styles, including variants for `filled`, `open_`, and support for CSS variables and cascading values. It provides the `toString` function to convert these style values into their corresponding string representations for use in CSS output. Concrete use cases include generating CSS rules that apply text emphasis styles like `text-emphasis-style: filled` or handling dynamic values through CSS variables.",
      "description_length": 465,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CSS.Stylesheet.Hashes",
      "library": "styled-ppx.native",
      "description": "This module enables set-like manipulation of string collections through a hash-based structure, supporting operations like union, intersection, and difference, as well as functional transformations such as mapping, filtering, and folding. It operates on hash tables (`t`) containing string elements (`elt`), providing efficient membership checks, iterative traversal, and sequence interconversion. Practical applications include managing unique style identifiers and transforming sets of strings through declarative operations or sequence-based pipelines.",
      "description_length": 555,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskPosition.Y",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing vertical alignment positions (`top`, `bottom`, `center`) for CSS mask positioning. It includes a function `toString` that converts these alignment values to their corresponding string representations. This module is used to specify and manipulate vertical mask alignment in CSS styling logic.",
      "description_length": 336,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisSmallCaps",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis small caps values, including auto, none, var, and cascading options. It provides the `toString` function to convert these values to their string representation. Useful for generating CSS styles dynamically in OCaml, particularly when handling font synthesis properties in style sheets or UI components.",
      "description_length": 365,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Transition",
      "library": "styled-ppx.native",
      "description": "This module defines transition properties for CSS animations, including duration, delay, timing function, and target property. It provides constructors and string serialization for transition values. Useful for generating CSS transition declarations programmatically.",
      "description_length": 267,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Margin",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS margin values, including keywords, lengths, and variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use this module when generating CSS margin declarations dynamically, such as in a CSS-in-JS library or a code generator for styling components.",
      "description_length": 369,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Background",
      "library": "styled-ppx.native",
      "description": "This module handles CSS background values, including colors, gradients, and images, by converting them into their string representations. It supports operations like parsing and serializing complex gradient definitions, color formats, and URL-based backgrounds. Concrete use cases include generating CSS background declarations for web components or dynamically styling elements with gradient expressions.",
      "description_length": 405,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundImage",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS background image values, including gradients, URLs, and special keywords. It provides the `toString` function to convert these values into their string representations for use in CSS rules. Use this module when generating or manipulating CSS background images programmatically, such as building gradient styles or handling CSS variables.",
      "description_length": 387,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.AnimationPlayState",
      "library": "styled-ppx.native",
      "description": "This module defines an animation play state type with variants for `paused`, `running`, and integration with cascading and variable CSS values. It includes a `toString` function that converts these states into their corresponding CSS string representations. Useful for dynamically controlling animation playback states in CSS-in-JS libraries or style generation tools.",
      "description_length": 368,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayLegacy",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing legacy inline display properties in CSS, including `inlineBlock`, `inlineFlex`, `inlineGrid`, and `inlineTable`. It provides a function `toString` that converts these values to their corresponding string representations. This type is useful for generating or manipulating CSS display properties in inline contexts programmatically.",
      "description_length": 379,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationSkipBox",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS `text-decoration-skip-box` values, including keywords like `all` and `none`, and supports variable references. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS styles with specific text decoration skipping behavior, such as excluding inline elements from underlines.",
      "description_length": 424,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Percentage",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing percentage values as a polymorphic variant with a float payload. It includes a function `pct` to construct percentage values from any type and a `toString` function to convert percentage values to string representations. Concrete use cases include handling and formatting CSS percentage values in web development, such as converting `50.5` to the string `\"50.5%\"`.",
      "description_length": 408,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextDecoration",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS text decoration values, including standard options like underline, overline, and line-through, as well as support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS text decoration styles programmatically.",
      "description_length": 425,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.WhiteSpace",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS white-space values, including standard keywords and support for variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS styles that control text wrapping and spacing in HTML elements.",
      "description_length": 368,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.UserSelect",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS `user-select` property values, including options like `text`, `all`, and `none`, and provides the `toString` function to convert these values into their string representations for use in CSS styling. It supports direct mapping of OCaml values to CSS syntax, enabling precise control over text selection behavior in user interfaces. Use this module to specify how text within elements should be selectable by users, such as disabling selection on interactive widgets or allowing full selection in text containers.",
      "description_length": 562,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Visibility",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS visibility values, including standard keywords and support for variables and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Commonly used when generating or manipulating CSS styles programmatically, especially in conjunction with CSS-in-OCaml libraries.",
      "description_length": 393,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SideOrCorner",
      "library": "styled-ppx.native",
      "description": "This module defines a set of constants representing sides and corners of a rectangle, along with a function to convert these values to their string representations. It works directly with the polymorphic variant type `t`, which includes all cardinal directions and corner combinations. Use this module when handling layout or positioning logic that requires directional or corner-specific behavior, such as aligning UI elements or defining border styles.",
      "description_length": 454,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverflowAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents overflow alignment values in CSS, with variants for safe and unsafe alignment. It includes a `toString` function that converts these alignment values to their string representations. Use this module when working with CSS overflow alignment properties to ensure correct value handling and serialization.",
      "description_length": 349,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.WordBreak",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS word-break properties, including variants like `breakAll`, `keepAll`, and `normal`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating or manipulating CSS styles programmatically, especially in web development contexts where word wrapping behavior needs to be specified.",
      "description_length": 404,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridArea",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS grid area values, including identifiers, numbers, spans, and special keywords. It provides constructors like `auto`, `ident`, `num`, `span`, and `numIdent` to build grid area values, and `toString` to convert them into CSS-compatible strings. It is used to programmatically define grid layouts in CSS-in-OCaml libraries, enabling type-safe grid area specifications.",
      "description_length": 429,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ScrollBehavior",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible scroll behavior values in CSS, including `auto`, `smooth`, and various cascading and variable handling options. It provides the `toString` function to convert these values into their corresponding string representations for use in CSS output. This is useful when generating dynamic CSS styles where scroll behavior needs to be programmatically controlled or configured.",
      "description_length": 422,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.JustifyItems",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS `justify-items` alignment values, including constants like `stretch`, `center`, and `flex-start`. It provides the `toString` function to convert alignment values to their string representations for use in CSS output. Typical use cases include generating CSS class definitions or inline styles in web applications.",
      "description_length": 363,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BorderImageSource",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS border image sources, which can be either `none` or an image, and provides the `toString` function to convert various CSS gradient and image values into their string representations. It works with polymorphic variant types that include URLs, gradients, and repeating gradients. Use this module when generating CSS styles dynamically to specify border images using gradients or external image sources.",
      "description_length": 448,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DistributedAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing different alignment strategies for distributing space in a layout. It includes a function to convert each alignment value to its string representation. Useful for specifying how elements should be spaced within a container in a CSS-like layout system.",
      "description_length": 299,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Auto",
      "library": "styled-ppx.native",
      "description": "Represents the CSS `auto` value and provides conversion to its string representation. Works with the polymorphic variant type `t` that includes only the `auto` constructor. Useful for generating CSS output where properties like width, height, or margins are set to `auto`.",
      "description_length": 272,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.WordSpacing",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS word spacing values, including keywords, length units, and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use this module to handle and serialize word spacing styles like `\"normal\"`, `\"2em\"`, or `\"var(--spacing)\"` directly in OCaml code.",
      "description_length": 381,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.PositionalAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing alignment values for layout positioning, such as center, start, end, and directional options like left or right. It includes a function to convert these alignment values to their string representations. Useful for specifying alignment in UI components or layout engines where precise positional control is required.",
      "description_length": 363,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FlexDirection",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing valid CSS Flexbox direction values, including standard directions and cascading keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS-in-OCaml libraries to specify or manipulate flex container directions programmatically.",
      "description_length": 374,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Width",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS width values, including keywords, length units, and special tokens. It provides the `toString` function to convert these width values into their string representations for use in CSS output or styling logic. Concrete use cases include generating CSS classes with dynamic widths, handling responsive design units like `vw` or `percent`, and serializing width values for HTML attributes or style tags.",
      "description_length": 449,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Resize",
      "library": "styled-ppx.native",
      "description": "This module defines allowed values for the CSS `resize` property, including keywords like `both`, `horizontal`, and `vertical`, as well as support for CSS variables and cascade-related values. It provides constructors for each valid option and a `toString` function to convert these values into their string representation for rendering in stylesheets. Use this module when specifying resizable behavior for elements in a type-safe manner, such as restricting resizing to horizontal only or using CSS custom properties.",
      "description_length": 519,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ImageRendering",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for image rendering properties in CSS. It supports values like `smooth`, `highQuality`, `pixelated`, and `crispEdges`, along with standard CSS keywords and variable references. Use it to specify how images should be scaled or rendered in user interfaces.",
      "description_length": 296,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Shadow",
      "library": "styled-ppx.native",
      "description": "This module defines and constructs CSS shadow values for box and text shadows, using color and length types. It provides functions to create shadows with customizable x/y offsets, blur radius, spread, and inset properties for boxes, or x/y offsets and blur for text. Concrete use cases include styling UI components with drop shadows or text effects in a type-safe manner.",
      "description_length": 372,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextTransform",
      "library": "styled-ppx.native",
      "description": "This module defines and converts text transform values like `capitalize`, `uppercase`, and `lowercase` to their string representations. It operates on a polymorphic variant type that includes both standard text transform options and CSS-specific values like `var` and `inherit`. Use this module to generate valid CSS text-transform property strings from typed values.",
      "description_length": 367,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationDirection",
      "library": "styled-ppx.native",
      "description": "This module defines an enumerated type representing CSS animation directions and provides a function to convert each direction to its string representation. It works with polymorphic variants of the four possible animation direction values. A concrete use case is generating valid CSS animation direction values from OCaml code.",
      "description_length": 328,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterStyleType",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents counter styles used in CSS, such as numbering formats for lists. It includes a function `toString` that converts a counter style value to its corresponding string representation. Useful for generating CSS output or validating counter style values in a type-safe manner.",
      "description_length": 316,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ColumnWidth",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS column width values, which can be either `auto` or a specific length. It includes a `toString` function that converts these values into their string representations for use in CSS output. Typical use cases include generating CSS styles dynamically where column widths are specified using various CSS units or keywords like `auto`.",
      "description_length": 378,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontKerning",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font kerning values, including variants like `normal`, `none`, and `auto`, as well as support for CSS variables and cascading keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS font properties that require precise control over glyph spacing in a type-safe manner.",
      "description_length": 421,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontVariantCaps",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing CSS font variant cap values, including standard options like `smallCaps`, `allPetiteCaps`, and `titlingCaps`, as well as support for CSS variables and cascading behavior. It provides a `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS font variant cap properties programmatically.",
      "description_length": 427,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridTemplateAreas",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates grid template areas in CSS. It supports constructing area specifications with the `areas` function and converting them to strings with `toString`. The primary data type is a polymorphic variant combining area definitions, CSS keywords, and variable references, enabling precise grid layout declarations. Use this module to define named grid areas in a type-safe way, directly mapping to CSS syntax for layout configuration.",
      "description_length": 459,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Filter",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS filter functions like blur, brightness, and drop shadow, each operating on specific CSS types such as length, percentage, angle, and color. It includes functions to convert filter values to strings, supporting direct use in CSS output or styling logic. Concrete use cases include generating CSS filter rules, manipulating visual effects in UI components, and applying dynamic styles based on user input or application state.",
      "description_length": 472,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Position",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type `t` representing CSS position values, including keywords like `top`, `center`, and `right`, as well as length and percentage types. It provides the `toString` function to convert these position values into their corresponding CSS string representations. Use this module when constructing or manipulating CSS position properties programmatically, such as in a CSS-in-OCaml library or a UI framework that generates styles dynamically.",
      "description_length": 479,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BaselineAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS baseline alignment values, including `baseline`, `firstBaseline`, and `lastBaseline`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS output or handling layout alignment in web rendering engines.",
      "description_length": 314,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskPosition",
      "library": "styled-ppx.native",
      "description": "This module handles CSS mask positioning with types and conversions for horizontal and vertical alignment, length units, and combined position values. It includes `toString` for full position strings and `hv_to_string` for formatted horizontal-vertical pairs, supporting keywords like `center`, `top`, and length-based values. The horizontal and vertical submodules define typed representations for alignment options, enabling type-safe construction of mask positions in style generation or configuration systems. You can use it to build precise, valid CSS mask position strings programmatically, combining keywords, lengths, and cascading values in a structured way.",
      "description_length": 667,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kloth.String",
      "library": "styled-ppx.native",
      "description": "This module provides direct access to string elements, measures string length, removes surrounding whitespace, and checks for prefix matches. It operates on the built-in `string` type and returns either a character, integer, boolean, or modified string. These functions are useful for parsing text, validating input formats, and preparing strings for further processing.",
      "description_length": 370,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Direction",
      "library": "styled-ppx.native",
      "description": "This module defines types and operations for handling text direction values in CSS, including left-to-right (`ltr`), right-to-left (`rtl`), and associated cascading and variable types. It provides direct constructors for `ltr` and `rtl`, and a conversion function `toString` that maps these direction values to their string representations. Use this module when working with CSS direction properties in a type-safe manner, such as in a CSS-in-OCaml library or style generator.",
      "description_length": 476,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaskImage",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS mask image values, which can be either `none` or an image, including various gradient types. It provides the `toString` function to convert these mask image values into their corresponding CSS string representations. Use this module when working with CSS mask images in OCaml, such as generating styles dynamically or manipulating gradient-based masks programmatically.",
      "description_length": 417,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaxHeight",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS `max-height` values, which can be either `none` or a specific height. It includes a `toString` function that converts these values into their string representations for use in CSS output. This module is used to handle and serialize valid `max-height` CSS property values directly in OCaml code.",
      "description_length": 342,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayBox",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS display box values, specifically `contents` and `none`, and provides the `toString` function to convert these values to their string representations. It works directly with polymorphic variants and strings. Use this module when handling CSS display properties where only these two values are valid.",
      "description_length": 346,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS.Stylesheet",
      "library": "styled-ppx.native",
      "description": "This module organizes CSS rules using hashed representations for efficient storage and retrieval, supporting dynamic style generation and updates in web applications. It provides core operations to create, add, retrieve, and clear rules, while its child module enables set-like manipulation of string collections using hash-based structures, supporting union, intersection, and functional transformations. Together, they allow managing unique style identifiers and applying declarative operations or sequence pipelines to string sets. For example, you can store CSS rules under unique hashes and use set operations to dynamically update or filter groups of style identifiers.",
      "description_length": 675,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ListStyleImage",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible values for the CSS `list-style-image` property, including images, gradients, and special keywords. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating valid CSS values for list item styling, such as setting custom bullet images or gradient effects.",
      "description_length": 395,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayListItem",
      "library": "styled-ppx.native",
      "description": "This module defines a single type `t` representing display list item values in CSS, with the only valid value being `` `listItem ``. It includes a function `toString` that converts this type to its corresponding string representation, such as \"list-item\". This module is used to safely handle and serialize CSS display properties related to list items.",
      "description_length": 352,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontDisplay",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates font display strategies, including values like `block`, `swap`, and `fallback`. It supports converting these strategies to their string representations via `toString`. Useful for specifying how fonts should render while loading in CSS-like configurations.",
      "description_length": 291,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AlignItems",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS alignment values, including standard keywords and alignment strategies. It supports operations to convert alignment values to their string representations for use in style declarations. Concrete use cases include specifying flex container alignment and handling CSS variable fallbacks in layout systems.",
      "description_length": 353,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontVariantEmoji",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type `t` representing CSS font-variant-emoji values, including options like `emoji`, `text`, and `unicode`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS font variant properties that control emoji rendering in stylesheets.",
      "description_length": 357,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.OverflowAnchor",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS overflow anchor values, including `auto`, `none`, and cascading keywords. It provides the `toString` function to convert these values to their string representations. Useful for generating or manipulating CSS styles programmatically, especially when working with overflow behavior in layout systems.",
      "description_length": 349,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontSynthesisWeight",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis weight values, including keywords like `auto`, `none`, and `var`, along with cascading and inherited values. It provides the `toString` function to convert these values into their string representations for use in CSS output. This module is used to handle font-weight synthesis options directly in CSS style declarations.",
      "description_length": 384,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationFillMode",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS animation fill mode values, including keywords like `forwards`, `backwards`, and `both`. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating valid CSS animation fill mode declarations from typed values.",
      "description_length": 339,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Height",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS height values, including keywords like `fitContent`, `minContent`, and `maxContent`, as well as length units and CSS variables. It provides the `toString` function to convert these height values into their string representations for use in CSS output. Concrete use cases include generating CSS styles dynamically, handling responsive height values, and integrating CSS variables into typed OCaml structures.",
      "description_length": 455,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverscrollBehavior",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type and `toString` function for handling CSS overscroll behavior values, including keywords like `contain`, `none`, and `auto`, as well as CSS variables and cascading values. It supports conversion of these values to their string representations for use in CSS output or runtime styling logic. Concrete use cases include generating CSS rules dynamically and managing scroll behavior in web applications.",
      "description_length": 432,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackgroundClip",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS background clip values, including keywords like `borderBox`, `paddingBox`, and `text`. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating valid CSS background-clip property values directly from OCaml code.",
      "description_length": 343,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Counter",
      "library": "styled-ppx.native",
      "description": "This module represents CSS counter styles for use in styling elements. It provides a `counter` function to create counter values with optional styling and a `toString` function to convert counter values to their string representation. It works with string identifiers and counter style types to generate valid CSS counter expressions for use in style sheets.",
      "description_length": 358,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CaretColor",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing valid values for the CSS `caret-color` property, including colors and the `auto` keyword. It provides a `toString` function that converts these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles programmatically, particularly for setting or serializing the `caret-color` property in a type-safe manner.",
      "description_length": 414,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.ColumnCount",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates values representing CSS `column-count` properties, supporting both fixed integer counts and special CSS keywords like `auto`. It provides a `toString` function to convert these values into their corresponding CSS string representations. Use cases include generating CSS rules dynamically or serializing style configurations for web rendering.",
      "description_length": 378,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextAlign",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing text alignment values in CSS, including standard keywords and special constructs like variables and cascading behavior. It provides a `toString` function to convert these alignment values into their corresponding CSS string representations. Use this module when working with CSS text alignment properties in OCaml, particularly for generating or manipulating CSS styles programmatically.",
      "description_length": 447,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LineHeight",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS line height values, including absolute numbers, predefined keywords, and length units. It provides the `toString` function to convert these line height values into their string representations for use in CSS output. Typical use cases include generating CSS styles dynamically, where line heights are expressed as numeric values, keywords like `normal`, or length units like `px` or `em`.",
      "description_length": 435,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.JustifyContent",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS `justify-content` values, including alignment options like `flexStart`, `spaceBetween`, and `center`. It provides the `toString` function to convert these alignment values into their corresponding CSS string representations. Use this module when constructing or manipulating CSS flexbox layout styles programmatically.",
      "description_length": 368,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationName",
      "library": "styled-ppx.native",
      "description": "Represents CSS animation names as a abstract type with conversion to and from strings. Provides `make` to construct an animation name from a string and `toString` to retrieve its string representation. Used to ensure type-safe handling of animation names in CSS rule definitions.",
      "description_length": 279,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GeometryBox",
      "library": "styled-ppx.native",
      "description": "This module defines types and values representing CSS geometry box keywords and related cascading values. It provides constructors for specific box types like `marginBox`, `borderBox`, and `viewBox`, along with a `toString` function to convert these values to their string representations. It is used to specify which box model to use in CSS properties like `background-clip` or `shape-margin`.",
      "description_length": 394,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundRepeat",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for handling CSS background repeat values, including single and two-value variants like `repeat`, `noRepeat`, `space`, and `round`. It supports operations to convert these values to strings, handling both direct and horizontal-vertical pair representations. Use cases include generating CSS rules for background repetition and managing cascading or variable values in style sheets.",
      "description_length": 421,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MinWidth",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS `min-width` values, including keywords, lengths, percentages, and variables. It provides the `toString` function to convert these values into their string representations for use in stylesheets. It handles specific CSS values like `auto`, `none`, `fit-content`, and units such as `px`, `em`, `rem`, and `percent`.",
      "description_length": 367,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Animation",
      "library": "styled-ppx.native",
      "description": "This module creates CSS animation shorthand values with customizable properties like duration, delay, direction, and timing function. It operates on CSS type representations such as `Time.t`, `AnimationDirection.t`, and related animation-specific types. Use it to programmatically define complex animation styles in a type-safe way for use in UI components.",
      "description_length": 357,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.CounterSet",
      "library": "styled-ppx.native",
      "description": "This module represents and manipulates CSS counter sets, supporting operations to define counters with optional values and convert them to string representations. It works with string identifiers and integers to specify counter names and values. Concrete use cases include generating CSS rules that control counter display, such as setting named counters to specific values within stylesheets.",
      "description_length": 393,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextJustify",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type and `toString` function for representing and converting CSS text justification values. It supports variants like `interWord`, `interCharacter`, and combinations with auto, none, and CSS variables. Use it to safely model and serialize CSS `text-justify` property values in type-safe OCaml code.",
      "description_length": 326,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ListStylePosition",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS list-style-position values, including variants for `inside`, `outside`, and support for CSS variables and cascading keywords. It provides the `toString` function to convert these values into their string representations for use in CSS output. This module is used to handle and generate valid CSS `list-style-position` property values in a type-safe manner.",
      "description_length": 406,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS background origin values, including standard keywords and dynamic values like CSS variables. It provides the `toString` function to convert these values into their string representations for use in stylesheets. Commonly used when generating or manipulating CSS properties related to background positioning in web development.",
      "description_length": 375,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TableLayout",
      "library": "styled-ppx.native",
      "description": "This module defines the table layout algorithms supported in CSS, including fixed and auto layouts, along with cascading and variable values. It provides a `toString` function to convert these layout values to their string representations for use in style rules. Concrete use cases include specifying table layout behavior in CSS-in-JS libraries or style generators.",
      "description_length": 366,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TransformOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS transform origin values, supporting keywords like `left`, `center`, and `right`, as well as length units and special values. It includes a `toString` function that converts these values into their string representations for use in CSS output. Concrete use cases include generating CSS styles for element transformations and handling responsive design units in style declarations.",
      "description_length": 440,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Counters",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS counter styles, specifically handling the `counters` function. It supports creating counter values with a name, separator, and optional style, and converting them to their string representation. Concrete use cases include generating styled counter outputs for CSS rules, such as list numbering or section headers with custom separators.",
      "description_length": 397,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TouchAction",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS touch action values, including directional gestures and zooming. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use this module when generating or manipulating CSS touch action properties programmatically.",
      "description_length": 323,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ListStyleType",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS list style types, including keywords like `disc`, `circle`, and `decimal`, as well as support for custom values via `var` and `none`. It provides a `toString` function that converts these variants to their corresponding CSS string representations. Useful for generating or manipulating CSS styles programmatically, especially when working with list styling in web development.",
      "description_length": 440,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontWeight",
      "library": "styled-ppx.native",
      "description": "This module defines font weight values as polymorphic variants, including numeric and keyword styles, and provides constants for common weights like `bold`, `light`, and `medium`. It includes a `toString` function to convert these variants into their corresponding CSS string representations. Use this module to specify and manipulate font weights in CSS generation or styling libraries.",
      "description_length": 387,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Image",
      "library": "styled-ppx.native",
      "description": "This module defines an image type that can represent URLs or various gradient types like linear, radial, and conic gradients, with support for repeating patterns. It provides a `toString` function to convert these image values into their corresponding CSS string representations. Use this module when constructing CSS images dynamically, such as generating gradient backgrounds or referencing external image resources.",
      "description_length": 418,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Hyphens",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS hyphenation options, including manual control, automatic hyphenation, and special values like `none` or `var`. It provides the `toString` function to convert these hyphenation values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that involve hyphenation settings in a type-safe manner.",
      "description_length": 415,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Length",
      "library": "styled-ppx.native",
      "description": "This module provides unit-aware constructors and arithmetic operations for CSS length values, represented via polymorphic variants encompassing standard units like pixels, ems, and viewport dimensions, along with calc expressions for dynamic computations. It supports converting these values to strings, enabling type-safe stylesheet generation, responsive layout implementations, and handling complex CSS calculations programmatically.",
      "description_length": 436,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Border",
      "library": "styled-ppx.native",
      "description": "Converts border width, style, and color values into a CSS string representation. Works with length units like `px`, `em`, and `percent`, border styles like `solid` and `dashed`, and color values. Useful for generating inline CSS or dynamic styles in OCaml applications.",
      "description_length": 269,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Array",
      "library": "styled-ppx.native",
      "description": "This module provides operations for transforming and aggregating array elements. It supports reduction, mapping, filtered mapping, and string concatenation over arrays. Use cases include processing collections of values, converting data formats, and generating delimited string outputs from structured data.",
      "description_length": 307,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OverflowWrap",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS overflow-wrap properties, including values like `normal`, `breakWord`, and `anywhere`. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating CSS styles dynamically in OCaml applications.",
      "description_length": 321,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.DisplayInternal",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS display values for table-related elements, such as rows, columns, and captions. It includes a function to convert these variants into their corresponding string representations. Useful for generating or manipulating CSS styles targeting table layouts programmatically.",
      "description_length": 332,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AnimationIterationCount",
      "library": "styled-ppx.native",
      "description": "This module defines an animation iteration count type that supports finite counts, infinite loops, and CSS variable references. It includes a conversion function to string for rendering CSS values. Useful for specifying how many times a CSS animation should repeat in a type-safe manner.",
      "description_length": 287,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Cursor",
      "library": "styled-ppx.native",
      "description": "This module provides type-safe constructors for defining CSS cursor values, including standard keywords and browser-specific variants, using extensible variants to ensure correctness in style declarations. It supports operations to create cursor types like resize directions or zoom actions and includes a function to convert these values into their corresponding CSS string representations. The extensible type system allows flexible handling of cursor styles in web applications, accommodating both common and custom cursor behaviors across different browsers.",
      "description_length": 562,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.PropertyPosition",
      "library": "styled-ppx.native",
      "description": "This module defines types and values for CSS position properties, including standard keywords like `absolute`, `relative`, and `fixed`, as well as support for variables and cascading values. It provides a `toString` function to convert these position values to their string representations. Useful for generating or manipulating CSS position declarations programmatically.",
      "description_length": 372,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Animation",
      "library": "styled-ppx.native",
      "description": "This module defines data structures and functions for working with CSS animation properties. It provides a record type to specify animation parameters like duration, delay, direction, and timing function, along with a sum type to represent either a concrete animation value, a CSS variable, or special keywords like `none`. The `make` function allows building animations with optional fields, and `toString` converts values to their CSS string representation for rendering styles.",
      "description_length": 480,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisPosition",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis position values, including auto, none, var, and cascading options. It provides the `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules that control font synthesis behavior in stylesheets.",
      "description_length": 347,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.StrokeDashArray",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing stroke dash array values in CSS, including lengths, variables, and cascading keywords. It provides the `toString` function to convert these values into their string representation for use in stylesheets. Use cases include generating CSS stroke-dasharray properties dynamically from OCaml code.",
      "description_length": 337,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Shadow",
      "library": "styled-ppx.native",
      "description": "This module constructs and manipulates CSS shadow values for both box and text shadows. It supports creating shadows with customizable x/y offsets, blur radius, spread, inset flag, and color, with separate functions for box and text shadow types. It is used to generate valid CSS shadow strings for styling elements in web development.",
      "description_length": 335,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MaxWidth",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type for representing CSS `max-width` values, including keywords, length units, and variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles dynamically, validating width constraints, and integrating with CSS-in-JS libraries.",
      "description_length": 364,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LineWidth",
      "library": "styled-ppx.native",
      "description": "This module defines a type for line widths that includes both fixed lengths and keywords like `thin`, `medium`, and `thick`. It provides a `toString` function that converts these line width values into their string representations for use in CSS output. It is used to specify border or outline thicknesses directly in style definitions.",
      "description_length": 336,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.JustifySelf",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type `t` representing CSS `justify-self` values, including keywords like `normal`, `stretch`, and alignment types. It provides the `toString` function to convert these values to their string representations for use in CSS output. Concrete use cases include generating inline styles or CSS classes that control individual item alignment within CSS Grid or Flexbox layouts.",
      "description_length": 413,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TextOverflow",
      "library": "styled-ppx.native",
      "description": "This module defines and converts text overflow values like `clip`, `ellipsis`, and custom strings to their string representations. It handles CSS-specific types including variables, cascading values, and standard keywords. Use it to generate valid CSS text overflow declarations or manipulate overflow behavior in a type-safe way.",
      "description_length": 330,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Clear",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS `clear` property values, including keywords like `left`, `right`, and `both`, as well as support for variables and cascading values. It provides the `toString` function to convert these values into their string representations for use in CSS output. It is used when generating or manipulating CSS rules that control element wrapping and layout flow around floated elements.",
      "description_length": 423,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.GridAutoFlow",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS Grid's auto-flow property values, including row, column, and dense packing options. It supports operations to convert these values to their string representations for use in CSS output. Concrete use cases include generating CSS classes that control grid item placement behavior in layout systems.",
      "description_length": 346,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.AlignContent",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for CSS `align-content` property values, supporting variants like `center`, `flexStart`, `spaceBetween`, and more. It includes a `toString` function that converts these alignment values to their corresponding CSS string representations. Use this module to programmatically generate CSS styles for flex container layout alignment.",
      "description_length": 369,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.DisplayOld",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS display values, including legacy and vendor-specific options. It provides a `toString` function to convert these display values to their string representations. Use this type to safely model and serialize CSS display properties in a type-safe manner.",
      "description_length": 314,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TransformStyle",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS transform style values, including `preserve3d`, `flat`, and cascading keywords. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful when generating or manipulating CSS transform styles programmatically.",
      "description_length": 324,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.PointerEvents",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS pointer-events values, including standard keywords and var/inheriting types. It provides a `toString` function to convert these values to their string representations for use in CSS output. Concrete use cases include generating CSS rules that control element interactivity, such as disabling clicks or defining hit regions for SVG elements.",
      "description_length": 404,
      "index": 120,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Css_types.DisplayInside",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing layout display modes such as `table`, `flex`, and `grid`. It includes a function `toString` that converts these display values to their string representations. This is useful for generating CSS output or dynamically constructing class names based on layout types in a type-safe manner.",
      "description_length": 345,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Float",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS float values, including positional and contextual keywords. It provides a `toString` function to convert these values into their string representations for use in CSS output. Concrete use cases include generating CSS rules with float properties like `left`, `right`, or `inlineStart` in a type-safe manner.",
      "description_length": 370,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontVariantPosition",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing font variant position values, including normal, sub, super, and support for CSS variables and cascading keywords. It provides a `toString` function to convert these values into their corresponding CSS string representations. Use this module when working with CSS font variant position properties in OCaml, such as setting or manipulating `font-variant-position` styles programmatically.",
      "description_length": 434,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Int",
      "library": "styled-ppx.native",
      "description": "Converts integers to their string representations. Works with the built-in `int` type. Useful for displaying numeric results or serializing integer values for output or logging.",
      "description_length": 177,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.AlphaValue",
      "library": "styled-ppx.native",
      "description": "This module represents CSS alpha values, supporting numeric, percentage, variable, and cascading keyword types. It provides a `toString` function to convert these values into their string representation for use in stylesheets. Commonly used for generating CSS opacity or alpha channel values dynamically.",
      "description_length": 304,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Cascading",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS cascade keywords like `initial`, `inherit_`, and `unset`, along with corresponding value constructors. It provides a `toString` function to convert these values into their string representations. Use this module when handling CSS property inheritance and cascading behavior programmatically, such as in a CSS parser or style engine.",
      "description_length": 396,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing valid CSS text decoration styles, including constants like `solid`, `dashed`, and `wavy`, as well as support for variables and cascading values. It provides the `toString` function to convert these style values into their corresponding CSS string representations. Use this module when generating or manipulating CSS text decoration styles programmatically, such as in a CSS-in-OCaml library or style generator.",
      "description_length": 454,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Option",
      "library": "styled-ppx.native",
      "description": "This module provides functions for handling optional values with default fallbacks and transformation. It operates on the standard `'a option` type, allowing safe extraction of values or mapping over them with custom functions. Use cases include safely accessing configuration values, transforming optional data fields, or providing fallbacks for missing user input.",
      "description_length": 366,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Alias.Transition",
      "library": "styled-ppx.native",
      "description": "Creates a CSS transition shorthand value with optional duration, delay, and timing function. Works with string properties and transition-specific CSS types. Useful for defining concise transitions in style sheets.",
      "description_length": 213,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontFamilyName",
      "library": "styled-ppx.native",
      "description": "Represents font family names as strings and provides a function to convert them into string values. Works directly with string data to handle font identifiers in CSS-related contexts. Useful for generating or manipulating CSS font declarations programmatically.",
      "description_length": 261,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontOpticalSizing",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font optical sizing values, including auto, none, var, and cascading options. It provides the `toString` function to convert these values into their string representations for use in CSS output. This module is used to handle font-optical-sizing property values in a type-safe manner when generating or manipulating CSS styles.",
      "description_length": 374,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declarations.SVG",
      "library": "styled-ppx.native",
      "description": "This module defines functions to set SVG fill and stroke properties, including color, opacity, and line styles. It operates on color types like `Css_types.Color.t`, length types like `Css_types.Length.t`, and rule types like `Rule.rule`. Use it to style SVG elements with precise control over visual attributes like gradients, dashed lines, and color blending.",
      "description_length": 360,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FlexWrap",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS flex-wrap properties, including standard values like `wrap`, `nowrap`, and `wrapReverse`, as well as support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS flexbox layout styles programmatically.",
      "description_length": 405,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth.Float",
      "library": "styled-ppx.native",
      "description": "Converts a floating-point number to its string representation. Works directly with `float` values. Useful for formatting numerical output or preparing data for serialization.",
      "description_length": 174,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.DisplayOutside",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS display outside values, including `block`, `inline`, and `runIn`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS styles where precise control over element layout is required.",
      "description_length": 294,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias.Calc",
      "library": "styled-ppx.native",
      "description": "This module defines arithmetic operations for constructing calculation expressions using polymorphic variants. It supports addition, subtraction, and multiplication, each returning a tagged expression representing the operation and its operands. These expressions can be used for symbolic manipulation, code generation, or deferred evaluation in domain-specific languages.",
      "description_length": 372,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BorderCollapse",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS border collapse properties, supporting values like `collapse` and `separate`. It includes a function to convert these values to their string representations. Useful for generating CSS styles where border merging behavior needs to be explicitly set.",
      "description_length": 298,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Calc",
      "library": "styled-ppx.native",
      "description": "This module handles conversion of CSS calc expressions and min/max value arrays to strings, using provided serialization functions. It supports operations like addition, subtraction, multiplication, division, and nesting of min/max expressions within calculations. Useful for generating CSS property values dynamically from OCaml data structures.",
      "description_length": 346,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.CounterIncrement",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS counter increment values, including primitives like `none`, `var`, and `increment` with a string identifier and integer step. It provides the `increment` function to create counter increment values with an optional step, and `toString` to convert these values into their CSS string representation. Use this module to construct and manipulate CSS counter styles for generating ordered content in stylesheets programmatically.",
      "description_length": 472,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.PerspectiveOrigin",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` that represents possible values for the `perspective-origin` CSS property, combining various length units, keywords, and cascading values. It includes a `toString` function that converts these values into their string representations for use in CSS output. Use cases include generating valid CSS strings for perspective origin settings in 3D transformations.",
      "description_length": 389,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationSkipInk",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing possible values for the CSS `text-decoration-skip-ink` property, including keywords like `all`, `auto`, and `none`, as well as cascading and custom variable values. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that involve controlling text decoration rendering around text glyphs.",
      "description_length": 451,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.NormalAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a single type `t` representing normal alignment in CSS, with a value `toString` that converts the alignment value to its string representation. It works with polymorphic variant types restricted to the `normal` constructor. A concrete use case is generating valid CSS alignment strings from OCaml values.",
      "description_length": 324,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BorderStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS border styles, including standard values like `solid`, `dashed`, and `dotted`, as well as special cases like `var` and `inherit`. It provides the `toString` function to convert these style values into their corresponding CSS string representations. Use this module when generating or manipulating CSS border style values directly in OCaml code.",
      "description_length": 408,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontVariant",
      "library": "styled-ppx.native",
      "description": "This module defines font variant values like `normal` and `smallCaps`, along with cascading and variable font support. It provides functions to construct and convert these values to strings for CSS output. Use it to specify font styling in CSS generation or manipulation tasks.",
      "description_length": 277,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.SVG",
      "library": "styled-ppx.native",
      "description": "This module provides types and operations for defining SVG fill properties, including solid colors, context-based fills, and URL-based pattern references. Key data types represent different fill strategies, and operations include constructors like `contextFill` and `contextStroke` for creating dynamic fill values. A `toString` function converts fill values into their corresponding string representations for SVG output. For example, users can define a fill using a direct color value or reference a gradient defined elsewhere in the SVG document.",
      "description_length": 549,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundSize",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for working with CSS background size values, including keywords like `cover`, `contain`, and `auto`, as well as explicit size pairs using length units. It provides a `toString` function that converts these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS background size declarations programmatically.",
      "description_length": 404,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.FontStyle",
      "library": "styled-ppx.native",
      "description": "This module defines types and values for representing CSS font styles, including `normal`, `italic`, and `oblique`, along with cascading and variable value handling. It provides functions to convert these font style values to their string representations. Useful for generating or manipulating CSS style rules directly in OCaml code.",
      "description_length": 333,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LetterSpacing",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates CSS letter spacing values, supporting constants like `normal`, length-based values, and CSS variables. It provides a `toString` function to convert these values into their string representations for use in stylesheets. Concrete use cases include setting letter spacing in UI components, dynamically generating CSS classes, and handling responsive design values.",
      "description_length": 397,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ClipPath",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS clip-path values, including keywords like `none`, `url`, and geometry box values. It provides the `toString` function to convert these values into their string representations for use in CSS styling. Concrete use cases include generating CSS rules for clipping elements based on shapes, SVG paths, or layout boxes.",
      "description_length": 362,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationSkipInset",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS `text-decoration-skip-inset` values, including keywords like `none`, `auto`, and `var`, along with cascading and custom value handling. It provides the `toString` function to convert these values into their string representation for use in CSS output or styling logic. Concrete use cases include generating CSS rules dynamically and managing text decoration styles in UI components.",
      "description_length": 430,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontFace",
      "library": "styled-ppx.native",
      "description": "Handles font face sources in CSS, supporting both URL references and local font names. Converts font face values to their string representations for use in stylesheets. Useful when generating or manipulating CSS rules that reference custom fonts.",
      "description_length": 246,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Gap",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS gap values, including keywords, percentages, lengths, and variables. It provides a `toString` function to convert these values into their string representations for use in CSS output. Use cases include generating CSS styles with dynamic gap values for layout systems like Flexbox or Grid.",
      "description_length": 336,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisPosition",
      "library": "styled-ppx.native",
      "description": "This module handles text emphasis positioning in CSS by providing types and conversion functions for both vertical (`over`, `under`) and horizontal (`left`, `right`) positions. It supports CSS variables and cascading keywords, allowing for flexible style definitions. The `toString` function serializes these values into valid CSS strings. Example use cases include generating dynamic CSS styles for text emphasis alignment and position in OCaml-based web tooling.",
      "description_length": 464,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Isolation",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS isolation values, including `auto` and `isolate`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS output or configuring isolation settings in a type-safe manner.",
      "description_length": 280,
      "index": 154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.OverflowInline",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing inline overflow behavior in CSS, including variants like `hidden`, `visible`, `scroll`, and `clip`, along with support for auto, variable, and cascading values. It provides the `toString` function to convert these values to their string representations for use in CSS output. Concrete use cases include generating inline overflow styles in CSS-in-OCaml libraries or validating CSS property values at the type level.",
      "description_length": 461,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Time",
      "library": "styled-ppx.native",
      "description": "This module defines data types and operations for representing and manipulating time values in CSS-compatible formats, specifically seconds (`s`) and milliseconds (`ms`). It supports complex time calculations through a `calc_value` type that allows addition, subtraction, multiplication, division, and nesting of time values with min/max aggregations. Functions convert these time expressions into string representations suitable for use in CSS stylesheets.",
      "description_length": 457,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Perspective",
      "library": "styled-ppx.native",
      "description": "This module handles CSS perspective values, supporting operations to convert various length units and special keywords to their string representations. It works with types representing CSS lengths, constants like `none`, and variable references. Use it to generate CSS strings for perspective transformations, such as `perspective(500px)` or `perspective(var(--depth))`.",
      "description_length": 370,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Flex",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS flex values, including `auto`, `initial`, and `none`. It provides the `toString` function to convert these values to their string representations. Useful for generating CSS output or configuring layout properties in a type-safe manner.",
      "description_length": 285,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Overflow",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS overflow values, including `hidden`, `visible`, `scroll`, `auto`, and `clip`. It provides constructors for each value and a function to convert them to their string representation. Use this module when generating or manipulating CSS styles that require specifying overflow behavior for elements.",
      "description_length": 359,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FontSynthesisStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS font synthesis style values, including keywords like `auto`, `none`, and `var`, along with cascading and inherited values. It provides the `toString` function to convert these values into their string representations for use in CSS output or debugging. Concrete use cases include generating CSS rules dynamically and handling font-related style computations in a type-safe way.",
      "description_length": 425,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Angle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing angles in different units\u2014degrees, radians, gradians, and turns\u2014and provides constructors for each unit. It includes a function to convert these angle values into their string representations. Concrete use cases include formatting angle measurements for CSS output or user-facing displays.",
      "description_length": 349,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.Color",
      "library": "styled-ppx.native",
      "description": "This module converts between RGB, HSL, and hex color models, mixes colors using interpolation in polar or rectangular color spaces, and handles components like angles, percentages, and alpha values with CSS `calc`/`min`/`max` expressions. It supports special values such as `transparent`, `currentColor`, and dynamic color adjustments for hue and saturation. Typical applications include generating CSS style rules, blending UI themes, or implementing design tools requiring precise color transformations.",
      "description_length": 505,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TimingFunction",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for CSS timing functions, including standard keywords like `linear`, `ease`, and `step` variants, as well as cubic B\u00e9zier curves and CSS variables. It allows constructing and converting timing function values to their string representations, supporting precise control over animation pacing in user interfaces. Use cases include defining animation curves in CSS-in-OCaml libraries and generating valid CSS output for transitions and keyframes.",
      "description_length": 483,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.BackgroundAttachment",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS background attachment values, including variants like `scroll`, `fixed`, and `local`, along with support for CSS variables and cascading behavior. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS background attachment properties programmatically.",
      "description_length": 410,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Var",
      "library": "styled-ppx.native",
      "description": "This module represents CSS custom property references with two forms: simple variables and variables with fallback defaults. It provides constructors for creating variable expressions and a function to convert them to their string representation in CSS syntax. Useful for generating CSS rules that use dynamic values with optional fallbacks.",
      "description_length": 341,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AlignSelf",
      "library": "styled-ppx.native",
      "description": "This module defines the `AlignSelf` type and conversion functions for CSS alignment values. It supports variants like `normal`, `stretch`, and combinations of positional, overflow, and baseline alignments, including auto and custom CSS variables. Use it to represent and convert CSS `align-self` property values directly into strings for styling layouts.",
      "description_length": 354,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextEmphasisStyle",
      "library": "styled-ppx.native",
      "description": "This module combines core types and conversions for CSS text emphasis styles with support for both primitive shapes and theme-aware styling. It provides a unified type `t` that captures keywords like `filled`, `open_`, and shape primitives such as `dot`, `circle`, and `triangle`, along with operations to convert these to CSS strings. It also handles variable-based values for dynamic styling, enabling direct generation of CSS declarations like `text-emphasis-style: filled circle` or `text-emphasis-style: var(--emphasis)`. Together with its submodules, it offers a complete interface for defining, transforming, and outputting text emphasis styles in web styling contexts.",
      "description_length": 676,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.AspectRatio",
      "library": "styled-ppx.native",
      "description": "This module defines an aspect ratio type that supports numeric values, ratios, and CSS keywords like `auto` and `var`. It includes a function to convert these values to their string representation for use in CSS output. Commonly used for specifying or serializing aspect ratios in CSS-in-OCaml libraries.",
      "description_length": 304,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.OutlineStyle",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS outline styles, including values like `solid`, `dashed`, and `auto`. It provides a `toString` function to convert these style values to their string representations. Use this type to safely model and manipulate CSS outline-style property values in OCaml.",
      "description_length": 318,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationLine",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS text decoration lines, including values like `underline`, `overline`, `lineThrough`, and `blink`. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS text decoration styles programmatically.",
      "description_length": 367,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Display",
      "library": "styled-ppx.native",
      "description": "Converts display property values to their string representations. Works with polymorphic variant types representing CSS display values. Useful for generating CSS output or debugging layout configurations.",
      "description_length": 204,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.RepeatValue",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS repeat values like `autoFit`, `autoFill`, and `num` for grid layouts. It includes a function `toString` that converts these values into their string representations for use in CSS output. Useful for generating responsive CSS grid templates dynamically based on layout logic.",
      "description_length": 322,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextAlignLast",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing possible values for text alignment in CSS, including standard keywords and special cases like `var` and `matchParent`. It provides a `toString` function that converts these alignment values to their string representations for use in CSS output. This module is used to safely model and serialize text alignment properties in CSS-in-OCaml libraries.",
      "description_length": 407,
      "index": 173,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TransformBox",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS transform box values, including standard keywords and support for CSS variables and cascading behavior. It provides a `toString` function to convert these values to their string representations, handling both fixed variants and dynamic values like variables with fallbacks. Use this type to safely model and serialize transform box properties in CSS-in-OCaml libraries or style generators.",
      "description_length": 453,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.MinHeight",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type as an alias for `Css_types.Height.t` and includes a `toString` function that converts values of this type to strings. It works with CSS height values, such as lengths, percentages, or auto. Use this module when generating CSS output that requires min-height properties based on those values.",
      "description_length": 324,
      "index": 175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.FlexBasis",
      "library": "styled-ppx.native",
      "description": "This module defines types and values representing CSS `flex-basis` properties, including keywords like `fill`, `content`, and `fitContent`. It provides direct mappings to CSS flexbox behavior, enabling precise control over the initial size of flex items. Use this module to specify how elements should size along the main axis in a flex container, directly translating to styles in a type-safe way.",
      "description_length": 398,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ObjectFit",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS object-fit values, including standard keywords and scalable options. It provides a `toString` function to convert these values into their string representations for use in CSS output. Use this module when generating or manipulating CSS object-fit properties dynamically in OCaml code.",
      "description_length": 334,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Content",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing CSS content values, including keywords, text, counters, images, and gradients. It provides a `toString` function to convert these values to their string representations, handling complex cases like gradients and counter styles. Use this module when generating or manipulating CSS content properties programmatically, such as in a CSS-in-OCaml library or a stylesheet generator.",
      "description_length": 437,
      "index": 178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.TabSize",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` representing CSS tab size values, including numeric values, lengths, and CSS variables. It provides a `toString` function that converts these values into their string representations for use in CSS stylesheets. Use cases include generating CSS rules dynamically, where tab sizes are specified using various CSS units or variables.",
      "description_length": 361,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.LegacyAlignment",
      "library": "styled-ppx.native",
      "description": "This module defines a variant type representing legacy alignment options and provides a function to convert these alignment values to their string representations. It works with polymorphic variant types restricted to specific alignment tags. Use this module when serializing alignment constants to strings, such as for generating CSS output or debugging alignment values.",
      "description_length": 372,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BoxSizing",
      "library": "styled-ppx.native",
      "description": "This module defines types and conversions for CSS box sizing values, including standard keywords and custom CSS variables. It provides the `toString` function to convert these values into their string representations for use in CSS output. Useful for generating CSS styles where box model behavior needs to be explicitly controlled.",
      "description_length": 332,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Transform",
      "library": "styled-ppx.native",
      "description": "This module provides operations to construct and manipulate CSS transformations using a polymorphic variant type that supports translation, rotation, scaling, skewing, and perspective. It works with lengths, angles, and floats to build these transformations, which can then be converted into CSS-compatible string representations. This enables generating dynamic CSS transform values programmatically for web development purposes.",
      "description_length": 430,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Url",
      "library": "styled-ppx.native",
      "description": "This module represents URLs as a single variant type and provides a function to convert the URL value back to a string. It works directly with string values wrapped in a polymorphic variant. Use this module when handling CSS URLs to maintain type safety and easily extract string representations.",
      "description_length": 296,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.ZIndex",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type `t` representing CSS z-index values, including auto, numeric values, and special keywords. It provides the `toString` function to convert these values into their corresponding CSS string representations. Useful for generating CSS styles dynamically where z-index layering is required, such as in UI frameworks or style generators.",
      "description_length": 377,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.VerticalAlign",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing vertical alignment values, including standard keywords and CSS length units. It provides a `toString` function to convert these alignment values into their corresponding CSS string representations. Use this module when working with CSS vertical alignment properties in OCaml, such as setting `vertical-align` styles in a type-safe manner.",
      "description_length": 398,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextAlignAll",
      "library": "styled-ppx.native",
      "description": "This module defines a polymorphic variant type representing text alignment values in CSS, including standard keywords and special constructs like variables and cascading behavior. It provides a `toString` function to convert these alignment values to their string representations for use in CSS output. Concrete use cases include generating CSS rules for text alignment properties and handling dynamic or computed styles in a type-safe manner.",
      "description_length": 443,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.CounterReset",
      "library": "styled-ppx.native",
      "description": "This module defines a type `t` for CSS counter reset values, supporting variants like `reset` with a name and value, `none`, and CSS variables. It includes functions to create `reset` values with an optional integer and convert these values to their string representation. Concrete use cases include generating CSS rules that manipulate counter display in stylesheets, such as resetting a counter to a specific value before a section of content.",
      "description_length": 445,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.TextDecorationThickness",
      "library": "styled-ppx.native",
      "description": "This module defines and manipulates values representing the thickness of text decorations in CSS. It supports variants such as keyword values (`fromFont`, `auto`), length units (`px`, `em`, `rem`, etc.), and special constructs like `var`, `inherit`, and `calc`. Use it to specify or serialize text decoration thickness values directly in CSS style declarations.",
      "description_length": 361,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.BackfaceVisibility",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type representing CSS backface visibility values, including standard keywords and cascading behavior. It provides the `toString` function to convert these values into their string representations for use in CSS output. Use this module when generating or manipulating CSS rules that control backface visibility in 3D transformations.",
      "description_length": 360,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.Gradient",
      "library": "styled-ppx.native",
      "description": "This module defines types and functions for constructing and converting CSS gradient values to strings. It supports linear, radial, and conic gradients with directional, shape, size, and color stop configurations. Use cases include generating CSS gradient strings for styling elements in a type-safe manner within a UI framework.",
      "description_length": 329,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types.None",
      "library": "styled-ppx.native",
      "description": "Represents the CSS `none` keyword value. Provides a type-safe way to handle properties that explicitly require `none` (e.g., `display: none`, `border: none`). The `toString` function converts the value to its string representation for rendering in CSS output.",
      "description_length": 259,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_types.LineBreak",
      "library": "styled-ppx.native",
      "description": "This module defines the `t` type to represent CSS line-break property values, including keywords like `loose`, `normal`, and `strict`, and supports custom values via `var` and cascading behavior. It provides the `toString` function to convert these values into their corresponding CSS string representations. Use this module when generating or manipulating CSS styles that require precise control over line breaking behavior in text layout.",
      "description_length": 440,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CSS",
      "library": "styled-ppx.native",
      "description": "This module enables programmatic construction and manipulation of CSS rules with type-safe structures like `Rule.rule` and `Css_types.Color.t`, supporting advanced features such as flexbox, grid, animations, and media queries. It organizes rules using hashed representations for efficient dynamic style management, allowing creation, retrieval, and transformation of styles through set-like operations on string collections. You can generate unique style identifiers, apply functional pipelines to filter or combine style sets, and integrate CSS variables and gradients into type-checked stylesheets. It supports dynamic updates in web applications by combining layout, typography, and visual effects with efficient rule storage and declarative set manipulation.",
      "description_length": 762,
      "index": 193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colors",
      "library": "styled-ppx.native",
      "description": "This module provides direct access to a comprehensive set of predefined CSS color constants, covering standard color names like red, blue, and green, as well as specialized hues such as deeppink, turquoise, and darkred. These values are represented as instances of `Css_types.Color.t`, enabling seamless integration into web or UI styling workflows within OCaml-based applications. By offering ready-to-use color literals, it simplifies the application of consistent and semantically meaningful colors in rendering or styling contexts.",
      "description_length": 535,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autoprefixer",
      "library": "styled-ppx.native",
      "description": "This module generates CSS vendor prefixes for properties and values, applying transformations like `-webkit-`, `-moz-`, and `-ms-` to style rules. It operates on strings representing CSS properties and values, along with arrays of transformation functions and CSS rules. It is used to ensure cross-browser compatibility by automatically adding vendor-prefixed versions of CSS rules during preprocessing.",
      "description_length": 403,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_types",
      "library": "styled-ppx.native",
      "description": "This collection of modules provides a comprehensive set of types and operations for representing and serializing CSS property values. Each module defines a core type `t` as a polymorphic variant or simple type representing a specific CSS value domain\u2014such as colors, lengths, alignment, transitions, and layout properties\u2014along with a `toString` function to convert these values into valid CSS strings. These modules enable precise, type-safe construction and manipulation of CSS styles programmatically, supporting use cases like CSS-in-JS libraries, style generators, and dynamic styling systems. Examples include constructing transitions with custom timing functions, defining grid layouts with typed area identifiers, or serializing font synthesis options directly into CSS rules.",
      "description_length": 784,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declarations",
      "library": "styled-ppx.native",
      "description": "This module generates type-safe CSS rules for styling HTML elements, combining layout, alignment, text formatting, and visual effects with support for responsive design, animations, and reusable components. It uses variant types and typed CSS representations\u2014such as `Css_types.Color.t`, `Css_types.Length.t`, and `Rule.rule`\u2014to ensure valid syntax and provide operations like setting flexbox grids, applying gradients, and defining typographic styles. A child module extends this system to SVG styling, enabling precise control over fill, stroke, line styles, and color blending on vector graphics. Examples include building responsive layouts with `display: grid`, animating transitions with typed keyframes, and styling SVG paths with dashed strokes and gradient fills.",
      "description_length": 772,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Alias",
      "library": "styled-ppx.native",
      "description": "This module provides type-safe constructors for CSS styling values such as lengths, colors, gradients, and transforms, along with layout properties like alignment, flexbox, and grid. It ensures compile-time correctness through abstract types and polymorphic variants, enabling the creation of typed DSLs for animation, sizing, and text formatting. Child modules extend this foundation with specific capabilities: constructing shadows with customizable offsets and blur, defining animation shorthand with duration and timing, creating transitions with delay and easing, and building calculation expressions using arithmetic operations. Examples include styling UI components with drop shadows, defining interactive cursor behaviors, and generating responsive layouts with typed, composable animations and transitions.",
      "description_length": 816,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rule",
      "library": "styled-ppx.native",
      "description": "This module defines operations for constructing and manipulating CSS-like rules, supporting the creation of declarations and selectors with nested rules. It works with a custom `rule` type that represents either a key-value declaration or a selector with an array of nested rules. Functions like `declaration`, `selector`, and `media` enable building structured stylesheets, while utilities like `camelCaseToKebabCase` and `explode` assist in formatting property names and string manipulation.",
      "description_length": 493,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kloth",
      "library": "styled-ppx.native",
      "description": "This module provides utilities for string manipulation, array processing, and value conversion. It includes functions to access and transform string elements, reduce and map arrays, convert integers and floats to strings, and handle optional values with fallbacks. For example, you can trim whitespace from a string, format a float for output, or safely extract a default value from an optional field.",
      "description_length": 401,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "String_interpolation",
      "library": "styled-ppx.string-interpolation",
      "description": "Performs string interpolation by replacing placeholders in a string with corresponding values. Works with OCaml string literals and generates expression syntax trees for embedded values. Useful for generating formatted output strings with dynamic content during preprocessing.",
      "description_length": 276,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Parser.StringMap",
      "library": "styled-ppx.css-property-parser",
      "description": "This module manipulates string-keyed maps with arbitrary value types, offering dictionary operations like insertion, deletion, and merging, alongside list-specific utilities such as `add_to_list` for appending values. It supports functional transformations\u2014including ordered traversal, filtering, folding, and searching (first/last matches)\u2014over structured key-value pairs, enabling efficient aggregation and ordered processing. Use cases include managing CSS properties with multiple values, converting between maps and sequences for serialization, and maintaining insertion order during iterative transformations.",
      "description_length": 615,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Match",
      "library": "styled-ppx.css-property-parser",
      "description": "This module provides functions for composing and manipulating parsing rules that process CSS property values. It supports operations like mapping, binding, and combining multiple rules to match and transform structured input. Concrete use cases include parsing and validating CSS values such as colors, lengths, and custom property syntax.",
      "description_length": 339,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Data",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for CSS property values, focusing on sequencing and transforming parse results. It works with generic parser types that produce `Css_property_parser.Rule.data` values, enabling precise handling of CSS syntax. Concrete use cases include parsing nested CSS expressions, combining token streams, and selecting shortest or longest matching subexpressions in ambiguous grammars.",
      "description_length": 415,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Rule.Let",
      "library": "styled-ppx.css-property-parser",
      "description": "This module implements parser combinators for CSS property rules, providing binding and mapping operations over rule data and match results. It works with generic parser rule types `'a Css_property_parser.Rule.data` and match values `'a`, enabling composition of CSS parsing logic. Concrete use cases include chaining CSS value parsers, transforming parsed data, and selecting shortest or longest match results in rule evaluation.",
      "description_length": 430,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Parser.Types",
      "library": "styled-ppx.css-property-parser",
      "description": "This module defines a polymorphic variant type representing various legacy CSS gradient functions, including linear, radial, and repeating gradients with specific constructor tags. It includes associated types that capture the structure and parameters of each gradient variant, such as direction, color stops, and repetition. This type is used to parse and represent outdated CSS gradient syntaxes, primarily for backward compatibility in CSS parsing and transformation tools.",
      "description_length": 476,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_property_parser.Rule.Pattern",
      "library": "styled-ppx.css-property-parser",
      "description": "This module provides parsing primitives for matching and extracting CSS property values from token streams. It works with token-based input and supports operations like matching specific tokens, extracting values, and sequencing rules. Concrete use cases include parsing CSS function names, color values, and unit identifiers directly from tokenized input.",
      "description_length": 356,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Css_property_parser.Standard",
      "library": "styled-ppx.css-property-parser",
      "description": "This module supports parsing of CSS tokens into typed values such as lengths, angles, colors, functional notations (e.g., `url()`), and unitless quantities like integers or ratios. It operates on CSS token streams using combinator-based rules to handle atomic values, CSS-wide keywords, and dimensioned or parenthetical constructs. Typical applications include validating CSS property syntax, extracting structured data from CSS declarations, or building custom parsers for CSS functions and units in a rule-driven system.",
      "description_length": 522,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Combinator",
      "library": "styled-ppx.css-property-parser",
      "description": "This module provides parser combinators for constructing CSS property parsers from simpler components. It supports operations like `static` for fixed-value parsers, `xor` for exclusive choice, `and_` for sequential composition, and `or_` for inclusive choice between parsers. These combinators are used to define precise CSS property value grammars by combining basic parsers into complex, structured parsers.",
      "description_length": 409,
      "index": 209,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Css_property_parser.Rule",
      "library": "styled-ppx.css-property-parser",
      "description": "This module processes CSS property parsing rules, handling pattern matching and value extraction while defining error types for validation failures. It supports structured data manipulation through submodules that implement parser combinators, parsing primitives, and rule transformations for CSS values. Main data types include generic parser rule types and match results, with operations for mapping, binding, sequencing, and selecting shortest or longest matches. Examples include parsing colors, lengths, function names, and unit identifiers from token streams, transforming parsed data, and validating CSS syntax during stylesheet analysis.",
      "description_length": 645,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Modifier",
      "library": "styled-ppx.css-property-parser",
      "description": "This module defines modifiers for parsing CSS property values with specific repetition and optionality constraints. It operates on parsers to transform their output, handling types like optional values, lists, and comma-separated lists within specified ranges. Concrete use cases include parsing CSS shorthand properties that require one or more values, optional components, or fixed/ranged repetitions.",
      "description_length": 403,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser.Parser",
      "library": "styled-ppx.css-property-parser",
      "description": "This module parses CSS token streams into structured OCaml values, handling standard and vendor-specific syntax for gradients, transforms, layout, and animations. It processes `token list` input into typed representations, supporting error recovery and non-standard constructs like `-ms-filter`. The string-keyed map submodule enables manipulation of CSS property-value pairs with ordered transformations and list operations, while the gradient submodule defines polymorphic variants for parsing legacy gradient syntaxes such as linear and radial gradients. Together, they support tasks like validating `linear-gradient` expressions, transforming CSS maps, and preserving legacy syntax during preprocessing.",
      "description_length": 707,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Css_property_parser",
      "library": "styled-ppx.css-property-parser",
      "description": "This module parses CSS property values into structured OCaml types using combinator-based rules that handle atomic values, functional notations, and complex grammars. It supports operations like `xor`, `and_`, and `or_` for defining precise parsing logic, along with modifiers for repetition, optionality, and list handling. Key data types include parsers, match results, and error types, enabling tasks like extracting colors, lengths, and gradients from CSS tokens, validating property syntax, and transforming CSS maps with ordered rules. Examples include parsing `linear-gradient` expressions, handling vendor-prefixed syntax like `-ms-filter`, and building custom CSS function parsers with rule-driven validation.",
      "description_length": 718,
      "index": 213,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 215,
    "meaningful_modules": 214,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9953488372093023
  },
  "statistics": {
    "max_description_length": 816,
    "min_description_length": 174,
    "avg_description_length": 401.6542056074766,
    "embedding_file_size_mb": 0.7778644561767578
  }
}