{
  "package": "llama",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:12:36.260214",
  "modules": [
    {
      "module_path": "Llama_io.Wav",
      "library": "llama.io",
      "description": "This module reads WAV audio files and provides a signal generator for mono playback. It works with WAV files represented by the `t` type and generates float signals from them. A concrete use case is playing back audio samples in a signal processing pipeline by averaging stereo channels into a mono signal.",
      "description_length": 306,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_io",
      "library": "llama.io",
      "description": "This module reads WAV audio files and provides a signal generator for mono playback. It works with WAV files represented by the `t` type and generates float signals from them. A concrete use case is playing back audio samples in a signal processing pipeline by averaging stereo channels into a mono signal.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_low_level.Output_stream",
      "library": "llama.low_level",
      "description": "This module manages an output audio stream with operations to configure buffer padding, send individual audio samples, and query stream properties like sample rate and channel count. It works with a stream type `t` that encapsulates the audio output state. Concrete use cases include real-time audio synthesis and streaming audio data to an output device.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_low_level.Wav",
      "library": "llama.low_level",
      "description": "Reads a WAV file and returns the mono audio data as a floatarray. Converts the raw audio samples into floating-point values normalized between -1.0 and 1.0. Useful for loading audio files for signal processing or machine learning tasks.",
      "description_length": 236,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_low_level.Midi_input",
      "library": "llama.low_level",
      "description": "This module manages MIDI input devices, allowing enumeration of available ports and connection to specific ports. It provides functions to retrieve the number of ports, list their names, connect to a port by index, and drain incoming MIDI messages into a character array. Concrete use cases include interfacing with MIDI hardware for real-time music input and processing MIDI events in audio applications.",
      "description_length": 405,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_low_level.System",
      "library": "llama.low_level",
      "description": "Initializes an environment logger that directs log output to standard error, using the `env_logger` crate for logging. It works with the runtime environment and logging facilities provided by the system. This function is typically used to set up logging early in program execution for debugging and monitoring purposes.",
      "description_length": 319,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_low_level",
      "library": "llama.low_level",
      "description": "This module provides low-level functionality for audio and MIDI device management, WAV file reading, and logging initialization. It operates on data types such as floatarrays for audio samples, stream types for audio output, and character arrays for MIDI message handling. Use cases include real-time audio synthesis, loading and processing WAV files, capturing MIDI input from hardware, and setting up system logging for debugging audio applications.",
      "description_length": 451,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Midi.Midi_input",
      "library": "llama",
      "description": "Handles MIDI input device initialization and port enumeration. Works with MIDI input devices, providing access to their port names. Used to list available MIDI input ports for device selection or configuration.",
      "description_length": 210,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Midi",
      "library": "llama",
      "description": "Handles real-time MIDI event processing and sequencing from input devices. Works with MIDI input ports and channels, producing event streams or sequenced outputs. Used to capture and process live MIDI input on specific channels, supporting polyphonic instruments.",
      "description_length": 263,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Signal_player",
      "library": "llama",
      "description": "Handles real-time playback of audio signals with optional down-sampling. Works with `float Llama_core.Signal.t` values, allowing dynamic updates through a reference. Used to stream generated or modified audio signals directly to output devices.",
      "description_length": 244,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Live",
      "library": "llama",
      "description": "This module offers a suite of operations for manipulating live, time-varying signals, including functional transformations (mapping, combining), arithmetic operations, and specialized audio processing tools like oscillators, envelopes, and filters. It operates on generic live signal types, with a focus on float streams for audio synthesis, enabling real-time signal modulation, sequencing, and effects processing in applications such as sound design and interactive music systems.",
      "description_length": 482,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama",
      "library": "llama",
      "description": "This module provides real-time audio signal manipulation and playback with functions to map, combine, and apply effects to float streams. It includes tools for synthesizing audio with oscillators and envelopes, and supports MIDI input processing for interactive music applications. Key use cases include live signal modulation, audio synthesis, and MIDI-driven sound control.",
      "description_length": 375,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 482,
    "min_description_length": 210,
    "avg_description_length": 329.3333333333333,
    "embedding_file_size_mb": 0.16002178192138672
  }
}