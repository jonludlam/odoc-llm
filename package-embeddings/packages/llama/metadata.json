{
  "package": "llama",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:20.255771",
  "modules": [
    {
      "module_path": "Llama.Midi.Midi_input",
      "library": "llama",
      "description": "Handles MIDI input device initialization and port enumeration. Works with MIDI input devices, providing access to their port names. Use to list available MIDI ports or prepare for incoming MIDI messages from hardware devices.",
      "description_length": 225,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Signal_player",
      "library": "llama",
      "description": "Handles real-time playback of audio signals with optional down-sampling. Works with `float Llama_core.Signal.t` values, maintaining internal state through a reference. Use to stream generated or pre-recorded audio signals directly to output, such as for live synthesis or audio effect processing.",
      "description_length": 296,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Live",
      "library": "llama",
      "description": "The module enables audio signal processing through operations like mapping, arithmetic, waveform generation, and filtering on live float streams and control signals. It handles time-varying values with transformations for synthesis (e.g., oscillators, envelopes), sequencing (step/random), and effects (delay, saturation), alongside utilities for clock gating and feedback loops. These tools are applied in dynamic audio contexts such as music synthesis, real-time sound modulation, and procedural audio generation.",
      "description_length": 515,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama.Midi",
      "library": "llama",
      "description": "Processes live MIDI input into event streams and sequenced outputs, integrating device management and event handling. It works with MIDI tracks, input devices, and event lists, offering operations to list available ports, capture incoming messages, and build real-time MIDI processors or sequencers. Specific uses include channel-specific event routing from hardware inputs and constructing dynamic MIDI event pipelines. The module combines direct access to MIDI ports with structured handling of incoming data for flexible real-time processing.",
      "description_length": 545,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama",
      "library": "llama",
      "description": "This module orchestrates real-time audio and MIDI processing by combining live signal playback, transformation, and input handling. It manages float-based audio signals with volume and downsample controls, supports asynchronous execution with Lwt, and integrates MIDI input for event-driven processing. Core operations include signal mapping, waveform generation, filtering, and MIDI event sequencing, enabling applications like live synthesis, audio effects, and interactive sound installations. Example uses include streaming procedural audio with dynamic parameter control or building real-time MIDI processors with synchronized visual feedback.",
      "description_length": 648,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_io.Wav",
      "library": "llama.io",
      "description": "This module reads WAV audio files and provides a signal generator for mono playback. It works with WAV files represented as the `t` type and generates float signals by averaging all channels. A concrete use case is playing back multi-channel audio as a single-channel signal using a trigger.",
      "description_length": 291,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_io",
      "library": "llama.io",
      "description": "This module processes WAV audio files, converting them into mono float signals by averaging all channels. It provides a signal generator that can be triggered to play back audio data. The `t` type represents WAV files, and operations include reading audio data and generating time-based float signals. For example, a multi-channel WAV file can be loaded and played back as a single-channel signal using a trigger function.",
      "description_length": 422,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_low_level.System",
      "library": "llama.low_level",
      "description": "Initializes an environment logger that directs log output to standard error, using the `env_logger` crate for logging. Works with unit type values to perform side effects. Useful for setting up logging in applications that require diagnostic output during execution.",
      "description_length": 266,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_low_level.Output_stream",
      "library": "llama.low_level",
      "description": "This module manages an output audio stream with operations to configure buffer padding, sample rate, and channel count. It works with floating-point audio samples and provides direct control over stream parameters for precise audio playback. Concrete use cases include real-time audio synthesis, streaming audio to output devices, and managing playback latency.",
      "description_length": 361,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_low_level.Midi_input",
      "library": "llama.low_level",
      "description": "This module manages MIDI input devices, allowing enumeration of available ports and connection to specific ports. It provides functions to retrieve the number of ports, list their names, connect to a port by index, and read pending MIDI messages into a character array. Concrete use cases include initializing MIDI input for music software, handling live MIDI events, and interfacing with external MIDI hardware.",
      "description_length": 412,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_low_level.Wav",
      "library": "llama.low_level",
      "description": "Reads a mono-channel WAV file from disk and returns the audio samples as a floatarray. Converts the raw PCM data to floating-point values normalized between -1.0 and 1.0. Useful for loading audio files for signal processing or machine learning tasks.",
      "description_length": 250,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_low_level",
      "library": "llama.low_level",
      "description": "This module provides low-level audio and logging functionality for real-time applications. It supports logging setup, WAV file loading, audio stream configuration, and MIDI input management. Key data types include floatarrays for audio samples, and handles for audio streams and MIDI ports. You can load a WAV file into memory, configure an audio output stream with custom parameters, capture live MIDI input, and route log messages to standard error for debugging.",
      "description_length": 465,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 648,
    "min_description_length": 225,
    "avg_description_length": 391.3333333333333,
    "embedding_file_size_mb": 0.044037818908691406
  }
}