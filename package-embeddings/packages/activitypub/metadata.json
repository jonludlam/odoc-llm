{
  "package": "activitypub",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 22,
  "creation_timestamp": "2025-07-15T23:10:59.309390",
  "modules": [
    {
      "module_path": "Activitypub.Cohttp_tls.Request.IO",
      "library": "activitypub",
      "description": "This module handles input/output operations for HTTP requests over TLS, including reading from and writing to network connections. It provides functions for reading lines or fixed amounts of data from an input channel and writing or flushing data to an output channel. Concrete use cases include sending HTTP request headers and bodies, and reading server responses during TLS-secured HTTP communication.",
      "description_length": 404,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Response.IO",
      "library": "activitypub",
      "description": "This module handles input/output operations for HTTP responses over TLS connections. It provides functions to read lines or fixed amounts of data from an input channel and write or flush data to an output channel. Concrete use cases include processing incoming HTTP response headers line by line and streaming response body content to a TLS connection.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Server_core.IO",
      "library": "activitypub",
      "description": "This module implements asynchronous I/O operations for handling TLS-encrypted connections in a server context. It provides functions for reading from and writing to input/output channels, managing connection streams, and handling errors during I/O operations. Concrete use cases include processing incoming HTTP requests and sending responses over secure TLS connections.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Response",
      "library": "activitypub",
      "description": "This module manages HTTP responses over TLS connections, offering direct functions to read headers line by line and stream or flush response bodies. It includes submodules that handle low-level I/O operations, enabling precise control over data transmission. You can read a fixed number of bytes from a response body or write and flush data incrementally to ensure timely delivery. These capabilities support use cases like processing large responses in chunks or parsing headers as they arrive.",
      "description_length": 495,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub.Cohttp_tls.IO",
      "library": "activitypub",
      "description": "This module implements asynchronous I/O operations over TLS connections using `Lwt` for concurrency. It provides functions to read from and write to input/output channels, handle connection errors, and manage line-based or chunked data transmission. Concrete use cases include sending HTTP requests and responses over secure TLS sockets and processing network streams in event-driven servers.",
      "description_length": 392,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Object.G",
      "library": "activitypub",
      "description": "This module provides functions to query and extract specific values from an RDF graph, such as IRIs, strings, integers, booleans, and datetime values, based on a given term and object IRI. It supports operations like retrieving the first matching value, checking literal types, and extracting ordered or unordered lists of values. Concrete use cases include parsing ActivityPub object properties from RDF data, handling language-tagged strings, and decoding linked objects into typed values.",
      "description_length": 491,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Server",
      "library": "activitypub",
      "description": "This module implements a TLS-based HTTP server for handling ActivityPub requests. It provides functions to construct responses, including redirects, errors, and file-based responses, using Cohttp and Lwt for asynchronous I/O. Key operations include `make`, `respond`, and `callback`, which enable defining request handlers and running the server securely over TLS.",
      "description_length": 364,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Request",
      "library": "activitypub",
      "description": "This module enables the construction, manipulation, and secure transmission of HTTP requests over TLS. It centers around the `Request.t` type, representing TLS-secured HTTP requests, and provides operations for accessing and modifying request components such as headers, methods, and URIs, along with I/O functions for sending and receiving encrypted data over network connections. The child module handles low-level TLS-aware I/O, allowing precise reading and writing of request headers and bodies during HTTP exchanges. Example uses include building HTTPS clients that stream encrypted request data or implement custom logic for handling bidirectional TLS communication.",
      "description_length": 672,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub.Cohttp_tls.Server_core",
      "library": "activitypub",
      "description": "This module implements a TLS-based HTTP server that handles requests with custom logic, streams content, or delegates to expert handlers, working with TLS connections, HTTP requests and responses, and Lwt-based IO streams. It supports asynchronous I/O operations for reading from and writing to encrypted channels, managing connection streams, and handling errors during communication. Main data types include TLS connections, HTTP requests, and Lwt streams, with operations for routing, streaming, and secure communication. You can use it to serve ActivityPub endpoints, handle secure file transfers, or build custom web application pipelines with async I/O support.",
      "description_length": 667,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Sset",
      "library": "activitypub",
      "description": "This module provides standard set operations (union, intersection, difference, membership checks) for immutable string collections, along with transformation functions like map, filter, and fold. It supports conversions to and from lists and sequences, enabling ordered traversal and iterative construction through sequence-based manipulation. It is suited for scenarios requiring efficient handling of unique textual data, such as processing ordered streams (e.g., logs, feeds), normalizing string sets for comparison, or implementing functional algorithms that rely on immutability and set-theoretic operations.",
      "description_length": 613,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Types",
      "library": "activitypub",
      "description": "This module defines core data structures and operations for working with ActivityPub objects, including identifiers, activity types, and actor types. It provides functions to convert between IRIs and typed values for activities and actors, along with utilities for extracting IRIs from polymorphic variants and handling localized content and names. Concrete use cases include parsing and constructing ActivityPub JSON-LD data, resolving activity and actor types from IRIs, and working with nested activity trees for social networking operations.",
      "description_length": 545,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.E",
      "library": "activitypub",
      "description": "This module defines error types and handling utilities for the Activitypub implementation. It provides functions to create and format error values, register custom error string converters, and pretty-print errors. Concrete use cases include reporting invalid Activitypub payloads, failed object resolutions, and protocol violations during federation operations.",
      "description_length": 361,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Http_sign",
      "library": "activitypub",
      "description": "This module implements HTTP signature verification and generation for ActivityPub requests. It provides functions to verify signed requests using X.509 public keys, create signature headers for outgoing requests, and generate RSA-SHA256 signatures using either raw keys or actor IRIs. It works with Cohttp request and header types, X509 keys, and Iri identifiers, primarily used for securing federated ActivityPub communications.",
      "description_length": 429,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Token",
      "library": "activitypub",
      "description": "This module generates, serializes, and manages authentication tokens and key pairs for ActivityPub actors. It provides functions to create tokens with random keys, serialize and deserialize token data, and persist token lists to and from files. Concrete use cases include handling per-actor API keys and managing token-based authentication in a distributed social networking context.",
      "description_length": 383,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Object",
      "library": "activitypub",
      "description": "This module processes RDF graphs in JSON-LD and related formats, enabling operations like filtering roots, mapping terms, and managing addressing relations such as BTO/BCC removal. It includes core data types for RDF terms, graphs, and ActivityPub objects, supporting tasks like identifier extraction, metadata copying, and privacy-preserving transformations. The child module enhances querying capabilities by allowing precise retrieval of typed values\u2014such as IRIs, strings, and datetimes\u2014from the graph, facilitating structured parsing of ActivityPub properties and language-tagged content. Together, they enable workflows like federated social media data processing, JSON-LD normalization, and secure metadata handling in distributed systems.",
      "description_length": 746,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cohttp_tls",
      "library": "activitypub",
      "description": "This module implements HTTP over TLS for secure web communication, providing functions to establish encrypted connections, send and receive HTTP messages, and build secure clients and servers. It includes submodules for handling TLS-secured responses with streaming body support, asynchronous I/O with `Lwt`, ActivityPub-compatible server logic, request construction and transmission, and a flexible TLS server for custom request handling. Main data types include TLS connections, HTTP requests and responses, and Lwt streams, with operations for reading and writing headers and bodies, managing secure I/O, and defining asynchronous request handlers. You can use it to stream encrypted request data, serve TLS-secured web content, handle large HTTP responses in chunks, or run an asynchronous HTTPS server with custom routing and streaming logic.",
      "description_length": 847,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Log",
      "library": "activitypub",
      "description": "This module provides functions for logging messages at various severity levels, handling result values with error logging, and formatting log output. It works with `Logs` types including `level`, `src`, `Tag.set`, and `result` values. Concrete use cases include logging application events, errors, and debugging information with structured tags and custom formatting.",
      "description_length": 367,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub.Smap",
      "library": "activitypub",
      "description": "This module offers operations for managing polymorphic key-value collections with string identifiers, supporting standard map manipulations (insertion, deletion, merging) alongside list-accumulating updates (e.g., `add_to_list`) and bidirectional traversal. It provides utilities for transforming, filtering, and querying data through folds, maps, and comparisons, while also enabling efficient conversions between maps and sequences/lists of key-value pairs. Use cases include processing JSON-like structures, aggregating string-indexed data, and handling immutable key-value collections during iterative transformations.",
      "description_length": 622,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Actor",
      "library": "activitypub",
      "description": "This module defines an IRI used to indicate that an actor manually approves follower requests. It works with the `Iri.t` data type to represent the specific activitypub extension for approval. A concrete use case is signaling that an actor requires manual acceptance of follow requests in a federated social network.",
      "description_length": 316,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Jsonld_static",
      "library": "activitypub",
      "description": "This module provides predefined JSON-LD context strings for ActivityStreams and Security V1, along with a map of IRI identifiers to these contexts. It works with string values and Iri.Map structures to associate context names with their corresponding JSON-LD content. Use this module to embed standard JSON-LD contexts directly in applications without requiring network requests to fetch them.",
      "description_length": 393,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub.Cache",
      "library": "activitypub",
      "description": "This module implements a disk-based HTTP response cache with expiration, handling IRI resolution and JSON parsing errors. It provides operations to create a cache with a specified storage root and entry expiration delay. Concrete use cases include caching remote ActivityPub resource lookups and reducing redundant HTTP requests during federation operations.",
      "description_length": 358,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub",
      "library": "activitypub",
      "description": "This module suite provides comprehensive support for building and securing ActivityPub-based federated systems. It centers around immutable string collections, ActivityPub object models, and IRI handling, with operations for set manipulation, JSON-LD processing, RDF graph querying, and HTTP signature verification. Key data types include IRI identifiers, ActivityPub objects, HTTP requests with TLS, and authentication tokens, enabling tasks like secure communication, social activity parsing, and cache-efficient federation. Specific workflows include verifying signed ActivityPub requests, normalizing and querying JSON-LD metadata, managing actor authentication tokens, and serving encrypted HTTP content with streaming support.",
      "description_length": 732,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 36,
    "meaningful_modules": 22,
    "filtered_empty_modules": 14,
    "retention_rate": 0.6111111111111112
  },
  "statistics": {
    "max_description_length": 847,
    "min_description_length": 316,
    "avg_description_length": 496.3636363636364,
    "embedding_file_size_mb": 0.08033370971679688
  }
}