{
  "package": "ppx_protocol_conv_xml_light",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:47:50.905550",
  "modules": [
    {
      "module_path": "Protocol_conv_xml.Xml_light",
      "library": "ppx_protocol_conv_xml_light",
      "description": "This module enables bidirectional XML conversion for OCaml data structures, supporting serialization and deserialization of complex types like records, variants, tuples, and nested collections alongside primitive values (integers, strings, floats). It handles XML trees through strict type conversion patterns, incorporating error resilience via result-returning operations and binary data transformations using bytes. Key applications include XML-based data interchange in web services and configuration systems where structured data mapping and robust parsing are critical.",
      "description_length": 575,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_xml",
      "library": "ppx_protocol_conv_xml_light",
      "description": "This module enables bidirectional XML conversion for OCaml data structures, supporting serialization and deserialization of records, variants, tuples, and nested collections with strict type conversion. It works with XML trees and handles primitive values like integers, strings, and floats, along with binary data through bytes, returning errors via result types. It is used for structured data interchange in web services and configuration systems requiring robust XML parsing and generation.",
      "description_length": 494,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 575,
    "min_description_length": 494,
    "avg_description_length": 534.5,
    "embedding_file_size_mb": 0.029397010803222656
  }
}