{
  "package": "ppx_protocol_conv_xml_light",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:14.038172",
  "modules": [
    {
      "module_path": "Protocol_conv_xml.Xml_light",
      "library": "ppx_protocol_conv_xml_light",
      "description": "This module enables bidirectional conversion between XML trees and OCaml data types, supporting structured representations like variants, records, and lists alongside primitives such as integers, floats, and strings. It facilitates error-resilient serialization to and from bytes, with use cases in configuration parsing, API data exchange, and persistent storage of typed values.",
      "description_length": 380,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_xml",
      "library": "ppx_protocol_conv_xml_light",
      "description": "This module enables bidirectional conversion between XML trees and OCaml data types, handling structured representations like variants, records, and lists, as well as primitives such as integers, floats, and strings. It supports error-resilient serialization to and from bytes, making it suitable for tasks like parsing configuration files, exchanging data in APIs, and storing typed values persistently. For example, it can convert an OCaml record to an XML element for transmission over a network or reconstruct a variant type from an XML document during configuration loading. Key operations include parsing XML into typed OCaml values and generating XML from OCaml values with consistent structure.",
      "description_length": 702,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 702,
    "min_description_length": 380,
    "avg_description_length": 541.0,
    "embedding_file_size_mb": 0.0076904296875
  }
}