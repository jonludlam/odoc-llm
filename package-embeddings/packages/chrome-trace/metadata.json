{
  "package": "chrome-trace",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:47.031566",
  "modules": [
    {
      "module_path": "Chrome_trace.Stack_frame.Raw",
      "library": "chrome-trace",
      "description": "Handles raw stack frame data for trace events by converting a list of strings into a structured format suitable for Chrome's trace viewer. It works directly with string lists and the internal `t` type representing a stack frame. This module is used to construct stack traces in trace events, enabling visualization of call stacks in performance profiling tools like Chrome Tracing.",
      "description_length": 381,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Event.Timestamp",
      "library": "chrome-trace",
      "description": "This module defines a timestamp type and conversions to and from floating-point seconds. It supports precise time measurements for trace events, enabling accurate timing data to be recorded and exported in Chrome's trace_event format. Use cases include logging event start and end times for performance analysis in tracing tools.",
      "description_length": 329,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Event",
      "library": "chrome-trace",
      "description": "This module creates and manipulates trace events in Chrome's trace_event format, supporting counters, async events with start/instant/end phases, and complete events with duration. It works with timestamps, process/thread identifiers, stack frames, and JSON-formatted arguments, enabling detailed performance tracing of systems with hierarchical and asynchronous operations. The timestamp submodule provides precise time measurements, converting to and from floating-point seconds for accurate timing data in trace logs. Use cases include logging event start and end times, tracking asynchronous operations across threads, and analyzing performance in tracing tools.",
      "description_length": 666,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_trace.Output_object",
      "library": "chrome-trace",
      "description": "This module constructs trace data objects in the Chrome trace_event format, supporting the creation of structured traces with events, stack frames, and custom metadata. It works with trace events, identifier-to-stack-frame mappings, and JSON values to represent trace data. Concrete use cases include generating performance traces for visualization in Chrome's tracing tool, such as profiling application execution or analyzing asynchronous workflows.",
      "description_length": 451,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Stack_frame",
      "library": "chrome-trace",
      "description": "This module organizes stack frame records for trace events, using identifiers and descriptive fields like name and category to represent execution contexts. It supports hierarchical call stack construction for performance profiling, particularly in tools like Chrome Tracing. The core `t` type holds frame data, while operations convert string lists into structured frames and build traces. For example, it can transform a list like `[\"main\"; \"parse\"; \"tokenize\"]` into a sequence of linked stack frames for visualization.",
      "description_length": 522,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Json",
      "library": "chrome-trace",
      "description": "This module defines a JSON AST type and functions to construct and serialize values in the Chrome trace event format. It supports basic types like integers, floats, strings, booleans, and nested lists and associations. Use this module to build structured trace events with timestamps, durations, and metadata for visualization in Chrome's tracing tool.",
      "description_length": 352,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_trace.Id",
      "library": "chrome-trace",
      "description": "This module generates unique identifiers for trace events using either string or integer values. It provides the `create` function to construct an identifier from a string or integer, ensuring compatibility with the Chrome trace event format. Use this module to assign distinct IDs to asynchronous operations or concurrent tasks when producing traces for visualization in tools like Chrome's tracing viewer.",
      "description_length": 407,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace",
      "library": "chrome-trace",
      "description": "This module generates performance traces in Chrome's trace_event format, supporting detailed logging of synchronous and asynchronous operations with timestamps, durations, and hierarchical stack frames. It provides data types for trace events, stack frames, JSON values, and unique identifiers, along with operations to construct and link them into structured traces. Use it to profile application execution, visualize asynchronous workflows, or analyze performance bottlenecks in Chrome's tracing tool by building traces with nested call stacks, counter events, or async event sequences. Example: track a multi-threaded operation by creating async events with start/instant/end phases, associate them with stack frames, and output the result to a JSON file for analysis.",
      "description_length": 771,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 771,
    "min_description_length": 329,
    "avg_description_length": 484.875,
    "embedding_file_size_mb": 0.029476165771484375
  }
}