{
  "package": "chrome-trace",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:01:43.772211",
  "modules": [
    {
      "module_path": "Chrome_trace.Event.Timestamp",
      "library": "chrome-trace",
      "description": "This module defines a timestamp type and conversion functions for working with time values in floating-point seconds. It supports precise time representations required by Chrome's trace event format, enabling accurate event timing in performance traces. Use this module to convert timestamps to and from float values for logging events in `chrome://tracing`.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Stack_frame.Raw",
      "library": "chrome-trace",
      "description": "Handles raw stack frame data for trace events by converting a list of strings into a structured format suitable for Chrome's trace viewer. It works directly with string lists and the internal `t` type representing stack frames. This module is used to construct stack traces in trace events, enabling visualization of call stacks in performance profiling tools.",
      "description_length": 360,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Stack_frame",
      "library": "chrome-trace",
      "description": "Handles construction and representation of stack frames for Chrome trace events, including parent relationships and metadata like name and category. Works with string identifiers and structured frame data to build hierarchical call stacks. Used to generate detailed stack traces that visualize execution flow in performance analysis tools like Chrome Tracing.",
      "description_length": 359,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_trace.Output_object",
      "library": "chrome-trace",
      "description": "This module constructs trace data objects in the Chrome trace-event format, supporting creation with events, optional display time units, custom fields, and stack frames. It works with trace events, JSON values, and identifier-stack frame pairs to build structured output. Use it to generate trace files for performance analysis in tools like `chrome://tracing`.",
      "description_length": 362,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Id",
      "library": "chrome-trace",
      "description": "This module generates and manages identifiers used in trace events, supporting both string and integer-based IDs. It provides the `create` function to construct an identifier from a string or integer value. These identifiers are used to uniquely label events in the Chrome trace viewer for performance analysis.",
      "description_length": 311,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Event",
      "library": "chrome-trace",
      "description": "This module creates and manipulates Chrome trace events such as complete, counter, async, and instant events. It works with timestamps, process and thread identifiers, and JSON-formatted arguments to represent performance data in the Chrome trace_event format. Concrete use cases include logging function durations, tracking asynchronous operations, and marking instantaneous events for visualization in `chrome://tracing`.",
      "description_length": 423,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace.Json",
      "library": "chrome-trace",
      "description": "This module implements functions to construct and manipulate JSON values according to the Chrome trace event format. It supports data types such as integers, floats, strings, lists, booleans, associative lists, and null, enabling precise representation of trace events. Concrete use cases include serializing profiling data, logging asynchronous operations, and generating structured timelines for visualization in the Chrome tracing tool.",
      "description_length": 439,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_trace",
      "library": "chrome-trace",
      "description": "This module writes performance trace data in Chrome's trace_event format for visualization in tools like `chrome://tracing`. It supports creating and organizing trace events with timestamps, identifiers, stack frames, and structured metadata. Concrete use cases include profiling function execution, tracking asynchronous workflows, and generating hierarchical call stacks for detailed performance analysis.",
      "description_length": 407,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 439,
    "min_description_length": 311,
    "avg_description_length": 377.375,
    "embedding_file_size_mb": 0.11635303497314453
  }
}