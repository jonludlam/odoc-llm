{
  "package": "psmt2-frontend",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:46.554894",
  "modules": [
    {
      "module_path": "Psmt2Frontend.Smtlib_typed_env.SMap",
      "library": "psmt2-frontend",
      "description": "This map implementation supports dictionary operations over string keys and polymorphic values, including insertion, deletion, traversal, and value transformations like list appending or function application. It provides utilities for ordered traversal, filtering, and conversion to and from sequences, enabling efficient manipulation of key-value pairs. Typical use cases involve managing hierarchical data, symbolic computation environments, or configurations requiring ordered key access and bulk transformations.",
      "description_length": 516,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_ty.IMap",
      "library": "psmt2-frontend",
      "description": "This implementation provides integer-keyed map operations supporting functional updates, structural manipulation, and bidirectional conversion with sequences and lists. It handles maps with arbitrary value types, offering specialized functions for list-valued entries, key-range queries, and bulk transformations through folds, filters, and merges. Typical applications include managing hierarchical data structures, processing integer-annotated streams, or implementing symbol tables with numeric identifiers.",
      "description_length": 510,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_ty.SMap",
      "library": "psmt2-frontend",
      "description": "This module offers operations for creating and manipulating maps with string keys and polymorphic values, supporting insertions, deletions, updates, and combinations of maps. It includes functions for querying, transforming, filtering, and converting maps to and from sequences and lists, enabling ordered traversal and bulk operations. Such maps are useful in scenarios requiring associative storage with string identifiers, such as symbol tables, configuration management, or processing structured data with heterogeneous value types.",
      "description_length": 536,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_lexer",
      "library": "psmt2-frontend",
      "description": "This module implements a lexer for SMT-LIB input, providing functions to parse tokens, handle comments, and track source positions. It processes character streams into lexical tokens consumed by the SMT-LIB parser, maintaining state in `lexbuf` structures. Concrete uses include reading SMT expressions, handling escaped characters, and supporting interactive input parsing.",
      "description_length": 374,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_error",
      "library": "psmt2-frontend",
      "description": "This module defines a comprehensive set of error types for handling various SMT-LIB parsing and typing issues, such as lexical, syntax, and type declaration errors. It provides functions to report errors with source location information, print detailed error messages, and raise or emit warnings based on error conditions. Concrete use cases include validating SMT-LIB input during parsing, reporting type mismatches in expressions, and handling malformed declarations in SMT scripts.",
      "description_length": 484,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Options",
      "library": "psmt2-frontend",
      "description": "This module offers configuration and query operations for managing global state in a solver frontend, using simple types like booleans, integers, and strings. It handles options for verbosity, error formatting, logic theory selection (e.g., QF, FP), and command validation, enabling use cases such as toggling assertion checks, customizing warning output, or controlling solver behavior during input processing. The design centers on mutable state management through setter/getter pairs and string-based configuration flags.",
      "description_length": 524,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_syntax",
      "library": "psmt2-frontend",
      "description": "This module defines data types and structures for representing SMT-LIB syntax elements, including constants, symbols, keywords, and a wide range of SMT commands such as assertions, declarations, definitions, and solver control operations. It works with terms, sorts, symbols, and attributes to model SMT scripts and supports concrete use cases like parsing SMT-LIB input, constructing SMT command sequences, and manipulating SMT expressions programmatically. The types and variants directly correspond to SMT-LIB language constructs, enabling precise modeling and transformation of SMT queries and theories.",
      "description_length": 607,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Psmt2Frontend.Version",
      "library": "psmt2-frontend",
      "description": "Holds a string value representing the current version of the software. Used to track and display version information for the SMT frontend tool. Directly accessed during startup or version-check workflows to ensure correct tooling compatibility.",
      "description_length": 244,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_typed_env",
      "library": "psmt2-frontend",
      "description": "This module manages typed environments for SMT-LIB by handling symbol tables for sorts, functions, and constructors, supporting type association, datatype construction, and polymorphism resolution. It works with environments, symbol maps, function definitions, and SMT syntax trees to enable type checking, symbolic resolution, and algebraic datatype registration. The integrated map implementation provides dictionary operations over string keys and polymorphic values, supporting insertion, deletion, ordered traversal, and value transformations such as appending lists or applying functions. Together, they enable building and validating SMT-LIB expressions, extending environments with datatypes, and resolving type information during frontend processing, while supporting efficient manipulation of symbolic environments and configuration data.",
      "description_length": 848,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_ty",
      "library": "psmt2-frontend",
      "description": "This module represents and manipulates SMT-LIB type expressions using a mutable structure with unique identifiers and type descriptors, supporting operations like instantiation, substitution, and unification. It integrates integer-keyed and string-keyed map modules to manage hierarchical and associative data, enabling efficient storage and transformation of type variables and symbol tables. With these tools, users can type-check SMT expressions, process integer-annotated streams, and handle polymorphic values in configurations or structured data. The combination of direct type operations and flexible map submodules supports parsing, constraint solving, and symbolic manipulation tasks.",
      "description_length": 693,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Main",
      "library": "psmt2-frontend",
      "description": "Implements the entry point for launching the application, coordinating initialization and execution flow. Works with system-level interfaces and core components to start the program. Used to bootstrap the environment and trigger the main event loop.",
      "description_length": 249,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_parser",
      "library": "psmt2-frontend",
      "description": "Parses SMT-LIB formatted input into abstract syntax trees representing terms and commands. It processes lexical tokens generated from input streams, constructing structured representations for further analysis or execution. Useful for reading and interpreting SMT-LIB scripts during theorem proving or constraint solving workflows.",
      "description_length": 331,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_typed_logic",
      "library": "psmt2-frontend",
      "description": "This module defines typed logic theories for SMT-LIB, including built-in sorts, functions, and parameterized functions for theories like integers, real numbers, arrays, and bit vectors. It provides concrete definitions for logic operations such as arithmetic, array manipulation, and floating-point operations, along with utilities to integrate these theories into an environment. Use cases include setting up SMT solvers with specific logic configurations and validating expressions within a defined theory.",
      "description_length": 508,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend.Smtlib_typing",
      "library": "psmt2-frontend",
      "description": "This module implements type checking and inference for SMT-LIB syntax trees, handling operations like type instantiation, unification, pattern matching, and term typing in the context of a typed environment. It works with SMT-LIB abstract syntax trees, type expressions, environments, and symbol maps, enforcing type correctness during parsing and transformation. Concrete use cases include validating function applications, checking match expressions, resolving qualified identifiers, and ensuring proper typing of constants and variables within SMT commands.",
      "description_length": 560,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Psmt2Frontend",
      "library": "psmt2-frontend",
      "description": "This collection processes SMT-LIB input from raw text to typed abstract syntax, managing lexical analysis, parsing, type checking, and solver configuration. It centers on SMT-LIB syntax elements like terms, commands, and types, with operations for parsing, error reporting, environment management, and type inference. Users can read and validate SMT scripts, manipulate symbolic expressions, configure solver behavior, and track version metadata. Concrete tasks include parsing assertions, checking function applications, handling escaped characters, and setting logic theories for constraint solving.",
      "description_length": 601,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 15,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9375
  },
  "statistics": {
    "max_description_length": 848,
    "min_description_length": 244,
    "avg_description_length": 505.6666666666667,
    "embedding_file_size_mb": 0.05494880676269531
  }
}