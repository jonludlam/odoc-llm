{
  "package": "subprocess",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:07:35.929456",
  "modules": [
    {
      "module_path": "Subprocess.Core.Cmd.Out",
      "library": "subprocess",
      "description": "This module defines output destination types for configuring where a process's output is directed. It includes variants for standard output, standard error, file output, appending to files, null device, and pipes. These types are used when constructing commands to specify output handling for subprocesses.",
      "description_length": 306,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.Cmd.In",
      "library": "subprocess",
      "description": "Handles input sources for subprocess commands, supporting operations like reading from standard input, files, or channels. Works with types representing input streams, including stdin, in_channels, files, and pipes. Used to specify input redirection when constructing and executing subprocesses, such as feeding data from a file or channel into a command's standard input.",
      "description_length": 372,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.Cmd",
      "library": "subprocess",
      "description": "This module centers around `Cmd.t`, a core type for constructing and composing commands to launch processes with precise control over input and output streams. It provides utilities like `pp` and `show` for inspecting command values, primarily for debugging, while its child modules define stream types for configuring input and output redirection. The input module supports sourcing data from stdin, files, or channels, enabling scenarios like feeding a command's stdin from a file, while the output module directs process output to destinations like stdout, stderr, files, or pipes. Together, these components allow building complex command pipelines with fine-grained I/O handling, such as running a subprocess that reads from a file and writes output to both stdout and a log file.",
      "description_length": 785,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.In",
      "library": "subprocess",
      "description": "This module defines types and constructors for specifying input sources when spawning processes, including standard input, channels, files, and pipes. It enables direct association of input streams with process creation, supporting concrete use cases like redirecting stdin from a file or connecting input to a pipe. The variant type ensures type-safe handling of different input origins during process setup.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.Out",
      "library": "subprocess",
      "description": "This module defines output stream configurations for subprocesses, supporting operations like writing to standard output, standard error, files, or pipes. It works with types representing different output destinations, including `stdout`, `stderr`, file paths, and in-channel pipes. Concrete use cases include redirecting subprocess output to log files, capturing output for testing, or discarding it silently.",
      "description_length": 410,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.Exit",
      "library": "subprocess",
      "description": "This module defines types and functions for handling process exit statuses, including detailed information about termination via exit codes, signals, or stops. It provides utilities to convert exit results into standard OCaml result types, extract status codes, and format or display exit information for debugging. Concrete use cases include checking subprocess termination outcomes, handling non-zero exits as errors, and logging process exit details.",
      "description_length": 453,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Unchecked",
      "library": "subprocess",
      "description": "This module offers low-level subprocess management with explicit exit status handling, supporting operations like command execution, output capture (as strings or line streams), input feeding, and process pipeline construction. It works with process handles, `Cmd.t` values for command configuration, and I/O redirection targets (files, pipes, channels) while enabling environment variable manipulation and non-blocking I/O. Typical use cases involve scenarios requiring precise control over subprocess I/O, such as redirecting stderr to a log file, processing output incrementally, or chaining commands with custom pipelines.",
      "description_length": 626,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Subprocess.Core",
      "library": "subprocess",
      "description": "This module orchestrates process execution with precise control over I/O streams and environment configuration, using typed command values (`Cmd.t`) and stream descriptors to enforce type-safe interactions. It supports input redirection from stdin, files, or channels, output routing to stdout, stderr, files, or pipes, and detailed exit status handling via `Exit.t` to capture termination reasons. You can compose pipelines that read from files, write to multiple destinations, or chain subprocesses through pipes, while inspecting or formatting command structures for debugging. Exit status handling enables robust error checking, such as treating non-zero exits as failures or logging signal terminations.",
      "description_length": 708,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Exec",
      "library": "subprocess",
      "description": "This module starts processes and manages their input/output streams using low-level file descriptors. It provides direct access to process handles, allowing manual control over stream closure, or automatic cleanup within a scoped function context. Functions like `exec` and `shared_pipe` enable precise redirection of standard output and error, supporting scenarios such as capturing combined process output for logging or inter-process communication.",
      "description_length": 451,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess",
      "library": "subprocess",
      "description": "This module provides fine-grained control over subprocess execution, combining low-level process management with high-level I/O handling. It centers around `Cmd.t` for command construction, process handles for direct manipulation, and `Exit.t` for precise exit status interpretation, supporting input feeding, output capture, and pipeline composition. You can redirect I/O to files or channels, chain commands through pipes, or process output incrementally with streaming. Submodules enhance this with scoped resource management, low-level file descriptor control, and typed stream routing, enabling tasks like capturing combined stdout/stderr output, building custom command pipelines, or handling subprocess termination states reliably.",
      "description_length": 738,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 10,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 785,
    "min_description_length": 306,
    "avg_description_length": 525.8,
    "embedding_file_size_mb": 0.03674507141113281
  }
}