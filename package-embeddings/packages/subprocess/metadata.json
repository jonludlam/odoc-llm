{
  "package": "subprocess",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-14T23:14:36.521905",
  "modules": [
    {
      "module_path": "Subprocess.Core.Cmd.Out",
      "library": "subprocess",
      "description": "This module defines output destination types for process streams, including stdout, stderr, file paths, and channels. It supports operations like redirecting output to files, appending to files, or writing to in-memory channels. Concrete use cases include capturing command output into a string channel, logging to a file, or silencing output with `Devnull`.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Subprocess.Core.Cmd.In",
      "library": "subprocess",
      "description": "This module defines input sources for subprocess commands, supporting operations like reading from standard input, files, or pipes. It works with types such as `stdin`, `in_channel`, `file`, and `pipe` to specify where input comes from. Concrete use cases include redirecting input from a file to a subprocess or connecting input streams between processes.",
      "description_length": 356,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.In",
      "library": "subprocess",
      "description": "This module defines types and constructors for specifying input sources when spawning processes, including standard input, channels, files, and pipes. It enables direct association of input streams with process creation, supporting concrete use cases like redirecting stdin from a file or connecting input to a pipe. The variant type allows precise control over input handling at the type level, ensuring correct stream configurations during process initialization.",
      "description_length": 465,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Subprocess.Core.Out",
      "library": "subprocess",
      "description": "This module defines output destination types for process I/O streams, including stdout, stderr, channels, files, append targets, null device, and pipes. It allows specifying where process output should be directed, enabling concrete operations like writing to files, appending output, or routing through channels. Use cases include configuring process output redirection, capturing output into in-memory channels, or discarding output via `/dev/null`.",
      "description_length": 451,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Subprocess.Core.Exit",
      "library": "subprocess",
      "description": "This module defines types and operations for handling process exit statuses, including detailed information about termination via exit codes, signals, or stops. It provides functions to convert exit results into standard OCaml result types, extract status integers, and format exit information for debugging. Concrete use cases include handling subprocess outcomes in `Exec.in_context` callbacks and transforming error results for better composition in process management workflows.",
      "description_length": 482,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core.Cmd",
      "library": "subprocess",
      "description": "This module defines the core command type `Cmd.t` for representing and composing subprocess operations, along with input and output stream configurations. It supports concrete operations like command execution with customizable stdin, stdout, and stderr routing, using types such as `stdin`, `stdout`, `stderr`, `file`, and `pipe`. Use cases include running shell commands with input redirected from a file, capturing output into memory, or chaining processes via pipes.",
      "description_length": 470,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Subprocess.Exec",
      "library": "subprocess",
      "description": "This module starts processes and manages their input/output streams using low-level file descriptors. It provides direct access to process handles for manual resource management, with functions to redirect output streams into shared pipes. Use cases include running external commands with precise control over stdin, stdout, and stderr, or capturing combined output streams for logging or analysis.",
      "description_length": 398,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Core",
      "library": "subprocess",
      "description": "This module enables spawning subprocesses with configurable I/O routing, exit status monitoring, and stream redirection. It operates on typed handles for stdin, stdout, stderr, pipes, and files, along with command specifications and process state trackers. Common scenarios include redirecting output to files, setting up inter-process communication via pipes, and managing non-blocking I/O for interactive streams.",
      "description_length": 415,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.StringResults",
      "library": "subprocess",
      "description": "This module enables executing and managing subprocesses with structured handling of command outputs, errors, and I/O streams using `result`-wrapped values. It operates on command descriptions (`Cmd.t`) and subprocess handles, supporting transformations like input redirection, environment configuration, and asynchronous I/O, while returning textual results or error messages. Typical applications include scripting interactions with external tools, composing pipelines with redirected streams, and robustly handling process failures via string-based error propagation.",
      "description_length": 569,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess.Results",
      "library": "subprocess",
      "description": "This module enables structured execution of external commands with explicit error handling, returning outcomes as `Ok` or `Error` based on subprocess exit codes. It operates on command descriptions and process I/O channels, supporting operations like stream redirection, line-by-line output processing, and environment configuration. Typical use cases include composing pipelines with precise input/output control, handling partial failures in workflows, and integrating subprocess results into error-tolerant systems.",
      "description_length": 518,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Subprocess",
      "library": "subprocess",
      "description": "This module enables precise control over subprocess creation and execution, with operations for routing and redirecting input/output streams through pipes, files, or channels, along with monitoring process states. It works with typed process handles, command specifications, and I/O configurations to manage interactions like asynchronous output handling, environment variable setup, and non-blocking I/O. Specific use cases include composing pipelines with redirected streams, capturing or merging stdout/stderr output, and executing commands with custom I/O destinations such as log files or null devices.",
      "description_length": 607,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 11,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9166666666666666
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 356,
    "avg_description_length": 462.6363636363636,
    "embedding_file_size_mb": 0.15973949432373047
  }
}