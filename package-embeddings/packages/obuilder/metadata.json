{
  "package": "obuilder",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 25,
  "creation_timestamp": "2025-06-18T16:37:35.616195",
  "modules": [
    {
      "module_path": "Obuilder.Docker_sandbox.Docker_config",
      "description": "Generates Docker command-line arguments and container execution commands from an OBuilder configuration and a sandbox configuration. Processes configuration records and directory paths to construct argument lists. Used to automate Docker command generation for containerized builds and execution workflows.",
      "description_length": 306,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker.Cmd",
      "description": "The module provides functions for managing Docker entities such as images, containers, volumes, and manifests, including operations like pulling, tagging, committing, and removing. It works with Docker identifiers like image names and container IDs, leveraging variant types and asynchronous workflows via Lwt for complex interactions. Use cases include automating container management tasks and handling structured logging through custom file descriptor interfaces.",
      "description_length": 466,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker.Cmd_log",
      "description": "The module provides Docker client operations such as pulling, building, and inspecting images, containers, and volumes, along with retrieving labeled lists of these objects and temporary caches tied to an OBuilder instance, all integrated with logging via Build_log. It enables use cases like managing containerized workflows, tracking resource states during builds, and handling OBuilder-specific data structures efficiently.",
      "description_length": 426,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker.Extract",
      "description": "Fetches and extracts a Docker base image into a specified directory, retrieving its environment configuration. Operates on log records, root filesystem paths, and image names. Used to set up initial container environments by pulling and unpacking base images.",
      "description_length": 259,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Config.Mount",
      "description": "type t = { name : string; source : string; target : string; options : string list; dump : bool; pass : int } Provides functions to parse, validate, and manipulate mount configuration entries, including checking options, modifying flags, and generating formatted output. Works with structured data representing filesystem mounts, including names, sources, targets, and mount options. Used to process /etc/fstab entries and generate system mount commands.",
      "description_length": 453,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Config.Secret",
      "description": "Encodes and decodes values of type t using S-expression serialization. Works with a record type containing private fields. Used to persist and transmit secret data in a structured, portable format.",
      "description_length": 197,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.S",
      "description": "Provides operations to manage a build store, including creating builds with a context, deleting items and their dependencies, pruning old entries, and retrieving statistics like item count, disk usage, and cache performance. Works with a custom type `t` representing the store and `context` for build environments. Used to clean up test data, monitor storage usage, and ensure the store remains functional.",
      "description_length": 406,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Context",
      "description": "Provides functions to create a build context with customizable environment, user, working directory, shell, and secrets, using a logger and source directory. Operates on types including logger, environment configurations, and secret key-value pairs. Used to configure containerized build processes with precise runtime settings.",
      "description_length": 328,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker",
      "description": "Manages Docker entities through functions for pulling, tagging, and removing images and containers, along with extracting base images into local directories. Supports asynchronous operations with Lwt, handles structured logging, and integrates with OBuilder for build tracking. Key data types include image names, container IDs, log records, and filesystem paths, enabling automation of container workflows and environment setup. Examples include automating image tagging, inspecting build states, and preparing base environments for containerized applications.",
      "description_length": 561,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Btrfs_store",
      "description": "Provides operations to manage build results as Btrfs subvolumes, including creating stores, building items with optional base clones, deleting entries, and retrieving build paths and logs. Works with identifiers, file paths, and Lwt-based asynchronous results. Used to version build outputs, manage cache snapshots, and track disk usage for efficient storage management.",
      "description_length": 370,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Zfs_store",
      "description": "Provides operations to manage ZFS-based storage for build results, including creating snapshots, tracking free space, and executing builds with optional base snapshots. Works with build identifiers, file paths, and ZFS pools. Enables caching of build outputs, logging, and deletion of stored builds and caches.",
      "description_length": 310,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Rsync_store",
      "description": "Provides operations to manage build results via rsync, including creating, deleting, and retrieving build artifacts, tracking free space, and managing cache snapshots. Works with build identifiers, file paths, and cache names, supporting both copy and hardlink modes for storage efficiency. Enables building and caching incremental results, logging, and safe cleanup of expired or unused data.",
      "description_length": 393,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Xfs_store",
      "description": "Provides operations to manage a store based on XFS with reflink, including building items with optional base layers, retrieving build results and logs, deleting entries, and managing caches. Works with identifiers, file paths, and directories to handle storage efficiently. Used for creating and maintaining snapshot-based builds, caching, and managing disk space with deduplication.",
      "description_length": 383,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Store_spec",
      "description": "Checks if a string represents an absolute path, parses and validates store configurations including Btrfs, Docker, Rsync, Xfs, and Zfs, and converts them into executable store operations. It handles specific data types like store identifiers with associated parameters and Rsync modes, and supports command-line argument parsing for these structures. Use cases include initializing storage backends from command-line input and validating Rsync configurations with required mode specifications.",
      "description_length": 493,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_store",
      "description": "Provides operations to manage Docker image-based build results, including creating, building, deleting, and querying stored items. Works with identifiers, file paths, and Lwt-based asynchronous workflows. Enables caching and snapshotting of build environments, with support for tracking build logs and disk usage.",
      "description_length": 313,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Zfs_clone",
      "description": "Fetches and extracts a base image into a specified directory, logging progress through a provided log. It operates on a log of type Build_log.t, a rootfs path as a string, and a base identifier. This is used to initialize a root filesystem with a pre-built image for deployment or testing.",
      "description_length": 289,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Archive_extract",
      "description": "Fetches and extracts a base image from a remote source into a specified directory, initializing the root filesystem. Operates on log records, root filesystem paths, and configuration environments. Used to set up initial container environments by downloading and unpacking pre-built tarball archives.",
      "description_length": 299,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Config",
      "description": "Encapsulates configuration data for sandboxed build steps, handling structured mount definitions with fields like name, source, target, options, and flags. Supports serialization and deserialization of configuration records, enabling storage and transmission of sensitive data. Operations include parsing fstab entries, modifying mount options, and generating command strings for system mounts. Example tasks include validating a mount entry, converting it to a serialized format, and applying specific flags for execution.",
      "description_length": 523,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Native_sandbox",
      "description": "Provides functions to run sandboxed operations with cancellation support, manage configuration via S-expressions, and generate command-line interfaces. Works with `t` for sandbox instances and `config` for configuration data. Used to execute builds in isolated environments, capture logs, and handle process input.",
      "description_length": 314,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_sandbox",
      "description": "Constructs Docker command sequences from build and sandbox configurations, translating structured data into executable commands. Processes configuration records and directory paths to generate argument lists for container execution. Supports automated build and run workflows by assembling command-line parameters dynamically. Examples include launching containers with mounted volumes or executing build scripts inside isolated environments.",
      "description_length": 442,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Builder",
      "description": "Returns the root directory of a storage system, checks free space percentage, and manages building, deleting, and retrieving build results. It handles build operations with a base directory, tracks build logs, and provides cache management with snapshotting and cleanup. Used to construct and manage persistent build artifacts and associated metadata.",
      "description_length": 351,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_builder",
      "description": "Provides operations to manage a build store, including retrieving the root directory, checking free space, building items with a custom function, deleting entries, and accessing build results and logs. Works with identifiers, file paths, and Lwt-based asynchronous operations. Used to construct and cache build artifacts, manage disk space, and handle build dependencies efficiently.",
      "description_length": 383,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Build_log",
      "description": "Provides functions to create, write to, and finalize a log, along with reading from existing logs and streaming content to a destination. Operates on a file descriptor-based log structure that supports appending data, formatting output, and copying from external sources. Used to capture build process output, stream logs in real-time, and manage temporary log files during execution.",
      "description_length": 384,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "obuilder",
      "description": "Provides functions to create, update, and query an index structure optimized for fast lookups of file paths and their corresponding metadata. Operates on tuples of file paths, timestamps, and checksums, enabling efficient dependency tracking in build systems. Used to validate file integrity and determine which files need reprocessing during incremental builds.",
      "description_length": 362,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder",
      "description": "Provides operations to build, delete, prune, and monitor a store of build artifacts. Works with a custom type `t` representing the builder state, and interacts with timestamps, IDs, and storage metrics. Used to manage build dependencies, clean up old items, and ensure storage health during continuous integration workflows.",
      "description_length": 324,
      "index": 24,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 27,
    "meaningful_modules": 25,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9259259259259259
  },
  "statistics": {
    "max_description_length": 561,
    "min_description_length": 197,
    "avg_description_length": 373.4,
    "embedding_file_size_mb": 0.09125232696533203
  }
}