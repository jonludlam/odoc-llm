{
  "package": "obuilder",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 24,
  "creation_timestamp": "2025-08-15T12:20:59.199701",
  "modules": [
    {
      "module_path": "Obuilder.Docker.Cmd",
      "library": "obuilder",
      "description": "This module offers low-level Docker CLI operations for managing and inspecting Docker resources such as images, containers, volumes, and manifests. It provides utilities to list OBuilder-specific volumes, handle mount points, and manage errors using Lwt-based functions, primarily supporting build workflows that require direct Docker interactions.",
      "description_length": 348,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Config.Secret",
      "library": "obuilder",
      "description": "Handles secret values and their target bindings within a sandboxed build configuration. It defines a structure with a secret value and its intended target, supporting serialization to and from S-expressions. Used to securely pass sensitive data like API keys or credentials to specific parts of a build process.",
      "description_length": 311,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_sandbox.Docker_config",
      "library": "obuilder",
      "description": "This module generates Docker command-line arguments and container execution commands based on an OBuilder configuration. It takes an OBuilder configuration, an optional configuration directory, and a sandbox configuration to produce the exact Docker CLI parameters and the command sequence for container execution. Use this to translate high-level build specifications into concrete Docker commands for sandboxed builds.",
      "description_length": 420,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker.Cmd_log",
      "library": "obuilder",
      "description": "This module provides Docker resource management operations including image/container/volume lifecycle control, execution commands, and existence checks. It works with Docker images, containers, and volumes, utilizing `Build_log` for structured logging and `Lwt.t` for asynchronous execution, while returning `result`-typed values for error handling. Specific use cases include tracking temporary cache volumes and filtered container listings during build processes.",
      "description_length": 465,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker.Extract",
      "library": "obuilder",
      "description": "Fetches and extracts Docker base images into a specified directory, initializing the root filesystem. It returns the environment variables from the image configuration. This is used to prepare a root filesystem for building container images by pulling and unpacking a base image.",
      "description_length": 279,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Config.Mount",
      "library": "obuilder",
      "description": "Handles mount configurations for sandboxed build steps, defining source and destination paths with read-only flags. Works with string paths and mount types (`Bind or `Volume). Used to specify how filesystem directories or volumes are mounted during containerized builds.",
      "description_length": 270,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Build_log",
      "library": "obuilder",
      "description": "This module manages build logs with operations to create, write to, and read from log files. It supports temporary log creation, formatted writing, and streaming log content to a destination function or file descriptor. Use cases include capturing and streaming build output in real-time, or reading from pre-existing log files.",
      "description_length": 328,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Btrfs_store",
      "library": "obuilder",
      "description": "This module manages build artifacts using Btrfs subvolumes, allowing creation, deletion, and querying of build results and logs. It supports atomic build operations with caching, snapshotting, and space-efficient storage management. Concrete use cases include storing and retrieving Docker image layers, caching compilation outputs, and managing versioned build environments.",
      "description_length": 375,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Archive_extract",
      "library": "obuilder",
      "description": "Fetches and extracts base images in `.tar.gz` format into a specified directory. Initializes the root filesystem by downloading the image from a given URL and extracting its contents. Useful for setting up container environments from remote archives.",
      "description_length": 250,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.S",
      "library": "obuilder",
      "description": "This module defines core types and interfaces for constructing and logging build processes. It includes identifiers for build steps, tags for categorizing log output, and abstract types for storage, sandboxing, building, fetching, and Docker command execution. Concrete use cases include orchestrating container image builds with detailed step tracking and structured logging.",
      "description_length": 376,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Store_spec",
      "library": "obuilder",
      "description": "This module defines store configuration types like `Btrfs`, `Zfs`, `Rsync`, and `Docker`, with operations to parse and convert them from strings or command-line arguments. It supports concrete use cases such as validating rsync modes, initializing specific store implementations, and formatting store configurations. Functions like `to_store` and `v` enable direct instantiation and parsing of storage backends for use in command-line interfaces.",
      "description_length": 446,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Zfs_clone",
      "library": "obuilder",
      "description": "This module provides a function to clone a ZFS volume representing a base image into a target root filesystem directory. It works with ZFS volumes named `obuilder/base-image/<base>` and initializes the specified `rootfs` path by cloning the volume. A concrete use case is setting up isolated build environments by efficiently duplicating preconfigured base images.",
      "description_length": 364,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_store",
      "library": "obuilder",
      "description": "This module stores build results as Docker images, managing their creation, deletion, and caching. It provides operations to build images under unique IDs, retrieve their paths, and handle cache snapshots with user-defined ownership. Use cases include efficient Docker image management for CI/CD pipelines and isolated, reproducible build environments with log tracking and space monitoring.",
      "description_length": 391,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Builder",
      "library": "obuilder",
      "description": "This module orchestrates the execution of builds using a store and sandbox, providing operations to build, delete, prune, and monitor build artifacts. It handles build contexts and specifications, managing resource allocation, caching, and storage efficiency. Use cases include running container image builds, cleaning up obsolete artifacts, and monitoring storage usage during continuous integration workflows.",
      "description_length": 411,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Zfs_store",
      "library": "obuilder",
      "description": "This module manages build artifacts using ZFS snapshots, providing operations to build, store, and retrieve results based on unique identifiers. It supports atomic build operations with snapshot isolation, cache management with versioning, and space monitoring via `df`. Use cases include storing ephemeral build environments, caching dependencies, and tracking build logs and results efficiently on ZFS-backed systems.",
      "description_length": 419,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Context",
      "library": "obuilder",
      "description": "This module creates and manages build contexts for constructing container images. It provides the `v` function to initialize a context with parameters like environment variables, user settings, work directory, shell command, and secrets, all used during the image build process. The context is tied to a source directory on the host system, which serves as the root for copy operations into the image.",
      "description_length": 401,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Config",
      "library": "obuilder",
      "description": "This module defines the configuration for sandboxed build steps, including the working directory, command arguments, environment variables, and networking settings. It supports structured handling of mounts and secrets through its submodules, enabling precise control over filesystem access and secure credential injection during containerized builds. Direct use cases include specifying isolated build environments with controlled dependencies and sensitive data.",
      "description_length": 464,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Rsync_store",
      "library": "obuilder",
      "description": "This module implements a build artifact store using rsync for efficient data transfer and storage management. It supports operations to build, retrieve, and delete artifacts identified by unique IDs, and provides caching mechanisms with configurable copy strategies (copy, hardlink, unsafe hardlink). It works with string paths, build IDs, and user specifications, and is used to manage isolated, versioned build environments and their outputs in a disk-efficient manner.",
      "description_length": 471,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_sandbox",
      "library": "obuilder",
      "description": "This module runs sandboxed builds using Docker, providing functions to execute configurations in isolated environments, copy files between contexts and containers, and manage build artifacts. It works with Docker containers, Unix file descriptors, and OBuilder specifications to handle tasks like building images, extracting files from containers, and generating Docker CLI commands. Concrete use cases include executing untrusted code in isolated filesystems, building reproducible Docker images from high-level specs, and extracting specific files from completed builds.",
      "description_length": 572,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Docker_builder",
      "library": "obuilder",
      "description": "This module implements a Docker-based build system that executes builds using specifications, manages resource cleanup, and tracks build results in a store. It provides operations to build images, delete specific builds, prune old entries based on last use time, and monitor storage metrics such as free space and cache efficiency. Concrete use cases include automated image building with dependency tracking, cache-aware storage management, and health monitoring of the build infrastructure.",
      "description_length": 492,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Xfs_store",
      "library": "obuilder",
      "description": "This module implements a build result store using XFS with reflink support, enabling efficient snapshots and deduplication. It provides operations to build, retrieve, delete, and manage isolated build environments and their outputs, along with cache management using versioned snapshots. The module works directly with filesystem paths and identifiers, supporting concurrent-safe builds and log tracking.",
      "description_length": 404,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Obuilder.Docker",
      "library": "obuilder",
      "description": "This module provides operations for orchestrating Docker-based workflows, including managing images, containers, and volumes with support for mounting paths, copying volumes, and executing commands within containers. It interacts with Docker's resource identifiers, filesystems, and image configurations to enable tasks like initializing root filesystems from base images and extracting environment variables for build environments. Key use cases involve container image assembly, build environment setup, and automated execution of Docker workflows requiring precise resource management.",
      "description_length": 588,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder.Native_sandbox",
      "library": "obuilder",
      "description": "This module executes sandboxed builds using a native implementation, providing a `run` function that performs operations in an isolated environment rooted at a specified directory. It works with a `config` type to define sandbox settings, which can be serialized and used via command-line interfaces. Concrete use cases include securely running untrusted code during package builds or testing, where isolation and controlled execution are critical.",
      "description_length": 448,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obuilder",
      "library": "obuilder",
      "description": "This module orchestrates container image builds with structured logging, sandboxed execution, and artifact storage. It provides functions to define build contexts, execute Docker-based workflows, and manage build results using storage backends like Btrfs, ZFS, and rsync. Concrete use cases include automated Docker image assembly, reproducible builds with isolated environments, and efficient caching of build artifacts.",
      "description_length": 421,
      "index": 23,
      "embedding_norm": 0.9999998807907104
    }
  ],
  "filtering": {
    "total_modules_in_package": 24,
    "meaningful_modules": 24,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 250,
    "avg_description_length": 404.75,
    "embedding_file_size_mb": 0.34827327728271484
  }
}