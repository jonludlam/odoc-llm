{
  "package": "zbar",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:12.989089",
  "modules": [
    {
      "module_path": "Zbar.ImageScanner",
      "library": "zbar",
      "description": "Handles QR code and barcode scanning from images using the ZBar library. It provides configuration options for symbol types, caching behavior, and decoding parameters. This module is used to detect and decode symbols in image data, such as processing frames from a video stream or static image files.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zbar.Symbol",
      "library": "zbar",
      "description": "This module provides access to decoded symbol data and type information from QR codes and other barcodes. It works with the `t` type representing a decoded symbol and the `symbology` type listing supported encoding formats. Use it to extract the string content and identify the encoding of individual symbols detected in images or video frames.",
      "description_length": 344,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zbar.Video",
      "library": "zbar",
      "description": "Handles video capture setup and frame streaming from devices like webcams. It provides functions to configure video device parameters such as size, interface version, and I/O mode before opening the device, and supports reading a stream of images for real-time QR code decoding. Direct use cases include capturing live video from `/dev/video0` and processing each frame to detect QR codes.",
      "description_length": 389,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zbar.Image",
      "library": "zbar",
      "description": "Handles image data for QR code decoding by converting pixel formats and managing memory. Works with raw image buffers and fourcc format codes. Used to prepare video frames for symbol extraction by converting them to grayscale.",
      "description_length": 226,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zbar",
      "library": "zbar",
      "description": "This module enables QR code and barcode decoding from images and video streams using the ZBar library. It supports configuring symbol types, adjusting verbosity, and processing image data from static files or live video input. The `t` type represents decoded symbols, while `symbology` identifies supported formats like QR Code or EAN-13. Video capture is handled through device configuration and frame streaming, allowing real-time decoding from sources like webcams.",
      "description_length": 468,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 468,
    "min_description_length": 226,
    "avg_description_length": 345.4,
    "embedding_file_size_mb": 0.018596649169921875
  }
}