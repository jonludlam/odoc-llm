{
  "package": "systemverilog",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:10:33.164509",
  "modules": [
    {
      "module_path": "Systemverilog.Grammar.LocalParam",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing local parameter declarations in SystemVerilog, supporting both implicitly and explicitly typed parameters with associated assignments. It includes a function `to_s` that converts a local parameter declaration to its string representation. Useful for generating SystemVerilog code from an abstract syntax tree.",
      "description_length": 361,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.Description",
      "library": "systemverilog",
      "description": "This module defines a type `t` that represents a SystemVerilog package, consisting of a name and a list of package items. It provides operations to construct, deconstruct, and manipulate package data structures. Use this module when parsing or generating SystemVerilog code that involves package definitions and their contents.",
      "description_length": 327,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.PackageItem",
      "library": "systemverilog",
      "description": "This module defines a single variant type `t` representing package items in SystemVerilog, specifically capturing `Localparam` declarations. It works with the `LocalParam.t` type to model constant parameters scoped within packages. Use this type to parse, analyze, or generate SystemVerilog package items that declare local constants.",
      "description_length": 334,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.IntegerVectorType",
      "library": "systemverilog",
      "description": "This module defines an algebraic data type representing integer vector types in SystemVerilog, specifically `Bit`, `Logic`, and `Reg`. It includes a function `to_s` that converts each type to its corresponding string representation. This module is used to model and manipulate fundamental hardware types in a SystemVerilog parser or compiler.",
      "description_length": 342,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.Literal",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing different kinds of literals in SystemVerilog, including integers, strings, and numeric literals in hexadecimal, decimal, binary, and octal formats. It provides a conversion function `to_s` that renders these literals as strings. This module is used to construct and manipulate literal values during parsing or code generation tasks in SystemVerilog tooling.",
      "description_length": 409,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.IntegerVectorType",
      "library": "systemverilog",
      "description": "This module defines a type `t` representing integer vector types in SystemVerilog, specifically `Bit`, `Logic`, and `Reg`. It is used to distinguish between different kinds of vector declarations in hardware description code. Concrete use cases include type checking and code generation in SystemVerilog parsers and compilers.",
      "description_length": 326,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.IntegerAtomType",
      "library": "systemverilog",
      "description": "Represents primitive integer types in SystemVerilog, including byte, shortint, int, longint, integer, and time. Used to model data types in hardware description and verification code. Directly supports type checking, width inference, and semantic analysis in SystemVerilog toolchains.",
      "description_length": 284,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.ParamAssignment",
      "library": "systemverilog",
      "description": "Handles parameter assignments in SystemVerilog code by pairing parameter names with optional literal values. Converts parameter assignments to string representations for output or further processing. Useful when generating or modifying SystemVerilog module instances with parameter overrides.",
      "description_length": 292,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.PackageItem",
      "library": "systemverilog",
      "description": "This module defines a single type `t` representing package items in SystemVerilog, specifically supporting the `Localparam` variant for local parameter declarations. It includes a `print` function to output the string representation of a package item directly. This module is used to model and display local parameter definitions within SystemVerilog packages.",
      "description_length": 360,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.Signing",
      "library": "systemverilog",
      "description": "Represents signed or unsigned signal declarations in SystemVerilog. Used to distinguish between signed and unsigned data types in hardware descriptions. Directly supports parsing and emitting SystemVerilog code with explicit sign qualifiers.",
      "description_length": 241,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.LocalParam",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing local parameter declarations in SystemVerilog, with constructors for implicitly and explicitly typed parameters. It works with lists of `ParamAssignment.t` values and pairs of `DataType.t` with such lists. Concrete use cases include parsing and representing local parameter statements in SystemVerilog code, distinguishing between typed and implicit parameter assignments.",
      "description_length": 424,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types.Literal",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing different kinds of literals in SystemVerilog, including integers, strings, and numeric literals in hexadecimal, decimal, binary, and octal formats. It provides constructors for creating these literal values and pattern matching support for processing them. This module is used to model constant expressions and primitive values in SystemVerilog parsing and code generation tasks.",
      "description_length": 431,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.IntegerAtomType",
      "library": "systemverilog",
      "description": "This module defines a variant type representing different integer and time data types in SystemVerilog, such as `Byte`, `Int`, and `Time`. It includes a function `to_s` that converts each type to its corresponding string representation. This module is used to model and manipulate fundamental numeric types when processing or generating SystemVerilog code.",
      "description_length": 356,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.Description",
      "library": "systemverilog",
      "description": "This module defines a type `t` representing SystemVerilog package descriptions, encapsulating a package name and a list of package items. It provides the `print` function to output the contents of a package description to standard output. This module is used to inspect or debug the structure of parsed SystemVerilog packages during analysis or transformation tasks.",
      "description_length": 366,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.ParamAssignment",
      "library": "systemverilog",
      "description": "Handles parameter assignments in SystemVerilog code by pairing parameter names with optional literal values. Works with tuples of strings and optional literals, where literals can represent numeric, string, or other constant values. Used to model parameter overrides in module instantiations or package imports.",
      "description_length": 311,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.DataType",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing SystemVerilog data types, specifically integer vector and atomic types, each optionally signed. It provides a function `to_s` to convert these type representations into their corresponding string forms. Use this module when parsing or generating SystemVerilog code that requires handling of basic integer data types with optional signing.",
      "description_length": 390,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.DataType",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing different categories of data types in SystemVerilog, specifically integer vector and atomic types, each optionally annotated with a signing qualifier. It works with structured types that capture the syntactic elements of SystemVerilog's type system, such as `IntegerVectorType.t` and `IntegerAtomType.t`, combined with optional signing information. Concrete use cases include parsing and representing type declarations in SystemVerilog source code, enabling type analysis and transformation in tools like linters or compilers.",
      "description_length": 578,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.Signing",
      "library": "systemverilog",
      "description": "This module defines a type `t` with two variants, `Signed` and `Unsigned`, representing the signing of numeric types in SystemVerilog. It includes a function `to_s` that converts these variants to their corresponding string representations. This module is used to handle sign qualifiers in SystemVerilog type declarations and expressions.",
      "description_length": 338,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Lexer",
      "library": "systemverilog",
      "description": "This module processes lexical analysis for SystemVerilog code by advancing through input buffers, reading tokens, and handling string literals. It operates on `Lexing.lexbuf` and `Buffer.t` structures to produce tokens consumed by the parser. Concrete use cases include parsing SystemVerilog source files, extracting identifiers, keywords, and string values during compilation.",
      "description_length": 377,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar",
      "library": "systemverilog",
      "description": "This module provides a comprehensive set of data types and operations for representing and manipulating SystemVerilog constructs such as parameters, literals, types, and package items. Core data types include variants for integer and vector types (e.g., `Bit`, `Logic`, `Int`, `Time`), literals in various bases, signing qualifiers (`Signed`, `Unsigned`), and structures for parameter declarations and assignments. Operations include converting types to string representations with `to_s` or `print`, enabling code generation and inspection of SystemVerilog elements. Examples include constructing a `Localparam` with a typed value, rendering a signed 8-bit logic vector as a string, or printing a package with its local parameter declarations.",
      "description_length": 744,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Parser",
      "library": "systemverilog",
      "description": "Parses SystemVerilog source code into an abstract syntax tree using a lexer function and a lexbuf input buffer. It processes tokens such as identifiers, data types (logic, reg, int), literals (binary, decimal, hex), and structural elements (package, endpackage, semicolons). Useful for building tools that analyze or transform SystemVerilog code, such as linters, compilers, or code generators.",
      "description_length": 394,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types",
      "library": "systemverilog",
      "description": "This module hierarchy models the core elements of SystemVerilog's type and package system, enabling structured representation and manipulation of types, constants, and package constructs. Key data types include integer vectors (bit, logic, reg), primitive integer types, signed/unsigned qualifiers, local parameters, package items, and literals for constant values. Operations allow parsing, analysis, and generation of SystemVerilog code, such as constructing package definitions with local constants, distinguishing signed integer types, or representing parameter assignments with literal values. Example uses include building AST nodes for a compiler, validating type correctness in package imports, or emitting SystemVerilog source from a high-level description.",
      "description_length": 766,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog",
      "library": "systemverilog",
      "description": "This module processes SystemVerilog source code through lexical analysis, parsing, and structured representation, enabling the construction, manipulation, and generation of SystemVerilog elements. It operates on core data types such as `Lexing.lexbuf`, `Buffer.t`, and variants representing types (`Bit`, `Logic`, `Int`), literals, parameters (`Localparam`), and package constructs. Key operations include token extraction, type conversion to string (`to_s`), and AST node creation for code analysis or generation. Example uses include parsing a source file into tokens, constructing a signed 8-bit logic vector, building a package with local constants, or emitting SystemVerilog code from an abstract representation.",
      "description_length": 717,
      "index": 22,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 23,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 766,
    "min_description_length": 241,
    "avg_description_length": 411.6521739130435,
    "embedding_file_size_mb": 0.08396625518798828
  }
}