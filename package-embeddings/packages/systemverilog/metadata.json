{
  "package": "systemverilog",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 23,
  "creation_timestamp": "2025-08-15T12:10:13.348126",
  "modules": [
    {
      "module_path": "Systemverilog.Grammar.IntegerVectorType",
      "library": "systemverilog",
      "description": "Represents integer vector types in SystemVerilog with variants for `bit`, `logic`, and `reg`. Converts each type to its corresponding string representation. Useful for generating or parsing SystemVerilog code involving typed variables.",
      "description_length": 235,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.ParamAssignment",
      "library": "systemverilog",
      "description": "Handles parameter assignments in SystemVerilog code by pairing parameter names with optional literal values. Works with tuples of strings and optional literals, where literals can represent numeric, string, or other constant values. Used to model and manipulate parameter overrides in module instantiations or configuration blocks.",
      "description_length": 331,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.LocalParam",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing local parameter declarations in SystemVerilog, with constructors for implicitly and explicitly typed parameters. It includes a function `to_s` that converts a local parameter declaration to its string representation. Useful for generating SystemVerilog code from abstract syntax trees.",
      "description_length": 337,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types.Signing",
      "library": "systemverilog",
      "description": "This module defines a simple enumeration type `t` with two variants, `Signed` and `Unsigned`, representing the signing of data types in SystemVerilog. It is used to distinguish between signed and unsigned interpretations of bit vectors in hardware descriptions. Concrete use cases include annotating register or wire declarations with sign information in a SystemVerilog AST.",
      "description_length": 375,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.IntegerAtomType",
      "library": "systemverilog",
      "description": "Represents primitive integer types in SystemVerilog, including byte, shortint, int, longint, integer, and time. Used to model data types for hardware description and verification tasks. Directly supports type checking and semantic analysis in SystemVerilog tooling.",
      "description_length": 265,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.DataType",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing different SystemVerilog data types, specifically integer vector and atomic types, each optionally signed. It includes a function `to_s` that converts these type representations into their corresponding string forms. Use cases include parsing and pretty-printing SystemVerilog type declarations in a compiler or linter tool.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.Literal",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing different kinds of literals in SystemVerilog, including integers, strings, and numeric literals in hexadecimal, decimal, binary, and octal formats. It provides constructors for creating these literal values and supports pattern matching for processing or analyzing SystemVerilog code. Use this module when parsing or manipulating literal expressions in a SystemVerilog abstract syntax tree.",
      "description_length": 442,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types.PackageItem",
      "library": "systemverilog",
      "description": "This module defines a single variant type `t` representing a `Localparam` item in SystemVerilog, using the `Systemverilog.Grammar_types.LocalParam.t` type. It is used to model local parameter declarations within SystemVerilog packages. Concrete use cases include parsing and representing local parameters in hardware description code.",
      "description_length": 334,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.Description",
      "library": "systemverilog",
      "description": "This module defines a data type `t` that represents a SystemVerilog package, consisting of a name and a list of package items. It provides operations to construct, deconstruct, and manipulate package values, enabling precise modeling of SystemVerilog package declarations. Use this module when parsing or generating SystemVerilog code that involves package definitions and their contents.",
      "description_length": 388,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar_types.DataType",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing different categories of data types in SystemVerilog, specifically distinguishing between integer vector types and integer atom types, each optionally annotated with a signing. It is used to model and manipulate type declarations in SystemVerilog code, enabling precise type analysis and transformation in tools such as linters or synthesizers.",
      "description_length": 395,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.ParamAssignment",
      "library": "systemverilog",
      "description": "Handles parameter assignments in SystemVerilog code by pairing parameter names with optional literal values. Converts parameter assignments to string representations for output or debugging. Useful when generating or analyzing SystemVerilog module instantiations with parameter overrides.",
      "description_length": 288,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.Description",
      "library": "systemverilog",
      "description": "This module defines a type `t` representing SystemVerilog package descriptions, encapsulating a package name and a list of package items. It provides the `print` function to output the structure of a package to standard output. This is used for inspecting or debugging the contents of SystemVerilog packages during analysis or transformation tasks.",
      "description_length": 348,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.PackageItem",
      "library": "systemverilog",
      "description": "This module defines a single type `t` representing package items in SystemVerilog, specifically supporting the `Localparam` variant for local parameter declarations. It includes a `print` function to output the string representation of a package item directly. This module is used to model and display local parameter definitions within SystemVerilog packages.",
      "description_length": 360,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.Signing",
      "library": "systemverilog",
      "description": "This module defines a type `t` with two variants, `Signed` and `Unsigned`, representing the signing of numeric types in SystemVerilog. It includes the function `to_s` that converts a signing value to its string representation. This module is used to handle and display the signedness of variables or expressions in SystemVerilog code analysis or generation.",
      "description_length": 357,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types.LocalParam",
      "library": "systemverilog",
      "description": "This module represents local parameter declarations in SystemVerilog, distinguishing between implicitly and explicitly typed parameters. It provides constructors for creating local parameters with a list of assignments and an optional data type. It is used to model `localparam` declarations in the AST, supporting both untyped and typed forms with assigned expressions.",
      "description_length": 370,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types.IntegerVectorType",
      "library": "systemverilog",
      "description": "This module defines a variant type `t` representing integer vector types in SystemVerilog, specifically `Bit`, `Logic`, and `Reg`. It is used to distinguish between different kinds of vector declarations in hardware description code. Concrete use cases include type checking and code generation in SystemVerilog parsers and compilers.",
      "description_length": 334,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar.Literal",
      "library": "systemverilog",
      "description": "This module defines a variant type for representing different kinds of literals in SystemVerilog, including integers, strings, and numeric literals in hexadecimal, decimal, binary, and octal formats. It provides a conversion function `to_s` that renders these literals into their string representations. This module is used to handle constant values during parsing or code generation tasks in SystemVerilog tooling.",
      "description_length": 415,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Grammar.IntegerAtomType",
      "library": "systemverilog",
      "description": "This module defines a set of integer atom types used in SystemVerilog, including byte, shortint, int, longint, integer, and time. It provides a function `to_s` to convert these types to their string representations. This is useful for parsing, code generation, and type handling in SystemVerilog tooling.",
      "description_length": 304,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Parser",
      "library": "systemverilog",
      "description": "Parses SystemVerilog source code into an abstract syntax tree using a lexer function and a lexbuf input buffer. It processes tokens such as identifiers, keywords, numeric literals, and punctuation to construct a description of the input. This module is used to analyze and transform SystemVerilog code during compilation or tooling tasks.",
      "description_length": 338,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar",
      "library": "systemverilog",
      "description": "This module implements the core data types and representations for SystemVerilog literals, integer types, parameters, and package constructs. It includes variant types for literals, signing, vector and atomic types, parameter assignments, and package items, each with functions to convert to string representations. These are used for parsing, type handling, code generation, and analysis in SystemVerilog tooling pipelines.",
      "description_length": 424,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Systemverilog.Grammar_types",
      "library": "systemverilog",
      "description": "This module provides data types and variants for representing fundamental SystemVerilog constructs such as literals, signing, integer vector types, and parameter assignments. It includes specific types for modeling data declarations, type annotations, and package items used in SystemVerilog ASTs. Concrete use cases include parsing, type checking, and code generation in SystemVerilog tools like linters, synthesizers, and compilers.",
      "description_length": 434,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog.Lexer",
      "library": "systemverilog",
      "description": "This module processes lexical analysis for SystemVerilog code, advancing the input buffer to the next line and reading tokens according to predefined lexical rules. It operates on `Lexing.lexbuf` and `Buffer.t` structures, producing tokens consumed by the parser. It is used during source code parsing to identify identifiers, keywords, and literals specific to the SystemVerilog hardware description language.",
      "description_length": 410,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Systemverilog",
      "library": "systemverilog",
      "description": "This module implements core data types and representations for SystemVerilog literals, integer types, parameters, and package constructs, with functions to convert these structures to string representations. It supports parsing, type handling, code generation, and analysis in SystemVerilog tooling pipelines, working directly with `Lexing.lexbuf` and `Buffer.t` for lexical processing and AST construction. Concrete use cases include linters, synthesizers, and compilers handling SystemVerilog source code transformations.",
      "description_length": 523,
      "index": 22,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 23,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 523,
    "min_description_length": 235,
    "avg_description_length": 364.4347826086956,
    "embedding_file_size_mb": 0.33368968963623047
  }
}