{
  "package": "plato",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 58,
  "creation_timestamp": "2025-06-18T16:46:14.032915",
  "modules": [
    {
      "module_path": "Plato.Collections.Abc.MutableMappingOfHashtbl.H",
      "description": "This module provides key-based operations for managing dynamic data structures, including creating, updating, and iterating over elements via hash tables or generic key-value stores. It supports sequence-based construction and modification, such as building structures from sequences or replacing values associated with specific keys. Use cases include efficiently handling configuration settings, caching systems, or any scenario requiring frequent key-driven data updates and queries.",
      "description_length": 486,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Collections.Abc.PolymorphicMutableMappingOfHashtbl.H",
      "description": "This module offers key-based operations for managing dynamic data structures, including insertion, deletion, lookup, and iteration over key-value pairs, with support for in-place filtering and statistical analysis. It works with hash tables and generic key-value stores, enabling construction from sequences and updates via sequence-based replacement. Use cases include efficient data aggregation, real-time configuration management, and scenarios requiring mutable, key-driven data processing.",
      "description_length": 494,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.WindowsPath.PurePath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another, reversing traversal order, and applying functions to each element with its index.",
      "description_length": 349,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.Path.PurePath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another, reversing traversal order, and applying functions to each element with index.",
      "description_length": 345,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.PosixPath.PurePath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another, reversing traversal, and applying functions to each element with index.",
      "description_length": 339,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc.BuildSequence",
      "description": "Provides operations to determine the length of a sequence and retrieve elements by integer index. Works with a sequence type `t` and elements of type `e`. Used to access specific positions in a precomputed list of values during processing.",
      "description_length": 239,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc.BuildMutableMapping",
      "description": "Provides operations to modify, retrieve, and iterate over key-value pairs in a mutable mapping structure. Works with distinct key, input value, and output value types, enabling bidirectional conversions between values. Used to manage dynamic associations where values need to be transformed or accessed based on specific keys.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc.MutableMappingOfHashtbl",
      "description": "Provides operations for managing key-value mappings using a hash table, including equality checks and hashing for keys. Works with custom key and value types, ensuring consistent behavior between equality and hash functions. Used to implement efficient lookups and updates in scenarios requiring custom comparison logic, such as handling mutable objects or non-standard equality semantics.",
      "description_length": 389,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc.BuildPolymorphicMutableMapping",
      "description": "Sets, removes, and retrieves values associated with keys in a mutable mapping structure. Iterates over key-value pairs and returns the size of the mapping. Designed for dynamic data management where keys and values are user-defined types.",
      "description_length": 238,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc.PolymorphicMutableMappingOfHashtbl",
      "description": "Provides operations for creating and manipulating a mutable, polymorphic mapping based on hash tables. Works with arbitrary key types and relies on user-provided equality and hashing functions to manage key comparisons and storage. Used to implement custom associative structures where key equivalence and hashing need to be explicitly defined, such as in domain-specific data models or when handling complex object comparisons.",
      "description_length": 428,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.WindowsPath.PurePath",
      "description": "manages path structures through indexed access, iteration, and folding, using a `t` type and `path` alias to represent sequences of elements. It supports checking if one path is contained within another, reversing traversal order, and applying indexed functions to each element. Operations include membership checks, element-wise transformations, and structural traversals. For example, it can reverse a path's order or apply a function that depends on an element's position.",
      "description_length": 475,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.WindowsPath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Used to traverse hierarchical data, check for element existence, and apply transformations or side effects during iteration.",
      "description_length": 338,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.Path.PurePath",
      "description": "manages path structures through indexed access, iteration, and folding, with support for membership checks, reversal, and element-wise transformations. It operates on a `t` type and `path` alias, enabling precise manipulation of path components. Users can traverse paths in reverse, apply functions with index awareness, or determine if one path is contained within another. Examples include extracting specific elements, reversing the order of components, or transforming each element based on its position.",
      "description_length": 508,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.Path.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another, reversing traversal order, and applying custom functions during iteration or folding.",
      "description_length": 353,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.PosixPath.PurePath",
      "description": "manipulates path structures through indexed access, iteration, and folding, using a `t` type and `path` alias to represent sequences of elements. It supports membership checks, reverse traversal, and element-wise transformations with index tracking. Operations include `nth`, `iter`, `fold`, and `mem`, allowing precise control over path elements. For example, it can extract the third element of a path or reverse the order of its components.",
      "description_length": 443,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.PosixPath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another and processing elements in forward or reversed order.",
      "description_length": 320,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.PurePath.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another and processing elements in forward or reversed order.",
      "description_length": 320,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.ConfigParser.SectionProxy",
      "description": "This module enables key-value operations on structured data, supporting insertion, deletion, lookup, and iteration over pairs with customizable key and value types. It specializes in string-based keys and optional string values, facilitating data transformation or routing within proxy workflows. Use cases include dynamic data mapping and conditional value manipulation in systems requiring flexible key-based access.",
      "description_length": 418,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections.Abc",
      "description": "Returns the number of elements in a collection and retrieves an element by integer index. Operates on a structured type `t` containing elements of type `e`. Used to query the size of a data structure and access specific items by position.",
      "description_length": 238,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Datetime.Timedelta",
      "description": "This module offers arithmetic operations (addition, subtraction, multiplication, division) and unit conversions for time durations, working with atomic units like days, seconds, and microseconds. It provides comparison functions, hashing, and string representations for duration values, enabling tasks such as interval analysis or timestamp manipulation. Specific use cases include calculating elapsed time intervals, validating time differences, or standardizing time measurements across systems.",
      "description_length": 497,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Datetime.Date",
      "description": "The module offers date creation, parsing, formatting, and manipulation functions, primarily working with date values of type `t`, enabling operations like constructing dates from timestamps or ISO strings, extracting calendar components, and performing arithmetic. It supports relational comparisons, weekday extraction, and temporal resolution, suitable for tasks such as scheduling, data validation, and generating human-readable date representations. Specific use cases include converting between date formats, calculating date differences, and handling calendar-based computations.",
      "description_length": 585,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Datetime.Time",
      "description": "The module provides functions for creating, querying, and manipulating time values, including extracting components like hour, minute, and second, handling time zones and offsets, and performing comparisons and formatting. It operates on time objects (type `t`) to retrieve properties such as daylight saving time offsets, minimum and maximum time values, and resolution. Use cases include timezone conversions, time calculations, and precise time tracking in applications requiring accurate time management.",
      "description_length": 508,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Datetime.Datetime",
      "description": "The module provides operations for creating, manipulating, and converting datetime values, including timezone adjustments, arithmetic calculations, and component extraction (e.g., hour, minute). It works with types such as datetime, time zones (tzinfo), and date/time components (Date.t, Time.t), enabling precise timezone-aware computations. Use cases include scheduling systems, log analysis, and applications requiring localized time formatting or interval arithmetic.",
      "description_length": 471,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.WindowsPath",
      "description": "manages hierarchical path structures through indexed access, iteration, and folding, using a `t` type and `path` alias to represent sequences of elements. It supports operations like checking containment, reversing order, and applying functions that depend on element positions. It enables traversal, transformation, and inspection of path elements, such as reversing a path or applying a function to each element with its index. Examples include checking if a segment exists in a path or modifying elements based on their position.",
      "description_length": 532,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.PosixPath",
      "description": "represents path structures as sequences of elements, offering indexed access, iteration, and folding with operations like `nth`, `iter`, `fold`, and `mem`. It supports element-wise transformations, membership checks, and reverse traversal, allowing manipulation of path components by index or value. For instance, it can extract specific elements, reverse the path order, or check if one path is contained within another. The core data types are `t` and `path`, used to model and process path structures efficiently.",
      "description_length": 516,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.Path",
      "description": "manages path structures through indexed access, iteration, and folding, with operations like membership checks, reversal, and element-wise transformations. It works with a `t` type and `path` alias, allowing users to extract specific elements, reverse component order, or apply functions that depend on index positions. Path containment can be checked, and custom transformations can be applied during traversal. Examples include reversing a path, mapping elements based on their index, or checking if one path is a subset of another.",
      "description_length": 534,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib.PurePath",
      "description": "manages path structures through indexed access, iteration, and folding, with support for checking containment and processing elements in both directions. It operates on a `t` type and a `path` alias, enabling traversal and transformation of path components. Users can check if one path is contained within another or reverse the order of elements. Examples include extracting specific components by index or accumulating values across a path's elements.",
      "description_length": 453,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.DefaultMap",
      "description": "This module offers operations for managing associative data through key-value pairs, including access, modification, iteration, and transformation similar to Python's dictionary API. It works with a parameterized map structure where keys are strings and values can be of any type, enabling flexible data organization. Common use cases include configuration management, data aggregation, and caching scenarios requiring dynamic key-based storage and retrieval.",
      "description_length": 459,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.BasicInterpolation",
      "description": "This module offers operations for managing key-value stores, including iteration, lookup, and modification, alongside value interpolation for type-safe string and structured data substitution. It works with string keys and polymorphic value types, enabling dynamic content generation and configuration handling. Use cases include templating systems, configuration management, and data transformation pipelines where runtime value replacement is required.",
      "description_length": 454,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.ExtendedInterpolation",
      "description": "This module handles structured data manipulation through key-value operations, enabling insertion, deletion, lookup, and transformation of elements using string keys and polymorphic value types. It supports dynamic value interpolation and combination, making it suitable for tasks like configuration management or template rendering. The functions facilitate iterating over pairs and modifying structured data while maintaining key-based accessibility.",
      "description_length": 452,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.ConfigParser",
      "description": "The module provides dictionary-like operations for manipulating a key-value store with string keys and polymorphic values, supporting tasks such as configuration management and dynamic data handling. It includes functions for insertion, deletion, lookup, and transformation, enabling efficient processing of structured data in scenarios like parsing configuration files or managing application settings. The generic design allows for type-agnostic value storage, making it adaptable to environments where configuration data varies in type.",
      "description_length": 539,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Os.Path",
      "description": "Joins a base path with a list of components into a single normalized path string. Compares file system metadata to determine if two paths refer to the same file. Transforms raw path strings into a standardized format suitable for system calls.",
      "description_length": 243,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Os.DirEntry",
      "description": "Returns the name, full path, and inode number of a file system entry. Determines if the entry is a directory, file, or symlink, and retrieves detailed metadata with optional symlink following. Works with file system entries encountered during directory traversal.",
      "description_length": 263,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Pathlib.PathParents",
      "description": "Provides operations to access, iterate over, and fold through elements of a path structure, indexed by integers. Works with a `t` type representing a path and a `path` type alias for the same underlying structure. Enables checking membership of a path within another and processing elements in forward or reversed order.",
      "description_length": 320,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Configparser.Map",
      "description": "This module offers operations for managing key-value associations, including retrieval, modification, and traversal of entries, with a focus on string-based keys and flexible value types. It provides foundational structures for building associative maps, enabling efficient data indexing and lookup. Use cases include configuration management, caching systems, and data aggregation where structured key-value storage is required.",
      "description_length": 429,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Configparser.SectionProxy",
      "description": "This module supports dictionary-like operations for managing key-value pairs, including insertion, deletion, lookup, and iteration, with specialized handling for string-based keys and optional string values. It enables data transformation and normalization by mapping or converting between structured data formats using these key-value relationships. Specific use cases include processing configuration data, translating between data representations, or managing optional metadata fields.",
      "description_length": 488,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "NoPlato.Str",
      "description": "The library offers operations for matching, searching, replacing, splitting, and extracting substrings using regular expressions on byte sequences, supporting group capturing, case insensitivity, and backreferences. It handles string manipulation tasks like delimiter-based splits, bounded slicing, and position tracking, making it suitable for text processing and data extraction scenarios. Its focus on byte-level operations limits its use to non-Unicode text, distinguishing it from Unicode-aware alternatives.",
      "description_length": 513,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Helpers.Slice",
      "description": "Provides operations to extract and transform subparts of list-like structures using start, stop, and step parameters, with support for custom slicing functions and concatenation. Works with list-like types and custom concatenation functions to build new structures from slices. Used to implement complex data extraction and reassembly in data processing pipelines.",
      "description_length": 364,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Array",
      "description": "Retrieves elements from an array by index, modifies elements in place, returns the length of an array, and extracts subarrays based on start, stop, and step parameters. Operates on mutable arrays of any type. Used for direct element access in algorithms, in-place updates during data processing, and slicing sequences for pattern matching or iteration.",
      "description_length": 352,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Collections",
      "description": "Provides operations to determine the size of a structured collection and access elements by their integer index. The core type `t` represents a collection of elements of type `e`, with functions to retrieve the count and individual items. For example, it allows fetching the third element from a list or array, or checking the total number of items in a set. These operations enable direct manipulation and inspection of structured data sequences.",
      "description_length": 447,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Plato.Configparser",
      "description": "The module provides key-value store operations such as iteration, lookup, and modification, designed for managing configuration data. It works with a structure where keys are strings and values are parameterized and type-tagged. Use cases include configuration management and handling dynamic data with varying value types.",
      "description_length": 323,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Datetime",
      "description": "combines arithmetic, conversion, and comparison operations for time durations with date, time, and datetime manipulation, enabling precise control over temporal data. It supports atomic time units, date and time components, and timezone-aware computations through types like `t`, `datetime`, and `tzinfo`. Users can calculate elapsed time, convert between formats, handle timezone adjustments, and perform calendar-based operations. Examples include validating time intervals, generating human-readable timestamps, and managing scheduled events across time zones.",
      "description_length": 563,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.GenericPath",
      "description": "Compares file metadata from two Unix.stats records to determine if they represent the same file system object. Operates directly on Unix.stats data structures, which encapsulate file attributes like size, permissions, and timestamps. Used to check for file identity during operations like synchronization or caching.",
      "description_length": 316,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Grp",
      "description": "Provides functions to retrieve group information by name, by numeric ID, and all groups. Works with the struct_group type, which contains details like group name, password, GID, and member list. Used to fetch system group data for user authentication or system configuration tasks.",
      "description_length": 281,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Itertools",
      "description": "Generates infinite sequences with `count` and `repeat`, cycles through list elements with `cycle`, and accumulates values with a custom function. Combines, filters, and slices sequences using `chain`, `filterfalse`, `islice`, and `takewhile`. Supports parallel iteration with `zip_longest` and `compress`, and produces Cartesian products with `product`.",
      "description_length": 353,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.List",
      "description": "Provides operations to determine the length of a list, retrieve elements by index, and extract sublists with specified start, stop, and step parameters. Works with lists of any type, enabling direct access and segmentation of elements. Used to process sequences in algorithms requiring indexed access or range-based filtering.",
      "description_length": 326,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.NtPath",
      "description": "Provides functions to manipulate and normalize file paths, including checking if two file stats are identical, splitting drives, joining path components, and replacing alternate separators. Operates on strings and Unix file statistics. Used for cross-platform path handling and ensuring consistent file reference comparisons.",
      "description_length": 325,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Os",
      "description": "Provides operations to retrieve the name, path, and inode of a file system object. Includes checks for directory, file, and symlink status, with options to follow symbolic links. Returns detailed metadata through a stat results structure when querying file system attributes.",
      "description_length": 275,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pathlib",
      "description": "manages path structures through indexed access, iteration, and folding, with support for forward and reverse traversal. It defines a `t` type and `path` alias for path representation, along with operations to check if one path is contained within another. Users can process individual elements or aggregate values across the path using fold functions. For example, it allows extracting the third element of a path or summing numeric values embedded within its components.",
      "description_length": 471,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.PosixPath",
      "description": "Checks if two file system metadata objects represent the same file. Joins path components with a platform-specific separator and normalizes a path string. Operates on Unix file statistics and string-based path components.",
      "description_length": 221,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Pwd",
      "description": "Provides functions to retrieve user account information by UID, username, or all entries. Works with the struct_passwd type containing user details like username, UID, GID, and home directory. Used to fetch system user data for authentication or configuration purposes.",
      "description_length": 269,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Stat",
      "description": "Returns boolean results from examining file type bits in Unix file status information. Works with Unix.stats data structure to determine file characteristics. Used to check if a file is a directory, regular file, symbolic link, block device, character device, socket, or FIFO.",
      "description_length": 276,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.String",
      "description": "Provides string constants for common character sets such as whitespace, lowercase and uppercase ASCII letters, digits, and punctuation, along with a function to capitalize words in a string using a specified separator. Works with string data types and supports text formatting tasks. Used for parsing input, validating character groups, and preparing text for display or further processing.",
      "description_length": 390,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato.Time",
      "description": "Provides functions to convert Unix time structures to struct_time, and to retrieve the current time as a float. It works with the Unix.tm type and the struct_time record, which contains date and time components. Used to process and manipulate time values in applications requiring timezone-aware or precise time calculations.",
      "description_length": 325,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "plato",
      "description": "Provides functions for string manipulation, list transformations, and basic file I/O operations. Works with OCaml's native string, list, and channel types. Used to port small Python scripts to OCaml for text processing and data parsing tasks.",
      "description_length": 242,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "NoPlato",
      "description": "Provides efficient byte-level string manipulation through regular expressions, enabling pattern matching, substitution, and extraction with support for groups, case insensitivity, and backreferences. It offers operations like splitting on delimiters, bounded slicing, and tracking substring positions, tailored for non-Unicode text processing. Key data types include byte sequences and compiled regex patterns, with operations such as `replace_all`, `split_on_delim`, and `match_groups`. Examples include parsing log files, extracting fields from structured data, and modifying binary text formats.",
      "description_length": 598,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Helpers",
      "description": "Extracts and transforms subparts of list-like structures using start, stop, and step parameters, supporting custom slicing and concatenation. Operates on list-like types and user-defined concatenation functions to construct new data structures. Allows for precise data manipulation, such as extracting every other element or combining non-contiguous slices. Enables complex data reassembly in processing workflows.",
      "description_length": 414,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Plato",
      "description": "Combines array and list manipulation, sequence generation, and time/date handling with operations for indexed access, slicing, and modification. Supports mutable arrays, lists, and infinite sequences, along with time duration calculations, file metadata comparisons, and path normalization. Examples include extracting subarrays, generating repeated patterns, and checking file identity. Provides utilities for working with structured data, time values, and file system objects through typed operations and transformations.",
      "description_length": 523,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 71,
    "meaningful_modules": 58,
    "filtered_empty_modules": 13,
    "retention_rate": 0.8169014084507042
  },
  "statistics": {
    "max_description_length": 598,
    "min_description_length": 221,
    "avg_description_length": 395.7931034482759,
    "embedding_file_size_mb": 0.20763492584228516
  }
}