{
  "package": "qrencode",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:03.413428",
  "modules": [
    {
      "module_path": "Qrencode.QRinput",
      "library": "qrencode",
      "description": "This module manages input data for QR code generation, supporting the creation and appending of data chunks in specified encoding modes. It works with a mutable input structure (`t`) and handles string-based content in modes like numeric, alphanumeric, or byte. Use it to build QR code content incrementally before encoding.",
      "description_length": 324,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrencode.Basic",
      "library": "qrencode",
      "description": "Encodes text into QR codes with customizable size and margin parameters. Operates on string inputs and generates image files. Useful for creating scannable QR images from textual data like URLs or messages.",
      "description_length": 206,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Qrencode.QRcode",
      "library": "qrencode",
      "description": "This module generates QR codes from input data and encodes them into PNG images. It provides functions to convert a `QRinput.t` value into a `QRcode.t` structure, representing the QR code, and to render that structure into a PNG file with specified size, margin, and output path. It is used for creating scannable QR images directly from textual or binary data.",
      "description_length": 361,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrencode",
      "library": "qrencode",
      "description": "This module generates QR codes by encoding data in numeric, alphanumeric, byte, or Kanji modes, supporting incremental input construction, direct text encoding, and PNG image generation. The core functionality centers around the `QRinput.t` and `QRcode.t` data structures, with operations to append encoded data chunks, specify error correction levels, and render final images. Submodules handle input management, text-based QR creation with size controls, and PNG output generation. Examples include building multi-mode QR inputs step-by-step, encoding URLs into scannable images, and saving structured QR codes to disk with custom dimensions and margins.",
      "description_length": 656,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 656,
    "min_description_length": 206,
    "avg_description_length": 386.75,
    "embedding_file_size_mb": 0.014936447143554688
  }
}