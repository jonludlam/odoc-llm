{
  "package": "resto-cohttp-server",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-14T23:17:40.447684",
  "modules": [
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver.Handlers",
      "library": "resto-cohttp-server",
      "description": "This module implements HTTP request handlers for a self-contained RPC server, processing errors, CORS validation, and responses for RPC calls. It operates on Cohttp types like headers, responses, and bodies, along with Resto services and media types. It is used to serve locally registered RPC endpoints, handle method dispatch, and return properly formatted HTTP responses for success, error, and chunked output cases.",
      "description_length": 419,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver.Media_type",
      "library": "resto-cohttp-server",
      "description": "This module defines operations for handling media types, including parsing and matching media ranges, selecting preferred encodings, and constructing or destructing values based on a given media type. It works with lists of `Media_type.t` values, which encapsulate media range names, quality parameters, and serialization functions. Concrete use cases include negotiating content types from HTTP accept headers, serializing service responses into byte sequences, and selecting appropriate encodings for REST endpoints based on client preferences.",
      "description_length": 546,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make.Media_type",
      "library": "resto-cohttp-server",
      "description": "This module defines operations for handling media types in HTTP requests and responses, including parsing and matching content types, selecting appropriate encodings based on client preferences, and constructing or deconstructing data using specific encodings. It works with media type values that include MIME types, quality parameters, and serialization functions for encoding and decoding data. Concrete use cases include negotiating response formats based on the `Accept` header, serializing service outputs into bytes, and deserializing request bodies into structured data for processing.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver.Media",
      "library": "resto-cohttp-server",
      "description": "This module handles media type negotiation for HTTP requests and responses, using a configured list of supported media types and a default. It provides functions to determine the appropriate input and output media types based on request headers and predefined defaults. Use it to ensure correct content type handling when serving or consuming RESTful APIs with specific media type requirements.",
      "description_length": 394,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver.Directory",
      "library": "resto-cohttp-server",
      "description": "This module enables the creation and management of a hierarchical REST service directory with type-safe routing, supporting operations to register HTTP services with variable path parameters, merge service trees, and resolve method/path requests with detailed error handling. It works with `directory` structures that model routing trees, dynamic handlers for lazy subdirectory generation, and schema-based descriptions to enable self-documenting service hierarchies. Typical use cases include organizing modular APIs with nested routes, dynamically generating subdirectories based on request parameters, and combining multiple service definitions into a unified routing tree with conflict resolution.",
      "description_length": 701,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver.Agent",
      "library": "resto-cohttp-server",
      "description": "This module implements an agent for handling self-serving HTTP requests within a local server context. It provides functions to dispatch requests to registered services and manage communication between the server and client. The agent works with HTTP requests and responses, using the server's internal service directory to route calls appropriately. A concrete use case is enabling local testing of service endpoints without requiring an external HTTP server.",
      "description_length": 460,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make.Directory",
      "library": "resto-cohttp-server",
      "description": "This module routes HTTP requests to typed service handlers by managing a hierarchical directory structure of REST endpoints with parameterized paths, supporting operations to register services with varying argument arities, resolve path parameters, and merge routing trees. It works with typed routing directories and service definitions that map Cohttp requests to Lwt-based handlers, enabling use cases like building modular APIs with dynamic subtree generation and conflict detection for overlapping routes or method mismatches.",
      "description_length": 531,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make",
      "library": "resto-cohttp-server",
      "description": "This module implements an HTTP server for routing requests to typed REST services, supporting initialization with media types, CORS, and access control, and launching on a network endpoint. It handles request parsing, service routing, and response generation using Cohttp and Lwt, working with typed directories of services and media type negotiators. Concrete use cases include serving versioned APIs with content-type negotiation, enforcing access control dynamically, and embedding modular service trees with automatic route conflict detection.",
      "description_length": 547,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server.Server.Make_selfserver",
      "library": "resto-cohttp-server",
      "description": "This module implements a self-contained RPC server for local service testing, providing HTTP request dispatching, media type negotiation, and response handling. It works with REST service directories, media type configurations, and Cohttp request/response types to serve registered endpoints directly in-process. Concrete use cases include testing API routes locally without external HTTP infrastructure and enabling direct client-server interaction within the same runtime.",
      "description_length": 474,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_server.Server",
      "library": "resto-cohttp-server",
      "description": "This module serves a directory of registered services over HTTP, handling request routing and response generation. It works with service definitions and HTTP request/response structures to expose endpoints dynamically. Concrete use cases include building RESTful APIs and serving web services with customizable logging and middleware support.",
      "description_length": 342,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_server",
      "library": "resto-cohttp-server",
      "description": "This module serves a directory of registered services over HTTP, handling request routing and response generation. It works with service definitions and HTTP request/response structures to expose endpoints dynamically. Concrete use cases include building RESTful APIs and serving web services with customizable logging and middleware support.",
      "description_length": 342,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 701,
    "min_description_length": 342,
    "avg_description_length": 486.27272727272725,
    "embedding_file_size_mb": 0.14545059204101562
  }
}