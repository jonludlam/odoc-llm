{
  "package": "oml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 44,
  "creation_timestamp": "2025-07-15T23:14:08.353421",
  "modules": [
    {
      "module_path": "Oml.Classification.Naive_bayes.Binomial",
      "library": "oml",
      "description": "This module implements a binomial Naive Bayes classifier for categorical data encoded using dummy variables. It supports training on labeled samples with binary features, computing class probabilities, and evaluating feature likelihoods per class. Concrete use cases include text classification and binary feature-based prediction tasks.",
      "description_length": 337,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Classification.Classifier_interfaces.Classifier",
      "library": "oml",
      "description": "This module defines a classifier interface for estimating models from labeled feature data and evaluating class probabilities for new features. It works with `class_` and `feature` types, using a list of labeled samples for training, and supports configurable options during estimation. Concrete use cases include building logistic regression or naive Bayes models from training data and predicting class distributions for unseen inputs.",
      "description_length": 437,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Input_interfaces.Data",
      "library": "oml",
      "description": "This module defines core data types and operations for handling classification inputs, including feature vectors and class labels. It provides functions for encoding categorical features, normalizing numerical data, and constructing input instances for classification models. Concrete use cases include preparing datasets for training classifiers, transforming raw input into model-ready formats, and managing feature-label pairs during evaluation.",
      "description_length": 448,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Naive_bayes.Categorical",
      "library": "oml",
      "description": "This module implements a Naive Bayes classifier for categorical data, providing functions to train a model from labeled samples and evaluate class probabilities based on features. It works with discrete, categorical features and classes, using arrays to represent feature likelihoods and priors. Concrete use cases include text classification, spam filtering, or any classification task where input features are discrete categories.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Util.Array.Floatarray",
      "library": "oml",
      "description": "This module implements basic mutable float arrays with safe and unsafe accessors. It provides operations to create, read, and write elements at specific indices. Useful for numerical computations requiring efficient storage and manipulation of floating-point sequences.",
      "description_length": 269,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Input_interfaces.Dummy_encoded_data",
      "library": "oml",
      "description": "This module provides a dummy implementation for encoding classification features into integer arrays. It defines a fixed-size encoding function that maps each feature to a predefined integer array, typically used for testing or placeholder purposes. Concrete use cases include simulating encoded input data for classification models when real encodings are not yet available.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Statistics.Sampling.Poly",
      "library": "oml",
      "description": "This module implements sampling algorithms for generating random values from discrete distributions. It supports uniform sampling over a set of elements, categorical sampling with weighted probabilities, and softmax sampling with temperature scaling. These functions are used to create generators that produce samples from arrays of arbitrary type based on specified probability distributions.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Classifier_interfaces.Generative",
      "library": "oml",
      "description": "This module defines an interface for generative classifiers that model class and feature probabilities. It provides methods to evaluate class probabilities given features, estimate models from labeled samples, and retrieve prior and likelihood probabilities per class. It is used to implement classifiers like Naive Bayes where feature likelihoods per class are explicitly modeled.",
      "description_length": 381,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Input_interfaces.Category_encoded_data",
      "library": "oml",
      "description": "Handles category-encoded feature data for classification tasks using integer arrays. Provides functions to encode categorical features and retrieve their size dimensions. Useful for preparing input data for machine learning models that require numerical feature representations.",
      "description_length": 278,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Input_interfaces.Continuous_encoded_data",
      "library": "oml",
      "description": "This module represents features as float arrays, enabling numerical operations essential for classification tasks. It provides functions to encode features into arrays and determine their size. Useful for implementing classification algorithms that require numeric feature representations.",
      "description_length": 289,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Regression.Interpolate.Tri_Diagonal",
      "library": "oml",
      "description": "Solves and evaluates tridiagonal systems using specialized linear algebra operations. Works with arrays of floating-point triplets representing diagonals and arrays of floats representing right-hand sides. Enables efficient interpolation and regression tasks where tridiagonal matrix structures arise, such as cubic spline fitting or finite difference methods.",
      "description_length": 360,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Regression.Interpolate.Spline",
      "library": "oml",
      "description": "Implements cubic spline interpolation for numerical data arrays, supporting natural and clamped boundary conditions. It constructs piecewise polynomial functions from (x, y) data points and evaluates interpolated values at arbitrary points. Useful for smoothing experimental data or generating continuous approximations from discrete samples.",
      "description_length": 342,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Regression.Interfaces.Linear_model",
      "library": "oml",
      "description": "Implements linear regression models for fitting numerical responses to input features using least squares optimization. Works with arrays of numerical inputs and corresponding float responses, producing a model that predicts outputs and quantifies fit quality through residuals, R-squared, F-statistic, and coefficient estimates. Useful for statistical inference, trend analysis, and predictive modeling in domains like finance, biology, or engineering.",
      "description_length": 453,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Uncategorized.Estimations",
      "library": "oml",
      "description": "Implements root-finding algorithms using the secant method and second-order Newton-Raphson method. Operates on univariate real-valued functions represented as `float -> float`. Useful for numerical analysis tasks requiring convergence to function roots with limited derivative information.",
      "description_length": 289,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Online.Make",
      "library": "oml",
      "description": "Implements running statistical computations using recurrence equations, supporting incremental updates and merging of statistical accumulators. Works with floating-point values and a stateful accumulator type `t` to track metrics like mean, variance, or other derived statistics. Useful for real-time data analysis where statistics must be updated efficiently as new samples arrive or when combining results from parallel computations.",
      "description_length": 435,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Util.Array",
      "library": "oml",
      "description": "This module provides comprehensive tools for creating, transforming, and analyzing arrays, with specialized support for both general and numeric data. It includes core operations like indexed mapping, folding, sorting, and permutation, alongside float-specific functions such as summation, binary search, and rank calculation. The child module enhances numerical workflows by offering mutable float arrays with efficient access and mutation, enabling precise control over floating-point data. Together, they support tasks ranging from statistical analysis and machine learning to general-purpose data manipulation with both functional and imperative styles.",
      "description_length": 657,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Naive_bayes",
      "library": "oml",
      "description": "This module provides a Naive Bayes classifier for categorical and binary feature-based classification tasks, such as text classification and spam filtering. It supports training models from labeled data, computing class probabilities, and evaluating feature likelihoods using arrays to represent priors and conditional probabilities. The implementation handles both binomial and multinomial cases, accommodating discrete features and classes. Example uses include predicting document categories from word frequencies or classifying emails based on presence-absence features.",
      "description_length": 574,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Input_interfaces",
      "library": "oml",
      "description": "This module organizes interfaces and utilities for encoding and transforming input data for classification tasks. It defines feature vectors, class labels, and operations for categorical, continuous, and dummy encodings, supporting type-safe dataset transformations. Submodules provide concrete implementations: one for general classification input handling, another for dummy integer array encodings, a third for category-encoded data, and a fourth for float array-based numerical features. Examples include normalizing numerical inputs, encoding categorical variables, and preparing model-ready feature-label pairs for training or evaluation.",
      "description_length": 644,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Uncategorized.Matrices",
      "library": "oml",
      "description": "This module implements standard matrix operations including addition, subtraction, scalar multiplication, matrix multiplication, and transposition. It works with matrices represented as arrays of vectors, supporting row and column extraction, diagonal construction, and identity matrix creation. Concrete use cases include linear algebra computations such as solving linear systems, performing transformations, and computing inner products with vectors.",
      "description_length": 453,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Performance",
      "library": "oml",
      "description": "This module evaluates classification model performance using binary prediction data. It calculates metrics like sensitivity, specificity, accuracy, and area under the curve from labeled predictions. Use it to assess model quality on test datasets or during cross-validation.",
      "description_length": 274,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Uncategorized.Solvers",
      "library": "oml",
      "description": "This module provides numerical root-finding algorithms including Newton-Raphson and bisection methods. It operates on floating-point numbers and requires functions mapping floats to floats for evaluation. These functions are suitable for solving equations in mathematical modeling, optimization problems, and scientific computations where analytical solutions are intractable.",
      "description_length": 376,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Classification.Probabilities",
      "library": "oml",
      "description": "Represents and manipulates probability distributions over labeled classes. Provides functions to compute and compare class probabilities, including retrieving the most likely class label from a distribution. Used in classification tasks where probabilistic predictions are required, such as logistic regression or naive Bayes classifiers.",
      "description_length": 338,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Statistics.Continued_fraction",
      "library": "oml",
      "description": "This module evaluates continued fractions using recursive algorithms, designed for numerical computations in statistical models. It operates on a custom type `t` representing a continued fraction with coefficient functions for terms *a\u2099* and *b\u2099*. Concrete use cases include computing special functions like the gamma function or Bessel functions via continued fraction expansions.",
      "description_length": 381,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Util.Float",
      "library": "oml",
      "description": "This module defines basic arithmetic operations for floating-point numbers, including addition, subtraction, multiplication, and division. It works directly with the `float` type and is used for numerical computations requiring precision. Concrete use cases include statistical calculations, mathematical modeling, and machine learning algorithms where float operations are fundamental.",
      "description_length": 386,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Util.Kahan",
      "library": "oml",
      "description": "Implements Kahan summation algorithm to reduce numerical error in floating-point summation. Tracks accumulated value and compensation term using type `t`, with operations to update sum and retrieve accurate total. Useful for high-precision calculations in statistical or numerical applications where small errors could compound significantly.",
      "description_length": 342,
      "index": 24,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Oml.Statistics.Descriptive",
      "library": "oml",
      "description": "This module supports calculations for central tendency (mean, median, geometric/harmonic means), dispersion (variance, standard deviation), association (correlation, cosine similarity), and distribution shape (skewness, kurtosis classification) on `float array` data. It provides tools for generating summary statistics records, histograms with customizable binning, and test statistics. These operations are used for analyzing data distributions, assessing relationships between variables, and preparing structured statistical reports for machine learning or inferential analysis.",
      "description_length": 581,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Regression.Univariate",
      "library": "oml",
      "description": "Implements linear regression for modeling the relationship between a single input variable and a response variable using least squares estimation. Works with arrays of floating-point inputs and responses to compute regression coefficients, residuals, and statistical metrics like R-squared and F-statistic. Useful for predictive analysis in datasets with one explanatory variable, such as forecasting trends based on time or a single sensor measurement.",
      "description_length": 453,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Statistics.Sampling",
      "library": "oml",
      "description": "This module generates random samples from probability distributions like uniform, normal, categorical, and softmax, supporting integers, floats, and float arrays as inputs. It includes discrete sampling algorithms for selecting elements based on weighted probabilities, with support for temperature scaling in softmax sampling. You can simulate random variables for statistical inference, generate synthetic datasets, or implement stochastic algorithms like Monte Carlo methods and reinforcement learning policies. Functions allow direct sampling and construction of custom generators for repeated use.",
      "description_length": 602,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Online.Update_rules",
      "library": "oml",
      "description": "This module implements update rules for maintaining running statistics using recurrence relations. It operates on floating-point values representing current state variables like sum, sum of squares, and sample count. It is used to compute updated statistical values incrementally as new data points arrive, such as in streaming or online learning scenarios.",
      "description_length": 357,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Statistics.Measures",
      "library": "oml",
      "description": "This module calculates Kullback-Leibler divergence between normal and discrete distributions. It provides `normal_kl_divergence` for comparing Gaussian distributions using their means and standard deviations, and `discrete_kl_divergence` for discrete distributions represented as lists of value-probability pairs. These functions are used in probabilistic modeling and information theory to quantify distribution differences.",
      "description_length": 425,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Regression.Interpolate",
      "library": "oml",
      "description": "This module performs interpolation using linear and spline methods, working with floating-point sequences to estimate intermediate values between known data points. It includes specialized tools for solving tridiagonal systems arising in cubic spline fitting and finite difference methods, and provides cubic spline interpolation with natural and clamped boundary conditions for smoothing data or generating continuous approximations. The core module handles basic interpolation tasks, while submodules enable efficient matrix operations and advanced spline construction. For example, you can construct a cubic spline from (x, y) data points, solve a tridiagonal system to compute spline coefficients, or evaluate interpolated values at arbitrary positions.",
      "description_length": 757,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Regression.Interfaces",
      "library": "oml",
      "description": "This module defines the interface for linear regression models, specifying operations to fit models to data, make predictions, and retrieve parameters such as coefficients and residuals. It works with numerical arrays and matrices to represent features and responses, enabling statistical inference and predictive modeling. The child module implements least squares optimization to train models on numerical datasets, producing metrics like R-squared and F-statistic for performance evaluation. Together, they support tasks like trend analysis and regression-based prediction in domains such as finance and engineering.",
      "description_length": 619,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Util.Optional_arg_intf",
      "library": "oml",
      "description": "This module defines a polymorphic type `opt` for representing optional values and provides a `default` value to use when no explicit value is given. It supports operations for handling optional arguments in function calls, particularly for numeric and statistical functions that may accept optional parameters. Concrete use cases include specifying optional thresholds, tolerances, or configuration flags in mathematical computations.",
      "description_length": 434,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Classification.Classifier_interfaces",
      "library": "oml",
      "description": "This module defines core interfaces for classification models, focusing on training, prediction, and evaluation in supervised learning workflows. It supports operations like estimating models from labeled data, predicting class labels, and evaluating performance, working with feature vectors and label types. The child modules extend this with specialized interfaces for probabilistic and generative classifiers, enabling concrete implementations such as logistic regression and Naive Bayes. Examples include training a model from labeled samples, predicting class distributions, and retrieving class priors and likelihoods for inference.",
      "description_length": 639,
      "index": 33,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Oml.Util.List",
      "library": "oml",
      "description": "This module supports structural manipulation and element-wise processing of polymorphic lists through operations like mapping, filtering, folding, and concatenation. It includes utilities for indexed transformations, dual-list iterations, and association list management, enabling tasks such as data aggregation, predicate-based selection, and ordered list merging. Sorting, partitioning, and sequence conversion functions further address complex data processing needs, with support for custom comparison logic and combined computation-extraction workflows.",
      "description_length": 557,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Statistics.Functions",
      "library": "oml",
      "description": "Implements mathematical operations for statistical modeling, including softmax normalization with optional temperature scaling. Operates on float arrays to compute probability distributions for machine learning tasks. Used in neural network output layers and reinforcement learning policies to convert raw scores into action probabilities.",
      "description_length": 339,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Uncategorized.Vectors",
      "library": "oml",
      "description": "This module implements basic vector arithmetic operations on float arrays, including addition, subtraction, scalar multiplication, and dot product. It provides precise numerical comparisons with an optional tolerance for floating-point equality. These operations are used for numerical computations in machine learning, statistics, and linear algebra tasks.",
      "description_length": 357,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Regression",
      "library": "oml",
      "description": "This module supports regression and interpolation techniques for modeling and analyzing numerical data relationships. It provides linear regression for fitting lines to data points using least squares, computes residuals and statistical metrics like R-squared, and supports prediction tasks. Interpolation is handled through linear and cubic spline methods, including solvers for tridiagonal systems to generate smooth approximations from data points. Users can perform tasks like forecasting trends from sensor data, constructing splines for continuous function approximation, or evaluating statistical model performance.",
      "description_length": 622,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Online",
      "library": "oml",
      "description": "This module computes running statistics incrementally using recurrence relations, updating mean, variance, sum, and extrema as new values arrive. It maintains state in a type `t` that accumulates statistical metrics and supports merging for parallel or distributed computation. Child modules refine the update rules and numeric representations, enabling efficient tracking of running aggregates over streams or batches. For example, you can update a statistic with a new value or merge two accumulators to combine results from separate data partitions.",
      "description_length": 552,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Uncategorized",
      "library": "oml",
      "description": "This module combines numerical methods and linear algebra tools for solving mathematical problems in scientific computing and optimization. It supports root-finding through Newton-Raphson and secant methods on real-valued functions, and offers matrix and vector operations including addition, multiplication, and dot products, with utilities for transformation and system solving. Data types include float arrays for vectors and matrices, with functions for diagonal and identity construction. Example uses include solving nonlinear equations, performing linear transformations, and computing inner products for machine learning models.",
      "description_length": 636,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Statistics",
      "library": "oml",
      "description": "This module provides numerical methods for statistical inference and data analysis. It supports operations on continued fractions for special function evaluation, computes descriptive statistics and distribution summaries on float arrays, and generates random samples from various probability distributions. Additional capabilities include divergence calculations between distributions and softmax normalization for probabilistic modeling. Example uses include simulating stochastic processes, performing Monte Carlo estimation, comparing distributional differences via KL divergence, and transforming raw scores into probability distributions for machine learning applications.",
      "description_length": 678,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oml.Classification",
      "library": "oml",
      "description": "This module classifies data using features through a suite of tools for model training, data encoding, and performance evaluation. It centers on classification models like Naive Bayes, which learn from labeled data to predict class labels or probability distributions over classes, using feature vectors that may be categorical, binary, or numerical. The system supports data preparation with encoders for transforming raw inputs into model-ready formats, and it evaluates predictions using metrics such as accuracy and AUC. Example workflows include training a spam filter from word frequencies, encoding and normalizing dataset features, and validating model performance on test email data.",
      "description_length": 692,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml.Util",
      "library": "oml",
      "description": "This module combines foundational utilities with structured data manipulation capabilities to support numerical and statistical computation. It provides core values like mathematical constants and float comparison functions, while its submodules enable precise array and list operations, optional value handling, and specialized float arithmetic. Use it to perform accurate summations with reduced numerical error, manipulate polymorphic lists with indexed transformations, or manage optional parameters in statistical functions. Together, these tools facilitate tasks ranging from machine learning to data analysis, integrating functional and imperative approaches for flexibility and performance.",
      "description_length": 698,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oml",
      "library": "oml",
      "description": "This library offers a comprehensive suite of numerical, statistical, and machine learning tools organized into specialized modules. It supports regression, interpolation, and root-finding methods, along with running and descriptive statistics, classification models, and linear algebra operations over float arrays. Users can fit linear models to sensor data, track streaming aggregates, solve nonlinear equations, generate random samples, train classifiers on feature vectors, and compute distribution divergences. Key data types include stateful accumulators for statistics, matrices and vectors for linear algebra, and models for classification, all designed for precision and composability in scientific computing and data analysis workflows.",
      "description_length": 746,
      "index": 43,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 44,
    "meaningful_modules": 44,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 269,
    "avg_description_length": 470.15909090909093,
    "embedding_file_size_mb": 0.16022109985351562
  }
}