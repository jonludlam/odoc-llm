{
  "package": "jsonxt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 41,
  "creation_timestamp": "2025-07-15T23:14:37.675342",
  "modules": [
    {
      "module_path": "Jsonxt.Yojson.Basic.Util",
      "library": "jsonxt",
      "description": "This module offers utilities for traversing, transforming, and querying JSON structures with a focus on type-safe manipulation of nested data. It operates on JSON objects (`Assoc`), arrays (`List`), and primitive values (`Bool`, `Float`, `Int`, `String`), enabling operations like field access, list indexing, key-value decomposition, and safe numeric conversions. Common use cases include extracting deeply nested values, filtering or mapping over JSON arrays, merging associative lists, and recursively sorting or flattening complex JSON hierarchies.",
      "description_length": 552,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict.Compliance.Stream",
      "library": "jsonxt",
      "description": "This module constructs JSON streams using strict compliance rules, producing sequences of tokens representing JSON values. It works directly with primitive OCaml types and strings to build valid JSON structures like objects, arrays, and variants. Concrete use cases include generating JSON for APIs, configuration files, or data interchange where precise control over JSON output is required.",
      "description_length": 392,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Yojson.Safe.Util",
      "library": "jsonxt",
      "description": "This module enables traversal, transformation, and type-safe manipulation of JSON data through functions that handle field access, list operations, value extraction, and recursive sorting. It operates on both structured JSON values (`Jsonxt.Yojson.Safe.json`) and polymorphic variant representations of JSON elements, supporting operations like filtering heterogeneous lists, converting numeric types, and extracting key-value pairs from associative objects. These utilities are particularly useful for processing complex JSON payloads from APIs or configuration files where type safety and structural manipulation are critical.",
      "description_length": 628,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Extended.Compliance.Stream",
      "library": "jsonxt",
      "description": "This module constructs JSON streams with support for extended types like integers, tuples, and variants. It provides functions to emit JSON elements such as numbers, strings, booleans, arrays, objects, and named fields. Use it to build complex JSON structures programmatically, especially when handling non-standard JSON types like large integers or variant tags.",
      "description_length": 363,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Basic.Compliance.Stream",
      "library": "jsonxt",
      "description": "This module constructs JSON streams for basic JSON types using precise operations like `number`, `integer`, `string`, and structural markers such as `object_start` and `array_end`. It works directly with primitive OCaml types like `int`, `float`, `string`, and `bool`, as well as custom JSON structures including objects, arrays, and variants. Concrete use cases include serializing OCaml values into JSON streams for efficient transmission or storage, handling large integers via `largeint`, and building structured JSON output incrementally.",
      "description_length": 543,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Json_stream.Extended",
      "library": "jsonxt",
      "description": "This module provides functions to parse and construct JSON values, including non-standard types like tuples and variants. It works with the `json` type, which represents JSON data structures such as objects, arrays, strings, and numbers. Use this module when handling complex or custom JSON formats that require support for advanced type representations beyond standard JSON.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Json.Extended",
      "library": "jsonxt",
      "description": "This module provides functions for constructing and manipulating JSON values with support for non-standard types like tuples and variants. It works with the extended JSON type that includes additional constructors beyond standard JSON. Concrete use cases include handling complex JSON structures that require custom encoding or decoding, such as working with polymorphic data or nested tuples.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Extended.Process",
      "library": "jsonxt",
      "description": "This module offers functions to process JSON data with extended types such as integers, tuples, and variants, enabling operations like element access by key/index, list mapping, and filtering. It handles data structured as lists and key-value associations represented via GADTs, supporting safe numeric conversions (e.g., `to_int`, `to_number`) and recursive manipulation of composite structures. It is particularly useful for transforming JSON with large integers (up to 53-bit precision) or integrating with Yojson's extended JSON representations.",
      "description_length": 549,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Strict.Process",
      "library": "jsonxt",
      "description": "This module enables type-safe traversal, filtering, and transformation of JSON lists and associative arrays (objects) using polymorphic variants like `Assoc` and `List`. It operates on strict JSON values, enforcing standard types (booleans, floats, strings) and prioritizing lossless numeric representation for integers within 2\u2075\u00b3. Typical applications include validating API responses, extracting typed data from structured JSON (e.g., filtering string values or mapping object keys), and converting nested JSON hierarchies into OCaml-native structures with precise numeric handling.",
      "description_length": 584,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Json_stream.Strict",
      "library": "jsonxt",
      "description": "This module defines a strict JSON stream type that adheres to the JSON standard, excluding integers. It includes constructors for null, boolean, float, string, array and object markers, and object field names. Use this module when parsing or generating JSON data that must strictly conform to the standard, such as when interfacing with external systems expecting valid JSON.",
      "description_length": 375,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Basic.Compliance",
      "library": "jsonxt",
      "description": "This module processes JSON data with precision for large integers and overflow safety, supporting values up to \u00b12\u2075\u00b3 and stream-based parsing for memory efficiency. It directly handles JSON structures like objects, arrays, and variants, using OCaml primitives and custom types, while its child module builds JSON streams with operations for numbers, strings, and structural markers. You can serialize complex OCaml data into JSON incrementally, handle large integers without loss, and parse streamed JSON in memory-constrained environments. Examples include generating JSON payloads for APIs using `number` and `object_start`, or parsing large JSON logs without loading the entire file.",
      "description_length": 685,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Yojson.Safe",
      "library": "jsonxt",
      "description": "This module provides robust tools for parsing, serializing, and transforming JSON data across strings, files, and streams, with efficient lexer-based processing and comprehensive error handling. It centers around the `Safe.t` type, representing JSON values, and supports operations like pretty-printing, sorting, and format conversion for high-performance JSON manipulation and interoperability with Yojson. The child module extends this functionality with type-safe traversal, transformation, and extraction capabilities, enabling precise field access, list filtering, and recursive sorting on both structured JSON and polymorphic variant representations. Together, they facilitate tasks such as processing API responses, normalizing configuration data, and bridging legacy Yojson systems with modern JSON workflows.",
      "description_length": 817,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Json.Strict",
      "library": "jsonxt",
      "description": "This module defines a strict JSON type representation that adheres to the JSON standard, excluding integers. It provides functions to construct, deconstruct, and manipulate JSON values including null, boolean, float, string, associative lists, and nested lists. Use this module when working with JSON data that must strictly conform to the standard, such as parsing or generating JSON for APIs or configuration files.",
      "description_length": 417,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Basic.Process",
      "library": "jsonxt",
      "description": "This library provides functions for traversing, transforming, and extracting typed values from hierarchical JSON structures, with specialized operations for handling nested objects, arrays, and primitive values. It works directly with JSON data represented as polymorphic variants (e.g., `Assoc`, `List`, `Bool`, `Float`, `String`, `Null`) and supports non-standard JSON integers with platform-dependent precision. Typical applications include parsing configuration files, processing API responses, and building data transformation pipelines where precise type handling and optional value semantics are required.",
      "description_length": 612,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict_monad.IO",
      "library": "jsonxt",
      "description": "This module implements an IO monad for parsing and writing JSON data that strictly conforms to the JSON standard, excluding integers. It provides `return` and bind (`>>=`) operations to sequence IO actions that work with JSON values represented as strict, in-memory data structures. Concrete use cases include reading JSON from files or strings, transforming the data, and writing the result to another file or output stream, all while ensuring strict JSON compliance.",
      "description_length": 468,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Yojson.Basic",
      "library": "jsonxt",
      "description": "This module provides tools for working with JSON data structures through a type-safe interface that supports traversal, transformation, and querying of nested values. It directly handles basic JSON elements like objects, arrays, and primitives, offering operations such as field access, list manipulation, and numeric conversion. Submodules extend this functionality to complex tasks like merging associative lists, recursively sorting, and flattening deeply nested JSON. Examples include safely extracting a nested string field, mapping over a JSON array of numbers, or merging two JSON objects while preserving type integrity.",
      "description_length": 628,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Json_stream.Basic",
      "library": "jsonxt",
      "description": "Handles parsing and constructing JSON streams with support for standard JSON types, including integers. Works directly with the `json` type, representing values like `Null`, `Bool`, `Int`, `Float`, `String`, and structural markers for arrays and objects. Useful for efficiently processing JSON input or building JSON output incrementally without fully materializing the data structure.",
      "description_length": 385,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Basic_monad.Make",
      "library": "jsonxt",
      "description": "This module provides functions to read and write JSON data using an IO monad, handling both compact and human-readable formatting. It works with the `Jsonxt.Basic.Compliance.json` type, supporting parsing from a reader function and writing with customizable indentation and separators. Concrete use cases include streaming JSON input, pretty-printing JSON output, and encoding JSON data with custom line endings and indentation levels.",
      "description_length": 435,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Extended_monad.IO",
      "library": "jsonxt",
      "description": "This module implements the IO monad for parsing and writing extended JSON data, supporting non-standard types like integers, tuples, and variants. It provides `return` and bind (`>>=`) operations to sequence IO actions that transform or extract values from JSON structures. Concrete use cases include reading JSON from files or strings, transforming data during parsing, and writing complex JSON values with side effects handled through the monadic interface.",
      "description_length": 459,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict_monad.Make",
      "library": "jsonxt",
      "description": "This module provides functions to read and write strict JSON values using an IO monad, handling input via a custom reader function and output via a writer function. It works with the `Jsonxt.Strict.Compliance.json` type, enforcing JSON compliance and excluding non-standard types like integers. Concrete use cases include parsing JSON from a byte stream with controlled buffering and formatting JSON output with customizable pretty-printing options like indentation and line endings.",
      "description_length": 483,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Json.Basic",
      "library": "jsonxt",
      "description": "This module defines the core JSON data type with support for standard JSON values, including integers, floats, strings, booleans, null, associative lists, and nested lists. It provides functions for constructing, inspecting, and manipulating JSON values directly. Use this module when working with JSON data that requires precise type handling, such as parsing configuration files or building JSON APIs.",
      "description_length": 403,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Extended_monad.Make",
      "library": "jsonxt",
      "description": "This module provides functions to read and write extended JSON values using an IO monad, supporting non-standard types like integers, tuples, and variants. It works with the `Jsonxt.Extended.Compliance.json` type, handling both compact and human-readable output formats. Concrete use cases include parsing JSON streams from files or network sockets and generating formatted JSON output for logging or configuration files.",
      "description_length": 421,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Yojson.Raw",
      "library": "jsonxt",
      "description": "This module offers low-level JSON parsing and serialization operations on a variant-based representation of JSON values, supporting input from strings, files, channels, and lex buffers with optional streaming. It provides capabilities for structured transformations, equality checks, and customizable formatting (compact or pretty-printed) to strings, buffers, or output channels. Typical use cases include efficient JSON stream processing, interoperability with Yojson-based systems, and applications requiring precise control over JSON serialization formats.",
      "description_length": 560,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict.Compliance",
      "library": "jsonxt",
      "description": "This module enforces strict JSON validation and conversion, handling primitives, structured types, and variants with precise 64-bit float representation. It supports streaming workflows through character stream processing, enabling memory-efficient parsing and serialization of large datasets while maintaining JSON standard compliance. The child module constructs JSON streams using strict rules, converting OCaml values into valid JSON tokens for use in APIs, configuration files, and data interchange. Together, they provide a robust pipeline for both parsing and generating JSON with exacting precision and control over the output structure.",
      "description_length": 645,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Extended.Compliance",
      "library": "jsonxt",
      "description": "This module handles low-level parsing and construction of extended JSON values, supporting precise integer handling, tuples, and variants, while enabling memory-efficient processing of large JSON payloads through incremental streams. It works with tokenized input, strings, and channels to produce or consume structured JSON aligned with Yojson's format, particularly useful for integer-heavy data and streaming transformations. The child module focuses on building JSON streams with extended types, offering functions to emit numbers, strings, arrays, objects, and variant tags programmatically. Together, they enable both parsing and generating complex JSON structures, such as validating large JSON documents or constructing JSON with 53-bit integers and custom variant encodings.",
      "description_length": 783,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Basic_monad.IO",
      "library": "jsonxt",
      "description": "This module implements the IO monad for JSON parsing and writing operations over input and output channels. It provides functions like `return` and bind (`>>=`) to sequence IO actions that read from or write to JSON streams. It works with the `Json.Basic.json` type, handling standard JSON values along with integer extensions. Use it to build composable, effectful JSON processing pipelines over files or network sockets.",
      "description_length": 422,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict",
      "library": "jsonxt",
      "description": "This module processes JSON data strictly according to the JSON standard, excluding integers but preserving numeric precision through 64-bit floats, and supports parsing and serialization from strings, files, and streams with error handling via results or exceptions. It includes submodules for type-safe manipulation of JSON structures using polymorphic variants like `Assoc` and `List`, enabling operations such as filtering, mapping, and structured extraction while enforcing strict type constraints. Another submodule provides streaming capabilities for efficient processing of large JSON datasets, converting OCaml values into JSON tokens following strict validation rules. Use cases include API response validation, transformation of nested JSON into OCaml-native types, and memory-efficient handling of line-delimited JSON streams.",
      "description_length": 837,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Yojson",
      "library": "jsonxt",
      "description": "This module provides Yojson-compatible JSON parsing and lexing functionality with RFC 8259 compliance, supporting direct integration via a `yojson.ml` file. It defines a `lexer_state` type and functions like `init_lexer` for configuring the lexer with buffer, filename, and line number tracking, enabling precise error reporting and positional information during JSON parsing. The core `Safe.t` type represents JSON values and supports operations like pretty-printing, sorting, and format conversion, while submodules enable type-safe traversal, transformation, and extraction of nested JSON data. Use cases include parsing and normalizing configuration files, processing API responses with structured access to fields and arrays, and bridging legacy Yojson code with modern JSON workflows using efficient, streaming-capable serialization.",
      "description_length": 839,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Strict_stream",
      "library": "jsonxt",
      "description": "This module parses and writes strict JSON streams without integers, using `json_stream` values from a string, channel, or custom reader function. It provides low-level decoding and encoding APIs, including human-readable formatting and channel-backed writers. Use cases include processing large JSON arrays or sequences incrementally, such as log files or streaming APIs, where memory efficiency is critical.",
      "description_length": 408,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Basic",
      "library": "jsonxt",
      "description": "This module handles JSON data with precise integer support and efficient parsing, using a custom json type that includes integers beyond standard JSON's limits. It provides direct operations for constructing and deconstructing JSON values with platform-specific integer handling, while its child modules enable stream-based serialization and structured traversal of nested data. You can build JSON objects incrementally with `object_start` and `number`, or process deeply nested configurations using typed extraction functions. It supports use cases like API payload generation, log parsing, and data transformation pipelines with strict memory and precision constraints.",
      "description_length": 671,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Extended_monad",
      "library": "jsonxt",
      "description": "This module enables parsing and serialization of extended JSON values, including integers, tuples, and variants, using an IO monad to sequence input and output actions. It centers around the `Json.Extended.json` type and provides core operations like `return`, bind (`>>=`), and utility functions for reading from and writing to files or strings in both compact and readable formats. You can use it to decode JSON streams from external sources, transform structured data, and encode results back with precise control over output formatting. Submodules refine these capabilities by implementing monadic IO primitives and format-specific serialization strategies.",
      "description_length": 661,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Utilities",
      "library": "jsonxt",
      "description": "This module converts JSON trees between different type representations, including transformations to basic and strict JSON types. It supports comparisons of JSON trees for structural equality and generates string representations for debugging or serialization purposes. These functions are useful when adapting JSON data for specific processing needs, such as preparing data for output or validating tree structures.",
      "description_length": 416,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Basic_monad",
      "library": "jsonxt",
      "description": "This module enables parsing and writing of JSON data using an IO monad, supporting standard types like strings, booleans, null, arrays, and objects, along with non-standard integers. It provides reader and writer functions for streaming JSON input or output, allowing compositional construction and consumption of JSON structures through monadic sequencing with `return` and bind. Submodules extend this capability with support for pretty-printing, custom formatting, and channel-based IO operations, enabling use cases such as reading from or writing to files, sockets, or custom streams with configurable indentation and separators. Example uses include decoding JSON from a network socket, incrementally writing large JSON arrays, or transforming JSON data in a pipeline with custom formatting.",
      "description_length": 797,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Strict_monad",
      "library": "jsonxt",
      "description": "This module provides an IO monad for reading and writing JSON data that strictly conforms to the JSON standard, excluding integers, using reader and writer functions that operate on strict, in-memory JSON values. It supports monadic composition with `return` and bind (`>>=`), enabling sequences of JSON I/O operations such as reading from input channels or strings and writing to output streams with customizable formatting. The module ensures strict compliance with JSON types during parsing and generation, allowing operations like structured data transformation and controlled pretty-printing of JSON output.",
      "description_length": 612,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Json_stream",
      "library": "jsonxt",
      "description": "This module handles streaming JSON parsing and serialization with support for different compliance levels, working directly with the `json` type that represents JSON values and structural markers. It enables processing large JSON inputs incrementally, such as log files or real-time data feeds, using operations like stream parsing and value construction. The module supports advanced type representations like tuples and variants, while submodules enforce strict JSON compliance or include standard types such as integers. Specific uses include parsing valid JSON for external systems, handling custom formats with non-standard types, and efficiently building or reading JSON streams without full in-memory structures.",
      "description_length": 719,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Error_info",
      "library": "jsonxt",
      "description": "This module defines a structured type for representing parsing errors, including line and character positions along with error messages. It includes functions to create error information from a lexing buffer and convert it to a human-readable string. It is used to report detailed syntax errors during JSON parsing, providing precise location and context for malformed input.",
      "description_length": 375,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Extended_stream",
      "library": "jsonxt",
      "description": "This module provides functions to parse and write streams of extended JSON values, supporting non-standard types like integers, tuples, and variants. It operates on input sources such as strings, channels, and custom read functions, producing a stream of JSON elements that can be processed incrementally. Concrete use cases include reading large JSON streams from files or network inputs and generating compact or human-readable JSON output to files or custom sinks.",
      "description_length": 467,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Basic_stream",
      "library": "jsonxt",
      "description": "This module provides functions to parse and write non-standard JSON streams that include integers, using a `json_stream` type. It supports reading from strings, channels, or custom byte readers, and writing to output channels or custom consumers with compact or human-readable formatting. Concrete use cases include processing large JSON data incrementally, such as streaming JSON logs or handling extended JSON formats that include integer types.",
      "description_length": 447,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt.Json",
      "library": "jsonxt",
      "description": "This module represents JSON data with varying compliance levels, supporting both standard and extended constructs like variants, tuples, and precise number types. It provides core operations for parsing, constructing, and manipulating JSON values, with submodules that enforce strict standard compliance, support extended types, and handle precise type representations. Use it to work with complex JSON structures such as nested objects, polymorphic variants, or custom encodings, whether adhering strictly to JSON standards or requiring extended forms for internal data representation. Examples include decoding API responses into typed values, encoding nested configurations, or manipulating JSON with custom extensions like tuples and variants.",
      "description_length": 747,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonxt.Extended",
      "library": "jsonxt",
      "description": "This module parses and serializes JSON data with extended types, including architecture-dependent integers (up to 62-bit, converted to floats on overflow), tuples, and variants, supporting input from strings, files, and custom sources. It provides error handling via `result` types or exceptions, generates compact or formatted output, and includes compliance checks, while enabling processing of JSON data through structured access, safe numeric conversions, and recursive manipulation of composite structures. The child modules support low-level parsing and construction of extended JSON values, including memory-efficient handling of large payloads and streaming transformations, and offer functions to access elements by key or index, map and filter lists, and work with key-value associations represented via GADTs. Together, they enable tasks such as validating JSON documents, transforming data with 53-bit integers, and constructing JSON streams with variant tags or custom encodings.",
      "description_length": 992,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonxt",
      "library": "jsonxt",
      "description": "This module processes JSON data with flexible compliance levels, supporting standard and extended types including precise integers, tuples, and variants. It provides strict and extended JSON parsing, serialization, and transformation with operations for mapping, filtering, and structured extraction, using in-memory or streaming representations. You can parse and generate JSON from strings, files, or streams, handle large datasets incrementally, and enforce type safety through polymorphic variants or GADTs. Examples include validating API responses, transforming nested JSON configurations, and processing memory-efficient log streams with custom formatting.",
      "description_length": 663,
      "index": 40,
      "embedding_norm": 0.9999998807907104
    }
  ],
  "filtering": {
    "total_modules_in_package": 41,
    "meaningful_modules": 41,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 992,
    "min_description_length": 363,
    "avg_description_length": 561.6585365853658,
    "embedding_file_size_mb": 0.14943408966064453
  }
}