{
  "package": "graphql-cohttp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-14T23:21:31.246297",
  "modules": [
    {
      "module_path": "Graphql_websocket.Frame.Opcode",
      "library": "graphql-cohttp",
      "description": "This module defines the set of valid opcodes for WebSocket frames, including both control and data frame types. It provides functions to convert opcode values to human-readable strings and to format them for debugging output. Concrete use cases include interpreting incoming WebSocket messages and constructing outgoing frames with the correct opcode.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_websocket.Connection.Make",
      "library": "graphql-cohttp",
      "description": "This module implements a GraphQL WebSocket connection handler with operations to send and receive frames, manage connection state, and upgrade HTTP requests. It works with `Cohttp.Request.t`, `Graphql_websocket.Frame.t`, and IO channels to handle bidirectional communication over WebSockets. Concrete use cases include establishing a WebSocket connection from an HTTP upgrade request, sending GraphQL subscription results, and receiving client operations in a GraphQL over WebSocket server.",
      "description_length": 490,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_websocket.Connection",
      "library": "graphql-cohttp",
      "description": "Implements a GraphQL WebSocket connection handler with operations to send and receive frames, manage connection state, and upgrade HTTP requests. Works with `Cohttp.Request.t`, `Graphql_websocket.Frame.t`, and IO channels for bidirectional WebSocket communication. Used to establish WebSocket connections from HTTP upgrades, send GraphQL subscription results, and receive client operations in a GraphQL over WebSocket server.",
      "description_length": 425,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_cohttp.Make",
      "library": "graphql-cohttp",
      "description": "This module implements a GraphQL HTTP server with support for executing GraphQL queries over HTTP. It handles parsing incoming HTTP requests, validating and executing them against a provided GraphQL schema, and generating appropriate HTTP responses. The module works directly with Cohttp request and response types, along with custom GraphQL schema and body types. It is used to build GraphQL endpoints that can process queries, mutations, and subscriptions over HTTP with custom IO and body handling.",
      "description_length": 501,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Assets.Internal",
      "library": "graphql-cohttp",
      "description": "This module provides direct access to embedded file data and utilities for processing files. It includes a predefined string value representing a specific file's content, a function to split a string into chunks, and a list of file paths. It is used to handle raw file content retrieval and segmentation for specific assets stored internally.",
      "description_length": 342,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_websocket.Frame",
      "library": "graphql-cohttp",
      "description": "This module implements the structure and creation of WebSocket frames for use in GraphQL over WebSocket communication. It provides functions to construct frames with specific opcodes, final flags, and content, as well as a dedicated function to create close frames with status codes. The primary data type is a record representing a WebSocket frame, which includes the opcode, extension, final flag, and content string.",
      "description_length": 419,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_handler.Make",
      "library": "graphql-cohttp",
      "description": "This module processes WebSocket frames for GraphQL subscriptions, handling message parsing, execution, and response generation. It works with GraphQL WebSocket frames, client and server message types, and manages subscription state via a hashtable. Concrete operations include parsing client messages from JSON, creating server response frames, and handling query execution streams for subscription updates.",
      "description_length": 407,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Assets",
      "library": "graphql-cohttp",
      "description": "This module provides file paths and a function to retrieve embedded file content. It includes a list of file paths and a function to read a file's content by name, returning `None` if not found. Used to access and process internal asset files directly.",
      "description_length": 252,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_cohttp",
      "library": "graphql-cohttp",
      "description": "Implements HTTP body handling and GraphQL request processing for Cohttp. Provides functions to parse incoming requests, execute GraphQL queries, and generate appropriate HTTP responses. Works with Cohttp's request and response types alongside GraphQL schema and operation definitions. Useful for building GraphQL APIs over HTTP with precise request/response control.",
      "description_length": 366,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_websocket",
      "library": "graphql-cohttp",
      "description": "This module provides operations for constructing and handling WebSocket frames with functions to create frames with specific opcodes, final flags, and content, including dedicated support for close frames with status codes. It works with a record-based data structure representing WebSocket frames, including opcode, extension, final flag, and content. These facilities are used to implement GraphQL over WebSocket communication, where frames carry subscription results and client operations in a server handling bidirectional messages.",
      "description_length": 536,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_handler",
      "library": "graphql-cohttp",
      "description": "Handles WebSocket connections with functions for message parsing, event routing, and connection state management. Works with `Lwt` threads, `Cohttp` requests, and custom binary/frame formats. Used to implement real-time chat services and live data updates in web applications.",
      "description_length": 276,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 536,
    "min_description_length": 252,
    "avg_description_length": 396.8181818181818,
    "embedding_file_size_mb": 0.15973567962646484
  }
}