{
  "package": "yojson-five",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:29:03.487940",
  "modules": [
    {
      "module_path": "Yojson_five.Safe",
      "description": "Provides functions to parse JSON values from strings, channels, and files, with error handling, and to serialize them to strings, channels, files, and custom output handlers. Works with the Yojson.Safe.t type for safe JSON representation. Used to safely convert and validate JSON data during input processing and to generate formatted output for logging or storage.",
      "description_length": 365,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yojson_five.Basic",
      "description": "Provides functions to parse JSON data from strings, channels, or files into a `Yojson.Basic.t` type, and to serialize it back into strings, channels, files, or custom output handlers. Includes pretty-printing and equality checks for JSON values. Used to convert between raw JSON text and structured data in applications handling configuration files or API responses.",
      "description_length": 366,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "yojson-five",
      "description": "Parses JSON strings into OCaml values, including integers, strings, lists, and associative arrays. Handles nested structures such as objects containing other objects or arrays. Used to process configuration files, API responses, and data exchanged between systems.",
      "description_length": 264,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yojson_five",
      "description": "Reads and writes JSON data in various formats, supporting both safe and basic representations. Handles parsing and serialization to and from strings, files, and channels, with options for pretty-printing and equality comparisons. Enables structured data manipulation, validation, and output generation for configuration and API workflows. Examples include converting JSON strings to in-memory structures, validating input, and generating human-readable output.",
      "description_length": 460,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 460,
    "min_description_length": 264,
    "avg_description_length": 363.75,
    "embedding_file_size_mb": 0.014933586120605469
  }
}