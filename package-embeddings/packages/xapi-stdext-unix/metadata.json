{
  "package": "xapi-stdext-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:55:17.134676",
  "modules": [
    {
      "module_path": "Xapi_stdext_unix.Unixext.Direct",
      "library": "xapi-stdext-unix",
      "description": "This module performs low-level file I/O using O_DIRECT mode, ensuring data is read and written directly to disk without going through the page cache. It provides functions for opening, reading, writing, and synchronizing files with strict alignment requirements, specifically using 4KiB page-aligned buffers. Use cases include high-performance disk access where cache bypass is critical, such as virtual disk imaging or direct block device manipulation.",
      "description_length": 453,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xapi_stdext_unix.Unixext",
      "library": "xapi-stdext-unix",
      "description": "This module provides system-level utilities for safe file and directory manipulation, process lifecycle control, and low-level Unix operations. It operates on file descriptors, process identifiers, sockets, and filesystem paths, offering capabilities like atomic file updates, recursive directory traversal, daemonization, and signal handling. Specific use cases include managing temporary resources with guaranteed cleanup, implementing robust inter-process communication with file descriptor passing, and performing direct disk I/O with alignment constraints for performance-critical applications.",
      "description_length": 599,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xapi_stdext_unix",
      "library": "xapi-stdext-unix",
      "description": "This module provides atomic file operations, process management, and low-level Unix system calls with a focus on safety and resource control. It works directly with file descriptors, process IDs, and Unix domain sockets, enabling tasks like secure temporary file creation, daemon process spawning, and signal-safe cleanup routines. Concrete use cases include implementing reliable file locking, managing child processes with precise lifecycle control, and handling asynchronous signals in system-level applications.",
      "description_length": 515,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 599,
    "min_description_length": 453,
    "avg_description_length": 522.3333333333334,
    "embedding_file_size_mb": 0.043868064880371094
  }
}