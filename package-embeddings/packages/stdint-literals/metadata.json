{
  "package": "stdint-literals",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:47.936552",
  "modules": [
    {
      "module_path": "Stdint_literals.Converter",
      "description": "Converts integer literals to explicitly sized unsigned or signed 8-bit, 16-bit, 32-bit, 64-bit, and 128-bit types within abstract syntax trees. Accepts location metadata to embed conversions in specific source positions. Used to generate type-annotated numeric expressions in code transformation pipelines.",
      "description_length": 306,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stdint_literals.Rule",
      "description": "Provides functions to define and combine rule patterns, each associated with a character and a function generating an expression. Operates on character-expression pairs and context-free rules. Used to construct a set of transformation rules for syntax processing in a ppx extension.",
      "description_length": 282,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "stdint-literals",
      "description": "Provides functions to parse integer literals with suffixes 'u' and 'U' into uint8 and uint16 types. Operates on string representations of integers and returns typed values. Enables direct use of suffix-based notation in code for low-level numeric processing.",
      "description_length": 258,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stdint_literals",
      "description": "Converts integer literals into explicitly sized numeric types across multiple bit widths, embedding conversions within abstract syntax trees using location metadata. Defines and combines rule patterns based on characters and expression-generating functions, enabling structured syntax transformations. Supports code generation with type-annotated expressions and rule-based processing for ppx extensions. Examples include converting `42` to `Int32.of_int 42` or defining rules to replace specific character sequences with custom expressions.",
      "description_length": 541,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 258,
    "avg_description_length": 346.75,
    "embedding_file_size_mb": 0.014960289001464844
  }
}