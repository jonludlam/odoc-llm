{
  "package": "idd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:32:33.448551",
  "modules": [
    {
      "module_path": "Idd_.Idd.Rel",
      "description": "Performs logical operations on binary decision diagrams (BDDs) including conjunction, disjunction, and negation, and manipulates sets of paths using sequence, union, and Kleene star operations. Works with BDDs and path sets represented as terms. Used to construct and analyze symbolic representations of state transitions in formal verification.",
      "description_length": 345,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Bdd.Make",
      "description": "Provides operations to construct and manipulate Boolean expressions using binary decision diagrams, including variable declaration, logical conjunction, disjunction, negation, and equality checks. Works with a boolean expression type that represents logical formulas. Used to encode and evaluate complex logical conditions in symbolic form.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Algebra",
      "description": "Performs operations for Kleene algebra, including identity elements for addition and multiplication, sequential composition, union, and the Kleene star. Works with a type `t` representing algebraic elements. Used for modeling and manipulating regular expressions and automata.",
      "description_length": 276,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Bdd",
      "description": "manages symbolic logical expressions through binary decision diagrams, enabling efficient manipulation of boolean formulas. It supports variable declaration, logical operations like AND, OR, NOT, and equality comparisons, working with a dedicated boolean expression type. Users can build complex logical conditions and evaluate their truth values symbolically. For example, it can simplify expressions, check for equivalence between formulas, or determine satisfiability.",
      "description_length": 471,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Boolean",
      "description": "Provides operations to create and manipulate boolean expressions, including logical conjunction, disjunction, negation, and comparison. Works with a custom type `t` representing boolean values and variables. Used to construct and evaluate logical expressions in symbolic reasoning or constraint solving contexts.",
      "description_length": 312,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Dd",
      "description": "Provides operations to construct and manipulate hash-consed binary decision diagrams, including creating constant false and true, building branches based on boolean variables, and checking structural equality. Works with binary trees where leaves are boolean values and internal nodes are labeled with variables. Used to efficiently represent and evaluate logical expressions, with unique identifiers enabling fast equality checks and memoization.",
      "description_length": 447,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Idd",
      "description": "manipulates binary decision diagrams and path sets through logical and set operations, enabling symbolic analysis of state transitions. It handles BDDs and path terms, supporting conjunction, disjunction, negation, sequence, union, and Kleene star. Users can build complex transition models and perform reachability analysis. For example, it can combine multiple conditions with logical operators or model repetitive state sequences using Kleene star.",
      "description_length": 451,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Var",
      "description": "Provides operations to compare, serialize, and hash variables, along with methods to determine relationships between variables in an ordered IDD. Works with a custom type representing boolean variables, indexed by integers, and distinguishes between input, output, and in-out pairs. Used to manage variable ordering and relationships in decision diagrams, such as determining which variable is closer to the root in a structure.",
      "description_length": 428,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "idd",
      "description": "Provides operations for constructing and manipulating hash-consed binary decision diagrams (BDDs) and identity-suppressed decision diagrams (IDDs), including node creation, canonical form enforcement, and logical composition. Works with boolean vector pairs and symbolic representations of transition relations. Used to efficiently encode and query state transitions in model checking and formal verification tasks.",
      "description_length": 415,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_",
      "description": "combines Kleene algebra operations with binary decision diagram (BDD) manipulation, enabling symbolic representation and analysis of logical and state-based systems. It supports algebraic elements with operations like union, star, and composition, alongside BDDs for efficient boolean expression handling, including conjunction, disjunction, and negation. Users can model regular expressions, evaluate logical conditions, and perform reachability analysis on state transitions. Examples include simplifying boolean formulas, checking equivalence, and representing repetitive state sequences.",
      "description_length": 591,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 591,
    "min_description_length": 276,
    "avg_description_length": 407.6,
    "embedding_file_size_mb": 0.036751747131347656
  }
}