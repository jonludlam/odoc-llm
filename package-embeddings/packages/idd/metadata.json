{
  "package": "idd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:08:36.347547",
  "modules": [
    {
      "module_path": "Idd_.Boolean.Algebra",
      "library": "idd",
      "description": "This module implements a boolean algebra system with variables, supporting logical operations like conjunction, disjunction, and negation. It works with a custom type `t` representing boolean expressions, including constants `fls` and `tru`, variables declared via `var`, and compound expressions built using operators. Use cases include symbolic manipulation of boolean formulas, evaluating expressions with `of_bool`, and checking expression equivalence with `(==)`.",
      "description_length": 468,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Algebra.GKAT",
      "library": "idd",
      "description": "Implements Guarded Kleene Algebra with Tests (GKAT) for reasoning about program control flow using tests and actions. It provides operations for boolean logic (conjunction, disjunction, negation), program composition (sequence), and control structures (if-then-else, while loop). Works with boolean values and program actions to model and analyze structured computations.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Algebra.BA",
      "library": "idd",
      "description": "This module implements a boolean algebra with conjunction, disjunction, and negation operations. It defines a type `t` representing boolean values, along with constants for true and false. It can be used to model logical expressions or digital circuit behavior.",
      "description_length": 261,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Bdd.Make",
      "library": "idd",
      "description": "This module implements a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs). It provides operations to declare boolean variables, create true and false values, perform logical operations (conjunction, disjunction, negation), and test equivalence between BDDs. It works directly with the `t` type representing BDDs, and uses strings to identify boolean variables. Concrete use cases include symbolic reasoning, formal verification, and constraint solving where boolean expressions are manipulated as canonicalized BDDs.",
      "description_length": 565,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Idd.Rel",
      "library": "idd",
      "description": "This module implements relational operations over identity-suppressed decision diagrams (IDDs) and Boolean decision diagrams (BDDs), including conjunction, disjunction, and negation for BDDs, and sequence, union, and Kleene star for IDDs. It works directly with values of type `Idd_.Bdd.t` for logical operations and `Idd_.Idd.t` for higher-level diagram manipulations. Concrete use cases include symbolic representation and manipulation of regular languages, finite-state automata, and relational expressions in formal verification tasks.",
      "description_length": 539,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Algebra.KA",
      "library": "idd",
      "description": "This module implements a Kleene algebra with operations for sequence (`seq`), union (`union`), and Kleene star (`star`) over an abstract type `t`. It includes identity elements `zero` and `one`, supporting formal reasoning about regular expressions and program analysis. Concrete use cases include modeling program behaviors, analyzing control flow, and verifying properties of concurrent systems.",
      "description_length": 397,
      "index": 5,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Idd_.Algebra.KAT",
      "library": "idd",
      "description": "Implements Kleene algebra with tests, providing operations for boolean tests and regular expressions over those tests. It works with boolean values `b` and expressions `t`, supporting logical operations, conditionals, and iteration. Use for modeling program control flow, verifying properties of imperative programs, or building domain-specific languages with branching and looping constructs.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Dd",
      "library": "idd",
      "description": "This module implements hash-consed decision diagrams with operations for constructing and comparing binary trees representing Boolean functions. It works with a tree type `t` that has leaves labeled true or false and branches labeled with variables, each with `hi` and `lo` subtrees. Use cases include symbolic representation and manipulation of Boolean expressions, such as evaluating circuits or optimizing logic formulas using a manager for structural equality.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Idd",
      "library": "idd",
      "description": "This module provides operations for manipulating identity-suppressed decision diagrams (IDDs) and Boolean decision diagrams (BDDs), enabling efficient representation and transformation of relations over boolean variables. It supports core operations such as relational composition, union, Kleene star, conjunction, and negation, working directly with types `Idd_.Bdd.t` and `Idd_.Idd.t`. These tools facilitate symbolic model checking, finite-state automata manipulation, and relational reasoning in formal verification tasks. Submodules extend these capabilities with specialized relational and logical transformations, integrating seamlessly with the main API for tasks like language recognition and transition system analysis.",
      "description_length": 729,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Var",
      "library": "idd",
      "description": "This module represents boolean variables used for branching in decision diagrams, internally modeled as records containing an integer index. It provides operations to create input and output variables, compare their ordering relative to the root of a diagram, and check relationships such as being an input/output pair. Use cases include constructing and manipulating ordered binary decision diagrams (BDDs) where variable ordering affects structure and efficiency.",
      "description_length": 465,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Algebra",
      "library": "idd",
      "description": "This module provides a unified framework for reasoning about program control flow and logical expressions through algebraic structures such as Boolean algebras, Kleene algebras, and their extensions. It includes core operations like meet, join, negation, and star, along with constants zero and one, enabling formal manipulation of logical and programmatic constructs. The child modules specialize these abstractions, offering concrete implementations for boolean logic, program composition, and control structures like if-then-else and while loops over actions and tests. Together, they support applications such as modeling imperative programs, analyzing regular expressions, and verifying properties of concurrent or structured computations.",
      "description_length": 744,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Boolean",
      "library": "idd",
      "description": "This module provides a Boolean algebra system with a custom type `t` for representing logical expressions, including constants `fls` and `tru`, variables via `var`, and compound expressions built using conjunction, disjunction, negation, and implication. It supports evaluating expressions under specific variable assignments, checking equivalence between expressions, and symbolic manipulation of logical formulas. Operations like `of_bool` convert standard Booleans into expressions, while submodules enable structured theorem proving and constraint evaluation. Example uses include building and simplifying logical expressions, verifying equivalences, and modeling constraint systems.",
      "description_length": 687,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Bdd",
      "library": "idd",
      "description": "This module provides a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs), supporting operations such as conjunction, disjunction, negation, and conditional (ite) expressions over a BDD manager and variable set. It centers around the `t` type representing BDDs, with variables identified by strings, and includes core operations for creating true and false values, declaring variables, and testing equivalence. Submodules extend this foundation to enable symbolic reasoning tasks like Boolean function equivalence checking, model counting, and logic synthesis. Example uses include verifying digital circuits, solving constraint systems, and optimizing logical expressions.",
      "description_length": 720,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_",
      "library": "idd",
      "description": "This module suite provides a comprehensive framework for symbolic manipulation of Boolean functions and relations using decision diagrams, centered around types like `t` for binary trees with variable-labeled nodes and Boolean leaves. Core operations include construction, comparison, conjunction, negation, and relational composition, enabling tasks such as logic optimization, model checking, and constraint solving. Users can build and evaluate Boolean expressions, perform symbolic reasoning with BDDs and IDDs, and manipulate control flow structures using algebraic operations. Example applications include verifying digital circuits, analyzing finite-state systems, and simplifying logical formulas using hash-consed or identity-suppressed representations.",
      "description_length": 762,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 762,
    "min_description_length": 261,
    "avg_description_length": 540.3571428571429,
    "embedding_file_size_mb": 0.051280975341796875
  }
}