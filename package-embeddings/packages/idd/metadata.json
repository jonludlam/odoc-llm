{
  "package": "idd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:20:58.932185",
  "modules": [
    {
      "module_path": "Idd_.Bdd.Make",
      "library": "idd",
      "description": "This module implements a boolean algebra for constructing and manipulating Reduced Ordered Binary Decision Diagrams (BDDs) using named variables. It supports operations such as conjunction, disjunction, and negation, along with variable declaration and boolean evaluation. Concrete use cases include symbolic reasoning, formal verification, and combinatorial problem solving where compact representation of boolean functions is required.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Idd.Rel",
      "library": "idd",
      "description": "This module implements relational operations over identity-suppressed decision diagrams, including conjunction, disjunction, and negation for Boolean expressions, as well as sequential composition, union, and Kleene star for IDD values. It works directly with `Idd_.Bdd.t` for Boolean logic and `Idd_.Idd.t` for relational structures. Concrete use cases include symbolic model checking, formal verification of state transitions, and manipulating large finite relations compactly.",
      "description_length": 479,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Boolean",
      "library": "idd",
      "description": "This module implements a Boolean algebra interface with operations such as conjunction, disjunction, negation, and implication. It works with abstract Boolean values and supports evaluating logical expressions over them. Concrete use cases include symbolic logic manipulation, circuit design modeling, and formal verification tasks.",
      "description_length": 332,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Idd_.Algebra",
      "library": "idd",
      "description": "This module defines algebraic structures for Boolean algebras, Kleene algebras, Kleene algebra with tests (KAT), and guarded Kleene algebra with tests (GKAT). It includes operations such as join, meet, negation, and sequential composition, along with axiomatic laws that these structures must satisfy. These interfaces are used to model program logics and verification conditions in formal methods, particularly in the analysis of imperative and reactive systems.",
      "description_length": 463,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Dd",
      "library": "idd",
      "description": "This module implements hash-consed decision trees representing Boolean functions, with nodes branching on variables and leaves for true/false. It supports constructing diagrams via branching operations, comparing them in constant time using unique identifiers, and extracting structural properties like variable indices. Use cases include symbolic representation of logic formulas, memoization of diagram-based computations, and building blocks for BDDs or custom decision diagram variants.",
      "description_length": 490,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Bdd",
      "library": "idd",
      "description": "This module implements reduced ordered binary decision diagrams (BDDs) for efficient representation and manipulation of Boolean functions. It provides operations for constructing BDDs from variables, performing logical operations (conjunction, disjunction, negation, and if-then-else), and evaluating BDDs under variable assignments. The primary data structures are BDDs themselves, represented as `t`, and a `manager` that handles memory and uniqueness constraints during construction.",
      "description_length": 486,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Idd",
      "library": "idd",
      "description": "This module implements operations for constructing and manipulating identity-suppressed decision diagrams, including relational composition, union, and transitive-reflexive closure. It works directly with `Idd_.Idd.t` for relational structures and `Idd_.Var.t` for variables, supporting concrete tasks such as symbolic model checking and formal verification of state transitions. Key functions include `test`, `set`, `branch`, and `apply` for building diagrams, along with `seq`, `union`, and `star` for high-level relational operations.",
      "description_length": 537,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_.Var",
      "library": "idd",
      "description": "This module represents boolean variables used for branching in decision diagrams, internally modeled as indexed records for type safety. It provides operations to create input and output variables, compare their ordering relative to the root of a diagram, and check relationships such as being an input/output pair. Use cases include managing variable ordering in IDD-based symbolic algorithms and ensuring correct variable comparisons during diagram manipulation.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Idd_",
      "library": "idd",
      "description": "This module implements identity-suppressed decision diagrams for symbolic representation of relations and state transitions. It provides operations for relational composition, union, and closure, working with `Idd_.Idd.t` and `Idd_.Var.t` to support tasks like symbolic model checking and verification of reactive systems. Key functions include `test`, `set`, `branch`, and `apply` for diagram construction, along with `seq`, `union`, and `star` for high-level relational manipulation.",
      "description_length": 485,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 332,
    "avg_description_length": 463.6666666666667,
    "embedding_file_size_mb": 0.130889892578125
  }
}