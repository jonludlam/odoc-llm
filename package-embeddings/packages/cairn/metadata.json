{
  "package": "cairn",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-07-15T23:08:58.915767",
  "modules": [
    {
      "module_path": "Cairn.Parsing.parser_decorated-Parser",
      "library": "cairn",
      "description": "This module enhances a Menhir-generated parser with error reporting and execution logging capabilities. It works with lexing buffers and token streams to parse input, producing structured values while tracking parsing progress and errors. It is used to build robust parsers that can handle complex grammars and provide detailed diagnostics during parsing.",
      "description_length": 355,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.Make",
      "library": "cairn",
      "description": "This module generates a parser that logs execution steps, captures multiple errors, and offers interactive exploration of parsing derivations. It works with lexing buffers and parser modules produced by Menhir, along with grammar and error message modules. Concrete use cases include debugging complex parsing processes, analyzing error propagation, and interactively inspecting parser behavior during development.",
      "description_length": 414,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_messages",
      "library": "cairn",
      "description": "This module provides a `message` function that maps integer error codes to descriptive strings, enabling detailed error reporting in parsers generated by Menhir. It works with parsers that are instrumented to signal multiple errors and require human-readable diagnostics. A concrete use case is displaying specific syntax or semantic error messages during parsing when combined with a Menhir-generated parser and error-handling infrastructure.",
      "description_length": 443,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_decorated-Lexer",
      "library": "cairn",
      "description": "This module defines a lexer function `token` that processes input from a `lexbuf` and produces tokens for a parser. It works with lexical buffers and parser tokens, specifically handling the tokenization phase of parsing. Use this module to integrate lexical analysis into a parser that supports error logging and reporting, particularly when building parsers with Menhir that require detailed error handling.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_decorated-Parser-MenhirInterpreter",
      "library": "cairn",
      "description": "This module enhances Menhir's incremental parser with advanced error handling, logging, and introspection features. It operates on tokens, parser checkpoints, and environments to enable feeding input, resuming parsing after errors, and analyzing states or productions through utilities like `offer`, `resume`, and `acceptable`. Specific use cases include debugging parser behavior via state inspection, recovering from multiple syntax errors, and integrating lexers with custom token supply logic.",
      "description_length": 497,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairn.Parsing.parser_decorated-Parser-Incremental",
      "library": "cairn",
      "description": "This module provides an incremental parsing interface with error logging and recovery capabilities, built on Menhir-generated parsers. It works with checkpoints and positions to track parsing progress and handle partial input. Concrete use cases include interactive REPLs and streaming parsers where input is processed in chunks.",
      "description_length": 329,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairn.Parsing.parser_decorated",
      "library": "cairn",
      "description": "This module enhances a Menhir-generated parser with error logging and recovery capabilities, allowing it to report multiple parsing errors based on the specified strategy. It operates on parsers and lexers generated by Menhir with specific options, handling the parsed values and error states according to the `error_strategy`. Concrete use cases include building robust command-line interface parsers or configuration file readers that can recover from and report meaningful errors.",
      "description_length": 483,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.MakeWithDefaultMessage",
      "library": "cairn",
      "description": "This module creates a parser that logs execution details and reports errors using default messages like \"Error on state x\". It works with lex buffers and parser modules generated by Menhir, along with their associated grammar modules. It supports interactive log navigation, file-based logging, and error tracking, returning parsed values or `None` on failure.",
      "description_length": 360,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_logger",
      "library": "cairn",
      "description": "This module provides functions to parse input text with detailed logging and error tracking, supporting interactive log exploration or output to files. It works with lex buffers and string inputs, producing parsed values alongside logs and error messages. Concrete use cases include debugging parsers by visualizing execution steps in a terminal UI or analyzing logs written to disk for complex input scenarios.",
      "description_length": 411,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_logger-Parser-Parser-Incremental",
      "library": "cairn",
      "description": "This module provides functions to instrument a Menhir-based parser with detailed execution logging and multi-error reporting capabilities. It operates on parsers generated by Menhir, specifically those conforming to the incremental API, allowing inspection of parsing steps and error recovery. It is used to enhance diagnostic output during parsing, particularly useful when debugging complex syntax errors in source files.",
      "description_length": 423,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_logger-Parser-Parser-MenhirInterpreter",
      "library": "cairn",
      "description": "This module provides incremental parsing operations with error recovery and logging, enabling token ingestion (`offer`), parser control (`resume`, `loop`), and state inspection (`stack`, `acceptable`). It works with Menhir-generated parsers, handling data structures like checkpoints, environments, LR(1) states, and symbol productions while supporting positional tracking for error reporting. Specific use cases include debugging parser behavior, implementing custom error recovery strategies, and analyzing grammar properties like first sets and nullable nonterminals.",
      "description_length": 570,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairn.Parsing.parser_logger-Parser",
      "library": "cairn",
      "description": "This module provides a parser that logs execution steps and handles multiple error scenarios according to a specified strategy. It works with parsers generated by Menhir, along with their associated lexer and grammar modules, to produce detailed output during parsing. Concrete use cases include debugging complex grammars, recovering from syntax errors in real-time editors, and generating traceable logs for parser behavior validation.",
      "description_length": 437,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairn.Parsing.parser_logger-Parser-Parser",
      "library": "cairn",
      "description": "This module provides a parser that logs execution steps and reports multiple errors using Menhir-generated components. It works with token streams and lex buffers, producing parsed values while enabling detailed error diagnostics. Concrete use cases include building resilient parsers for languages where tracking parsing progress and collecting errors is critical, such as compilers or interpreters.",
      "description_length": 400,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing.parser_logger-Parser-Lexer",
      "library": "cairn",
      "description": "This module defines a lexer function `token` that processes input from a `lexbuf` and produces tokens for a parser. It operates on lexical buffers and parser tokens, specifically handling the transformation of character streams into structured token values. It is used in conjunction with a Menhir-generated parser to enable tokenization during parsing.",
      "description_length": 353,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn.Parsing",
      "library": "cairn",
      "description": "This module creates parsers that log execution and handle multiple error strategies, combining Menhir-generated parsers with enhanced diagnostics and recovery. It provides data types like checkpoints, environments, and error codes, along with operations for tokenizing input, parsing incrementally, and inspecting parser states. You can build resilient parsers that recover from syntax errors, report detailed diagnostics using custom or default messages, and log parsing steps for debugging or analysis. Submodules handle token generation, error mapping, state introspection, and interactive parsing, enabling use cases like real-time error recovery, compiler frontends, and parser debugging tools.",
      "description_length": 699,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairn.ParserLog",
      "library": "cairn",
      "description": "This module defines types and operations for logging and visualizing parser configurations and actions, independent of specific parser implementations. It provides functions to create and modify parser logs, apply actions to configurations, and generate string or terminal-based representations of parser states. Concrete use cases include building a step-by-step log of a hand-written parser's execution, debugging parser behavior through a TUI explorer, and displaying derivation sequences in a structured format.",
      "description_length": 515,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairn",
      "library": "cairn",
      "description": "This module combines parser construction with detailed diagnostics and logging to support resilient parsing and analysis. It offers data types such as checkpoints, environments, error codes, and parser logs, along with operations for incremental parsing, error recovery, state inspection, and action application. You can build parsers that handle syntax errors gracefully, generate detailed diagnostic reports, and log execution steps for debugging or visualization. Use cases include compiler frontends with real-time error recovery, interactive parser debuggers, and tools for analyzing and displaying parsing derivations.",
      "description_length": 624,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 699,
    "min_description_length": 329,
    "avg_description_length": 454.2352941176471,
    "embedding_file_size_mb": 0.06226062774658203
  }
}