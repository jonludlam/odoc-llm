{
  "package": "bastet_async",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-14T23:20:10.837657",
  "modules": [
    {
      "module_path": "Bastet_async.List.Traversable.Fold_Map",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over a list, applying a function to each element and accumulating results using a monadic context. Works with lists and a monad defined by the `M` module. Useful for processing elements with effects, such as accumulating state or handling I/O, while transforming and combining results.",
      "description_length": 328,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.List.Traversable.Fold_Map_Plus",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over a list, applying a function to each element and accumulating results using the `P` monad. Works with lists of elements and a monadic type `P` that supports binding and return operations. Useful for sequentially processing list elements while accumulating state, such as collecting results from asynchronous operations or handling effectful transformations.",
      "description_length": 404,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Array.Traversable.Fold_Map_Any",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over an array, applying a function to each element and accumulating results within a monadic context. Works with arrays of type `'a Bastet_async.Array.Traversable.t` and monadic values of type `'b M.t`. Useful for processing array elements with effects, such as asynchronous computations or error handling, while transforming and combining results.",
      "description_length": 391,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bastet_async.Array.Traversable.Fold_Map_Plus",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over an array, applying a function to each element and accumulating results in a monadic context. Works with arrays and monadic values parameterized by the module P. Useful for processing array elements with effects, such as accumulating state or handling optional or asynchronous computations.",
      "description_length": 337,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.List.Traversable.Fold_Map_Any",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over a list, applying a function that returns a monadic value to each element and accumulating results in sequence. Works with lists of any type and a monad specified by the parameter module. Useful for executing a series of monadic actions over list elements and collecting their results in order.",
      "description_length": 341,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Array.Traversable.Fold_Map",
      "library": "bastet_async",
      "description": "Performs a combined fold and map operation over an array, applying a function to each element and accumulating results within a monadic context. Works with arrays and a monad specified by the parameter module. Useful for processing array elements with side effects, such as accumulating state or handling optional values, while transforming elements.",
      "description_length": 350,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.List.Traversable",
      "library": "bastet_async",
      "description": "This module provides operations for mapping, folding, and traversing lists with support for monadic and applicative effects. It works with lists and monadic or applicative types, enabling transformations and accumulations that sequence effects across elements. Concrete use cases include processing lists of asynchronous values, accumulating state while transforming elements, and composing effectful operations over list structures.",
      "description_length": 433,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Array.Traversable",
      "library": "bastet_async",
      "description": "This module provides operations for mapping, folding, and traversing arrays with support for monadic and applicative effects. It works with arrays and monadic or applicative values, enabling transformations and accumulations that handle effects like state, optionality, or asynchronicity. Concrete use cases include processing arrays of asynchronous computations, accumulating state while transforming elements, and handling optional values during traversal.",
      "description_length": 458,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Array",
      "library": "bastet_async",
      "description": "This module provides operations for mapping, folding, and traversing arrays with support for monadic and applicative effects. It works with arrays and monadic or applicative values, enabling transformations and accumulations that handle effects like state, optionality, or asynchronicity. Concrete use cases include processing arrays of asynchronous computations, accumulating state while transforming elements, and handling optional values during traversal.",
      "description_length": 458,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.List",
      "library": "bastet_async",
      "description": "This module provides functions for mapping, folding, and traversing lists with monadic and applicative effects. It operates on lists and integrates with monadic or applicative types to sequence effects across elements. Use it to process lists of asynchronous values, accumulate state during transformations, or compose effectful operations over list elements.",
      "description_length": 359,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Apply",
      "library": "bastet_async",
      "description": "This module implements applicative functor operations for asynchronous computations. It provides `map` to transform values within an asynchronous context and `apply` to invoke asynchronous functions over asynchronous arguments. These operations work directly on values wrapped in the `Apply.t` type, enabling composition of concurrent tasks that maintain ordering and dependencies.",
      "description_length": 381,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bastet_async.Monad",
      "library": "bastet_async",
      "description": "This module implements monadic operations for asynchronous computations, enabling sequencing and transformation of async values. It provides `map`, `apply`, `pure`, and `flat_map` to work with the `Bastet_async.Monad.t` type, which represents asynchronous actions. Use it to compose non-blocking I/O operations, handle deferred results, or chain async tasks with dependencies.",
      "description_length": 376,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Applicative",
      "library": "bastet_async",
      "description": "This module implements applicative functor operations for asynchronous computations. It provides `map`, `apply`, and `pure` to manipulate values within an asynchronous context, enabling function composition across deferred or concurrent data flows. Use it to sequence asynchronous operations, such as handling I/O-bound tasks like network requests or file reads, where functions need to be applied to values that become available over time.",
      "description_length": 440,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Infix",
      "library": "bastet_async",
      "description": "This module defines infix operators for working with monadic values in asynchronous computations. It provides function application, composition, and chaining operations tailored for `Bastet_async.Monad.t`, enabling concise manipulation of asynchronous data flows. These operators are used to sequence async actions, transform results, and combine effectful computations in event-driven or concurrent systems.",
      "description_length": 408,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async.Functor",
      "library": "bastet_async",
      "description": "Implements a mapping operation that applies a function to values within a generic container, transforming the contained type while preserving structure. Works directly with polymorphic containers supporting the `t` type constructor. Useful for transforming results of asynchronous computations without altering their execution context.",
      "description_length": 335,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bastet_async",
      "library": "bastet_async",
      "description": "Implements monadic and applicative operations for sequencing and transforming asynchronous computations. Works with polymorphic containers, lists, and arrays, applying functions to values within asynchronous contexts. Useful for composing non-blocking I/O, handling deferred results, and processing collections of concurrent tasks with dependencies.",
      "description_length": 349,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 458,
    "min_description_length": 328,
    "avg_description_length": 384.25,
    "embedding_file_size_mb": 0.21799087524414062
  }
}