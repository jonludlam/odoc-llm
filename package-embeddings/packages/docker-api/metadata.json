{
  "package": "docker-api",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:38.342500",
  "modules": [
    {
      "module_path": "Docker.Container.Exec",
      "library": "docker-api",
      "description": "This module creates and starts executable commands within running Docker containers, capturing their output streams. It works with container identifiers and command-line arguments to execute processes, supporting options like input/output redirection and environment variables. Concrete use cases include running diagnostic tools, executing scripts, or interacting with services inside a container at runtime.",
      "description_length": 409,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker.Stream",
      "library": "docker-api",
      "description": "This module handles streaming input and output from Docker containers. It provides functions to read from and write to container processes, distinguish between stdout and stderr output, and manage stream lifecycle. Use it to capture logs, send input to running containers, or process command output incrementally.",
      "description_length": 313,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docker.Image",
      "library": "docker-api",
      "description": "This module manages Docker images, providing operations to list existing images and create new ones from registries or local sources. It works with image identifiers, timestamps, size metadata, and tag lists, supporting creation via pulling or importing. Concrete use cases include retrieving image details like size and creation time, pulling images from a registry using a name, repository, and tag, and importing images from raw data or stdin.",
      "description_length": 446,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker.Container",
      "library": "docker-api",
      "description": "This module manages Docker containers through operations like listing, creating, starting, stopping, and removing containers, as well as attaching to and inspecting running processes. It works with container identifiers, host configurations, and volume bindings to control container behavior, including resource limits, restart policies, and network settings. Concrete use cases include deploying isolated services, running transient build environments, and managing long-running processes with controlled resource allocation.",
      "description_length": 526,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docker",
      "library": "docker-api",
      "description": "This module implements a low-level interface to the Docker Remote API, enabling direct interaction with Docker daemons. It provides functions for managing containers, images, and streams, including operations like container lifecycle control, image retrieval, and real-time log capture. Use it to automate container deployment, inspect running services, or stream input/output from processes in containers.",
      "description_length": 406,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 526,
    "min_description_length": 313,
    "avg_description_length": 420.0,
    "embedding_file_size_mb": 0.07288932800292969
  }
}