{
  "package": "conduit-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-07-15T23:07:47.005681",
  "modules": [
    {
      "module_path": "Conduit_async.V1.Conduit_async.Ssl",
      "library": "conduit-async",
      "description": "This module handles SSL/TLS configuration and certificate verification for asynchronous network connections. It provides functions to create and serialize SSL configurations, set verification callbacks, and check certificate validity on established connections. Use it to secure client or server communication with custom certificate authorities, protocol versions, or hostname validation.",
      "description_length": 389,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conduit_async.V3.Ssl.Config",
      "library": "conduit-async",
      "description": "This module creates and manages SSL/TLS configuration values for establishing secure network connections. It supports setting protocol versions, cipher suites, certificate authorities, and certificate files, along with verification modes and custom verification callbacks. Use it to configure HTTPS clients or servers requiring specific SSL parameters.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_async.V2.Ssl.Config",
      "library": "conduit-async",
      "description": "This module defines SSL/TLS configuration values and provides a way to create and serialize them. It works with SSL versions, cipher suites, certificate paths, and connection verification settings. Use it to configure secure network connections with custom certificates, ciphers, and verification modes.",
      "description_length": 303,
      "index": 2,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Conduit_async.V1.Conduit_async_ssl",
      "library": "conduit-async",
      "description": "This module implements SSL/TLS encryption for network connections using the Async library. It provides `ssl_connect` to establish secure client connections with SSL configuration, and `ssl_listen` to set up secure server endpoints with certificate and key files. These functions are used to wrap raw readers and writers into encrypted communication channels, enabling secure data transmission over networks.",
      "description_length": 407,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_async.V1.Conduit_async",
      "library": "conduit-async",
      "description": "This module enables asynchronous network operations for establishing and managing TCP, SSL/TLS, and Unix domain socket connections, with support for serialization, secure communication configuration, and trust chain validation. It provides core data types such as `Socket`, `Buffer`, and `Certificate`, along with operations for connection setup, I/O handling, and secure session management. The SSL/TLS submodule extends this functionality by allowing fine-grained control over encryption parameters, certificate validation, and secure handshake procedures. You can build asynchronous servers that enforce client certificate authentication, configure TLS clients with custom trust stores, or manage high-throughput network services with bounded buffer and connection limits.",
      "description_length": 775,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_async.V2.Ssl",
      "library": "conduit-async",
      "description": "This module handles the creation and serialization of SSL/TLS configurations, enabling customization of secure connections. It supports operations on SSL versions, cipher suites, certificate paths, and verification settings. You can define configurations that specify allowed ciphers, certificate chains, and client verification modes. For example, it allows setting up a server to use TLS 1.3 with specific ciphers and require client certificates for mutual authentication.",
      "description_length": 474,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conduit_async.V3.Ssl",
      "library": "conduit-async",
      "description": "This module handles the creation and management of SSL/TLS configurations for secure network connections. It allows setting protocol versions, cipher suites, certificate authorities, and certificate files, along with verification modes and custom callbacks. Use it to configure HTTPS clients or servers with specific security parameters, such as enforcing TLS 1.2 or loading a custom CA chain.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conduit_async.V1",
      "library": "conduit-async",
      "description": "This module handles serialization and deserialization of SSL-related types like sessions and protocol versions using S-expressions, enabling storage or transmission of SSL state. It works with Async_ssl data types, allowing operations such as logging session details or reconstructing SSL versions from configs. Submodules provide SSL/TLS encryption over networks with functions like `ssl_connect` and `ssl_listen`, wrapping raw I/O into secure channels. Additional support for async TCP, Unix sockets, and fine-grained SSL control enables servers with client auth, custom trust stores, and secure handshakes.",
      "description_length": 609,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_async.V3",
      "library": "conduit-async",
      "description": "This module enables asynchronous TCP/SSL connection setup and secure communication, with support for OpenSSL trust chains, cipher configuration, and generalized socket types like IPv4 and Unix domain sockets. It includes tools for serializing configurations and implementing servers with custom connection handling, allowing fine-grained control over TLS sessions and verification policies. The child module focuses on creating and managing SSL/TLS configurations, letting you set protocol versions, cipher suites, certificate authorities, and verification callbacks. Use these components together to build secure network services, such as HTTPS servers enforcing TLS 1.2 or clients with custom CA chains.",
      "description_length": 705,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conduit_async.V2",
      "library": "conduit-async",
      "description": "This module enables building TCP and TLS-based clients and servers with asynchronous I/O, supporting fine-grained control over SSL/TLS parameters such as protocol versions, cipher suites, and certificate verification. It provides data types for network addresses, TLS configurations, and security policies, along with operations for connection setup, runtime reconfiguration of trust chains, and throttling. A child module handles the creation and serialization of TLS configurations, allowing precise specification of ciphers, certificate paths, and client authentication requirements. For example, you can configure a secure server that enforces TLS 1.3, mutual authentication, and custom trust policies, while managing connections over TCP or Unix sockets with asynchronous I/O.",
      "description_length": 781,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Conduit_async",
      "library": "conduit-async",
      "description": "This module enables building and managing asynchronous network services with support for TCP and SSL/TLS, offering primitives for connection setup, secure communication, and server configuration. It defines key data types for network addresses, TLS settings, and connection handlers, with operations to control protocol versions, cipher suites, and certificate verification. Submodules handle SSL session serialization, secure channel creation via `ssl_connect` and `ssl_listen`, and configuration of trust chains and verification policies. You can build a TLS 1.3 server with mutual authentication, configure custom cipher suites, or serialize SSL sessions for logging and restoration, all while managing asynchronous I/O and connection throttling.",
      "description_length": 749,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 781,
    "min_description_length": 303,
    "avg_description_length": 539.7272727272727,
    "embedding_file_size_mb": 0.04038810729980469
  }
}