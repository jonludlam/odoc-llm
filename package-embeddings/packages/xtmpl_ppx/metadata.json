{
  "package": "xtmpl_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:48:53.985389",
  "modules": [
    {
      "module_path": "Xtmpl_ppx.Ppx_xtmpl",
      "library": "xtmpl_ppx",
      "description": "This module enables the construction and transformation of OCaml abstract syntax trees with precise location tracking, parsing of expressions and types, and XML-driven template parameter processing to generate specialized functions. It operates on OCaml AST nodes, XML structures, and attribute-type mappings, primarily serving use cases like syntax extension for template literals, type-safe code generation, and integration with PPX rewriters to automate boilerplate expansion. Key applications include embedding XML-based templates into OCaml codebases and deriving functions from declarative specifications.",
      "description_length": 611,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl_ppx",
      "library": "xtmpl_ppx",
      "description": "This module processes XML-based templates to generate OCaml functions with precise location tracking and type-safe AST transformations. It parses expressions and types, maps attributes to OCaml AST nodes, and integrates directly with PPX rewriters to automate syntax extensions and boilerplate code generation. Concrete use cases include embedding XML templates into OCaml source code and deriving specialized functions from declarative XML specifications.",
      "description_length": 456,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 611,
    "min_description_length": 456,
    "avg_description_length": 533.5,
    "embedding_file_size_mb": 0.02938079833984375
  }
}