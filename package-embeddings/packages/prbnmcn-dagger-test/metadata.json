{
  "package": "prbnmcn-dagger-test",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 45,
  "creation_timestamp": "2025-08-15T14:17:23.330835",
  "modules": [
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.FM.Map",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements a finite map with keys of type `R2.t` (from the `Dagger_tests.Linear_regression.Smc` module) and polymorphic values, supporting standard operations like insertion, deletion, merging, and functional transformations. It provides traversal, filtering, and conversion to/from sequences and lists, enabling efficient manipulation of key-value associations. The structure is used in Bayesian linear regression testing to manage parameter bindings and process data through functional pipelines, particularly leveraging sequence conversions for batch updates or iterative computations.",
      "description_length": 600,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.R2.R",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements arithmetic operations and comparisons for a scalar float type used in Bayesian linear regression tests. It provides basic numerical functionality such as addition, subtraction, multiplication, and conversion from integers, along with support for formatting and hashing. This module is used to compute and track R\u00b2 (coefficient of determination) values during regression testing.",
      "description_length": 401,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.FM.Basis",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines a basis type used in sequential Monte Carlo (SMC) algorithms for Bayesian linear regression. It includes operations for comparing, printing, and hashing basis elements, ensuring consistent handling of keys in map structures. The module supports constructing and manipulating regression models using specific basis functions tailored to the SMC inference backend.",
      "description_length": 382,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.FM.R",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements arithmetic operations and comparisons for a custom numeric type `t` used in Bayesian linear regression tests. It supports addition, subtraction, multiplication, negation, and scalar conversion from integers, along with equality checks, ordering, and pretty-printing. This type is specifically used to represent regression coefficients or residuals in a structured, testable form.",
      "description_length": 402,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Smc.Infix",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines monadic and applicative operators for composing computations in a specific effect context. It works with values wrapped in the `Dagger_tests.Poly.Smc.t` type, enabling sequential composition, value transformation, and parallel combination of effectful actions. Concrete use cases include structuring asynchronous or effectful pipelines where dependencies between stages must be explicitly managed.",
      "description_length": 417,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Smc.Seq_ops",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides `fold` and `iter` operations for processing sequences within a specific monadic context. It works with sequence data structures and monadic values parameterized by type `'a` and `'b`. These functions are used to accumulate results or perform effects over sequence elements in a controlled evaluation order.",
      "description_length": 327,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Smc.Array_ops",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides monadic `fold` and `iter` operations over arrays within a specific effect context. It works with arrays of values wrapped in a monadic type, allowing sequential computation over elements with effects. These functions are useful for executing effectful traversals where each step depends on the previous, such as accumulating state or performing effectful inspections across array elements.",
      "description_length": 410,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Gen.Rational",
      "library": "prbnmcn-dagger-test",
      "description": "Generates values from a categorical distribution with specified probabilities. Works with arrays of value-probability pairs, where probabilities are rational numbers. Useful for testing probabilistic models or sampling scenarios with exact fractional weights.",
      "description_length": 259,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.FM",
      "library": "prbnmcn-dagger-test",
      "description": "This module represents linear functionals over a basis in a sequential Monte Carlo context, supporting operations like pointwise evaluation, scalar multiplication, addition, and negation. It works with basis elements and numeric values to model regression parameters, enabling construction from lists of basis-value pairs and folding over these pairs. Concrete use cases include building and manipulating probabilistic regression models where functionals are combined or transformed during inference steps.",
      "description_length": 506,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Map_array.Pure.Infix",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides monadic and applicative operators for composing computations over a pure map-array structure. It supports binding, mapping, and combining values within a monadic context, enabling sequential composition and transformation of results. Concrete use cases include chaining data transformations and validations where each step depends on the previous result, and combining multiple independent computations into a single result pair.",
      "description_length": 450,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Poly.Smc.List_ops",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides monadic `fold` and `iter` operations over lists in a specific monadic context. It works with lists of values wrapped in a monad `Dagger_tests.Poly.Smc.t`. These functions are used to sequence monadic actions across list elements, accumulating results or performing effects in a controlled order.",
      "description_length": 316,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Gen.Infix",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines monadic and applicative operators for the `Gen` type, enabling sequential composition and transformation of generator computations. It provides the bind (`>>=`, `let*`) and map (`>|=`) operations, along with `return` for wrapping values. These are used to build complex test data generators in a fluent, expression-oriented style.",
      "description_length": 350,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.Table",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements a hash table for key-value pairs with `R2.t` keys and polymorphic values, offering associative operations like insertion, lookup, in-place filtering, and sequence-based bulk updates. It supports transformations through iteration, folding, and conversion to/from sequences, enabling efficient management of dynamic datasets. Designed for Bayesian linear regression workflows, it facilitates iterative parameter updates and batch processing of statistical data points using sequence-driven modifications.",
      "description_length": 525,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc.R2",
      "library": "prbnmcn-dagger-test",
      "description": "This module represents R\u00b2 (coefficient of determination) values as pairs of floats and provides arithmetic operations, comparisons, and formatting for these values. It supports addition, negation, scalar multiplication using a scalar from the R submodule, and standard comparison and equality checks. It is used to compute and track R\u00b2 metrics during Bayesian linear regression tests, enabling numerical evaluation of model performance.",
      "description_length": 436,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Smc",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides monadic sequencing operations (`bind`, `map`) for probabilistic computations, score manipulation in log space (`score`, `log_score`), and traversal methods for lists, arrays, and sequences. It operates on particles and their populations, supporting resampling, forking, and log-space score management to handle numerical stability in probabilistic models. These capabilities are tailored for sequential",
      "description_length": 423,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Resampling_test.Rat",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements rational number arithmetic and numerical operations over the `Q.t` type, supporting precise computations with addition, multiplication, exponentiation, and comparisons. It includes utilities for converting between rational numbers and floats/integers, generating random values in [0,1], and pretty-printing results. These capabilities are particularly useful for numerical algorithms requiring exact fractional representations, such as probabilistic resampling methods in statistical inference.",
      "description_length": 517,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Dist_smc",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines probabilistic distributions and operations for constructing and manipulating distribution objects. It supports common statistical distributions like Gaussian, gamma, and Bernoulli, and allows creating arrays of independent identically distributed values. These capabilities are used to model stochastic processes and perform probabilistic inference tasks.",
      "description_length": 375,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Smc",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements Bayesian linear regression tests using sequential Monte Carlo inference, focusing on model evaluation and parameter averaging. It operates on populations of regression models, computing performance metrics like R\u00b2 values and supporting iterative updates through statistical data sequences. Concrete use cases include evaluating regression accuracy over sampled data points and aggregating model parameters across inference steps.",
      "description_length": 452,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Resampling_test.Dist",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines a measure generator for QCheck, working with weighted value lists and distributions. It provides functions to generate, simplify, and transform distributions, including flipping weights and copying distributions. Concrete use cases include testing resampling strategies in sequential Monte Carlo methods with specific weight manipulations.",
      "description_length": 359,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Traced_incremental",
      "library": "prbnmcn-dagger-test",
      "description": "Implements incremental Bayesian linear regression with traced parameter updates. Works with lists of float pairs for training data and functions mapping floats to floats for model prediction. Provides concrete operations for regression training, model evaluation on datasets, and probabilistic inference testing with QCheck.",
      "description_length": 324,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Poly",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements basic polynomial arithmetic using float arrays, where each array index corresponds to a polynomial coefficient. It supports operations such as addition, scalar multiplication, evaluation at a given point, and truncation to a specified degree. Concrete use cases include numerical computations involving polynomials, such as approximating functions or solving equations numerically.",
      "description_length": 404,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Map_array.Pure",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements a monadic structure for composing pure computations over arrays and maps, supporting operations like `bind`, `map`, `map2`, and `map_array` to transform and sequence values. It works with monadic values of type `('r, 'a) m`, arrays of these values, and functions that combine or extract data from them. Concrete use cases include validating and transforming sequences of data in a pipeline, where each step depends on prior results, and aggregating multiple independent computations into a single output.",
      "description_length": 527,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression.Traced",
      "library": "prbnmcn-dagger-test",
      "description": "Implements traced Bayesian linear regression with support for sampling and evaluation. Works with float pairs and functions mapping floats to floats, using Dagger's Lmh_inference type for probabilistic modeling. Designed for testing regression backends by generating traced model samples and evaluating their accuracy over a given input range.",
      "description_length": 343,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Resampling_test.R",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements resampling strategies for sequential Monte Carlo (SMC) methods, specifically stratified and systematic resampling. It operates on particle systems represented by the `Dagger__Resampling.Particles` module, using rational numbers for weights and indices. The functions take resampling parameters, a particle system, and a random number generator to produce resampled particle states while maintaining diversity above a specified effective sample size threshold.",
      "description_length": 482,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Dist",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines probabilistic distributions and operations to sample from them, including Gaussian, gamma, Bernoulli, and uniform (flat) distributions. It supports generating independent and identically distributed (i.i.d.) samples over arrays of arbitrary types. Concrete use cases include simulating random variables for statistical testing, generating synthetic datasets, and modeling stochastic processes.",
      "description_length": 413,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Lmh",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides operations for constructing probabilistic models (e.g., Gaussian, Gamma, mixture distributions) and validating their statistical correctness using Lightweight Metropolis-Hastings inference. It works with continuous variables represented as floats and custom `range` types, employing property-based testing with QCheck to verify inference accuracy against oracles. Specific use cases include testing convergence of probabilistic models, validating importance sampling correctness, and ensuring consistency in mixture distribution inference.",
      "description_length": 560,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Lmh_incremental",
      "library": "prbnmcn-dagger-test",
      "description": "This module supports testing of incremental Metropolis-Hastings inference models and probabilistic program consistency, focusing on float-valued distributions like Gaussian mixtures, gamma distributions, and sums of normals. It provides operations for generating synthetic test cases with controlled randomness, validating incremental inference updates, and comparing sampling strategies such as importance sampling against exact posterior estimates. Key use cases include benchmarking convergence behavior of probabilistic algorithms, debugging model inconsistencies, and visualizing distributional approximations through plotting tools.",
      "description_length": 638,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Smc_stratified",
      "library": "prbnmcn-dagger-test",
      "description": "This module evaluates sequential Monte Carlo (SMC) inference strategies on probabilistic models like Gaussian, gamma, and mixture distributions, executing operations such as burn-in SMC runs, distribution computations, and oracle PDF comparisons. It operates on `float` values and custom types including `range` for interval sampling and `Dagger.Smc_inference.Unit_smc.t` for SMC workflows, while validating correctness via `QCheck.Test.t`. Key use cases include testing SMC accuracy on 1D models (`gaussian_1d`, `gamma_1d`) and mixture models (`mixture1`), as well as benchmarking importance sampling strategies against ground-truth distributions.",
      "description_length": 648,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Gen",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides monadic combinators (`bind`, `map`, `return`) to compose generator pipelines for randomized data, supporting operations like transforming statistical distributions (uniform, Gaussian, Poisson), shuffling arrays, subsampling, and generating infinite sequences. It works with floats, arrays, lists, and custom probability distributions, enabling probabilistic sampling and structured data generation for combinatorial constructs like bounded tuples and mixtures. Typical use cases include property-based testing, synthetic dataset generation, and simulations requiring controlled statistical or structural variability.",
      "description_length": 637,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Sprinkler.Traced",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines a probabilistic model for a sprinkler system as a boolean distribution, runs inference with a specified number of samples, and provides a QCheck test for validating the model's behavior. It works with boolean values and probabilistic inference structures. A concrete use case is testing probabilistic inference accuracy in a simple Bayesian network model.",
      "description_length": 375,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly.Smc_types",
      "library": "prbnmcn-dagger-test",
      "description": "This module defines core types for representing particle outputs and resampling states in a probabilistic programming context. It works with algebraic data types to support structured computation over particles and resampling operations. Concrete use cases include modeling probabilistic workflows where particle filters or sequential Monte Carlo methods are applied.",
      "description_length": 367,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Smc_systematic",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements probabilistic inference workflows and statistical validation mechanisms for sequential Monte Carlo (SMC) algorithms. It operates on continuous distributions like Gaussian and gamma models, as well as mixture distributions, using numeric float representations, PDF evaluations, and importance sampling techniques. The system supports verifying algorithmic consistency through QCheck property-based testing and oracle-guided validation of inferred distributions against expected statistical behaviors.",
      "description_length": 522,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Sprinkler.Traced_incremental",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements a probabilistic model for a sprinkler system with biased coin flips, using incremental inference to estimate the likelihood of events. It defines a Bernoulli distribution with a given bias, runs a fixed number of samples, and provides a QCheck test for validating the inference results. The primary data types are `Dagger.Dist.t` for distributions and `Dagger.Lmh_incremental_inference.t` for the model.",
      "description_length": 426,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Basic_consistency.Make",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides probabilistic program evaluators and statistical test generators to validate consistency between sampling and inference methods in a probabilistic programming language. It operates on a domain-specific language (`Lang.t`) representing probabilistic computations, with a focus on Gaussian and gamma distributions, mixture models, and importance sampling techniques. Specific use cases include verifying unbiasedness in transformed distributions (e.g., sums, chains) and rigorously testing oracle-anchored statistical properties via QCheck's property-based testing framework.",
      "description_length": 594,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Yield",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements probabilistic inference tests using a stateful random number generator. It defines a recursive sampling loop that processes boolean lists and returns weighted results, alongside a suite of QCheck tests for validation. The primary use case involves verifying the correctness of inference algorithms through statistical testing and simulation.",
      "description_length": 364,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Biased_coin",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements statistical analysis and probabilistic testing for sequences of biased coin flips. It provides functions to compute aggregate statistics, evaluate outcomes under weighted conditions, and validate fairness properties using randomized testing frameworks. Concrete use cases include simulating coin flip experiments, validating probabilistic models, and testing statistical inference algorithms.",
      "description_length": 415,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Random_walks",
      "library": "prbnmcn-dagger-test",
      "description": "This module simulates random walks and visualizes their convergence to equilibrium. It provides a function to generate a random walk as a distribution, a plotting function for visual analysis, and a test suite to validate behavior. The primary data types include integer distributions and lists of floats for plotting. Use cases include running simulations, generating plots to observe convergence, and executing predefined tests for validation.",
      "description_length": 445,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Map_array",
      "library": "prbnmcn-dagger-test",
      "description": "This module provides functions for composing and running pure computations over arrays and maps using monadic operations like `bind`, `map`, and `map_array`. It supports data types including monadic values, arrays of monadic values, and functions that transform or combine these values. Concrete use cases include validating data pipelines where each transformation depends on prior results and aggregating multiple independent computations into a single output.",
      "description_length": 462,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Poly",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements polynomial arithmetic and probabilistic inference operations for numerical computations and statistical modeling. It works with float arrays to represent polynomial coefficients and algebraic data types for particle-based probabilistic computations. Concrete use cases include function approximation using polynomials, sequential Monte Carlo inference, and resampling workflows in probabilistic programming.",
      "description_length": 430,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Diffusions",
      "library": "prbnmcn-dagger-test",
      "description": "Handles probabilistic diffusion processes with incremental inference. Provides a diffusion model instance, functions to run traced and incremental inference, and utilities to plot results. Supports testing with QCheck for validation of stochastic behaviors.",
      "description_length": 257,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Linear_regression",
      "library": "prbnmcn-dagger-test",
      "description": "Implements Bayesian linear regression tests across multiple inference backends, supporting regression training, model evaluation, and probabilistic inference on synthetic float pair datasets. Provides concrete operations for sampling, plotting, and evaluating regression models using traced, incremental, and sequential Monte Carlo methods. Designed for testing backend accuracy through R\u00b2 metrics, parameter averaging, and QCheck-based validation on synthetic data.",
      "description_length": 466,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Sprinkler",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements probabilistic models for a sprinkler system using biased coin flips, supporting inference validation through QCheck tests. It works with boolean distributions and incremental inference structures, estimating event likelihoods via sampling. Concrete use cases include testing the accuracy of probabilistic inference in Bayesian network scenarios.",
      "description_length": 368,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dagger_tests.Basic_consistency",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements probabilistic inference workflows and statistical validation mechanisms for sequential Monte Carlo (SMC) algorithms. It operates on continuous distributions like Gaussian and gamma models, as well as mixture distributions, using numeric float representations, PDF evaluations, and importance sampling techniques. The system supports verifying algorithmic consistency through QCheck property-based testing and oracle-guided validation of inferred distributions against expected statistical behaviors.",
      "description_length": 522,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests.Resampling_test",
      "library": "prbnmcn-dagger-test",
      "description": "This module implements resampling strategies for sequential Monte Carlo methods, focusing on stratified and systematic resampling over rational-number-weighted particle systems. It provides functions to generate, manipulate, and test distributions with precise numerical operations, ensuring diversity maintenance via effective sample size thresholds. Concrete use cases include testing resampling accuracy on handcrafted distributions and simulating iterative resampling processes with controlled randomness.",
      "description_length": 509,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dagger_tests",
      "library": "prbnmcn-dagger-test",
      "description": "This module contains a collection of test implementations for probabilistic inference and statistical validation across various domains. It provides concrete functionality for sequential Monte Carlo, Bayesian networks, linear regression, diffusion processes, and random walks, using float arrays, boolean distributions, and numeric representations. Use cases include validating inference algorithms with QCheck, testing resampling strategies, simulating stochastic processes, and evaluating probabilistic models against synthetic data and statistical metrics.",
      "description_length": 559,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 45,
    "meaningful_modules": 45,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 648,
    "min_description_length": 257,
    "avg_description_length": 443.64444444444445,
    "embedding_file_size_mb": 0.6527061462402344
  }
}