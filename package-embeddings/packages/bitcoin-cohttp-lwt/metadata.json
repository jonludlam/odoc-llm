{
  "package": "bitcoin-cohttp-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:21.399582",
  "modules": [
    {
      "module_path": "Bitcoin_cohttp_lwt.Httpclient.Monad",
      "description": "Provides operations to sequence computations with side effects, handle errors, and manage asynchronous tasks. Works with the Lwt monad type, enabling non-blocking I/O and exception handling. Used to chain asynchronous operations, recover from exceptions, and structure event-driven code.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_lwt.Httpclient",
      "description": "Sequences side-effecting and asynchronous operations using the Lwt monad, supporting error recovery and non-blocking I/O. It enables chaining of event-driven tasks, handling exceptions, and managing concurrency. Key operations include binding, lifting, and error propagation. Examples include fetching data from multiple endpoints concurrently, retrying failed requests, and combining results from asynchronous computations.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bitcoin-cohttp-lwt",
      "description": "Provides functions for sending HTTP requests and handling responses using Lwt for asynchronous I/O, with support for parsing and serializing JSON data. Works with HTTP methods, headers, and body content, and integrates with Bitcoin-related APIs. Enables fetching blockchain data and interacting with Bitcoin nodes over HTTP.",
      "description_length": 324,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_lwt",
      "description": "Provides asynchronous, event-driven operation sequencing with error handling and concurrency management using the Lwt monad. Key operations include binding, lifting, and error propagation, enabling complex workflows like concurrent data fetching and request retries. It supports non-blocking I/O and exception handling within a unified execution model. Examples include combining results from multiple asynchronous calls and implementing robust retry logic for network requests.",
      "description_length": 478,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 4,
    "filtered_empty_modules": 3,
    "retention_rate": 0.5714285714285714
  },
  "statistics": {
    "max_description_length": 478,
    "min_description_length": 287,
    "avg_description_length": 378.25,
    "embedding_file_size_mb": 0.014943122863769531
  }
}