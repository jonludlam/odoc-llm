{
  "package": "bitcoin-cohttp-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:35.445283",
  "modules": [
    {
      "module_path": "Bitcoin_cohttp_lwt.Httpclient.Monad",
      "library": "bitcoin-cohttp-lwt",
      "description": "This module implements a monadic interface for handling asynchronous HTTP requests in the context of a Bitcoin client. It provides operations for sequencing asynchronous computations, error handling, and composing HTTP-based actions using Lwt. Concrete use cases include chaining Bitcoin node API calls, managing request failures, and composing complex wallet interactions over HTTP.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_lwt.Httpclient",
      "library": "bitcoin-cohttp-lwt",
      "description": "This module performs HTTP POST requests with custom headers, host, port, and URI, sending a string payload and returning a string response asynchronously. It works with Unix.inet_addr, string-based URLs, and key-value header lists, primarily used to interact with Bitcoin node APIs for tasks like submitting transactions or querying blockchain data. The monadic interface handles asynchronous HTTP request sequencing, error handling, and action composition using Lwt, enabling chained Bitcoin node API calls and complex wallet interactions over HTTP. Key data types include request configurations and response handlers, with operations for building, sending, and processing HTTP-based Bitcoin client communications.",
      "description_length": 715,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_lwt",
      "library": "bitcoin-cohttp-lwt",
      "description": "This module implements an asynchronous Bitcoin HTTP client using Cohttp and Lwt, enabling communication with Bitcoin nodes over HTTP. It supports custom HTTP POST requests with headers, host, port, and URI, sending string payloads and receiving string responses. Key operations include building and sending requests to interact with Bitcoin node APIs, such as submitting transactions or querying blockchain data. It handles asynchronous request sequencing, error handling, and composition, allowing chained API calls for complex wallet interactions.",
      "description_length": 549,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 715,
    "min_description_length": 383,
    "avg_description_length": 549.0,
    "embedding_file_size_mb": 0.011336326599121094
  }
}