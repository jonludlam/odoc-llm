{
  "package": "yuujinchou",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 28,
  "creation_timestamp": "2025-07-15T23:11:50.281477",
  "modules": [
    {
      "module_path": "Yuujinchou.Scope.Make.Perform",
      "library": "yuujinchou",
      "description": "This module provides functions to manually trigger specific scoping effects during name resolution. It works with context options, backward paths in a trie structure, and tuples of data and tags to handle cases like name not found, shadowing, and hook application. Concrete use cases include resolving name collisions, enforcing naming rules, and customizing scope behavior during trie traversal.",
      "description_length": 396,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.Make.Silence",
      "library": "yuujinchou",
      "description": "This module defines handlers that suppress effects by providing no-op implementations for `not_found`, `shadow`, and `hook` operations. It works with `Yuujinchou.Trie.bwd_path`, `Param.data`, `Param.tag`, and `Param.hook` types, manipulating trie structures in a silent manner. It is used to run modifier engines without producing side effects, useful for testing or dry-run scenarios.",
      "description_length": 385,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Scope.Make.Silence",
      "library": "yuujinchou",
      "description": "This module provides handlers that suppress all scoping effects by implementing no-op operations for `not_found`, `shadow`, and `hook`. It works with lexical scoping structures involving `Yuujinchou.Trie.bwd_path`, `Param.data`, `Param.tag`, and `Param.context`. Use this to disable effect triggering during name resolution or trie manipulation without altering behavior.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.Make.Perform",
      "library": "yuujinchou",
      "description": "This module provides functions to manually trigger specific effects during name resolution, including `not_found` for missing names, `shadow` for handling name shadowing between bindings, and `hook` for injecting custom transformations into the resolution pipeline. It operates on resolution contexts, backward paths in a trie, and tagged data within a trie structure. These handlers allow precise control over name resolution behavior in language processing pipelines.",
      "description_length": 469,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope.Perform-Param",
      "library": "yuujinchou",
      "description": "This module handles parameterized execution of scoped operations using a modifier-based system. It works with `data`, `tag`, `hook`, and `context` types to apply transformations and manage lexical scope during evaluation. Concrete use cases include dynamically modifying variable bindings and controlling name resolution in expression evaluation.",
      "description_length": 346,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Modifier.Make",
      "library": "yuujinchou",
      "description": "This module generates an engine for applying name transformations over trie structures with data and tags, handling effects such as name collisions, missing names, and custom hooks during traversal. It supports context-aware path modifications, enabling the implementation of renaming strategies and name resolution rules in language tools. The first child module allows running these transformations without side effects by suppressing `not_found`, `shadow`, and `hook` operations, making it suitable for testing or dry runs. The second child module provides explicit control over these effects, letting developers trigger name resolution behaviors manually within processing pipelines.",
      "description_length": 687,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.Perform",
      "library": "yuujinchou",
      "description": "This module defines operations to manually trigger effects during name resolution, including handling not-found scenarios, resolving name shadows, and applying hooks to trie structures. It works with `Param.context`, `Param.data`, `Param.tag`, and `Yuujinchou.Trie` types to manipulate and track name resolution state. Concrete use cases include customizing name disambiguation behavior and injecting resolution rules in language processing pipelines.",
      "description_length": 451,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Modifier.S-Silence",
      "library": "yuujinchou",
      "description": "This module defines handlers that suppress effects by implementing no-op operations for `not_found`, `shadow`, and `hook` triggers. It works with `Yuujinchou.Trie.bwd_path`, `Param.context`, `Param.data`, `Param.tag`, and `Param.hook` types. It is used to silence effect triggers during trie traversal or modification, effectively disabling custom behaviors without altering the underlying logic.",
      "description_length": 396,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.S",
      "library": "yuujinchou",
      "description": "This module defines the engine interface for running name modifiers over a trie structure, handling effects like not-found, shadowing, and hooks during traversal. It provides operations to modify tries using context-aware rules, register custom printers for debugging unhandled effects, and run or intercept modifier logic with customizable handlers. Concrete use cases include transforming symbol tables during compilation or resolving name collisions in nested scopes with contextual tagging.",
      "description_length": 494,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope.S-Silence",
      "library": "yuujinchou",
      "description": "This module provides handlers for suppressing effects during lexical scope resolution, specifically silencing `not_found`, `shadow`, and `hook` triggers. It operates on `Yuujinchou.Trie.bwd_path` and related trie structures containing `Param.data` and `Param.tag`. Concrete use cases include safely resolving names in a trie-based scope without raising errors or modifying the trie structure during lookups.",
      "description_length": 407,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.Param",
      "library": "yuujinchou",
      "description": "This module defines core parameter types used in the name modifier engine, including data, tag, hook, and context. These types represent linguistic elements and transformation rules applied during name processing. They enable precise manipulation and analysis of names based on structured metadata and transformation hooks.",
      "description_length": 323,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope.S",
      "library": "yuujinchou",
      "description": "This module provides operations for structured namespace management within lexical scopes, enabling controlled name visibility, merging of imported contexts, and resolution of shadowing conflicts through functions like `resolve`, `include_*/import_*`, and `section`. It works with hierarchical namespaces and effect-driven scope modifications, handling conditions like `NotFound` or `Shadow` during name resolution. Its features are particularly useful for implementing modular code organization, scoped reexports, and safe name merging in compiler or interpreter environments.",
      "description_length": 577,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope.S-Perform",
      "library": "yuujinchou",
      "description": "This module defines handlers for re-performing effects during name resolution, specifically managing missing names, shadowing, and trie modification hooks. It operates on lexical scope contexts and trie structures that associate data with tags and paths. These functions enable custom resolution behavior when traversing scoped name hierarchies.",
      "description_length": 345,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.Perform-Param",
      "library": "yuujinchou",
      "description": "This module defines operations for applying parameterized transformations to name data using hook functions. It works with tagged values and contextual information to modify names according to specified rules. Concrete use cases include injecting prefixes, suffixes, or infixes into names based on linguistic tags and contextual conditions.",
      "description_length": 340,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Trie.Untagged",
      "library": "yuujinchou",
      "description": "This module provides operations to construct, query, and transform hierarchical path-value mappings, supporting subtree manipulations via prefix scoping, value updates, filtering, and trie merging or detachment. It operates on trie structures where paths map to untagged values, enabling efficient navigation and modification of nested data. These capabilities are ideal for applications like hierarchical configuration management, routing algorithms, or versioned data systems requiring mergeable and splitable path-based structures.",
      "description_length": 534,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Scope.Param",
      "library": "yuujinchou",
      "description": "This module defines the core types used to parameterize scoping behavior, including data, tags, hooks, and context. It enables the customization of scoping effects by specifying how identifiers are bound, transformed, and resolved within nested scopes. These abstractions support advanced lexical transformations such as renaming, shadowing, and scope-based name resolution.",
      "description_length": 374,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Modifier.S-Perform",
      "library": "yuujinchou",
      "description": "This module provides functions to manually trigger specific effects during name resolution, including `not_found` for missing names, `shadow` for handling name shadowing, and `hook` for injecting custom behavior. It operates on resolution contexts, backward paths in a trie structure, and modifier-specific data and tag pairs. These functions are used to enforce resolution policies or modify behavior in language processors that rely on precise name handling, such as linters, compilers, or IDEs.",
      "description_length": 497,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Modifier.S-module-type-Perform",
      "library": "yuujinchou",
      "description": "This module defines effect handlers for managing name resolution in a modifier engine. It provides operations to manually trigger `not_found`, `shadow`, and `hook` effects during trie traversal, allowing precise control over name binding and transformation. These functions operate on `Param.data`, `Param.tag`, and `Yuujinchou.Trie.t` structures, enabling custom resolution logic for language-specific name modifiers.",
      "description_length": 418,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope.Perform",
      "library": "yuujinchou",
      "description": "This module defines operations to handle effects like name collisions and missing entries during scoped name resolution. It works with lexical contexts, backward paths, and tagged data stored in tries. Concrete use cases include resolving shadowed names, injecting custom behavior through hooks, and signaling undefined references in a scope.",
      "description_length": 342,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Modifier.S-Param",
      "library": "yuujinchou",
      "description": "This module defines parameterized modifiers that transform language terms using contextual data and tags. It supports operations to apply transformations based on hooks and runtime context, enabling dynamic term manipulation. Concrete use cases include implementing language-specific renaming strategies and context-sensitive code transformations.",
      "description_length": 347,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Scope.S-module-type-Perform",
      "library": "yuujinchou",
      "description": "This module defines effect handlers for managing lexical scope behavior, including handling missing names, resolving name shadows, and applying hooks during trie traversal. It operates on lexical scope contexts and trie structures that associate data with paths and tags. Concrete use cases include customizing name resolution and transformation during lexical analysis or code generation tasks.",
      "description_length": 395,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Scope.S-Param",
      "library": "yuujinchou",
      "description": "This module defines operations for managing lexical scope through name modification, specifically handling scoped name transformations and context tracking. It works with abstract data types representing names, scopes, and contextual information during name resolution. Concrete use cases include implementing scoped variable renaming and avoiding name capture during program transformation tasks.",
      "description_length": 397,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Scope.Make",
      "library": "yuujinchou",
      "description": "This module generates a scoping system using a trie-based hierarchy, supporting operations like scoped binding, merging, and conflict resolution through customizable strategies. It manages separate visibility and export namespaces within context-parameterized scopes, with effect-aware exceptions that carry path information for debugging. The child modules allow manual triggering of scoping effects during resolution and provide no-op handlers to suppress those effects when needed. You can use it to implement lexical scoping in compilers, manage effectful computations with structured errors, and customize scope behavior through hooks or suppression.",
      "description_length": 655,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Trie",
      "library": "yuujinchou",
      "description": "The module organizes hierarchical data through trie structures that map string paths to tagged values, enabling efficient subtree operations like merging, splitting, and transformation. It supports core operations such as path-based insertion, scoped updates, and customizable merging strategies, with tagged values allowing flexible data annotation. Child modules extend this functionality by handling untagged value mappings and providing utilities for trie construction, filtering, and navigation. Together, they enable tasks like hierarchical configuration management, selective subtree pruning, and path-based aggregation across nested data structures.",
      "description_length": 657,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Language",
      "library": "yuujinchou",
      "description": "This module provides operations to construct and manipulate name modifiers using a trie-based path structure. It supports building modifiers that select, exclude, rename, or sequence transformations over subtrees, with effects for handling empty structures. Concrete use cases include defining precise name transformations in a hierarchical namespace, such as filtering specific subtrees with `only`, applying sequential modifications with `seq`, or relocating paths with `renaming`.",
      "description_length": 483,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yuujinchou.Scope",
      "library": "yuujinchou",
      "description": "This module implements lexical scoping by tracking name modifications through the Modifier module, providing the `Make` functor to generate scoped environments that respect lexical boundaries. It supports operations for binding and resolving variables, managing hierarchical namespaces, and handling effects like shadowing or missing names through customizable handlers. Child modules extend this functionality with trie-based scope structures, effect suppression, and advanced resolution strategies, enabling tasks like scoped renaming, safe name merging, and effect-driven name lookup. Specific capabilities include dynamically modifying bindings, silencing resolution errors, and implementing modular imports with visibility control.",
      "description_length": 736,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou.Modifier",
      "library": "yuujinchou",
      "description": "This module implements a name modification engine that transforms strings using language-specific rules applied over trie structures. It supports operations like transliteration, capitalization, and phonetic adjustments, using context-aware parameters and hooks to control behavior. Child modules provide effect handling for name resolution, including suppression or manual triggering of `not_found`, `shadow`, and `hook` events, enabling both dry runs and precise control over name binding. Developers can customize renaming strategies, inject transformation rules, and manipulate symbol tables with structured data and tags.",
      "description_length": 626,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yuujinchou",
      "library": "yuujinchou",
      "description": "This module organizes hierarchical data using trie structures that map string paths to tagged values, supporting operations like path-based insertion, scoped updates, and customizable merging. It enables name modification through modifiers that select, rename, filter, or sequence transformations over hierarchical namespaces, with support for lexical scoping and dynamic binding. The system allows tasks such as hierarchical configuration management, scoped renaming, and selective subtree pruning, with concrete examples including applying `only` to filter subtrees, `seq` for sequential transformations, and `renaming` to relocate paths. It also supports language-specific string transformations like transliteration and capitalization, with structured control over name resolution effects.",
      "description_length": 793,
      "index": 27,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 28,
    "meaningful_modules": 28,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 793,
    "min_description_length": 323,
    "avg_description_length": 472.89285714285717,
    "embedding_file_size_mb": 0.10222244262695312
  }
}