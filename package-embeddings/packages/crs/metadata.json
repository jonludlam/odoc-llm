{
  "package": "crs",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-07-15T23:07:47.870376",
  "modules": [
    {
      "module_path": "Crs_parser",
      "library": "crs.crs-parser",
      "description": "This module parses code review comments from versioned source files, returning structured data that includes any malformed or invalid comments with error details. It operates on file paths and contents from a version control system, producing lists of code review comment records. It supports recursive searching within a repository subtree to find all tracked files containing code review comments.",
      "description_length": 399,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crs_cli.Private",
      "library": "crs.crs-cli",
      "description": "Handles command-line parsing and execution for a grep-like utility. Works with command-line arguments and file input/output operations. Used to implement search functionality across files based on user-specified patterns.",
      "description_length": 221,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crs_cli",
      "library": "crs.crs-cli",
      "description": "This module orchestrates command-line interface logic through a structured command definition, enabling the creation of typed CLI commands and subcommands with context-aware execution. It directly provides the core infrastructure for parsing arguments, dispatching subcommands, and managing execution flow, while its child module implements concrete functionality for file-based pattern searching analogous to grep. Main data types include `Cmdlang.Command.t` for defining command structures, and operations for argument parsing, file traversal, and pattern matching. Example usage includes defining a command that searches through files for a regex pattern, printing matching lines with context, and handling errors during file processing.",
      "description_length": 740,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Header.With_loc",
      "library": "crs.cr-comment",
      "description": "This module provides functions to retrieve the source code locations of specific elements within a CR header, such as the reporter, assignee, kind, and due status. It operates on `Cr_comment.Header.t` values and returns location-annotated data using `Loc.Txt.t`. These functions are used by tools that process or rewrite CRs, enabling precise manipulation of CR metadata based on its position in the source text.",
      "description_length": 412,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Private.Header",
      "library": "crs.cr-comment",
      "description": "This module defines operations to construct and manipulate comment headers with specific fields such as kind, due date, reporter, and optional assignee. It works with structured data types including located text values and user handles. A concrete use case includes parsing and building comment metadata in a code review system.",
      "description_length": 328,
      "index": 4,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Cr_comment.Digest_hex",
      "library": "crs.cr-comment",
      "description": "This module implements a data structure for representing and manipulating SHA-1 digest values in hexadecimal format. It provides operations for creating digest values from strings, converting them back to strings, and comparing or checking equality between digests. It is used to uniquely identify and compare content hashes in version control systems or data integrity checks.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Kind",
      "library": "crs.cr-comment",
      "description": "This module defines a sum type with two variants, `CR` and `XCR`, representing distinct comment kinds. It provides comparison and equality functions for these values, along with a list of all possible values and S-expression serialization. This module is useful for distinguishing and processing different comment types in data parsing or configuration systems.",
      "description_length": 361,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.For_sorted_output",
      "library": "crs.cr-comment",
      "description": "This module defines a comparison function for sorting `Cr_comment.t` values. It enables ordering comments based on their inherent structure, typically used when arranging comments in a consistent sequence. A concrete use case is sorting a list of comments before generating output to ensure they appear in a predictable, readable order.",
      "description_length": 336,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Due",
      "library": "crs.cr-comment",
      "description": "This module defines a type `t` with three variants representing urgency levels: `Now`, `Soon`, and `Someday`. It includes comparison and equality functions for ordering and checking urgency levels, and a list of all variants. The module is useful for prioritizing tasks or comments based on urgency, and for serializing urgency values using S-expressions.",
      "description_length": 355,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Private",
      "library": "crs.cr-comment",
      "description": "This module organizes code review comments by combining structural definitions with metadata handling. It supports the creation and validation of comment contexts using precise identifiers like file locations, repository paths, and content digests. Its core operations manage comment content, while the child module focuses on structured headers, enabling tasks like assigning reviewers or setting deadlines. Together, they allow building and processing rich, context-aware comments for source files under version control.",
      "description_length": 522,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Header",
      "library": "crs.cr-comment",
      "description": "This module provides operations to inspect and compare CR comment headers, including retrieving the reporter, optional assignee, comment kind, and due status. It supports structured data types such as `Cr_comment.Header.t` for representing headers and `Loc.Txt.t` for location-annotated elements, enabling precise metadata manipulation. The child module enhances this functionality by providing source code location tracking for header components, allowing tools to rewrite or analyze CRs based on their textual position. Examples include parsing and validating CR metadata, checking assignment status, and determining comment urgency from due tags.",
      "description_length": 649,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Filter",
      "library": "crs.cr-comment",
      "description": "This module defines a set of filters to selectively match specific categories of CRs (e.g., `Invalid`, `Now`, `Soon`) and provides operations to compare, serialize, and apply these filters. It works with a variant type `t` representing filter conditions and CR data through the `Cr_comment0.t` type. Concrete use cases include command line flag parsing, UI shorthand selection, and filtering CRs based on their status or priority.",
      "description_length": 430,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment",
      "library": "crs.cr-comment",
      "description": "This module suite processes code review comments with structured representations and transformations, supporting metadata extraction, normalization, and sorting. It includes types for comment kinds, urgency levels, and content digests, along with operations for comparison, serialization, and filtering. Submodules handle comment headers with assignees, locations, and due status, and provide utilities for organizing comments by urgency or validity. Example uses include filtering active comments by priority, sorting by file position, or validating comment metadata against content hashes.",
      "description_length": 591,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 740,
    "min_description_length": 221,
    "avg_description_length": 440.0769230769231,
    "embedding_file_size_mb": 0.0476837158203125
  }
}