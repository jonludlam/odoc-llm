{
  "package": "crs",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 13,
  "creation_timestamp": "2025-08-14T23:15:22.612599",
  "modules": [
    {
      "module_path": "Cr_comment.Header.With_loc",
      "library": "crs.cr-comment",
      "description": "This module provides precise location information for elements within a CR header, such as the reporter, assignee, kind, and due status. It operates on `Cr_comment.Header.t` values and returns structured location data using `Loc.Txt.t`. These functions are used by tools that need to rewrite or analyze CR comments with exact positional tracking in source files.",
      "description_length": 362,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Private.Header",
      "library": "crs.cr-comment",
      "description": "This module defines a function to construct a header for a comment, capturing metadata such as the kind of comment, its due date, the reporter, and an optional assignee. It operates on structured data types including located text values and optional user handles. This is used to formalize the header information in a comment, ensuring consistency and structured access to key metadata fields.",
      "description_length": 393,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Header",
      "library": "crs.cr-comment",
      "description": "This module defines operations to access and compare components of a CR header, including the reporter, assignee, kind, and due status. It works with structured data types like `t`, `Volgo.Vcs.User_handle.t`, and `Cr_comment.Kind.t` to represent and query CR metadata. These functions are used to process and validate CR annotations in source code, such as extracting the assignee or determining the due class of a CR.",
      "description_length": 418,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Private",
      "library": "crs.cr-comment",
      "description": "This module provides a `create` function to construct a comment with structured metadata, including path, location, header, content digest, and raw content. It works with data types like `Loc.t`, `Volgo.Vcs.Path_in_repo.t`, `Cr_comment.Private.header`, and `Cr_comment.Digest_hex.t`. It is used to formalize and validate comment creation with consistent metadata and content tracking.",
      "description_length": 384,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Kind",
      "library": "crs.cr-comment",
      "description": "This module defines a sum type with two variants, `CR` and `XCR`, representing distinct comment kinds. It provides comparison, equality checks, a list of all values, and S-expression serialization. Useful for tracking and differentiating comment types in code analysis or transformation tools.",
      "description_length": 293,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Filter",
      "library": "crs.cr-comment",
      "description": "This module defines a set of filters to selectively match CRs based on their state or category, such as `Invalid`, `Now`, or `XCRs`. It provides operations to compare and convert these filters to strings or shorthand characters, suitable for use in command-line interfaces or UIs. The primary use case is to determine whether a given CR should be included in a subset based on its properties, using the `matches` function.",
      "description_length": 422,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cr_comment.Due",
      "library": "crs.cr-comment",
      "description": "This module defines a type `t` with three variants\u2014`Now`, `Someday`, and `Soon`\u2014representing levels of urgency. It includes comparison and equality functions for ordering and matching these values, along with a list of all variants and S-expression serialization. It is useful for prioritizing tasks or comments based on urgency, where precise timeframes are not required.",
      "description_length": 372,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.For_sorted_output",
      "library": "crs.cr-comment",
      "description": "This module defines a comparison function for sorting `Cr_comment.t` values. It enables ordering comments based on their inherent structure, typically used when arranging comments in a consistent sequence. The primary use case is sorting collections of comments, such as preparing them for output in a specific order.",
      "description_length": 317,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment.Digest_hex",
      "library": "crs.cr-comment",
      "description": "This module implements a data structure for storing and comparing hexadecimal digest values, typically used to uniquely identify or verify content. It provides operations to create a digest from a string, convert it to a string representation, and compare or check equality between digests. Commonly used in scenarios like content hashing, versioning, or integrity checks where hexadecimal-encoded digests are required.",
      "description_length": 419,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cr_comment",
      "library": "crs.cr-comment",
      "description": "This module provides functionality for filtering, sorting, and creating code review comments with metadata such as urgency, type, and digest-based equivalence. It operates on comment data structures that include headers, content, and validation metadata, supporting use cases in analysis, display, and versioning of code reviews. Core operations include structured sorting, content normalization, and digest-driven equivalence checks, with validated comment creation ensuring data integrity.",
      "description_length": 491,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crs_parser",
      "library": "crs.crs-parser",
      "description": "This module parses code review comments from versioned source files and searches for them across tracked files in a repository. It processes file contents and paths to extract CRs, including malformed ones with error metadata, and recursively scans directories to find all CRs in version-controlled files. It works directly with version control system paths, file contents, and code review comment structures.",
      "description_length": 409,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crs_cli.Private",
      "library": "crs.crs-cli",
      "description": "Handles command-line parsing and execution for a grep-like utility. Works with command-line arguments and file input/output operations. Used to implement search functionality across files based on user-provided patterns.",
      "description_length": 220,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Crs_cli",
      "library": "crs.crs-cli",
      "description": "Handles command-line parsing and execution for a grep-like utility. Works with command-line arguments and file input/output operations. Used to implement search functionality across files based on user-provided patterns.",
      "description_length": 220,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 491,
    "min_description_length": 220,
    "avg_description_length": 363.0769230769231,
    "embedding_file_size_mb": 0.17443084716796875
  }
}