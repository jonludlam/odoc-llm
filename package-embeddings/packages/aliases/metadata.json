{
  "package": "aliases",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:51.301838",
  "modules": [
    {
      "module_path": "Radix",
      "library": "patriciatree",
      "description": "This module implements a radix tree data structure for efficient prefix-based key-value storage and retrieval. It supports operations to add or remove bindings for string keys, and to fold over all entries matching a given prefix. Typical use cases include IP routing tables, autocompletion dictionaries, and other applications requiring fast prefix queries.",
      "description_length": 358,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ptree",
      "library": "patriciatree",
      "description": "This module implements a radix tree data structure that supports efficient insertion, removal, and prefix-based traversal of key-value pairs. It provides operations to insert a string key with a value, remove a key-value pair, clear the tree, and fold over entries matching a given prefix. The fold operation allows early termination and can be limited to a maximum number of applications.",
      "description_length": 389,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Quadtree",
      "library": "quadtree",
      "description": "This module implements a quadtree data structure for spatial partitioning of elements indexed by 2D coordinates. It supports operations to insert, remove, and fold over elements within specified rectangular regions, with control over traversal behavior via the `instr` type. The quadtree is parameterized over the stored values and uses a `rect` type to represent bounding areas as tuples of floats.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitree",
      "library": "bitree",
      "description": "This module implements a bi-interval tree for efficiently managing key-value bindings over ranges of integers. It supports operations to insert and remove specific key-value pairs, clear all bindings, and fold over subsets of bindings within specified key ranges. The structure is optimized for scenarios requiring fast range queries and updates, such as memory management or interval-based indexing.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 400,
    "min_description_length": 358,
    "avg_description_length": 386.5,
    "embedding_file_size_mb": 0.05833911895751953
  }
}