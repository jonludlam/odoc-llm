{
  "package": "websocket-lwt-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:07:00.308754",
  "modules": [
    {
      "module_path": "Websocket_cohttp_lwt",
      "library": "websocket-lwt-unix.cohttp",
      "description": "Upgrades HTTP connections to WebSockets, handling incoming frames with a provided callback and returning a response action to accept the upgrade and a function to send frames. Works with Cohttp request and response types along with WebSocket frames. Useful for implementing real-time communication like chat services or live data feeds over HTTP.",
      "description_length": 346,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt_unix.Response.IO",
      "library": "websocket-lwt-unix",
      "description": "This module implements low-level input/output operations for handling WebSocket connections using Lwt for asynchronous execution. It provides functions to read lines or arbitrary byte counts from input channels, write strings to output channels, and flush buffered output, all returning monadic values that represent the result of the asynchronous operation. These operations work directly on WebSocket connections through typed input (`ic`) and output (`oc`) channels, enabling precise control over message framing and transmission in WebSocket clients or servers.",
      "description_length": 565,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt_unix.Request.IO",
      "library": "websocket-lwt-unix",
      "description": "This module provides low-level I/O operations for handling WebSocket connections, including reading lines or fixed-length data from input channels and writing strings to output channels. It works with connection (`conn`), input channel (`ic`), and output channel (`oc`) types to manage bidirectional communication over WebSockets. Concrete use cases include implementing custom WebSocket message parsers, streaming binary data, and handling framed text or binary messages in client-server applications.",
      "description_length": 502,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Request",
      "library": "websocket-lwt-unix",
      "description": "This module handles WebSocket handshake requests by parsing and constructing headers and managing body content using `Cohttp.Request.t`, `reader`, and `writer` types for message framing. It supports building clients and servers that process handshakes and manage message streams, with direct operations for reading and writing framed messages. The child module provides low-level I/O for WebSocket connections, enabling custom message parsing, binary streaming, and handling bidirectional communication using `conn`, `ic`, and `oc` types. Together, they allow implementing full-featured WebSocket endpoints that handle both handshake negotiation and framed message exchange.",
      "description_length": 674,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Response",
      "library": "websocket-lwt-unix",
      "description": "This module orchestrates HTTP response handling during WebSocket handshake by parsing, constructing, and validating responses using `Cohttp.Response.t`, reader, and writer types. It supports reading and writing headers and body chunks, streaming management, and response validation, working in tandem with its low-level I/O submodule to interface directly with WebSocket connections via `ic` and `oc` channels. The I/O submodule enables asynchronous line-based and byte-level communication using Lwt, allowing precise control over message framing and transmission. Together, they facilitate implementing WebSocket clients and servers that perform custom HTTP response processing and low-level data exchange during connection setup.",
      "description_length": 731,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Connected_client",
      "library": "websocket-lwt-unix",
      "description": "This module manages connected WebSocket clients, handling message transmission and reception over established connections. It provides functions to send and receive WebSocket frames, create client instances with optional buffers, and extract connection metadata like the HTTP request and source endpoint. Concrete use cases include implementing real-time messaging clients, handling bidirectional communication in web applications, and managing WebSocket-based APIs.",
      "description_length": 466,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt_unix",
      "library": "websocket-lwt-unix",
      "description": "This module enables WebSocket communication by combining connection management with message framing, supporting both client and server implementations. It provides core types like `conn`, WebSocket frames, and IO channels, with operations for handshake negotiation, reading and writing framed messages, and handling connection lifecycle events. Submodules handle HTTP handshake requests and responses using `Cohttp` types, manage low-level I/O with `ic` and `oc` channels, and support custom message parsing and streaming. Use cases include real-time messaging, bidirectional communication protocols, and event streaming over WebSocket with full control over framing and connection state.",
      "description_length": 688,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 731,
    "min_description_length": 346,
    "avg_description_length": 567.4285714285714,
    "embedding_file_size_mb": 0.025861740112304688
  }
}