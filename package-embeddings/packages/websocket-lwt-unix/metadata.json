{
  "package": "websocket-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:08.672793",
  "modules": [
    {
      "module_path": "Websocket_lwt_unix.Response.IO",
      "description": "Provides monadic operations for sequencing I/O actions, including binding results between actions and lifting values into I/O contexts. Works with input and output channels, allowing reading of lines or arbitrary lengths of data and writing of strings. Used to handle asynchronous I/O in network applications, such as processing HTTP requests by reading from and writing to connection channels.",
      "description_length": 394,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt_unix.Request.IO",
      "description": "Provides monadic operations for sequencing I/O actions, including binding values and returning pure computations. Works with input and output channels, reading lines or bytes and writing strings. Used to handle asynchronous I/O in networked applications, such as reading client requests or sending responses over a connection.",
      "description_length": 326,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.IO",
      "description": "Provides monadic binding and lifting for asynchronous I/O operations, enabling sequential handling of input and output channels. Works with input and output channels (`ic`, `oc`) and connection objects (`conn`) to read lines, buffer data, and ensure writes are finalized. Used to process HTTP request bodies, manage stream-based data exchange, and synchronize I/O operations in networked applications.",
      "description_length": 401,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Request",
      "description": "Encapsulates I/O operations with monadic composition, enabling sequential execution of actions like reading from or writing to channels. Supports binding values, handling asynchronous tasks, and managing input/output streams efficiently. Operations include reading lines, bytes, and writing strings, suitable for processing network requests or responses. Examples include parsing client input, streaming data, and coordinating multiple I/O steps in a pipeline.",
      "description_length": 460,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Response",
      "description": "Sequences I/O actions using monadic operations, enabling structured handling of input and output channels for reading lines or arbitrary data and writing strings. Supports asynchronous I/O for network tasks, such as processing HTTP requests by interacting with connection channels. Key operations include binding results across actions and lifting values into I/O contexts. Examples include reading user input, writing responses to clients, and managing data flow in real-time applications.",
      "description_length": 490,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix.Connected_client",
      "description": "Handles WebSocket communication by sending and receiving frames, establishing HTTP requests, and managing input/output buffers. Operates with Cohttp and Conduit types, including buffers, endpoints, and IO channels. Used to maintain real-time data exchange in networked applications, such as live updates or chat systems.",
      "description_length": 320,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "websocket-lwt-unix",
      "description": "Handles WebSocket handshake negotiation and message framing using TCP. Processes binary and text data according to the protocol specification. Enables real-time bidirectional communication in web applications without repeated HTTP requests.",
      "description_length": 240,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_cohttp_lwt",
      "description": "Handles WebSocket upgrades for HTTP connections, processing incoming frames and enabling real-time message sending. Operates with Cohttp.Request.t, Websocket.Frame.t, and Lwt promises for asynchronous operations. Used to establish bidirectional communication in web applications requiring live data updates.",
      "description_length": 307,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt_unix",
      "description": "provides monadic I/O sequencing for handling network communication, supporting reading and writing operations on input/output channels and connection objects. It enables structured processing of HTTP and WebSocket data, including frame transmission, buffer management, and asynchronous task coordination. Operations include reading lines, bytes, and writing strings, with examples like parsing client requests, streaming data, and maintaining real-time chat connections. It integrates with Cohttp and Conduit to manage networked applications with reliable, sequential I/O workflows.",
      "description_length": 582,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 240,
    "avg_description_length": 391.1111111111111,
    "embedding_file_size_mb": 0.033125877380371094
  }
}