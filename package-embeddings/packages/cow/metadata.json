{
  "package": "cow",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:14:56.449173",
  "modules": [
    {
      "module_path": "Cow.Html.Create.Tags",
      "library": "cow",
      "description": "This module defines functions to construct HTML elements for lists, tables, and colored text. It supports operations like creating ordered and unordered lists, generating table headers and cells with specific styling, and applying RGB or RGBA colors to elements. Use it to programmatically build structured and styled HTML content directly in OCaml.",
      "description_length": 349,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow.Html.Create",
      "library": "cow",
      "description": "This module provides functions to generate styled HTML elements and tables from OCaml data structures. It supports creating tables with customizable row formatting and embedding CSS stylesheets into HTML. Use it to build dynamic, styled HTML content programmatically, such as generating reports or UI components from data.",
      "description_length": 322,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Xml.Make",
      "library": "cow",
      "description": "This module provides streaming XML parsing and generation capabilities, converting input sources into structured XML signals while handling encodings, namespaces, and entities through callback-driven processing. It operates on string and buffer data types, supporting use cases like incremental parsing of large XML documents, custom transformation pipelines, and formatted XML serialization with configurable indentation and namespace handling. The output functions enable precise control over document rendering, including position tracking and destination flexibility via channels, buffers, or functions.",
      "description_length": 607,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow.Xml",
      "library": "cow",
      "description": "This module supports parsing, streaming, and combinator-based construction of XML data, operating on primitives such as tags, attributes, trees, and signal-based streams. It enables handling structured data transformation into XML format, dynamic generation of nested XML elements with optional attributes, and processing XML documents with error resilience and customizable output formatting. Use cases include building web service responses, manipulating XML trees in memory, and parsing or serializing XML with support for namespaces and indentation control.",
      "description_length": 561,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Atom",
      "library": "cow",
      "description": "This module implements the Atom Syndication Format (RFC4287) for creating and manipulating web feeds. It provides types for feed metadata, entries, authors, links, and dates, along with functions to construct links and convert feeds to XML. Concrete use cases include generating blog feeds, parsing news updates, and building web APIs that serve Atom content.",
      "description_length": 359,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow.Json",
      "library": "cow",
      "description": "The module provides JSON parsing, serialization, and manipulation capabilities, supporting operations like type-safe extraction, path-based navigation, and conversion to/from S-expressions. It works with JSON values represented as algebraic data types, handling primitive OCaml types and structured data like lists, dictionaries, and nested objects. This is useful for web service integration, configuration file processing, and data transformation pipelines requiring precise JSON handling.",
      "description_length": 491,
      "index": 5,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Cow.Xhtml",
      "library": "cow",
      "description": "This module handles XHTML entity encoding and decoding. It provides a function to convert HTML entity names to their corresponding UTF-8 characters. Use it when parsing or generating XHTML to manage special characters like `&amp;`, `&lt;`, or `&gt;` correctly.",
      "description_length": 260,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Markdown",
      "library": "cow",
      "description": "This module provides functions to convert between Markdown and (X)HTML representations. It operates on strings containing Markdown and transforms them into structured HTML trees, which can then be rendered back into strings. Use it to parse user-provided Markdown content into HTML for web display or further processing.",
      "description_length": 320,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Html",
      "library": "cow",
      "description": "The module provides operations for parsing, generating, and manipulating HTML5 documents through a type aliased from an XML structure. It offers functions to convert between string representations and HTML trees, embed basic values, construct elements programmatically\u2014including semantic tags, form components, and media-related nodes\u2014and apply utilities for table generation, text-level semantics, and accessibility features. These capabilities support use cases such as dynamic web content creation, structured document assembly, and accessible media integration.",
      "description_length": 565,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow",
      "library": "cow",
      "description": "This module provides direct support for working with XML, XHTML, JSON, Markdown, and Atom formats. It includes functions for parsing, generating, and transforming structured data such as XML trees, JSON values, HTML documents, and Atom feeds. Use it to build web service responses, convert Markdown to HTML, encode/decode JSON, handle XML streams, and generate Atom feeds.",
      "description_length": 372,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 260,
    "avg_description_length": 420.6,
    "embedding_file_size_mb": 0.14532852172851562
  }
}