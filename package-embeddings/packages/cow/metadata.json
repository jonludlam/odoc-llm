{
  "package": "cow",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:09.829577",
  "modules": [
    {
      "module_path": "Cow.Html.Create.Tags",
      "library": "cow",
      "description": "This module defines functions to construct HTML elements for lists, tables, and colored text, using specific types like `html_list`, `color`, and `table_flags`. It supports creating ordered and unordered lists, applying RGB or RGBA colors to table headers or backgrounds, and configuring table layout flags. Use it to generate styled HTML tables and lists programmatically with precise control over appearance and structure.",
      "description_length": 424,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow.Xml.Buffer",
      "library": "cow",
      "description": "This module implements an efficient buffer for constructing XML content incrementally. It supports creating buffers of a specified size, appending Unicode code points, clearing contents, and retrieving the current buffer length and string. It is used internally when generating XML documents to minimize memory allocations and ensure streaming-friendly output.",
      "description_length": 360,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Xml.String",
      "library": "cow",
      "description": "This module implements string operations for handling XML content, including concatenation, case conversion, and UTF-8 encoding. It works with a custom string type `t` that supports efficient iteration over Unicode code points and conversion from standard OCaml strings. Concrete use cases include building and processing XML documents with proper string manipulation and encoding.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Xml.S",
      "library": "cow",
      "description": "This module provides event-driven XML parsing and tree serialization capabilities, handling structured data through signals, document trees, and output targets. It supports bidirectional processing with features like encoding resolution, namespace management, and configurable formatting for tasks such as validating XML streams or generating indented markup. Key applications include XML data transformation pipelines and structured document manipulation with precise error reporting.",
      "description_length": 485,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Html.Create",
      "library": "cow",
      "description": "This module constructs HTML elements and documents using a combinator style, centering around `Cow.Xml.t` for valid XHTML generation. It provides core functions like `table` for building customizable tables from data lists and `stylesheet` for embedding CSS, while integrating types like `html_list`, `color`, and `table_flags` from its child module. The child module enhances table and list creation with support for ordered/unordered lists, RGB/RGBA coloring, and layout flags. Use it to generate structured, styled HTML documents programmatically, ideal for server-side rendering with type-safe assembly.",
      "description_length": 607,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow.Markdown",
      "library": "cow",
      "description": "This module parses and renders Markdown content using the Omd library, converting input strings to structured HTML representations and vice versa. It operates on Markdown documents, transforming them into HTML trees for manipulation or display. Use it to generate HTML from Markdown files, or to programmatically build Markdown content and render it as HTML.",
      "description_length": 358,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Json",
      "library": "cow",
      "description": "The module provides robust JSON handling through parsing, serialization, and manipulation operations for structured data. It centers on a `value` type representing JSON elements like objects, arrays, and primitives, supporting conversions to S-expressions, path-based updates, and type-safe extraction. This enables use cases such as API data validation, configuration parsing, and web service interactions requiring precise JSON transformations.",
      "description_length": 446,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Xml",
      "library": "cow",
      "description": "This module enables XML parsing and generation with tree-based manipulation, signal-driven parsing, and namespace support. It includes a buffer system for efficient, streaming-friendly XML construction, string operations for Unicode-aware XML content handling, and event-driven parsing with tree serialization for structured data transformation. You can build XML incrementally using buffers, process documents with custom string logic, or parse and validate XML streams with detailed error reporting. Applications include XML validation pipelines, document generation with custom formatting, and streaming XML processing with minimal memory overhead.",
      "description_length": 651,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Html",
      "library": "cow",
      "description": "This module enables programmatic construction and manipulation of XHTML5 content using a combinator-based approach, centered around the `Cow.Xml.t` type for representing HTML documents and fragments. It provides functions like `table` and `stylesheet` to generate structured, styled documents with support for semantic elements, form handling, and embedded metadata. The core API works seamlessly with child module utilities such as `html_list`, `color`, and `table_flags`, which enhance list and table creation with type-safe options and styling. Use it to build dynamic, valid HTML on the server or in tooling pipelines, with precise control over document structure and presentation.",
      "description_length": 685,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Atom",
      "library": "cow",
      "description": "This module implements the Atom Syndication Format (RFC4287) with support for constructing and manipulating Atom feeds and entries. It provides functions to build feed metadata, links, authors, and entries with XML content, along with date handling and comparison. Concrete use cases include generating valid Atom feeds for web syndication and parsing or transforming existing feeds into XML.",
      "description_length": 392,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cow.Xhtml",
      "library": "cow",
      "description": "This module handles XHTML entity conversion, providing a function to map HTML entity names to their UTF-8 character equivalents. It operates on string inputs representing entity names and returns optional string values indicating successful translation. Use this module when parsing or rendering XHTML content that requires decoding entities like \"amp\" into corresponding symbols like \"&\".",
      "description_length": 389,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cow",
      "library": "cow",
      "description": "The library integrates modules for working with common web formats, enabling structured parsing, manipulation, and generation of Markdown, JSON, XML, XHTML, Atom, and HTML entities. Core data types include Markdown documents, JSON values, XML trees, XHTML5 elements, Atom feeds, and entity mappings, with operations for conversion, transformation, and validation. You can generate HTML from Markdown, validate XML streams, build type-safe JSON structures, construct XHTML5 documents with styling, produce Atom feeds, and decode HTML entities into UTF-8 characters.",
      "description_length": 564,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 12,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 685,
    "min_description_length": 358,
    "avg_description_length": 478.5,
    "embedding_file_size_mb": 0.044017791748046875
  }
}