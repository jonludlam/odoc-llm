{
  "package": "mparser-re",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:53.656690",
  "modules": [
    {
      "module_path": "MParser_RE.Regexp",
      "library": "mparser-re",
      "description": "This module implements a regular expression engine that compiles patterns and matches them against byte buffers, supporting substring capture. It provides functions to compile expressions, execute matches, and extract both full and grouped substrings from successful matches. Use cases include parsing structured text formats, validating input patterns, and extracting specific fields from binary data streams.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MParser_RE.Tokens",
      "library": "mparser-re",
      "description": "This module offers parsers for common syntactic elements like symbols, punctuation, and literals, along with combinators to handle parenthetical structures and lists separated by commas or semicolons. It operates on input streams to extract numeric values in decimal, hexadecimal, octal, binary, and floating-point formats, enabling use cases such as lexing programming languages or parsing structured data formats. Specific utilities include skipping delimiters, matching nested brackets, and converting numeric literals into typed values during stream processing.",
      "description_length": 565,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MParser_RE",
      "library": "mparser-re",
      "description": "This module combines regex-based parsing with utilities for structured input processing, enabling the creation of parsers that match, extract, and transform text using `re.perl` syntax. It supports compiling and applying regular expressions to input states, capturing full matches or subgroups, while its child modules extend functionality with efficient byte buffer matching and built-in parsers for literals, symbols, and numeric formats. You can parse log entries, tokenize code, extract fields from structured text, or process binary streams with precise substring capture and typed value conversion. Key operations include compiling patterns, executing matches, and composing parsers for nested structures or delimited lists.",
      "description_length": 730,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 730,
    "min_description_length": 410,
    "avg_description_length": 568.3333333333334,
    "embedding_file_size_mb": 0.011301994323730469
  }
}