{
  "package": "mparser-re",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:52:17.410143",
  "modules": [
    {
      "module_path": "MParser_RE.Tokens",
      "library": "mparser-re",
      "description": "This module provides token-level parsing operations for matching and extracting characters, symbols, and literals (e.g., parentheses, commas, string/character literals) from input streams, along with utilities for handling delimited or separated lists. It supports numeric parsing for integers and floats in various bases (decimal, hexadecimal, etc.), converting textual representations into typed values. These operations are designed for lexing or parsing structured text formats, configuration files, or domain-specific languages where precise token recognition and numeric conversion are required.",
      "description_length": 601,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MParser_RE.Regexp",
      "library": "mparser-re",
      "description": "This module implements a pluggable regular expression engine that compiles patterns and matches them against byte buffers. It provides functions to extract specific or all matched substrings, including capture groups, from a successful match. Use cases include parsing structured text formats, validating input patterns, and extracting data from binary or textual streams.",
      "description_length": 372,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MParser_RE",
      "library": "mparser-re",
      "description": "This module implements regular expression-based parsers using the `re.perl` syntax, supporting operations to compile patterns, match them against input, and extract matched substrings or capture groups. It works with byte buffers and strings, providing typed access to match results through arrays of substrings. Concrete use cases include parsing log files, validating and extracting fields from structured text, and implementing custom lexers for domain-specific languages.",
      "description_length": 475,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 601,
    "min_description_length": 372,
    "avg_description_length": 482.6666666666667,
    "embedding_file_size_mb": 0.04387950897216797
  }
}