{
  "package": "mparser-re",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:16.048062",
  "modules": [
    {
      "module_path": "MParser_RE.Regexp",
      "description": "Compiles a pattern into a matchable structure and extracts captured substrings from byte buffers. Operates on compiled regular expression patterns and substring capture data. Used to parse structured data from binary logs or extract fields from raw byte sequences.",
      "description_length": 264,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MParser_RE.Tokens",
      "description": "The module provides parsing operations for lexical elements, including symbol matching, whitespace handling, and delimiter separation, along with numeric parsing for bases like decimal, hexadecimal, octal, and binary, as well as floating-point values. It processes input streams to extract structured data, supporting sequencing and repetition with separators such as commas and semicolons. Use cases include parsing programming language tokens, configuration files, or data formats requiring precise numeric and syntactic analysis.",
      "description_length": 532,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mparser-re",
      "description": "Parses structured text using a custom grammar defined through a domain-specific language, supporting pattern matching on tokens and nested expressions. It operates on strings and abstract syntax trees, enabling efficient extraction of hierarchical data. Used to process configuration files and query languages with complex syntax.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MParser_RE",
      "description": "Processes byte buffers and input streams to extract structured data using RE-based regular expressions. Supports capturing substrings from compiled patterns and parsing lexical elements like symbols, numbers, and whitespace. Handles numeric values in multiple bases and separates tokens using defined delimiters. Enables precise extraction of fields from binary logs or tokenization of programming language syntax.",
      "description_length": 414,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 532,
    "min_description_length": 264,
    "avg_description_length": 385.0,
    "embedding_file_size_mb": 0.014959335327148438
  }
}