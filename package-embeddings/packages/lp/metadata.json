{
  "package": "lp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:38.360719",
  "modules": [
    {
      "module_path": "Lp.Problem.Vars",
      "library": "lp",
      "description": "This module manages variable collections in an optimization problem, supporting operations to classify variables into continuous, general, and binary types. It works with lists of variables (`Lp.Var.t list`) and provides a `classify` function to organize them based on type. Concrete use cases include preparing variable groups for solver input or applying type-specific transformations during model setup.",
      "description_length": 406,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.Problem.Pclass",
      "library": "lp",
      "description": "This module defines a variant type representing different classes of optimization problems, including linear programming (LP), quadratic programming (QP), and mixed-integer variants. It provides a function to convert these problem class values to their string representations. Use this module when categorizing or identifying the type of optimization problem being modeled or solved.",
      "description_length": 383,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.Term",
      "library": "lp",
      "description": "This module provides operations to construct and manipulate polynomial terms composed of constant, linear, and quadratic components, supporting arithmetic (multiplication, division, negation), comparison, and property analysis (degree, zero checks, variable overlap detection). It works with terms involving variables and coefficients, enabling transformations like bounding variables, converting to binary/integer types, and scaling quadratic coefficients. These capabilities are used in linear programming contexts to adjust term structures, enforce variable constraints, or prepare terms for optimization workflows.",
      "description_length": 618,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lp.Problem",
      "library": "lp",
      "description": "This module represents and analyzes optimization models by combining objectives, constraints, and variables into structured problems. It supports creating and validating problems, checking variable uniqueness, and classifying problem structure, working alongside its child modules to handle variable typing and problem categorization. The first child module organizes variables into continuous, general, and binary types, enabling type-specific processing, while the second classifies problems into LP, QP, and mixed-integer variants. You can build a linear programming model for resource allocation, classify its variables for solver input, and determine its problem type for downstream processing.",
      "description_length": 699,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.Objective",
      "library": "lp",
      "description": "This module defines operations to construct and manipulate optimization objectives, supporting maximization or minimization of polynomial expressions. It provides functions to retrieve variables, convert objectives to polynomials or string representations, and modify variable bounds or types (integer, binary). Concrete use cases include setting up linear programming objectives, inspecting their structure, and adjusting variable constraints for solver compatibility.",
      "description_length": 469,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.Var",
      "library": "lp",
      "description": "This module defines and manipulates linear programming variables with attributes such as continuous, general, or binary. It supports creating variables with bounds, converting variable types, and checking variable properties like name collisions or valid bounds. Use cases include constructing variables for LP problems, setting variable domains, and generating variable arrays for optimization models.",
      "description_length": 402,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.PMap",
      "library": "lp",
      "description": "This module supports polymorphic maps with `Poly.t` keys, enabling ordered traversal, combination via customizable merge and union operations, and safe key-value access through optional returns. It provides utilities for transforming, filtering, and comparing maps, along with sequence-based construction and iteration for ordered key processing. Commonly used to manage structured optimization data where ordered key handling and map composition are critical.",
      "description_length": 460,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp.Cnstr",
      "library": "lp",
      "description": "This module implements operations for constructing and manipulating linear programming constraints, including equality and inequality relations between polynomials. It provides functions to access constraint components like left-hand side polynomials, right-hand side constants, and variable lists, along with transformations such as setting bounds or converting variables to integer or binary types. Use cases include building and modifying constraints for LP models, extracting constraint data for analysis, and preparing constraints for output in LP file format.",
      "description_length": 565,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lp",
      "library": "lp",
      "description": "This module enables the creation and manipulation of polynomials with mixed variable types and bounds, forming the foundation for modeling optimization problems with structured arithmetic operations and multi-dimensional arrays. It supports the construction of linear programming problems through child modules that handle polynomial terms, objectives, constraints, and variable definitions, allowing operations like dot products, simplification, and LP file parsing. You can build optimization models by defining variables with specific bounds and types, formulating objectives and constraints, and classifying problem structures such as LP or QP. Additional utilities for ordered map manipulation facilitate data handling in optimization workflows requiring key-based composition and traversal.",
      "description_length": 796,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 796,
    "min_description_length": 383,
    "avg_description_length": 533.1111111111111,
    "embedding_file_size_mb": 0.033150672912597656
  }
}