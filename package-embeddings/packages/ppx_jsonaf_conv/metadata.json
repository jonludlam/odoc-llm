{
  "package": "ppx_jsonaf_conv",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:07:27.901595",
  "modules": [
    {
      "module_path": "Ppx_jsonaf_conv",
      "library": "ppx_jsonaf_conv",
      "description": "This module generates functions to convert between OCaml values and JSONAF representations, handling both polymorphic and record types. It provides attributes for deriving `of_jsonaf`, `jsonaf_of`, and field-specific conversions directly in type definitions. Use it to automatically serialize and deserialize complex OCaml data structures to and from JSONAF format.",
      "description_length": 365,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Of_jsonaf",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module provides functions to generate JSON deserialization code for OCaml types using the `ppxlib` library. It transforms type declarations into corresponding expressions and signatures that handle parsing JSON values into typed OCaml structures. It is used internally during the expansion phase of a ppx rewriter that derives `of_jsonaf` functions for custom types.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Jsonaf_fields",
      "library": "ppx_jsonaf_conv.expander",
      "description": "Expands type declarations into JSON serialization/deserialization functions for each field. Works with OCaml type declarations and generates structure items for converting values to and from JSON. Used to automatically derive JSON codecs for custom types in a type-safe manner.",
      "description_length": 277,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Sig_jsonaf",
      "library": "ppx_jsonaf_conv.expander",
      "description": "Expands type declarations into JSON serialization and deserialization functions for use with the `Jsonaf` library. It processes OCaml type definitions and generates corresponding `to_jsonaf` and `of_jsonaf` functions in module signatures. This enables types to be converted to and from JSON format, typically used for data interchange in APIs or configuration files.",
      "description_length": 366,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Attrs",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module defines attributes used to control JSON serialization behavior during code generation. It provides `default`, `drop_default`, and `drop_if` to specify default values, optional defaults, and conditional dropping of fields, respectively. These attributes are applied to label declarations to influence how values are encoded or omitted in generated JSON serializers.",
      "description_length": 376,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Jsonaf_of",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module generates JSON serialization functions from OCaml type declarations using the `jsonaf` library. It provides functions to convert core types to JSON expressions and expand type declarations into module signatures and structures. It is used to automatically derive JSON encoders for custom data types in a type-safe manner.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module processes OCaml type declarations to generate type-safe JSON serialization and deserialization code using the `jsonaf` library. It expands types into `to_jsonaf` and `of_jsonaf` functions, handling both core types and complex structures with support for attributes like `default`, `drop_default`, and `drop_if` to customize encoding behavior. It enables automatic derivation of JSON codecs for custom types, allowing values to be converted to and from JSON for use in APIs or configuration files. For example, a type `person` with fields `name` and `age` can be automatically converted to JSON with optional default values or conditional field omission.",
      "description_length": 665,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_lib.Jsonaf_conv_error",
      "library": "ppx_jsonaf_conv.runtime-lib",
      "description": "This module provides error handling functionality for JSON decoding operations, focusing on validating structural correctness and type consistency during conversion to OCaml types. It works with strings, lists, and `Type.t` values to detect and signal issues like unexpected JSON structures, invalid polymorphic variant representations, or improperly formatted fields. Specific use cases include handling mismatched type expectations, malformed lists, and empty type representations when parsing JSON data.",
      "description_length": 506,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_jsonaf_conv_lib",
      "library": "ppx_jsonaf_conv.runtime-lib",
      "description": "This module provides core utilities for converting and manipulating JSONAF data structures, with support for optional values, reference dereferencing, and structural equality checks. Its primary data types include JSONAF representations, options, and references, while key operations enable deserialization, comparison, and value transformation. The included error handling submodule enhances decoding robustness by validating type consistency and structural integrity during JSON-to-OCaml conversions, catching issues like malformed lists or invalid variant encodings. Together, the module and submodule support complete workflows for parsing, validating, and transforming JSON data with precise control over conversion behavior.",
      "description_length": 730,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 730,
    "min_description_length": 277,
    "avg_description_length": 443.22222222222223,
    "embedding_file_size_mb": 0.033135414123535156
  }
}