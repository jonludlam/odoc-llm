{
  "package": "ppx_jsonaf_conv",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:13:22.665909",
  "modules": [
    {
      "module_path": "Ppx_jsonaf_conv_expander.Jsonaf_of",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module generates JSON serialization functions from OCaml type declarations using ppxlib. It transforms core types into JSON representations and expands type declarations into corresponding conversion code. It is used to automatically derive JSON encoding logic for custom data types in a type-safe manner.",
      "description_length": 310,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Of_jsonaf",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module provides functions to generate JSON deserialization code from type definitions. It transforms core types and type declarations into expressions and signatures that handle parsing JSON values into OCaml values. It is used when implementing `of_jsonaf` functions for custom types, expanding type declarations into the necessary boilerplate for JSON decoding.",
      "description_length": 368,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Jsonaf_fields",
      "library": "ppx_jsonaf_conv.expander",
      "description": "Converts type declarations into JSON serialization and deserialization functions for each field. Works with OCaml type declarations and generates structure items for use in code expansion. Useful for automatically deriving JSON codecs for record fields during compilation.",
      "description_length": 272,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Sig_jsonaf",
      "library": "ppx_jsonaf_conv.expander",
      "description": "Implements functions to generate JSON serialization and deserialization code for OCaml type declarations. Works with OCaml abstract syntax trees (ASTs) and type declarations, producing signatures that include JSON conversion functions. Used internally by ppx_jsonaf to derive `to_json` and `of_json` functions for user-defined types.",
      "description_length": 333,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander.Attrs",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module defines attributes used to control JSON serialization behavior during code generation. It provides `default`, `drop_default`, and `drop_if` to specify default values and conditions for omitting fields. These attributes are applied to label declarations to influence how expressions are generated for JSON encoding.",
      "description_length": 326,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_expander",
      "library": "ppx_jsonaf_conv.expander",
      "description": "This module expands OCaml type declarations into JSON serialization and deserialization functions using ppxlib. It processes core types and ASTs to generate type-safe conversion code for records, variants, and custom data structures. Concrete use cases include automatically deriving `to_json` and `of_json` functions for user-defined types during compilation.",
      "description_length": 360,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv",
      "library": "ppx_jsonaf_conv",
      "description": "This module generates functions to convert between OCaml values and JSONAF representations, handling algebraic data types, records, and polymorphic variants. It provides `of_jsonaf`, `jsonaf_of`, and `jsonaf_fields_of` for structured data conversion, supporting both simple and complex type definitions. Use it to serialize and deserialize OCaml data structures to JSONAF format directly within type definitions.",
      "description_length": 412,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_jsonaf_conv_lib.Jsonaf_conv_error",
      "library": "ppx_jsonaf_conv.runtime-lib",
      "description": "This module provides error-handling utilities for structural mismatches during JSON decoding, specifically addressing invalid tuple sizes, missing or unexpected record fields, incorrect sum type encodings, and malformed variant tags. It operates on JSONAF representations of complex types like polymorphic variants, nested lists, and records, using `Jsonaf_kernel__.Type.t` to contextualize errors with precise type information. These functions are critical for validating data during JSON-to-OCaml type conversions, ensuring robust handling of edge cases like empty lists in variant decoding or mismatched field counts in structured data.",
      "description_length": 639,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_jsonaf_conv_lib",
      "library": "ppx_jsonaf_conv.runtime-lib",
      "description": "This module handles JSON decoding errors and provides basic functional utilities. It works with JSONAF representations of OCaml types, including polymorphic variants, records, and nested lists, using precise type information to report structural mismatches. It is used for validating data during JSON-to-OCaml conversions, handling cases like incorrect tuple sizes, missing fields, and invalid variant tags.",
      "description_length": 407,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 639,
    "min_description_length": 272,
    "avg_description_length": 380.77777777777777,
    "embedding_file_size_mb": 0.13082408905029297
  }
}