{
  "package": "jsonrpc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-14T23:12:13.771005",
  "modules": [
    {
      "module_path": "Jsonrpc.Response.Error.Code",
      "library": "jsonrpc",
      "description": "This module defines a polymorphic variant type `t` representing standardized JSON-RPC error codes. It includes specific constructors for common JSON-RPC errors such as `ParseError`, `InvalidRequest`, and `MethodNotFound`, along with server-specific and custom error codes via `Other`. It is used to classify and handle error conditions in JSON-RPC communication, enabling precise error responses and client-side error handling.",
      "description_length": 427,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Response.Error",
      "library": "jsonrpc",
      "description": "This module defines a structured representation of JSON-RPC error responses, including standardized error codes, descriptive messages, and optional additional data. It provides functions to construct and raise errors, convert exceptions to errors, and serialize errors to JSON. It is used to generate precise error outputs in JSON-RPC servers and to handle client-side error parsing and recovery.",
      "description_length": 396,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Json.Jsonable",
      "library": "jsonrpc",
      "description": "This module defines type-specific serialization and deserialization functions for converting OCaml values to and from JSON representations. It works with abstract types that implement the `S` module type, enabling conversion to and from `Yojson.Safe.t`. It is used to build JSON-RPC request and response handlers that automatically marshal OCaml values into JSON payloads.",
      "description_length": 372,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Structured",
      "library": "jsonrpc",
      "description": "Handles structured JSON-RPC data with conversion functions between its internal representation and Yojson. Works with associative lists and lists of JSON values. Used to serialize and deserialize JSON-RPC payloads while preserving structural integrity.",
      "description_length": 252,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonrpc.Json",
      "library": "jsonrpc",
      "description": "This module provides functions for constructing, manipulating, and querying JSON values using the `t` type, which includes primitives like strings, numbers, booleans, and structured types like lists and associations. It supports concrete operations such as field extraction from associative lists, list traversal, and type-safe value retrieval. Use cases include parsing JSON payloads from network requests, building JSON responses in RPC handlers, and extracting specific fields from JSON objects for further processing.",
      "description_length": 521,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonrpc.Response",
      "library": "jsonrpc",
      "description": "This module represents JSON-RPC responses, encapsulating either a successful result or an error, along with the corresponding request ID. It provides functions to construct valid responses from results or errors and supports serialization and deserialization to and from JSON using the Yojson-compatible format. It is used to format output for JSON-RPC servers and to parse incoming responses on the client side.",
      "description_length": 412,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Notification",
      "library": "jsonrpc",
      "description": "Handles JSON-RPC notification messages by constructing and serializing them. Works with JSON-RPC method names and structured data parameters. Used to create and convert notification payloads for transmission over JSON-compatible interfaces.",
      "description_length": 240,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Id",
      "library": "jsonrpc",
      "description": "Handles JSON-RPC request identifiers, supporting string and integer types. Exposes serialization to and from JSON, hashing, and equality checks. Useful for managing unique request IDs in JSON-RPC communication.",
      "description_length": 210,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Packet",
      "library": "jsonrpc",
      "description": "This module serializes and deserializes JSON-RPC packets to and from JSON values. It supports converting individual requests, notifications, responses, and batches of mixed requests or notifications to JSON and vice versa. Use this module when handling raw JSON input/output for JSON-RPC communication, such as parsing incoming JSON into structured packets or encoding packets for transmission.",
      "description_length": 394,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Request",
      "library": "jsonrpc",
      "description": "Handles the construction and serialization of JSON-RPC request objects. Works with JSON-RPC request structures, including method names, optional parameters, and request IDs. Used to create properly formatted JSON-RPC requests and convert them to JSON for transmission over a communication channel.",
      "description_length": 297,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc",
      "library": "jsonrpc",
      "description": "This module implements JSON-RPC 2.0 functionality, providing structured handling of RPC requests, responses, notifications, and batches. It works with JSON values represented using the `t` type, request identifiers, and associative structures for method parameters and payloads. Concrete use cases include building JSON-RPC clients and servers, handling remote procedure calls over HTTP or WebSocket, and serializing/deserializing RPC messages for network transmission.",
      "description_length": 469,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 210,
    "avg_description_length": 362.72727272727275,
    "embedding_file_size_mb": 0.15976524353027344
  }
}