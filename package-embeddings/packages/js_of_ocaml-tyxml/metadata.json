{
  "package": "js_of_ocaml-tyxml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 40,
  "creation_timestamp": "2025-08-15T14:25:15.535306",
  "modules": [
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Svg.Xml.W",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides monomorphic typed representations for XML elements and attributes used in SVG manipulation, enabling zero-cost conversions between typed and untyped structures. It includes operations like `return`, `fmap`, and list combinators such as `cons`, `append`, and `map` to construct and transform element trees. These functions are used to build and manipulate DOM structures directly, particularly for generating and working with SVG content in a type-safe manner within JavaScript.",
      "description_length": 498,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html5.Xml.W",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides monomorphic wrappers for XML elements and attributes, enabling zero-cost conversions between typed and untyped representations. It supports operations like `return`, `fmap`, and list manipulations such as `cons`, `append`, and `map` over typed XML structures. Concrete use cases include building and transforming HTML documents in Js_of_ocaml without runtime overhead.",
      "description_length": 389,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html.Xml.W",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides functions for constructing and manipulating typed XML elements and attribute lists with zero-cost conversions to untyped representations. It works directly with monomorphic XML element and attribute types, supporting operations like element creation, attribute mapping, list concatenation, and singleton list formation. Concrete use cases include building and transforming HTML DOM structures in a type-safe manner within Js_of_ocaml applications.",
      "description_length": 468,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Svg.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level SVG manipulation functions like inserting raw text, custom XML nodes, and unsupported attributes with different value types. It works with SVG elements and attributes, allowing direct DOM-level modifications that bypass standard safety checks. Use cases include embedding unescaped SVG content, adding experimental SVG features, or interfacing with third-party SVG libraries requiring direct element manipulation.",
      "description_length": 444,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html5.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides access to metadata and configuration values for HTML5, including content type, version, doctype, and namespace. It exposes simple values and lists that represent standard HTML5 specifications, such as `content_type`, `doctype`, and `emptytags`. These values are useful for generating correct HTML5 output or validating HTML structure against standard definitions.",
      "description_length": 384,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Svg.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe creation and manipulation of SVG elements and attributes using a monomorphic `elt` type optimized for direct DOM representation. It supports typed value handling (numbers, strings, lists) and event listeners (mouse, keyboard) with zero-cost conversions between typed and untyped structures. Designed for interactive web applications, it facilitates efficient SVG rendering and dynamic updates in JavaScript environments while maintaining OCaml's type guarantees.",
      "description_length": 492,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html5.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level functions to bypass HTML safety checks, allowing insertion of raw text, custom XML nodes, and arbitrary attributes. It works directly with HTML elements and attribute values, enabling creation of unsupported tags or properties, such as non-standard DOM attributes or dynamic script injection. Use cases include embedding raw HTML strings, defining custom elements not yet supported by the library, or manipulating attributes with unencoded values.",
      "description_length": 478,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html5.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe construction and manipulation of XML/HTML elements and attributes through monomorphic `elt` and `attrib` data structures, supporting operations like element creation (leaf nodes, text content), attribute handling (URI encoding, event listeners), and zero-cost conversion to untyped DOM representations. It directly targets low-level XML/HTML document transformations in environments like `js_of_ocaml`, where typed data must interoperate efficiently with JavaScript's DOM. Use cases include building interactive web interfaces with statically verified markup structures and handling user input events in compiled OCaml applications.",
      "description_length": 663,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Svg.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides constants and metadata related to SVG documents, including content type, version, namespace, and doctype declarations. It works with string and list data types to define standard SVG properties and empty tags. Concrete use cases include generating proper SVG document headers and validating SVG content in web applications.",
      "description_length": 344,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe construction and manipulation of XML elements and attributes with direct mappings to DOM representations, using monomorphic types like `elt`, `ename`, and `attrib`. It supports creating structured HTML nodes with typed event handlers, primitive attributes, and zero-cost conversions between typed and untyped forms. Useful for building interactive web interfaces in Js_of_ocaml applications where precise DOM control and type correctness are critical.",
      "description_length": 481,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides constants and information related to HTML, such as content type, version, doctype, and standard. It works with string and list data types to define HTML-specific metadata. Concrete use cases include setting HTTP content headers, validating HTML documents, and generating correct doctype declarations.",
      "description_length": 321,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level operations to bypass HTML safety checks, allowing insertion of raw text, custom XML nodes, and arbitrary attributes. It works directly with HTML elements and attribute values, enabling dynamic content injection and handling of unsupported HTML features. Use cases include embedding unescaped content, creating non-standard DOM elements, and setting custom or complex attribute values in scenarios where strict HTML validity is intentionally relaxed.",
      "description_length": 480,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level operations to insert raw text, custom XML nodes, and arbitrary attributes into HTML elements without validation or encoding. It works directly with HTML elements and attributes, allowing creation of unsupported tags or properties by bypassing type safety. Use cases include embedding trusted dynamic content, generating non-standard markup for specialized frameworks, or extending HTML output beyond the module's built-in capabilities.",
      "description_length": 466,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Svg.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level operations to create and manipulate SVG elements and attributes that are not natively supported by the main SVG module. It allows inserting raw text, creating custom XML nodes, and defining attributes with various value types like strings, floats, integers, URIs, and separated lists. These features are useful for extending SVG output with experimental or non-standard elements and attributes when strict validity checks are not required.",
      "description_length": 470,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Svg.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables the creation and manipulation of SVG elements and attributes using typed representations that convert efficiently to monomorphic DOM-compatible types. It operates on `elt` and `attrib` structures, supporting use cases like declarative SVG UI construction, event handling integration, and resource embedding via URIs, while ensuring zero runtime overhead through direct JavaScript DOM mapping. Key operations include typed attribute creation (e.g., for floats, URIs, and mouse events) and low-level element composition with comments, text nodes, or CDATA sections.",
      "description_length": 583,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html5.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides constants and information related to HTML5, such as content type, version, doctype, and namespace. It works with string and list data types to define standard HTML metadata. Concrete use cases include setting HTTP content headers, validating document structure, and generating correct doctype declarations for HTML5 documents.",
      "description_length": 347,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables the creation and manipulation of XML attributes and elements within JavaScript contexts, supporting typed value conversions for strings, numbers, URIs, and event handlers. It operates on data structures like `elt` for elements, text nodes, comments, and CDATA sections, ensuring safe DOM integration with specialized handling for HTML entities and scripts. It is particularly useful for dynamically generating HTML content with embedded interactivity and structured data.",
      "description_length": 491,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides constants and information related to HTML document structure and metadata, such as content type, version, doctype, and namespace. It works with string and list data types to define standard HTML properties and alternative content types. Concrete use cases include setting up HTML document headers, validating content types, and ensuring correct document structure during web development.",
      "description_length": 408,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html5",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe construction of HTML5 elements and attributes with integrated event handling for interactive web interfaces, using OCaml's type system to enforce valid DOM structures. It works with typed representations of HTML elements, attributes (e.g., form controls, ARIA roles, media properties), and event handlers (e.g., `onclick`, `oninput`), converting them safely to untyped DOM nodes for browser execution. Key use cases include building dynamic forms with validation, embedding multimedia content, managing user interactions via mouse/touch events, and generating semantic HTML with accessibility features, all while leveraging OCaml's type safety to prevent common HTML/JS errors.",
      "description_length": 707,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides typed constructors for XML elements and attributes, enabling precise creation and manipulation of DOM-compatible structures with support for primitive values, URIs, and event handlers (e.g., mouse, keyboard). It operates on a monomorphic `elt` type for elements and `attrib` for attributes, optimized for zero-cost conversions to untyped representations while preserving type safety. Specific use cases include building HTML nodes with embedded scripts/styles via `cdata_script`/`cdata_style`, handling user interactions through typed events, and generating efficient DOM trees for client-side web applications.",
      "description_length": 632,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html5.Unsafe",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides low-level operations to insert raw text, create custom XML nodes, and define unsupported HTML attributes without type safety checks. It works directly with XML elements, attributes, and primitive value wrappers like strings, floats, and URIs. Use cases include embedding unescaped content, extending HTML output with non-standard tags, or interfacing with external JavaScript libraries that require precise DOM control.",
      "description_length": 440,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Svg",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe construction of SVG elements and attributes for interactive web graphics, using typed values like coordinates, lengths, and enumerated constants to define shapes, text, gradients, and filter effects. It supports event handling, animation control, and integration with OCaml via Js_of_ocaml, with functions for both modern and deprecated SVG features. Key use cases include dynamic visualizations",
      "description_length": 425,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R.Html",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables construction of interactive web interfaces through type-safe HTML element and attribute manipulation, operating on typed DOM-like structures to enforce correctness. It provides functions for creating semantic HTML elements (headings, forms, tables, media), handling DOM events (clicks, input changes), and managing attributes like form validation, accessibility roles, and resource metadata. Specific use cases include building dynamic forms with validation, embedding multimedia content with fallbacks, and crafting accessible UI components using ARIA attributes and semantic markup.",
      "description_length": 604,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Svg.Info",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides constants and metadata related to SVG, including content type, version, namespace, and doctype declarations. It works with string and list data types to define standard SVG properties and empty tags. Concrete use cases include generating proper SVG document headers and validating SVG content in web applications.",
      "description_length": 334,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Register",
      "library": "js_of_ocaml-tyxml",
      "description": "This module directly manipulates the DOM by replacing or updating the document's head and body, or injecting elements into specific nodes by ID. It operates on HTML elements defined in the `Html` module, using lists of elements conforming to `body_content` or `head_content` types. Concrete use cases include dynamically updating page content, swapping entire sections of the document, or injecting components into predefined containers.",
      "description_length": 437,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.To_dom",
      "library": "js_of_ocaml-tyxml",
      "description": "This module facilitates the conversion of TyXML's type-safe HTML elements into their corresponding Js_of_ocaml DOM representations, enabling precise embedding of statically typed HTML structures into client-side OCaml applications. It operates on GADT-based TyXML elements parameterized by HTML tag types (e.g., `input`, `ul`, `canvas`) and produces untyped DOM objects (`element Js.t`) with type-specific narrowing (e.g., `inputElement`, `uListElement`). Specific use cases include compiling TyXML's typed HTML5 AST nodes into executable DOM trees for interactive web interfaces, particularly when leveraging OCaml's type guarantees for HTML correctness while retaining JavaScript DOM interoperability.",
      "description_length": 703,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Svg",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables declarative SVG UI creation through type-safe element and attribute constructors, supporting operations like styling, geometric transformations, and event handling. It works with `elt` for SVG elements and `attrib` for attributes, integrating data types such as coordinates, lengths, enumerated values, and specialized types for text layout, filters, and animations. Use cases include building interactive visualizations with dynamic effects (e.g., gradients, lighting, path-based text), handling user interactions via touch/mouse events, and ensuring compatibility with both modern and legacy SVG specifications through typed wrappers for deprecated features.",
      "description_length": 680,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html5",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe HTML5 construction and DOM interaction in OCaml, offering operations to create elements with attributes (e.g., `class`, `id`, `href`), bind event handlers (e.g",
      "description_length": 189,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_cast.MakeOf",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe casting operations to convert Js_of_ocaml DOM HTML elements (e.g., input, div, canvas) into Tyxml's typed element representations (e.g., `Html_types.input elt`, `Html_types.div elt`). It operates on Js_of_ocaml's DOM element wrappers and Tyxml's extensible HTML types, enabling precise structural and semantic conversions for use cases like typed HTML manipulation, safe DOM traversal, and generating statically verified HTML interfaces.",
      "description_length": 468,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Html",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides typed HTML construction utilities for safe DOM manipulation, focusing on element creation, attribute handling, and event binding. It works with HTML elements, attributes, and events, using typed values like strings, booleans, URIs, and polymorphic variants to enforce validity. Key use cases include building client-side web applications with OCaml, handling user interactions (clicks, form submissions, media events), implementing form validation, and ensuring accessibility through typed ARIA attributes and semantic markup.",
      "description_length": 547,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Util",
      "library": "js_of_ocaml-tyxml",
      "description": "This module includes functions for manipulating DOM nodes and event handlers in a way that integrates with Tyxml's HTML construction. It provides operations like `update_children` to dynamically update the children of a DOM node based on a reactive list. Concrete use cases include building interactive web interfaces where HTML elements need to respond to changes in reactive data sources.",
      "description_length": 390,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_cast.MakeTo",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe casting operations that convert strongly-typed HTML element representations (e.g., `input`, `button`, `canvas`, `header`) from the TyXML library into their corresponding JavaScript DOM element bindings in Js_of_ocaml (e.g., `inputElement`, `buttonElement`, `htmlCanvasElement`, `headerElement`). It operates on GADT-based HTML element types defined in `Html_types`, enabling direct DOM manipulation in OCaml for specific structural, inline, and specialized elements like `fieldset`, `nav`, `kbd`, and media elements. These conversions are particularly useful when integrating typed HTML generation with imperative DOM operations required for dynamic web interfaces.",
      "description_length": 696,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Of_dom",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe conversions from raw DOM HTML elements (like `htmlElement`, `inputElement`, `canvasElement`, and `tableRowElement`) to TyXML's GADT-based typed representations (e.g., `Html_types.html`, `Html_types.canvas`, `Html_types.tr`), preserving HTML5 semantic structure. It supports a wide range of element categories, including multimedia, embedding, and table components, enabling precise OCaml-side manipulation of existing DOM nodes. These operations are particularly useful for integrating legacy DOM content into type-safe TyXML workflows or dynamically transforming HTML elements while maintaining strict type guarantees.",
      "description_length": 650,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Wrap",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides functions for wrapping values and manipulating lists of wrapped values in a DOM context. It supports operations like `return` for wrapping individual values, `fmap` for applying transformations, and list constructs such as `nil`, `singleton`, `cons`, `append`, and `map` for building and combining lists. These are used to generate dynamic HTML content in conjunction with Js_of_ocaml, particularly when handling reactive or incremental updates to the DOM.",
      "description_length": 477,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.Xml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides functions to construct and manipulate HTML attributes and XML elements, supporting operations like dynamic attribute value handling (floats, integers, strings, lists), DOM event registration (mouse, keyboard, touch), and XML node creation (text, CDATA, comments, elements with attributes and children). It operates on abstract attribute and URI types alongside XML node structures, enabling type-safe generation of interactive web content and XML document manipulation in client-side applications. Specific use cases include building dynamic HTML interfaces with event-driven behavior and programmatically generating XML data for browser-based tools or visualizations.",
      "description_length": 689,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js.R",
      "library": "js_of_ocaml-tyxml",
      "description": "This module defines functions for creating and manipulating HTML attributes with dynamic values driven by React signals, enabling reactive updates to the DOM. It works with attribute values of type `'a attrib` and supports conditional attribute application through `filter_attrib`, which toggles attribute presence based on a boolean signal. Concrete use cases include dynamically updating form field states, toggling CSS classes in response to user interactions, and binding element properties to reactive data streams.",
      "description_length": 520,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_cast",
      "library": "js_of_ocaml-tyxml",
      "description": "This module enables type-safe bidirectional casting between TyXML's strongly-typed HTML elements and Js_of_ocaml's DOM element bindings. It supports precise conversions for specific HTML elements such as `input`, `canvas`, `header`, and `fieldset`, facilitating integration of typed HTML generation with imperative DOM manipulation. Use cases include embedding typed HTML fragments into existing DOM structures and extracting typed representations from DOM elements for static verification.",
      "description_length": 490,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_cast_sigs",
      "library": "js_of_ocaml-tyxml",
      "description": "This module defines conversion interfaces for transforming data to and from Tyxml representations. It includes signatures for casting values to and from HTML, SVG, and XML structures, enabling interoperability with Tyxml's typed markup system. Concrete use cases include embedding OCaml-generated HTML into Tyxml documents and extracting values from Tyxml elements for further processing.",
      "description_length": 388,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml.Tyxml_js",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe HTML, SVG, and XML construction with support for dynamic attributes, event handling, and DOM manipulation. It works with abstract XML nodes, HTML elements, SVG elements, and reactive data types to enable interactive web interfaces and structured document generation. Concrete use cases include building dynamic web applications with OCaml, creating SVG-based visualizations with type-checked attributes, and safely embedding typed HTML into the DOM with reactive updates.",
      "description_length": 502,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_of_ocaml_tyxml",
      "library": "js_of_ocaml-tyxml",
      "description": "This module provides type-safe construction and manipulation of HTML, SVG, and XML documents using strongly-typed combinators. It supports dynamic attribute handling, event binding, and DOM integration, working with abstract XML nodes and reactive data types. Use cases include building interactive web UIs in OCaml, generating correct-by-construction markup, and embedding typed HTML or SVG elements into web applications with safe runtime interactions.",
      "description_length": 454,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 41,
    "meaningful_modules": 40,
    "filtered_empty_modules": 1,
    "retention_rate": 0.975609756097561
  },
  "statistics": {
    "max_description_length": 707,
    "min_description_length": 189,
    "avg_description_length": 490.725,
    "embedding_file_size_mb": 0.5799589157104492
  }
}