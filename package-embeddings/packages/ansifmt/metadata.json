{
  "package": "ansifmt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:14:59.833411",
  "modules": [
    {
      "module_path": "Ansifmt.Formatting.Element",
      "library": "ansifmt",
      "description": "This module constructs and manipulates structured formatting elements composed of tokens. It supports grouping tokens into elements, applying indentation, wrapping with delimiters, and inserting separators or line breaks between elements. These operations enable precise control over the layout and appearance of formatted text, such as generating aligned code output or styled terminal messages.",
      "description_length": 396,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color.Ground",
      "library": "ansifmt",
      "description": "Encodes whether a color applies to the foreground or background using the type `t` with constructors `Foreground` and `Background`. Provides the `to_int` function to convert a ground value to the corresponding SGR escape sequence digit, optionally accounting for brightness. Useful when generating ANSI escape codes to control terminal text and background colors dynamically.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color.Minimal",
      "library": "ansifmt",
      "description": "Encodes the 8 basic ANSI terminal colors as enumerated values and converts them to their corresponding SGR code integers between 0 and 7. Works directly with the `t` variant type representing each color. Used for generating simple ANSI color escape sequences in terminal output.",
      "description_length": 278,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Token_type",
      "library": "ansifmt",
      "description": "This module defines a set of token types used to classify elements in formatted text, particularly for syntax highlighting and structured output. It includes variants for language constructs like keywords, literals, identifiers, and operators, as well as formatting elements like spaces, line breaks, and indentation. These types are used to guide rendering and styling decisions in text processing pipelines.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Token",
      "library": "ansifmt",
      "description": "This module defines a token type for representing formatted text elements, such as whitespace, line breaks, punctuation, and numbers. It provides specific values for common tokens like `space`, `line_break`, `comma`, and `colon`, along with functions to construct number tokens and render tokens into strings with optional styling. It is used to build and manipulate structured text output in a way that preserves formatting intent.",
      "description_length": 432,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Util",
      "library": "ansifmt",
      "description": "Converts values to format elements and renders them as strings, supporting customizable element transformation and optional styling. Works with any type that can be converted to an `Element.t` via a provided module. Useful for formatting structured data like logs, configuration values, or custom ASTs into styled terminal output.",
      "description_length": 330,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color.Channel",
      "library": "ansifmt",
      "description": "This module handles individual color channels for ANSI color encoding, supporting operations to create and manipulate red, green, and blue channels with integer values. It provides functions to retrieve the name and numeric value of a channel, and to attempt conversion of the value to an 8-bit integer. Concrete use cases include constructing custom ANSI colors and extracting channel-specific data for rendering or validation.",
      "description_length": 428,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Formatting.Stylizer",
      "library": "ansifmt",
      "description": "Transforms token types into corresponding styles using a function that maps `Ansifmt.Formatting.Token_type.t` to `Ansifmt.Styling.t`. Provides a default implementation for consistent styling across formatted output. Useful for customizing the visual appearance of tokens in ANSI terminal rendering.",
      "description_length": 298,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Interfaces",
      "library": "ansifmt",
      "description": "This module defines an interface for converting values into structured elements suitable for formatting. It centers on the `TO_ELEMENT` module type, which specifies a `to_element` function that maps a value to a structured format such as a string, styled text, or layout construct. It is used to build formatters that can render data in contexts like terminal output or document generation, where structured representation affects display behavior.",
      "description_length": 448,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Styling",
      "library": "ansifmt",
      "description": "This module defines and manipulates text styling configurations for ANSI terminal output. It supports operations to create and combine styles with foreground/background colors and text attributes like bold, dim, italic, and underlined. Styles can be rendered to ANSI escape sequences or used to wrap strings for formatted terminal output.",
      "description_length": 338,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color",
      "library": "ansifmt",
      "description": "This module provides operations to encode and manipulate ANSI terminal color representations, supporting basic color definitions, bright variants, and RGB components. It works with color models such as minimal 3/4-bit palettes, advanced 8-bit indexed colors, and direct RGB values, offering utilities to parse, validate, and convert these into SGR escape sequences. Specific use cases include terminal text styling, dynamic color contrast adjustments, and programmatic generation of colored output for ANSI-compatible displays.",
      "description_length": 527,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Formatting",
      "library": "ansifmt",
      "description": "This module implements structured text formatting with precise layout control, using tokens and elements to represent and manipulate formatted content. It supports operations like grouping, indentation, delimiter wrapping, and separator insertion, working with token types classified for syntax and layout. Concrete use cases include generating styled terminal output, pretty-printing code, and rendering structured data with custom formatting and ANSI styling.",
      "description_length": 461,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.IO",
      "library": "ansifmt",
      "description": "Prints formatted values to an output channel using a specified element conversion module and optional stylizer. Works with any type `'t` convertible to a formatting element via the `TO_ELEMENT` interface. Useful for rendering structured data with custom formatting to files, terminals, or logs.",
      "description_length": 294,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt",
      "library": "ansifmt",
      "description": "This module handles ANSI terminal formatting with precise control over colors, styles, and layout. It supports operations to define and apply text attributes, color codes, and structured formatting to generate rich terminal output. Use it to build styled command-line interfaces, colorize logs, or render complex text layouts programmatically.",
      "description_length": 343,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 527,
    "min_description_length": 278,
    "avg_description_length": 382.64285714285717,
    "embedding_file_size_mb": 0.20325279235839844
  }
}