{
  "package": "ansifmt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:07:42.593562",
  "modules": [
    {
      "module_path": "Ansifmt.Formatting.Interfaces.TO_ELEMENT",
      "library": "ansifmt",
      "description": "This module defines an interface for converting values into formatting elements. It includes a type `t` and a function `to_element` that transforms a value of type `t` into a formatting element. It is used to standardize the conversion of specific data types into structured formatting elements for rendering.",
      "description_length": 309,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Util",
      "library": "ansifmt",
      "description": "Converts values to format elements and renders them as strings, supporting customizable styling. Works with any type that can be transformed into an `Element.t` via a provided module. Useful for formatting structured data like logs or configuration values with ANSI styling.",
      "description_length": 274,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color.Ground",
      "library": "ansifmt",
      "description": "Encodes whether a color applies to the foreground or background using the type `t` with variants `Foreground` and `Background`. Converts a ground value to the corresponding integer prefix for an SGR escape sequence, optionally accounting for brightness. Used to construct ANSI escape codes that set text or background color in terminal output.",
      "description_length": 343,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Formatting.Element",
      "library": "ansifmt",
      "description": "This module constructs and manipulates structured formatting elements composed of tokens. It supports grouping tokens into elements, nesting elements, applying indentation, wrapping with delimiters, and inserting separators or line breaks. Use cases include building complex text layouts with consistent formatting, such as code printers or structured log output.",
      "description_length": 363,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Formatting.Token",
      "library": "ansifmt",
      "description": "This module defines a token type for representing formatted text elements, combining token types with string values. It includes predefined tokens for whitespace, line breaks, commas, colons, and functions to create number tokens. These tokens can be used to build structured text output with specific formatting, such as pretty-printing code or generating styled terminal output.",
      "description_length": 380,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Color.Minimal",
      "library": "ansifmt",
      "description": "Minimal defines 8 basic ANSI color values and converts them to SGR codes (0-7). It works with the `t` type representing colors like Red, Green, and Blue. Use it to generate terminal color escape sequences directly without extended color support.",
      "description_length": 245,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Formatting.Token_type",
      "library": "ansifmt",
      "description": "This module defines a set of token types used to classify elements in formatted text, particularly for syntax highlighting and structured output. It includes variants for language constructs like keywords, literals, identifiers, and operators, as well as formatting elements like spaces, line breaks, and indentation. These types are used to guide rendering and styling decisions in text processing tools and linters.",
      "description_length": 417,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Stylizer",
      "library": "ansifmt",
      "description": "Transforms token types into corresponding styling rules for terminal output. Uses `Ansifmt.Formatting.Token_type.t` to determine which ANSI styles to apply. For example, applies bold to headings or colors to specific syntax elements during formatted text rendering.",
      "description_length": 265,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Color.Channel",
      "library": "ansifmt",
      "description": "This module defines operations for creating and manipulating individual color channels (Red, Green, Blue) with integer values. It provides functions to retrieve the name and numeric value of a channel, attempt conversion to an 8-bit integer, and construct specific color channels. Concrete use cases include building and inspecting ANSI color representations in terminal formatting applications.",
      "description_length": 395,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting.Interfaces",
      "library": "ansifmt",
      "description": "This module provides an interface for converting values into structured formatting elements like strings, styled text, or layout components. It defines the core type `t` and the operation `to_element`, which transforms values into format elements suitable for rendering in terminals, documents, or markup. Submodules extend this interface to support additional data types and formatting rules. For example, it can convert a list into a styled fragment or render a record as a structured layout.",
      "description_length": 494,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Styling",
      "library": "ansifmt",
      "description": "This module defines a style configuration with optional foreground and background colors and text attributes like bold, dim, italic, and underlined. It provides functions to create and combine styles, including unary constructors for individual attributes and a binary operator to merge styles. Use cases include formatting terminal output with colored and styled text, such as highlighting errors, emphasizing log messages, or rendering UI elements in command-line interfaces.",
      "description_length": 477,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt.Color",
      "library": "ansifmt",
      "description": "This module handles ANSI color encoding across 4-bit, 8-bit, and 24-bit RGB formats, offering constructors, conversions, and utilities for terminal color manipulation. It includes types to distinguish foreground and background colors, generate SGR escape sequences, and manage RGB channels individually or as full colors. You can create a foreground red color from the Minimal module, build a custom RGB color, or calculate its luminance for contrast adjustments. Submodules let you work with basic ANSI colors, extended color channels, or ground-specific escape prefixes, supporting tasks like dynamic theming or accessible terminal output.",
      "description_length": 641,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.Formatting",
      "library": "ansifmt",
      "description": "This module structures and renders formatted text using tokens, elements, and styling rules. It supports transforming values into format elements with customizable layout and ANSI styling, enabling rich terminal output and structured document generation. Main data types include tokens for text elements, elements for structured layout, and token types for styling classification. Examples include pretty-printing code with syntax highlighting, rendering styled logs with indentation and delimiters, or converting data structures into formatted strings with custom separators and line breaks.",
      "description_length": 592,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ansifmt.IO",
      "library": "ansifmt",
      "description": "Prints formatted values to an output channel using a specified element conversion module and optional stylizer. Works with any type `'t` that can be converted to a formatting element via the `TO_ELEMENT` interface. Useful for pretty-printing structured data like trees or custom ASTs with specific styling rules.",
      "description_length": 312,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ansifmt",
      "library": "ansifmt",
      "description": "This module generates ANSI escape sequences for colored and styled terminal output, combining style definitions, color encoding, and structured formatting to produce rich text in command-line interfaces. It supports creating styles with foreground and background colors, text attributes like bold or underlined, and combining them using operators, while handling color representations across 4-bit, 8-bit, and 24-bit RGB formats. Structured formatting is achieved through tokens and elements that allow custom layout and styling rules, enabling tasks like syntax highlighting, styled logging, and pretty-printing. Values can be rendered to an output channel using a customizable element conversion module, supporting formatted output of arbitrary data structures with optional ANSI styling.",
      "description_length": 790,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 790,
    "min_description_length": 245,
    "avg_description_length": 419.8,
    "embedding_file_size_mb": 0.054961204528808594
  }
}