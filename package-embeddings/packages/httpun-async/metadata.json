{
  "package": "httpun-async",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:51:30.273372",
  "modules": [
    {
      "module_path": "Httpun_async.Client.SSL",
      "library": "httpun-async",
      "description": "This module implements asynchronous SSL/TLS HTTP client connections with explicit control over socket initialization, request submission, and connection lifecycle management. It works with SSL sockets, HTTP requests/responses, and deferred I/O operations, supporting custom error and response handlers. Concrete use cases include making secure HTTP requests over TLS, handling streaming request bodies, and integrating with existing SSL-secured socket connections.",
      "description_length": 464,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async.Server.SSL",
      "library": "httpun-async",
      "description": "Handles HTTPS server connections using SSL, providing functions to create secure connection handlers with custom or default SSL configurations. Works with SSL sockets, request handlers, and error handlers to manage encrypted HTTP traffic. Used to set up secure web servers with asynchronous I/O, handling TLS handshakes and encrypted communication directly.",
      "description_length": 357,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async.Server",
      "library": "httpun-async",
      "description": "Handles HTTP server connections with asynchronous I/O, creating connection handlers that process incoming requests and errors. Works directly with sockets, request handlers, and error handlers to manage unencrypted HTTP traffic. Used to build scalable web servers that handle TCP connections and HTTP protocols concurrently.",
      "description_length": 324,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async.Client",
      "library": "httpun-async",
      "description": "This module implements asynchronous HTTP client connections with explicit control over socket initialization, request submission, and connection lifecycle management. It works with TCP or SSL sockets, HTTP requests/responses, and deferred I/O operations, supporting custom error and response handlers. Concrete use cases include making secure HTTP requests over TLS, handling streaming request bodies, and integrating with existing socket connections.",
      "description_length": 451,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async",
      "library": "httpun-async",
      "description": "Handles asynchronous HTTP server and client operations with direct socket management, request/response processing, and error handling. Works with TCP/SSL sockets, HTTP messages, and deferred I/O for building scalable web services and making secure HTTP requests. Used to implement concurrent web servers and perform streaming HTTP client operations with custom connection lifecycles.",
      "description_length": 383,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 464,
    "min_description_length": 324,
    "avg_description_length": 395.8,
    "embedding_file_size_mb": 0.07287406921386719
  }
}