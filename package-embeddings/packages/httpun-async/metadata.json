{
  "package": "httpun-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:37.091424",
  "modules": [
    {
      "module_path": "Httpun_async.Server.SSL",
      "description": "Handles SSL-based HTTP connections by establishing secure server-side communication. Works with socket addresses, HTTP request records, and error handlers to manage incoming encrypted traffic. Used to set up HTTPS servers with custom request and error processing, leveraging certificate and key files for secure authentication.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async.Client.SSL",
      "description": "Handles secure socket connections using SSL, providing methods to establish, manage, and terminate encrypted communication channels. Operates on socket types wrapped with SSL encryption and HTTP request/response structures. Used to create secure HTTP client connections, send requests with custom headers, and upgrade to WebSocket protocols over SSL.",
      "description_length": 350,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async.Server",
      "description": "Establishes secure HTTPS servers by managing SSL/TLS connections, socket addresses, and HTTP requests. Processes encrypted traffic using certificate and key files, with support for custom request handling and error recovery. Enables secure, authenticated communication by wrapping socket operations in SSL layers. Examples include setting up a server that responds to HTTPS requests and handling malformed or unauthorized connections.",
      "description_length": 434,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_async.Client",
      "description": "Establishes and manages encrypted communication through SSL-wrapped sockets, supporting HTTP and WebSocket protocols. Provides types for SSL sockets, HTTP requests, and responses, along with operations to send custom headers and upgrade connections. Enables secure data exchange by handling encryption, connection lifecycle, and protocol transitions. Examples include sending authenticated API requests and establishing encrypted WebSocket sessions.",
      "description_length": 449,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "httpun-async",
      "description": "Provides HTTP request and response parsing, serialization, and handling using Angstrom and Faraday. Works with byte sequences, strings, and structured data like headers and status codes. Used to build efficient HTTP clients and servers with custom protocol handling.",
      "description_length": 266,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_async",
      "description": "Handles secure HTTPS and WebSocket communication by managing SSL/TLS sockets, HTTP requests, and response handling. Provides types for SSL sockets, HTTP messages, and headers, along with operations to send data, upgrade connections, and manage encryption. Supports custom request processing, error recovery, and protocol transitions, enabling tasks like serving encrypted web content or maintaining authenticated WebSocket sessions. Examples include setting up a secure server, sending signed API requests, and handling encrypted data streams.",
      "description_length": 543,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 543,
    "min_description_length": 266,
    "avg_description_length": 394.8333333333333,
    "embedding_file_size_mb": 0.02223491668701172
  }
}