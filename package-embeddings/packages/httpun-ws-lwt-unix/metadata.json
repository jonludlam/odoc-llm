{
  "package": "httpun-ws-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:53.076891",
  "modules": [
    {
      "module_path": "Httpun_ws_lwt_unix.Server",
      "description": "Handles incoming WebSocket connections by setting up a handler that processes messages and manages errors. It operates on Unix socket addresses and Lwt-based file descriptors, integrating with HTTP and WebSocket protocols. Used to establish real-time communication channels in a server application.",
      "description_length": 298,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws_lwt_unix.Client",
      "description": "Establishes a WebSocket connection with a specified host, port, and resource, handling errors and messages through provided callbacks. Operates on a file descriptor and returns a connection object encapsulating the state. Used to maintain real-time communication with a server, processing incoming data and managing connection lifecycle.",
      "description_length": 337,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "httpun-ws-lwt-unix",
      "description": "Handles WebSocket protocol negotiation and communication, including parsing upgrade headers and managing message framing. Works with byte streams, text, and binary data over a network connection. Used to establish real-time communication between clients and servers in applications requiring low-latency data exchange.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws_lwt_unix",
      "description": "Manages bidirectional real-time communication over WebSockets using Lwt and Unix sockets, supporting both server and client roles. Processes incoming messages, handles errors, and maintains connection state through callback-driven interfaces. Accepts Unix socket addresses for server setup and file descriptors for client connections, enabling data exchange in distributed applications. Examples include streaming sensor data from a server or sending real-time updates to a connected client.",
      "description_length": 491,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 491,
    "min_description_length": 298,
    "avg_description_length": 361.0,
    "embedding_file_size_mb": 0.01496124267578125
  }
}