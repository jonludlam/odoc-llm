{
  "package": "caqti-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:36.629800",
  "modules": [
    {
      "module_path": "Caqti_lwt",
      "library": "caqti-lwt",
      "description": "This module defines core types and utilities for working with Lwt-based database connections, including connection handling and error propagation. It provides a `connection` type representing a database connection instance, along with the `or_fail` function to convert result values into Lwt promises with proper error handling. Concrete use cases include setting up connection pipelines and managing asynchronous database operations in Lwt-driven applications.",
      "description_length": 461,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_lwt_unix.Pool",
      "library": "caqti-lwt.unix",
      "description": "This module manages a pool of database connections, allowing clients to use connections asynchronously with Lwt. It supports operations to check the current pool size, execute functions on a connection, and close all connections in the pool. Concrete use cases include handling concurrent database queries in web applications and ensuring efficient reuse of connections.",
      "description_length": 370,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Caqti_lwt_unix",
      "library": "caqti-lwt.unix",
      "description": "This module implements asynchronous database connection handling on Unix-like systems using Lwt, supporting connection pooling and driver loading via URIs. It provides core operations like `connect`, `with_connection`, and `connect_pool` to manage individual and pooled connections, enabling use cases such as asynchronous PostgreSQL or SQLite access and integration with Lwt-based web applications. The included pool management allows clients to execute functions on available connections, control pool size, and close connections efficiently. Together, the module and its submodules enable robust, concurrent database interactions in Lwt-driven applications.",
      "description_length": 660,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 660,
    "min_description_length": 370,
    "avg_description_length": 497.0,
    "embedding_file_size_mb": 0.011315345764160156
  }
}