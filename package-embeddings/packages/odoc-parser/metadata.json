{
  "package": "odoc-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:56.939017",
  "modules": [
    {
      "module_path": "Odoc_parser.Loc",
      "library": "odoc-parser",
      "description": "This module defines data structures for representing positions and ranges within source files, including points with line and column numbers, and spans that track start and end locations. It provides functions to manipulate spans, such as merging a list of spans into a single span or adjusting the start or end column. These capabilities support precise tracking of source code locations during parsing, particularly for documenting and analyzing ocamldoc comments.",
      "description_length": 466,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Odoc_parser.Warning",
      "library": "odoc-parser",
      "description": "This module defines a warning data structure with a location span and message string, along with functions to format and convert warnings to text. It is used to represent and display diagnostic messages generated during the parsing of ocamldoc comments. Concrete use cases include reporting malformed tags or syntax errors in documentation comments.",
      "description_length": 349,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Odoc_parser.Ast",
      "library": "odoc-parser",
      "description": "This module defines the abstract syntax tree (AST) for parsed ocamldoc comments, capturing both inline and block-level elements with support for styling, references, code blocks, and custom tags. It includes structured representations for headings, code block metadata, media elements, and semantic tags such as `@param`, `@deprecated`, and internal directives like `@inline`. Concrete use cases include parsing ocamldoc comments into a structured format for further processing into documentation or extracting metadata like version and author information.",
      "description_length": 556,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Odoc_parser",
      "library": "odoc-parser",
      "description": "This module parses ocamldoc-formatted comments into a structured abstract syntax tree, handling syntax errors gracefully and generating actionable warnings. It processes input with precise source location tracking through spans and positions, enabling accurate reporting of issues in documentation comments. The AST representation captures inline and block elements, including styled text, code blocks, and semantic tags like `@param` and `@deprecated`, supporting extraction of metadata and structured documentation. Use cases include integrating documentation analysis into linters, transforming comments into documentation formats, or validating ocamldoc syntax within build pipelines.",
      "description_length": 688,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 688,
    "min_description_length": 349,
    "avg_description_length": 514.75,
    "embedding_file_size_mb": 0.014921188354492188
  }
}