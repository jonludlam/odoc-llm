{
  "package": "cohttp-curl-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:01:34.544957",
  "modules": [
    {
      "module_path": "Cohttp_curl_lwt.Response.Expert",
      "library": "cohttp-curl-lwt",
      "description": "This module provides low-level access to the underlying Curl handle from an HTTP response, allowing direct manipulation of Curl-specific response data. It works with the response type from the `Cohttp_curl_lwt` client, exposing the raw Curl handle used during the request. Use this module when inspecting or modifying Curl-specific response metadata, such as cookies, headers, or transfer statistics, that are not exposed through the standard response interface.",
      "description_length": 462,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt.Request.Expert",
      "library": "cohttp-curl-lwt",
      "description": "This module directly handles HTTP request execution using the Curl library, providing low-level access to request configuration and response handling. It operates on `Curl.t` handles and `Cohttp_curl_lwt.Request.t` request values, enabling precise control over HTTP methods, headers, and body transmission. Concrete use cases include custom HTTP client implementations, fine-grained request tuning, and integration with external systems requiring direct Curl handle manipulation.",
      "description_length": 479,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt.Sink",
      "library": "cohttp-curl-lwt",
      "description": "This module provides two concrete sinks for handling HTTP response bodies: `string` accumulates the body into a string, while `discard` ignores the body entirely. It works directly with response data streams during HTTP requests made via the Curl-based client. Use `string` when capturing response content is required, and `discard` for cases where only the response metadata matters.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt.Context",
      "library": "cohttp-curl-lwt",
      "description": "Manages shared Curl event handling logic for multiple Curl requests. It initializes and maintains the necessary state for coordinating asynchronous Curl operations. Use this to ensure consistent handling of Curl events across related HTTP requests.",
      "description_length": 248,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_curl_lwt.Error",
      "library": "cohttp-curl-lwt",
      "description": "This module defines error types and operations for handling HTTP client errors in asynchronous contexts. It provides functions to retrieve error messages and check if an error is due to a timeout. Concrete use cases include inspecting failed HTTP requests made via the Curl-based client to implement retry logic or logging specific failure causes.",
      "description_length": 347,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt.Response",
      "library": "cohttp-curl-lwt",
      "description": "This module provides functions to access the HTTP response and body from a Curl-based client request. It works with the response type produced by the Curl client, wrapping the result in Lwt promises and handling errors specific to Curl operations. Use it to retrieve the HTTP status, headers, or body content after making a request with the Curl client.",
      "description_length": 353,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_curl_lwt.Source",
      "library": "cohttp-curl-lwt",
      "description": "This module provides values to define the source of an HTTP request body, specifically using `empty` for no content and `string` to read from a given string. It works with the `t` type to represent request body sources. Concrete use cases include setting the body source when making POST or PUT requests with a string payload or sending an empty body for DELETE requests.",
      "description_length": 371,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt.Request",
      "library": "cohttp-curl-lwt",
      "description": "This module constructs and configures HTTP requests with support for methods, headers, URIs, input sources, and output sinks. It works with `Http.Method.t`, `Http.Header.t`, `Cohttp_curl_lwt.Source.t`, and `Cohttp_curl_lwt.Sink.t` to enable sending requests and handling responses. Concrete use cases include building custom HTTP clients, streaming request/response data, and integrating with external systems via direct Curl-based communication.",
      "description_length": 446,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl_lwt",
      "library": "cohttp-curl-lwt",
      "description": "This module implements a Curl-based HTTP client for asynchronous operations using Lwt. It provides concrete request construction, response handling, error inspection, and data streaming capabilities tailored for direct HTTP communication. Key use cases include making HTTP requests with custom headers and bodies, capturing or discarding response content, and managing Curl-specific error conditions.",
      "description_length": 400,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 479,
    "min_description_length": 248,
    "avg_description_length": 387.77777777777777,
    "embedding_file_size_mb": 0.1308002471923828
  }
}