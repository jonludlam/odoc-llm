{
  "package": "multipart_form",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:57.428536",
  "modules": [
    {
      "module_path": "Multipart_form.Content_type.Parameters.Map",
      "library": "multipart_form",
      "description": "This module offers a map-based structure for managing string-keyed polymorphic value associations, supporting operations like insertion, deletion, lookup, and traversal alongside list-aware variants for handling multiple values per key. It enables transformations through merging, filtering, and conversion to and from sequences of key-value pairs, with utilities to process bindings via predicates or ordered traversal. These capabilities are particularly suited for parsing and manipulating HTTP multipart form data parameters, where fields may have multiple values or require structured aggregation and serialization.",
      "description_length": 620,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Subtype",
      "library": "multipart_form",
      "description": "This module defines and validates content type subtypes for multipart forms, supporting IETF, IANA, and experimental `x-token` formats. It provides a structured way to represent and format these subtypes, ensuring valid syntax according to relevant standards. Use this module when parsing or generating MIME content types in HTTP multipart form handling.",
      "description_length": 354,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Header.Decoder",
      "library": "multipart_form",
      "description": "Parses MIME headers from byte streams into structured values. Works with `Multipart_form.Header.t` and Angstrom parsers. Used to decode headers in multipart form data processing, such as extracting content types or boundary strings.",
      "description_length": 232,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Type",
      "library": "multipart_form",
      "description": "This module defines a polymorphic variant type representing HTTP content types such as `Text`, `Image`, `Audio`, and custom token types like `Ietf_token` and `X_token`. It includes a function `pp` for pretty-printing these content type values using the `Fmt` formatting library. Use this type to parse, represent, and format standard and custom HTTP content types in a type-safe manner.",
      "description_length": 386,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Parameters",
      "library": "multipart_form",
      "description": "This module handles parsing and constructing HTTP content-type parameters, such as those found in multipart/form-data headers. It provides key-value pairs where values can be strings or tokens, with operations to add, convert to and from lists, and pretty-print. The child module enhances this with a map-based structure for managing string keys and polymorphic values, supporting insertion, deletion, lookup, and traversal, including list-aware variants for handling multiple values per key. Together, they enable structured aggregation, filtering, and serialization of HTTP parameters, ideal for parsing and building complex header fields.",
      "description_length": 641,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Multipart_form.Content_type",
      "library": "multipart_form",
      "description": "This module processes HTTP Content-Type headers for multipart form data, handling media types, subtypes, and parameter lists with functions to parse, construct, compare, and convert between string and structured representations. It supports parsing and generating MIME content types with validation for IETF, IANA, and experimental subtypes, while providing a polymorphic variant type for standard and custom content types like `Text`, `Image`, and `X_token`. The module manages content-type parameters as key-value pairs with support for string and token values, including operations to aggregate, filter, and serialize multiple values per key. Use it to interpret boundary markers, validate form data types, and construct compliant multipart headers in HTTP requests.",
      "description_length": 769,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Header",
      "library": "multipart_form",
      "description": "This module manages HTTP headers within multipart/form-data documents, offering functions to construct, query, and extract structured header values such as content-type, content-encoding, and content-disposition from field lists. Its core API allows direct access to header fields and supports parsing and building headers during HTTP request processing. The included parser submodule decodes MIME headers from byte streams into structured values using Angstrom, enabling efficient extraction of boundary strings and content types during multipart parsing. Together, they facilitate both low-level header manipulation and high-level parsing workflows in HTTP applications.",
      "description_length": 672,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_encoding",
      "library": "multipart_form",
      "description": "This module defines and manipulates content encodings used in multipart form data. It provides functions to convert between string representations and a sum type that includes standard encodings like `Base64`, `Quoted_printable`, and binary, as well as custom token types. Use cases include parsing and serializing content transfer encodings in HTTP form submissions.",
      "description_length": 367,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Field_name",
      "library": "multipart_form",
      "description": "This module represents and manipulates field names in multipart form data, ensuring valid formatting and canonicalization. It supports operations like case normalization, validation, prefix checks, and provides standard field name constants used in HTTP multipart headers. Direct use cases include parsing and constructing multipart form headers with correct field names such as content-type or content-disposition.",
      "description_length": 415,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_disposition",
      "library": "multipart_form",
      "description": "This module handles parsing and constructing Content-Disposition headers in multipart form data. It provides functions to access the disposition type, name, filename, and size from a parsed header, as well as creating and formatting headers from structured data. Use it when processing HTTP requests with file uploads or generating multipart responses with specific content disposition metadata.",
      "description_length": 395,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Field",
      "library": "multipart_form",
      "description": "This module handles HTTP header fields, associating field names with typed values. It supports four value types, enabling structured manipulation of header content. Use it to construct and deconstruct HTTP headers with precise field-value relationships.",
      "description_length": 253,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Multipart_form",
      "library": "multipart_form",
      "description": "This module processes MIME multipart/form-data by parsing and generating structured representations of form data, supporting both streaming and non-streaming workflows for handling HTTP requests with file uploads or encoded content. It operates on data types like strings, integers, and custom types for content types, encodings, and headers, offering functions to decode multipart streams into parts, encode parts into streams, and manage boundary markers and header fields. Child modules refine this functionality by parsing and constructing content types, content dispositions, and encodings, handling header fields with structured values, and validating field names and parameters. For example, it can parse a multipart payload to extract a file upload with its filename and encoding, or generate a compliant multipart response with custom headers and boundary markers.",
      "description_length": 873,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 873,
    "min_description_length": 232,
    "avg_description_length": 498.0833333333333,
    "embedding_file_size_mb": 0.0439910888671875
  }
}