{
  "package": "multipart_form",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:12:52.438744",
  "modules": [
    {
      "module_path": "Multipart_form.Content_type.Parameters.Map",
      "library": "multipart_form",
      "description": "This module provides dictionary operations for managing key-value associations with string-like keys and polymorphic values, supporting list-based value handling and predicate-driven filtering. It offers transformations, merges, and traversals over map structures, along with conversions to and from sequences and lists, enabling functional manipulation of parameter collections. Typical use cases include parsing HTTP headers, processing form data with repeated keys, and filtering query parameters during web request handling.",
      "description_length": 528,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Subtype",
      "library": "multipart_form",
      "description": "This module defines and validates content type subtypes for multipart forms, supporting IETF, IANA, and experimental `x-token` formats. It provides parsing via the `iana` function and pretty-printing with `pp`. Concrete use cases include handling media types like `image/png`, `application/json`, and `x-custom/type` in HTTP form data parsing.",
      "description_length": 343,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Header.Decoder",
      "library": "multipart_form",
      "description": "Parses MIME headers from a multipart form, extracting fields like content type and disposition. Works with `Multipart_form.Header.t` to represent parsed header data. Useful for handling HTTP multipart/form-data requests by decoding individual part headers.",
      "description_length": 256,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Parameters",
      "library": "multipart_form",
      "description": "This module manages key-value pairs for content type parameters, using a specialized map structure that supports string-like keys and polymorphic values (`String` or `Token`). It provides operations to construct, add to, and convert parameter maps, along with parsing functions for keys and values that handle invalid input gracefully or raise exceptions. Concrete use cases include parsing and manipulating media type parameters in HTTP content negotiation and handling multipart form data with structured parameter values.",
      "description_length": 524,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type.Type",
      "library": "multipart_form",
      "description": "This module defines a polymorphic variant type representing HTTP content types, including standard categories like text, image, audio, video, application, and multipart, along with custom token types for non-standard content types. It provides a function `pp` to format these content type values as strings, suitable for use in HTTP headers or logging. This type is used to classify and handle different kinds of data in HTTP multipart form parsing and generation.",
      "description_length": 464,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Header",
      "library": "multipart_form",
      "description": "This module handles HTTP headers within `multipart/form-data` parts, providing access to fields like content type, encoding, and disposition. It operates on `Multipart_form.Header.t` values, allowing lookup by field name, conversion to and from field lists, and pretty-printing. Concrete use cases include parsing and inspecting headers of individual parts in a multipart form submission.",
      "description_length": 388,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_encoding",
      "library": "multipart_form",
      "description": "This module defines and manipulates content encodings used in multipart form data. It provides functions to convert between string representations and a polymorphic variant type that includes standard encodings like `Base64`, `Quoted_printable`, and binary. Use cases include parsing and serializing content transfer encodings in HTTP form submissions.",
      "description_length": 352,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Field",
      "library": "multipart_form",
      "description": "This module handles HTTP header fields with typed values, allowing construction and manipulation of header fields using a type-safe interface. It works with `Field_name.t` for field names and supports four kinds of value representations, including typed and untyped variants. Concrete use cases include building and parsing HTTP headers where specific field types (like content-type or content-disposition) require structured value handling.",
      "description_length": 441,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form.Content_type",
      "library": "multipart_form",
      "description": "This module handles HTTP content types for multipart forms with structured parsing, validation, and serialization. It works with polymorphic variants for type and subtype, and a specialized parameter map supporting string and token values. Concrete use cases include parsing and constructing `Content-Type` headers such as `text/plain`, `application/json`, and `multipart/form-data` with parameters like `charset` or `boundary`.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Multipart_form.Field_name",
      "library": "multipart_form",
      "description": "This module represents and manipulates field names in multipart form data, ensuring valid formatting and canonicalization. It provides operations for comparing, capitalizing, and validating field names, along with predefined constants for standard header fields like content type and content disposition. Use this module when parsing or constructing multipart form data to enforce correct field naming conventions and perform case-insensitive comparisons.",
      "description_length": 455,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Multipart_form.Content_disposition",
      "library": "multipart_form",
      "description": "This module handles parsing and constructing content disposition headers in multipart form data. It provides functions to access the disposition type, name, filename, and size from a parsed header, as well as creating and formatting headers from these components. Concrete use cases include processing file uploads in HTTP requests by extracting metadata like filename and disposition type.",
      "description_length": 390,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form",
      "library": "multipart_form",
      "description": "This module processes `multipart/form-data` inputs by parsing and constructing form submissions with structured handling of headers, content types, and encodings. It operates on data types like field names, content types, content encodings, and content dispositions to extract and build parts of a form submission, supporting both streaming and in-memory parsing. Concrete use cases include handling file uploads in HTTP requests by extracting metadata and content, and generating valid multipart form data for client submissions.",
      "description_length": 530,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 530,
    "min_description_length": 256,
    "avg_description_length": 424.9166666666667,
    "embedding_file_size_mb": 0.17422866821289062
  }
}