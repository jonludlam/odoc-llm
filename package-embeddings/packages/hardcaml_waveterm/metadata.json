{
  "package": "hardcaml_waveterm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 169,
  "creation_timestamp": "2025-07-15T23:41:34.933948",
  "modules": [
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Static.R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module handles terminal-based waveform visualization and interaction for simulation data, offering layout calculation, styled rendering of signals and timing elements, and coordinate-based selection of displayed components. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts represented as styled 2D grids, enabling precise alignment and visual differentiation of simulation states. These capabilities support interactive waveform viewers where users can inspect signal transitions, measure timing intervals, and select elements via cursor positioning.",
      "description_length": 601,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Static.R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal waveform visualization, including dimension calculations, waveform drawing (binary/data/clock), and UI component rendering (signals, values, cursor). It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and supports interactive element selection via coordinate-based picking to identify user interactions with waveforms, values, or status indicators. Useful for building terminal-based simulation viewers with precise layout control and interactive debugging capabilities.",
      "description_length": 556,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module specializes in low-level rendering operations and UI interaction handling for terminal-based waveform visualization. It operates on waveform data structures like `Wave.t` and `Waves.t`, managing layout calculations, graphical drawing of signals and values, and coordinate-based element selection for interactive features. Its capabilities are tailored for use cases requiring precise simulation waveform display and user interaction in terminal environments, such as debugging digital circuits or analyzing timing diagrams without graphical dependencies.",
      "description_length": 566,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveform data into terminal-compatible visualizations using fixed configurations, operating on `Waves.t` to produce styled 2D character arrays. It supports layout calculation, styled signal rendering, and coordinate-based selection of waveform components, enabling inspection of signal transitions and timing measurements. Child modules extend this capability with interactive features, handling user input and advanced layout management over structured data like `Wave.t` and `Data.t`. Together, they enable static and interactive waveform diagrams in environments such as JavaScript, without Unix dependencies.",
      "description_length": 632,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module generates static waveform visualizations by converting `Waves.t` data into styled terminal display arrays, supporting binary, data, and clock waveforms with customizable dimensions and layout options. It includes low-level rendering functions for drawing signals, values, and UI components, along with coordinate-based picking for interactive selection of waveform elements. You can use it to build terminal-based simulation tools that display fixed waveform layouts and support user interaction for debugging. Examples include rendering multi-signal waveforms with labeled axes, highlighting selected values, and generating status indicators aligned with specific time points.",
      "description_length": 689,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S-Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module supports rendering of digital simulation waveforms and interactive UI elements in a terminal environment, offering operations to calculate layout dimensions, draw waveforms (binary/arbitrary data, clocks, signals), and apply styling or borders. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and a graphics context (`G`), enabling use cases like visualizing Hardcaml simulation results and implementing coordinate-based interaction (e.g., cursor placement or element selection). The design emphasizes terminal compatibility and integration with Hardcaml's simulation pipeline for debugging digital circuits.",
      "description_length": 644,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waves.Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It works with integers to set display properties like signal width, wave height, and cursor position. Use it to customize waveform visualization layouts and user interaction settings in terminal-based simulations.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including border, signal, value, wave, and status display attributes. It operates on style records that encapsulate visual properties such as colors and formatting. Concrete use cases include setting up monochrome or color themes for waveform visualization in both light and dark terminal environments.",
      "description_length": 379,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.Make.Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It works with integers to set display properties like signal width, wave height, and cursor position. Use it to customize the visual layout and interaction of waveforms in a terminal interface.",
      "description_length": 306,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform visualization, handling tasks like dimension calculation, drawing clock cycles, binary/data waveforms, and UI elements such as cursors and status indicators. It operates on waveform data structures (`Wave.t`, `Waves.t`) using a graphical context (`G.ctx`) and drawing primitives from the `Draw` module. Designed for Hardcaml simulations, it enables interactive waveform inspection in terminal environments, supporting use cases like debugging digital circuits with JavaScript-compatible rendering.",
      "description_length": 577,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module computes and adjusts rectangular regions for rendering waveforms, values, and status within a terminal display. It provides operations to expand or shrink areas to account for borders and fits content within a specified window size. Concrete use cases include layout management for terminal-based waveform viewers where precise spatial alignment and boundary handling are required.",
      "description_length": 393,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.M.S-Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering and interacting with terminal waveforms, such as screen dimensions, scroll positions, and selection state. It works directly with integer fields in a mutable record to control display behavior during simulation visualization. Concrete use cases include adjusting visible signal ranges, setting cursor positions, and persisting UI state across waveform sessions.",
      "description_length": 420,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders terminal-based waveforms using low-level drawing operations on a provided canvas. It supports precise waveform visualization by mapping simulation data to character-based output within defined bounds. Use it to display digital signal simulations in a terminal without relying on Unix-specific libraries.",
      "description_length": 323,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S-Static-R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform visualization, including dimension calculations, drawing clock cycles, binary data, signal names, cursors, and UI components using a terminal drawing context represented as arrays of styled characters. It operates on data structures like `Bounds.t` and `Waves.t` to manage layout and rendering state, while its `pick` type and coordinate-based functions enable interactive selection of waveform elements during user interaction. These capabilities support use cases such as embedding interactive simulation viewers in text terminals or web-based environments that require precise waveform navigation and annotation.",
      "description_length": 695,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.M.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the storage and manipulation of waveform data for terminal-based visualization. It provides functions to add, remove, and update waveforms, as well as control display settings like zoom and horizontal scrolling. It operates on arrays of `Wave.t` values, each representing a signal trace, and is used to construct and modify the set of signals displayed in a Hardcaml simulation waveform viewer.",
      "description_length": 414,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module calculates and adjusts rectangular regions for rendering waveforms, values, and status in a terminal display. It provides operations to expand or shrink areas to account for borders and fit components within a specified window size. Use it to precisely position and size waveform visualizations in a terminal without relying on Unix-specific libraries.",
      "description_length": 364,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and constructs styling configurations for rendering waveforms, signals, and status elements in a terminal display. It provides functions to create and customize styles using predefined color schemes like black-on-white or white-on-black, and supports applying color to different display components. Use cases include configuring the visual appearance of waveforms and signals in a hardcaml simulation terminal viewer.",
      "description_length": 437,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S-Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates rendering styles for terminal-based waveform visualization. It provides functions to customize the appearance of waveform components such as signals, values, and borders using predefined color schemes like black-on-white or white-on-black. Use cases include configuring visual themes for waveforms in hardcaml simulations displayed in terminal environments.",
      "description_length": 393,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S-Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveform data into terminal-compatible visual representations using low-level drawing primitives. It operates on `Waves.t` structures to generate styled 2D arrays of characters with associated display styles. It supports customizable layout options like signal alignment, visibility flags, and dimension constraints, enabling precise waveform visualization in text-based environments.",
      "description_length": 404,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M.S-Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the layout and sizing of waveform display components within a terminal window. It provides functions to adjust dimensions for borders, fit components into a given window size, and control visibility of individual sections like signals, values, and status. These operations are used to render waveforms correctly within constrained terminal environments, ensuring proper spacing and alignment.",
      "description_length": 412,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.M.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages terminal waveform display data, providing operations to create, combine, and render waveforms from simulation data. It works with arrays of `Wave.t` values and `Port.t` structures to represent signal traces and their formatting. Use it to generate textual waveform visualizations in a terminal or buffer, combining multiple waveforms or updating existing ones dynamically.",
      "description_length": 392,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.M.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data types used to display terminal-based waveforms. It supports operations to access and modify waveform names, data, formatting, and text alignment, including specialized handling for binary and clock signals. Concrete use cases include rendering signal transitions in hardware simulations and formatting waveform annotations for terminal display.",
      "description_length": 397,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waveform",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the construction and manipulation of terminal waveforms using arrays of `Wave.t` values and port configurations. It supports creating waveforms from signal data, combining and updating waveform content, and rendering output to buffers, strings, or channels. Use cases include visualizing digital signal simulations in text-based environments without Unix dependencies.",
      "description_length": 388,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Waves-Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It supports operations to serialize and deserialize configurations using S-expressions, along with a predefined default configuration. Use this module to customize and persist the visual layout of waveforms in a terminal-based simulation viewer.",
      "description_length": 358,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the core representation and manipulation of waveforms for terminal display. It provides operations to create, update, and render waveforms using a configuration-driven approach. Concrete use cases include visualizing digital signal simulations in a terminal without relying on Unix-specific libraries.",
      "description_length": 321,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.Primitives",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level drawing operations for rendering waveforms in a terminal environment. It works with terminal screen coordinates and styled text cells, allowing precise placement of characters and styles within a defined region. Use cases include directly drawing waveform samples and querying cell contents for dynamic waveform updates.",
      "description_length": 351,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render-Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "Computes and adjusts layout bounds for waveform rendering within a terminal window. It operates on rectangle structures to align signal, value, wave, and status regions, applying border adjustments and fitting content to specified dimensions. Useful for rendering waveforms in a structured layout while respecting terminal display constraints.",
      "description_length": 343,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Data.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data as a sequence of bit vectors. It provides operations to access the width and length of the waveform, retrieve individual bit vectors at specific indices, and obtain a digestible string representation of the data. It is used to store and process simulation signal values for rendering in a terminal-based waveform viewer.",
      "description_length": 373,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level terminal graphics operations such as filling regions, drawing characters and strings, inverting colors, and outlining boxes. It works with contexts (`ctx`), styles (`style`), and rectangular bounds to control drawing area and appearance. It is used to render waveforms and UI elements directly in a terminal without relying on Unix-specific libraries.",
      "description_length": 382,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Waves-Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It supports operations to serialize and deserialize configurations using S-expressions, alongside providing a default configuration. Use cases include customizing waveform display layouts and persisting UI state across sessions.",
      "description_length": 341,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render-Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders terminal-compatible waveform visualizations from simulation data, producing styled 2D arrays of characters with customizable dimensions and signal alignment. It operates on `Waves.t` structures to generate detailed waveform displays, including optional signal names, values, and waveforms. Use it to visualize digital signal behavior in a text-based interface, such as displaying simulation results in a terminal or embedding waveforms in text reports.",
      "description_length": 472,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render-Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the layout and sizing of waveform display components within a terminal window. It provides operations to adjust dimensions for borders, fit components to available space, and control visibility of regions like signals, values, and status. Use it when rendering waveforms in a terminal to ensure proper alignment and spacing of visual elements.",
      "description_length": 363,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.In_memory",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level drawing operations for in-memory terminal screen buffers, supporting direct manipulation of characters and styles at specific coordinates. It works with fixed-size 2D arrays of points, where each point stores a Unicode value and associated style information. Use cases include rendering waveforms, text-based UI components, and terminal graphics without external dependencies, such as in simulation viewers or embedded terminal applications.",
      "description_length": 472,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform display elements, supporting operations to access and modify signal names, data, formatting, and text alignment. It works with data types representing waveform content such as binary values, clocks, and formatted data strings, alongside associated metadata. Concrete use cases include constructing and customizing waveform visualizations for terminal display in simulation tooling.",
      "description_length": 429,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides core operations for constructing and manipulating waveform data structures, enabling signal tracing and time-based event scheduling. It introduces data types for simulation events, signal values, and timelines, supporting tasks like generating displayable waveforms from simulation traces and managing signal transitions over time. A child module enhances waveform representation with operations to modify names, formatting, and alignment, particularly for binary and clock signals. Together, they enable detailed waveform rendering and annotation for terminal-based hardware simulation viewers.",
      "description_length": 616,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module organizes waveform data and display settings into a unified interface for terminal-based signal visualization. It supports operations to modify and query arrays of waveforms, adjust rendering parameters like zoom and offset, and update display dimensions dynamically. Key data types include `Wave.t` for individual signal traces and integers for layout properties such as height and cursor position. Example uses include rendering and scrolling through simulation outputs in real time.",
      "description_length": 497,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module organizes waveform display configurations by combining wave data with display settings, managing an array of wave objects and a configuration record to control rendering. The configuration submodule handles display properties like signal width, wave height, and cursor position using integers, enabling customization of terminal waveform layouts. Main operations include setting up wave objects, adjusting display parameters, and persisting configurations for simulation debugging. Example use cases include arranging multiple waveforms in a terminal, adjusting scroll positions dynamically, and saving layout settings for later reuse.",
      "description_length": 647,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render-Static-R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform displays, including dimension calculations, component drawing (waveforms, binary data, UI elements), and layout management. It operates on structured waveform data like `Wave.t`, `Waves.t`, and `Data.t`, while supporting interactive selection via coordinate-based hit detection. Its functionality is particularly useful for building cross-platform waveform viewers in environments like JavaScript, where Unix dependencies must be avoided.",
      "description_length": 518,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render-Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-agnostic waveform visualization, including dimension calculations (e.g., signal/cycle limits) and drawing primitives for waveforms, clocks, and UI elements like cursors or status bars. It operates on graphics contexts (`G.ctx`) and structured waveform data, supporting interactive features through coordinate-based element selection (e.g., clicking signals or values). Designed for terminal-based simulation debugging, it enables customizable styling and layout for waveforms and signal annotations in headless or JavaScript environments.",
      "description_length": 603,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Waveform",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages terminal-based waveform visualizations using structured data. It supports creating, combining, and rendering waveforms from signal data and port configurations. Operations include updating wave arrays, sorting ports, and outputting formatted waveforms to buffers, strings, or channels.",
      "description_length": 305,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render-Static-R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides terminal-based waveform rendering with operations for calculating layout dimensions, drawing waveforms (binary/data, clock cycles, UI elements), and handling interactive selection via screen-coordinate-based picking. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts with styled bounds, enabling text-based visualization of digital simulations. Use cases include static waveform display for debugging and analysis in terminal environments without Unix dependencies.",
      "description_length": 531,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data for terminal display, supporting operations to access and modify waveform names, data, formatting, and text alignment. It works with data types including strings, binary data, and specialized formatting and alignment types. Concrete use cases include constructing and customizing waveforms for simulation output, extracting signal data for display, and aligning waveform text in a terminal interface.",
      "description_length": 453,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render-Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and provides predefined style configurations for rendering waveforms, signals, values, and status elements in a terminal-based waveform viewer. It works with style records that specify visual attributes like colors and borders using the `Draw.Style.t` type. Concrete use cases include setting up monochrome or colored display themes for waveform visualization in both light and dark terminal environments.",
      "description_length": 425,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates waveform display elements for terminal-based simulation visualization. It supports operations to construct and modify waveforms such as setting names, extracting data, formatting values, and determining text alignment. Concrete use cases include rendering clock signals, binary data, and custom-formatted signal values in a terminal waveform viewer.",
      "description_length": 385,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveforms as ASCII character representations suitable for terminal display. It operates on waveform data types that include binary values, clocks, and formatted data, using alignment and formatting configurations. Concrete use cases include visualizing digital signal simulations in text-based environments without relying on Unix-specific libraries.",
      "description_length": 370,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Waves-Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "Manages configuration parameters for rendering waveforms in a terminal, including dimensions and scroll positions. It supports loading and serializing configurations using S-expressions. Use it to customize waveform display layout and navigation during simulation visualization.",
      "description_length": 278,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides functions to access and manipulate waveform data, including retrieving bit vectors at specific indices, computing data dimensions, and generating digestible string representations. It operates on a concrete data type `t` that represents simulation waveform traces, supporting efficient querying of signal values over time. Concrete use cases include rendering waveforms in a terminal interface and exporting signal data for external analysis.",
      "description_length": 463,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module orchestrates terminal-based waveform visualization by combining layout control with signal data management. It renders waveforms, handles user interactions like zooming and scrolling, and maintains display state through mutable configuration records and arrays of signal traces. Users can dynamically adjust visible signal ranges, update waveform content, and navigate large simulations using cursor controls. Submodules refine this behavior by managing display parameters and signal storage independently while integrating seamlessly into the overall rendering pipeline.",
      "description_length": 583,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates terminal-displayable waveforms, storing an array of individual `Wave.t` values along with configuration settings. It supports operations to construct, update, and render waveforms in a terminal environment, specifically tailored for Hardcaml simulation output. Use cases include visualizing digital signal transitions over time and integrating waveform displays into command-line simulation tools.",
      "description_length": 436,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveform data into terminal-compatible visualizations, combining layout management, styling, and low-level drawing operations to produce ASCII-based waveform diagrams. It operates on core data types like `Waves.t`, `Bounds.t`, and styled character arrays, supporting operations to draw signals, clocks, cursors, and UI components with customizable themes and interactive selection. Submodules handle dimension calculation, layout fitting, signal rendering, and style customization, enabling use cases such as visualizing Hardcaml simulation results in text terminals or embedding waveform viewers in toolchains without Unix-specific dependencies. Specific capabilities include rendering binary data as waveforms, applying color schemes, and interactively picking elements based on cursor position.",
      "description_length": 817,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents a waveform display structure that organizes and manipulates wave data for terminal visualization. It supports operations to create, combine, and update waveforms using arrays of wave data and port configurations, and provides rendering capabilities to convert waveforms into string or buffer formats for output. It is used to generate and display structured digital simulation waveforms in environments without Unix dependencies, such as JavaScript.",
      "description_length": 472,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level terminal waveform rendering operations using a provided Primitives implementation. It supports drawing characters, strings, boxes, and styled elements within a grid-based context, with direct control over styling and layout. Use cases include rendering simulation waveforms in a terminal or browser console without relying on Unix-specific libraries.",
      "description_length": 383,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.S-Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, such as signal width, value width, and scroll positions. It provides functions to serialize and deserialize configurations, along with a default setup. Use this module to customize waveform display dimensions and navigation state in terminal-based simulations.",
      "description_length": 330,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveforms in a terminal using low-level drawing operations, handling the visual representation of signal transitions over time. It works with waveform data structures that represent digital signals and their timing information. Concrete use cases include displaying simulation results in text-based interfaces and generating waveform visualizations for debugging digital circuits in environments without graphical support.",
      "description_length": 442,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the storage and manipulation of waveform data for terminal display. It provides functions to create, update, and render waveforms using a configuration-driven approach. Concrete use cases include visualizing digital signal simulations in a text-based interface without relying on Unix-specific dependencies.",
      "description_length": 327,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "Handles low-level rendering of waveforms in a terminal environment, including drawing waveforms, managing screen updates, and handling terminal resizing. Works with simulation data represented as signals and time intervals, using styling and layout configurations to control visual appearance. Used to implement real-time waveform viewers and simulation debuggers in text-based interfaces.",
      "description_length": 389,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including border, signal, value, wave, and status display attributes. It provides predefined color schemes and functions to customize styles based on a base style. Use this module to configure the visual appearance of waveforms in a terminal interface without relying on Unix-specific dependencies.",
      "description_length": 375,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render-Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal waveform visualization, including dimension calculations, drawing binary/data waveforms, clocks, and signals, alongside higher-level UI composition and interaction handling. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts (`G.ctx`, `Draw.rect`), supporting use cases like interactive simulation debugging in cross-platform environments where Unix dependencies are unavailable. Specific applications include rendering hierarchical signal displays and enabling coordinate-based element selection in text-based waveform viewers.",
      "description_length": 637,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module constructs and manipulates terminal waveforms using specified data, wave, and rendering modules. It operates on waveforms composed of arrays of `Wave.t` elements and associated port configurations, enabling operations like combining waveforms, sorting ports, and rendering to buffers or strings. Concrete use cases include generating and displaying digital simulation waveforms in a terminal environment without Unix dependencies.",
      "description_length": 442,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Render-Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including colors and formatting for signals, values, waves, and status elements. It provides specific configurations like `black_on_white`, `white_on_black`, and color variants, applying them to waveform components during display. Use cases include customizing waveform appearance in terminal simulators and adapting visual themes for different environments.",
      "description_length": 435,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module transforms simulation data into terminal-displayable waveforms, using arrays of `Wave.t` and `Port.t` to represent and manipulate signal traces. It supports dynamic waveform composition, enabling ASCII-based visualizations that reflect simulation state changes in real time. Operations include creating individual waveforms, combining them into groups, and rendering to a terminal or buffer. For example, users can generate a textual UI showing multiple synchronized signal traces updated across simulation cycles.",
      "description_length": 526,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveforms in a terminal using low-level drawing operations, handling character-based visualization of digital signal data. It works with data structures representing waveforms, their bounds, and styling information to generate terminal output. Concrete use cases include displaying simulation results in text terminals and exporting waveform visualizations as text files.",
      "description_length": 391,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module handles terminal-based waveform visualization through low-level rendering, layout management, and style customization. It operates on waveform data types like `Wave.t` and `Waves.t`, supporting drawing, selection, and layout adjustments within terminal windows. You can render multi-signal waveforms with custom styles, interactively select elements by coordinates, and adapt display regions to fit borders and window constraints. Examples include building debug tools that show timing diagrams with labeled signals, selectable values, and status indicators in both color and monochrome themes.",
      "description_length": 606,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.S-Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data as sequences of bit vectors. It provides operations to access the width and length of the waveform, retrieve individual bit vectors at specific indices, and generate a digestible byte representation for efficient processing. Typical use cases include inspecting and serializing simulation data for display or analysis in a terminal environment.",
      "description_length": 397,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the layout and sizing of waveform display components within a terminal window. It provides operations to adjust rectangular regions for borders, fit components within a given window size, and control visibility of individual sections like signals, values, and status. These functions are used to dynamically resize and position waveform elements during interactive simulation visualizations.",
      "description_length": 411,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveforms into a terminal display using a low-level, customizable drawing interface. It operates on arrays of waveform data structures and applies rendering rules to produce character-based visualizations. Use it to generate precise ASCII waveform outputs for simulation debugging in environments without graphical support.",
      "description_length": 343,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module constructs and manipulates waveform display elements for terminal-based simulation visualization. It supports creating waveforms with different data types, including binary and clock signals, and allows setting display properties like alignment and formatting. Use cases include rendering simulation data in text terminals and exporting waveform visualizations in JavaScript environments.",
      "description_length": 400,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.S-Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data for terminal display, supporting operations to access and modify wave names, data, formatting, and alignment. It works with data types including strings, `Data.t`, `Text_alignment.t`, and `Wave_format.t` to define how waveforms are rendered. Concrete use cases include constructing and customizing individual waveforms within a simulation, such as setting display formats for binary signals or aligning waveform text in a terminal view.",
      "description_length": 489,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data for terminal display, supporting operations to access and modify waveform names, data, formatting, and text alignment. It works with data types including strings, binary data, and specialized formatting and alignment types. Concrete use cases include constructing and customizing waveforms for simulation output, such as setting signal names, applying display formats, and aligning text in terminal visualizations.",
      "description_length": 467,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.Style",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines styling attributes for terminal waveform rendering, including foreground and background colors and bold text formatting. It provides operations to create, compare, and serialize style configurations using a record-based data structure. Concrete use cases include customizing signal trace colors and text formatting in terminal-based waveform viewers.",
      "description_length": 370,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module supports layout calculation and terminal-specific drawing primitives for waveform visualization, handling operations like dimension computation, signal rendering, and cursor/status display. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts (`G.ctx`), enabling use cases such as interactive simulation debugging in terminal environments and web-based waveform viewers without Unix dependencies.",
      "description_length": 450,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.S-Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents waveform data as a collection of bit vectors with fixed width and length. It provides operations to access individual bit vectors by index, compute their width and length, and serialize them into a digestible string format. Use cases include storing and manipulating simulation traces for terminal waveform display, particularly in environments without Unix dependencies like JavaScript.",
      "description_length": 410,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.S-Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data as sequences of bit vectors. It provides operations to access waveform samples at specific indices, determine the bit width and length of the waveform, and extract binary representations suitable for hashing. It is used to process and compare simulation traces in a terminal-based waveform viewer, particularly for generating and validating waveform digests.",
      "description_length": 411,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveform data into styled terminal display buffers, supporting customizable alignment, visibility of signals and values, and layout dimensions. It operates on `Waves.t` structures to generate arrays of styled integer pairs representing screen cells. Use it to visualize digital signal simulations in a terminal without Unix dependencies, suitable for JavaScript compilation.",
      "description_length": 394,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S-Render-Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders terminal-compatible waveform visualizations from simulation data, producing styled character-cell output for display. It operates on `Waves.t` structures, which represent signal waveforms, and generates arrays of styled integers for rendering in text terminals. Use this module to generate ASCII-based waveform displays with customizable alignment, signal visibility, and styling for debugging digital circuits in headless or web environments.",
      "description_length": 463,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.S-Static-R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module handles low-level rendering tasks for terminal-based waveform displays, including layout calculations, drawing primitives for waveforms and UI elements, and styling operations. It works with waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts composed of style-integer pairs, enabling text-based visualization of simulation data. Its features support interactive picking of waveform elements via coordinate-based selection and static display composition for tools like Hardcaml simulations.",
      "description_length": 530,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module enables terminal-based waveform visualization by combining layout management, styling, and low-level rendering operations. It processes waveform data structures like `Wave.t` and `Waves.t` to generate styled 2D character arrays, supporting features such as clock cycle drawing, cursor placement, and boundary-adjusted rendering. Layout adjustments account for borders and window constraints, while styling functions apply color schemes to signals and UI elements. Example uses include interactive waveform inspection in JavaScript environments and structured debugging of digital circuits through Hardcaml simulations.",
      "description_length": 630,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M.S",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level operations for constructing and manipulating waveform displays in a terminal, including functions to add signals, control rendering, and manage display state. It works directly with waveform data structures representing signal transitions over time, organized into groups and tracks for hierarchical display. Concrete use cases include embedding waveform visualizations in simulation tools, generating ASCII-based timing diagrams, and debugging digital circuits in environments without graphical support.",
      "description_length": 535,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module enables terminal-based waveform visualization for signal simulation by integrating waveform construction, display configuration, and rendering. It centers on `Wave.t` and `Waves.t` data types to represent individual and grouped signal traces, supporting operations to create, modify, and render waveforms with customizable layout and style. Users can visualize digital signals like clock cycles or binary data, adjust zoom and scroll position dynamically, and render output to strings or terminal windows with selectable elements and themed styling. Example applications include real-time simulation viewers and text-based debug tools for timing analysis.",
      "description_length": 667,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module enables terminal-based waveform visualization and interaction by combining rendering, layout, and configuration management. It operates on structured waveform data to produce styled ASCII output, supporting dynamic updates, signal selection, and layout customization through integrated submodules. Main data types include waveform structures (`Wave.t`, `Waves.t`), rendering contexts, style records, and configuration parameters. Examples include generating interactive timing diagrams, customizing display themes with color and borders, fitting waveforms to terminal dimensions, and handling cursor-based interaction through coordinate picking.",
      "description_length": 657,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port.Type",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines the type `t` representing the direction or role of a simulation port in a waveform display system, with variants for input, output, and internal ports. It includes functions for comparing port types and converting them to S-expressions. These capabilities support simulation visualization tools by enabling structured port classification and serialization for debugging or display purposes.",
      "description_length": 410,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders terminal-based waveforms by converting simulation data into structured ASCII visualizations, organizing signal values and timing information for display. It operates on waveform data structures like `Wave.t` and `Waves.t`, supporting operations to draw signals, clocks, and cursors with customizable styles and layouts. Configuration modules manage display dimensions, scroll positions, and S-expression-based serialization, while rendering submodules handle low-level drawing, styling, and interactive picking of elements. Specific capabilities include visualizing Hardcaml simulations in text terminals, exporting styled waveform buffers for JavaScript environments, and dynamically adjusting layout and visibility based on window constraints.",
      "description_length": 765,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rules.With_interface",
      "library": "hardcaml_waveterm.kernel",
      "description": "Creates display rules for each signal in a given interface, determining their alignment and wave format. Works with interface modules and constructs ordered display rules for signal visualization. Useful for defining how specific signals in a hardware simulation should be rendered in a terminal waveform viewer.",
      "description_length": 312,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module draws Unicode-based waveform visualizations directly in text terminals using low-level graphics primitives. It operates on rectangular regions with precise character and style control, composing shapes from predefined elements like lines and corners. Main data types include styled text cells, 2D screen buffers, and style records that define color and formatting attributes. You can render simulation waveforms, update dynamic signal traces, and create terminal-based UI components using grid-based drawing operations and customizable styles.",
      "description_length": 555,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Write",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module writes waveform data in HTML or UTF-8 formats using customizable styling callbacks. It processes 2D arrays of (integer * style) pairs, applying styler functions to generate output lines. Used to render terminal waveforms with ANSI codes, HTML spans, or CSS classes, or to produce plain UTF-8 displays.",
      "description_length": 313,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module enables terminal-based waveform visualization by combining low-level rendering with structured configuration and data management. It supports core data types like waveforms, signal traces, configuration records, and bit vector sequences, offering operations to create, update, align, and render waveforms incrementally as simulation data arrives. Users can dynamically adjust display settings such as signal width, scroll position, and wave formatting, or serialize configurations for later reuse. Submodules refine this functionality by handling layout control, signal storage, and display customization independently while maintaining seamless integration into the rendering pipeline.",
      "description_length": 698,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rule.States",
      "library": "hardcaml_waveterm.kernel",
      "description": "Manages a collection of display states for waveform visualization, providing serialization to S-expressions for configuration and debugging. Works with `Port.t` values to control how signal states are rendered in the terminal. Used to define and persist visual formatting rules for digital signal simulations in hardcaml.",
      "description_length": 321,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level routines for encoding and decoding waveform data in string buffers and integer arrays, enabling efficient manipulation of signal transitions. It works alongside its child module, which represents waveform data as sequences of bit vectors, offering operations to access their width, length, and individual elements. Together, they support tasks like packing simulation samples into compact binary forms and unpacking them for terminal rendering. Specific uses include generating string representations of signal data and processing simulation values for display.",
      "description_length": 592,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module handles low-level waveform rendering for terminal displays, supporting operations to append samples, manage scaling, and generate character-based visualizations of digital signals. It works with data types like `Wave.t`, `Waves.t`, and `Data.t` to represent waveforms, signal values, and display dimensions, enabling tasks like time-based zooming and terminal-compatible waveform generation. Submodules manage layout alignment, rendering styles, configuration persistence, and structured waveform composition, allowing users to build customizable, interactive waveform displays with features like signal alignment, color themes, and coordinate-based selection. Specific applications include visualizing Hardcaml simulation output in text-based interfaces, generating real-time ASCII waveform updates, and embedding structured signal traces in terminal reports.",
      "description_length": 872,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module handles low-level waveform rendering for terminal display, combining signal sampling, time-axis generation, and character-based drawing with structured data manipulation. It works with simulation data such as signal values and time-based events, offering operations to construct, modify, and visualize waveforms, including binary and clock signals, with support for alignment, formatting, and bit vector serialization. Submodules enable detailed customization of waveform elements, signal tracing, and timeline management, allowing tasks like rendering multi-bit buses in ASCII or exporting simulation traces for use in JavaScript environments.",
      "description_length": 656,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module enables terminal-based waveform visualization by integrating structured waveform data with customizable rendering and layout management. It centers on data types like `Wave.t`, `Waves.t`, and `Data.t` to represent individual and grouped signal traces, supporting operations to create, modify, and render waveforms with dynamic zoom, scroll, and styling. Users can visualize digital signals such as clock cycles and binary data, generate interactive timing diagrams, export styled waveform buffers, and handle real-time updates in text-based interfaces. Specific capabilities include rendering Hardcaml simulations, embedding signal traces in terminal reports, and exporting waveforms to HTML or JavaScript environments with custom styling.",
      "description_length": 751,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Text_alignment",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines text alignment options for rendering waveforms in a terminal, specifically supporting left and right alignment. It provides functions to convert alignment values to S-expressions and to compare alignment values for equality. These operations are used to control the visual positioning of waveform annotations in terminal-based simulations.",
      "description_length": 359,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rule",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines rules for formatting and aligning waveform data based on port names or custom logic, managing how signal states are rendered in simulations. It supports matching ports by exact name, regular expression, or user-defined predicates to apply display formats like binary or hex, with alignment control. The child module handles collections of display states, enabling serialization to S-expressions for configuration and debugging. Example uses include formatting control signals as binary and data buses as hex for clarity in terminal-based waveform visualization.",
      "description_length": 581,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module describes simulation ports with their type, name, and width, supporting structured classification and serialization for visualization tools. It defines the core operations for comparing and identifying ports, along with S-expression conversion for debugging and display. The child module introduces the `t` type for port direction\u2014input, output, or internal\u2014enabling precise role assignment in waveform displays. Together, they allow organizing signal ports, querying their properties, and serializing them for simulation analysis.",
      "description_length": 543,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rules",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module organizes and applies a prioritized list of rules to control the layout and formatting of waveform ports and signals in a terminal viewer. It uses `Display_rules.t` to define the matching criteria, wave format, and order, ensuring ports are sorted and rendered according to the first matching rule. Operations include rule-based sorting, visibility checks, and signal formatting for display. A child module generates rules per signal in an interface, aligning them appropriately for structured waveform visualization.",
      "description_length": 529,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port_name",
      "library": "hardcaml_waveterm.kernel",
      "description": "The abstract type `t` encapsulates string-based port names with type-safe comparison, ordering, and range-validation operations, ensuring precise manipulation of hierarchical signal identifiers in waveform rendering. It provides utilities to clamp values within bounds and bidirectional conversion to standard strings, facilitating seamless integration with simulation workflows. This abstraction is critical for maintaining correctness in terminal-based hardware visualization tools, particularly in cross-platform environments like JavaScript where Unix dependencies are absent.",
      "description_length": 580,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel",
      "library": "hardcaml_waveterm.kernel",
      "description": "This library enables terminal-based waveform visualization for digital simulations, centered on structured data types like `Wave.t`, `Waves.t`, and `Data.t` for representing and manipulating signal traces. It supports dynamic zooming, scrolling, and styling, with mechanisms to format and align signals based on port names or custom logic, using rules for display priority and layout. Users can render clock cycles, binary and hex data, and timing diagrams, with options for exporting styled waveforms to HTML or JavaScript environments. Additional features include text alignment control, signal serialization, and hierarchical signal identifier management for cross-platform compatibility.",
      "description_length": 691,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scroll_bar_mode",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents scroll bar behavior with two modes: `Fixed` for a constant number of visible items and `Dynamic` for adjusting based on available space. Uses an integer to define the threshold or size in each mode. Useful for UI components where scrollable content needs precise control over rendering and interaction.",
      "description_length": 313,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Mouse_mode",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents mouse interaction modes for scroll behavior in a waveform viewer. Supports three modes: Middle for middle-click panning, Ratio for proportional scrolling, and Auto for automatic adjustment based on context. Used to control how mouse input affects waveform navigation in an interactive display.",
      "description_length": 304,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Widget.Make",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module displays waveforms interactively using a terminal UI, allowing users to visualize and navigate signal data. It supports operations to run the viewer with customizable display settings like signal width and start cycle, and handles user input for interaction. Use cases include debugging digital circuits by inspecting signal transitions over time.",
      "description_length": 359,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Adjustment",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module manages scroll adjustments for interactive waveform displays. It provides functions to set the visible range and offset, with a callback triggered on offset changes. The core type `t` holds the range, offset, and callback, enabling dynamic updates to scrolling behavior in UI components like waveform viewers.",
      "description_length": 321,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scrollable",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module manages scrollable regions with adjustable parameters like window size, scroll bar dimensions, and document size. It supports setting scroll offsets and ranges while triggering associated callbacks, suitable for interactive waveform displays. Key operations include `set_offset` and `set_range`, which control scrolling behavior in response to user input or dynamic content changes.",
      "description_length": 394,
      "index": 101,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.VScrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "Handles vertical scrollbar rendering and interaction within a terminal-based waveform viewer. It provides functions to create and draw a scrollbar using terminal graphics, with support for custom styling. This module is used to visually represent and control the vertical scrolling position of waveform data in a text terminal interface.",
      "description_length": 337,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Orientation",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents scroll orientation with values `Horz` and `Vert`. Provides `sexp_of_t` for converting orientation values to S-expressions. Useful for serializing scroll direction settings in waveform display configurations.",
      "description_length": 218,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.HScrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module implements a horizontal scrollbar UI component for rendering in a terminal-based waveform viewer. It provides functions to create and draw the scrollbar within a specified drawing context, using a defined visual style. The scrollbar operates on a rectangle area and is used to visualize and interact with horizontal scrolling in a waveform display.",
      "description_length": 360,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scroll_bar_style",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents visual styles for scroll bars with two variants: `Filled` and `Outline`. Provides `sexp_of_t` to serialize style values to S-expressions. Used to configure the appearance of scroll bars in interactive waveform displays.",
      "description_length": 230,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module implements a scrollable UI component with interactive mouse and keyboard controls. It manages a scrollable region and adjusts its position based on user input from specified keys or mouse events. The component supports horizontal or vertical orientation and updates its display bounds dynamically in response to user interaction.",
      "description_length": 341,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Draw_notty",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module provides low-level graphics operations for rendering text and UI elements in a terminal using an in-memory buffer. It supports drawing characters, strings, boxes, and styled elements at specific positions, along with utilities to manipulate styles such as bold and inversion. It is used for building interactive waveform viewers or terminal-based visualizations where precise control over terminal display is required.",
      "description_length": 430,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module provides a comprehensive system for managing scroll behavior in interactive waveform displays, combining precise control over visible content with rich user interaction. Core data types include scroll modes (`Fixed`, `Dynamic`), orientation (`Horz`, `Vert`), visual styles (`Filled`, `Outline`), and state tracking types like `t` that encapsulate range, offset, and change callbacks. Operations allow setting scroll ranges and offsets, handling mouse and keyboard input, and rendering styled scrollbars in terminal environments. Examples include dynamically adjusting visible waveform segments, panning with mouse input, and rendering horizontal or vertical scrollbars with custom appearance.",
      "description_length": 704,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Widget",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module provides an interactive terminal-based waveform viewer for visualizing and navigating signal data. It supports customizable display settings such as signal width and start cycle, and includes operations for running the viewer and handling user input. Users can inspect signal transitions over time, making it useful for debugging digital circuits. For example, you can launch a waveform display for a set of signals, adjust the visible time range, and interactively explore changes in signal values.",
      "description_length": 511,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module enables interactive visualization of cycle-accurate waveform data in terminal environments, combining low-level rendering, scroll management, and a full waveform viewer. It uses data types like scroll state, display rules, and signal timelines to support operations such as dynamic panning, styled rendering, and user-driven navigation. You can customize UI layout, control signal visibility, and run an interactive viewer that responds to mouse and keyboard input. Example use cases include inspecting signal transitions during simulation debugging and building custom waveform interfaces with precise terminal control.",
      "description_length": 632,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.M.S",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements an event store for managing time-indexed data with operations to insert, retrieve, and query events ordered by time. It supports efficient lookups and dynamic resizing, working with types for time (`Time.t`) and data (`Data.t`). Concrete use cases include simulation waveform storage and time-series event tracking where ordered, time-based access is required.",
      "description_length": 383,
      "index": 111,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.M",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module organizes time-stamped data events in a sorted list, enabling efficient insertion, range retrieval, and interval merging. It supports core operations like adding events, querying by time ranges, and resolving overlapping intervals, working with `Time.t` and `Data.t` types. Submodule 1 enhances this with specialized event store functionality, optimizing for ordered access and dynamic resizing in use cases like simulation waveform storage and time-series tracking. Together, they provide a cohesive toolkit for managing and analyzing temporal data with precision and efficiency.",
      "description_length": 592,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements an event store for managing time-stamped bit data in a waveform viewer. It supports operations to insert, retrieve, and query events by time or index, with dynamic resizing to accommodate new entries. Use cases include storing and querying signal transitions in digital circuit simulations.",
      "description_length": 313,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store.Make",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements a time-indexed event store that maps integer indices to time and data values, supporting efficient insertion, lookup, and resizing. It works with arbitrary `Time` and `Data` types that support comparison and serialization. Concrete use cases include simulation waveform storage and event scheduling where time-ordered data access is required.",
      "description_length": 365,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.Data",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module defines a data type `t` and operations for representing and combining event data. It includes functions to convert values to S-expressions, merge two event data values, and a constant for empty event data. It is used to store and manipulate event-specific information in a structured way.",
      "description_length": 300,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Time",
      "library": "hardcaml_waveterm.event_store",
      "description": "Represents and manipulates time values as integers for event storage in a waveform viewer. Provides comparison, serialization to S-expressions, and a zero time value. Used to track and sort discrete time points in simulation data.",
      "description_length": 230,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.Event_store-Make",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements a time-indexed event store that maps timestamps to data values using a sorted array structure. It supports efficient insertion, lookup, and resizing operations while maintaining temporal ordering. Concrete use cases include simulation waveform storage and time-based event scheduling.",
      "description_length": 307,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.Time",
      "library": "hardcaml_waveterm.event_store",
      "description": "Represents a time value with support for comparison, serialization, and a zero time point. Works with custom time types in event-driven simulations. Used to track and compare simulation timestamps in waveform visualization tools.",
      "description_length": 229,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Data",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module directly handles `Bits.t` values, providing operations to merge bit data and represent it as S-expressions. It includes a constant `none` for an empty bit value and a `merge` function to combine two bit values. This is useful for representing and manipulating digital signal data in a waveform viewer.",
      "description_length": 313,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module organizes events in a time-indexed structure, mapping integer indices to time and data values with support for efficient insertion, lookup, and resizing. It operates on arbitrary `Time` and `Data` types that support comparison and serialization, enabling ordered access and modification. Use it to store simulation waveforms or schedule events where chronological ordering and fast access are essential. For example, you can insert an event at a specific time, retrieve the nearest events around a timestamp, or resize the store dynamically as needed.",
      "description_length": 563,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module provides interfaces for managing event data and time representations in waveform visualization systems, organizing time-stamped events in sorted structures for efficient insertion, range queries, and interval merging. It defines core types like `Time.t` for precise time tracking and `Data.t` for structured event information, with operations to merge, convert, and compare values. Submodules enhance storage efficiency using sorted arrays and dynamic resizing, enabling use cases such as simulation waveform storage and time-series analysis. Specific functionality includes adding events, resolving overlapping intervals, converting data to S-expressions, and maintaining temporal order during updates.",
      "description_length": 715,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module manages a timeline of bitvector events, associating each with a time step and supporting efficient retrieval and compact representation of digital signal data. It provides core operations to insert and query bitvector values at specific times, using integer time values for ordering and `Bits.t` for representing signal states. The timeline supports dynamic resizing, time-based indexing, and merging of bit values, enabling tasks like waveform visualization and simulation trace analysis. Submodules handle time comparison and serialization, bitvector manipulation, and event storage with indexed access for efficient signal transition tracking.",
      "description_length": 658,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module organizes time-stamped events in a structured, efficient timeline, supporting insertion, lookup, and dynamic resizing for chronological data management. It defines core types like `Time.t` and `Data.t` (or `Bits.t` for digital signals), enabling precise time tracking and structured event or signal representation. Operations include adding events, querying by time, merging overlapping intervals, and converting data to S-expressions. Example uses include simulation waveform storage, time-series analysis, and digital signal visualization.",
      "description_length": 553,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Static.R",
      "library": "hardcaml_waveterm",
      "description": "This module supports rendering terminal-based waveforms by handling operations such as measuring dimensions, drawing clock cycles, binary data, signal names, values, cursors, and UI components, working with data structures like `Wave.t`, `Waves.t`, `Data.t`, and styled integer arrays. It also provides a `pick` function to identify selected waveform elements (e.g., signals, values, status) at specific screen coordinates using positional data and rendering bounds. These features are used for interactive visualization of digital signal simulations in text terminals, enabling tasks like debugging and waveform analysis.",
      "description_length": 622,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waves.Config",
      "library": "hardcaml_waveterm",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It supports loading and saving configurations via S-expressions, with a predefined default setup. Use it to customize waveform display settings in terminal simulations.",
      "description_length": 281,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Static",
      "library": "hardcaml_waveterm",
      "description": "This module renders static waveform visualizations in terminal environments using `Waves.t` data structures, producing styled integer arrays that represent signal states over time. It supports layout customization, signal value display, and cursor interaction, enabling clear depictions of digital circuit simulations. Submodules handle detailed rendering tasks such as drawing clock cycles, binary data, and UI elements, while providing positional selection via the `pick` function to identify waveform components at specific screen coordinates. Together, these capabilities allow for both visual representation and interactive analysis of simulation data directly in the terminal.",
      "description_length": 682,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Make",
      "library": "hardcaml_waveterm",
      "description": "This module supports operations such as drawing clock cycles, binary/data waveforms, and interactive UI elements like signal names and cursor positions. It works with waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts (`G.ctx`) to manage terminal layout, styling, and input handling. Its primary use case is enabling terminal-based simulation waveform visualization with interactive selection and dynamic display updates.",
      "description_length": 450,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Bounds",
      "library": "hardcaml_waveterm",
      "description": "This module calculates and adjusts rectangular regions for rendering waveforms, signal values, and status in a terminal display. It provides precise layout operations like expanding or shrinking areas to account for borders and fitting content within a specified window size. Concrete use cases include aligning waveform segments with terminal dimensions and ensuring proper spacing for visual elements during simulation playback.",
      "description_length": 430,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Styles",
      "library": "hardcaml_waveterm",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including styles for borders, signals, values, waves, and status. It provides predefined color schemes and functions to customize or select styles based on background and color preferences. Use cases include configuring waveform appearance in terminal displays for simulation debugging and visualization.",
      "description_length": 381,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Serialize",
      "library": "hardcaml_waveterm",
      "description": "This module provides functions to serialize and deserialize waveform data structures to and from strings. It supports operations for persisting simulation waveforms and verifying the integrity of the serialization process. Use cases include saving waveform states to files and transmitting them across processes or networks.",
      "description_length": 324,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Serialize",
      "library": "hardcaml_waveterm",
      "description": "This module provides functions to serialize and deserialize waveform data structures to and from strings. It supports operations for persisting waveform state through `marshall` and reconstructing it with `unmarshall`, ensuring data fidelity with the `equal` function. Use this when saving simulation waveforms to disk or transmitting them across systems for later analysis or replay.",
      "description_length": 384,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render-Static-R",
      "library": "hardcaml_waveterm",
      "description": "This module provides terminal waveform rendering operations, including dimension calculations, drawing primitives for waveforms and UI elements, and layout utilities for alignment and borders. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts involving styled integer pairs, rectangles, and drawing styles. Its element identification functionality enables interactive use cases like simulation debugging by detecting signal values or UI components at specific screen coordinates.",
      "description_length": 524,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Expect",
      "library": "hardcaml_waveterm",
      "description": "This module provides an `expect` function to print waveforms directly to stdout during expect tests, with optional serialization to disk. It operates on `Waveform.t` values, which represent signal traces from simulations. Use it to capture and verify waveform outputs in test scripts or to save waveforms for later analysis.",
      "description_length": 324,
      "index": 133,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render",
      "library": "hardcaml_waveterm",
      "description": "This module renders interactive waveform visualizations in terminal environments using structured waveform data, supporting layout customization, styling, and user interaction. It provides key data types like `Wave.t`, `Waves.t`, and `Data.t` to represent signal states over time, along with rendering contexts and style definitions to control visual appearance and layout. Operations include drawing clock cycles, binary waveforms, and UI elements such as signal names and cursors, with support for dynamic updates and positional selection via screen coordinates. Example uses include terminal-based digital simulation visualization with styled waveforms, interactive signal inspection, and adaptive layout adjustments for varying terminal sizes.",
      "description_length": 747,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S",
      "library": "hardcaml_waveterm",
      "description": "This module provides functions for building and manipulating waveform data structures, including signal tracing and time-based event scheduling. It works with custom data types representing waveforms, signals, and simulation time steps. Concrete use cases include capturing and modifying waveform data during simulation, and preparing signal traces for rendering or serialization.",
      "description_length": 380,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Waves-Config",
      "library": "hardcaml_waveterm",
      "description": "This module defines configuration parameters for rendering waveforms in a terminal, including dimensions for signals, values, and the waveform display. It provides mutable fields to control scroll positions, cursor placement, and selected signal tracking during simulation playback. Use this module to customize the visual layout and interactive behavior of waveforms in a hardcaml simulation terminal interface.",
      "description_length": 412,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Wave",
      "library": "hardcaml_waveterm",
      "description": "This module defines a waveform display structure that supports named signals with binary or formatted data, including clock and empty placeholder waveforms. It provides operations to access and modify waveform names, data, formatting, and text alignment, along with utilities to convert waveform data to string representations. Concrete use cases include rendering simulation signals in a terminal waveform viewer, customizing signal display formats, and aligning waveform annotations for visual clarity during debugging.",
      "description_length": 521,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render-Styles",
      "library": "hardcaml_waveterm",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including styles for borders, signals, values, waves, and status. It provides predefined color schemes like black-on-white and white-on-black, along with functions to apply color to these elements. Use cases include customizing waveform appearance in terminal displays and setting visual themes for signal tracing in hardware simulations.",
      "description_length": 415,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render-Static",
      "library": "hardcaml_waveterm",
      "description": "This module renders static waveform visualizations in a terminal, generating styled character-based output for waveforms, signals, and values. It operates on `Waves.t` data structures, producing arrays of styled integers representing screen cells. Use it to display or export fixed waveform views with customizable layout, width, and styling options.",
      "description_length": 350,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render",
      "library": "hardcaml_waveterm",
      "description": "This module renders terminal-based waveforms by converting simulation data into styled, bounded visual representations. It operates on waveform data structures and style configurations to produce output suitable for terminal display. Use it to generate visual debugging aids directly from simulation traces.",
      "description_length": 307,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waves",
      "library": "hardcaml_waveterm",
      "description": "This module renders and manipulates waveforms in a terminal, using `Wave.t` arrays and a configurable display setup. It supports styling options like color and layout through a configuration submodule that can be loaded or saved in S-expressions. You can simulate digital signals with precise timing, adjust display dimensions, and scroll through long waveforms interactively. The default configuration provides a ready-to-use setup, while custom configurations allow fine-grained control over the visual output.",
      "description_length": 512,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Waveform",
      "library": "hardcaml_waveterm",
      "description": "This module constructs and manipulates terminal waveforms from simulation data, supporting operations to create, update, and merge waveforms using signal data and port definitions. It processes `Wave.t` lists and `Port.t` lists to generate structured waveform displays, enabling concrete use cases like visualizing digital signal behavior in hardware simulations directly in the terminal. Functions like `to_string`, `print`, and `expect` allow direct output and verification of waveform content for debugging and testing.",
      "description_length": 522,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Wave",
      "library": "hardcaml_waveterm",
      "description": "This module defines and manipulates waveform display data for terminal visualization, supporting operations to construct, name, and modify waveforms with specific formatting and alignment. It works with types like `t`, `Data.t`, `Hardcaml.Bits.t`, `Wave_format.t`, and `Text_alignment.t` to represent and render signal values. Concrete use cases include setting display formats for binary signals, aligning waveform text during rendering, and extracting signal data for simulation output.",
      "description_length": 488,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waveform",
      "library": "hardcaml_waveterm",
      "description": "This module constructs and manipulates terminal waveforms by combining, updating, and rendering wave data. It operates on `Waveform.t` values, which represent collections of signal traces with associated port metadata. Use it to visualize simulation results directly in the terminal, generate waveform strings for logging, or compare expected and actual signal outputs in testbenches.",
      "description_length": 384,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Expect",
      "library": "hardcaml_waveterm",
      "description": "This module provides the `expect` function to print waveforms directly to stdout during expect tests, with optional serialization to disk. It operates on `Waveform.t` values, which represent signal waveforms from Hardcaml simulations. Use this module to capture and verify waveform outputs in test scripts or to save waveforms for later analysis.",
      "description_length": 346,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Waves",
      "library": "hardcaml_waveterm",
      "description": "This module manages the display and manipulation of waveform data in a terminal-based interface. It provides functions to create, update, and render waveforms using a configuration and an array of wave structures. Use it to visualize digital signal simulations directly in the terminal.",
      "description_length": 286,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render-Bounds",
      "library": "hardcaml_waveterm",
      "description": "This module calculates and adjusts rectangular regions for rendering waveforms, signal values, and status within a terminal window. It provides precise layout control by expanding or shrinking areas to account for borders and fitting content to available space. Concrete use cases include aligning waveform visuals with terminal dimensions and managing spacing for clear signal display.",
      "description_length": 386,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M.S-Render-Make",
      "library": "hardcaml_waveterm",
      "description": "This module offers low-level terminal rendering operations and UI interaction logic for visualizing digital waveform data. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and a graphics context (`G.ctx`) to render elements like clock cycles, binary signals, and status bars, while supporting interactive signal picking via coordinate-based hit detection. It enables use cases such as real-time simulation debugging, hierarchical waveform navigation, and terminal-based digital signal analysis with customizable layout and styling.",
      "description_length": 554,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Expect",
      "library": "hardcaml_waveterm",
      "description": "This module provides an `expect` function that captures and validates waveforms during cycle-accurate simulations. It works with `Waveform.t` structures, allowing waveforms to be displayed or compared against expected outputs. Use it to verify signal behavior over time in digital circuit simulations.",
      "description_length": 301,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make",
      "library": "hardcaml_waveterm",
      "description": "This module suite enables the creation, manipulation, and visualization of digital simulation waveforms directly in terminal environments. It centers around `Waveform.t` and related types like `Wave.t`, `Waves.t`, and `Data.t` to represent signal traces and their display properties, offering operations for serialization, rendering, styling, and interactive inspection. Users can generate and persist waveform data, visualize signal behavior with customizable layouts and colors, and integrate waveform output into test workflows for verification. Example uses include interactive simulation debugging, terminal-based waveform logging, and automated test comparison with styled signal display.",
      "description_length": 694,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Waveform",
      "library": "hardcaml_waveterm",
      "description": "This module manages terminal waveform visualizations for cycle-accurate simulations, providing operations to create, combine, and render waveforms from simulation data. It works with arrays of `Wave.t` values and `Port.t` definitions to generate display-ready output in text buffers or strings. Concrete use cases include printing waveforms to the console, comparing signal traces, and exporting simulation results for debugging digital circuits.",
      "description_length": 446,
      "index": 151,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M",
      "library": "hardcaml_waveterm",
      "description": "This module renders waveforms in a terminal by converting simulation data into styled character-based visualizations, handling both layout and display logic. It operates on data structures like `Wave.t`, `Waves.t`, and `Data.t`, offering functions to generate, manipulate, and render waveforms with support for signal tracing, time-based events, and interactive element identification. You can customize appearance with color schemes and layout parameters, serialize waveform state for storage or transmission, and directly print or test waveforms using expect scripts. Submodules handle everything from low-level rendering and hit detection to configuration, serialization, and structured signal display.",
      "description_length": 705,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Serialize",
      "library": "hardcaml_waveterm",
      "description": "This module provides functions to serialize and deserialize waveform data for cycle-accurate simulations. It operates on `Waveform.t` values, converting them to and from string representations. Use this module to save waveform states to disk or transmit them across networks for later reconstruction.",
      "description_length": 300,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert",
      "library": "hardcaml_waveterm",
      "description": "This module suite enables the creation, manipulation, and terminal-based visualization of digital simulation waveforms. It centers on data types like `Wave.t`, `Waves.t`, and `Data.t` to represent and style signal traces, supporting operations such as rendering, serialization, interactive inspection, and layout customization. Users can generate waveform displays with color-coded signals, trace time-based events, and integrate visual debugging into test workflows. Example uses include interactive simulation analysis, terminal logging of signal behavior, and automated test validation with styled waveform output.",
      "description_length": 617,
      "index": 154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim",
      "library": "hardcaml_waveterm",
      "description": "This module supports cycle-accurate digital circuit simulation by capturing, visualizing, and serializing waveform data. It centers around `Waveform.t` and `Wave.t` structures, offering operations to validate signal behavior over time, render terminal waveforms, and serialize waveform states. You can use it to compare simulation outputs against expected results, print signal traces to the console, or save and reload waveform data for debugging. Example workflows include verifying circuit timing, exporting simulation results, and transmitting waveform data between environments.",
      "description_length": 583,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm",
      "library": "hardcaml_waveterm",
      "description": "This module enables terminal-based visualization and manipulation of digital simulation waveforms, centered on data types like `Wave.t`, `Waves.t`, and `Waveform.t` to represent and style signal traces. It supports rendering waveforms with color-coded signals, capturing time-based events, and customizing layout for interactive or automated analysis. Users can serialize waveform data for debugging, compare simulation outputs against expected results, and integrate visual inspection into test workflows. Example uses include cycle-accurate circuit verification, console logging of signal behavior, and exporting simulation traces for external analysis.",
      "description_length": 655,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Static.R",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides operations to render waveforms (binary and arbitrary data), clock cycles, cursors, and UI elements like signal names and values in a terminal interface. It works with waveform data structures (`Waves.t`, `Wave.t`, `Data.t`) and rendering contexts to manage layout, alignment, and styling, supporting interactive scenarios where users select specific waveform elements via screen coordinates. Key use cases include terminal-based waveform visualization, debugging with cursor-driven value inspection, and structured layout rendering for simulation traces.",
      "description_length": 575,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waves.Config",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module defines configuration parameters for rendering waveforms in a cycle-accurate simulation trace. It includes mutable fields for dimensions like signal width, wave height, and scroll positions, enabling dynamic adjustments during visualization. Use this to customize the display of signal waveforms in a hardcaml simulation GUI or terminal interface.",
      "description_length": 359,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Styles",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module defines and manipulates rendering styles for waveform visualization in a hardware simulation context. It provides functions to configure visual elements such as borders, signals, values, waves, and status indicators using predefined color schemes like black-on-white or white-on-black. Concrete use cases include customizing waveform display appearance for different simulation outputs or user preferences.",
      "description_length": 418,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Make",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides rendering functions for visualizing waveforms and simulation data in a terminal UI, including measuring waveform dimensions, drawing clock cycles, binary/data waveforms, signals, and status elements using a graphics context. It operates on waveform data structures like `Waves.t`, `Wave.t`, and `Data.t`, supporting use cases such as interactive signal selection and grid-based layout rendering in a terminal-based waveform viewer.",
      "description_length": 452,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Static",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module renders waveforms and signal values into styled text-based visualizations, operating on `Waves.t` data structures to produce arrays of styled text elements. It supports configuration options like alignment, width, and display toggles, enabling terminal-based waveform diagrams with custom layouts and visual annotations for simulation debugging. The child module extends this by rendering binary and arbitrary data, clock cycles, cursors, and UI elements like signal names and values, using rendering contexts to manage layout and styling. Together, they enable interactive waveform visualization, cursor-driven value inspection, and structured display of simulation traces in terminal interfaces.",
      "description_length": 709,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Bounds",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module calculates and adjusts rectangular regions for rendering waveforms, values, and status in a simulation viewer. It provides functions to expand or shrink areas to account for borders and fit components within a specified window. Concrete use cases include layout management for waveform visualization, ensuring proper spacing and alignment of signal traces and metadata.",
      "description_length": 381,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module orchestrates waveform visualization in terminal-based simulation tools by integrating layout management, styling, and rendering logic. It processes waveform data structures like `Waves.t` and `Wave.t` to generate styled, grid-aligned visualizations that include signals, clock cycles, status indicators, and interactive elements such as cursors and value annotations. Key operations include configuring visual themes, measuring and adjusting rendering regions, and drawing structured waveform displays with customizable alignment and spacing. Examples include rendering a binary signal trace with a white-on-black theme, adjusting layout to fit a terminal window, or displaying signal values on cursor hover.",
      "description_length": 720,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waves",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module manages waveform tracing in a Hardcaml cycle-level simulation, storing wave data and configuration for signal traces. It supports serialization of wave data to S-expressions and operates on arrays of wave types to represent and manipulate signal waveforms. The child module allows dynamic configuration of waveform rendering parameters such as signal width, wave height, and scroll positions, enabling fine-grained control over visualization in GUI or terminal interfaces. Together, they enable simulation, customization, and export of detailed signal traces for external analysis or display.",
      "description_length": 604,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Expert",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides low-level control over waveform tracing in a Hardcaml cycle simulator. It allows creating and manipulating waveform trace objects, including operations to start, stop, and capture signal transitions during simulation. It works directly with Hardcaml's `Cyclesim.t` and `Wave.t` types to enable detailed inspection of signal behavior over simulation cycles.",
      "description_length": 377,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waveform",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module manages waveform data for simulation traces, providing operations to create, combine, and manipulate waveforms using port and signal data. It works with arrays of `Wave.t` and `Port.t` types to represent signal transitions and interface elements. Use cases include generating textual or buffered waveform outputs, merging simulation results, and preparing data for display with specific formatting rules.",
      "description_length": 416,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Wave",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module represents individual waveform signals with operations to access and modify signal names, data, formatting, and alignment. It supports data types like strings, binary data, and text alignment enums, and is used to define how signals are displayed in a waveform viewer. Concrete use cases include setting the display format of a signal's data and retrieving the string representation of a signal's value for visualization.",
      "description_length": 433,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module connects waveform tracing to a Hardcaml cycle-level simulator, enabling visualization and analysis of signal behavior over time. It centers around data types like `Wave.t`, `Waves.t`, and `Port.t`, supporting operations to capture, configure, and render signal transitions with customizable layout, styling, and interactivity. Users can dynamically adjust display parameters, serialize wave data, and generate structured visualizations in terminal or GUI environments. Examples include rendering binary signals with custom themes, aligning waveforms to clock cycles, and inspecting signal values interactively with cursors.",
      "description_length": 635,
      "index": 168,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 170,
    "meaningful_modules": 169,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9941176470588236
  },
  "statistics": {
    "max_description_length": 872,
    "min_description_length": 218,
    "avg_description_length": 464.57988165680473,
    "embedding_file_size_mb": 0.6142978668212891
  }
}