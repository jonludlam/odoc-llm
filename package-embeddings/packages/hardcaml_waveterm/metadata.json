{
  "package": "hardcaml_waveterm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 100,
  "creation_timestamp": "2025-08-15T17:00:50.109286",
  "modules": [
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Static.R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform visualization, including layout calculations, drawing of waveforms and UI elements, and styling of visual components. It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`), coordinate bounds (`Bounds.t`), and rendering contexts represented as 2D arrays of styled characters. These capabilities enable use cases such as visualizing digital signal simulations and implementing interactive selection of waveform elements based on screen coordinates.",
      "description_length": 544,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Static.R",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform visualization, including dimension calculations, drawing of clock cycles, binary data, signal names, and UI borders using structured data like `Wave.t` and `Waves.t`. It also supports interactive element identification through coordinate-based picking, determining if a position corresponds to a wave, value, signal, or UI component. These capabilities enable efficient waveform display in environments without Unix dependencies, such as JavaScript-based simulation tools or text-terminal interfaces for hardware verification.",
      "description_length": 606,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module computes and adjusts rectangular regions for rendering waveforms, signal values, and status within a terminal display. It provides operations to expand or shrink areas to account for borders and fit content within a specified window size. Concrete use cases include layout management for terminal-based waveform viewers where precise spatial alignment and boundary handling are required.",
      "description_length": 399,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module supports rendering of clock cycles, binary data, and signal waveforms to terminal displays using low-level graphics primitives. It operates on waveform data structures (`Wave.t`, `Waves.t`) and a graphics context (`G.ctx`), providing layout calculations, drawing operations for waveforms/values/cursors, and coordinate-based interaction handling via `pick` to identify selected elements. It enables building interactive simulation viewers that work in terminal environments or JavaScript targets, with features like signal value inspection and cursor-driven navigation.",
      "description_length": 581,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements static waveform rendering for terminal display, generating immutable 2D arrays of styled characters representing waveforms, signals, and values. It operates on waveform data structures (`Waves.t`) along with styling and layout parameters to produce precomputed renderings suitable for output. Use cases include rendering simulation results to text-based interfaces and capturing waveform visualizations for logging or analysis.",
      "description_length": 450,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and constructs styling configurations for rendering waveforms, signals, and UI elements in a terminal-based waveform viewer. It provides predefined color schemes like `black_on_white` and `white_on_black`, along with functions to customize styles for borders, signals, values, waves, and status. Use this module to control the visual appearance of waveform displays in hardcaml simulations running in terminal environments.",
      "description_length": 443,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.Make.Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It works with the `Config.t` record type to store display settings like width, height, and cursor positions. Use it to customize waveform visualization layouts and user interaction behavior in terminal-based simulations.",
      "description_length": 333,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waves.Config",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines configuration parameters for rendering waveforms, including dimensions and scroll positions. It works with the `t` record type to store mutable settings like signal width, wave height, and cursor position. Use it to customize waveform display layout and interaction behavior in terminal-based simulations.",
      "description_length": 325,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Styles",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including border, signal, value, wave, and status display attributes. It operates on style records composed of optional drawing styles, supporting operations to apply color schemes and construct themed configurations. Concrete use cases include setting up waveform visual themes like dark or light modes and applying consistent styling across simulation output elements.",
      "description_length": 447,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Static",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level rendering logic for terminal-based waveform displays, handling operations like dimension calculation, signal alignment, and structured drawing of waves, values, and UI borders. It operates on waveform data structures such as `Wave.t` and `Waves.t`, generating styled terminal output in environments like JavaScript or text terminals. It supports use cases such as interactive simulation debugging and embedded visualization where Unix dependencies are unavailable.",
      "description_length": 497,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level rendering operations for terminal-based waveform visualization, including waveform dimension calculations, binary/arbitrary waveform drawing, clock cycle rendering, and UI element composition (cursors, signal names, status bars) using a parameterized graphics context. It works with coordinate-based layouts, signal value representations, and interactive selection logic to enable building waveform viewers in simulation environments. Specific capabilities include full UI composition with `draw_ui` and coordinate-to-element mapping with `pick` for interactive debugging tools.",
      "description_length": 609,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render.Bounds",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module calculates and adjusts rectangular regions for rendering waveforms, signal values, and status in a terminal display. It provides operations to expand or shrink areas to account for borders and fit content within a specified window size. Use cases include layout management for terminal-based waveform viewers where precise spatial alignment and boundary handling are required.",
      "description_length": 388,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module constructs and manipulates terminal-displayable waveforms using specified data, wave, waves, and render modules. It operates on waveforms composed of signal data and port configurations, supporting operations like wave combination, sorting, and rendering to buffers, strings, or output channels. Concrete use cases include visualizing Hardcaml simulation results directly in the terminal or embedding waveform output in web-based interfaces via JavaScript-compatible compilation.",
      "description_length": 491,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages waveform data representation and manipulation for terminal display, including operations to add, update, and query signal values over time. It works with structured data types representing time points, signal names, and waveform states. Concrete use cases include rendering ASCII waveforms in a terminal, tracking digital signal transitions, and visualizing simulation timing diagrams.",
      "description_length": 405,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waveform",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module constructs and manipulates terminal-displayable waveforms using arrays of `Wave.t` values and associated port definitions. It supports combining multiple waveforms, updating wave data, sorting ports, and rendering to buffers, strings, or output channels. Use cases include visualizing digital signal simulations in text-based environments without Unix dependencies, such as JavaScript runtimes.",
      "description_length": 406,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module represents and manipulates waveform data for terminal display, supporting operations to construct and modify waveforms with associated metadata such as name, data, format, and text alignment. It works with string identifiers, binary data, and formatting configurations to render simulation signals in a textual interface. Concrete use cases include visualizing clock signals, binary values, and custom data transitions in a hardcaml simulation directly within a terminal or JavaScript environment.",
      "description_length": 509,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.Style",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines styling attributes for terminal waveform rendering, including foreground and background colors and bold text formatting. It provides operations to create and manipulate style configurations using a record type that specifies color and font weight. Use cases include customizing the visual appearance of waveforms in a terminal by setting specific color combinations and text emphasis for signal traces.",
      "description_length": 422,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the rendering and layout of waveforms in a terminal interface. It combines configuration settings with an array of wave data to generate visual representations of simulation signals. Use it to display and navigate complex digital waveforms in text-based environments without relying on Unix-specific libraries.",
      "description_length": 330,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.In_memory",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level drawing operations for in-memory terminal-based waveform rendering. It supports direct manipulation of a 2D grid of styled characters, enabling tasks like filling regions, drawing text, boxes, and individual characters with specific styles. It is used to construct and modify waveform displays programmatically in environments without terminal access, such as JavaScript.",
      "description_length": 402,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "The `Render` module implements rendering logic for terminal-based waveform displays, handling operations like signal alignment, dimension calculation, and structured drawing of waves, values, and UI borders. It operates on waveform data structures such as `Wave.t` and `Waves.t`, producing styled terminal output suitable for JavaScript or text terminal environments. Use cases include interactive simulation debugging and embedded visualization where Unix dependencies are unavailable.",
      "description_length": 486,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level drawing operations for terminal-based waveform visualization. It provides functions to draw shapes, text, and styled elements within a bounded region of a terminal display, supporting operations like filling areas, drawing boxes, inverting colors, and rendering characters or integers at specific coordinates. It works directly with terminal contexts, style definitions, and rectangular regions to enable precise control over waveform rendering.",
      "description_length": 478,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines a type `t` representing waveform elements such as empty markers, clocks, binary signals, and formatted data. It provides operations to construct and manipulate these waveform elements, including setting and retrieving names, data, formatting functions, and alignment. Use cases include building and customizing waveform displays for simulation data in a terminal environment.",
      "description_length": 395,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level rendering logic for terminal-based waveform displays, handling waveform drawing, cursor placement, signal labeling, and status bar composition using a customizable graphics context. It operates on waveforms, signal values, and layout bounds to produce interactive UI elements and coordinate mappings for selection. Concrete use cases include building terminal waveform viewers with precise visual control and interactive debugging capabilities for hardcaml simulations.",
      "description_length": 502,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements waveform rendering logic for terminal display, managing data conversion, wave and signal representation, and layout rendering. It operates on simulation data structures, wave configurations, and terminal output formats to produce visual waveforms. Concrete use cases include generating ASCII-based waveform diagrams from Hardcaml simulation traces for display in text terminals or log files.",
      "description_length": 414,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveforms and timing data into a terminal-displayable format, handling layout and visual encoding. It operates on simulation data structures like signals and clock cycles, organizing them into rows and columns for visualization. Use it to generate ASCII-based waveform diagrams directly from simulation outputs in environments without Unix dependencies, such as JavaScript targets.",
      "description_length": 401,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages waveform data and display state for terminal-based waveforms. It provides operations to add, update, and render waveforms using underlying data structures that track simulation signals and their visual representation. Concrete use cases include rendering digital signal transitions and hierarchical waveform groupings in a terminal UI.",
      "description_length": 355,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make.Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the storage and manipulation of waveform data for terminal-based simulations. It provides operations to create, update, and serialize waveforms using a mutable array of `Wave.t` values, along with associated configuration settings. Use it to build and modify waveform displays dynamically during simulation, such as adding or removing signals and adjusting display parameters.",
      "description_length": 396,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Draw",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides low-level drawing primitives for terminal waveform visualization, including functions to fill regions, draw boxes, render styled text, and manipulate individual characters or integers at specific coordinates. It operates on terminal contexts, style configurations, and rectangular regions to enable precise visual control over waveform displays. Concrete use cases include rendering signal traces with custom styling, inverting colors for emphasis, and constructing complex waveform diagrams in both terminal and in-memory environments.",
      "description_length": 557,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Data",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level data manipulation operations for handling waveform data in a terminal display. It provides functions for creating, updating, and querying 2D arrays of waveform samples, supporting efficient rendering of signal transitions. Use cases include managing pixel buffers for terminal waveform views and applying signal changes to specific time ranges.",
      "description_length": 377,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Make",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module specializes in constructing, manipulating, and rendering terminal-based waveforms for hardcaml simulations, primarily working with binary data, string identifiers, and formatting configurations. It supports operations to define, update, and visualize signals such as clock cycles and binary transitions, directly in text terminals or JavaScript environments. Concrete use cases include real-time simulation debugging and embedded waveform display in environments without Unix dependencies.",
      "description_length": 501,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waves",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level waveform rendering operations for terminal display, handling data structures like waveforms, timestamps, and signal values. It provides functions to update, align, and render waveforms incrementally as simulation data arrives. Concrete use cases include visualizing digital signal transitions and timing diagrams directly in a terminal during hardware simulation.",
      "description_length": 396,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rules.With_interface",
      "library": "hardcaml_waveterm.kernel",
      "description": "Creates display rules for signals in a hardware interface, determining their visual order and waveform formatting in terminal-based waveforms. Works directly with hardware interfaces (`I.t`) and applies text alignment and wave format configurations. Useful for rendering structured signal displays in hardcaml simulations without relying on Unix dependencies.",
      "description_length": 359,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.M",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements operations for rendering and manipulating terminal-based waveforms using the provided `Data` module, which defines the underlying simulation data structure. It supports concrete actions like waveform signal extraction, time-range slicing, and ASCII-based visualization generation tailored for terminal display. Use cases include visualizing digital circuit simulations directly in a terminal or generating waveform outputs for debugging and analysis in non-Unix environments like JavaScript.",
      "description_length": 514,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Write",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module writes terminal or HTML waveform displays using styling callbacks for visual formatting. It operates on arrays of integer and style pairs, applying styles via ANSI escapes, HTML spans, or CSS classes. Use it to render simulation waveforms in terminals or web interfaces without Unix dependencies.",
      "description_length": 308,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port.Type",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines the type `t` representing the direction or role of a simulation port in a waveform display, with variants for input, output, and internal signals. It includes functions for comparing port types and converting them to S-expressions. These capabilities are used to categorize and serialize port information when rendering waveforms in a terminal.",
      "description_length": 364,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Waveform",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level waveform rendering operations for terminal display, handling data structures representing signal waveforms and their transitions. It provides functions to append waveform events, manage cursor positions, and render ASCII-based waveform visualizations. Concrete use cases include generating terminal-friendly waveform outputs from Hardcaml simulation traces for debugging digital circuits.",
      "description_length": 421,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Wave",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level operations for constructing and manipulating waveform elements like clocks, binary signals, and formatted data. It works with structured types representing waveform elements, time points, and display formatting functions. Concrete use cases include building customizable ASCII waveform displays for simulation data, setting signal values at specific time points, and formatting waveform annotations for terminal rendering.",
      "description_length": 455,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert.Render",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module renders waveform data into a terminal-displayable format, handling signal alignment, time-axis scaling, and signal value representation. It operates on waveform data structures containing signal names, timestamps, and values, producing line-based visual output suitable for terminal display. Use cases include generating ASCII waveform diagrams for simulation debugging and visualizing timing relationships between digital signals in a text-based environment.",
      "description_length": 471,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Text_alignment",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines text alignment options for rendering waveforms in a terminal, specifically supporting left and right alignment. It provides functions to convert alignment values to S-expressions and compare alignment values for equality. These operations are used to control the horizontal positioning of waveform annotations in terminal displays.",
      "description_length": 351,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rules",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module manages the visual ordering and formatting of waveform signals in terminal displays by applying a prioritized list of matching rules to simulation ports. It determines which ports to display, their vertical layout, and their wave format and text alignment, based on explicit pattern matching against port names or signal identifiers. It is used to customize waveform output in hardcaml simulations, enabling structured and selective signal visualization directly in text-based environments.",
      "description_length": 502,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines a `t` type that represents a simulation port with its direction, name, and bit width. It provides operations to compare ports, check equality, and serialize them to S-expressions. These functions support organizing and rendering waveform data in a terminal by distinguishing between input, output, and internal signals.",
      "description_length": 339,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Port_name",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module provides ordered type operations for abstract string identifiers used to label signal ports in hardware simulations, including comparison, sorting, clamping, and conversion to/from string/S-expression representations. It works with an abstract type that wraps raw strings to enforce semantic distinction between port names while retaining textual interoperability. These capabilities support waveform visualization workflows where port names must be compared, sorted, or safely converted during simulation data processing and terminal rendering.",
      "description_length": 557,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Expert",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements low-level operations for rendering and manipulating terminal-based waveforms, focusing on signal extraction, time-range slicing, and ASCII visualization. It works directly with binary data, string identifiers, and terminal contexts to enable precise control over waveform display. Use cases include real-time simulation debugging and generating waveform outputs in environments without Unix dependencies, such as JavaScript.",
      "description_length": 447,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_kernel.Display_rule",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module defines rules for selecting display formats and alignment for signal ports based on their names or custom logic. It supports matching via exact names, regular expressions, or user-defined functions that inspect port properties. Use cases include formatting specific signals as hexadecimal, aligning waveform labels, or applying conditional formatting to state machine signals.",
      "description_length": 388,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_kernel",
      "library": "hardcaml_waveterm.kernel",
      "description": "This module implements terminal-based waveform rendering for hardware simulations, operating on signal ports and display rules to produce structured ASCII visualizations. It processes port data with alignment settings and prioritized display rules to control waveform layout, formatting, and visibility in text environments. Concrete use cases include debugging digital circuits by displaying synchronized signal transitions, applying custom formatting to specific ports, and generating readable waveforms in JavaScript environments.",
      "description_length": 533,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scrollable",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module manages scrollable regions with adjustable parameters like window size, scroll bar dimensions, and document size. It provides functions to set scroll ranges and offsets, and includes callbacks for handling scroll bar changes. It is used to implement interactive scrolling behavior in UI components like waveform viewers.",
      "description_length": 332,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scroll_bar_mode",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents scroll bar behavior modes with fixed and dynamic integer-based sizing. Exposes a single conversion function to serialize mode values to S-expressions. Used to define how scroll bars adjust in interactive waveform display interfaces.",
      "description_length": 243,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.HScrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module implements a horizontal scrollbar UI component for terminal-based waveform viewers. It provides functions to create and render a scrollbar within a specified drawing area using Notty for terminal graphics. The scrollbar visualizes a viewable region within a larger horizontal data range, typically used to navigate large signal traces in a constrained display area.",
      "description_length": 377,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Orientation",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents scroll orientation as either horizontal or vertical. Provides a conversion function to S-expressions for serialization. Used to define scrolling direction in interactive waveform display components.",
      "description_length": 209,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Mouse_mode",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents mouse interaction modes for scroll behavior in a waveform viewer. Supports three modes: Middle for centering the view, Ratio for proportional scrolling, and Auto for automatic adjustment based on context. Used to control how mouse input affects waveform navigation.",
      "description_length": 276,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Adjustment",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module manages scroll adjustments for interactive waveform displays. It provides functions to set the visible range and offset, with a callback triggered on offset changes. The core type `t` holds the range, offset, and callback, enabling dynamic updates to scrolling behavior in response to user input or programmatic changes.",
      "description_length": 332,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Widget.Make",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module provides functions to run an interactive waveform viewer for visualizing digital signal simulations. It works with waveform data structures defined in the `M.Waves` and `M.Waveform` modules, allowing users to inspect signals over time with customizable display settings. Concrete use cases include debugging hardware designs by stepping through signal transitions, analyzing timing behavior, and interactively exploring simulation results with configurable UI parameters like signal width and display rules.",
      "description_length": 519,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scroll_bar_style",
      "library": "hardcaml_waveterm.interactive",
      "description": "Represents visual styles for scroll bars with two variants: `Filled` and `Outline`. Provides `sexp_of_t` to serialize style values to S-expressions. Useful for configuring UI elements in waveform viewers where visual representation affects user interaction and readability.",
      "description_length": 273,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.VScrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "Handles vertical scrollbar rendering and interaction within a terminal-based waveform viewer. It provides functions to create and draw a scrollbar using a specified drawing context and style, and supports serialization for state persistence. Useful for implementing scrollable waveform displays in text terminals.",
      "description_length": 313,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll.Scrollbar",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module implements a scrollable UI component that handles user input for adjusting visible regions within a bounded area. It works with scrollable content and rectangle bounds, using mouse and keyboard events to update the scroll position. Concrete use cases include navigating large waveforms or timelines in a terminal-based interface by dragging a scrollbar or using arrow keys.",
      "description_length": 385,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Widget",
      "library": "hardcaml_waveterm.interactive",
      "description": "Handles user interface interactions for waveform visualization, including event handling and dynamic updates. Works with waveform data structures and UI state representations. Enables features like zooming, panning, and signal selection in interactive waveform viewers.",
      "description_length": 269,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Scroll",
      "library": "hardcaml_waveterm.interactive",
      "description": "Manages scrolling behavior and UI components for interactive waveform displays in terminal-based interfaces. It supports precise control over visible ranges, scroll offsets, and user input handling through mouse and keyboard interactions. Key operations include rendering horizontal and vertical scrollbars, adjusting scroll positions dynamically, and configuring scroll bar styles and modes for navigating large waveform datasets.",
      "description_length": 431,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive.Draw_notty",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module provides low-level terminal graphics operations using an in-memory buffer for rendering. It supports drawing characters, strings, boxes, and styled elements at specific positions within a given context, along with direct manipulation of cell styles such as inversion and bolding. It is used to build and update terminal-based waveform displays by converting structured data into Notty images for rendering.",
      "description_length": 418,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_interactive",
      "library": "hardcaml_waveterm.interactive",
      "description": "This module implements interactive terminal-based waveform visualization with direct support for rendering waveforms, managing scrollable views, and handling user input. It operates on waveform data structures and UI state representations to enable features like zooming, panning, and signal selection. Concrete use cases include real-time inspection of digital circuit simulations and interactive debugging of signal transitions in terminal environments.",
      "description_length": 455,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Static.R",
      "library": "hardcaml_waveterm",
      "description": "This module provides terminal-based waveform rendering capabilities, including dimension calculations (width, height, cycles, signals), drawing primitives for waveforms and UI elements (clock cycles, binary/data waveforms, cursor), and layout utilities (border, alignment). It operates on waveform data structures (`Wave.t`, `Waves.t`, `Data.t`) and rendering contexts involving styled integer arrays, rectangles, and coordinate systems. The module supports interactive use cases through coordinate-based hit detection to identify selected waveform elements (signals, values, status) during simulation visualization.",
      "description_length": 616,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waves.Config",
      "library": "hardcaml_waveterm",
      "description": "This module defines configuration parameters for rendering waveforms, such as signal width, value width, and scroll positions. It supports loading and saving configurations via S-expressions and provides a default setup. Use it to customize waveform display dimensions and navigation state in terminal-based simulations.",
      "description_length": 320,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Bounds",
      "library": "hardcaml_waveterm",
      "description": "Computes and adjusts rectangular regions for rendering waveforms, signal values, and status in a terminal display. Works with `rect` structures to define layout boundaries, applying expansion or shrinking operations for borders and fitting content within windows. Used to align and size waveform visualization components during terminal rendering.",
      "description_length": 347,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Make",
      "library": "hardcaml_waveterm",
      "description": "This module offers low-level rendering operations for terminal waveform displays, including layout calculations for waveform components, drawing of binary/arbitrary data waveforms, clock cycles, and UI elements like cursors and status bars. It operates on a graphics context (`G.ctx`) with styling primitives to render visualizations and processes screen coordinates to determine user interactions with signals or waveform regions. It is specifically used to build interactive terminal-based interfaces for exploring hardware simulation timing and signal behavior with mouse or touch input.",
      "description_length": 590,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Styles",
      "library": "hardcaml_waveterm",
      "description": "This module defines and manipulates rendering styles for terminal waveforms, including styles for borders, signals, values, waves, and status. It provides predefined color schemes like black-on-white and white-on-black, along with functions to apply color to these elements. Use cases include customizing waveform appearance in terminal displays for better visibility or theming.",
      "description_length": 379,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render.Static",
      "library": "hardcaml_waveterm",
      "description": "This module renders static waveform visualizations in a terminal by generating styled integer arrays representing waveforms, signals, and values. It operates on `Waves.t` data structures and produces terminal-compatible output arrays with customizable dimensions, alignment, and styling. It is used to display fixed snapshots of simulation data, such as rendering full waveforms without interactive updates or extracting waveform images for logging and debugging.",
      "description_length": 463,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waves",
      "library": "hardcaml_waveterm",
      "description": "This module manages the storage and manipulation of waveform data for terminal-based signal visualization. It provides functions to create, update, and serialize waveforms using a configuration-driven layout, supporting operations like adding signals, adjusting scroll positions, and setting signal values. It works directly with arrays of `Wave.t` and integrates `Config` to control rendering parameters such as widths and offsets.",
      "description_length": 432,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Serialize",
      "library": "hardcaml_waveterm",
      "description": "This module provides functions to serialize and deserialize waveform data structures, enabling persistent storage or transmission of simulation waveforms. It operates directly on `Waveform.t` values, converting them to and from string representations. Use this module to save waveforms to disk or send them over a network, ensuring exact reconstruction when needed.",
      "description_length": 365,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Render",
      "library": "hardcaml_waveterm",
      "description": "The `Render` module performs low-level terminal rendering operations for waveforms, including drawing signal transitions, clock cycles, and UI elements like cursors and status bars. It operates on a graphics context with styling information to produce terminal display output, using layout bounds to position elements accurately. It is used to visualize hardware simulation timing data interactively, supporting mouse input for signal inspection and waveform navigation.",
      "description_length": 470,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Waveform",
      "library": "hardcaml_waveterm",
      "description": "This module constructs and manipulates terminal waveforms by combining, updating, and serializing waveform data. It operates on `Waveform.t` values, which represent collections of signal traces with associated ports and display rules. Use it to generate visual representations of digital signal simulations, compare waveform outputs, or print waveforms directly to a terminal or file.",
      "description_length": 384,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Expect",
      "library": "hardcaml_waveterm",
      "description": "This module provides an `expect` function that prints waveforms to `stdout` and optionally serializes them to disk for offline viewing. It operates on `Waveform.t` values, which represent signal waveforms from Hardcaml simulations. Use this module to capture and verify waveform outputs during expect tests, particularly when debugging or validating simulation behavior.",
      "description_length": 370,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make.Wave",
      "library": "hardcaml_waveterm",
      "description": "This module defines and manipulates waveform display elements for terminal-based simulation visualization. It supports operations to create and modify waveforms such as setting names, retrieving data, formatting values, and aligning text. Concrete use cases include rendering clock signals, binary data, and custom formatted values in a terminal waveform viewer.",
      "description_length": 362,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.Make",
      "library": "hardcaml_waveterm",
      "description": "This module specializes in terminal-based waveform visualization for hardware simulations, offering precise control over waveform display elements, layout, and rendering. It works with arrays of waveform data, configuration structures, and terminal graphics contexts to render signals such as clock cycles, binary values, and custom-formatted traces. Concrete use cases include interactive signal inspection during simulation, waveform comparison, and expect testing with visual output verification.",
      "description_length": 499,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Serialize",
      "library": "hardcaml_waveterm",
      "description": "This module serializes and deserializes waveform data for cycle-accurate simulations. It converts `Waveform.t` values to and from strings, enabling storage or transmission of simulation waveforms. Use it to save waveform states to disk or send them over a network for later reconstruction.",
      "description_length": 289,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Waveform",
      "library": "hardcaml_waveterm",
      "description": "This module constructs and manipulates terminal-displayable waveforms from cycle-accurate simulations. It supports creating waveforms from signal data, combining and updating waveform displays, and rendering them to strings, buffers, or output channels. Use cases include visualizing digital circuit behavior during testbenches and debugging hardware designs in terminal environments.",
      "description_length": 384,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.Expert.M",
      "library": "hardcaml_waveterm",
      "description": "This module renders terminal-based waveforms from simulation data, supporting operations to format and display signal transitions over time. It works with custom data types representing signal values and simulation traces. Use it to visualize digital circuit behavior directly in the terminal during testing or debugging.",
      "description_length": 321,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim.Expect",
      "library": "hardcaml_waveterm",
      "description": "This module provides an `expect` function that captures and validates waveforms during cycle-accurate simulations. It supports optional display of waveform digests and serialization to a file, working directly with `Waveform.t` structures. Use it to assert expected signal behaviors in testbenches and generate visual diagnostics for hardware verification.",
      "description_length": 356,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm.For_cyclesim",
      "library": "hardcaml_waveterm",
      "description": "For_cyclesim provides functions to generate and manage waveforms specifically for cycle-accurate simulations. It works with `Waveform.t` structures to capture, update, and render signal behavior over simulation cycles. Use it to visualize digital circuit states during test execution, directly integrating with simulation data for terminal-based debugging and verification.",
      "description_length": 373,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm.Expert",
      "library": "hardcaml_waveterm",
      "description": "This module specializes in advanced terminal-based waveform visualization for hardware simulations, providing functions to render and manipulate detailed signal displays. It operates on structured waveform data, including signal transitions, timing information, and display configurations. Use it to generate high-fidelity terminal waveforms for inspecting digital circuit behavior, performing visual regression checks, and debugging signal timing during simulation.",
      "description_length": 466,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm",
      "library": "hardcaml_waveterm",
      "description": "This module specializes in rendering and managing terminal-based waveforms for hardware simulations, offering precise visualization of signal transitions and timing. It works with structured waveform data like `Waveform.t` to capture and display digital signal behavior over simulation cycles. Use it to inspect circuit behavior, debug timing issues, and validate signal integrity directly within the terminal during simulation runs.",
      "description_length": 433,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements an event store for managing time-stamped bit data in a waveform viewer. It supports operations to insert, retrieve, and query events by time or index, with dynamic resizing to accommodate new entries. Use cases include storing and querying signal transitions for digital waveform visualization and simulation.",
      "description_length": 332,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Data",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module represents and manipulates bitvector data used for storing signal values in a waveform viewer. It provides operations to convert bitvectors to S-expressions, represent missing data with `none`, and merge two bitvectors. It is used to handle signal value changes over time in simulation waveform rendering.",
      "description_length": 317,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf.M",
      "library": "hardcaml_waveterm.event_store",
      "description": "Stores and manages timed events with associated data, enabling efficient insertion, retrieval, and iteration over events sorted by time. Uses `Time.t` for timestamps and `Data.t` for event payloads. Useful for simulation or logging systems where events must be processed or displayed in temporal order.",
      "description_length": 302,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store.Make",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements a time-indexed event store that maps integer indices to time and data values, supporting efficient insertion, lookup, and resizing. It works with arbitrary `Time` and `Data` types that support comparison and serialization. Use it to manage sequences of timed events, such as waveform data in simulation or logging systems.",
      "description_length": 345,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store.Time",
      "library": "hardcaml_waveterm.event_store",
      "description": "Represents and manipulates time values as integers for event storage in a waveform viewer. Provides comparison, serialization to S-expressions, and a zero time value. Used to track and sort discrete time points in simulation data.",
      "description_length": 230,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Bits_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "Stores and manages time-stamped bitvector signals for waveform visualization. It supports efficient insertion, retrieval, and querying of signal values at specific time points, with dynamic resizing to handle growing simulation data. Used to track digital signal transitions and render waveforms in simulation viewers.",
      "description_length": 318,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store_intf",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module defines interfaces for managing event data and time representations in a waveform visualization system. It includes abstractions for storing events, handling time values, and retrieving event ranges, specifically supporting efficient querying and display of signal changes over time. Concrete use cases include rendering waveforms in a digital simulation viewer and analyzing signal transitions within specified time intervals.",
      "description_length": 439,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store.Event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "Stores and manages event data for waveform visualization. It supports operations to add, retrieve, and clear events, and works with structured data types like timestamps and signal values. Used to capture and display signal changes over time in a waveform viewer.",
      "description_length": 263,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_event_store",
      "library": "hardcaml_waveterm.event_store",
      "description": "This module implements a waveform visualization system for digital simulation data. It provides time-indexed storage for bitvector signals and structured event data, supporting efficient insertion, retrieval, and range queries. Concrete use cases include rendering signal transitions in simulation viewers and analyzing time-stamped digital waveforms.",
      "description_length": 351,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Static.R",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "The module provides layout calculation functions to determine waveform element dimensions (e.g., waveforms, binary data, signals) and rendering operations to draw these elements with styling, borders, and UI components like cursors and status indicators. It also implements coordinate-based hit detection to identify selected waveform elements during user interaction, operating on waveform data structures (`Waves.t`, `Wave.t`, `Data.t`) and styled drawing contexts. This enables use cases such as interactive waveform visualization, simulation trace analysis, and dynamic layout management in hardware simulation environments.",
      "description_length": 628,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Bounds",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module computes and adjusts rectangular regions for rendering different waveform components within a simulation viewer. It provides operations to expand or shrink areas for borders and fit signal, value, wave, and status regions into a specified window. Concrete use cases include layout management when visualizing simulation traces, ensuring proper spacing and alignment of waveform data.",
      "description_length": 395,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Styles",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module defines and manipulates rendering styles for waveform visualization in a hardware simulation context. It provides functions to customize the appearance of signals, values, waves, and status elements using color schemes such as black-on-white or white-on-black, and supports applying color themes to existing style configurations. Use cases include configuring waveform display aesthetics for better visibility in simulation traces.",
      "description_length": 443,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Static",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides functions to render static waveform visualizations with configurable styling, layout, and visibility options for signals, values, and waveforms. It operates on waveform data structures (`Waves.t`) and produces styled 2D arrays representing rendered output. Use cases include generating visual representations of digital simulation traces for display in terminal-based UIs or static reports.",
      "description_length": 411,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waves.Config",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module defines configuration parameters for rendering waveforms in a cycle-accurate simulation trace. It includes mutable fields for display dimensions, scroll positions, and selection tracking, all operating on integer values. It is used to control the visual layout and interaction state of waveform data in a terminal-based simulation viewer.",
      "description_length": 350,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render.Make",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides waveform visualization and interactive selection capabilities for hardware simulation data, handling tasks like rendering clock cycles, binary signals, and status indicators. It operates on hierarchical waveform structures (`Waves.t`, `Data.t`) using a graphics context (`G.ctx`) to manage layout, styling, and coordinate-based element picking. Designed for simulation debugging, it enables users to visually analyze signal behavior and interactively query specific waveform components in a timeline view.",
      "description_length": 526,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waves",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module manages waveform data for cycle-accurate simulations, providing functions to create, manipulate, and render waveforms in a terminal-based viewer. It operates on arrays of `Wave.t` values, each representing a signal's state over time, and integrates configuration settings for display control. Concrete use cases include visualizing digital circuit behavior during simulation, tracking signal transitions, and debugging timing relationships between components.",
      "description_length": 471,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Render",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module renders waveform visualizations for hardware simulations, supporting operations like drawing clock cycles, signal transitions, and status indicators. It works with waveform data structures (`Waves.t`, `Data.t`) and rendering contexts (`G.ctx`) to produce graphical output with customizable styling and layout. Concrete use cases include visualizing digital circuit behavior during simulation runs and enabling interactive inspection of signal states over time.",
      "description_length": 472,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Expert",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module provides low-level control over waveform tracing in a Hardcaml cycle simulator. It allows direct manipulation of waveform data structures and integration of custom tracing logic during simulation. Use it to implement specialized waveform capture, filtering, or analysis during simulation runs.",
      "description_length": 305,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Waveform",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module manages waveform data for simulation traces, providing operations to create, combine, and manipulate waveforms using port and signal data. It works with arrays of `Wave.t` and `Port.t` types to represent signal traces and their display properties. Use cases include generating simulation output buffers, printing waveforms to files or consoles, and merging multiple waveforms for hierarchical design visualization.",
      "description_length": 426,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim.Wave",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module represents individual waveform signals with operations to access and modify signal names, data, formatting, and alignment. It supports data types such as strings, binary data, and structured formatting options, enabling precise control over waveform visualization. Concrete use cases include tracing clock signals, displaying binary data, and customizing waveform appearance in a simulation trace.",
      "description_length": 409,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hardcaml_waveterm_cyclesim",
      "library": "hardcaml_waveterm.cyclesim",
      "description": "This module connects waveform tracing capabilities to a Hardcaml cycle simulator, enabling visualization of digital circuit behavior through terminal-based waveforms. It provides structured representations of signals and their transitions over time, supporting precise inspection of clock cycles, signal states, and timing relationships. Use it to trace and render digital signal activity directly during simulation runs, aiding in debugging and verification of hardware designs.",
      "description_length": 479,
      "index": 99,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 100,
    "meaningful_modules": 100,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 628,
    "min_description_length": 209,
    "avg_description_length": 411.17,
    "embedding_file_size_mb": 1.4494123458862305
  }
}