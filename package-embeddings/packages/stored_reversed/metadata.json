{
  "package": "stored_reversed",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:07.456208",
  "modules": [
    {
      "module_path": "Stored_reversed.Stable.V1",
      "library": "stored_reversed",
      "description": "This module implements a data structure that stores elements in reversed order, providing functions for binary serialization, deserialization, comparison, S-expression conversion, and mapping over the contained values. It supports operations like `map`, `compare`, and bidirectional conversions to and from binary and S-expression formats. Concrete use cases include efficiently storing and transmitting reversed sequences while preserving type stability across different representations.",
      "description_length": 488,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stored_reversed.Stable",
      "library": "stored_reversed",
      "description": "This module provides a reversed-order data structure with support for type-stable binary and S-expression serialization, deserialization, and value mapping. It includes operations to transform elements with `map`, compare instances with `compare`, and convert bidirectionally between in-memory and serialized forms. You can use it to efficiently handle reversed sequences in network protocols, persistent storage, or data transformation pipelines where consistent representation across formats is critical. For example, it can serialize a reversed list of integers to disk or transmit a mapped sequence over a wire in a canonical binary form.",
      "description_length": 642,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stored_reversed",
      "library": "stored_reversed",
      "description": "This module provides an immutable list structure optimized for efficient appending with constant-time snoc operations, supporting conversions to and from regular lists while preserving or reversing order. It includes core operations like comparison, equality checks, mapping with list conversion, and appending with mapping, all working on list values stored in a reversed representation. The child module extends this with type-stable binary and S-expression serialization, enabling efficient handling of reversed sequences in network protocols, persistent storage, and data transformation pipelines. You can build lists incrementally, map and compare them, then serialize the results to disk or transmit them in a canonical binary form.",
      "description_length": 738,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 738,
    "min_description_length": 488,
    "avg_description_length": 622.6666666666666,
    "embedding_file_size_mb": 0.011315345764160156
  }
}