{
  "package": "statocaml_community",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:11.908706",
  "modules": [
    {
      "module_path": "Statocaml_community.Louvain.Make.G",
      "library": "statocaml_community",
      "description": "Implements the Louvain algorithm for community detection in GraphML format graphs. It processes weighted, undirected graphs with node profiles and outputs community assignments. Designed for analyzing social networks or clustered data where nodes have associated numerical profiles and edge weights represent relationship strengths.",
      "description_length": 332,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_community.Louvain.Make",
      "library": "statocaml_community",
      "description": "This module implements the Louvain algorithm for community detection in graphs using a Python backend, optimizing modularity over weighted edges and node profiles. It works with immutable maps and sets to represent graph structures, supporting dynamic edge weighting through profile functions. The child module extends this functionality to process GraphML files, enabling analysis of social networks or clustered data where nodes have numerical profiles and edges represent relationship strengths. Together, they allow loading, processing, and analyzing complex graphs with community detection as the primary output.",
      "description_length": 617,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Statocaml_community.Gml.Make",
      "library": "statocaml_community",
      "description": "Generates GraphML files representing temporal network data from dated profiles. Uses a profile module `P` to extract timestamps and node attributes, mapping them into a graph structure where nodes and edges reflect temporal interactions. Useful for visualizing dynamic social networks or time-based data flows.",
      "description_length": 310,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_community.Louvain",
      "library": "statocaml_community",
      "description": "This module applies the Louvain algorithm for community detection in graphs, using a Python interface to optimize modularity over weighted edges and node profiles. It operates on graph data structures like adjacency lists and edge lists, supporting dynamic edge weighting and immutable map/set representations for efficient clustering. The child module extends this capability by enabling GraphML file processing, allowing users to analyze structured datasets such as social networks with numerical node profiles and weighted relationships. Together, they facilitate loading, transforming, and partitioning complex graphs into meaningful communities based on connection strength.",
      "description_length": 679,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_community.Gml",
      "library": "statocaml_community",
      "description": "This module constructs GraphML documents as XML trees, enabling the representation of graph structures with nodes, edges, and attributes. It directly supports building static graph data and integrates temporal network modeling through a child module that maps timestamped profiles into dynamic graph elements. Main data types include XML trees, graph elements, and attributed nodes and edges, with operations to assemble and serialize them. Examples include exporting static graphs for visualization or encoding time-based interactions as animated GraphML for social network analysis.",
      "description_length": 584,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statocaml_community",
      "library": "statocaml_community",
      "description": "This module performs community detection in graphs using the Louvain algorithm, optimized for weighted edges and numerical node profiles, and supports dynamic graph analysis through timestamped data. It processes GraphML files for structured input and constructs XML-based graph representations for visualization and temporal modeling. Key data types include adjacency lists, edge lists, XML trees, and attributed graph elements, with operations for clustering, transformation, and serialization. Users can load social network data, detect communities based on connection strength, and export dynamic graphs with time-encoded interactions.",
      "description_length": 639,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 679,
    "min_description_length": 310,
    "avg_description_length": 526.8333333333334,
    "embedding_file_size_mb": 0.02223491668701172
  }
}