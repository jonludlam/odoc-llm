{
  "package": "nomad",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:19.211709",
  "modules": [
    {
      "module_path": "Nomad.Config",
      "description": "Provides configuration parameters for HTTP request handling, including limits on line length, header count, header size, and receive timeout. Works with integer and integer64 values to define these constraints. Used to enforce resource limits and prevent excessive request processing in networked applications.",
      "description_length": 310,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nomad.Handler",
      "description": "Handles HTTP request routing by defining a function that takes a connection and request, then produces a response. Operates on connection and request objects specific to the Atacama framework. Used to implement endpoint logic for web services, such as processing form data or generating JSON responses.",
      "description_length": 302,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "nomad",
      "description": "Handles HTTP/1.x, HTTP/2, and WebSocket protocols with request parsing, response generation, and connection management. Processes raw byte streams and structured data types like headers, status codes, and message bodies. Used to build scalable, protocol-compliant web applications and real-time communication services.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nomad",
      "description": "Configures HTTP request handling with constraints on line length, header count, header size, and receive timeout, using integer and integer64 types to enforce resource limits. Routes HTTP requests by mapping connections and requests to responses through framework-specific objects, enabling endpoint logic like form processing and JSON generation. Operations include setting limit thresholds and defining routing functions. Examples include preventing memory exhaustion via header size caps and returning dynamic content based on request parameters.",
      "description_length": 549,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 549,
    "min_description_length": 302,
    "avg_description_length": 369.75,
    "embedding_file_size_mb": 0.014943122863769531
  }
}