{
  "package": "fiber-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:45.718167",
  "modules": [
    {
      "module_path": "Fiber_lwt.Fiber_inside_lwt",
      "library": "fiber-lwt",
      "description": "This module bridges fibers and Lwt by converting fiber computations into Lwt threads and handling asynchronous callbacks. It enables running fiber-based logic within Lwt-based systems, specifically by transforming `Fiber.t` values into `Lwt.t` promises and capturing Lwt callbacks as fiber-aware result promises. Use it to integrate fiber-driven logic into Lwt-driven event loops or to interleave fiber and Lwt asynchronous workflows seamlessly.",
      "description_length": 445,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fiber_lwt",
      "library": "fiber-lwt",
      "description": "This module integrates fibers with Lwt by translating fiber computations into Lwt threads and managing asynchronous callbacks. It introduces data types like `Fiber.t` and `Lwt.t` to enable seamless conversion and interleaving of fiber and Lwt workflows. Operations include converting fiber promises to Lwt promises and handling Lwt callbacks within fiber contexts. For example, it allows running fiber-based logic inside Lwt event loops or coordinating asynchronous tasks across both systems.",
      "description_length": 492,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 492,
    "min_description_length": 445,
    "avg_description_length": 468.5,
    "embedding_file_size_mb": 0.00769805908203125
  }
}