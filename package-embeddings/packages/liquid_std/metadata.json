{
  "package": "liquid_std",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:57.158752",
  "modules": [
    {
      "module_path": "Liquid_std.Encoder",
      "library": "liquid_std",
      "description": "This module handles encoding and decoding of URLs and text using predefined replacement rules. It supports operations like `encode_url`, `decode_url`, `encode_text`, and `decode_text`, which transform strings based on mappings provided in `url_reps` and `text_reps`. It is used to safely prepare strings for URL transmission or reverse such encodings, including handling special characters and reserved symbols.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std.Std",
      "library": "liquid_std",
      "description": "This module implements custom Liquid template filters including date formatting, default value handling, and JSON serialization. It operates on Liquid syntax values and contexts, processing lists of values to produce results or errors. These functions are used to extend Liquid template capabilities for dynamic content generation in applications like web templating or configuration rendering.",
      "description_length": 394,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std.Liquid_number",
      "library": "liquid_std",
      "description": "This module implements arithmetic operations, numeric comparisons, and formatting functions for Liquid template values. It operates on numeric types within Liquid syntax trees, handling integers, floats, and monetary values. These functions are used to evaluate expressions like `plus`, `modulo`, or `money_with_currency` directly within Liquid templates, enabling dynamic calculations and formatted output in template rendering.",
      "description_length": 429,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std.Liquid_list",
      "library": "liquid_std",
      "description": "This module implements list manipulation operations for Liquid template values, including filtering, mapping, sorting, and element extraction. It works directly with lists of Liquid syntax values and provides functions like `map`, `filter`, `join`, and `slice` that operate within a Liquid context. These functions are used to process and transform lists in Liquid templates, such as rendering comma-separated strings, extracting subsets of data, or applying transformations to each element.",
      "description_length": 491,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std.Helpers",
      "library": "liquid_std",
      "description": "This module provides utilities for type conversion, result handling, and string/numeric formatting, operating on primitive types like `float`, `int`, and `string`, as well as custom types such as `whitespace_remover`, `weight_units`, and `Syntax.value`. It supports use cases like formatting monetary values with currency symbols or codes, trimming whitespace, and transforming lists of values, with a focus on error propagation and precision in numeric representations. Key patterns include safe value extraction, thousands-separator formatting, and currency-aware string generation using contextual settings.",
      "description_length": 610,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std.Liquid_string",
      "library": "liquid_std",
      "description": "This module offers string transformation, encoding, and sanitization operations for Liquid syntax values, including case manipulation, Base64/URL encoding, cryptographic hashing (SHA1/SHA256), and whitespace trimming. It works with Liquid's syntax tree nodes, applying dynamic string modifications through a consistent functional interface. Typical use cases involve HTML escaping, slug generation, pluralization in templates, and secure data encoding for web applications.",
      "description_length": 473,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_std",
      "library": "liquid_std",
      "description": "This module suite provides comprehensive utilities for string manipulation, data encoding, and value transformation within Liquid templates. It supports operations such as URL/text encoding, custom filters for date and JSON handling, arithmetic and list manipulations, type conversion, and cryptographic functions. Users can perform tasks like safely encoding special characters in URLs, formatting monetary values with currency symbols, applying arithmetic operations within templates, or generating Base64-encoded strings for secure data transmission.",
      "description_length": 553,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 394,
    "avg_description_length": 480.14285714285717,
    "embedding_file_size_mb": 0.02583789825439453
  }
}