{
  "package": "asetmap",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:19.520137",
  "modules": [
    {
      "module_path": "Asetmap.Set.Make",
      "library": "asetmap",
      "description": "This module supports efficient manipulation of ordered sets using balanced binary trees, enabling operations like union, intersection, difference, and ordered traversal. It works with totally ordered elements through a comparator interface, maintaining sorted structure during transformations like `map`, `filter`, and aggregation via `fold`. Typical use cases include maintaining sorted collections, performing set algebra with guaranteed ordering, and converting between sets and sequences or lists for downstream processing.",
      "description_length": 527,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asetmap.Map.S_with_key_set",
      "library": "asetmap",
      "description": "This module provides ordered map operations for manipulating key-value associations with total ordering, supporting binding updates, ordered traversal, and set-like queries over the key domain. It works with maps having fixed, totally ordered keys, enabling transformations, aggregations, and precise control over key ranges through functions like `fold`, `filter`, and `to_seq`. Typical use cases include maintaining sorted associative collections, performing efficient key-range queries, and converting between ordered map representations and sequences or sets.",
      "description_length": 563,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asetmap.Map.S",
      "library": "asetmap",
      "description": "This module provides a suite of immutable operations for managing key-value associations with totally ordered keys, including insertion, deletion, transformation, and ordered traversal. It works with maps represented as `'a t` values, where keys maintain a total order, enabling efficient range queries, ordered iteration, and deterministic merging. Typical use cases include maintaining sorted dictionaries, performing order-dependent aggregations (e.g., folding over keys in ascending order), and safely transforming maps through filtering or partitioning while preserving key ordering.",
      "description_length": 588,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asetmap.Map.Make_with_key_set",
      "library": "asetmap",
      "description": "This module implements a polymorphic map with ordered keys and set-based key operations, supporting efficient insertion, deletion, merging, and ordered traversal while maintaining key order. It works with totally ordered key types and key sets, enabling use cases like maintaining sorted key-value associations, merging maps with custom combination logic, and extracting ordered subsets or domain sets. Key features include extremal key queries, filtered partitions, and conversions to sequences or lists, all preserving structural invariants.",
      "description_length": 543,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asetmap.Map",
      "library": "asetmap",
      "description": "This module implements finite maps with ordered keys, supporting insertion, lookup, and ordered traversal, while enabling efficient aggregation and transformation over key-value pairs. It provides core operations for managing immutable dictionaries with total ordering, allowing tasks like tracking application state, merging sorted data, and performing range queries. Child modules enhance these capabilities with advanced transformations, set-like operations, and precise control over key domains, enabling operations such as ordered folding, filtering, and deterministic merging. Together, they support use cases like maintaining sorted configurations, aggregating values by unique identifiers, and converting between maps, sequences, and sets.",
      "description_length": 747,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asetmap.Set",
      "library": "asetmap",
      "description": "This module implements immutable sets with efficient membership testing, insertion, and union operations over ordered elements, using a comparator for ordering. It supports core operations like `add`, `remove`, `mem`, and `union`, while its child module provides ordered set manipulation using balanced binary trees, enabling union, intersection, and ordered traversal. You can use it to maintain a unique collection of elements, such as tracking visited nodes in a graph or managing a sorted list of keys, with transformations like `map` and `filter` preserving order and structure.",
      "description_length": 583,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asetmap",
      "library": "asetmap",
      "description": "This module provides finite maps and immutable sets over ordered elements, supporting efficient lookups, insertions, ordered traversal, and set-like operations. Key operations include `add`, `remove`, `mem`, `union`, and ordered folding, filtering, and merging, with deterministic behavior over key-value pairs and unique elements. It enables use cases like tracking application state, managing sorted configurations, aggregating values by identifier, and maintaining unique collections such as visited graph nodes. The combined functionality supports transformations between maps, sets, and sequences while preserving order and structure.",
      "description_length": 639,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 7,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7777777777777778
  },
  "statistics": {
    "max_description_length": 747,
    "min_description_length": 527,
    "avg_description_length": 598.5714285714286,
    "embedding_file_size_mb": 0.025862693786621094
  }
}