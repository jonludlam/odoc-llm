{
  "package": "ppx_stable_witness",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:04:04.795294",
  "modules": [
    {
      "module_path": "Stable_witness.Of_serializable1",
      "library": "ppx_stable_witness.stable_witness",
      "description": "This module converts a stable witness for a type `'a Stable_format.t` into a stable witness for a type `'a M.t`, using serialization and deserialization functions between these types. It handles types with one type parameter, enabling stable versioning across changes in the underlying type definition. A concrete use case is evolving data types in a distributed system while maintaining compatibility with older serialized representations.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stable_witness.Export",
      "library": "ppx_stable_witness.stable_witness",
      "description": "This module provides stable witnesses for serializing and versioning primitive and container types like `int`, `string`, `array`, `list`, and `option`. Each function constructs a stable witness for a specific type, enabling correct binary or sexp serialization. It is used to ensure type stability across different versions of data representations in persistent or distributed systems.",
      "description_length": 385,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stable_witness.Of_serializable3",
      "library": "ppx_stable_witness.stable_witness",
      "description": "This module defines a function `of_serializable` that constructs a stable witness for a type with three parameters by combining witnesses for each parameter and a serialization format. It works with types `'a1`, `'a2`, and `'a3` that have stable representations and a module `M` defining operations on those types. A concrete use case is creating version-stable serializers for complex data structures like triplets or product types.",
      "description_length": 433,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stable_witness.Of_serializable2",
      "library": "ppx_stable_witness.stable_witness",
      "description": "This module constructs stable witnesses for types with two parameters by converting between a serializable format and a target type. It combines witness generation with bidirectional transformations between the serializable and target representations. Useful for implementing version-stable data structures that require both serialization and deserialization logic.",
      "description_length": 365,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stable_witness",
      "library": "ppx_stable_witness.stable_witness",
      "description": "This module constructs stable witnesses for serializing and versioning specific types like `int`, `string`, `array`, `list`, and `option`, ensuring consistent binary or sexp serialization across system versions. It provides functions to derive witnesses through serialization mappings and includes escape hatches for exceptional cases. Use it when defining stable data representations in persistent or distributed applications requiring precise type versioning.",
      "description_length": 461,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 461,
    "min_description_length": 365,
    "avg_description_length": 416.8,
    "embedding_file_size_mb": 0.07292652130126953
  }
}