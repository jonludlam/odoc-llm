{
  "package": "ppx_stable_witness",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:17.979269",
  "modules": [
    {
      "module_path": "Stable_witness.Export",
      "description": "Provides stable witnesses for primitive and composite types, enabling serialization and deserialization with ppx_stable_witness. Works with arrays, lists, options, references, and basic types like integers, floats, and strings. Used to generate consistent binary representations for data structures in persistent storage or network communication.",
      "description_length": 346,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stable_witness.Of_serializable1",
      "description": "Provides functions to serialize and deserialize values with a custom type representation, including conversion to and from a variant type with a single constructor. Works with polymorphic variants and type-safe wrappers for data that needs to be encoded or decoded. Used to implement persistent storage formats and inter-process communication protocols.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stable_witness.Of_serializable2",
      "description": "Provides functions to serialize and deserialize values between OCaml and external formats, working with polymorphic variants and tuples. Supports conversions for nested structures and custom type representations. Used to encode complex data models for storage or transmission in binary or text-based protocols.",
      "description_length": 310,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stable_witness.Of_serializable3",
      "description": "Provides serialization and deserialization functions for polymorphic variants with three type parameters. Works with the `(_, _, _) t` type to encode and decode values into and from a structured format. Used to persist and reconstruct complex data models in distributed systems or configuration files.",
      "description_length": 301,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_stable_witness",
      "description": "Provides functions to generate and manipulate stable type witnesses, enabling type-level equality checks and constraints. Works with type representations and polymorphic variants to enforce compile-time type consistency. Used to implement type-safe serialization and deserialization logic in code generation workflows.",
      "description_length": 318,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stable_witness",
      "description": "Provides functions to create, compare, and serialize type-level witnesses, working with polymorphic variants and type representations. It supports operations to check equality of type tags and generate unique identifiers for types. Used to enforce type safety in meta-programming scenarios and during runtime type inspections.",
      "description_length": 326,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 6,
    "filtered_empty_modules": 3,
    "retention_rate": 0.6666666666666666
  },
  "statistics": {
    "max_description_length": 353,
    "min_description_length": 301,
    "avg_description_length": 325.6666666666667,
    "embedding_file_size_mb": 0.022243499755859375
  }
}