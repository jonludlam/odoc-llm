{
  "package": "ocaml-http",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:20.115337",
  "modules": [
    {
      "module_path": "Http_daemon.Trivial",
      "description": "Handles HTTP request processing by invoking a custom callback function with the request and output channel. Executes a daemon server based on provided specifications, managing incoming connections and response handling. Designed for lightweight web server implementations with direct control over request routing and response generation.",
      "description_length": 337,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ocaml-http",
      "description": "Provides HTTP request parsing and response generation with support for headers, status codes, and body handling. Operates on strings, byte sequences, and custom record types representing requests and responses. Used to build HTTP servers that process incoming client requests and construct appropriate server responses.",
      "description_length": 319,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http_common",
      "description": "Provides functions to convert HTTP versions, methods, and status codes between string and typed representations, along with predicates to classify status code ranges. Works with types from Http_types, including version, meth, request, and status. Used to parse and validate HTTP protocol elements during request handling and response generation.",
      "description_length": 345,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http_user_agent",
      "description": "Provides functions to fetch HTTP content and headers, including a callback for processing response headers during a GET request and an iterator-based GET method for streaming data. Operates with strings, bytes, and HTTP status codes. Used to retrieve web content incrementally or fetch metadata from URLs.",
      "description_length": 305,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 4,
    "filtered_empty_modules": 5,
    "retention_rate": 0.4444444444444444
  },
  "statistics": {
    "max_description_length": 345,
    "min_description_length": 305,
    "avg_description_length": 326.5,
    "embedding_file_size_mb": 0.014920234680175781
  }
}