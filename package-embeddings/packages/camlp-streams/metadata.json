{
  "package": "camlp-streams",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:43:51.129219",
  "modules": [
    {
      "module_path": "Genlex",
      "library": "camlp-streams",
      "description": "This module provides a function `make_lexer` that generates a lexical analyzer converting character streams into token streams. It works with character streams and produces tokens such as `Kwd`, `Ident`, `Int`, `Float`, `String`, and `Char`. It is used to build custom lexers for parsing domain-specific languages or implementing interpreters, such as a lexer for a calculator language that recognizes numbers and operators.",
      "description_length": 424,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stream",
      "library": "camlp-streams",
      "description": "This module provides functions to create streams from various sources like lists, strings, and input channels, and supports element-wise processing through iteration and parsing operations. It works with stream data structures that yield elements on demand, allowing inspection, consumption, and counting of elements as they are accessed. Concrete use cases include parsing input character by character, processing sequences of values lazily, and implementing custom stream-based data readers.",
      "description_length": 493,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 493,
    "min_description_length": 424,
    "avg_description_length": 458.5,
    "embedding_file_size_mb": 0.029401779174804688
  }
}