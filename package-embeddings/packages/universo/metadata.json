{
  "package": "universo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 34,
  "creation_timestamp": "2025-07-15T23:13:24.666348",
  "modules": [
    {
      "module_path": "Solving.Z3cfg.Make",
      "library": "universo.solving",
      "description": "This module provides functions to add constraints and solve for the minimum number of universes required using a Z3-based solver. It operates on constraint types defined by the `Common.Universes.cstr` module and interacts with environment and model structures from `Solving.Utils`. Concrete use cases include resolving universe level constraints in type checking and managing theory construction based on varying universe counts.",
      "description_length": 429,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3cfg.Arith",
      "library": "universo.solving",
      "description": "Implements arithmetic expressions and constraints over universes using Z3. Provides functions to create variables, axioms, cumulativity, and rules as Z3 expressions, along with extracting solutions from models. Designed for encoding universe hierarchies and constraints in SMT, directly mapping Dedukti names to Z3 variables and interpreting SMT results back into universe levels.",
      "description_length": 380,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3arith.Make",
      "library": "universo.solving",
      "description": "This module implements arithmetic constraint generation and manipulation for a solver context, providing operations to construct integer expressions, variables, and logical rules. It works with Z3 expressions, models, and contexts to encode constraints like bounds, maxima, and cumulative conditions. Concrete use cases include building arithmetic theories for program analysis or formal verification tasks.",
      "description_length": 407,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Solving.Z3cfg.Syn",
      "library": "universo.solving",
      "description": "This module implements a specific logic for encoding and manipulating universe constraints using Z3 expressions. It provides functions to create variables, axioms, rules, and bounds as SMT expressions, along with extracting universe solutions from SMT models. It is used to translate Dedukti names into SMT strings and manage universe-level reasoning within an SMT-solving context.",
      "description_length": 381,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3cfg.Z3LOGIC",
      "library": "universo.solving",
      "description": "This module implements a first-order logic representation for SMT solving, providing functions to construct variables, axioms, rules, and universe-related constraints. It operates on SMT expressions, models, and contexts, mapping Dedukti names and universes to SMT terms. It is used to encode and solve universe-level constraints from a proof assistant's type system using Z3.",
      "description_length": 376,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Solver.Make",
      "library": "universo.solving",
      "description": "Implements parsing of constraint files, solving constraints within a given environment to find the minimum number of universes required, and printing the resulting model to solution files. Works with environments, models, and configuration data structures tied to constraint solving. Used to process input files, compute valid universe assignments, and output solutions in a structured format.",
      "description_length": 393,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Solver.MakeUF",
      "library": "universo.solving",
      "description": "This module parses constraint files, solves them under given environment bounds, and prints resulting models to solution files. It operates on constraint data read from file paths and produces models mapped through configuration rules. Used to process and resolve universe constraints with minimum and maximum limits.",
      "description_length": 317,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Utils.SOLVER",
      "library": "universo.solving",
      "description": "Handles parsing constraint files, solving logical models, and printing results. Works with configuration data, environment settings, and model structures derived from constraint-solving problems. Used to process input files, compute minimal universe solutions, and output resolved models to solution files.",
      "description_length": 306,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Utils.SMTSOLVER",
      "library": "universo.solving",
      "description": "This module provides functions to interact with an SMT solver, specifically allowing the addition of constraints and solving for a minimal number of universes. It operates on constraint and environment data types, producing a model that satisfies the constraints. Concrete use cases include solving universe-level constraints in type-checking scenarios where the number of required universes is not known in advance.",
      "description_length": 416,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Solving.Utils.LOGIC",
      "library": "universo.solving",
      "description": "This module implements an SMT-based logic for encoding and solving universe constraints. It provides operations to construct expressions representing variables, universes, axioms, cumulativity, and rules, all of which are used to model and solve universe-level dependencies. It works with SMT expressions (`t`), SMT models (`smt_model`), and a context (`ctx`) to track variable and universe bindings during constraint generation.",
      "description_length": 429,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Utils",
      "library": "universo.solving",
      "description": "This module orchestrates the configuration and solving of logical constraints in SMT-based formal verification tasks, integrating core structures for environment settings, model definitions, and theory-specific parameters for Qfuf and Lra. It enables operations such as setting up solver configurations, encoding universe constraints with cumulativity and axioms, and managing symbolic mappings to universe instances. The child modules extend this by parsing constraint files, interacting with SMT solvers to compute minimal universe solutions, and encoding constraint logic into SMT expressions and contexts. Together, they support end-to-end workflows from constraint modeling to solution output in type-checking and verification scenarios.",
      "description_length": 742,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3syn",
      "library": "universo.solving",
      "description": "This module directly constructs and manipulates Z3 expressions and models for solving logical constraints over universes and variables. It provides functions to build variables, sorts, axioms, and rules within a Z3 context, along with utilities to extract solutions from models. Concrete use cases include encoding universe polymorphism constraints and querying model assignments for bounded variables.",
      "description_length": 402,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3cfg",
      "library": "universo.solving",
      "description": "This module encodes universe-level constraints from a proof assistant's type system into SMT expressions using Z3, enabling automated resolution of universe hierarchies and dependencies. It defines operations to create and manipulate variables, axioms, rules, and bounds as Z3 terms, and maps Dedukti names to SMT variables for solving. The module supports cumulativity, constraint solving, and model extraction, allowing concrete tasks like determining minimal universe counts during type checking or reconstructing universe levels from SMT solutions.",
      "description_length": 552,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Solving.Solver",
      "library": "universo.solving",
      "description": "This module processes constraint files by parsing input data, resolving universe constraints under specified bounds, and generating minimal universe assignments. It operates on environments, models, and configurations to compute valid solutions and output them in structured format. For example, given a constraint file defining variable relationships and bounds, it can compute the minimal number of universes required and write the resulting model to a solution file.",
      "description_length": 469,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving.Z3arith",
      "library": "universo.solving",
      "description": "This module provides arithmetic constraint generation and manipulation for a solver context, enabling the construction of integer expressions, variables, and logical rules. It supports operations to encode constraints such as bounds, maxima, and cumulative conditions using Z3 expressions, models, and contexts. Users can build arithmetic theories for program analysis or formal verification, for example by creating and solving constraints over integer variables. Specific examples include modeling loop invariants or verifying properties of arithmetic expressions.",
      "description_length": 566,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solving",
      "library": "universo.solving",
      "description": "This module coordinates the setup and execution of SMT-based constraint solving for formal verification tasks, integrating environment configurations, universe modeling, and theory-specific encodings for Qfuf and Lra. It supports the creation and manipulation of logical expressions, variables, and axioms within a Z3 context, enabling operations such as encoding universe polymorphism, resolving cumulativity constraints, and extracting minimal universe solutions. The system processes constraint files to compute bounded variable assignments, solve arithmetic conditions, and output structured models, for example determining minimal universe counts during type checking or solving integer constraints for program analysis.",
      "description_length": 725,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common.Logic.QFUF_SPECIFICATION",
      "library": "universo.common",
      "description": "Enumerates universe instances and constructs logical theories parameterized by integer inputs. Operates on universe lists and theory structures, enabling concrete model generation and specification-based reasoning. Useful for testing logic solvers with generated models or validating theory consistency against enumerated domains.",
      "description_length": 330,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Logic.LRA_REIFICATION",
      "library": "universo.common",
      "description": "This module defines logical specifications for axioms, rules, and cumulative constraints using symbolic terms. It works with lists of strings paired with terms from the `T` module, representing logical conditions and variable bindings. Concrete use cases include encoding formal logic rules for theorem proving or constraint solving.",
      "description_length": 333,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Oracle.Util",
      "library": "universo.common",
      "description": "Implements Cartesian product operations for 2-tuple and 3-tuple combinations. Applies a function to all possible pairings of elements from two or three input lists. Useful for generating combinations of configuration options, test inputs, or multi-dimensional parameter spaces.",
      "description_length": 277,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common.Logic.LRA_SPECIFICATION",
      "library": "universo.common",
      "description": "This module defines functions for constructing logical axioms, rules, and cumulative expressions using a custom logic kernel. It operates on types `'c` and `'b`, typically representing contexts and logical terms, respectively. These functions are used to build formal proofs and logical derivations in domain-specific theorem proving applications.",
      "description_length": 347,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common.Logic.MakeLraSpecif",
      "library": "universo.common",
      "description": "This module defines functions for constructing logical axioms, rules, and cumulative constraints using a given logic kernel. It operates on polymorphic logic terms represented by the `'b` type, indexed by a context `'c`. Concrete use cases include building logical specifications for formal verification tasks, such as encoding inference rules or cumulative reasoning steps in a theorem prover.",
      "description_length": 394,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Universes",
      "library": "universo.common",
      "description": "This module manages universe hierarchies and constraints in type theories with subtyping and cumulativity. It defines core data types like `univ`, `cstr`, and `pred`, and provides operations to construct constraints, convert universes to terms, and inspect term structure for universe-related properties. With support for checking subtyping, cumulativity, and normalization, it enables formalizing and verifying type systems where universe coherence is essential. Submodules extend this foundation with specialized operations for constraint solving, term analysis, and universe-level reasoning.",
      "description_length": 594,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Files",
      "library": "universo.common",
      "description": "This component provides file path manipulation, output configuration, and metadata management for processing pipelines. It operates on input/output channels, formatters, and module identifiers, enabling tasks like assigning step-specific suffixes (e.g., for elaboration or solution phases), creating directories, and tracking module dependencies through file exports and requires. The design supports compilation workflows requiring structured file organization and resource cleanup.",
      "description_length": 483,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Logic",
      "library": "universo.common",
      "description": "This module provides a framework for defining and manipulating logical theories, combining boolean logic, predicate structures, and universe-level terms to encode and solve logical constraints. It supports operations for building axioms, rules, and cumulative constraints using symbolic terms and logic kernels, enabling formal verification and theorem proving tasks. The child modules enhance this functionality by allowing model generation over enumerated universes, symbolic specification of logical conditions, and context-indexed construction of logical expressions. Specific applications include encoding inference rules for SMT solvers, validating theory consistency, and performing specification-based reasoning with generated models.",
      "description_length": 742,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Log",
      "library": "universo.common",
      "description": "This module provides colored output formatting through functions like `red`, `gre`, and `blu`, which transform format strings for terminal display. It supports conditional logging with `log`, `log_check`, and specialized logging functions for components like solvers or universes, using format specifiers. Use cases include debugging with color-coded messages and selectively enabling log output through flag manipulation.",
      "description_length": 422,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Common.Constraints",
      "library": "universo.common",
      "description": "This module manages constraint generation and printing for type variables and universes, handling operations like equality, cumulativity, and rule-based constraints. It works with data types including constraint records, universe expressions, and variable pairs, supporting tasks like constraint collection and dependency tracking. Concrete use cases include building and printing universe constraints during type checking and managing variable equalities in a solver context.",
      "description_length": 476,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common.Oracle",
      "library": "universo.common",
      "description": "This module orchestrates the construction and validation of logical theories across hierarchical universes, using axioms, cumulative constraints, and typing rules. It evaluates validity through predicates and universe values, enabling tasks like verifying type system properties in compilers or proof assistants. Its Cartesian product submodule systematically combines configuration options or test inputs across two or three dimensions, applying functions to all element pairings for comprehensive exploration of parameter spaces. Together, these capabilities support precise logical validation and combinatorial generation in complex type systems.",
      "description_length": 649,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Common",
      "library": "universo.common",
      "description": "This collection manages universe hierarchies, logical theories, and constraint systems for formal type theory and verification tasks. It centers on data types like `univ`, `cstr`, and symbolic terms, offering operations for subtyping checks, constraint solving, and logical axiom construction, with support for colored logging and file metadata management. You can use it to encode inference rules for SMT solvers, validate type system properties, generate models over enumerated universes, and manage compilation workflows with structured file output. Specific capabilities include building and normalizing universe constraints, performing specification-based reasoning, and exploring combinatorial parameter spaces for testing and configuration.",
      "description_length": 747,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Elaboration.Var",
      "library": "universo.elaboration",
      "description": "This module generates and manages fresh universe variables used during type elaboration. It provides operations to check if a term is a universe variable, extract its name, and create new variables with unique identifiers. These variables are used to represent unresolved type universes in the elaboration process, ensuring correct type inference and constraint generation.",
      "description_length": 373,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Elaboration.Elaborate",
      "library": "universo.elaboration",
      "description": "This module processes terms, rules, and entries by replacing concrete universe declarations with fresh variables based on a given environment. It operates on data structures like `T.term`, `'a R.rule`, and `E.entry`, using a configuration that includes a file for universe output and meta rules for translation. It is used during elaboration to manage universe variables in definitions, rules, and entries, ensuring correct handling of universe polymorphism in the codebase.",
      "description_length": 474,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Elaboration",
      "library": "universo.elaboration",
      "description": "This module handles the generation and management of fresh universe variables during type elaboration, replacing concrete universe declarations in terms with these variables to support universe polymorphism. It provides data types for terms, rules, and entries, along with operations to substitute universe annotations and track unresolved type universes. Specific examples include translating a term with universe variables based on an environment, checking whether a term is a universe variable, and generating fresh variables with unique names for new unresolved universes.",
      "description_length": 576,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Checking.Checker.Typing",
      "library": "universo.checking",
      "description": "This module implements type inference and type checking for terms in a given signature. It provides functions to infer a type from a term and context, check that a term matches an expected type, and validate partially typed rules by producing fully typed counterparts. These operations are used to ensure correctness of term manipulations in formal systems, such as theorem proving or type-theoretic foundations.",
      "description_length": 412,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Checking.Checker",
      "library": "universo.checking",
      "description": "This module manages type checking environments and enforces constraints during formal verification. It dynamically validates user-defined constraints on terms, replaces universe variables with sorts, and type-checks entries with customizable convertibility. The core functionality works with environments, constraint hash tables, and formal logic terms, while the child module adds type inference and rule validation for ensuring correctness in theorem proving and type-theoretic systems. Example uses include verifying term correctness under partial type information and generating fully typed versions of logical rules.",
      "description_length": 621,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Checking",
      "library": "universo.checking",
      "description": "This module provides type inference and rule validation for formal verification systems, ensuring correctness in theorem proving and type-theoretic workflows. It operates on environments, constraint hash tables, and logical terms, supporting dynamic constraint validation, universe variable replacement, and customizable type checking. Users can verify partially typed terms, infer missing type information, and generate fully typed logical rules for use in proof assistants or type-driven development tools.",
      "description_length": 508,
      "index": 33,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 36,
    "meaningful_modules": 34,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9444444444444444
  },
  "statistics": {
    "max_description_length": 747,
    "min_description_length": 277,
    "avg_description_length": 472.0,
    "embedding_file_size_mb": 0.12399482727050781
  }
}