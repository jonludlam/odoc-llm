{
  "package": "sexp_macro",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:38.586918",
  "modules": [
    {
      "module_path": "Sexp_macro.Macro_loader",
      "library": "sexp_macro",
      "description": "Loads and processes S-expressions from a file, converting each with a provided function and optionally allowing include directives. Works with S-expressions and file paths, handling asynchronous I/O operations. Useful for parsing configuration files that reference other files through include statements.",
      "description_length": 304,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_macro.Sexp_loader-Monad",
      "library": "sexp_macro",
      "description": "This module provides monadic operations for handling S-expressions, including value wrapping with `return`. It works with S-expressions and lists through the `List` submodule. Use it to build and manipulate structured data during macro expansion in a monadic context.",
      "description_length": 267,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_macro.Sexp_loader-Monad-Monad_infix",
      "library": "sexp_macro",
      "description": "This module defines a monadic bind operator `(>>=)` for composing asynchronous computations that produce values within a monadic context. It works with the `'a Monad.t` type, enabling sequential composition of actions where each step depends on the result of the previous. Concrete use cases include chaining I/O operations, handling optional values, or sequencing asynchronous tasks with dependencies.",
      "description_length": 402,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_macro.Loader",
      "library": "sexp_macro",
      "description": "This module loads and processes S-expressions from files, converting them into OCaml values using provided conversion functions. It supports single-value and list-based S-expression parsing, and tracks included files during loading. Use it to read configuration files or structured data encoded as S-expressions, with error handling for malformed inputs.",
      "description_length": 354,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_macro.Sexp_loader-Monad-List",
      "library": "sexp_macro",
      "description": "This module provides monadic versions of list iteration and transformation. It works with lists and monadic functions that return values wrapped in a monad. Use it to apply side-effecting or value-transforming monadic operations across list elements in sequence.",
      "description_length": 262,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sexp_macro.Sexp_loader",
      "library": "sexp_macro",
      "description": "This module defines a functor for loading S-expressions from files using customizable loading functions and a specified monad. It provides `load_sexps` and `load_annotated_sexps` to read standard or annotated S-expressions, returning them wrapped in a monadic type. It is useful for parsing configuration files or data files containing structured text in S-expression format.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sexp_macro.Blocking",
      "library": "sexp_macro",
      "description": "This module provides functions for loading and converting S-expressions from files with support for macro expansion during parsing. It works with Sexp.t values and string-based file paths, offering operations to load single or multiple S-expressions, apply conversion functions, and handle errors via Or_error or exceptions. Concrete use cases include reading and processing configuration files that use macros for abstraction or code generation.",
      "description_length": 446,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_macro",
      "library": "sexp_macro",
      "description": "This module processes S-expressions with macro expansion and file inclusion tracking, supporting both synchronous and asynchronous workflows. It provides core operations for expanding macros, loading S-expressions from files, and handling errors through direct functions and monadic interfaces. The `Load` submodule reads and converts S-expressions using custom functions, while `Monad` and `List` support monadic composition and list transformations. You can parse configuration files with macros, load and convert structured data with error handling, or sequence asynchronous I/O operations during file inclusion.",
      "description_length": 615,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 615,
    "min_description_length": 262,
    "avg_description_length": 378.125,
    "embedding_file_size_mb": 0.029479026794433594
  }
}