{
  "package": "dtc-pb",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 101,
  "creation_timestamp": "2025-08-15T16:22:19.841970",
  "modules": [
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Heartbeat",
      "library": "dtc-pb",
      "description": "This module defines a data structure for tracking heartbeat information in a messaging system. It includes fields for the number of dropped messages and the current date-time, both represented using specific numeric types. It is used to monitor connection health and message integrity in real-time communication protocols.",
      "description_length": 322,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_request",
      "library": "dtc-pb",
      "description": "Handles requests for account balance information in a trading protocol. Works with account identifiers and request metadata to retrieve financial data. Used to query specific account balances in trading systems.",
      "description_length": 211,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_open_interest",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling market data updates related to open interest, with fields for symbol ID, open interest value, and trading session date. It provides operations to set and retrieve these fields, enabling precise tracking and update of futures or options market data. Concrete use cases include processing real-time open interest updates from trading platforms or market data feeds.",
      "description_length": 410,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low_int",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling market data updates, specifically capturing session low prices. It includes mutable fields for symbol ID, price, and trading session date, all represented as optional 32-bit unsigned integers. It is used to track and update session low price information for financial instruments in a market data feed.",
      "description_length": 349,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_complete",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling account balance adjustment completion messages. It includes mutable fields for optional request and transaction IDs, represented as 32-bit and 64-bit integers respectively. It is used to track the status and identifiers of completed balance adjustment operations in financial transaction systems.",
      "description_length": 343,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_order",
      "library": "dtc-pb",
      "description": "Handles order cancellation requests by providing a data structure to represent cancellation messages with optional server and client order identifiers. Works with string values wrapped in options to accommodate partial information scenarios. Used to construct or deconstruct cancellation payloads in communication with a trading system.",
      "description_length": 336,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_reject",
      "library": "dtc-pb",
      "description": "Handles the structure and manipulation of security definition rejection messages in the DTC protocol. It stores an optional request ID and a rejection reason string, enabling precise error reporting during security definition requests. Used to construct and manage responses indicating invalid or rejected security definitions in trading systems.",
      "description_length": 346,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected historical price data requests, including fields for request ID, rejection text, rejection reason code, and retry time. It supports operations to set and retrieve these fields, enabling precise error handling and response generation. Concrete use cases include processing and responding to failed requests for historical financial data, where detailed rejection information must be communicated to the client.",
      "description_length": 468,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing individual levels in a market depth snapshot, with fields for symbol ID, side (bid/ask), price, quantity, level, batch message flags, timestamp, and number of orders. It provides functions to create, update, and access these fields, enabling precise modeling of order book data. Concrete use cases include processing and analyzing real-time market depth feeds in trading systems.",
      "description_length": 433,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_update",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling account balance updates with fields for financial metrics like cash balance, margin requirement, and profit/loss. It supports operations to set and retrieve these values, enabling precise tracking of trading account status. Use cases include processing real-time account updates from trading systems and generating detailed balance reports.",
      "description_length": 387,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for a journal entries request, containing optional fields for a request ID and a start date-time timestamp. It provides functions to manipulate and access these fields, specifically tailored for handling protocol buffer messages in the context of DTC protocol implementations. Use cases include constructing and parsing requests for retrieving journal entries with specific identifiers and time ranges.",
      "description_length": 439,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_no_timestamp",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing market depth update levels without timestamps. It includes fields for symbol ID, price, quantity, number of orders, side, update type, and whether it is the final update in a batch. This structure is used to process and transmit order book depth data in financial trading systems.",
      "description_length": 331,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing market depth rejection messages, including an optional symbol ID and rejection reason text. It provides functions to create, manipulate, and serialize these rejection messages according to the DTC protocol specifications. Use cases include handling rejected market depth requests in trading systems and relaying rejection details between components.",
      "description_length": 403,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_symbol_status",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing the status of a market data feed symbol, including a symbol ID and a status enum. It provides functions to manipulate and access these fields, such as setting or retrieving the symbol ID and status. This structure is used to track the availability or state of specific market data symbols in a trading or financial data system.",
      "description_length": 377,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling market data session open updates, including symbol ID, price, and trading session date. It provides functions to set and retrieve these fields, enabling precise tracking of market data events. Concrete use cases include processing real-time market data feeds and synchronizing trading session information in financial applications.",
      "description_length": 381,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_with_unbundled_indicator",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing trade data updates with unbundled indicators, including fields such as symbol ID, price, volume, and timestamp. It supports operations to set and retrieve these individual fields, enabling precise manipulation of market data events. Concrete use cases include processing and distributing real-time trade information in financial applications.",
      "description_length": 401,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates in market data, including fields for symbol ID, bid/ask indicator, price, volume, and timestamp. It provides functions to manipulate and access these fields, specifically tailored for handling real-time trade information in financial applications. Use cases include processing and disseminating trade data in trading platforms or market data feeds.",
      "description_length": 416,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_request",
      "library": "dtc-pb",
      "description": "Handles exchange list requests by managing an optional 32-bit integer request identifier. Works with the `t` record type containing a mutable `request_id` field. Used to track or correlate exchange list operations in financial data protocols.",
      "description_length": 242,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data tick responses, including fields for request ID, timestamp, bid/ask indicator, price, volume, and final record status. It works with optional numeric and enumeration types to represent sparse or variable data. Concrete use cases include parsing and storing individual tick records from financial market data feeds.",
      "description_length": 391,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_status",
      "library": "dtc-pb",
      "description": "Handles the status of a market data feed, specifically providing a mutable field for the market data feed status. Works with the `market_data_feed_status_enum` type, which represents different states of the data feed. Useful for tracking and updating the operational status of market data streams in trading systems.",
      "description_length": 316,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing a market depth snapshot level, including fields such as symbol ID, side, price, quantity, level, batch message flags, timestamp, and number of orders. It provides functions for serializing, deserializing, and manipulating market depth data used in financial trading systems. Concrete use cases include processing order book updates and reconstructing market depth from streaming data.",
      "description_length": 435,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_float_with_milliseconds",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing market depth update levels with timestamp, price, quantity, and metadata. It includes fields for symbol identifier, date/time in milliseconds, price, quantity, side, update type, number of orders, and batch finalization flag. Used to process and store granular order book updates in high-frequency trading systems.",
      "description_length": 373,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balance_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical account balance responses, including fields like request ID, timestamp, cash balance, and account details. It provides functions to encode and decode these records to and from Piqi-based protobuf formats. Use this module to process and serialize account balance data retrieved from financial systems using the DTC protocol.",
      "description_length": 389,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fill_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical order fill responses in a trading system. It includes fields for order metadata like request ID, message numbers, and timestamps, as well as trade details such as symbol, price, quantity, and execution information. It is used to represent and process individual order fill events in historical data queries.",
      "description_length": 373,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_int",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing market depth update levels, including fields for symbol ID, side (bid/ask), price, quantity, update type, timestamp, and number of orders. It provides functions to manipulate and access these fields, enabling precise handling of market depth data. Concrete use cases include processing and updating order book information in trading systems.",
      "description_length": 392,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.User_message",
      "library": "dtc-pb",
      "description": "Handles user message data with optional text content and popup display flags. Provides functions to create, modify, and query message fields. Useful for managing in-application notifications or user prompts with display behavior metadata.",
      "description_length": 238,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for submitting single trading orders with fields for financial instruments, order parameters, and execution settings. It supports operations to set and retrieve order details such as symbol, exchange, order type, price, quantity, and time constraints. Concrete use cases include constructing and modifying order requests for transmission to a trading system.",
      "description_length": 400,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask2",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing bid-ask market data updates, including symbol ID, bid and ask prices and quantities, and a timestamp. It provides functions to set and retrieve these individual fields. This structure is used to process and transmit Level 1 market data in trading systems.",
      "description_length": 314,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected open orders request, containing an optional request ID and a rejection reason. It provides functions to create, modify, and access these fields directly. Use this module to handle and propagate rejection details in order processing workflows.",
      "description_length": 303,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_last_trade_snapshot",
      "library": "dtc-pb",
      "description": "This module represents a snapshot of the last trade data for a financial instrument, capturing price, volume, and timestamp. It provides mutable fields for symbol ID, last trade price, volume, and date-time, all as optional numeric types. This structure is used to convey real-time market data updates for trading applications.",
      "description_length": 327,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_flatten_position_order",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for submitting flattened position orders, including fields such as symbol, exchange, trade account, and client order ID. It supports operations to set and retrieve these fields, with specific handling for boolean flags like `is_automated_order`. This structure is used to standardize order submissions in trading systems, particularly for interfacing with order management or execution platforms.",
      "description_length": 438,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Underlying_symbols_for_exchange_request",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling exchange request messages, including fields for request ID, exchange name, and security type. It supports operations to set and retrieve these fields, enabling the construction and manipulation of exchange request data structures. Concrete use cases include processing client requests for financial instrument data and routing messages to appropriate exchange handlers.",
      "description_length": 416,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for submitting single trading orders, with fields representing order parameters such as symbol, exchange, order type, and price. It supports operations to set and retrieve these fields, enabling the construction and modification of order requests. Concrete use cases include creating and configuring new order messages for transmission to a trading system.",
      "description_length": 398,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_trailer",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical price data response trailers in financial protocols. It includes mutable fields for a request ID and the final record's timestamp, both optional. It is used to capture metadata associated with the end of a historical price data response stream.",
      "description_length": 305,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_response",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling exchange list responses in a protocol buffer context. It includes fields for request ID, exchange name, final message indicator, and description, all of which are optional. It is used to represent and manipulate response messages when querying or listing exchanges in a trading or financial data communication system.",
      "description_length": 367,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling market data updates, specifically capturing session lows. It includes mutable fields for symbol ID, price, and trading session date, all with optional values. This structure is used to represent and manipulate low-price market data events in trading systems.",
      "description_length": 308,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_num_trades",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing market data updates related to the number of trades, including fields for symbol ID, trade count, and trading session date. It provides functions to manipulate and access these fields, specifically tailored for handling trade statistics in market data feeds. Use cases include tracking trade volumes per symbol within a session and synchronizing session-based trade counters across distributed systems.",
      "description_length": 452,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_volume",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing market data updates related to session volume, including fields for symbol ID, volume, trading session date, and a flag indicating if it's the final session volume. It provides functions to manipulate and access these fields, enabling precise tracking and transmission of volume data for financial instruments. Concrete use cases include processing real-time trading data and generating session-based volume reports in trading systems.",
      "description_length": 489,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical price data tick records, including fields for request ID, timestamp, price, volume, bid/ask indicator, and final record flag. It provides functions to manipulate and access these fields, supporting precise storage and retrieval of tick-level market data. Concrete use cases include processing financial time series data and managing real-time or historical trading records.",
      "description_length": 434,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_account_response",
      "library": "dtc-pb",
      "description": "Handles responses related to trade account requests, providing fields to track message sequencing, trade account identifiers, and associated request IDs. It supports operations for setting and retrieving numeric message counts, unique message numbers, account strings, and request identifiers. This structure is used to process and respond to client trade account queries in a message-based communication system.",
      "description_length": 412,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing a single level in a market depth update, including fields such as symbol ID, side (bid or ask), price, quantity, update type, timestamp, and number of orders. It supports operations to set and retrieve these individual fields, enabling precise manipulation of market depth data. This structure is used to model real-time changes in order book levels for financial instruments.",
      "description_length": 435,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for capturing market data snapshots, including fields for prices, volumes, timestamps, and trading status. It works with optional numeric and enumeration types to represent financial instrument data. Concrete use cases include storing and updating real-time market data for analysis, trade decision-making, and system state synchronization.",
      "description_length": 382,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_no_timestamp",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates without timestamps, including fields for symbol ID, price, volume, bid/ask indicator, and trade bundling status. It provides functions to manipulate and access these fields, enabling precise handling of market data trades in financial applications. Use cases include processing real-time trade data feeds and updating order book state based on incoming trade messages.",
      "description_length": 436,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_request",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling logon requests in a trading protocol, with fields for credentials, client configuration, and connection settings. It supports operations to set and retrieve protocol version, authentication details, heartbeat interval, trade mode, and client metadata. Concrete use cases include constructing and serializing logon messages for authentication and session initialization in trading systems.",
      "description_length": 443,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_request",
      "library": "dtc-pb",
      "description": "This module defines a mutable record structure for constructing historical price data requests, including fields for identifiers, symbols, time intervals, and compression settings. It supports operations to set and retrieve request parameters such as symbol, exchange, date range, and data interval. Concrete use cases include configuring and sending historical financial data queries to a backend system with optional compression and dividend adjustment flags.",
      "description_length": 461,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder",
      "library": "dtc-pb",
      "description": "This module defines a mutable OCaml record type for submitting a new One-Cancels-the-Other (OCO) order with fields for both constituent orders, including symbol, exchange, order type, buy/sell direction, prices, quantity, time-in-force, and related metadata. It supports precise order configuration for trading systems by allowing optional fields for each order parameter, including offsets, account details, and fill handling. Concrete use cases include constructing and submitting complex OCO orders to trading platforms that support conditional order execution.",
      "description_length": 564,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_compact",
      "library": "dtc-pb",
      "description": "This module defines a data structure for compact trade updates, including price, volume, timestamp, symbol ID, and bid/ask indicator. It provides functions to set and retrieve these fields, enabling efficient handling of market data events. Concrete use cases include processing real-time trade feeds and updating trading system state based on incoming market data.",
      "description_length": 365,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_float",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing a market depth snapshot level with floating-point price and quantity values. It includes fields for symbol identifier, price, quantity, order count, level, side (bid or ask), and a flag for final update in batch. It is used to capture and process order book depth data in trading systems where precise and efficient handling of market data is required.",
      "description_length": 411,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement_int",
      "library": "dtc-pb",
      "description": "Handles market data updates for session settlement information, specifically working with session identifiers, prices, and timestamps. It provides mutable fields for symbol ID, price, and date-time, all represented as optional 32-bit integers. This structure is used to capture and update settlement data during trading sessions, particularly in market data feeds where precise session-level pricing and timing are critical.",
      "description_length": 424,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing bid-ask market data updates, including symbol ID, bid and ask prices and quantities, and a timestamp. It provides functions for encoding, decoding, and manipulating this structured market data, specifically tailored for financial trading applications. Use cases include processing real-time market data feeds and updating order book states with incoming bid-ask information.",
      "description_length": 433,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_add",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing journal entries with an optional string payload and a 64-bit fixed integer timestamp. It provides functions to manipulate and access these fields, supporting operations like setting or retrieving the journal content and timestamp. Concrete use cases include logging time-stamped events or messages in a binary format for efficient storage or transmission.",
      "description_length": 409,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing market depth requests in financial trading protocols. It includes fields to specify the request action, symbol identifier, exchange, and the number of depth levels. Concrete use cases include sending and processing order book depth queries in trading systems.",
      "description_length": 313,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_header",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical price data response headers, including fields for request ID, record interval, compression settings, and data formatting. It supports operations to set and retrieve these fields, which are essential for configuring and interpreting historical financial data responses. Use cases include processing server replies to historical price queries and configuring data retrieval parameters in trading applications.",
      "description_length": 468,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.General_log_message",
      "library": "dtc-pb",
      "description": "Handles the creation and manipulation of log message structures with an optional text field. Works with the `t` record type containing a mutable `message_text` string option. Useful for building and modifying log entries where the message content may be present or omitted.",
      "description_length": 273,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Alert_message",
      "library": "dtc-pb",
      "description": "Handles the structure and manipulation of alert messages in a trading context. It provides functions to set and retrieve optional message text and trade account information. Useful for generating and managing alerts related to trading activities where contextual details are important.",
      "description_length": 285,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates in market data, including fields for symbol ID, bid/ask indicator, price, volume, and timestamp. It provides functions to manipulate and access these fields directly. Use this module to process or relay real-time trade information in trading systems or market data feeds.",
      "description_length": 339,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_underlying_request",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling symbols in underlying request messages, including fields for request ID, symbol, exchange, and security type. It provides functions to manipulate and access these fields, facilitating the construction and parsing of protocol buffer messages related to financial instrument queries. Use cases include retrieving symbol details for trading or market data requests in a DTC protocol implementation.",
      "description_length": 442,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling market data rejection messages, including optional symbol identifiers and rejection text. It provides functions to manipulate and access these fields, specifically tailored for error reporting in market data processing. Use cases include parsing and constructing rejection responses in trading systems.",
      "description_length": 352,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected journal entries, with fields for an optional request ID and rejection text. It provides operations to set and retrieve these fields, enabling precise error tracking and logging. Use cases include recording failed journal entry attempts and associating rejection reasons with specific requests.",
      "description_length": 352,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for session high information, including symbol ID, price, and trading session date. It provides functions to manipulate and access these fields, ensuring proper handling of optional values. Concrete use cases include processing and transmitting session high updates in financial market data feeds.",
      "description_length": 368,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logoff",
      "library": "dtc-pb",
      "description": "Handles client logoff requests with optional reason and reconnection control. Works with `t` records containing `reason` (string option) and `do_not_reconnect` (bool option). Used to gracefully terminate sessions while specifying whether the client should attempt to reconnect.",
      "description_length": 277,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_accounts_request",
      "library": "dtc-pb",
      "description": "Handles trade account requests by managing an optional 32-bit integer request identifier. Works with the `t` record type containing a mutable `request_id` field. Used to track or correlate trade account operations in financial systems.",
      "description_length": 235,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling logon response data in a trading protocol implementation. It includes fields for protocol version, logon result status, server information, and feature flags indicating support for trading functionalities like order types, market data, and historical price data. It is used to parse and construct logon response messages exchanged between a client and a trading server.",
      "description_length": 424,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_response",
      "library": "dtc-pb",
      "description": "This module defines a record type for encoding responses in a protocol, including optional fields for protocol version, encoding type, and protocol type. It provides functions to manipulate and access these fields, facilitating the serialization and deserialization of protocol messages. Concrete use cases include handling handshake responses and configuring communication settings in a distributed system.",
      "description_length": 407,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbol_search_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling symbol search requests in a trading protocol context. It includes fields for request ID, search text, exchange, security type, and search type, supporting precise financial instrument queries. Used to construct and manage requests for symbol searches in trading systems.",
      "description_length": 320,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Position_update",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling position update messages in a trading protocol. It includes fields for identifiers, quantities, prices, and metadata like timestamps and margin requirements. It is used to represent and manipulate individual position updates in a trading system, supporting operations like message indexing, symbol tracking, and account-specific data handling.",
      "description_length": 398,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trading_symbol_status",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing the status of a trading symbol, including a mutable symbol ID and a mutable trading status. It works with optional 32-bit unsigned integers and enumerated trading status values. Concrete use cases include tracking real-time changes in symbol availability and trading conditions within financial systems.",
      "description_length": 353,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_no_time_stamp",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing bid-ask market data updates without timestamps. It includes mutable fields for symbol ID, bid and ask prices, and quantities, using 32-bit unsigned integers and floats. It is used to capture and update current market data for financial instruments in real-time trading systems.",
      "description_length": 331,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trading_session_date",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for a trading session date, including fields for `symbol_id` and `date`, both as optional 32-bit unsigned integers. It provides functions to create, modify, and access these fields directly. This structure is used to convey updates related to trading session dates in market data feeds.",
      "description_length": 357,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing account balance adjustments, including fields such as request ID, credit and debit amounts, currency, reason, and trade account. It provides functions to manipulate and access these fields, enabling precise tracking and modification of financial transactions. Use cases include processing account adjustments in trading systems and generating audit logs for financial operations.",
      "description_length": 433,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling cancel/replace order requests in a trading protocol. It includes fields for order identifiers, pricing, quantity, time constraints, and flags for optional parameters. It is used to manage order modifications in financial trading systems where precision and state tracking are critical.",
      "description_length": 335,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling security definition responses in a trading protocol. It includes fields for identifiers, pricing parameters, and metadata like expiration and margin requirements. It is used to parse and construct detailed responses containing security attributes in a financial data exchange context.",
      "description_length": 339,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling cancel/replace order requests in a trading protocol. It includes fields for order identifiers, price and quantity adjustments, time constraints, and flags for update conditions. Concrete use cases include modifying existing orders with optional price updates and time-in-force settings.",
      "description_length": 333,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_request",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for configuring market data requests, including fields for request action, symbol identifiers, exchange, and update intervals. It supports operations to set or retrieve these fields, enabling precise control over market data subscriptions. Concrete use cases include specifying parameters for real-time price feeds or historical data retrieval in trading systems.",
      "description_length": 405,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_exchange_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling exchange request messages, including fields for request ID, exchange, security type, request action, and symbol. It provides functions to manipulate and access these fields, enabling the construction and parsing of protocol buffer messages for financial data exchange. Concrete use cases include sending and processing requests to retrieve or update symbol information in trading systems.",
      "description_length": 438,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_for_symbol_request",
      "library": "dtc-pb",
      "description": "Handles requests for security definitions by symbol and exchange, providing mutable fields for request ID, symbol, and exchange. Works with string and optional protobuf integers. Used to query specific security details in trading systems.",
      "description_length": 238,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling account balance rejection responses, including fields for an optional request ID and rejection text. It provides functions to encode and decode these responses in the DTC protocol using Piqi, ensuring compatibility with the protocol's message format. This is used specifically in scenarios where an account balance request cannot be fulfilled, such as invalid account IDs or insufficient permissions.",
      "description_length": 450,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data responses, including fields for request ID, timestamps, price values, volume, and trade counts. It supports operations to set and retrieve these fields, which correspond to financial data points like open, high, low, and last prices. Concrete use cases include processing and storing historical market data for analysis or display in trading applications.",
      "description_length": 432,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical account balance requests, including fields for request ID, trade account, and start date time. It provides functions to manipulate and serialize these request objects for communication in a financial protocol context. Concrete use cases include querying past account balances for reporting or reconciliation purposes.",
      "description_length": 378,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data responses, including fields for request ID, timestamps, price values, volume, and trade counts. It supports operations to set and retrieve these fields, which correspond to financial data points like open, high, low, and last prices. Concrete use cases include processing and storing historical market data for analysis or display in trading applications.",
      "description_length": 432,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_request",
      "library": "dtc-pb",
      "description": "Handles requests for current positions in a trading system. Works with protobuf-encoded data structures, specifically involving optional 32-bit integers and strings. Used to retrieve position data for a specific trade account, identified by an optional request ID.",
      "description_length": 264,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for requesting historical order fills with optional filtering by request ID, server order ID, number of days, trade account, and start date time. It supports constructing and manipulating queries to retrieve past order fill data from a trading system. Concrete use cases include generating trade reports, auditing executed orders, and analyzing historical trading activity.",
      "description_length": 410,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected current positions request, containing an optional request ID and a rejection reason. It provides functions to create, access, and modify these rejection records. This structure is used to handle and communicate errors in response to current positions queries in a trading or financial data protocol.",
      "description_length": 360,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement",
      "library": "dtc-pb",
      "description": "Handles market data updates for session settlement information, including symbol identifiers, prices, and timestamps. Works with mutable records containing optional 32-bit unsigned integers and 64-bit floating-point values. Used to process and store per-symbol settlement data in trading systems.",
      "description_length": 296,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected historical order fills request, with optional fields for a request ID and a rejection reason. It provides functions to create, access, and modify these fields. Use cases include handling and transmitting rejection responses for historical order fill requests in a trading system.",
      "description_length": 340,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected request for historical account balances. It includes mutable fields for an optional request ID and a rejection reason string. This structure is used to handle and communicate errors in historical balance query responses.",
      "description_length": 281,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_response",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling journal entry responses, including fields for the journal entry string, a 64-bit fixed integer timestamp, and a boolean indicating if it's the final response. It provides functions to manipulate and access these fields directly. This structure is used in message-passing scenarios where journal entries are exchanged with explicit timing and completion status, such as in logging or transaction protocols.",
      "description_length": 455,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_compact",
      "library": "dtc-pb",
      "description": "This module defines a compact representation for bid-ask market data updates, including price and quantity for both bid and ask, along with timestamp and symbol identifier. It provides functions to encode and decode this data structure for efficient transmission or storage. Concrete use cases include real-time market data feeds and high-frequency trading systems where minimizing bandwidth and processing overhead is critical.",
      "description_length": 428,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_request",
      "library": "dtc-pb",
      "description": "Handles requests for open orders in a trading system. It includes fields for filtering by request ID, retrieving all orders, specifying a server order ID, or selecting a trade account. Used to structure queries for order status and management in automated trading protocols.",
      "description_length": 274,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_reject",
      "library": "dtc-pb",
      "description": "Handles rejection of account balance adjustments by storing an optional request ID and rejection reason. Works with protobuf_int32 and string types. Used to communicate failure details in account balance modification workflows.",
      "description_length": 227,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable OCaml record type for submitting a new OCO (One-Cancels-the-Other) order with two linked child orders. It includes fields for order parameters such as symbol, exchange, order type, buy/sell direction, prices, quantity, time-in-force, and account details. It is used to structure and send complex trading instructions to a financial trading system.",
      "description_length": 377,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Dtcprotocol_piqi",
      "library": "dtc-pb",
      "description": "This module supports structured communication in financial trading systems through enumerated types and message schemas for protocol-level operations. It defines Piqi-generated OCaml types for market data dissemination (e.g., heartbeats, depth updates, trade reports), order lifecycle management (submission, cancellation, replacement), and account/exchange interactions, alongside primitive type aliases and status codes. These constructs enable precise serialization/deserialization of trading protocol messages, facilitating use cases like real-time market data feeds, algorithmic trading, and historical financial data retrieval.",
      "description_length": 633,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing bid-ask market data updates, including symbol ID, bid and ask prices and quantities, and a timestamp. It provides functions to set and retrieve these fields, supporting precise and efficient updates to market data feeds. Concrete use cases include processing real-time trading data and synchronizing order book states in high-frequency trading systems.",
      "description_length": 406,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_request",
      "library": "dtc-pb",
      "description": "Handles encoding requests by managing protocol version, encoding format, and protocol type. It works with optional protobuf integers, encoding enums, and strings. Used to configure and transmit serialization settings for protocol messages.",
      "description_length": 239,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data snapshot with fields for price, volume, and status information for a financial instrument. It includes mutable fields for values like bid/ask prices, trade volumes, settlement prices, and timestamps, all using specific numeric types. It is used to capture and update real-time market data for trading and analytics purposes.",
      "description_length": 388,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open_int",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling market data session open updates, containing optional fields for symbol ID, price, and trading session date. It provides functions to manipulate and access these fields, specifically tailored for parsing and serializing market data messages. Concrete use cases include processing session open events in trading systems and updating market data feeds.",
      "description_length": 397,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for a session high integer value. It includes fields for symbol ID, price, and trading session date, all as optional 32-bit unsigned integers. It is used to handle and manipulate session high price data in market data feeds.",
      "description_length": 295,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Order_update",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling order updates in a trading protocol, with fields representing order metadata, status, quantities, and execution details. It supports operations to set and retrieve order attributes such as price, quantity, status, and timestamps, using protobuf-compatible types. Concrete use cases include processing and transmitting order state changes between a trading system and external brokers or execution engines.",
      "description_length": 460,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi",
      "library": "dtc-pb",
      "description": "This module provides structured messaging operations for financial trading systems, focusing on market data dissemination, order lifecycle management, and session control. It works with mutable and immutable record types representing messages like market depth updates, order submissions, and account balance queries, along with enumerated types for trade modes, order statuses, and protocol commands. The module supports use cases such as high-frequency market data processing, real-time order execution, and secure session management in trading platforms requiring precise binary serialization via Piqi-generated protocol buffers.",
      "description_length": 632,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Encoding",
      "library": "dtc-pb",
      "description": "This module defines types and operations for handling message encodings, including binary, JSON, and Protobuf formats. It supports reading and writing encoded messages with version metadata, and converting them to or from strings. Use cases include serializing and deserializing communication payloads in a version-aware format.",
      "description_length": 328,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb",
      "library": "dtc-pb",
      "description": "This module implements structured messaging and encoding operations for financial trading systems. It provides functions for handling market data dissemination, order execution, and session control using Piqi-generated protocol buffers, along with utilities for version-aware serialization and deserialization of messages in binary, JSON, and Protobuf formats. Use cases include high-frequency trading platforms requiring precise message handling and efficient data encoding.",
      "description_length": 475,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 101,
    "meaningful_modules": 101,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 211,
    "avg_description_length": 377.2277227722772,
    "embedding_file_size_mb": 1.4638242721557617
  }
}