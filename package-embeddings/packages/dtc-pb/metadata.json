{
  "package": "dtc-pb",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 101,
  "creation_timestamp": "2025-07-15T23:19:22.295933",
  "modules": [
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_float_with_milliseconds",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing market depth update levels with timestamp, price, quantity, and metadata. It supports operations to set or retrieve fields like symbol ID, timestamp, price, quantity, side, update type, and number of orders. This structure is used to process and transmit granular order book updates in financial trading systems.",
      "description_length": 363,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_open_interest",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling market data updates related to open interest. It includes fields for symbol ID, open interest value, and trading session date, all as optional 32-bit unsigned integers. It is used to represent and manipulate open interest data received from market data feeds.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing individual levels in a market depth snapshot, containing fields such as symbol ID, side (bid or ask), price, quantity, level number, batch message indicators, timestamp, and number of orders. It provides functions to manipulate and access these fields, enabling precise handling of order book data. Concrete use cases include processing and transmitting market depth updates in trading systems.",
      "description_length": 448,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logoff",
      "library": "dtc-pb",
      "description": "Handles client logoff requests with optional disconnection flags. Works with `t` records containing `reason` and `do_not_reconnect` fields. Used to signal session termination and control reconnection behavior in distributed systems.",
      "description_length": 232,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_int",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing market depth update levels in financial trading data. It includes mutable fields for symbol ID, side (bid/ask), price, quantity, update type, timestamp, and number of orders, all with optional values. It is used to model and process changes in order book depth for specific financial instruments.",
      "description_length": 347,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trading_session_date",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing market data updates for trading session dates, with fields for an optional symbol ID and date. It provides functions to create, modify, and access these fields, specifically supporting the handling of DTC protocol messages related to trading session date changes. Use cases include parsing and serializing market data feeds that track session-specific date information for financial instruments.",
      "description_length": 445,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_response",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling protocol encoding responses, including fields for protocol version, encoding type, and protocol type. It provides functions to manipulate and access these fields, facilitating the serialization and deserialization of protocol messages. Concrete use cases include configuring protocol settings and parsing encoding information in network communication scenarios.",
      "description_length": 408,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement",
      "library": "dtc-pb",
      "description": "Handles market data updates for session settlement information, including fields for symbol ID, price, and timestamp. Works with records containing optional 32-bit unsigned integers and 64-bit floating-point numbers. Used to process and store end-of-session settlement values for financial instruments in trading systems.",
      "description_length": 321,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected historical order fills request, with optional fields for a request identifier and a rejection reason. It provides operations to set and retrieve these fields, enabling precise handling of rejection scenarios in order processing. Concrete use cases include tracking failed requests for historical order data and communicating rejection details in trading systems.",
      "description_length": 423,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical price data tick records, including fields for request ID, timestamp, price, volume, bid/ask indicator, and final record status. It supports operations to set and retrieve these fields, enabling precise manipulation of financial tick data. Concrete use cases include processing and analyzing granular market data for trading strategies or historical analysis.",
      "description_length": 419,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update session open interval, including fields for symbol ID, price, and trading session date. It provides functions to manipulate and access these fields, specifically tailored for handling financial market data updates. Concrete use cases include parsing and serializing session open data in trading systems.",
      "description_length": 374,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling market data rejection responses, including optional fields for a symbol ID and rejection reason. It provides functions to create, modify, and access these rejection records, specifically tailored for use in financial data communication protocols. Concrete use cases include transmitting error information in response to invalid market data requests or subscription failures.",
      "description_length": 424,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_update",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling account balance updates with fields for financial metrics like cash balance, margin requirement, and profit/loss. It includes mutable optional fields for numeric values, strings, and flags such as `unsolicited` or `no_account_balances`. It is used to represent and manipulate account state data received from a trading or financial system, supporting message sequencing and transaction tracking.",
      "description_length": 442,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing bid-ask market data updates, including symbol ID, bid and ask prices and quantities, and a timestamp. It provides functions to access and modify individual fields of the record. This structure is used to capture and update real-time market data for financial instruments in trading systems.",
      "description_length": 349,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected historical price data requests, including fields for request ID, rejection text, reason code, and retry time. It supports operations to set and retrieve these fields, enabling precise error handling and response generation. Concrete use cases include processing failed requests in financial data APIs and logging rejection details for debugging or client feedback.",
      "description_length": 423,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for a session high integer value. It includes fields for symbol ID, price, and trading session date, all as optional 32-bit unsigned integers. It is used to capture and transmit updates to the highest price observed during a trading session for a specific financial instrument.",
      "description_length": 348,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling journal entry requests, including optional fields for a request ID and a start date-time. It provides functions to manipulate and access these fields, specifically tailored for use in querying journal entries based on time ranges. Concrete use cases include filtering trade logs or audit records starting from a specific timestamp.",
      "description_length": 381,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_last_trade_snapshot",
      "library": "dtc-pb",
      "description": "This module defines a data structure for capturing a snapshot of the last trade in market data updates. It includes fields for the symbol ID, last trade price, volume, and timestamp, all represented as optional numeric types. It is used to convey real-time trade information in financial data feeds.",
      "description_length": 299,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Underlying_symbols_for_exchange_request",
      "library": "dtc-pb",
      "description": "Handles requests for retrieving underlying symbols associated with a specific exchange and security type. It provides mutable fields for setting the request ID, exchange name, and security type, enabling dynamic updates during message processing. This structure is used in scenarios where a client needs to query available symbols for a given market and instrument type.",
      "description_length": 370,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data responses, including fields for request ID, timestamps, price values, volume, and trade counts. It supports operations to set and retrieve these fields, which correspond to financial data points like open, high, low, and last prices. Concrete use cases include processing and storing historical market data for analysis or display in trading applications.",
      "description_length": 432,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_request",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling logon requests in a trading protocol. It includes fields for authentication, configuration, and client metadata, such as username, password, protocol version, heartbeat interval, trade mode, and account information. It is used to structure and manage client connection parameters during the logon process.",
      "description_length": 360,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing market depth update levels, including fields such as symbol ID, side (bid or ask), price, quantity, update type, timestamp, and number of orders. It provides functions to manipulate and access these fields directly. This structure is used to process and track real-time changes in order book depth data from financial market feeds.",
      "description_length": 390,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_status",
      "library": "dtc-pb",
      "description": "Handles the status of a market data feed, specifically providing a mutable field for the market data feed status enum. Works with the `market_data_feed_status_enum` type, which represents different states of the data feed. Useful for tracking and updating the operational status of market data streams in trading systems.",
      "description_length": 321,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_request",
      "library": "dtc-pb",
      "description": "This module defines a mutable record structure for constructing historical price data requests, including fields for identifiers, symbols, intervals, timestamps, and compression settings. It supports operations to set and retrieve request parameters used in querying financial time series data. Concrete use cases include configuring requests for stock price history with specific date ranges, intervals, and adjustments for dividends.",
      "description_length": 435,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fill_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical order fill responses in trading systems. It includes fields for request metadata, order details like symbol and exchange, execution data such as price and quantity, and position-related metrics. It is used to represent and process detailed trade execution reports in financial applications.",
      "description_length": 356,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_request",
      "library": "dtc-pb",
      "description": "Handles requests for listing exchanges by defining a data structure with an optional request ID. Works with protocol buffer integers to identify requests. Used to serialize and deserialize exchange list queries in a trading system API.",
      "description_length": 235,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing market depth requests in financial trading protocols. It includes fields for specifying the request action, symbol identifier, exchange, and number of depth levels. Concrete use cases include sending and processing order book depth queries in trading systems.",
      "description_length": 313,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling cancel/replace order operations in a trading protocol. It includes mutable fields for order identifiers, pricing, quantity, time constraints, and update flags. Concrete use cases include modifying existing orders by updating prices, adjusting time-in-force settings, or changing order quantities in high-frequency trading systems.",
      "description_length": 377,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates in market data, including fields for symbol ID, bid/ask indicator, price, volume, and timestamp. It provides functions to manipulate and access these fields, specifically tailored for handling real-time trade information in financial applications. Use cases include processing and disseminating trade data feeds from exchanges or market data providers.",
      "description_length": 420,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_request",
      "library": "dtc-pb",
      "description": "Handles requests for current positions in a trading system. Works with protobuf-encoded data structures, specifically involving optional 32-bit integers and strings. Used to retrieve position data for a specific trade account by request ID.",
      "description_length": 240,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_compact",
      "library": "dtc-pb",
      "description": "This module defines a data structure for compact market data updates, specifically trades, with fields for price, volume, timestamp, symbol ID, and bid/ask indicator. It supports parsing and handling trade updates in financial market data feeds. Use cases include real-time trade tracking and efficient data transmission in trading systems.",
      "description_length": 340,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update session open event, with fields for symbol ID, price, and trading session date. It provides functions to manipulate and access these fields, enabling precise handling of session initialization data in market data processing workflows. Concrete use cases include parsing incoming session open messages and constructing responses with updated session metadata.",
      "description_length": 429,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected account balance adjustments, including fields for an optional request ID and rejection reason. It provides operations to set and retrieve these fields, enabling precise error reporting in financial transactions. Concrete use cases include processing rejected balance updates in trading systems or financial ledgers.",
      "description_length": 374,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_header",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical price data response headers, including fields for request ID, record interval, compression settings, and data formatting. It supports operations to set and retrieve these fields, which are essential for configuring and interpreting historical financial data responses. Use cases include processing server replies to historical price queries and preparing data for client applications.",
      "description_length": 445,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.General_log_message",
      "library": "dtc-pb",
      "description": "Handles structured logging messages with optional text content. Works with the `t` record type containing an optional `message_text` field. Used to represent log entries where the message body may be absent or dynamically set, supporting flexible log data handling in distributed systems.",
      "description_length": 288,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling logon response data in a trading protocol implementation. It includes fields for protocol version, logon result status, server information, and various feature flags indicating supported capabilities like market data, order operations, and historical price data. It is used to parse and construct logon response messages during client-server handshake in trading systems.",
      "description_length": 426,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Position_update",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling position update messages in a trading protocol. It includes fields for identifiers, quantities, prices, and metadata like timestamps and margin requirements. It is used to represent and manipulate individual position updates in financial trading systems.",
      "description_length": 301,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data responses, including fields for request ID, timestamp, bid/ask indicator, price, volume, and final record status. It supports operations to set and retrieve these individual fields, enabling precise manipulation of historical tick data. Concrete use cases include processing and storing granular financial market data for analysis or replay systems.",
      "description_length": 426,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data snapshot with fields for price, volume, and status information for a financial instrument. It includes mutable fields for values like bid/ask prices, last trade details, session statistics, and timestamps, all using specific numeric and enumeration types. It is used to capture and transmit detailed real-time market data updates in trading systems.",
      "description_length": 413,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_complete",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing the completion of an account balance adjustment, containing optional identifiers for the request and transaction. It provides operations to set and retrieve these identifiers, ensuring precise tracking of adjustments in financial transactions. This structure is used specifically in handling account balance updates within trading systems.",
      "description_length": 389,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trading_symbol_status",
      "library": "dtc-pb",
      "description": "This module defines a record type for tracking the status of a trading symbol, including mutable fields for the symbol ID and trading status. It works with optional 32-bit unsigned integers and enumerated trading status values. Concrete use cases include representing and updating the availability or trading state of financial instruments in a trading system.",
      "description_length": 360,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing a single level in a market depth snapshot, including fields such as symbol ID, side (bid or ask), price, quantity, level number, batch message indicators, timestamp, and number of orders. It provides direct access to these fields via mutable bindings, allowing for efficient updates and population of market depth data. Concrete use cases include processing and storing real-time order book snapshots from financial market data feeds.",
      "description_length": 493,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling historical price data responses, including fields for request ID, timestamps, price values, volume, and trade counts. It supports operations to set and retrieve optional numeric and boolean values, typically used for parsing or constructing price data messages in a trading system. Concrete use cases include processing historical market data feeds and populating price statistics for financial instruments.",
      "description_length": 462,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_exchange_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling exchange request messages, including fields for request ID, exchange, security type, request action, and symbol. It provides functions to manipulate and access these fields, facilitating the creation and modification of exchange request data. Concrete use cases include constructing and parsing exchange request messages in a trading system.",
      "description_length": 391,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balance_response",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical account balance responses, including fields like request ID, timestamp, cash balance, and account details. It provides functions to manipulate and access these fields, supporting operations such as setting and retrieving balance data and response metadata. Concrete use cases include processing and storing account balance records from financial transactions.",
      "description_length": 420,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for submitting single orders, with fields representing order parameters such as symbol, exchange, order type, and quantity. It works with optional primitive types and enums from the Dtcprotocol_piqi module, including order_type_enum, buy_sell_enum, and time_in_force_enum. Concrete use cases include constructing and modifying order requests for trading systems that require detailed order specifications like price, quantity, and execution instructions.",
      "description_length": 496,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order_int",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling cancel/replace order requests in a trading protocol. It includes mutable fields for order identifiers, pricing, quantity, time constraints, and flags indicating presence or updates to specific fields. It is used to manage order modifications in high-frequency trading systems where precise control over order parameters is required.",
      "description_length": 379,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling market depth rejection messages, including optional symbol identifiers and rejection text. It provides functions to manipulate and access these fields, specifically tailored for use in financial trading systems where order book depth data is processed. Concrete use cases include parsing and constructing rejection responses in market data feeds or order management systems.",
      "description_length": 424,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected historical account balance requests, including fields for an optional request ID and a rejection reason. It provides operations to set and retrieve these fields, enabling precise error handling and logging. Concrete use cases include tracking failed requests in financial systems and generating diagnostic reports.",
      "description_length": 373,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected journal entry response, with optional fields for a request ID and rejection reason. It provides functions to create, manipulate, and serialize instances of this structure, typically used to handle error responses in journal entry operations. Concrete use cases include returning structured error information when processing or validating journal entries fails.",
      "description_length": 421,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.User_message",
      "library": "dtc-pb",
      "description": "Handles user message data with optional text content and popup flag. Provides functions to create, modify, and serialize messages for communication or UI display. Used to structure transient user notifications or dialog triggers in applications.",
      "description_length": 245,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_float",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing a market depth snapshot level with floating-point precision. It includes fields for symbol ID, price, quantity, order count, level, side (bid or ask), and a flag for final update in batch. It is used to capture and process detailed order book data in financial trading systems.",
      "description_length": 336,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for requesting historical order fills with optional filtering by request ID, server order ID, number of days, trade account, and start date/time. It supports building and manipulating query parameters used to retrieve order fill history from a trading system. Concrete use cases include generating reports on past trades, auditing order execution, and analyzing trading performance over specific time intervals.",
      "description_length": 448,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment",
      "library": "dtc-pb",
      "description": "This module defines a record type for representing account balance adjustments, including fields for request ID, credit and debit amounts, currency, reason, and trade account. It provides functions to manipulate and access these fields, enabling precise financial adjustments in trading systems. Concrete use cases include processing manual adjustments to trader accounts and logging transaction reasons in financial audits.",
      "description_length": 424,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for capturing market data snapshots, including fields for prices, volumes, timestamps, and trading status. It works with optional numeric and enumeration types to represent financial instrument data. Concrete use cases include storing and updating real-time market data feeds for trading systems or analytics.",
      "description_length": 351,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected account balance request, containing an optional request ID and a rejection reason. It provides functions to create, access, and modify these fields. This structure is used to handle and propagate error information in financial query responses.",
      "description_length": 304,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for session settlement information, including symbol ID, price, and timestamp. It provides functions to manipulate and access these fields, specifically tailored for handling financial market data updates. Concrete use cases include processing and storing session settlement values for trading instruments in a market data feed.",
      "description_length": 399,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_underlying_request",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling symbols in underlying request messages, including fields for request ID, symbol, exchange, and security type. It provides functions to manipulate and access these fields, facilitating the construction and parsing of protocol buffer messages related to financial instrument queries. Use cases include retrieving symbol details from exchanges and managing request identifiers in trading systems.",
      "description_length": 440,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_trailer",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling the trailer portion of a historical price data response. It includes mutable fields for an optional request ID and an optional final record timestamp. This structure is used to capture metadata at the end of a historical price data response, such as identifying the request and marking the timestamp of the last record returned.",
      "description_length": 378,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_response",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for handling security definition responses in a trading protocol. It includes fields for identifiers, market data, pricing, and contract details, supporting precise message parsing and serialization. Concrete use cases include processing responses from market data feeds and populating security metadata for trading systems.",
      "description_length": 366,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for a trading session, specifically capturing the symbol ID, price, and trading session date as optional 32-bit unsigned integers. It provides functions to create, modify, and access these fields, enabling precise handling of session-based market data events. Concrete use cases include processing real-time trading updates and persisting session-specific price data.",
      "description_length": 438,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_accounts_request",
      "library": "dtc-pb",
      "description": "Handles trade account requests by managing an optional request identifier. Works with the `t` record type containing a mutable 32-bit integer option. Used to track or correlate trade account operations in financial systems.",
      "description_length": 223,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_no_time_stamp",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing bid-ask market data updates without timestamps. It includes mutable fields for symbol ID, bid and ask prices, and corresponding quantities. It is used to capture and update real-time market data in trading systems where timestamp precision is not required.",
      "description_length": 310,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for configuring market data requests with specific fields such as request action, symbol ID, symbol, exchange, and update interval. It supports operations to set and retrieve these fields, enabling precise control over market data subscriptions. Concrete use cases include constructing requests for real-time price updates or historical data retrieval from financial market APIs.",
      "description_length": 416,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_with_unbundled_indicator",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing trade data updates with unbundled indicators, including fields such as symbol ID, bid/ask status, trade indicator, price, volume, timestamp, and exchange code. It supports operations to set and retrieve these individual fields. Concrete use cases include processing and transmitting market data updates in trading systems where unbundled trade information must be explicitly tracked and communicated.",
      "description_length": 459,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask2",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing bid-ask market data updates, including symbol ID, bid and ask prices and quantities, and a timestamp. It provides functions to set and retrieve these fields, enabling precise tracking of market data changes. This structure is used in trading systems to update and synchronize order book information in real-time.",
      "description_length": 366,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_num_trades",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing market data updates for session trade counts, including symbol identifier, number of trades, and session date. It provides functions to manipulate and access these fields, supporting precise tracking of trading activity. Concrete use cases include processing real-time market data feeds and generating session-based trade statistics.",
      "description_length": 383,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates in market data, including fields for symbol ID, bid/ask indicator, price, volume, and timestamp. It provides functions to serialize and deserialize trade updates for efficient transmission or storage. Concrete use cases include processing real-time trade data feeds and logging trade events in financial applications.",
      "description_length": 385,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_order",
      "library": "dtc-pb",
      "description": "Handles order cancellation requests by providing a data structure to represent cancellation details, including optional server and client order IDs. Works with string identifiers to specify which orders to cancel. Used to construct and manipulate cancellation messages sent between clients and servers in a trading system.",
      "description_length": 322,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_request",
      "library": "dtc-pb",
      "description": "This module defines a record type for encoding requests with optional fields for protocol version, encoding format, and protocol type. It provides functions to manipulate and access these fields, enabling configuration of encoding parameters in data serialization workflows. Concrete use cases include setting protocol-specific options before serializing messages or negotiating encoding formats between systems.",
      "description_length": 412,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_volume",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing market data updates for session volume, including fields for symbol ID, volume, trading session date, and a flag indicating if it's the final session volume. It provides functions to manipulate and access these fields, enabling precise tracking and updating of trading session metrics. Concrete use cases include processing real-time market data feeds and aggregating session-based trading statistics.",
      "description_length": 451,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Dtcprotocol_piqi",
      "library": "dtc-pb",
      "description": "This module provides operations for serializing, deserializing, and structuring protocol messages in a financial trading system, focusing on trading operations, market data dissemination, and system management. It works with enumerated types for order attributes (e.g., buy/sell, time-in-force), protocol buffers for message encoding, and structured types for market data updates (e.g., trades, bid/ask), order submissions, and session control. Specific use cases include handling order lifecycle management (submit, cancel, replace), real-time market depth updates, logon/logoff procedures, and querying financial data like account balances or historical records.",
      "description_length": 664,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a market data update for a trading session, specifically capturing low price information. It includes fields for the symbol ID, low price, and trading session date, all as optional numeric values. This structure is used to process and transmit session-low market data in financial trading systems.",
      "description_length": 347,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Alert_message",
      "library": "dtc-pb",
      "description": "Handles structured data for alert messages with optional text and trade account information. Provides functions to create, modify, and access fields of alert messages. Useful for systems requiring alert notifications tied to specific trade accounts.",
      "description_length": 249,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_response",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling exchange list responses in a protocol buffer context. It includes fields for request ID, exchange name, final message indicator, and description, all optional. It is used to serialize and deserialize messages related to exchange listings in a networking or financial data exchange application.",
      "description_length": 343,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high",
      "library": "dtc-pb",
      "description": "Handles market data updates for session high information, providing mutable fields to track symbol ID, price, and trading session date. Works with DTC protocol-defined uint32 and float64 types, structured as an OCaml record. Used to represent and manipulate session high data in market data streaming applications.",
      "description_length": 314,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_no_timestamp",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing a market depth update level without a timestamp. It provides functions to access and modify fields such as symbol ID, price, quantity, number of orders, side, update type, and whether it is the final update in a batch. It is used to process and manipulate order book data in high-frequency trading systems where timestamp precision is not required.",
      "description_length": 407,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_symbol_status",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing the status of a market data feed symbol, including a symbol ID and a status enum. It provides functions to manipulate and access these fields, such as setting or retrieving the symbol ID and status. This structure is used to track the availability or state of specific market data feeds in trading systems.",
      "description_length": 356,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder_int",
      "library": "dtc-pb",
      "description": "This module defines a mutable OCaml record type for submitting a new OCO (One-Cancels-the-Other) order with two linked orders, each having parameters such as symbol, exchange, order type, buy/sell direction, price, and quantity. It supports optional fields for advanced order settings like time-in-force, trade account, and fill handling, as well as integration with order triggers and free-form text. It is used to structure and send complex OCO trading orders to a market data feed or order management system.",
      "description_length": 511,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for constructing and submitting single order requests in a trading protocol. It includes fields for order parameters such as symbol, exchange, order type, buy/sell direction, price, quantity, and time-in-force. Concrete use cases include populating order details for transmission over a network or serialization into a message format for execution systems.",
      "description_length": 398,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_int",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing bid-ask market data updates, including symbol identifier, bid and ask prices and quantities, and timestamp. It provides functions to encode and decode these updates in the DTC protocol format. Use this module to process or generate market data messages in trading systems that require precise bid-ask information.",
      "description_length": 367,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_add",
      "library": "dtc-pb",
      "description": "Handles the creation and manipulation of journal entry add operations with optional string content and fixed 64-bit integer timestamps. Works directly with `t` records containing `journal_entry` and `date_time` fields. Used to represent and serialize individual journal entries in a protocol buffer format for logging or transmission.",
      "description_length": 334,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_response",
      "library": "dtc-pb",
      "description": "This module defines a record type for handling journal entry responses, including fields for the journal entry string, a 64-bit fixed integer timestamp, and a boolean indicating if it's the final response. It supports operations to set and access these fields, commonly used in logging or auditing workflows where timestamped entries are processed in sequence. The boolean flag helps signal completion in streaming or batch journaling scenarios.",
      "description_length": 445,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_for_symbol_request",
      "library": "dtc-pb",
      "description": "Handles requests for security definitions by symbol and exchange, providing mutable fields for message identifiers, symbol names, and exchange identifiers. Works with protocol buffer messages and string identifiers. Used to query specific security metadata in trading systems.",
      "description_length": 276,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for submitting a new OCO (One-Cancels-the-Other) order with fields for both leg orders, including symbols, order types, buy/sell indicators, prices, quantities, and execution parameters. It supports data types such as strings, optional enums (order type, buy/sell, time-in-force), floating-point numbers, and timestamps. Concrete use cases include constructing and modifying OCO orders for algorithmic trading strategies where two related orders are submitted together with conditional cancellation logic.",
      "description_length": 547,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_request",
      "library": "dtc-pb",
      "description": "Handles requests for open orders in a trading protocol. It includes fields for request ID, fetching all orders, server order ID, and trade account. Used to query specific or all open orders from a trading system.",
      "description_length": 212,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_no_timestamp",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing trade updates without timestamps, including fields for symbol ID, price, volume, bid/ask indicator, and trade bundling status. It provides functions to manipulate and access these fields, enabling precise handling of market data trades in financial applications. Use cases include processing real-time trade data feeds and updating trading system state based on incoming trade events.",
      "description_length": 438,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_reject",
      "library": "dtc-pb",
      "description": "Handles the structure and manipulation of security definition rejection messages in the DTC protocol. It provides mutable fields for an optional request ID and rejection text, allowing for dynamic updates during message processing. This is used to communicate errors or rejections related to security definitions in trading system communications.",
      "description_length": 346,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbol_search_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling symbol search requests in a trading protocol. It includes fields for request ID, search text, exchange, security type, and search type, supporting precise symbol lookup. It is used to format and manage incoming symbol search queries in a trading system.",
      "description_length": 303,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_account_response",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling trade account response messages in a financial protocol. It includes fields for message metadata such as total number of messages, message number, request ID, and the trade account identifier. It is used to parse and construct individual trade account response messages during communication with a trading system.",
      "description_length": 363,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure representing a rejected open orders request, with optional fields for a request identifier and a rejection reason. It provides functions to create, access, and modify instances of this structure. Use this module when handling order rejection responses in trading systems using the DTC protocol.",
      "description_length": 331,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Order_update",
      "library": "dtc-pb",
      "description": "This module defines a mutable record type for representing detailed order updates in a trading protocol, including fields for order identifiers, status, quantities, prices, and timestamps. It provides direct access to optional values like order IDs, status enums, and numeric fields for handling trade execution data. Concrete use cases include parsing and serializing order update messages in a Piqi-based protocol implementation for financial trading systems.",
      "description_length": 461,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_compact",
      "library": "dtc-pb",
      "description": "This module defines a data structure for representing compact bid-ask market data updates, including price, quantity, timestamp, and symbol identifier. It provides functions to set and retrieve optional fields such as bid price, ask quantity, and associated metadata. This structure is used to efficiently transmit and process real-time market data in trading systems.",
      "description_length": 368,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_flatten_position_order",
      "library": "dtc-pb",
      "description": "This module defines a record type for submitting flattened position orders, including fields such as symbol, exchange, trade account, and client order ID. It supports operations to set or retrieve these fields, with a focus on order submission in trading systems. Concrete use cases include constructing and modifying order requests for automated trading or position management.",
      "description_length": 378,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_request",
      "library": "dtc-pb",
      "description": "Handles requests for account balance information in a trading protocol. It includes fields for an optional request ID and a trade account identifier. Used to query specific account balances within a trading system.",
      "description_length": 214,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_request",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling historical account balance requests. It includes fields for a request ID, trade account identifier, and start timestamp. It is used to specify parameters when querying past account balances in financial systems.",
      "description_length": 261,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_reject",
      "library": "dtc-pb",
      "description": "This module defines a data structure for handling rejected current position requests in a trading protocol. It includes mutable fields for an optional request ID and a rejection reason string. Concrete use cases include transmitting error responses and logging failed position queries in trading systems.",
      "description_length": 304,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Heartbeat",
      "library": "dtc-pb",
      "description": "This module defines a data structure for tracking heartbeat information in a messaging system. It includes fields for the number of dropped messages and the current date-time, both used to monitor connection health and message integrity. The structure is typically used in networked applications to detect failures or delays in message transmission.",
      "description_length": 349,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Encoding",
      "library": "dtc-pb",
      "description": "This module defines message encodings and metadata for serializing or parsing request/response data in formats like Binary, JSON, or Protobuf. It handles conversion between string representations and typed values, supporting operations like reading encoded messages from strings, writing them to bytes buffers, and converting them to human-readable strings. Concrete use cases include decoding incoming network messages or encoding outgoing responses based on negotiated format and version.",
      "description_length": 490,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi",
      "library": "dtc-pb",
      "description": "This module implements a comprehensive framework for financial trading and market data communication, centered on structured data serialization and protocol message handling using Piqirun and Protobuf. It provides core types and operations for orders, positions, market data updates (including depth, trades, bids/asks), session control, account balances, and protocol encoding, enabling real-time data processing, algorithmic trading, and reconciliation workflows. Child modules refine this structure with specific mutable record types and accessors for granular data manipulation\u2014such as market depth levels, trade updates, logon responses, and order submissions\u2014supporting precise modeling of trading system events and efficient message exchange in high-frequency environments.",
      "description_length": 780,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb",
      "library": "dtc-pb",
      "description": "This module provides a structured framework for serializing and parsing financial trading data across multiple formats, including Binary, JSON, and Protobuf. It defines core types for orders, market data updates, account balances, and session control, along with operations to encode and decode these structures for network transmission or logging. You can use it to process real-time market depth, submit trades, or manage session state in high-frequency trading environments. Specific examples include converting a market data update to a human-readable string or encoding an order submission for transmission over a network.",
      "description_length": 627,
      "index": 100,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 101,
    "meaningful_modules": 101,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 780,
    "min_description_length": 212,
    "avg_description_length": 383.0693069306931,
    "embedding_file_size_mb": 0.36733055114746094
  }
}