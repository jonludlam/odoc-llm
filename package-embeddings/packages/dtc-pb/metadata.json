{
  "package": "dtc-pb",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 102,
  "creation_timestamp": "2025-06-18T16:49:34.866710",
  "modules": [
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Dtcprotocol_piqi",
      "description": "This module defines structured data types and enumerated values for financial protocol messaging, including numeric representations, domain-specific enums, and entity models like market data feeds, order operations, and exchange information. It supports operations such as encoding/decoding messages, managing trade activity records, and handling request-response workflows for market data, order management, and account updates. Use cases include real-time market monitoring, order execution tracking, and financial data synchronization across trading systems.",
      "description_length": 561,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_request",
      "description": "Encodes and decodes request parameters using a custom format, supporting string, integer, and boolean values. It processes key-value pairs and handles nested structures through recursive encoding. This is used to serialize HTTP query strings and parse incoming request data efficiently.",
      "description_length": 286,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Encoding_response",
      "description": "Encodes and decodes response data using custom binary formats, handling sequences of integers and strings with fixed-length headers. It processes messages structured as tuples containing status codes, payload lengths, and raw byte arrays. This is used in network communication to ensure consistent message parsing and transmission between client and server.",
      "description_length": 357,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_request",
      "description": "type t = { username : string; password : string; timestamp : int } Provides functions to create, validate, and serialize authentication requests containing user credentials and a timestamp. Processes and checks the integrity of login data before transmission. Used to handle user login attempts in networked applications.",
      "description_length": 321,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logon_response",
      "description": "type t = { user_id: string; session_token: string; expires_at: float } Provides functions to create, validate, and serialize authentication responses containing user identifiers, session tokens, and expiration timestamps. Processes and encodes response data for secure API interactions. Used to generate client-side session configurations after successful login.",
      "description_length": 362,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Logoff",
      "description": "Provides functions to parse, validate, and serialize session expiration timestamps. Works with the t type, which includes a timestamp and session identifier. Used to manage user session termination in web applications by checking and updating session validity.",
      "description_length": 260,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Heartbeat",
      "description": "type t = { last_heartbeat: Ptime.t; interval: Duration.t; is_active: bool } Provides functions to check if a heartbeat is overdue, update the last recorded time, and determine if the system is considered active based on the interval. Works with a record type containing a timestamp, a duration for the interval, and a boolean flag. Used to monitor system liveness in real-time applications and trigger alerts when activity falls below expected thresholds.",
      "description_length": 455,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_status",
      "description": "type t = { status: string; last_updated: float; is_connected: bool } Provides functions to parse raw market data feed responses, check connection validity, and extract timestamps. Works with structured data containing status strings, numeric timestamps, and boolean connection flags. Used to monitor real-time trading platform availability and update intervals.",
      "description_length": 361,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_feed_symbol_status",
      "description": "{ symbol: string; status: string; last_updated: float } Provides functions to parse, update, and query real-time market symbol status information. Works with structured data containing symbol identifiers, status codes, and timestamps. Used to monitor trading availability and update internal market state representations.",
      "description_length": 321,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trading_symbol_status",
      "description": "Provides functions to check if a trading symbol is active, suspended, or delisted, and to retrieve its status message. Works with the `t` type, which includes fields for symbol identifier, status code, and descriptive message. Used to filter valid trading instruments in real-time market data processing.",
      "description_length": 304,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_request",
      "description": "type t = { symbol: string; interval: string; limit: int } Provides functions to construct, parse, and validate market data requests, including parsing query strings into structured requests and generating request strings from structured data. Works with strings, integers, and custom record types representing trading symbols, time intervals, and data limits. Used to fetch historical price data from APIs by converting user inputs into standardized request formats.",
      "description_length": 466,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_request",
      "description": "Provides functions to create, modify, and validate market depth request parameters, including symbol, exchange, and subscription duration. Operates on a record type containing fields for instrument identifiers, update frequency, and session timing. Used to generate structured requests for real-time order book data in trading systems.",
      "description_length": 335,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_reject",
      "description": "type t = { reason: string; code: int; timestamp: float } Provides functions to create, inspect, and serialize rejection records from market data streams. Operates on structured data containing rejection codes, descriptive reasons, and time stamps. Used to log and analyze failed data submissions in real-time trading systems.",
      "description_length": 325,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot",
      "description": "type t = { symbol: string; price: float; volume: int; timestamp: int } Provides functions to parse raw market data strings into structured records, extract price changes between snapshots, and compute time-weighted averages over specified intervals. Operates on timestamped price-volume data for individual financial instruments. Used to monitor real-time price movements and detect anomalies in trading activity.",
      "description_length": 413,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_snapshot_int",
      "description": "type t = { timestamp: int; price: float; volume: float; bid: float; ask: float } Provides functions to parse raw market data strings into structured records, compute mid-price from bid and ask, and aggregate volume across multiple entries. Works with time-stamped financial data streams to support real-time trading analysis and order book monitoring.",
      "description_length": 351,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level",
      "description": "Represents a snapshot of a market's order book at a specific point in time, including bid and ask levels with price and quantity. Provides functions to extract, update, and compare bid and ask entries. Used to analyze liquidity structure and detect price changes in real-time trading systems.",
      "description_length": 292,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_float",
      "description": "type t = { price: float; size: float; is_buy: bool; is_best: bool } Provides functions to create, compare, and filter level entries in a market depth snapshot. Operates on floating-point price and size values with buy/sell and best price indicators. Used to process and analyze order book data for real-time trading systems.",
      "description_length": 324,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_snapshot_level_int",
      "description": "Represents a market depth snapshot level with price, quantity, and number of orders. Provides functions to create, access, and compare levels based on price. Used to process and analyze order book data in trading systems.",
      "description_length": 221,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level",
      "description": "type t = { price: float; size: float; is_buy: bool; sequence: int } Provides functions to create, update, and compare market depth entries, including merging updates and checking for validity based on sequence numbers. Operates on price-level data with bid/ask indicators and numeric quantities. Used to process real-time order book changes in high-frequency trading systems.",
      "description_length": 375,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_int",
      "description": "type t = { level: int; price: int; quantity: int } Provides functions to create, update, and query market depth entries at specific price levels, including merging updates and checking for price or level changes. Works with integer-based price and quantity values to represent financial market data. Used to process real-time order book updates in high-frequency trading systems.",
      "description_length": 379,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_float_with_milliseconds",
      "description": "Provides functions to parse, compare, and manipulate market depth update data with floating-point prices and millisecond timestamps. Operates on a record type containing price, quantity, and timestamp fields. Used to process real-time order book updates in high-frequency trading systems.",
      "description_length": 288,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_update_level_no_timestamp",
      "description": "type t = { price: float; size: float; is_buy: bool; is_new: bool; is_change: bool; is_delete: bool } Provides operations to parse, compare, and update order book entries without timestamp information. Works with price and size data to track changes in market depth. Used to process real-time trade data and maintain accurate order book states.",
      "description_length": 343,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement",
      "description": "Provides functions to initialize, update, and finalize settlement data for market sessions, including calculating totals and validating session completeness. Works with a record type containing session identifiers, timestamp ranges, and numeric settlement values. Used to process end-of-day financial settlements by aggregating and verifying transaction data from multiple sources.",
      "description_length": 381,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_settlement_int",
      "description": "Provides functions to parse, validate, and apply settlement instructions to market data updates. Operates on a record type containing timestamps, trade identifiers, and settlement details. Used to ensure consistency between trade execution and post-trade processing systems.",
      "description_length": 274,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open",
      "description": "Provides functions to initialize, update, and manage a market data session, including parsing incoming data streams and handling session timeouts. Works with a record type containing session identifiers, timestamps, and status flags. Used to maintain real-time financial data feeds and ensure synchronization with external market sources.",
      "description_length": 338,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_open_int",
      "description": "Provides functions to initialize, update, and query session-specific open interest data, including adding new entries and retrieving cumulative values. Works with a structured type containing session identifiers, timestamps, and numeric open interest metrics. Used to track real-time changes in trading volume during active market sessions.",
      "description_length": 340,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_num_trades",
      "description": "Provides functions to retrieve, update, and reset the number of trades in a market data session. Works with a record type containing a session identifier and a trade count. Used to track trade activity in real-time financial data processing pipelines.",
      "description_length": 251,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trading_session_date",
      "description": "Provides functions to parse, compare, and generate trading session dates based on a structured date format. Works with a record type containing session identifiers and date ranges. Used to validate session boundaries and determine active trading periods for financial data feeds.",
      "description_length": 279,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_depth_reject",
      "description": "Provides functions to parse, validate, and process market depth rejection messages, including extracting order IDs, timestamps, and rejection reasons. Works with structured data containing order book updates and system-generated rejection codes. Used to filter out invalid trades and log rejection details for compliance reporting.",
      "description_length": 331,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade",
      "description": "{ trade_id: string; price: float; quantity: int; timestamp: int } Provides functions to parse, validate, and aggregate trade data from market updates. Processes records containing trade identifiers, pricing, volume, and time stamps. Used to track real-time transaction flows and compute summary statistics for high-frequency trading systems.",
      "description_length": 341,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_compact",
      "description": "Provides functions to parse, validate, and aggregate trade data from compact binary representations. Operates on records containing timestamp, price, volume, and trade ID. Used to process high-frequency market data streams for real-time analytics and order book updates.",
      "description_length": 270,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_int",
      "description": "Provides functions to parse, validate, and apply trade updates to market data, including timestamp extraction, price normalization, and volume adjustment. Works with structured data containing trade identifiers, timestamps, prices, and quantities. Used to synchronize real-time trade data with order book snapshots in high-frequency trading systems.",
      "description_length": 349,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_last_trade_snapshot",
      "description": "Provides functions to parse, update, and serialize market data with a last trade snapshot, including timestamp synchronization and price validation. Works with a record type containing trade price, timestamp, and volume. Used to maintain real-time accuracy in trading systems during high-frequency data updates.",
      "description_length": 311,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_with_unbundled_indicator",
      "description": "Provides functions to parse, validate, and apply trade updates with unbundled market indicators, including timestamp extraction, price normalization, and volume adjustment. Works with structured data containing trade details, timestamps, and indicator values. Used to process real-time market feeds and update internal trade records with derived metrics.",
      "description_length": 354,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_trade_no_timestamp",
      "description": "type t = { trade_id: int; price: float; quantity: float; is_buyer_maker: bool } Provides functions to parse, validate, and transform trade data from market feeds, including extracting trade IDs, checking price validity, and calculating total value. Processes raw strings and structured records to support real-time trading systems and order book updates.",
      "description_length": 354,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask",
      "description": "{ bid: float; ask: float; bid_size: float; ask_size: float; timestamp: int64 } Processes real-time trade data by updating bid and ask prices and their corresponding sizes, extracting timestamps for synchronization. Works with financial market data streams to track price movements and liquidity changes. Used in high-frequency trading systems to monitor and react to market fluctuations.",
      "description_length": 387,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask2",
      "description": "{ bid: float; ask: float; bid_size: float; ask_size: float; timestamp: int64 } Processes real-time bid and ask price updates, including sizes and timestamps, for financial market data. Extracts and normalizes price and volume information from raw market feeds. Used to synchronize trading systems with live order book changes.",
      "description_length": 326,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_int",
      "description": "Provides functions to parse, update, and serialize bid-ask data with price and size fields. Works with a record type containing bid_price, bid_size, ask_price, ask_size, and timestamp. Used to process real-time market updates in high-frequency trading systems.",
      "description_length": 260,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_compact",
      "description": "type t = { bid: float; ask: float; bid_size: float; ask_size: float; timestamp: int64 } Processes real-time financial market updates by extracting and normalizing bid and ask prices along with their sizes and timestamps. Accepts raw market data streams and returns structured records for low-latency trading systems. Used to feed order book simulations and price correlation analyses.",
      "description_length": 384,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_bid_ask_no_time_stamp",
      "description": "type t = { bid: float; ask: float; bid_size: float; ask_size: float } Provides functions to create, update, and merge bid-ask data without timestamp information. Operates on price and size values for financial market data. Used to track real-time order book changes in high-frequency trading systems.",
      "description_length": 300,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_volume",
      "description": "Provides functions to initialize, update, and retrieve session volume data for financial markets. Works with a record type containing a volume counter and a timestamp. Used to track and report trading volume during specific market sessions for real-time analytics.",
      "description_length": 264,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_open_interest",
      "description": "Provides functions to parse, update, and aggregate open interest data from market feeds. Works with a record type containing instrument identifiers, timestamp, and numerical open interest values. Used to maintain real-time position tracking in trading systems during market data updates.",
      "description_length": 287,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high",
      "description": "Provides functions to initialize, update, and retrieve high price values within a trading session, including resetting the session high at specified intervals. Works with a record type containing a current high value and a timestamp of the last update. Used to track intraday price peaks for real-time market analysis and alerting systems.",
      "description_length": 339,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_high_int",
      "description": "Provides functions to initialize, update, and retrieve high integer values representing market data session highs. Works with a record type containing a timestamp and an integer value. Used to track and manage the highest price or volume during a specific market session.",
      "description_length": 271,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low",
      "description": "Provides functions to initialize, update, and terminate a market data session, including parsing incoming data streams and extracting timestamped price information. Works with structured data containing time-stamped financial instrument values and session state transitions. Used to manage real-time data feeds in trading systems, ensuring consistent state updates and error handling during session lifecycles.",
      "description_length": 410,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Market_data_update_session_low_int",
      "description": "Provides functions to initialize, update, and terminate a market data session, with support for handling price changes, trade volumes, and timestamps. Operates on a record type containing session identifiers, current market state, and update counters. Used to manage real-time financial data streams in high-frequency trading applications.",
      "description_length": 339,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order",
      "description": "Provides functions to validate, transform, and persist a single order structure, including checking required fields and converting between internal and external representations. Works with a record type containing order details such as item identifiers, quantities, and timestamps. Used to process incoming order submissions in a trading system, ensuring data integrity before storage.",
      "description_length": 385,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_single_order_int",
      "description": "Provides functions to validate, transform, and prepare a single order for submission, including parsing input data, checking constraints, and generating a standardized output format. Works with a record type containing order details such as product identifiers, quantities, and timestamps. Used to process user-submitted orders in a trading system, ensuring data consistency before dispatching to backend services.",
      "description_length": 414,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_flatten_position_order",
      "description": "Provides functions to normalize and merge nested position data into a flat structure, including a `flatten` function that processes a list of positions with nested orders. Works with a record type containing nested lists of order details and position identifiers. Used to prepare hierarchical position data for reporting systems that require a single-level representation.",
      "description_length": 372,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order",
      "description": "Provides functions to validate, cancel, and replace order entries, including checking order existence, updating status, and applying new parameters. Works with order records containing identifiers, timestamps, and status flags. Used to manage real-time order modifications in trading systems, ensuring atomic updates and consistency.",
      "description_length": 333,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_replace_order_int",
      "description": "Provides functions to cancel an existing order and replace it with a new one, including validation checks for order compatibility. Works with order data structures containing identifiers, timestamps, and status flags. Used in trading systems to manage real-time order modifications during market fluctuations.",
      "description_length": 309,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Cancel_order",
      "description": "type t = { order_id: int; timestamp: float; status: string } Provides functions to validate, cancel, and update the status of an order record. Operates on a structured type containing order identifier, time of creation, and current state. Used to manage order lifecycle in a trading system by modifying status and ensuring cancellation constraints are met.",
      "description_length": 356,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder",
      "description": "Provides functions to validate, transform, and persist order data structures representing new customer orders. Operates on a record type containing fields like order_id, customer_info, and item_list. Used to process incoming orders from external systems, ensuring data integrity before storage.",
      "description_length": 294,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Submit_new_ocoorder_int",
      "description": "Provides functions to validate, transform, and persist new order data, including parsing input records, checking constraints, and generating unique order identifiers. Works with structured data containing customer details, product listings, and transaction timestamps. Used to process incoming orders from external systems and prepare them for database insertion.",
      "description_length": 363,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_request",
      "description": "{ order_id: string; side: Side.t; symbol: string; limit: int; offset: int } Provides functions to construct, validate, and serialize requests for fetching open orders, including filtering by side, symbol, and pagination parameters. Works with order identifiers, side enums, and numeric limits to support trading system queries. Used to retrieve active orders from a market data feed with specific criteria.",
      "description_length": 406,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_request",
      "description": "Provides functions to parse, validate, and process historical order fill data from external sources. Works with structured data types including timestamps, order IDs, and trade quantities. Used to generate reports on past trading activity and reconcile transaction records.",
      "description_length": 273,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fills_reject",
      "description": "Provides functions to filter, aggregate, and analyze historical order fill data, including calculating total quantities and identifying rejected fills. Works with a record type containing order identifiers, timestamps, fill quantities, and status indicators. Used to generate reports on rejected trades and track fill performance over specific time intervals.",
      "description_length": 359,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_request",
      "description": "{ user_id: int; session_token: string; } Provides functions to create a request with a user ID and session token, and to extract these values from the request. Used to validate user sessions and retrieve active positions in a trading system.",
      "description_length": 241,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Current_positions_reject",
      "description": "Provides functions to filter and validate current positions by checking against a set of rejected identifiers. Works with a record type containing a list of position identifiers and a set of rejected values. Used to ensure active positions do not include entries marked as invalid or obsolete.",
      "description_length": 293,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Order_update",
      "description": "{ order_id: int; quantity: int; price: float; status: string } Provides functions to update order quantities, adjust prices, and transition order statuses based on specific business rules. Operates on structured order data to reflect real-time changes in a trading or inventory system. Used to apply incremental updates to active orders without reconstructing the entire order record.",
      "description_length": 384,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Open_orders_reject",
      "description": "type t = { order_id: string; reason: string; timestamp: float } Provides functions to create, inspect, and serialize rejection records for financial orders. Operates on structured data containing order identifiers, rejection reasons, and time stamps. Used to log and communicate order rejections in trading systems.",
      "description_length": 315,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_order_fill_response",
      "description": "{ order_id: string; filled_quantity: int; fill_price: float; timestamp: int } Provides functions to parse, validate, and extract key details from trade fill responses, including checking fill completeness and calculating total cost. Operates on structured data containing order identifiers, quantities, prices, and timestamps. Used to process real-time market data feeds and generate audit logs for executed trades.",
      "description_length": 415,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Position_update",
      "description": "type t = { x : int; y : int; velocity : float; direction : float } Provides functions to adjust coordinates based on velocity and direction, calculate new positions, and clamp values within a defined range. Operates on structured position data with numeric attributes for movement and orientation. Used to update entity positions in a game loop and ensure boundaries are respected.",
      "description_length": 381,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_accounts_request",
      "description": "Provides functions to construct, validate, and serialize trade account requests, including parsing input data, checking required fields, and generating JSON output. Works with a record type containing account identifiers, trade parameters, and timestamps. Used to process user-submitted trade account applications and ensure compliance with system constraints.",
      "description_length": 360,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Trade_account_response",
      "description": "Provides functions to parse and validate trade account responses, including extracting account identifiers, transaction timestamps, and status codes. Works with a record type containing fields for account details, trade history, and error messages. Used to process API responses from financial systems and generate structured data for downstream reporting.",
      "description_length": 356,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_request",
      "description": "Provides functions to construct, modify, and validate exchange list requests, including adding or removing items, setting timestamps, and checking request validity. Works with a record type containing fields for item lists, timestamps, and status flags. Used to manage data synchronization between distributed systems by generating structured request payloads.",
      "description_length": 360,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Exchange_list_response",
      "description": "Provides functions to parse, filter, and transform HTTP response bodies into structured data, including extracting status codes, headers, and JSON content. Works with raw string data, HTTP status codes, and JSON values from the Yojson library. Used to process API responses in web service integrations, enabling direct access to nested response fields.",
      "description_length": 352,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_exchange_request",
      "description": "Provides functions to create, manipulate, and validate symbols used in exchange requests, including parsing from strings and generating unique identifiers. Works with a record type containing fields for symbol name, exchange identifier, and metadata. Used to ensure consistency in symbol representation across trade execution and order routing systems.",
      "description_length": 352,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Underlying_symbols_for_exchange_request",
      "description": "Provides functions to extract and normalize symbol identifiers from exchange requests, including parsing raw strings into structured representations and resolving aliases. Works with string inputs and a record type containing symbol metadata and exchange-specific mappings. Used to standardize symbols before processing trade orders or market data queries.",
      "description_length": 356,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbols_for_underlying_request",
      "description": "Provides functions to create, manipulate, and compare symbol representations used in request parsing, including parsing from strings, generating unique identifiers, and checking equality. Works with custom types encapsulating string-based symbols and their metadata. Used to standardize symbol handling in request validation and transformation pipelines.",
      "description_length": 354,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Symbol_search_request",
      "description": "{ query: string; max_results: int; include_deprecated: bool } Processes search queries for symbolic information, limiting results and controlling deprecation filtering. Accepts string queries, integer result caps, and boolean flags to refine searches. Used to fetch relevant symbols from a database or API with precise constraints.",
      "description_length": 331,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_for_symbol_request",
      "description": "Provides functions to validate and extract security definitions from symbol requests, including checking required fields and parsing nested structures. Works with a record type containing fields like `symbol`, `security_type`, and `parameters`. Used to enforce access control policies during financial instrument queries.",
      "description_length": 321,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_response",
      "description": "Provides functions to parse, validate, and serialize security definitions from JSON, including checks for required fields and type consistency. Works with nested records and variant types representing different security schemes. Used to enforce authentication requirements in API specifications and generate secure configuration outputs.",
      "description_length": 337,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Security_definition_reject",
      "description": "Provides functions to check, apply, and combine security policies represented as records with a boolean flag indicating rejection status. Operates on records containing policy rules and enforcement actions. Used to enforce access control by rejecting requests based on configured security criteria.",
      "description_length": 298,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_request",
      "description": "type t = { account_id : string; timestamp : int } Provides functions to create a request with a specific account ID and timestamp, and to extract these values for processing. Works with structured data containing identifiers and time-based markers. Used to generate and validate balance inquiry requests in financial transaction systems.",
      "description_length": 337,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_reject",
      "description": "Provides functions to check if an account balance meets a minimum threshold, reject transactions that would bring the balance below this limit, and calculate the required amount to reach the threshold. Works with account data structures containing balance and transaction details. Used to enforce financial constraints during payment processing and prevent overdrafts.",
      "description_length": 368,
      "index": 75,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_update",
      "description": "type t = { account_id : int; balance : float; timestamp : int } Provides functions to apply a delta to a balance, validate transaction limits, and generate a log entry. Operates on structured data representing financial accounts with numeric identifiers, monetary values, and time-stamped updates. Used to process real-time transaction updates in a payment system, ensuring accurate and auditable balance modifications.",
      "description_length": 419,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment",
      "description": "{ account_id : string; balance : int; } Provides functions to add, subtract, and validate balance changes, ensuring non-negative values. Works with account data structured as records containing an ID and integer balance. Used to process transaction updates in a financial system, adjusting balances while enforcing constraints.",
      "description_length": 327,
      "index": 77,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_reject",
      "description": "Handles adjustments to account balances by rejecting specified changes, ensuring financial integrity. Operates on a record type containing account identifiers, adjustment amounts, and rejection reasons. Used to reverse erroneous transactions and log detailed rejection metadata for audit purposes.",
      "description_length": 297,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Account_balance_adjustment_complete",
      "description": "type t = { account_id: string; amount: int; timestamp: float; reason: string } Provides functions to validate adjustments, calculate net changes, and apply updates to account balances. Operates on structured records containing account identifiers, numeric values, timestamps, and adjustment reasons. Used to process financial corrections, reverse transactions, and maintain accurate ledger entries.",
      "description_length": 398,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_request",
      "description": "{ account_id: string; start_date: Ptime.t; end_date: Ptime.t; } Processes requests to retrieve financial data over specified time ranges, supporting date-based filtering and aggregation. Accepts string identifiers and timestamp ranges to query historical balance information from a financial database. Used to generate detailed transaction summaries for auditing and reporting purposes.",
      "description_length": 386,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balances_reject",
      "description": "Provides functions to filter and validate historical account balances, including checking for negative values and ensuring chronological order. Works with a record type containing account identifiers, timestamps, and balance amounts. Used to reject invalid entries before processing financial reports.",
      "description_length": 301,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_account_balance_response",
      "description": "Provides functions to parse and validate financial data from historical account balance responses, including extracting timestamps, currency codes, and numeric balance values. Works with structured data containing nested JSON-like records and optional fields. Used to process API responses for auditing and reconciliation tasks.",
      "description_length": 328,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.User_message",
      "description": "type t = { user_id: int; message: string; timestamp: float } Provides functions to create, parse, and validate messages containing user identifiers, text content, and time stamps. Operates on structured records with specific fields for user data and message metadata. Used to process incoming user communications in a messaging system, ensuring proper formatting and data integrity.",
      "description_length": 382,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.General_log_message",
      "description": "type t = { level: string; timestamp: string; message: string; module_name: string option } Provides functions to parse log messages from a string into a structured record, extract specific fields like level and timestamp, and format structured data back into a log line. Operates on string-based data and optional module names to enrich log context. Used to standardize log processing in distributed systems for consistent monitoring and debugging.",
      "description_length": 448,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_add",
      "description": "Provides functions to create and validate journal entries, including parsing input data and ensuring required fields are present. Works with a record type containing fields like title, content, and timestamp. Used to process user-submitted entries before storing them in a persistent data store.",
      "description_length": 295,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_request",
      "description": "Provides functions to parse, validate, and filter journal entries based on date ranges and entry types. Works with a record type containing fields for date, entry type, and content. Used to process user-specified queries for retrieving filtered journal data.",
      "description_length": 258,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entries_reject",
      "description": "Provides functions to filter and remove journal entries based on specific criteria such as date ranges and status flags. Works with a record type containing fields like entry_id, timestamp, and status. Used to clean transaction logs by excluding entries that fall outside a defined time window or have a rejected status.",
      "description_length": 320,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Journal_entry_response",
      "description": "Provides functions to parse, format, and validate journal entry responses, including extracting timestamps, checking content validity, and generating structured output. Works with a record type containing fields like `entry_id`, `timestamp`, and `response_text`. Used to process user-submitted journal entries in a logging system, ensuring data consistency and proper formatting for storage.",
      "description_length": 391,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Alert_message",
      "description": "type t = { message : string; level : string; timestamp : float } Provides functions to create, format, and compare alert messages with severity levels and timestamps. Works with structured data containing text, severity indicators, and time values. Used to log system warnings, track event sequences, and filter notifications by urgency.",
      "description_length": 337,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_request",
      "description": "Represents a request for historical price data with fields for asset identifier, start and end timestamps, and resolution interval. Processes queries to retrieve time-series price records from external data sources. Used to fetch cryptocurrency or stock price history for backtesting trading strategies or generating performance reports.",
      "description_length": 337,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_header",
      "description": "{ timestamp: int; symbol: string; interval: string; exchange: string; } Provides functions to parse, extract, and validate time-stamped financial data headers containing asset symbols, trading intervals, and exchange information. Works with structured records representing stock or cryptocurrency price data responses. Used to process API outputs for real-time market analysis and historical data tracking.",
      "description_length": 406,
      "index": 91,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_reject",
      "description": "type t = { symbol: string; date: Ptime.t; open_price: float; high: float; low: float; close: float; volume: int } Provides functions to filter out invalid price entries, calculate daily price changes, and validate data integrity based on timestamp ranges. Works with time-stamped financial records to ensure consistency and accuracy in historical datasets. Used to clean and preprocess stock market data before analysis or visualization.",
      "description_length": 437,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response",
      "description": "{ price: float; timestamp: int; currency_pair: string; exchange: string } Provides functions to extract price, timestamp, currency pair, and exchange from structured historical price data. Operates on a record type containing financial time series data. Used to process and analyze historical trading data for specific currency pairs on various exchanges.",
      "description_length": 355,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response",
      "description": "{ symbol: string; timestamp: int64; price: float; volume: float; is_buyer_maker: bool } Processes tick-level financial data, extracting and structuring price, volume, and trade direction from market feeds. Accepts raw market data streams and returns normalized records for analysis. Used to build real-time trade monitoring systems and historical price tracking tools.",
      "description_length": 368,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_record_response_int",
      "description": "type t = { price: float; timestamp: int; currency_pair: string; exchange: string } Provides functions to extract price, timestamp, currency pair, and exchange from structured historical price data. Operates on a record type containing financial market data with time-stamped values. Used to process and analyze historical trading data for specific currency pairs on various exchanges.",
      "description_length": 384,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_tick_record_response_int",
      "description": "Provides functions to parse and extract timestamp, price, and volume from raw data strings. Works with a record type containing a timestamp, price, and volume as integers. Used to process and analyze high-frequency trading data for real-time market analysis.",
      "description_length": 258,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi.Historical_price_data_response_trailer",
      "description": "type t = { price: float; timestamp: int; currency: string; } Provides functions to extract price, timestamp, and currency from structured historical price data. Operates on a record type containing numeric, integer, and string fields. Used to process and validate responses from financial data APIs.",
      "description_length": 299,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Dtcprotocol_piqi",
      "description": "The Dtcprotocol_piqi module set provides structured data handling and serialization for financial trading systems, encompassing message encoding/decoding, authentication, market data processing, order management, and session tracking. It defines types like `t` for authentication requests, market depth levels, trade records, and session states, with operations for validation, parsing, and transformation. Examples include parsing market data feeds to extract bid/ask prices, validating order modifications, and serializing session tokens for secure API interactions.",
      "description_length": 568,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb.Encoding",
      "description": "Provides functions to parse a string into an encoding, raise an exception on failure, write an encoding to a byte buffer, and convert an encoding to a string. Works with byte buffers, encoding structures, and metadata records. Used to serialize and deserialize structured data in binary formats.",
      "description_length": 295,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "dtc-pb",
      "description": "Handles message serialization and deserialization using DTC protocol definitions, leveraging protobuf schemas for structured data exchange. Works with OCaml types generated from .proto files, enabling seamless communication with market data and trading systems. Used to integrate Sierra Chart with internal backend services for real-time data visualization and trade execution.",
      "description_length": 377,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dtc_pb",
      "description": "handles structured data serialization and financial trading operations, offering encoding/decoding, authentication, market data processing, and order management. It defines types such as authentication requests, market depth, trade records, and session states, with functions to parse, validate, and serialize these structures. Operations include converting encodings to byte buffers, raising exceptions on parsing errors, and extracting bid/ask prices from market data feeds. Examples include validating order updates, serializing session tokens, and transforming binary data into structured records for API consumption.",
      "description_length": 621,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 102,
    "meaningful_modules": 102,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 621,
    "min_description_length": 221,
    "avg_description_length": 347.12745098039215,
    "embedding_file_size_mb": 0.37093067169189453
  }
}